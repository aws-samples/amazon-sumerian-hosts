/*! For license information please see host.core.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("HOST",[],t):"object"==typeof exports?exports.HOST=t():e.HOST=t()}("undefined"!=typeof self?self:"undefined"!=typeof global?global:this,(function(){return(()=>{"use strict";var __webpack_modules__={437:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ core)\n});\n\n;// CONCATENATED MODULE: ./src/core/Deferred.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * The built-in class for asynchronous Promises.\n * @external Promise\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n */\n\n/**\n * A Promise object that can be resolved, rejected or canceled at any time by the\n * user.\n *\n * @extends external:Promise\n */\nvar Deferred = /*#__PURE__*/function (_Promise) {\n  _inherits(Deferred, _Promise);\n\n  var _super = _createSuper(Deferred);\n\n  /**\n   * @constructor\n   *\n   * @param {Function} [executable=() => {}] - The function to be executed by the\n   * constructor, during the process of constructing the promise. The signature\n   * of this is expected to be: executable(  resolutionFunc, rejectionFunc, cancellationFunc ).\n   * @param {Function=} onResolve - Optional function to execute once the promise\n   * is resolved.\n   * @param {Function=} onReject - Optional function to execute once the promise\n   * is rejected.\n   * @param {Function=} onCancel - Optional function to execute if the user cancels\n   * the promise. Canceling results in the promise having a status of \'resolved\'.\n   */\n  function Deferred() {\n    var _this;\n\n    var executable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n    var onResolve = arguments.length > 1 ? arguments[1] : undefined;\n    var onReject = arguments.length > 2 ? arguments[2] : undefined;\n    var onCancel = arguments.length > 3 ? arguments[3] : undefined;\n\n    _classCallCheck(this, Deferred);\n\n    if (typeof executable !== \'function\') {\n      throw new Error("Cannot create new Deferred. Executable must be a function.");\n    }\n\n    if (typeof onResolve !== \'undefined\' && typeof onResolve !== \'function\') {\n      throw new Error("Cannot create new Deferred. OnResolve must be a function.");\n    }\n\n    if (typeof onReject !== \'undefined\' && typeof onReject !== \'function\') {\n      throw new Error("Cannot create new Deferred. OnReject must be a function.");\n    }\n\n    if (typeof onCancel !== \'undefined\' && typeof onCancel !== \'function\') {\n      throw new Error("Cannot create new Deferred. OnCancel must be a function.");\n    }\n\n    var res;\n    var rej;\n    var cancel;\n    var status = {\n      resolved: false,\n      rejected: false,\n      canceled: false,\n      pending: true\n    };\n    _this = _super.call(this, function (resolve, reject) {\n      // Store the resolver\n      res = function res(value) {\n        if (status.pending) {\n          status.resolved = true;\n          status.pending = false;\n\n          if (typeof onResolve === \'function\') {\n            value = onResolve(value);\n          }\n\n          return resolve(value);\n        }\n      }; // Store the rejecter\n\n\n      rej = function rej(value) {\n        if (status.pending) {\n          status.rejected = true;\n          status.pending = false;\n\n          if (typeof onReject === \'function\') {\n            value = onReject(value);\n          }\n\n          return reject(value);\n        }\n      }; // Store the canceler\n\n\n      cancel = function cancel(value) {\n        if (status.pending) {\n          status.canceled = true;\n          status.pending = false;\n\n          if (typeof onCancel === \'function\') {\n            value = onCancel(value);\n          }\n\n          return resolve(value);\n        }\n      }; // Run the executable with custom resolver and rejecter\n\n\n      executable(res, rej, cancel);\n    });\n    _this._status = status;\n    _this._resolve = res;\n    _this._reject = rej;\n    _this._cancel = cancel;\n    _this._executable = executable;\n    return _this;\n  }\n  /**\n   * Gets the resolved state of the promise.\n   *\n   * @readonly\n   */\n\n\n  _createClass(Deferred, [{\n    key: "resolved",\n    get: function get() {\n      return this._status.resolved;\n    }\n    /**\n     * Gets the rejected state of the promise.\n     *\n     * @readonly\n     */\n\n  }, {\n    key: "rejected",\n    get: function get() {\n      return this._status.rejected;\n    }\n    /**\n     * Gets the canceled state of the promise.\n     *\n     * @readonly\n     */\n\n  }, {\n    key: "canceled",\n    get: function get() {\n      return this._status.canceled;\n    }\n    /**\n     * Gets the pending state of the promise.\n     *\n     * @readonly\n     */\n\n  }, {\n    key: "pending",\n    get: function get() {\n      return this._status.pending;\n    }\n    /**\n     * Force the promise to resolve.\n     *\n     * @param {any=} value - Value to pass to the resolver.\n     *\n     * @returns {any} - The return value of the resolver function.\n     */\n\n  }, {\n    key: "resolve",\n    value: function resolve(value) {\n      return this._resolve(value);\n    }\n    /**\n     * Force the promise to reject.\n     *\n     * @param {any=} value - Value to pass to the rejecter.\n     *\n     * @returns {any} - The return value of the rejecter function.\n     */\n\n  }, {\n    key: "reject",\n    value: function reject(value) {\n      return this._reject(value);\n    }\n    /**\n     * Force the promise to resolve and set the canceled state to true.\n     *\n     * @param {any=} value - Value to pass to the canceller.\n     *\n     * @returns {any} - The return value of the canceller function.\n     */\n\n  }, {\n    key: "cancel",\n    value: function cancel(value) {\n      return this._cancel(value);\n    }\n    /**\n     * Run the promise function to try to resolve the promise. Promise must be\n     * pending.\n     *\n     * @param {...any} args - Optional arguments to pass after resolve and reject.\n     */\n\n  }, {\n    key: "execute",\n    value: function execute() {\n      if (this.pending) {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        this._executable.apply(this, [this._resolve, this._reject, this._cancel].concat(args));\n      }\n    }\n    /**\n     * Return a canceled deferred promise.\n     *\n     * @param {any=} value - Value to cancel the promise with.\n     *\n     * @returns {Deferred}\n     */\n\n  }], [{\n    key: "cancel",\n    value: function cancel(value) {\n      return new Deferred(function (_resolve, _reject, cancel) {\n        cancel(value);\n      });\n    }\n    /**\n     * Return a new Deferred promise that will resolve or reject once all promises\n     * in the input array have been resolved or one promise is canceled or rejected.\n     * Promises in the array that are Deferred promises will be manually resolved,\n     * rejected or canceled when calling resolve, reject or cancel on the return promise.\n     *\n     * @param {Array.<any>} iterable - An iterable such as an array.\n     * @param {Function=} onResolve - Optional function to execute once the promise\n     * is resolved.\n     * @param {Function=} onReject - Optional function to execute once the promise\n     * is rejected.\n     * @param {Function=} onCancel - Optional function to execute if the user cancels\n     * the promise. Canceling results in the promise having a status of \'canceled\'.\n     *\n     * @returns Deferred\n     */\n\n  }, {\n    key: "all",\n    value: function all(iterable, onResolve, onReject, onCancel) {\n      if (iterable == null || typeof iterable[Symbol.iterator] !== \'function\') {\n        var e = "Cannot execute Deferred.all. First argument must be iterable.";\n\n        if (typeof onReject === \'function\') {\n          e = onReject(e);\n        }\n\n        return Deferred.reject(e);\n      }\n\n      var array = _toConsumableArray(iterable);\n\n      var deferred = array.filter(function (item) {\n        return item instanceof Deferred;\n      });\n      var result = new Deferred(undefined, function (resolveValue) {\n        deferred.forEach(function (item) {\n          item.resolve(resolveValue);\n        });\n        deferred.length = 0;\n\n        if (typeof onResolve === \'function\') {\n          return onResolve(resolveValue);\n        } else {\n          return resolveValue;\n        }\n      }, function (error) {\n        deferred.forEach(function (item) {\n          item.reject(error);\n        });\n        deferred.length = 0;\n\n        if (typeof onReject === \'function\') {\n          return onReject(error);\n        } else {\n          return error;\n        }\n      }, function (cancelValue) {\n        deferred.forEach(function (item) {\n          item.cancel(cancelValue);\n        });\n        deferred.length = 0;\n\n        if (typeof onCancel === \'function\') {\n          return onCancel(cancelValue);\n        } else {\n          return cancelValue;\n        }\n      });\n      var numItems = array.length;\n      var itemTracker = {\n        failed: false,\n        numResolved: 0,\n        resolutions: []\n      };\n      array.forEach(function (item, index) {\n        if (itemTracker.failed) {\n          return;\n        } else if (!(item instanceof Promise)) {\n          itemTracker.resolutions[index] = item;\n          itemTracker.numResolved += 1;\n\n          if (itemTracker.numResolved === numItems) {\n            result.resolve(itemTracker.resolutions);\n          }\n\n          return;\n        }\n\n        item.then(function (value) {\n          if (!itemTracker.failed && !item.canceled) {\n            itemTracker.resolutions[index] = value;\n            itemTracker.numResolved += 1;\n\n            if (itemTracker.numResolved === numItems) {\n              result.resolve(itemTracker.resolutions);\n            }\n          } else if (!itemTracker.failed) {\n            itemTracker.failed = true;\n            result.cancel(value);\n          }\n        }, function (error) {\n          if (!itemTracker.failed) {\n            itemTracker.failed = true;\n            result.reject(error);\n          }\n        });\n      });\n      return result;\n    }\n  }]);\n\n  return Deferred;\n}( /*#__PURE__*/_wrapNativeSuper(Promise));\n\n/* harmony default export */ const core_Deferred = (Deferred);\n;// CONCATENATED MODULE: ./src/core/Utils.js\nfunction Utils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Utils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Utils_createClass(Constructor, protoProps, staticProps) { if (protoProps) Utils_defineProperties(Constructor.prototype, protoProps); if (staticProps) Utils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * A collection of useful generic functions.\n *\n * @hideconstructor\n */\n\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    Utils_classCallCheck(this, Utils);\n  }\n\n  Utils_createClass(Utils, null, [{\n    key: "createId",\n    value:\n    /**\n     * @static\n     *\n     * Generate a unique id\n     *\n     * @returns {String}\n     */\n    function createId() {\n      return \'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n        var randomNumber = Math.floor((Date.now() + Math.random() * 16) % 16);\n\n        if (c === \'x\') {\n          return randomNumber.toString(16);\n        } // Set bit 6 and 7 to 0 and 1\n\n\n        return (randomNumber & 0x3 | 0x8).toString(16);\n      });\n    }\n    /**\n     * @static\n     *\n     * Check a name string against an array of strings to determine if it is unique.\n     * If it isn\'t, append incremented trailing integers to the end of the name\n     * until it is unique.\n     *\n     * @param {string} name - String name to make unique.\n     * @param {Array.<string>=} nameArray - Array of string names to check agains.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "getUniqueName",\n    value: function getUniqueName(name) {\n      var nameArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      // If the name isn\'t in the array return it right away\n      if (!nameArray.includes(name)) {\n        return name;\n      }\n\n      var nameSet = new Set(nameArray); // Separate the name into string and trailing numbers\n\n      var matchGroup = name.match(/\\d*$/);\n      var index = matchGroup.index;\n      var baseName = name.slice(0, index);\n      var increment = Number(matchGroup[0]); // Find the highest trailing number value for the base of the name\n\n      nameSet.forEach(function (setName) {\n        var setMatchGroup = setName.match(/\\d*$/);\n\n        if (setName.slice(0, setMatchGroup.index) === baseName) {\n          var setIncrement = Number(setMatchGroup[0]);\n\n          if (setIncrement > increment) {\n            increment = setIncrement;\n          }\n        }\n      }); // Increment the highest trailing number and append to the name\n\n      return "".concat(baseName).concat(increment + 1);\n    }\n    /**\n     * Return a deferred promise that will wait a given number of seconds before\n     * resolving. Pass delta time in milliseconds to the deferred promise\'s execute\n     * method in an update loop to progress time.\n     *\n     * @param {number} [seconds=0] - Number of seconds to wait before resolving.\n     * @param {Object=} options - Optional options object\n     * @param {Function} [options.onFinish] - Callback to execute once the wait time\n     * is met.\n     * @param {Function=} options.onProgress - Callback to execute each time the wait\n     * time progresses towards the target number of seconds. The amount of progress\n     * as a 0-1 percentage is passed as an argument.\n     * @param {Function=} options.onCancel - Callback to execute if the user cancels\n     * the wait before completion.\n     * @param {Function=} options.onError - Callback to execute if the wait stops\n     * because an error is encountered. The error message is passed as a parameter.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "wait",\n    value: function wait() {\n      var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onFinish = _ref.onFinish,\n          onProgress = _ref.onProgress,\n          onCancel = _ref.onCancel,\n          onError = _ref.onError;\n\n      // Make sure seconds is numeric\n      if (typeof seconds !== \'number\') {\n        console.warn("Invalid seconds value ".concat(seconds, " for wait. Defaulting to 0."));\n        seconds = 0;\n      } // Resolve immediately if the wait time is not greater than 0\n\n\n      if (seconds <= 0) {\n        if (typeof onFinish === \'function\') {\n          onFinish();\n        }\n\n        return core_Deferred.resolve();\n      }\n\n      var currentTime = 0;\n      var totalTime = seconds * 1000; // convert to milliseconds\n      // Executable to pass to Deferred, meant to be run in an update loop\n\n      var onUpdate = function onUpdate(resolve, reject, _cancel) {\n        var deltaTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n        if (typeof deltaTime !== \'number\') {\n          var e = new Error("Invalid property wait deltaTime. DeltaTime must be a number.");\n          reject(e);\n          return;\n        } // Make sure time has passed\n\n\n        if (deltaTime === 0) {\n          return;\n        } // Signal progress\n\n\n        currentTime += deltaTime;\n\n        if (currentTime < 0) {\n          currentTime = 0;\n        }\n\n        if (typeof onProgress === \'function\') {\n          onProgress(Math.min(currentTime / totalTime, 1));\n        } // Signal completion once time is up\n\n\n        if (currentTime >= totalTime) {\n          resolve();\n        }\n      };\n\n      return new core_Deferred(onUpdate, onFinish, onError, onCancel);\n    }\n    /**\n     * Get a random float number between a min (inclusive) and max (exclusive) value\n     * @param {number} min minimum value\n     * @param {number} max maximum value\n     * @returns {float}\n     */\n\n  }, {\n    key: "getRandomFloat",\n    value: function getRandomFloat(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n    /**\n     * Get a random integer number between a min (inclusive) and max (exclusive) value\n     * @param {number} min minimum value\n     * @param {number} max maximum value\n     * @returns {integer}\n     */\n\n  }, {\n    key: "getRandomInt",\n    value: function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n  }]);\n\n  return Utils;\n}();\n\n/* harmony default export */ const core_Utils = (Utils);\n;// CONCATENATED MODULE: ./src/core/MathUtils.js\nfunction MathUtils_toConsumableArray(arr) { return MathUtils_arrayWithoutHoles(arr) || MathUtils_iterableToArray(arr) || MathUtils_unsupportedIterableToArray(arr) || MathUtils_nonIterableSpread(); }\n\nfunction MathUtils_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction MathUtils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MathUtils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MathUtils_arrayLikeToArray(o, minLen); }\n\nfunction MathUtils_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction MathUtils_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return MathUtils_arrayLikeToArray(arr); }\n\nfunction MathUtils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction MathUtils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction MathUtils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MathUtils_createClass(Constructor, protoProps, staticProps) { if (protoProps) MathUtils_defineProperties(Constructor.prototype, protoProps); if (staticProps) MathUtils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\nvar RadianToDegree = 180 / Math.PI;\nvar DegreeToRadian = Math.PI / 180;\n/**\n * A collection of useful math functions.\n *\n * @hideconstructor\n */\n\nvar MathUtils = /*#__PURE__*/function () {\n  function MathUtils() {\n    MathUtils_classCallCheck(this, MathUtils);\n  }\n\n  MathUtils_createClass(MathUtils, null, [{\n    key: "toDegrees",\n    value:\n    /**\n     * Convert the given angle from radians to degrees.\n     *\n     * @param {number} radians - Angle in radians.\n     *\n     * @returns {number} - Angle in degrees.\n     */\n    function toDegrees(radians) {\n      return radians * RadianToDegree;\n    }\n    /**\n     * Convert the given angle from degrees to radians.\n     *\n     * @param {number} degrees - Angle in degrees.\n     *\n     * @returns {number} - Angle in radians.\n     */\n\n  }, {\n    key: "toRadians",\n    value: function toRadians(degrees) {\n      return degrees * DegreeToRadian;\n    }\n    /**\n     * Linearly interpolate between two values.\n     *\n     * @param {number} from - Start value.\n     * @param {number} to - Target value.\n     * @param {number} factor - 0-1 amount to interpolate between from and to.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "lerp",\n    value: function lerp(from, to, factor) {\n      return from + (to - from) * factor;\n    }\n    /**\n     * Clamp a number between 2 values.\n     *\n     * @param {number} value - Value to clamp.\n     * @param {number} [min=0] - Minumum value.\n     * @param {number} [max=1] - Maximum value.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "clamp",\n    value: function clamp(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Calculates the closest point on a given 2D line segement\n     * from a given 2D point.\n     *\n     * @param {Array.<number>} a - First point on line segment.\n     * @param {Array.<number>} b - Second point on line segment.\n     * @param {Array.<number>} p - 2D point.\n     *\n     * @returns {Array.<number>}\n     */\n\n  }, {\n    key: "closestPointOnLine",\n    value: function closestPointOnLine(a, b, p) {\n      var distSqr = MathUtils.distanceSquared(a, b); // Line segment is a single point\n\n      if (distSqr === 0) {\n        return a;\n      }\n\n      var t = ((p[0] - a[0]) * (b[0] - a[0]) + (p[1] - a[1]) * (b[1] - a[1])) / distSqr;\n\n      var point = MathUtils_toConsumableArray(a);\n\n      if (t > 1) {\n        point = MathUtils_toConsumableArray(b);\n      } else if (t > 0) {\n        point = [a[0] + t * (b[0] - a[0]), a[1] + t * (b[1] - a[1])];\n      }\n\n      return point;\n    }\n    /**\n     * Gets the distance squared for two 2D points.\n     * @param {Array.<number>} a - 2D point.\n     * @param {Array.<number>} b - 2D point.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "distanceSquared",\n    value: function distanceSquared(a, b) {\n      return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]);\n    }\n    /**\n     * Triangulates a set of 2D points using an implementation\n     * of the Bowyer-Watson incremental Delaunay triangulation.\n     *\n     * @param {Array.<Array.<number>>} vertices - Array of 2D points.\n     *\n     * @returns {Array.<Array<number>>} - Array of triangle indices.\n     */\n\n  }, {\n    key: "getDelaunayTriangulation",\n    value: function getDelaunayTriangulation(vertices) {\n      if (!vertices || vertices.length < 3) {\n        throw new Error("Cannot get delaunay triangulation for points ".concat(vertices, ". Input must contain at least three points."));\n      }\n\n      var minX = Number.POSITIVE_INFINITY;\n      var minY = Number.POSITIVE_INFINITY;\n      var maxX = Number.NEGATIVE_INFINITY;\n      var maxY = Number.NEGATIVE_INFINITY;\n      vertices.forEach(function (v) {\n        minX = v[0] < minX ? v[0] : minX;\n        minY = v[1] < minY ? v[1] : minY;\n        maxX = v[0] > maxX ? v[0] : maxX;\n        maxY = v[1] > maxY ? v[1] : maxY;\n      });\n      var dX = maxX - minX;\n      var dY = maxY - minY;\n      var midX = (minX + maxX) / 2;\n      var midY = (minY + maxY) / 2;\n      var dMax = dX > dY ? dX : dY;\n      var superIndices = [vertices.length, vertices.length + 1, vertices.length + 2];\n      var vertsWithSuper = [].concat(MathUtils_toConsumableArray(vertices), [[midX - 20 * dMax, midY - dMax], [midX, midY + 20 * dMax], [midX + 20 * dMax, midY - dMax]]);\n      var superSortedIndices = MathUtils.sortPointsCCW(superIndices, vertsWithSuper);\n      var superTriangle = {\n        indices: superSortedIndices,\n        edges: [[superSortedIndices[0], superSortedIndices[1]], [superSortedIndices[1], superSortedIndices[2]], [superSortedIndices[2], superSortedIndices[0]]]\n      };\n      var triangles = [superTriangle];\n      vertsWithSuper.forEach(function (newVert, newIndex) {\n        var invalidTriangles = [];\n        triangles.forEach(function (triangle) {\n          if (MathUtils.isPointInCircumCircle(vertsWithSuper[triangle.indices[0]], vertsWithSuper[triangle.indices[1]], vertsWithSuper[triangle.indices[2]], newVert)) {\n            invalidTriangles.push(triangle);\n          }\n        });\n        var boundingPoly = [];\n        invalidTriangles.forEach(function (triangle) {\n          triangle.edges.forEach(function (edge) {\n            var count = 0;\n            invalidTriangles.forEach(function (otherTriangle) {\n              if (triangle !== otherTriangle) {\n                otherTriangle.edges.forEach(function (otherEdge) {\n                  if (edge[0] === otherEdge[0] && edge[1] === otherEdge[1] || edge[1] === otherEdge[0] && edge[0] === otherEdge[1]) {\n                    count += 1;\n                  }\n                });\n              }\n            });\n            if (count === 0) boundingPoly.push(edge);\n          });\n        });\n        invalidTriangles.forEach(function (triangle) {\n          triangles.splice(triangles.indexOf(triangle), 1);\n        });\n        boundingPoly.forEach(function (edge) {\n          var sortedIndices = MathUtils.sortPointsCCW([edge[0], edge[1], newIndex], vertsWithSuper);\n          triangles.push({\n            indices: sortedIndices,\n            edges: [[sortedIndices[0], sortedIndices[1]], [sortedIndices[1], sortedIndices[2]], [sortedIndices[2], sortedIndices[0]]]\n          });\n        });\n      });\n      var trianglesToRemove = [];\n      triangles.forEach(function (triangle) {\n        triangle.indices.forEach(function (index) {\n          if (superIndices.includes(index)) {\n            trianglesToRemove.push(triangle);\n          }\n        });\n      });\n      trianglesToRemove.forEach(function (triangle) {\n        var index = triangles.indexOf(triangle);\n\n        if (index !== -1) {\n          triangles.splice(index, 1);\n        }\n      });\n      return triangles.map(function (triangle) {\n        return triangle.indices;\n      });\n    }\n    /**\n     * Determines if a given 2D point is within the cicrumcircle\n     * defined by three 2D points. The triangle points must be in\n     * counter-clockwise order a -> b -> c.\n     *\n     * @param {Array.<number>} a - First triangle point.\n     * @param {Array.<number>} b - Second triangle point.\n     * @param {Array.<number>} c - Third triangle point.\n     * @param {Array.<number>} p - 2D point.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "isPointInCircumCircle",\n    value: function isPointInCircumCircle(a, b, c, p) {\n      var ax = a[0] - p[0];\n      var ay = a[1] - p[1];\n      var bx = b[0] - p[0];\n      var by = b[1] - p[1];\n      var cx = c[0] - p[0];\n      var cy = c[1] - p[1];\n      return (ax * ax + ay * ay) * (bx * cy - cx * by) - (bx * bx + by * by) * (ax * cy - cx * ay) + (cx * cx + cy * cy) * (ax * by - bx * ay) > 0;\n    }\n    /**\n     * Determines if a given 2D point is within a given triangle.\n     *\n     * @param {Array.<number>} a - First triangle point.\n     * @param {Array.<number>} b - Second triangle point.\n     * @param {Array.<number>} c - Third triangle point.\n     * @param {Array.<number>} p - 2D point.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "isPointInTriangle",\n    value: function isPointInTriangle(a, b, c, p) {\n      var denom = (b[1] - c[1]) * (a[0] - c[0]) + (c[0] - b[0]) * (a[1] - c[1]);\n      var aVal = ((b[1] - c[1]) * (p[0] - c[0]) + (c[0] - b[0]) * (p[1] - c[1])) / denom;\n      var bVal = ((c[1] - a[1]) * (p[0] - c[0]) + (a[0] - c[0]) * (p[1] - c[1])) / denom;\n      var cVal = 1 - aVal - bVal;\n      return aVal >= 0 && aVal <= 1 && bVal >= 0 && bVal <= 1 && cVal >= 0 && cVal <= 1;\n    }\n    /**\n     * Gets the sorted indices of a given set of 2D points in\n     * counter-clockwise order.\n     *\n     * @param {Array.<number>} indices - List of indices.\n     * @param {Array.<Array.<number>>} vertices - List of 2D points.\n     *\n     * @returns {Array.<Array.<number>>} - List of sorted indices.\n     */\n\n  }, {\n    key: "sortPointsCCW",\n    value: function sortPointsCCW(indices, vertices) {\n      var centroid = [0, 0];\n      indices.forEach(function (index) {\n        centroid[0] += vertices[index][0];\n        centroid[1] += vertices[index][1];\n      });\n      centroid[0] /= indices.length;\n      centroid[1] /= indices.length;\n      indices.sort(function (a, b) {\n        var bVal = Math.atan2(vertices[b][1] - centroid[1], vertices[b][0] - centroid[0]);\n        var aVal = Math.atan2(vertices[a][1] - centroid[1], vertices[a][0] - centroid[0]);\n        return aVal - bVal;\n      });\n      return indices;\n    }\n    /**\n     * Cacluates the area of a triangle\n     * @param {Array.<number>} a - First triangle point.\n     * @param {Array.<number>} b - Second triangle point.\n     * @param {Array.<number>} c - Third triangle point.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "triangleArea",\n    value: function triangleArea(a, b, c) {\n      return Math.abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) * 0.5);\n    }\n    /**\n     * Return the magnitude of a given vector array.\n     *\n     * @param {Array.<number>} vector - Array consisting of numbers.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getVectorMagnitude",\n    value: function getVectorMagnitude(vector) {\n      if (!(vector instanceof Array)) {\n        throw new Error("Cannot get magnitude for vector ".concat(vector, ". Input must be an Array numbers."));\n      }\n\n      var reducer = function reducer(accumulator, currentValue) {\n        if (typeof currentValue !== \'number\') {\n          throw new Error("Cannot get magnitude for vector ".concat(vector, ". All items in the input Array must be numbers."));\n        }\n\n        return accumulator + Math.pow(currentValue, 2);\n      };\n\n      return Math.sqrt(vector.reduce(reducer, 0));\n    }\n    /**\n     * Return the dot product between two vectors.\n     *\n     * @param {Array.<number>} vectorA - Array consisting of numbers.\n     * @param {Array.<number>} vectorB - Array consisting of numbers.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getDotProduct",\n    value: function getDotProduct(vectorA, vectorB) {\n      if (!(vectorA instanceof Array) || !(vectorB instanceof Array) || vectorA.length !== vectorB.length) {\n        throw new Error("Cannot get dot product between ".concat(vectorA, " and ").concat(vectorB, ". Inputs must be vectors of the same length."));\n      }\n\n      var result = 0;\n      vectorA.forEach(function (valueA, index) {\n        var valueB = vectorB[index];\n\n        if (typeof valueA !== \'number\' || typeof valueB !== \'number\') {\n          throw new Error("Cannot get dot product between ".concat(vectorA, " and ").concat(vectorB, ". Vectors must only consist of numeric values."));\n        }\n\n        result += valueA * valueB;\n      });\n      return result;\n    }\n    /**\n     * Return the angle in radians between vectorA and vectorB.\n     *\n     * @param {Array.<number>} vectorA - Array consisting of numbers.\n     * @param {Array.<number>} vectorB - Array consisting of numbers.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getAngleBetween",\n    value: function getAngleBetween(vectorA, vectorB) {\n      var normalA = this.normalizeVector(MathUtils_toConsumableArray(vectorA));\n      var normalB = this.normalizeVector(MathUtils_toConsumableArray(vectorB));\n      var dot = this.getDotProduct(normalA, normalB);\n      return Math.acos(this.clamp(dot, -1, 1));\n    }\n    /**\n     * Multiply a 3x3 rotation matrix with a vector3.\n     *\n     * @param {Array.<number>} vector3 - Array consisting of 3 numbers representing\n     * a direction vector.\n     * @param {Array.<number>} matrix3 - An array of 9 numbers representing a row\n     * major rotation matrix.\n     *\n     * @returns {Array.<number>} - An array of 3 numbers representing the new direction\n     * of the vector.\n     */\n\n  }, {\n    key: "rotateVector",\n    value: function rotateVector(vector3, matrix3) {\n      if (!(vector3 instanceof Array) || vector3.length !== 3 || !vector3.every(function (v) {\n        return typeof v === \'number\';\n      })) {\n        throw new Error("Cannot rotate vector ".concat(vector3, " by rotation matrix ").concat(matrix3, ". Input vector must be an array of 3 numbers."));\n      }\n\n      if (!(matrix3 instanceof Array) || matrix3.length !== 9 || !matrix3.every(function (v) {\n        return typeof v === \'number\';\n      })) {\n        throw new Error("Cannot rotate vector ".concat(vector3, " by rotation matrix ").concat(matrix3, ". Input matrix3 must be an array of 9 numbers."));\n      }\n\n      var x = matrix3[0] * vector3[0] + matrix3[3] * vector3[1] + matrix3[6] * vector3[2];\n      var y = matrix3[1] * vector3[0] + matrix3[4] * vector3[1] + matrix3[7] * vector3[2];\n      var z = matrix3[2] * vector3[0] + matrix3[5] * vector3[1] + matrix3[8] * vector3[2];\n      return [x, y, z];\n    }\n    /**\n     * Normalize a given vector array.\n     *\n     * @param {Array.<number>} vector - Array consisting of numbers.\n     *\n     * @returns {Array.<number>} The original vector with normalized values, for chaining.\n     */\n\n  }, {\n    key: "normalizeVector",\n    value: function normalizeVector(vector) {\n      var magnitude = this.getVectorMagnitude(vector);\n\n      if (magnitude === 0) {\n        vector.fill(0);\n      } else {\n        vector.forEach(function (value, index) {\n          vector[index] = value / magnitude;\n        });\n      }\n\n      return vector;\n    }\n    /**\n     * Extract the 3x3 rotation matrix from a given 4x4 transformation matrix.\n     *\n     * @param {Array.<number>} matrix4 - An array of 16 numbers representing a row\n     * major transformation matrix.\n     *\n     * @returns {Array.<number>} - An array of 9 numbers representing a row major\n     * rotation matrix.\n     */\n\n  }, {\n    key: "getRotationMatrix",\n    value: function getRotationMatrix(matrix4) {\n      if (!(matrix4 instanceof Array) || matrix4.length !== 16 || !matrix4.every(function (v) {\n        return typeof v === \'number\';\n      })) {\n        throw new Error("Cannot convert matrix ".concat(matrix4, " to a rotation matrix. Input matrix must be an array of 16 numbers."));\n      } // Extract scale\n\n\n      var scaleX = 1 / (this.getVectorMagnitude(matrix4.slice(0, 4)) || 1);\n      var scaleY = 1 / (this.getVectorMagnitude(matrix4.slice(4, 8)) || 1);\n      var scaleZ = 1 / (this.getVectorMagnitude(matrix4.slice(8, 12)) || 1);\n      return [matrix4[0] * scaleX, matrix4[1] * scaleX, matrix4[2] * scaleX, matrix4[4] * scaleY, matrix4[5] * scaleY, matrix4[6] * scaleY, matrix4[8] * scaleZ, matrix4[9] * scaleZ, matrix4[10] * scaleZ];\n    }\n    /**\n     * Return an array containing the spherical coordinates of the given cartesian\n     * xyz coordinates.\n     *\n     * @private\n     *\n     * @param {number} x - Position along the x axis.\n     * @param {number} y - Position along the y axis.\n     * @param {number} z - Position along the z axis.\n     *\n     * @returns {Array.<number>} - An array consisting of three numberes where index\n     * 0 represents the radius, index 1 represents the vertical/polar angle in radians\n     * and index 2 represents the horizontal/azimuthal angle in radians.\n     */\n\n  }, {\n    key: "cartesianToSpherical",\n    value: function cartesianToSpherical(x, y, z) {\n      var r = this.getVectorMagnitude([x, y, z]); // Return identity if the vector has no length\n\n      if (r === 0) {\n        return [0, 0, 0];\n      }\n\n      return [r, Math.acos(this.clamp(y / r, -1, 1)), Math.atan2(x, z)];\n    }\n    /**\n     * Gradually change a value of a numeric property towards a goal over time using\n     * a critically damped spring function.\n     *\n     * @param {number} currentValue - The starting value.\n     * @param {number} targetValue- The goal value.\n     * @param {Array.<number>} [valueStore = [0, 0]] - An Array consisting of two\n     * numbers where the first number holds the result value and the second holds\n     * the velocity that resulted in that value. The same array should be provided\n     * with each call to this function.\n     * @param {number} [deltaTime = 1e-7] - The time since the last call to this function\n     * in seconds.\n     * @param {number} [smoothTime = 0.3] - The approximate amount of time in seconds\n     * it should take to reach the target value.\n     * @param {number} [maxSpeed = 1e7] - A clamping value for the maximum speed the\n     * value can change.\n     *\n     * @returns {Array.<number>} - The valueStore array.\n     */\n\n  }, {\n    key: "dampValue",\n    value: function dampValue(currentValue, targetValue) {\n      var valueStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n      var deltaTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e-7;\n      var smoothTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.3;\n      var maxSpeed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1e7;\n      smoothTime = Math.max(0.0001, smoothTime);\n      deltaTime = Math.max(1e-7, deltaTime); // Find the delta between values and use it to estimate the previous value\n\n      var clampTime = maxSpeed * smoothTime;\n      var deltaValue = currentValue - targetValue;\n      var clampDeltaValue = this.clamp(deltaValue, -clampTime, clampTime);\n      var lastValue = currentValue - clampDeltaValue; // Calculate damping factors\n\n      var d1 = 2 / smoothTime;\n      var d2 = d1 * deltaTime;\n      var d3 = 1 / (1 + d2 + 0.5 * Math.pow(d2, 2) + 0.25 * Math.pow(d2, 3));\n      var d4 = (valueStore[1] + d1 * clampDeltaValue) * deltaTime; // Damp the target value and update the velocity\n\n      valueStore[0] = lastValue + (clampDeltaValue + d4) * d3;\n      valueStore[1] = (valueStore[1] - d1 * d4) * d3; // Prevent overshooting\n\n      if (targetValue - currentValue > 0 === valueStore[0] > targetValue) {\n        valueStore[0] = targetValue;\n        valueStore[1] = (valueStore[0] - targetValue) / deltaTime;\n      }\n\n      return valueStore;\n    }\n  }]);\n\n  return MathUtils;\n}();\n\n/* harmony default export */ const core_MathUtils = (MathUtils);\n;// CONCATENATED MODULE: ./src/core/HostEnvironment.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable import/prefer-default-export */\n\n/**\n * Indicates the type of host build.\n *\n * @type {string}\n */\nvar env = \'core\';\n\n;// CONCATENATED MODULE: ./src/core/Messenger.js\nfunction Messenger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Messenger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Messenger_createClass(Constructor, protoProps, staticProps) { if (protoProps) Messenger_defineProperties(Constructor.prototype, protoProps); if (staticProps) Messenger_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable no-underscore-dangle */\n\n/**\n * Class that can execute functions when local messages are received. Local messages\n * are prefixed with the instance\'s id.\n *\n * @alias core/Messenger\n *\n * @property {core/Messenger} GlobalMessenger - A messenger that can be used for\n * global messaging. When using static listen and emit methods they are executed\n * on this messenger.\n * @property {Object} EVENTS - Built-in events that the Messenger emits.\n */\n\nvar Messenger = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {any=} id - Id for the object. If none is provided a new id will\n   * be created. Id should be able to be represented as a string.\n   */\n  function Messenger(id) {\n    Messenger_classCallCheck(this, Messenger);\n\n    this._id = id !== undefined ? id : core_Utils.createId();\n    this._dispatcher = window;\n    this._callbacks = {};\n    this._eventListeners = {};\n  }\n  /**\n   * Gets the string id of the object.\n   *\n   * @readonly\n   * @type {string}\n   */\n\n\n  Messenger_createClass(Messenger, [{\n    key: "id",\n    get: function get() {\n      return this._id;\n    }\n    /**\n     * Prefix a message with the instance id.\n     *\n     * @private\n     *\n     * @param {string} message\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "_createLocalMessage",\n    value: function _createLocalMessage(message) {\n      return "".concat(this.id, ".").concat(message);\n    }\n    /**\n     * Return a function that will call a callback function and supply the event\'s\n     * detail property as an argument.\n     *\n     * @private\n     *\n     * @param {Function} callback\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: "_createListener",\n    value: function _createListener(callback) {\n      return function (e) {\n        var value;\n\n        if (e.detail !== null) {\n          value = e.detail;\n        }\n\n        callback(value);\n      };\n    }\n    /**\n     * Create an event object and send it to listeners.\n     *\n     * @private\n     *\n     * @param {string} message - Event type name.\n     * @param {any=} value - Value to send to listeners.\n     *\n     * @returns {CustomEvent}\n     */\n\n  }, {\n    key: "_createEvent",\n    value: function _createEvent(message, value) {\n      return new CustomEvent(message, {\n        detail: value\n      });\n    }\n    /**\n     * Register an event.\n     *\n     * @private\n     *\n     * @param {string} message - Event type name.\n     * @param {Function} listener - A listener function generated using _createListener.\n     */\n\n  }, {\n    key: "_addListener",\n    value: function _addListener(message, listener) {\n      this._dispatcher.addEventListener(this._createLocalMessage(message), listener);\n    }\n    /**\n     * Unregister an event.\n     *\n     * @private\n     *\n     * @param {string} message - Event type name.\n     * @param {Function} listener - A listener function generated using _createListener.\n     */\n\n  }, {\n    key: "_removeListener",\n    value: function _removeListener(message, listener) {\n      this._dispatcher.removeEventListener(this._createLocalMessage(message), listener);\n    }\n    /**\n     * Execute a function when a message is received for this object.\n     *\n     * @param {string} message - The message to listen for.\n     * @param {Function} callback - Function to execute once the message is received.\n     */\n\n  }, {\n    key: "listenTo",\n    value: function listenTo(message, callback) {\n      if (typeof callback !== \'function\') {\n        throw new Error("Cannot add listener for ".concat(message, " on ").concat(this.id, ". Callback must be a function."));\n      }\n\n      if (this._callbacks[message] === undefined) {\n        this._callbacks[message] = [];\n        this._eventListeners[message] = [];\n      }\n\n      var listener = this._createListener(callback);\n\n      this._callbacks[message].push(callback);\n\n      this._eventListeners[message].push(listener);\n\n      this._addListener(message, listener);\n    }\n    /**\n     * Prevent a function from being executed when a message is received for this\n     * object.\n     *\n     * @param {string} message - The message to stop listening for.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for the message.\n     */\n\n  }, {\n    key: "stopListening",\n    value: function stopListening(message, callback) {\n      if (this._callbacks[message] === undefined) {\n        return;\n      } else if (callback === undefined) {\n        // If no callback was defined, call stopListening on all callbacks for the message\n        for (var i = this._callbacks[message].length - 1; i > -1; i--) {\n          this.stopListening(message, this._callbacks[message][i]);\n        }\n\n        return;\n      } // If a callback was defined, make sure it\'s a listener\n\n\n      var index = this._callbacks[message].indexOf(callback);\n\n      if (index === -1) {\n        return;\n      }\n\n      var listener = this._eventListeners[message][index];\n\n      this._removeListener(message, listener);\n\n      this._callbacks[message].splice(index, 1);\n\n      this._eventListeners[message].splice(index, 1);\n\n      if (this._callbacks[message].length === 0) {\n        delete this._callbacks[message];\n        delete this._eventListeners[message];\n      }\n    }\n    /**\n     * De-register callback(s) from being executed when messages matching the given\n     * regular expression are received.\n     *\n     * @param {Regexp} regexp - regexp - The regular expression to filter messages with.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for messages matching the regular expression.\n     */\n\n  }, {\n    key: "stopListeningByRegexp",\n    value: function stopListeningByRegexp(regexp, callback) {\n      var _this = this;\n\n      var messages = Object.keys(this._callbacks).filter(function (message) {\n        return regexp.test(message);\n      });\n      messages.forEach(function (message) {\n        _this.stopListening(message, callback);\n      });\n    }\n    /**\n     * Prevent any functions from being executed when any message is received for\n     * this object.\n     */\n\n  }, {\n    key: "stopListeningToAll",\n    value: function stopListeningToAll() {\n      var messages = Object.keys(this._callbacks);\n\n      for (var i = messages.length - 1; i > -1; i--) {\n        this.stopListening(messages[i]);\n      }\n    }\n    /**\n     * Send a message, causing listener functions for the message on this object\n     * to be executed.\n     *\n     * @param {string} message - The message to emit.\n     * @param {any=} value - Optional argument to pass to listener callbacks.\n     */\n\n  }, {\n    key: "emit",\n    value: function emit(message, value) {\n      if (this._callbacks[message] === undefined) {\n        return;\n      }\n\n      message = this._createLocalMessage(message);\n\n      var event = this._createEvent(message, value);\n\n      this._dispatcher.dispatchEvent(event);\n    }\n    /**\n     * Execute a function when a message is received for the global Messenger instance.\n     *\n     * @static\n     *\n     * @param {string} message - The message to listen for.\n     * @param {Function} callback - Function to execute once the message is received.\n     */\n\n  }], [{\n    key: "listenTo",\n    value: function listenTo(message, callback, messenger) {\n      this.GlobalMessenger.listenTo(message, callback, messenger);\n    }\n    /**\n     * Prevent a function from being executed when a message is received for the\n     * global Messenger instance.\n     *\n     * @static\n     *\n     * @param {string} message - The message to stop listening for.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for the message.\n     */\n\n  }, {\n    key: "stopListening",\n    value: function stopListening(message, callback) {\n      this.GlobalMessenger.stopListening(message, callback);\n    }\n    /**\n     * De-register callback(s) from being executed on the global messengerr instance\n     * when messages matching the given regular expression are received.\n     *\n     * @param {Regexp} regexp - regexp - The regular expression to filter messages with.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for messages matching the regular expression.\n     */\n\n  }, {\n    key: "stopListeningByRegexp",\n    value: function stopListeningByRegexp(regexp, callback) {\n      var _this2 = this;\n\n      var messages = Object.keys(this.GlobalMessenger._callbacks).filter(function (message) {\n        return regexp.test(message);\n      });\n      messages.forEach(function (message) {\n        _this2.stopListening(message, callback);\n      });\n    }\n    /**\n     * Prevent any functions from being executed when any message is received for\n     * the global Messenger instance.\n     *\n     * @static\n     */\n\n  }, {\n    key: "stopListeningToAll",\n    value: function stopListeningToAll() {\n      this.GlobalMessenger.stopListeningToAll();\n    }\n    /**\n     * Send a message, causing listener functions for the message on the global Messenger\n     * instance to be executed.\n     *\n     * @static\n     *\n     * @param {string} message - The message to emit.\n     * @param {any=} value - Optional argument to pass to listener callbacks.\n     */\n\n  }, {\n    key: "emit",\n    value: function emit(message, value) {\n      this.GlobalMessenger.emit(message, value);\n    }\n  }]);\n\n  return Messenger;\n}();\n\nObject.defineProperties(Messenger, {\n  GlobalMessenger: {\n    value: new Messenger(),\n    writable: false\n  },\n  EVENTS: {\n    value: {},\n    writable: false\n  }\n});\n/* harmony default export */ const core_Messenger = (Messenger);\n;// CONCATENATED MODULE: ./src/core/AbstractHostFeature.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || AbstractHostFeature_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction AbstractHostFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AbstractHostFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AbstractHostFeature_arrayLikeToArray(o, minLen); }\n\nfunction AbstractHostFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction AbstractHostFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AbstractHostFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AbstractHostFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractHostFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractHostFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * Base class for all host features. Keeps a reference to the host object managing\n * the feature.\n *\n * @abstract\n *\n * @property {Object} EVENTS - Built-in messages that the feature emits. When the\n * feature is added to a {@link core/HostObject}, event names will be prefixed by the\n * name of the feature class + \'.\'.\n * @property {string} [EVENTS.update=onUpdate] - Message that is emitted after\n * each call to [update]{@link AbstractHostFeature#update}.\n * @property {Object} SERVICES - Any AWS services that are necessary for the\n * feature to function.\n */\n\nvar AbstractHostFeature = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {core/HostObject} host - The HostObject managing the feature.\n   */\n  function AbstractHostFeature(host) {\n    AbstractHostFeature_classCallCheck(this, AbstractHostFeature);\n\n    this._host = host;\n  }\n  /**\n   * Adds a namespace to the host with the name of the feature to contain properties\n   * and methods from the feature that users of the host need access to.\n   */\n\n\n  AbstractHostFeature_createClass(AbstractHostFeature, [{\n    key: "installApi",\n    value: function installApi() {\n      var _this = this;\n\n      var events = {};\n      var api = {\n        EVENTS: events\n      }; // Add the class name to event names\n\n      Object.entries(this.constructor.EVENTS).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            value = _ref2[1];\n\n        events[name] = "".concat(_this.constructor.name, ".").concat(value);\n      });\n      this._host[this.constructor.name] = api;\n      return api;\n    }\n    /**\n     * Gets the host that manages the feature.\n     *\n     * @readonly\n     */\n\n  }, {\n    key: "host",\n    get: function get() {\n      return this._host;\n    }\n    /**\n     * Gets the engine owner object of the host.\n     *\n     * @readonly\n     */\n\n  }, {\n    key: "owner",\n    get: function get() {\n      return this._host.owner;\n    }\n    /**\n     * Listen to a feature message from the host object.\n     *\n     * @param {string} message - Message to listen for.\n     * @param {Function} callback - The callback to execute when the message is received.\n     */\n\n  }, {\n    key: "listenTo",\n    value: function listenTo(message, callback) {\n      this._host.listenTo(message, callback);\n    }\n    /**\n     * Listen to a feature message from the global messenger. Feature messages will\n     * be prefixed with the class name of the feature.\n     *\n     * @param {string} message - Message to listen for.\n     * @param {Function} callback - The callback to execute when the message is received.\n     */\n\n  }, {\n    key: "stopListening",\n    value:\n    /**\n     * Stop listening to a message from the host object.\n     *\n     * @param {string} message - Message to stop listening for.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for the message.\n     */\n    function stopListening(message, callback) {\n      this._host.stopListening(message, callback);\n    }\n    /**\n     * Stop listening to a message from the global messenger.\n     *\n     * @param {string} message - Message to stop listening for.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for the message.\n     */\n\n  }, {\n    key: "stopListeningByRegexp",\n    value:\n    /**\n     * Stop listening to a message matching the given regular expression from the\n     * host object.\n     *\n     * @param {Regexp} regexp - The regular expression to stop listening for.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for the message.\n     */\n    function stopListeningByRegexp(regexp, callback) {\n      this._host.stopListeningByRegexp(regexp, callback);\n    }\n    /**\n     * Stop listening to a message matching the given regular expression from the\n     * global messenger.\n     *\n     * @param {Regexp} regexp - The regular expression to stop listening for.\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\n     * remove all callbacks for the message.\n     */\n\n  }, {\n    key: "stopListeningToAll",\n    value:\n    /**\n     * Stop listening to all messages.\n     */\n    function stopListeningToAll() {\n      this._host.stopListeningToAll();\n    }\n    /**\n     * Stop listening to all feature messages.\n     */\n\n  }, {\n    key: "emit",\n    value:\n    /**\n     * Emit feature messages from the host. Feature messages will be prefixed with\n     * the class name of the feature.\n     *\n     * @param {string} message - The message to emit.\n     * @param {any=} value - Optional parameter to pass to listener callbacks.\n     */\n    function emit(message, value) {\n      message = "".concat(this.constructor.name, ".").concat(message);\n\n      this._host.emit(message, value);\n    }\n    /**\n     * Emit feature messages from the global messenger. Feature messages will be prefixed\n     * with the class name of the feature.\n     *\n     * @param {string} message - The message to emit.\n     * @param {any=} value - Optional parameter to pass to listener callbacks.\n     */\n\n  }, {\n    key: "update",\n    value:\n    /**\n     * Executes each time the host is updated.\n     *\n     * @param {number} deltaTime - Amount of time since the last host update was\n     * called.\n     */\n    function update(deltaTime) {\n      this.emit(this.constructor.EVENTS.update, deltaTime);\n    }\n    /**\n     * Clean up once the feature is no longer in use. Remove the feature namespace\n     * from the host and remove reference to the host.\n     */\n\n  }, {\n    key: "discard",\n    value: function discard() {\n      var _this2 = this;\n\n      Object.keys(this._host[this.constructor.name]).forEach(function (name) {\n        delete _this2._host[_this2.constructor.name][name];\n      });\n      delete this._host[this.constructor.name];\n      delete this._host;\n    }\n    /**\n     * Applies a sequence of mixin class factory functions to this class and\n     * returns the result. Each function is expected to return a class that\n     * extends the class it was given. The functions are applied in the order\n     * that parameters are given, meaning that the first factory will\n     * extend this base class.\n     *\n     * @param {...Function} mixinClassFactories Class factory functions that will\n     * be applied.\n     *\n     * @returns {Class} A class that is the result of applying the factory functions.\n     * The resulting class will always inherit from AbstractHostFeature.\n     */\n\n  }], [{\n    key: "listenTo",\n    value: function listenTo(message, callback) {\n      message = "".concat(this.name, ".").concat(message);\n      core_Messenger.listenTo(message, callback);\n    }\n  }, {\n    key: "stopListening",\n    value: function stopListening(message, callback) {\n      message = "".concat(this.name, ".").concat(message);\n      core_Messenger.stopListening(message, callback);\n    }\n  }, {\n    key: "stopListeningByRegexp",\n    value: function stopListeningByRegexp(regexp, callback) {\n      regexp = new RegExp("^".concat(this.name, ".").concat(regexp.source.replace(/\\^/, \'\')));\n      core_Messenger.stopListeningByRegexp(regexp, callback);\n    }\n  }, {\n    key: "stopListeningToAll",\n    value: function stopListeningToAll() {\n      core_Messenger.stopListeningByRegexp(new RegExp("^".concat(this.name, ".")));\n    }\n  }, {\n    key: "emit",\n    value: function emit(message, value) {\n      message = "".concat(this.name, ".").concat(message);\n      core_Messenger.emit(message, value);\n    }\n  }, {\n    key: "mix",\n    value: function mix() {\n      var ResultClass = this;\n\n      for (var _len = arguments.length, mixinClassFactories = new Array(_len), _key = 0; _key < _len; _key++) {\n        mixinClassFactories[_key] = arguments[_key];\n      }\n\n      mixinClassFactories.forEach(function (mixinClassFactory) {\n        ResultClass = mixinClassFactory(ResultClass);\n      });\n      return ResultClass;\n    }\n  }]);\n\n  return AbstractHostFeature;\n}();\n\nObject.defineProperties(AbstractHostFeature, {\n  EVENTS: {\n    value: {\n      update: \'onUpdate\'\n    },\n    writable: false\n  },\n  SERVICES: {\n    value: {},\n    writable: false\n  }\n});\n/* harmony default export */ const core_AbstractHostFeature = (AbstractHostFeature);\n;// CONCATENATED MODULE: ./src/core/HostObject.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction HostObject_construct(Parent, args, Class) { if (HostObject_isNativeReflectConstruct()) { HostObject_construct = Reflect.construct; } else { HostObject_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) HostObject_setPrototypeOf(instance, Class.prototype); return instance; }; } return HostObject_construct.apply(null, arguments); }\n\nfunction HostObject_typeof(obj) { "@babel/helpers - typeof"; return HostObject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, HostObject_typeof(obj); }\n\nfunction HostObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction HostObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HostObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) HostObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) HostObject_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction HostObject_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) HostObject_setPrototypeOf(subClass, superClass); }\n\nfunction HostObject_setPrototypeOf(o, p) { HostObject_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return HostObject_setPrototypeOf(o, p); }\n\nfunction HostObject_createSuper(Derived) { var hasNativeReflectConstruct = HostObject_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = HostObject_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = HostObject_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return HostObject_possibleConstructorReturn(this, result); }; }\n\nfunction HostObject_possibleConstructorReturn(self, call) { if (call && (HostObject_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return HostObject_assertThisInitialized(self); }\n\nfunction HostObject_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction HostObject_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction HostObject_getPrototypeOf(o) { HostObject_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return HostObject_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n/**\n * Object that manages access to all Host features. Contains a reference to\n * engine-specific visuals if applicable.\n *\n * @extends core/Messenger\n * @alias core/HostObject\n *\n * @property {Object} EVENTS - Built-in messages that the Messenger emits.\n * @property {string} [EVENTS.update=\'onUpdate\'] - Message that is emitted after\n * each call to [update]{@link core/HostObject#update}.\n * @property {string} [EVENTS.addFeature=\'onAddFeature\'] - Message that is emitted\n * after each call to [addFeature]{@link core/HostObject#addFeature}.\n * @property {string} [EVENTS.removeFeature=\'onRemoveFeature\'] - Message that is emitted\n * after each call to [removeFeature]{@link core/HostObject#removeFeature}.\n */\n\nvar HostObject = /*#__PURE__*/function (_Messenger) {\n  HostObject_inherits(HostObject, _Messenger);\n\n  var _super = HostObject_createSuper(HostObject);\n\n  /**\n   * @constructor\n   *\n   * @param {Object=} options - Options for the host.\n   * @param {Object=} options.owner - Optional engine-specific owner of the host.\n   */\n  function HostObject() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$owner = _ref.owner,\n        owner = _ref$owner === void 0 ? {} : _ref$owner;\n\n    HostObject_classCallCheck(this, HostObject);\n\n    // If an owner is specified, use its id for messaging\n    _this = _super.call(this, owner.id);\n    _this._owner = owner;\n    _this._features = {};\n    _this._waits = [];\n    _this._lastUpdate = _this.now;\n    return _this;\n  }\n  /**\n   * Gets the engine owner object of the host.\n   *\n   * @readonly\n   * @type {Object}\n   */\n\n\n  HostObject_createClass(HostObject, [{\n    key: "owner",\n    get: function get() {\n      return this._owner;\n    }\n    /**\n     * Gets the current time in milliseconds.\n     *\n     * @readonly\n     * @type {number}\n     */\n\n  }, {\n    key: "now",\n    get: function get() {\n      return Date.now();\n    }\n    /**\n     * Gets the amount of time in milliseconds since update was last called.\n     *\n     * @readonly\n     * @type {number}\n     */\n\n  }, {\n    key: "deltaTime",\n    get: function get() {\n      return this.now - this._lastUpdate;\n    }\n    /**\n     * This function should be called in the engine\'s render loop. Executes update\n     * loops for all features.\n     */\n\n  }, {\n    key: "update",\n    value: function update() {\n      var currentTime = this.now;\n      var dt = this.deltaTime; // Progress stored waits\n\n      this._waits.forEach(function (wait) {\n        wait.execute(dt);\n      }); // Update all features\n\n\n      Object.values(this._features).forEach(function (feature) {\n        feature.update(dt);\n      }); // Notify listeners an update occured\n\n      this.emit(this.constructor.EVENTS.update, dt);\n      this._lastUpdate = currentTime;\n    }\n    /**\n     * Return a deferred promise that will wait a given number of seconds before\n     * resolving. The host will continuously update the wait promise during the\n     * update loop until it resolves.\n     *\n     * @param {number} [seconds=0] - Number of seconds to wait before resolving.\n     * @param {Object=} options - Optional options object\n     * @param {Function} [options.onFinish] - Callback to execute once the wait time\n     * is met.\n     * @param {Function=} options.onProgress - Callback to execute each time the wait\n     * time progresses towards the target number of seconds. The amount of progress\n     * as a 0-1 percentage is passed as an argument.\n     * @param {Function=} options.onCancel - Callback to execute if the user cancels\n     * the wait before completion.\n     * @param {Function=} options.onError - Callback to execute if the wait stops\n     * because an error is encountered. The error message is passed as a parameter.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "wait",\n    value: function wait(seconds) {\n      var _this2 = this;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onFinish = _ref2.onFinish,\n          onProgress = _ref2.onProgress,\n          onCancel = _ref2.onCancel,\n          onError = _ref2.onError;\n\n      var wait = core_Utils.wait(seconds, {\n        onFinish: onFinish,\n        onProgress: onProgress,\n        onCancel: onCancel,\n        onError: onError\n      });\n\n      this._waits.push(wait); // Once the wait promise is no longer pending remove it from the waits array\n\n\n      var onComplete = function onComplete() {\n        _this2._waits.splice(_this2._waits.indexOf(wait), 1);\n      };\n\n      wait.then(onComplete, onComplete);\n      return wait;\n    }\n    /**\n     * Instantiate a new Host feature and store it. Features must inherit from\n     * AbstractHostFeature.\n     *\n     * @param {Class} FeatureClass - Class that will instantiate the feature. Must\n     * extend {@link AbstractHostFeature}.\n     * @param {boolean} [force=false] - Whether or not to overwrite an existing\n     * feature if one of this type already exists on the object.\n     * @param  {...any} args - Additional arguments to pass to the FeatureClass\n     * constructor. The HostObject will always be passed as the first argument.\n     *\n     * @returns {boolean} - Whether or not a feature was successfully added.\n     */\n\n  }, {\n    key: "addFeature",\n    value: function addFeature(FeatureClass) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var inputType = HostObject_typeof(FeatureClass); // Make sure the FeatureClass can be executed\n\n\n      if (inputType !== \'function\') {\n        throw new Error("Cannot add feature to host ".concat(this.id, ". FeatureClass must be a class."));\n      } // Make sure the feature is a host feature\n      else if (!(FeatureClass.prototype instanceof core_AbstractHostFeature)) {\n        throw new Error("Cannot add feature ".concat(FeatureClass.name, " to host ").concat(this.id, ". FeatureClass must extend AbstractHostFeature."));\n      } // Check if the FeatureClass already exists on this object\n\n\n      if (this._features[FeatureClass.name] !== undefined) {\n        if (force) {\n          console.warn("Feature ".concat(FeatureClass.name, " already exists on host ").concat(this.id, ". Existing feature will be overwritten."));\n        } else {\n          throw new Error("Feature ".concat(FeatureClass.name, " already exists on host ").concat(this.id, ". Use \'force\' argument to overwrite the feature."));\n        }\n      } // Initialize the feature\n\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      var feature = HostObject_construct(FeatureClass, [this].concat(args));\n\n      feature.installApi();\n      this._features[FeatureClass.name] = feature;\n      this.emit(this.constructor.EVENTS.addFeature, FeatureClass.name);\n      return true;\n    }\n    /**\n     * Remove a feature from the object.\n     *\n     * @param {string} typeName - Name of the type of feature to remove.\n     *\n     * @returns {boolean} - Whether or not a feature was successfully removed.\n     */\n\n  }, {\n    key: "removeFeature",\n    value: function removeFeature(typeName) {\n      if (this._features[typeName] === undefined) {\n        console.warn("Feature of type ".concat(typeName, " does not exist on host ").concat(this.id, ". No feature will be removed."));\n        return false;\n      } else {\n        // Remove the feature\n        this.emit(this.constructor.EVENTS.removeFeature, typeName);\n\n        this._features[typeName].discard();\n\n        delete this._features[typeName];\n        return true;\n      }\n    }\n    /**\n     * Indicate whether a specified feature is installed on the host.\n     *\n     * @param {string} typeName - Name of the type of feature to look for.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "hasFeature",\n    value: function hasFeature(typeName) {\n      return !!this._features[typeName];\n    }\n    /**\n     * List the names of the features installed on the host.\n     *\n     * @returns {Array.<string>}\n     */\n\n  }, {\n    key: "listFeatures",\n    value: function listFeatures() {\n      return Object.keys(this._features);\n    }\n  }]);\n\n  return HostObject;\n}(core_Messenger);\n\nObject.defineProperty(HostObject, \'EVENTS\', {\n  value: _objectSpread(_objectSpread({}, Object.getPrototypeOf(HostObject).EVENTS), {}, {\n    update: \'onUpdate\',\n    addFeature: \'onAddFeature\',\n    removeFeature: \'onRemoveFeature\'\n  }),\n  writable: false\n});\n/* harmony default export */ const core_HostObject = (HostObject);\n;// CONCATENATED MODULE: ./src/core/animpack/Easing.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * @typedef {Object} EasingObject Object containing easing functions\n * @property {Function} In - Easing \'In\' function. Should use the signature (k:number):number.\n * @property {Function} Out - Easing \'Out\' function. Should use the signature (k:number):number.\n * @property {Function} InOut - Easing \'InOut\' function. Should use the signature (k:number):number.\n */\n\n/**\n * Linear Easing\n * @type {EasingObject}\n */\nvar Linear = {\n  None: function None(k) {\n    return k;\n  },\n  In: function In(k) {\n    return k;\n  },\n  Out: function Out(k) {\n    return k;\n  },\n  InOut: function InOut(k) {\n    return k;\n  }\n};\n/**\n * Quadratic Easing\n * @type {EasingObject}\n */\n\nvar Quadratic = {\n  In: function In(k) {\n    return k * k;\n  },\n  Out: function Out(k) {\n    return k * (2 - k);\n  },\n  InOut: function InOut(k) {\n    k *= 2;\n\n    if (k < 1) {\n      return 0.5 * k * k;\n    }\n\n    return -0.5 * (--k * (k - 2) - 1);\n  }\n};\n/**\n * Cubic Easing\n * @type {EasingObject}\n */\n\nvar Cubic = {\n  In: function In(k) {\n    return k * k * k;\n  },\n  Out: function Out(k) {\n    return --k * k * k + 1;\n  },\n  InOut: function InOut(k) {\n    k *= 2;\n\n    if (k < 1) {\n      return 0.5 * k * k * k;\n    }\n\n    k -= 2;\n    return 0.5 * (k * k * k + 2);\n  }\n};\n/**\n * Quartic Easing\n * @type {EasingObject}\n */\n\nvar Quartic = {\n  In: function In(k) {\n    return k * k * k * k;\n  },\n  Out: function Out(k) {\n    return 1 - --k * k * k * k;\n  },\n  InOut: function InOut(k) {\n    k *= 2;\n\n    if (k < 1) {\n      return 0.5 * k * k * k * k;\n    }\n\n    k -= 2;\n    return -0.5 * (k * k * k * k - 2);\n  }\n};\n/**\n * Quintic Easing\n * @type {EasingObject}\n */\n\nvar Quintic = {\n  In: function In(k) {\n    return k * k * k * k * k;\n  },\n  Out: function Out(k) {\n    return --k * k * k * k * k + 1;\n  },\n  InOut: function InOut(k) {\n    k *= 2;\n\n    if (k < 1) {\n      return 0.5 * k * k * k * k * k;\n    }\n\n    k -= 2;\n    return 0.5 * (k * k * k * k * k + 2);\n  }\n};\n/**\n * Sinusoidal Easing\n * @type {EasingObject}\n */\n\nvar Sinusoidal = {\n  In: function In(k) {\n    return 1 - Math.cos(k * Math.PI / 2);\n  },\n  Out: function Out(k) {\n    return Math.sin(k * Math.PI / 2);\n  },\n  InOut: function InOut(k) {\n    return 0.5 * (1 - Math.cos(Math.PI * k));\n  }\n};\n/**\n * Exponential Easing\n * @type {EasingObject}\n */\n\nvar Exponential = {\n  In: function In(k) {\n    return k === 0 ? 0 : Math.pow(1024, k - 1);\n  },\n  Out: function Out(k) {\n    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n  },\n  InOut: function InOut(k) {\n    if (k === 0) {\n      return 0;\n    }\n\n    if (k === 1) {\n      return 1;\n    }\n\n    k *= 2;\n\n    if (k < 1) {\n      return 0.5 * Math.pow(1024, k - 1);\n    }\n\n    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n  }\n};\n/**\n * Circular Easing\n * @type {EasingObject}\n */\n\nvar Circular = {\n  In: function In(k) {\n    return 1 - Math.sqrt(1 - k * k);\n  },\n  Out: function Out(k) {\n    return Math.sqrt(1 - --k * k);\n  },\n  InOut: function InOut(k) {\n    k *= 2;\n\n    if (k < 1) {\n      return -0.5 * (Math.sqrt(1 - k * k) - 1);\n    }\n\n    k -= 2;\n    return 0.5 * (Math.sqrt(1 - k * k) + 1);\n  }\n};\n/**\n * Elastic Easing\n * @type {EasingObject}\n */\n\nvar Elastic = {\n  In: function In(k) {\n    var s;\n    var a = 0.1;\n    var p = 0.4;\n\n    if (k === 0) {\n      return 0;\n    }\n\n    if (k === 1) {\n      return 1;\n    }\n\n    if (!a || a < 1) {\n      a = 1;\n      s = p / 4;\n    } else {\n      s = p * Math.asin(1 / a) / (2 * Math.PI);\n    }\n\n    k -= 1;\n    return -(a * Math.pow(2, 10 * k) * Math.sin((k - s) * (2 * Math.PI) / p));\n  },\n  Out: function Out(k) {\n    var s;\n    var a = 0.1;\n    var p = 0.4;\n\n    if (k === 0) {\n      return 0;\n    }\n\n    if (k === 1) {\n      return 1;\n    }\n\n    if (!a || a < 1) {\n      a = 1;\n      s = p / 4;\n    } else {\n      s = p * Math.asin(1 / a) / (2 * Math.PI);\n    }\n\n    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;\n  },\n  InOut: function InOut(k) {\n    var s;\n    var a = 0.1;\n    var p = 0.4;\n\n    if (k === 0) {\n      return 0;\n    }\n\n    if (k === 1) {\n      return 1;\n    }\n\n    if (!a || a < 1) {\n      a = 1;\n      s = p / 4;\n    } else {\n      s = p * Math.asin(1 / a) / (2 * Math.PI);\n    }\n\n    k *= 2;\n\n    if (k < 1) {\n      k -= 1;\n      return -0.5 * (a * Math.pow(2, 10 * k) * Math.sin((k - s) * (2 * Math.PI) / p));\n    }\n\n    k -= 1;\n    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n  }\n};\n/**\n * Back Easing\n * @type {EasingObject}\n */\n\nvar Back = {\n  In: function In(k) {\n    var s = 1.70158;\n    return k * k * ((s + 1) * k - s);\n  },\n  Out: function Out(k) {\n    var s = 1.70158;\n    return --k * k * ((s + 1) * k + s) + 1;\n  },\n  InOut: function InOut(k) {\n    var s = 1.70158 * 1.525;\n    k *= 2;\n\n    if (k < 1) {\n      return 0.5 * (k * k * ((s + 1) * k - s));\n    }\n\n    k -= 2;\n    return 0.5 * (k * k * ((s + 1) * k + s) + 2);\n  }\n};\n/**\n * Bounce Easing\n * @type {EasingObject}\n */\n\nvar Bounce = {\n  In: function In(k) {\n    return 1 - Bounce.Out(1 - k);\n  },\n  Out: function Out(k) {\n    if (k < 1 / 2.75) {\n      return 7.5625 * k * k;\n    } else if (k < 2 / 2.75) {\n      k -= 1.5;\n      return 7.5625 * (k / 2.75) * k + 0.75;\n    } else if (k < 2.5 / 2.75) {\n      k -= 2.25;\n      return 7.5625 * (k / 2.75) * k + 0.9375;\n    }\n\n    k -= 2.625;\n    return 7.5625 * (k / 2.75) * k + 0.984375;\n  },\n  InOut: function InOut(k) {\n    if (k < 0.5) {\n      return Bounce.In(k * 2) * 0.5;\n    }\n\n    return Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n  }\n};\n;// CONCATENATED MODULE: ./src/core/FeatureDependentInterface.js\nfunction FeatureDependentInterface_typeof(obj) { "@babel/helpers - typeof"; return FeatureDependentInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FeatureDependentInterface_typeof(obj); }\n\nfunction FeatureDependentInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction FeatureDependentInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? FeatureDependentInterface_ownKeys(Object(source), !0).forEach(function (key) { FeatureDependentInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : FeatureDependentInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction FeatureDependentInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction FeatureDependentInterface_slicedToArray(arr, i) { return FeatureDependentInterface_arrayWithHoles(arr) || FeatureDependentInterface_iterableToArrayLimit(arr, i) || FeatureDependentInterface_unsupportedIterableToArray(arr, i) || FeatureDependentInterface_nonIterableRest(); }\n\nfunction FeatureDependentInterface_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction FeatureDependentInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FeatureDependentInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FeatureDependentInterface_arrayLikeToArray(o, minLen); }\n\nfunction FeatureDependentInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction FeatureDependentInterface_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction FeatureDependentInterface_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = FeatureDependentInterface_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction FeatureDependentInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) FeatureDependentInterface_setPrototypeOf(subClass, superClass); }\n\nfunction FeatureDependentInterface_setPrototypeOf(o, p) { FeatureDependentInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FeatureDependentInterface_setPrototypeOf(o, p); }\n\nfunction FeatureDependentInterface_createSuper(Derived) { var hasNativeReflectConstruct = FeatureDependentInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = FeatureDependentInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = FeatureDependentInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return FeatureDependentInterface_possibleConstructorReturn(this, result); }; }\n\nfunction FeatureDependentInterface_possibleConstructorReturn(self, call) { if (call && (FeatureDependentInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return FeatureDependentInterface_assertThisInitialized(self); }\n\nfunction FeatureDependentInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction FeatureDependentInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction FeatureDependentInterface_getPrototypeOf(o) { FeatureDependentInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FeatureDependentInterface_getPrototypeOf(o); }\n\nfunction FeatureDependentInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction FeatureDependentInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction FeatureDependentInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) FeatureDependentInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) FeatureDependentInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable max-classes-per-file */\n\n/**\n * Class factory interface for features that are dependent on other features being\n * present on the host. Event dependencies will be listened for when a feature of\n * matching type is added to the host and will stop being listened for when one\n * is removed. If the feature is already present when constructed, events will\n * be listened for right away.\n *\n * @interface\n *\n * @property {Object} EVENT_DEPENDENCIES - Events that the feature should start/stop\n * listening for when a feature of type FeatureName is added/removed from the host.\n * Event dependencies should follow the signature:\n *  { FeatureName: { eventName: callbackName, ... }, ... }\n */\n\nvar FeatureDependentInterface = /*#__PURE__*/function () {\n  function FeatureDependentInterface() {\n    FeatureDependentInterface_classCallCheck(this, FeatureDependentInterface);\n  }\n\n  FeatureDependentInterface_createClass(FeatureDependentInterface, [{\n    key: "_onFeatureAdded",\n    value:\n    /**\n     * Start listening for event dependencies that match the given feature type.\n     *\n     * @private\n     *\n     * @param {string} typeName - type of feature to listen for.\n     */\n    function _onFeatureAdded(typeName) {}\n    /**\n     * Stop listening for event dependencies that match the given feature type.\n     *\n     * @private\n     *\n     * @param {string} typeName - type of feature to stop listening for.\n     */\n\n  }, {\n    key: "_onFeatureRemoved",\n    value: function _onFeatureRemoved(typeName) {}\n    /**\n     * @augments {@link AbstractHostFeature#discard}\n     */\n\n  }, {\n    key: "discard",\n    value: function discard() {}\n    /**\n     * Creates a class that implements {@link FeatureDependentInterface} and extends\n     * a specified base class.\n     *\n     * @param {Class} BaseClass - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link FeatureDependentInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin(BaseClass) {\n      var FeatureDependentMixin = /*#__PURE__*/function (_BaseClass) {\n        FeatureDependentInterface_inherits(FeatureDependentMixin, _BaseClass);\n\n        var _super = FeatureDependentInterface_createSuper(FeatureDependentMixin);\n\n        function FeatureDependentMixin(host) {\n          var _this;\n\n          FeatureDependentInterface_classCallCheck(this, FeatureDependentMixin);\n\n          _this = _super.call(this, host);\n          _this._host = host; // No need to listen for events if the mixin is in the prototype chain multiple times\n\n          if (!_this._initialized) {\n            _this._initialized = true; // Start listening for feature events\n\n            _this._onFeatureAdded = _this._onFeatureAdded.bind(FeatureDependentInterface_assertThisInitialized(_this));\n            _this._onFeatureRemoved = _this._onFeatureRemoved.bind(FeatureDependentInterface_assertThisInitialized(_this));\n\n            _this._host.listenTo(core_HostObject.EVENTS.addFeature, _this._onFeatureAdded);\n\n            _this._host.listenTo(core_HostObject.EVENTS.removeFeature, _this._onFeatureRemoved); // Register features that already exist\n\n\n            Object.keys(_this.constructor.EVENT_DEPENDENCIES).forEach(function (typeName) {\n              if (_this._host[typeName] !== undefined) {\n                _this._onFeatureAdded(typeName);\n              }\n            });\n          }\n\n          return _this;\n        }\n\n        FeatureDependentInterface_createClass(FeatureDependentMixin, [{\n          key: "_onFeatureAdded",\n          value: function _onFeatureAdded(typeName) {\n            var _this2 = this;\n\n            if (this.constructor.EVENT_DEPENDENCIES[typeName] !== undefined) {\n              var events = this.constructor.EVENT_DEPENDENCIES[typeName];\n              Object.entries(events).forEach(function (_ref) {\n                var _ref2 = FeatureDependentInterface_slicedToArray(_ref, 2),\n                    eventName = _ref2[0],\n                    callback = _ref2[1];\n\n                _this2[callback] = _this2[callback].bind(_this2);\n\n                _this2._host.listenTo(_this2._host[typeName].EVENTS[eventName], _this2[callback]);\n              });\n            }\n          }\n        }, {\n          key: "_onFeatureRemoved",\n          value: function _onFeatureRemoved(typeName) {\n            var _this3 = this;\n\n            if (this.constructor.EVENT_DEPENDENCIES[typeName] !== undefined) {\n              var events = this.constructor.EVENT_DEPENDENCIES[typeName];\n              Object.entries(events).forEach(function (_ref3) {\n                var _ref4 = FeatureDependentInterface_slicedToArray(_ref3, 2),\n                    eventName = _ref4[0],\n                    callback = _ref4[1];\n\n                _this3._host.stopListening(_this3._host[typeName].EVENTS[eventName], _this3[callback]);\n              });\n            }\n          }\n        }, {\n          key: "discard",\n          value: function discard() {\n            var _this4 = this;\n\n            // Stop listening for feature events\n            this._host.stopListening(core_HostObject.EVENTS.addFeature, this._onFeatureAdded);\n\n            this._host.stopListening(core_HostObject.EVENTS.removeFeature, this._onFeatureRemoved); // Stop listening to feature-specific events\n\n\n            Object.keys(this.constructor.EVENT_DEPENDENCIES).forEach(function (typeName) {\n              if (_this4._host[typeName] !== undefined) {\n                _this4._onFeatureRemoved(typeName);\n              }\n            });\n\n            _get(FeatureDependentInterface_getPrototypeOf(FeatureDependentMixin.prototype), "discard", this).call(this);\n          }\n        }]);\n\n        return FeatureDependentMixin;\n      }(BaseClass);\n\n      var EVENT_DEPENDENCIES = BaseClass.EVENT_DEPENDENCIES || {};\n      Object.defineProperties(FeatureDependentMixin, {\n        EVENT_DEPENDENCIES: {\n          value: FeatureDependentInterface_objectSpread({}, EVENT_DEPENDENCIES),\n          writable: false\n        }\n      });\n      return FeatureDependentMixin;\n    }\n  }]);\n\n  return FeatureDependentInterface;\n}();\n/**\n * Event dependencies should follow the signature:\n * {\n *  FeatureName: {\n *    // Events that the feature should start/stop listening for when a feature\n *    // of type FeatureName is added/removed from the host\n *    {\n *      eventName: callbackName,\n *      ...\n *    },\n *  }\n * }\n */\n\n\nObject.defineProperties(FeatureDependentInterface, {\n  EVENT_DEPENDENCIES: {\n    value: {},\n    writable: false\n  }\n});\n/* harmony default export */ const core_FeatureDependentInterface = (FeatureDependentInterface);\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationFeatureDependentInterface.js\nfunction AnimationFeatureDependentInterface_typeof(obj) { "@babel/helpers - typeof"; return AnimationFeatureDependentInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationFeatureDependentInterface_typeof(obj); }\n\nfunction AnimationFeatureDependentInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction AnimationFeatureDependentInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AnimationFeatureDependentInterface_ownKeys(Object(source), !0).forEach(function (key) { AnimationFeatureDependentInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AnimationFeatureDependentInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction AnimationFeatureDependentInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction AnimationFeatureDependentInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AnimationFeatureDependentInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AnimationFeatureDependentInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationFeatureDependentInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationFeatureDependentInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction AnimationFeatureDependentInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationFeatureDependentInterface_setPrototypeOf(subClass, superClass); }\n\nfunction AnimationFeatureDependentInterface_setPrototypeOf(o, p) { AnimationFeatureDependentInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationFeatureDependentInterface_setPrototypeOf(o, p); }\n\nfunction AnimationFeatureDependentInterface_createSuper(Derived) { var hasNativeReflectConstruct = AnimationFeatureDependentInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationFeatureDependentInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationFeatureDependentInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationFeatureDependentInterface_possibleConstructorReturn(this, result); }; }\n\nfunction AnimationFeatureDependentInterface_possibleConstructorReturn(self, call) { if (call && (AnimationFeatureDependentInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationFeatureDependentInterface_assertThisInitialized(self); }\n\nfunction AnimationFeatureDependentInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AnimationFeatureDependentInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AnimationFeatureDependentInterface_getPrototypeOf(o) { AnimationFeatureDependentInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationFeatureDependentInterface_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable max-classes-per-file */\n\n/**\n * Class factory interface for features that are dependent on the AnimationFeature\n * being present on the host. Layer and animation events will automatically be\n * listened for once a AnimationFeature is added to the host and stopped once it\n * is removed.\n *\n * @interface\n * @extends FeatureDependentInterface\n *\n * @property {Object} EVENT_DEPENDENCIES - Events that the feature should start/stop\n * listening for when a feature of type FeatureName is added/removed from the host.\n * @property {Object} EVENT_DEPENDENCIES.AnimationFeature - Events that are\n * specific to the AnimationFeature.\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.addLayer=\'_onLayerAdded\'] -\n * The name of the method that will be executed when AnimationFeature addLayer\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.removeLayer=\'_onLayerRemoved\'] -\n * The name of the method that will be executed when AnimationFeature removeLayer\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.renameLayer=\'_onLayerRenamed\'] -\n * The name of the method that will be executed when AnimationFeature renameLayer\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.addAnimation=\'_onAnimationAdded\'] -\n * The name of the method that will be executed when AnimationFeature addAnimation\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.removeAnimation=\'_onAnimationRemoved\'] -\n * The name of the method that will be executed when AnimationFeature removeAnimation\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.renameAnimation=\'_onAnimationRenamed\'] -\n * The name of the method that will be executed when AnimationFeature renameAnimation\n * events are emitted.\n */\n\nvar AnimationFeatureDependentInterface = /*#__PURE__*/function (_FeatureDependentInte) {\n  AnimationFeatureDependentInterface_inherits(AnimationFeatureDependentInterface, _FeatureDependentInte);\n\n  var _super = AnimationFeatureDependentInterface_createSuper(AnimationFeatureDependentInterface);\n\n  function AnimationFeatureDependentInterface() {\n    AnimationFeatureDependentInterface_classCallCheck(this, AnimationFeatureDependentInterface);\n\n    return _super.apply(this, arguments);\n  }\n\n  AnimationFeatureDependentInterface_createClass(AnimationFeatureDependentInterface, [{\n    key: "_onLayerAdded",\n    value:\n    /**\n     * Executed when animation layer added events are caught.\n     *\n     * @private\n     *\n     * @param {string} name - Name of the layer that was added.\n     */\n    function _onLayerAdded(_ref) {\n      var name = _ref.name;\n    }\n    /**\n     * Executed when animation layer removed events are caught.\n     *\n     * @private\n     *\n     * @param {string} name - Name of the layer that was removed.\n     */\n\n  }, {\n    key: "_onLayerRemoved",\n    value: function _onLayerRemoved(_ref2) {\n      var name = _ref2.name;\n    }\n    /**\n     * Executed when animation layer renamed events are caught.\n     *\n     * @private\n     *\n     * @param {string} oldName - Name of the layer that was renamed.\n     * @param {string} newName - New name of the layer.\n     */\n\n  }, {\n    key: "_onLayerRenamed",\n    value: function _onLayerRenamed(_ref3) {\n      var oldName = _ref3.oldName,\n          newName = _ref3.newName;\n    }\n    /**\n     * Executed when animation added events are caught.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that an animation was added to.\n     * @param {string} animationName - Name of the animation that was added.\n     */\n\n  }, {\n    key: "_onAnimationAdded",\n    value: function _onAnimationAdded(_ref4) {\n      var layerName = _ref4.layerName,\n          animationName = _ref4.animationName;\n    }\n    /**\n     * Executed when animation removed events are caught.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that an animation was removed from.\n     * @param {string} animationName - Name of the animation that was removed.\n     */\n\n  }, {\n    key: "_onAnimationRemoved",\n    value: function _onAnimationRemoved(_ref5) {\n      var layerName = _ref5.layerName,\n          animationName = _ref5.animationName;\n    }\n    /**\n     * Executed when animation renamed events are caught.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that an animation belongs to.\n     * @param {string} oldName - Name of the animation that was renamed.\n     * @param {string} newName - New name of the animation.\n     */\n\n  }, {\n    key: "_onAnimationRenamed",\n    value: function _onAnimationRenamed(_ref6) {\n      var layerName = _ref6.layerName,\n          oldName = _ref6.oldName,\n          newName = _ref6.newName;\n    }\n    /**\n     * Creates a class that implements {@link AnimationFeatureDependentInterface}\n     * and extends a specified base class.\n     *\n     * @param {Class} BaseClass - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link AnimationFeatureDependentInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin(BaseClass) {\n      var ParentClass = core_FeatureDependentInterface.Mixin(BaseClass);\n\n      var AnimationFeatureDependentMixin = /*#__PURE__*/function (_ParentClass) {\n        AnimationFeatureDependentInterface_inherits(AnimationFeatureDependentMixin, _ParentClass);\n\n        var _super2 = AnimationFeatureDependentInterface_createSuper(AnimationFeatureDependentMixin);\n\n        function AnimationFeatureDependentMixin() {\n          AnimationFeatureDependentInterface_classCallCheck(this, AnimationFeatureDependentMixin);\n\n          return _super2.apply(this, arguments);\n        }\n\n        AnimationFeatureDependentInterface_createClass(AnimationFeatureDependentMixin, [{\n          key: "_onLayerAdded",\n          value: function _onLayerAdded(_ref7) {\n            var name = _ref7.name;\n          }\n        }, {\n          key: "_onLayerRemoved",\n          value: function _onLayerRemoved(_ref8) {\n            var name = _ref8.name;\n          }\n        }, {\n          key: "_onLayerRenamed",\n          value: function _onLayerRenamed(_ref9) {\n            var oldName = _ref9.oldName,\n                newName = _ref9.newName;\n          }\n        }, {\n          key: "_onAnimationAdded",\n          value: function _onAnimationAdded(_ref10) {\n            var layerName = _ref10.layerName,\n                animationName = _ref10.animationName;\n          }\n        }, {\n          key: "_onAnimationRemoved",\n          value: function _onAnimationRemoved(_ref11) {\n            var layerName = _ref11.layerName,\n                animationName = _ref11.animationName;\n          }\n        }, {\n          key: "_onAnimationRenamed",\n          value: function _onAnimationRenamed(_ref12) {\n            var layerName = _ref12.layerName,\n                oldName = _ref12.oldName,\n                newName = _ref12.newName;\n          }\n        }]);\n\n        return AnimationFeatureDependentMixin;\n      }(ParentClass);\n\n      Object.defineProperties(AnimationFeatureDependentMixin, {\n        EVENT_DEPENDENCIES: {\n          value: AnimationFeatureDependentInterface_objectSpread(AnimationFeatureDependentInterface_objectSpread({}, ParentClass.EVENT_DEPENDENCIES), AnimationFeatureDependentInterface.EVENT_DEPENDENCIES),\n          writable: false\n        }\n      });\n      return AnimationFeatureDependentMixin;\n    }\n  }]);\n\n  return AnimationFeatureDependentInterface;\n}(core_FeatureDependentInterface);\n\nObject.defineProperties(AnimationFeatureDependentInterface, {\n  EVENT_DEPENDENCIES: {\n    value: {\n      AnimationFeature: {\n        addLayer: \'_onLayerAdded\',\n        removeLayer: \'_onLayerRemoved\',\n        renameLayer: \'_onLayerRenamed\',\n        addAnimation: \'_onAnimationAdded\',\n        removeAnimation: \'_onAnimationRemoved\',\n        renameAnimation: \'_onAnimationRenamed\'\n      }\n    },\n    writable: false\n  }\n});\n/* harmony default export */ const animpack_AnimationFeatureDependentInterface = (AnimationFeatureDependentInterface);\n;// CONCATENATED MODULE: ./src/core/animpack/ManagedAnimationLayerInterface.js\nfunction ManagedAnimationLayerInterface_typeof(obj) { "@babel/helpers - typeof"; return ManagedAnimationLayerInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, ManagedAnimationLayerInterface_typeof(obj); }\n\nfunction ManagedAnimationLayerInterface_slicedToArray(arr, i) { return ManagedAnimationLayerInterface_arrayWithHoles(arr) || ManagedAnimationLayerInterface_iterableToArrayLimit(arr, i) || ManagedAnimationLayerInterface_unsupportedIterableToArray(arr, i) || ManagedAnimationLayerInterface_nonIterableRest(); }\n\nfunction ManagedAnimationLayerInterface_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction ManagedAnimationLayerInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ManagedAnimationLayerInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ManagedAnimationLayerInterface_arrayLikeToArray(o, minLen); }\n\nfunction ManagedAnimationLayerInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ManagedAnimationLayerInterface_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction ManagedAnimationLayerInterface_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ManagedAnimationLayerInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction ManagedAnimationLayerInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ManagedAnimationLayerInterface_ownKeys(Object(source), !0).forEach(function (key) { ManagedAnimationLayerInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ManagedAnimationLayerInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction ManagedAnimationLayerInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction ManagedAnimationLayerInterface_get() { if (typeof Reflect !== "undefined" && Reflect.get) { ManagedAnimationLayerInterface_get = Reflect.get; } else { ManagedAnimationLayerInterface_get = function _get(target, property, receiver) { var base = ManagedAnimationLayerInterface_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return ManagedAnimationLayerInterface_get.apply(this, arguments); }\n\nfunction ManagedAnimationLayerInterface_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = ManagedAnimationLayerInterface_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction ManagedAnimationLayerInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction ManagedAnimationLayerInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction ManagedAnimationLayerInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) ManagedAnimationLayerInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) ManagedAnimationLayerInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction ManagedAnimationLayerInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ManagedAnimationLayerInterface_setPrototypeOf(subClass, superClass); }\n\nfunction ManagedAnimationLayerInterface_setPrototypeOf(o, p) { ManagedAnimationLayerInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ManagedAnimationLayerInterface_setPrototypeOf(o, p); }\n\nfunction ManagedAnimationLayerInterface_createSuper(Derived) { var hasNativeReflectConstruct = ManagedAnimationLayerInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ManagedAnimationLayerInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ManagedAnimationLayerInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ManagedAnimationLayerInterface_possibleConstructorReturn(this, result); }; }\n\nfunction ManagedAnimationLayerInterface_possibleConstructorReturn(self, call) { if (call && (ManagedAnimationLayerInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ManagedAnimationLayerInterface_assertThisInitialized(self); }\n\nfunction ManagedAnimationLayerInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction ManagedAnimationLayerInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ManagedAnimationLayerInterface_getPrototypeOf(o) { ManagedAnimationLayerInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ManagedAnimationLayerInterface_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable max-classes-per-file */\n\n/**\n * Class factory interface for that keeps track of layers and animations on a host.\n * Tracked assets are marked as inactive until layers and animations with matching\n * names are detected as present on the host.\n *\n * @interface\n * @extends AnimationFeatureDependentInterface\n *\n * @property {Object} DEFAULT_LAYER_OPTIONS - Default options to use when executing\n * {@link AnimationLayer} methods.\n * @property {number} [DEFAULT_LAYER_OPTIONS.blendTime=0.5] - Default time in seconds\n * to use when executing {@link AnimationLayer.setBlendWeight}.\n * @property {Object} [DEFAULT_LAYER_OPTIONS.animations={}] - Maps animation names\n * to default options objects to use for managed animations.\n */\n\nvar ManagedAnimationLayerInterface = /*#__PURE__*/function (_AnimationFeatureDepe) {\n  ManagedAnimationLayerInterface_inherits(ManagedAnimationLayerInterface, _AnimationFeatureDepe);\n\n  var _super = ManagedAnimationLayerInterface_createSuper(ManagedAnimationLayerInterface);\n\n  function ManagedAnimationLayerInterface() {\n    ManagedAnimationLayerInterface_classCallCheck(this, ManagedAnimationLayerInterface);\n\n    return _super.apply(this, arguments);\n  }\n\n  ManagedAnimationLayerInterface_createClass(ManagedAnimationLayerInterface, [{\n    key: "registerLayer",\n    value:\n    /**\n     * Start tracking keeping track of whether a layer with the given name is present\n     * on the host.\n     *\n     * @param {string} name - Name of the layer to keep track of.\n     * @param {Object=} options - Options for the layer.\n     * @param {number=} options.blendTime - Default amount of time to use when\n     * manipulating layer weights on this layer.\n     * @param {Function=} options.easingFn - Default easing function to use when\n     * manipulating layer weights on this layer.\n     * @param {Object=} options.animations - Animations to keep track of on the layer.\n     * Animations are represented as key/value pairs of animation names and their\n     * options.\n     */\n    function registerLayer(name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    }\n    /**\n     * Start tracking keeping track of whether an animation with the given name is\n     * present on the host.\n     *\n     * @param {string} layerName - Name of the layer that will own the animation.\n     * @param {string} animationName - Name of the animation to keep track of.\n     * @param {Object=} options - Options for the animation.\n     */\n\n  }, {\n    key: "registerAnimation",\n    value: function registerAnimation(layerName, animationName) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    }\n    /**\n     * Set layer weights on tracked layers.\n     *\n     * @param {Function=} nameFilter - Predicate function to test each tracked layer\n     * with. By default all layers will pass.\n     * @param {number} weight - Weight value to set on layers.\n     * @param {number=} seconds - Number of seconds it will take to reach the weight\n     * on each layer. If undefined, each layers\' blendTime option is used.\n     * @param {Function=} easingFn - Easing function to use when setting weight\n     * on each layer. If undefined, each layers\' easingFn option is used.\n     */\n\n  }, {\n    key: "setLayerWeights",\n    value: function setLayerWeights() {\n      var nameFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n        return true;\n      };\n      var weight = arguments.length > 1 ? arguments[1] : undefined;\n      var seconds = arguments.length > 2 ? arguments[2] : undefined;\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\n    }\n    /**\n     * Set all tracked layers\' weights to 1.\n     *\n     * @param {number=} seconds - Number of seconds it will take to reach the weight\n     * on each layer. If undefined, each layers\' blendTime option is used.\n     * @param {Function=} easingFn - Easing function to use when setting weight\n     * on each layer. If undefined, each layers\' easingFn option is used.\n     */\n\n  }, {\n    key: "enable",\n    value: function enable(seconds, easingFn) {}\n    /**\n     * Set all tracked layers\' weights to 0.\n     *\n     * @param {number=} seconds - Number of seconds it will take to reach the weight\n     * on each layer. If undefined, each layers\' blendTime option is used.\n     * @param {Function=} easingFn - Easing function to use when setting weight\n     * on each layer. If undefined, each layers\' easingFn option is used.\n     */\n\n  }, {\n    key: "disable",\n    value: function disable(seconds, easingFn) {}\n    /**\n     * Creates a class that implements {@link ManagedAnimationLayerInterface}\n     * and extends a specified base class.\n     *\n     * @param {Class} BaseClass - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link ManagedAnimationLayerInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin(BaseClass) {\n      var ParentClass = animpack_AnimationFeatureDependentInterface.Mixin(BaseClass);\n\n      var ManagedAnimationLayerMixin = /*#__PURE__*/function (_ParentClass) {\n        ManagedAnimationLayerInterface_inherits(ManagedAnimationLayerMixin, _ParentClass);\n\n        var _super2 = ManagedAnimationLayerInterface_createSuper(ManagedAnimationLayerMixin);\n\n        function ManagedAnimationLayerMixin() {\n          var _this;\n\n          ManagedAnimationLayerInterface_classCallCheck(this, ManagedAnimationLayerMixin);\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          _this = _super2.call.apply(_super2, [this].concat(args));\n          _this._managedLayers = {};\n          return _this;\n        }\n\n        ManagedAnimationLayerInterface_createClass(ManagedAnimationLayerMixin, [{\n          key: "_onFeatureAdded",\n          value: function _onFeatureAdded(typeName) {\n            var _this2 = this;\n\n            ManagedAnimationLayerInterface_get(ManagedAnimationLayerInterface_getPrototypeOf(ManagedAnimationLayerMixin.prototype), "_onFeatureAdded", this).call(this, typeName);\n\n            if (typeName !== \'AnimationFeature\') {\n              return;\n            }\n\n            this._managedLayers = this._managedLayers || {}; // Detect new layers\n\n            this._host.AnimationFeature.layers.forEach(function (name) {\n              _this2._onLayerAdded({\n                name: name\n              });\n            });\n          }\n        }, {\n          key: "_onFeatureRemoved",\n          value: function _onFeatureRemoved(typeName) {\n            var _this3 = this;\n\n            ManagedAnimationLayerInterface_get(ManagedAnimationLayerInterface_getPrototypeOf(ManagedAnimationLayerMixin.prototype), "_onFeatureRemoved", this).call(this, typeName);\n\n            if (typeName !== \'AnimationFeature\') {\n              return;\n            }\n\n            this._managedLayers = this._managedLayers || {}; // Deactivate the layers\n\n            Object.keys(this._managedLayers).forEach(function (name) {\n              _this3._onLayerRemoved({\n                name: name\n              });\n            });\n          }\n        }, {\n          key: "_onLayerAdded",\n          value: function _onLayerAdded(_ref) {\n            var _this4 = this;\n\n            var name = _ref.name;\n\n            // Mark the layer as active if it is managed\n            if (this._managedLayers[name] !== undefined) {\n              this._managedLayers[name].isActive = true; // Detect new animations\n\n              this._host.AnimationFeature.getAnimations(name).forEach(function (animName) {\n                _this4._onAnimationAdded({\n                  layerName: name,\n                  animationName: animName\n                });\n              });\n            }\n          }\n        }, {\n          key: "_onLayerRemoved",\n          value: function _onLayerRemoved(_ref2) {\n            var _this5 = this;\n\n            var name = _ref2.name;\n\n            // Deactivate the layer if it is managed\n            if (this._managedLayers[name] !== undefined) {\n              this._managedLayers[name].isActive = false; // Deactivate the animations\n\n              Object.keys(this._managedLayers[name].animations).forEach(function (animName) {\n                _this5._onAnimationRemoved({\n                  layerName: name,\n                  animationName: animName\n                });\n              });\n            }\n          }\n        }, {\n          key: "_onLayerRenamed",\n          value: function _onLayerRenamed(_ref3) {\n            var oldName = _ref3.oldName,\n                newName = _ref3.newName;\n            var layerOptions = this._managedLayers[oldName]; // Replace the layer key with the new name\n\n            if (layerOptions !== undefined) {\n              delete this._managedLayers[oldName];\n              this._managedLayers[newName] = layerOptions;\n            }\n          }\n        }, {\n          key: "_onAnimationAdded",\n          value: function _onAnimationAdded(_ref4) {\n            var layerName = _ref4.layerName,\n                animationName = _ref4.animationName;\n\n            // Mark the animation as active if it is managed\n            if (this._managedLayers[layerName] !== undefined && this._managedLayers[layerName].animations[animationName] !== undefined) {\n              this._managedLayers[layerName].animations[animationName].isActive = true;\n            }\n          }\n        }, {\n          key: "_onAnimationRemoved",\n          value: function _onAnimationRemoved(_ref5) {\n            var layerName = _ref5.layerName,\n                animationName = _ref5.animationName;\n\n            // Deactivate the animation if it is managed\n            if (this._managedLayers[layerName] !== undefined && this._managedLayers[layerName].animations[animationName] !== undefined) {\n              this._managedLayers[layerName].animations[animationName].isActive = false;\n            }\n          }\n        }, {\n          key: "_onAnimationRenamed",\n          value: function _onAnimationRenamed(_ref6) {\n            var layerName = _ref6.layerName,\n                oldName = _ref6.oldName,\n                newName = _ref6.newName;\n\n            if (this._managedLayers[layerName] !== undefined && this._managedLayers[layerName].animations[oldName] !== undefined) {\n              // Replace the animation key with the new name\n              var animOptions = this._managedLayers[layerName].animations[oldName];\n              delete this._managedLayers[layerName].animations[oldName];\n              this._managedLayers[layerName].animations[newName] = animOptions;\n            }\n          }\n        }, {\n          key: "registerLayer",\n          value: function registerLayer(name) {\n            var _this6 = this;\n\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            // Start with default options for each new layer\n            if (this._managedLayers[name] === undefined) {\n              this._managedLayers[name] = ManagedAnimationLayerInterface_objectSpread(ManagedAnimationLayerInterface_objectSpread({}, this.constructor.DEFAULT_LAYER_OPTIONS), {}, {\n                animations: {}\n              });\n            } // Update all options except animations\n\n\n            var layerOptions = this._managedLayers[name];\n            options = ManagedAnimationLayerInterface_objectSpread({}, options);\n            var animationOptions = options.animations || {};\n            delete options.animations;\n            Object.assign(layerOptions, options); // Check whether the layer can be manipulated now\n\n            layerOptions.isActive = this._host.AnimationFeature !== undefined && this._host.AnimationFeature.layers.includes(name); // Register the animations\n\n            Object.entries(animationOptions).forEach(function (_ref7) {\n              var _ref8 = ManagedAnimationLayerInterface_slicedToArray(_ref7, 2),\n                  animName = _ref8[0],\n                  animOptions = _ref8[1];\n\n              _this6.registerAnimation(name, animName, animOptions);\n            });\n          }\n        }, {\n          key: "registerAnimation",\n          value: function registerAnimation(layerName, animationName) {\n            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n            // Register the layer if it hasn\'t been registered yet\n            if (this._managedLayers[layerName] === undefined) {\n              this.registerLayer(layerName);\n            } // Update animation options\n\n\n            var animOptions = this._managedLayers[layerName].animations[animationName] || {};\n            Object.assign(animOptions, options);\n            this._managedLayers[layerName].animations[animationName] = animOptions; // Check whether the animation can be manipulated now\n\n            this._managedLayers[layerName].animations[animationName].isActive = this._managedLayers[layerName].isActive && this._host.AnimationFeature.getAnimations(layerName).includes(animationName);\n          }\n        }, {\n          key: "setLayerWeights",\n          value: function setLayerWeights() {\n            var _this7 = this;\n\n            var nameFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n              return true;\n            };\n            var weight = arguments.length > 1 ? arguments[1] : undefined;\n            var seconds = arguments.length > 2 ? arguments[2] : undefined;\n            var easingFn = arguments.length > 3 ? arguments[3] : undefined;\n            var layerNames = Object.keys(this._managedLayers).filter(nameFilter);\n            layerNames.forEach(function (name) {\n              var layerOptions = _this7._managedLayers[name];\n\n              if (layerOptions.isActive) {\n                _this7._host.AnimationFeature.setLayerWeight(name, weight, seconds !== undefined ? seconds : layerOptions.blendTime, easingFn || layerOptions.easingFn);\n              }\n            });\n          }\n        }, {\n          key: "enable",\n          value: function enable(seconds, easingFn) {\n            this.setLayerWeights(undefined, 1, seconds, easingFn);\n          }\n        }, {\n          key: "disable",\n          value: function disable(seconds, easingFn) {\n            this.setLayerWeights(undefined, 0, seconds, easingFn);\n          }\n        }, {\n          key: "installApi",\n          value: function installApi() {\n            var api = ManagedAnimationLayerInterface_get(ManagedAnimationLayerInterface_getPrototypeOf(ManagedAnimationLayerMixin.prototype), "installApi", this).call(this);\n\n            Object.assign(api, {\n              registerLayer: this.registerLayer.bind(this),\n              registerAnimation: this.registerAnimation.bind(this),\n              setLayerWeights: this.setLayerWeights.bind(this),\n              enable: this.enable.bind(this),\n              disable: this.disable.bind(this)\n            });\n            return api;\n          }\n        }]);\n\n        return ManagedAnimationLayerMixin;\n      }(ParentClass);\n\n      Object.defineProperties(ManagedAnimationLayerMixin, {\n        DEFAULT_LAYER_OPTIONS: {\n          value: ManagedAnimationLayerInterface.DEFAULT_LAYER_OPTIONS,\n          writable: false\n        }\n      });\n      return ManagedAnimationLayerMixin;\n    }\n  }]);\n\n  return ManagedAnimationLayerInterface;\n}(animpack_AnimationFeatureDependentInterface);\n\nObject.defineProperties(ManagedAnimationLayerInterface, {\n  DEFAULT_LAYER_OPTIONS: {\n    value: {\n      blendTime: 0.5,\n      animations: {}\n    },\n    writable: false\n  }\n});\n/* harmony default export */ const animpack_ManagedAnimationLayerInterface = (ManagedAnimationLayerInterface);\n;// CONCATENATED MODULE: ./src/core/awspack/TextToSpeechFeatureDependentInterface.js\nfunction TextToSpeechFeatureDependentInterface_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechFeatureDependentInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechFeatureDependentInterface_typeof(obj); }\n\nfunction TextToSpeechFeatureDependentInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction TextToSpeechFeatureDependentInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? TextToSpeechFeatureDependentInterface_ownKeys(Object(source), !0).forEach(function (key) { TextToSpeechFeatureDependentInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : TextToSpeechFeatureDependentInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction TextToSpeechFeatureDependentInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction TextToSpeechFeatureDependentInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TextToSpeechFeatureDependentInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TextToSpeechFeatureDependentInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechFeatureDependentInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechFeatureDependentInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction TextToSpeechFeatureDependentInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TextToSpeechFeatureDependentInterface_setPrototypeOf(subClass, superClass); }\n\nfunction TextToSpeechFeatureDependentInterface_setPrototypeOf(o, p) { TextToSpeechFeatureDependentInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TextToSpeechFeatureDependentInterface_setPrototypeOf(o, p); }\n\nfunction TextToSpeechFeatureDependentInterface_createSuper(Derived) { var hasNativeReflectConstruct = TextToSpeechFeatureDependentInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TextToSpeechFeatureDependentInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TextToSpeechFeatureDependentInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TextToSpeechFeatureDependentInterface_possibleConstructorReturn(this, result); }; }\n\nfunction TextToSpeechFeatureDependentInterface_possibleConstructorReturn(self, call) { if (call && (TextToSpeechFeatureDependentInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TextToSpeechFeatureDependentInterface_assertThisInitialized(self); }\n\nfunction TextToSpeechFeatureDependentInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction TextToSpeechFeatureDependentInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction TextToSpeechFeatureDependentInterface_getPrototypeOf(o) { TextToSpeechFeatureDependentInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TextToSpeechFeatureDependentInterface_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable max-classes-per-file */\n\n/**\n * Class factory interface for features that are dependent on the TextToSpeechFeature\n * being present on the host. Speech events will automatically be listened for once a\n * TextToSpeechFeature is added to the host and stopped once it is removed.\n *\n * @interface\n * @extends FeatureDependentInterface\n *\n * @property {Object} EVENT_DEPENDENCIES - Events that the feature should start/stop\n * listening for when a feature of type FeatureName is added/removed from the host.\n * @property {Object} EVENT_DEPENDENCIES.TextToSpeechFeature - Events that are\n * specific to the TextToSpeechFeature.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.play=\'_onPlay\'] -\n * The name of the method that will be executed when TextToSpeechFeature play\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.pause=\'_onPause\'] -\n * The name of the method that will be executed when TextToSpeechFeature pause\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.resume=\'_onResume\'] -\n * The name of the method that will be executed when TextToSpeechFeature resume\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.stop=\'_onStop\'] -\n * The name of the method that will be executed when TextToSpeechFeature stop\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.sentence=\'_onSentence\'] -\n * The name of the method that will be executed when TextToSpeechFeature sentence\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.word=\'_onWord\'] -\n * The name of the method that will be executed when TextToSpeechFeature word\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.viseme=\'_onViseme\'] -\n * The name of the method that will be executed when TextToSpeechFeature viseme\n * events are emitted.\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.ssml=\'_onSsml\'] -\n * The name of the method that will be executed when TextToSpeechFeature ssml\n * events are emitted.\n */\n\nvar TextToSpeechFeatureDependentInterface = /*#__PURE__*/function (_FeatureDependentInte) {\n  TextToSpeechFeatureDependentInterface_inherits(TextToSpeechFeatureDependentInterface, _FeatureDependentInte);\n\n  var _super = TextToSpeechFeatureDependentInterface_createSuper(TextToSpeechFeatureDependentInterface);\n\n  function TextToSpeechFeatureDependentInterface() {\n    TextToSpeechFeatureDependentInterface_classCallCheck(this, TextToSpeechFeatureDependentInterface);\n\n    return _super.apply(this, arguments);\n  }\n\n  TextToSpeechFeatureDependentInterface_createClass(TextToSpeechFeatureDependentInterface, [{\n    key: "_onPlay",\n    value:\n    /**\n     * Executed when speech play events are caught.\n     *\n     * @private\n     */\n    function _onPlay() {}\n    /**\n     * Executed when speech pause events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onPause",\n    value: function _onPause() {}\n    /**\n     * Executed when speech resume events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onResume",\n    value: function _onResume() {}\n    /**\n     * Executed when speech stop events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onStop",\n    value: function _onStop() {}\n    /**\n     * Executed when speech sentence events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onSentence",\n    value: function _onSentence() {}\n    /**\n     * Executed when speech word events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onWord",\n    value: function _onWord() {}\n    /**\n     * Executed when speech viseme events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onViseme",\n    value: function _onViseme() {}\n    /**\n     * Executed when speech ssml events are caught.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_onSsml",\n    value: function _onSsml() {}\n    /**\n     * Creates a class that implements {@link TextToSpeechFeatureDependentInterface}\n     * and extends a specified base class.\n     *\n     * @param {Class} BaseClass - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link TextToSpeechFeatureDependentInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin(BaseClass) {\n      var ParentClass = core_FeatureDependentInterface.Mixin(BaseClass);\n\n      var TextToSpeechFeatureDependentMixin = /*#__PURE__*/function (_ParentClass) {\n        TextToSpeechFeatureDependentInterface_inherits(TextToSpeechFeatureDependentMixin, _ParentClass);\n\n        var _super2 = TextToSpeechFeatureDependentInterface_createSuper(TextToSpeechFeatureDependentMixin);\n\n        function TextToSpeechFeatureDependentMixin() {\n          TextToSpeechFeatureDependentInterface_classCallCheck(this, TextToSpeechFeatureDependentMixin);\n\n          return _super2.apply(this, arguments);\n        }\n\n        TextToSpeechFeatureDependentInterface_createClass(TextToSpeechFeatureDependentMixin, [{\n          key: "_onPlay",\n          value: function _onPlay() {}\n        }, {\n          key: "_onPause",\n          value: function _onPause() {}\n        }, {\n          key: "_onResume",\n          value: function _onResume() {}\n        }, {\n          key: "_onStop",\n          value: function _onStop() {}\n        }, {\n          key: "_onSentence",\n          value: function _onSentence() {}\n        }, {\n          key: "_onWord",\n          value: function _onWord() {}\n        }, {\n          key: "_onViseme",\n          value: function _onViseme() {}\n        }, {\n          key: "_onSsml",\n          value: function _onSsml() {}\n        }]);\n\n        return TextToSpeechFeatureDependentMixin;\n      }(ParentClass);\n\n      Object.defineProperties(TextToSpeechFeatureDependentMixin, {\n        EVENT_DEPENDENCIES: {\n          value: TextToSpeechFeatureDependentInterface_objectSpread(TextToSpeechFeatureDependentInterface_objectSpread({}, ParentClass.EVENT_DEPENDENCIES), TextToSpeechFeatureDependentInterface.EVENT_DEPENDENCIES),\n          writable: false\n        }\n      });\n      return TextToSpeechFeatureDependentMixin;\n    }\n  }]);\n\n  return TextToSpeechFeatureDependentInterface;\n}(core_FeatureDependentInterface);\n\nObject.defineProperties(TextToSpeechFeatureDependentInterface, {\n  EVENT_DEPENDENCIES: {\n    value: {\n      TextToSpeechFeature: {\n        play: \'_onPlay\',\n        pause: \'_onPause\',\n        resume: \'_onResume\',\n        stop: \'_onStop\',\n        sentence: \'_onSentence\',\n        word: \'_onWord\',\n        viseme: \'_onViseme\',\n        ssml: \'_onSsml\'\n      }\n    },\n    writable: false\n  }\n});\n/* harmony default export */ const awspack_TextToSpeechFeatureDependentInterface = (TextToSpeechFeatureDependentInterface);\n;// CONCATENATED MODULE: ./src/core/LipsyncFeature.js\nfunction LipsyncFeature_typeof(obj) { "@babel/helpers - typeof"; return LipsyncFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, LipsyncFeature_typeof(obj); }\n\nfunction LipsyncFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction LipsyncFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? LipsyncFeature_ownKeys(Object(source), !0).forEach(function (key) { LipsyncFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : LipsyncFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction LipsyncFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\nfunction LipsyncFeature_slicedToArray(arr, i) { return LipsyncFeature_arrayWithHoles(arr) || LipsyncFeature_iterableToArrayLimit(arr, i) || LipsyncFeature_unsupportedIterableToArray(arr, i) || LipsyncFeature_nonIterableRest(); }\n\nfunction LipsyncFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction LipsyncFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LipsyncFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LipsyncFeature_arrayLikeToArray(o, minLen); }\n\nfunction LipsyncFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction LipsyncFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction LipsyncFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction LipsyncFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction LipsyncFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction LipsyncFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) LipsyncFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) LipsyncFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction LipsyncFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { LipsyncFeature_get = Reflect.get; } else { LipsyncFeature_get = function _get(target, property, receiver) { var base = LipsyncFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return LipsyncFeature_get.apply(this, arguments); }\n\nfunction LipsyncFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = LipsyncFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction LipsyncFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) LipsyncFeature_setPrototypeOf(subClass, superClass); }\n\nfunction LipsyncFeature_setPrototypeOf(o, p) { LipsyncFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return LipsyncFeature_setPrototypeOf(o, p); }\n\nfunction LipsyncFeature_createSuper(Derived) { var hasNativeReflectConstruct = LipsyncFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = LipsyncFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = LipsyncFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return LipsyncFeature_possibleConstructorReturn(this, result); }; }\n\nfunction LipsyncFeature_possibleConstructorReturn(self, call) { if (call && (LipsyncFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return LipsyncFeature_assertThisInitialized(self); }\n\nfunction LipsyncFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction LipsyncFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction LipsyncFeature_getPrototypeOf(o) { LipsyncFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return LipsyncFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n\n/**\n * Default mapping of Polly viseme names to animation options objects.\n *\n * @property {Object} [sil={name: \'sil\'}]\n * @property {Object} [p={name: \'p\', overrideWeight: 0.9}]\n * @property {Object} [t={name: \'t\', blendTime: 0.2}]\n * @property {Object} [S={name: \'S\'}]\n * @property {Object} [T={name: \'T\'}]\n * @property {Object} [f={name: \'f\', overrideWeight: 0.75}]\n * @property {Object} [k={name: \'k\'}]\n * @property {Object} [i={name: \'i\'}]\n * @property {Object} [r={name: \'r\'}]\n * @property {Object} [s={name: \'s\', blendTime: 0.25}]\n * @property {Object} [u={name: \'u\'}]\n * @property {Object} [@={name: \'@\'}]\n * @property {Object} [a={name: \'a\'}]\n * @property {Object} [e={name: \'e\', blendTime: 0.2}]\n * @property {Object} [E={name: \'E\'}]\n * @property {Object} [o={name: \'o\'}]\n * @property {Object} [O={name: \'O\'}]\n */\n\nvar DefaultVisemeMap = {\n  sil: {\n    name: \'sil\'\n  },\n  p: {\n    name: \'p\',\n    overrideWeight: 0.9\n  },\n  t: {\n    name: \'t\',\n    blendTime: 0.2\n  },\n  S: {\n    name: \'S\'\n  },\n  T: {\n    name: \'T\'\n  },\n  f: {\n    name: \'f\',\n    overrideWeight: 0.75\n  },\n  k: {\n    name: \'k\'\n  },\n  i: {\n    name: \'i\'\n  },\n  r: {\n    name: \'r\'\n  },\n  s: {\n    name: \'s\',\n    blendTime: 0.25\n  },\n  u: {\n    name: \'u\'\n  },\n  \'@\': {\n    name: \'@\'\n  },\n  a: {\n    name: \'a\'\n  },\n  e: {\n    name: \'e\',\n    blendTime: 0.2\n  },\n  E: {\n    name: \'E\'\n  },\n  o: {\n    name: \'o\'\n  },\n  O: {\n    name: \'O\'\n  }\n};\n/**\n * Lipsync controls two types of movement: idle animation that should play while\n * speech is playing and viseme animations corresponding to Polly visemes whose\n * weights should be turned on and off as they are encountered in the Polly SSML\n * transcript. Layers owned by this feature will be enabled while speech is playing\n * and disabled once it stops.\n *\n * @extends AbstractHostFeature\n * @alias core/LipsyncFeature\n * @implements TextToSpeechFeatureDependentInterface\n * @implements ManagedAnimationLayerInterface\n */\n\nvar LipsyncFeature = /*#__PURE__*/function (_AbstractHostFeature$) {\n  LipsyncFeature_inherits(LipsyncFeature, _AbstractHostFeature$);\n\n  var _super = LipsyncFeature_createSuper(LipsyncFeature);\n\n  /**\n   * @constructor\n   *\n   * @param {core/HostObject} host - Host that owns the feature.\n   * @param {Object=} visemeOptions - Options for the viseme layers.\n   * @param {number} [visemeOptions.blendTime=0.15] - Default amount of time it\n   * will take to manipulate each freeBlend weight on the viseme states.\n   * @param {Object} [visemeOptions.decayRate={amount: .5, seconds: .5}] - An object\n   * describing the 0-1 factor viseme weight will decay if the viseme duration is\n   * longer than the blendTime and the number of seconds it would take to decay\n   * by that factor.\n   * @param {number} [visemeOptions.easingFn=Quadratic.InOut] - Default easing function\n   * to use when manipulating viseme freeBlend weights.\n   * @param {Array.<Object>} [visemeOptions..layers=[]] - An array of layer options\n   * objects to register as viseme layers.\n   * @param {Object=} talkingOptions - Options for the talking layers.\n   * @param {number} [talkingOptions.blendTime=0.75] - Default amount of time to\n   * enable and disable the talking idle layers\n   * @param {number} [talkingOptions.easingFn=Quadratic.InOut] - Default easing\n   * function to use when manipulating weights on the talking idle layers.\n   * @param {Array.<Object>} [talkingOptions.layers=[]] - An array of layer options\n   * objects to register as talking layers.\n   * @param {number} [visemeLeadTime=.067] - The amount of time to instruct the\n   * TextToSpeechFeature to emit speechmarks before each one\'s actual timestamp\n   * is reached. This will set the \'speechMarkOffset\' variable on the TextToSpeechFeature.\n   */\n  function LipsyncFeature(host) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$blendTime = _ref.blendTime,\n        visemeBlendTime = _ref$blendTime === void 0 ? 0.15 : _ref$blendTime,\n        _ref$decayRate = _ref.decayRate;\n\n    _ref$decayRate = _ref$decayRate === void 0 ? {} : _ref$decayRate;\n    var _ref$decayRate$amount = _ref$decayRate.amount,\n        amount = _ref$decayRate$amount === void 0 ? 0.5 : _ref$decayRate$amount,\n        _ref$decayRate$second = _ref$decayRate.seconds,\n        seconds = _ref$decayRate$second === void 0 ? 0.5 : _ref$decayRate$second,\n        _ref$easingFn = _ref.easingFn,\n        visemeEasingFn = _ref$easingFn === void 0 ? Quadratic.InOut : _ref$easingFn,\n        _ref$layers = _ref.layers,\n        visemeLayers = _ref$layers === void 0 ? [] : _ref$layers;\n\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$blendTime = _ref2.blendTime,\n        talkingBlendTime = _ref2$blendTime === void 0 ? 0.75 : _ref2$blendTime,\n        _ref2$easingFn = _ref2.easingFn,\n        talkingEasingFn = _ref2$easingFn === void 0 ? Quadratic.InOut : _ref2$easingFn,\n        _ref2$layers = _ref2.layers,\n        talkingLayers = _ref2$layers === void 0 ? [] : _ref2$layers;\n\n    var visemeLeadTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.067;\n\n    LipsyncFeature_classCallCheck(this, LipsyncFeature);\n\n    _this = _super.call(this, host);\n    _this._visemeLayers = {};\n    _this._talkingLayers = {};\n    _this.visemeLeadTime = visemeLeadTime; // Register the viseme layers\n\n    visemeLayers.forEach(function (_ref3) {\n      var name = _ref3.name,\n          animation = _ref3.animation,\n          _ref3$visemeMap = _ref3.visemeMap,\n          visemeMap = _ref3$visemeMap === void 0 ? DefaultVisemeMap : _ref3$visemeMap;\n\n      _this.registerVisemeLayer(name, {\n        animation: animation,\n        visemeMap: visemeMap,\n        decayRate: {\n          amount: amount,\n          seconds: seconds\n        },\n        blendTime: visemeBlendTime,\n        easingFn: visemeEasingFn\n      });\n    }); // Register the talking layers\n\n    talkingLayers.forEach(function (_ref4) {\n      var name = _ref4.name,\n          animation = _ref4.animation;\n\n      _this.registerTalkingLayer(name, {\n        animation: animation,\n        blendTime: talkingBlendTime,\n        easingFn: talkingEasingFn\n      });\n    });\n    return _this;\n  }\n  /**\n   * Ensure that registered viseme animations are FreeBlendStates.\n   *\n   * @private\n   *\n   * @param {string} layerName - Name of the layer that contains the viseme animation.\n   * @param {string} animationName - Name of the animation.\n   */\n\n\n  LipsyncFeature_createClass(LipsyncFeature, [{\n    key: "_registerVisemeAnimation",\n    value: function _registerVisemeAnimation(layerName, animationName) {\n      if (this._managedLayers[layerName].animations[animationName].isActive) {\n        if (this._host.AnimationFeature.getAnimationType(layerName, animationName) !== \'freeBlend\') {\n          // Warn and deactivate if the registered state is not freeBlend\n          console.warn("Cannot register Lipsync viseme animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". Viseme animations must be of type \'freeBlend\'."));\n          this._managedLayers[layerName].animations[animationName].isActive = false;\n        } else {\n          // Check if the blendWeights can be manipulated now\n          var weightNames = this._host.AnimationFeature.getAnimationBlendNames(layerName, animationName);\n\n          var visemeMap = this._managedLayers[layerName].animations[animationName].visemeMap;\n          Object.values(visemeMap).forEach(function (visemeOptions) {\n            visemeOptions.isActive = weightNames.includes(visemeOptions.name);\n          });\n        }\n      }\n    }\n    /**\n     * If the added feature is TextToSpeech, update its speechMarkOffset variable.\n     *\n     * @private\n     *\n     * @param {string} typeName - Name of the type of feature that was added.\n     */\n\n  }, {\n    key: "_onFeatureAdded",\n    value: function _onFeatureAdded(typeName) {\n      this._visemeLayers = this._visemeLayers || {};\n      this._talkingLayers = this._talkingLayers || {};\n\n      LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "_onFeatureAdded", this).call(this, typeName);\n\n      if (typeName === \'TextToSpeechFeature\') {\n        this._host.TextToSpeechFeature.speechmarkOffset = -this._visemeLeadTime || 0;\n      }\n    }\n  }, {\n    key: "_onLayerAdded",\n    value: function _onLayerAdded(_ref5) {\n      var name = _ref5.name;\n\n      LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "_onLayerAdded", this).call(this, {\n        name: name\n      }); // Validate the viseme animation\n\n\n      if (this._visemeLayers[name] !== undefined) {\n        this._registerVisemeAnimation(name, this._visemeLayers[name]);\n      }\n    }\n  }, {\n    key: "_onAnimationAdded",\n    value: function _onAnimationAdded(_ref6) {\n      var layerName = _ref6.layerName,\n          animationName = _ref6.animationName;\n\n      LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "_onAnimationAdded", this).call(this, {\n        layerName: layerName\n      }); // Validate the viseme animation\n\n\n      if (this._visemeLayers[layerName] === animationName) {\n        this._registerVisemeAnimation(layerName, this._visemeLayers[layerName]);\n      }\n    }\n  }, {\n    key: "_onPlay",\n    value: function _onPlay() {\n      var _this2 = this;\n\n      // Turn on the layer weights\n      this.enable(); // Set the current animations\n\n      [this._visemeLayers, this._talkingLayers].forEach(function (layers) {\n        Object.entries(layers).forEach(function (_ref7) {\n          var _ref8 = LipsyncFeature_slicedToArray(_ref7, 2),\n              layerName = _ref8[0],\n              animationName = _ref8[1];\n\n          if (_this2._managedLayers[layerName].animations[animationName].isActive) {\n            _this2._host.AnimationFeature.resumeAnimation(layerName, animationName);\n          }\n        });\n      });\n    }\n  }, {\n    key: "_onPause",\n    value: function _onPause() {\n      this._onStop();\n    }\n  }, {\n    key: "_onResume",\n    value: function _onResume() {\n      this._onPlay();\n    }\n  }, {\n    key: "_onStop",\n    value: function _onStop() {\n      var _this3 = this;\n\n      // Turn off the layer weights\n      this.disable(); // Pause the current animations\n\n      [this._visemeLayers, this._talkingLayers].forEach(function (layers) {\n        Object.entries(layers).forEach(function (_ref9) {\n          var _ref10 = LipsyncFeature_slicedToArray(_ref9, 2),\n              layerName = _ref10[0],\n              animationName = _ref10[1];\n\n          if (_this3._managedLayers[layerName].animations[animationName].isActive) {\n            _this3._host.AnimationFeature.pauseAnimation(layerName, animationName);\n          }\n        });\n      });\n    }\n    /**\n     * When viseme events are caught, turn on weight of the new viseme for the duration\n     * of the speech mark, then turn weight back off.\n     *\n     * @private\n     *\n     * @param {Object} event - Event data passed from the speech.\n     * @param {Object} event.mark - Speechmark object.\n     */\n\n  }, {\n    key: "_onViseme",\n    value: function () {\n      var _onViseme2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref11) {\n        var _this4 = this;\n\n        var mark;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mark = _ref11.mark;\n                Object.entries(this._visemeLayers).forEach(function (_ref12) {\n                  var _ref13 = LipsyncFeature_slicedToArray(_ref12, 2),\n                      layerName = _ref13[0],\n                      animName = _ref13[1];\n\n                  // Make sure the layer can be manipulated\n                  var _this4$_managedLayers = _this4._managedLayers[layerName].animations[animName],\n                      isActive = _this4$_managedLayers.isActive,\n                      visemeMap = _this4$_managedLayers.visemeMap;\n\n                  if (!isActive) {\n                    return;\n                  } // Take variables from the viseme if they exist and default to the layer\n\n\n                  var _this4$_managedLayers2 = LipsyncFeature_objectSpread(LipsyncFeature_objectSpread({}, _this4._managedLayers[layerName]), visemeMap[mark.value]),\n                      viseme = _this4$_managedLayers2.name,\n                      isVisemeActive = _this4$_managedLayers2.isActive,\n                      decayRate = _this4$_managedLayers2.decayRate,\n                      blendTime = _this4$_managedLayers2.blendTime,\n                      easingFn = _this4$_managedLayers2.easingFn,\n                      overrideWeight = _this4$_managedLayers2.overrideWeight;\n\n                  var visemeNames = _this4._host.AnimationFeature.getAnimationBlendNames(layerName, animName); // Make sure the new viseme has an active freeBlend weight\n\n\n                  if (!isVisemeActive || !visemeNames.includes(viseme)) {\n                    return;\n                  } // Find the peak weight for the viseme and the amount of time it should\n                  // take to reach it\n\n\n                  var weight = 1;\n                  var duration = mark.duration / 1000;\n\n                  if (duration < blendTime) {\n                    var lerpFactor = blendTime > 0 ? duration / blendTime : 1;\n                    weight = overrideWeight !== undefined ? overrideWeight : core_MathUtils.lerp(0, 1, lerpFactor);\n                  }\n\n                  var blendInTime = Math.min(duration, blendTime); // Find the amount and time viseme will be held for\n\n                  var holdTime = duration - blendTime;\n\n                  if (holdTime < 0) {\n                    // Perform in -> out animation\n                    _this4._animateSimpleViseme(layerName, animName, viseme, weight, blendInTime, blendTime, easingFn);\n                  } else {\n                    var _lerpFactor = decayRate.seconds > 0 ? holdTime / decayRate.seconds : 1; // Perform in -> hold -> out animation\n\n\n                    var decayWeight = core_MathUtils.lerp(weight, weight * decayRate.amount, Math.min(1, _lerpFactor));\n\n                    _this4._animateHeldViseme(layerName, animName, viseme, weight, decayWeight, blendInTime, holdTime, blendTime, easingFn);\n                  }\n                });\n\n              case 2:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onViseme(_x) {\n        return _onViseme2.apply(this, arguments);\n      }\n\n      return _onViseme;\n    }()\n    /**\n     * Animate a viseme blend weight towards a value and then back to zero.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that contains the viseme.\n     * @param {string} animName - Name of the freeblend animation that contains\n     * the viseme.\n     * @param {string} visemeName - Name of the blend weight to manipulate.\n     * @param {number} weight - Peak weight to animate towards.\n     * @param {number} blendInTime - Amount of time it should take to reach the\n     * peak weight.\n     * @param {number} blendOutTime - Amount of time it should take to animate back\n     * to zero after reaching the peak weight.\n     * @param {Function} easingFn - Easing function to use during animation.\n     */\n\n  }, {\n    key: "_animateSimpleViseme",\n    value: function _animateSimpleViseme(layerName, animName, visemeName, peakWeight, blendInTime, blendOutTime, easingFn) {\n      var _this5 = this;\n\n      // Animate towards the peak value\n      var weightPromise = this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, peakWeight, blendInTime, easingFn); // Animate back to zero if there was no weight interruption\n\n\n      weightPromise.then(function () {\n        if (!weightPromise.canceled) {\n          _this5._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, 0, blendOutTime, easingFn);\n        }\n      });\n    }\n    /**\n     * Animate a viseme blend weight towards a value and then back to zero.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that contains the viseme.\n     * @param {string} animName - Name of the freeblend animation that contains\n     * the viseme.\n     * @param {string} visemeName - Name of the blend weight to manipulate.\n     * @param {number} peakWeight - Peak weight to animate towards.\n     * @param {number} decayWeight - Weight to animate towards after reaching the\n     * peak weight.\n     * @param {number} blendInTime - Amount of time it should take to reach the\n     * peak weight.\n     * @param {number} holdTime - Amount of time it should take to reach the decay\n     * weight after the peak weight has been reached.\n     * @param {number} blendOutTime - Amount of time it should take to animate back\n     * to zero after reaching the decay weight.\n     * @param {Function} easingFn - Easing function to use during animation.\n     */\n\n  }, {\n    key: "_animateHeldViseme",\n    value: function () {\n      var _animateHeldViseme2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(layerName, animName, visemeName, peakWeight, decayWeight, blendInTime, holdTime, blendOutTime, easingFn) {\n        var startPromise, holdPromise;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Animate towards the peak value\n                startPromise = this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, peakWeight, blendInTime, easingFn);\n                _context2.next = 3;\n                return startPromise;\n\n              case 3:\n                if (startPromise.canceled) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                // Animate towards the decay value if there was no weight interruption\n                holdPromise = this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, decayWeight, holdTime, easingFn);\n                _context2.next = 7;\n                return holdPromise;\n\n              case 7:\n                if (!holdPromise.canceled) {\n                  // Animate back to zero if there was no weight interruption\n                  this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, 0, blendOutTime, easingFn);\n                }\n\n              case 8:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _animateHeldViseme(_x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10) {\n        return _animateHeldViseme2.apply(this, arguments);\n      }\n\n      return _animateHeldViseme;\n    }()\n    /**\n     * Gets and sets the amount of time in seconds to negatively offset speechmark\n     * emission by.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "visemeLeadTime",\n    get: function get() {\n      return this._visemeLeadTime;\n    },\n    set: function set(seconds) {\n      this._visemeLeadTime = seconds;\n\n      if (this._host.TextToSpeechFeature) {\n        this._host.TextToSpeechFeature.speechmarkOffset = -seconds;\n      }\n    }\n    /**\n     * Start keeping track of an animation layer that owns a freeBlend animation\n     * with blendWeights corresponding to visemes.\n     *\n     * @param {string} layerName - Name of the layer to keep track of.\n     * @param {Object=} options - Options for the layer.\n     * @param {string} [options.animation=\'visemes\'] - Name of the animation on the\n     * layer that will be played during speech. This animation must be of type\n     * freeBlend.\n     * @param {Object=} decayRate\n     * @param {number} [decayRate.amount=0.5] - The percentage to decrease the viseme\'s\n     * peak value by over time once the peak value has been reached.\n     * @param {number} [decayRate.seconds=0.5] - The amount of time in seconds to\n     * decrease the viseme\'s weight once it has reached its peak value.\n     * @param {number=} [options.blendTime=[LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link LipsyncFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\n     * Default amount of time to use when manipulating animation blendWeights.\n     * @param {Function=} options.easingFn - Default easing function to use when\n     * manipulating animation blendWeights.\n     * @param {Object} [options.visemeMap=DefaultVisemeMap] - Object containing key/value pairs of\n     * Polly viseme names mapped to objects containing the name of the corresponding\n     * animation blendWeight and any other animation options to use such as viseme\n     * specific blend times and easing functions.\n     */\n\n  }, {\n    key: "registerVisemeLayer",\n    value: function registerVisemeLayer(layerName) {\n      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref14$animation = _ref14.animation,\n          animation = _ref14$animation === void 0 ? \'visemes\' : _ref14$animation,\n          _ref14$decayRate = _ref14.decayRate,\n          decayRate = _ref14$decayRate === void 0 ? {\n        amount: 0.5,\n        seconds: 0.5\n      } : _ref14$decayRate,\n          _ref14$blendTime = _ref14.blendTime,\n          blendTime = _ref14$blendTime === void 0 ? LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref14$blendTime,\n          easingFn = _ref14.easingFn,\n          _ref14$visemeMap = _ref14.visemeMap,\n          visemeMap = _ref14$visemeMap === void 0 ? DefaultVisemeMap : _ref14$visemeMap;\n\n      // Register the layer and animation\n      this.registerLayer(layerName, {\n        decayRate: decayRate,\n        blendTime: blendTime,\n        easingFn: easingFn,\n        animations: LipsyncFeature_defineProperty({}, animation, {\n          visemeMap: visemeMap\n        })\n      });\n      this._visemeLayers[layerName] = animation; // Validate the viseme animation\n\n      this._registerVisemeAnimation(layerName, animation);\n    }\n    /**\n     * Start keeping track of an animation layer that contains a looping animation\n     * to be played during speech.\n     *\n     * @param {string} layerName - Name of the layer to keep track of.\n     * @param {Object=} options - Options for the layer.\n     * @param {string} [options.animation=\'stand_talk\'] - Name of the animation on the\n     * layer that will be played during speech.\n     * @param {number} [options.blendTime=[LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link LipsyncFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\n     * Default amount of time to use when manipulating the layer\'s weights.\n     * @param {Function=} options.easingFn - Default easing function to use when\n     * manipulating the layer\'s weights.\n     */\n\n  }, {\n    key: "registerTalkingLayer",\n    value: function registerTalkingLayer(layerName) {\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref15$animation = _ref15.animation,\n          animation = _ref15$animation === void 0 ? \'stand_talk\' : _ref15$animation,\n          _ref15$blendTime = _ref15.blendTime,\n          blendTime = _ref15$blendTime === void 0 ? LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref15$blendTime,\n          easingFn = _ref15.easingFn;\n\n      // Register the layer and animation\n      this.registerLayer(layerName, {\n        blendTime: blendTime,\n        easingFn: easingFn,\n        animations: LipsyncFeature_defineProperty({}, animation, {})\n      });\n      this._talkingLayers[layerName] = animation;\n    }\n    /**\n     * Adds a namespace to the host with the name of the feature to contain properties\n     * and methods from the feature that users of the host need access to.\n     *\n     * @see LipsyncFeature\n     */\n\n  }, {\n    key: "installApi",\n    value: function installApi() {\n      var _this6 = this;\n\n      /**\n       * @inner\n       * @namespace LipsyncFeature\n       */\n      var api = LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "installApi", this).call(this);\n      /**\n       * @memberof LipsyncFeature\n       * @name registerLayer\n       * @instance\n       * @method\n       * @see ManagedAnimationLayerInterface#registerLayer\n       */\n\n      /**\n       * @memberof LipsyncFeature\n       * @name registerAnimation\n       * @instance\n       * @method\n       * @see ManagedAnimationLayerInterface#registerAnimation\n       */\n\n      /**\n       * @memberof LipsyncFeature\n       * @name setLayerWeights\n       * @instance\n       * @method\n       * @see ManagedAnimationLayerInterface#setLayerWeights\n       */\n\n      /**\n       * @memberof LipsyncFeature\n       * @name enable\n       * @instance\n       * @method\n       * @see ManagedAnimationLayerInterface#enable\n       */\n\n      /**\n       * @memberof LipsyncFeature\n       * @name disable\n       * @instance\n       * @method\n       * @see ManagedAnimationLayerInterface#disable\n       */\n\n\n      Object.assign(api, {\n        /**\n         * @memberof LipsyncFeature\n         * @instance\n         * @method\n         * @see core/LipsyncFeature#registerVisemeLayer\n         */\n        registerVisemeLayer: this.registerVisemeLayer.bind(this),\n\n        /**\n         * @memberof LipsyncFeature\n         * @instance\n         * @method\n         * @see core/LipsyncFeature#registerTalkingLayer\n         */\n        registerTalkingLayer: this.registerTalkingLayer.bind(this)\n      });\n      /**\n       * @memberof LipsyncFeature\n       * @instance\n       * @name visemeLeadTime\n       * @see core/LipsyncFeature#visemeLeadTime\n       */\n\n      Object.defineProperty(api, \'visemeLeadTime\', {\n        get: function get() {\n          return _this6.visemeLeadTime;\n        },\n        set: function set(seconds) {\n          _this6.visemeLeadTime = seconds;\n        }\n      });\n      return api;\n    }\n  }]);\n\n  return LipsyncFeature;\n}(core_AbstractHostFeature.mix(awspack_TextToSpeechFeatureDependentInterface.Mixin, animpack_ManagedAnimationLayerInterface.Mixin));\n\n/* harmony default export */ const core_LipsyncFeature = (LipsyncFeature);\n\n;// CONCATENATED MODULE: ./src/core/awspack/SSMLSpeechmarkInterface.js\nfunction SSMLSpeechmarkInterface_typeof(obj) { "@babel/helpers - typeof"; return SSMLSpeechmarkInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, SSMLSpeechmarkInterface_typeof(obj); }\n\nfunction SSMLSpeechmarkInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SSMLSpeechmarkInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SSMLSpeechmarkInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) SSMLSpeechmarkInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) SSMLSpeechmarkInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction SSMLSpeechmarkInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) SSMLSpeechmarkInterface_setPrototypeOf(subClass, superClass); }\n\nfunction SSMLSpeechmarkInterface_setPrototypeOf(o, p) { SSMLSpeechmarkInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SSMLSpeechmarkInterface_setPrototypeOf(o, p); }\n\nfunction SSMLSpeechmarkInterface_createSuper(Derived) { var hasNativeReflectConstruct = SSMLSpeechmarkInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = SSMLSpeechmarkInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = SSMLSpeechmarkInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return SSMLSpeechmarkInterface_possibleConstructorReturn(this, result); }; }\n\nfunction SSMLSpeechmarkInterface_possibleConstructorReturn(self, call) { if (call && (SSMLSpeechmarkInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return SSMLSpeechmarkInterface_assertThisInitialized(self); }\n\nfunction SSMLSpeechmarkInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction SSMLSpeechmarkInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction SSMLSpeechmarkInterface_getPrototypeOf(o) { SSMLSpeechmarkInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SSMLSpeechmarkInterface_getPrototypeOf(o); }\n\n/* eslint-disable no-unused-vars */\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable max-classes-per-file */\n\n/* eslint-disable no-empty */\n\n/**\n * Class factory interface for that registers callback method when a ssml speechmark event is emitted.\n *\n * @interface\n * @extends TextToSpeechFeatureDependentInterface\n */\n\nvar SSMLSpeechmarkInterface = /*#__PURE__*/function (_TextToSpeechFeatureD) {\n  SSMLSpeechmarkInterface_inherits(SSMLSpeechmarkInterface, _TextToSpeechFeatureD);\n\n  var _super = SSMLSpeechmarkInterface_createSuper(SSMLSpeechmarkInterface);\n\n  function SSMLSpeechmarkInterface() {\n    SSMLSpeechmarkInterface_classCallCheck(this, SSMLSpeechmarkInterface);\n\n    return _super.apply(this, arguments);\n  }\n\n  SSMLSpeechmarkInterface_createClass(SSMLSpeechmarkInterface, [{\n    key: "_onSsml",\n    value:\n    /**\n     * When ssml events are caught, this will try to parse the speech mark value and execute any function which meets criteria defined in the value.\n     * Speech mark value will be treated as stringified json format containing required feature name, function name and argument array to pass in.\n     * Example speech mark value might look like: \'{"feature":"GestureFeature", "method":"switchToGesture", "args":["genricA", 0.5]}\'\n     *\n     * @private\n     *\n     * @param {Object} event - Event data passed from the speech.\n     * @param {Object} event.mark - Speechmark object.\n     */\n    function _onSsml(_ref) {\n      var mark = _ref.mark;\n    }\n    /**\n     * Creates a class that implements {@link SSMLSpeechmarkInterface}\n     * and extends a specified base class.\n     *\n     * @param {Class} BaseClass - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link SSMLSpeechmarkInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin(BaseClass) {\n      var ParentClass = awspack_TextToSpeechFeatureDependentInterface.Mixin(BaseClass);\n\n      var SSMLSpeechMarkMixin = /*#__PURE__*/function (_ParentClass) {\n        SSMLSpeechmarkInterface_inherits(SSMLSpeechMarkMixin, _ParentClass);\n\n        var _super2 = SSMLSpeechmarkInterface_createSuper(SSMLSpeechMarkMixin);\n\n        function SSMLSpeechMarkMixin() {\n          SSMLSpeechmarkInterface_classCallCheck(this, SSMLSpeechMarkMixin);\n\n          return _super2.apply(this, arguments);\n        }\n\n        SSMLSpeechmarkInterface_createClass(SSMLSpeechMarkMixin, [{\n          key: "_onSsml",\n          value: function _onSsml(_ref2) {\n            var mark = _ref2.mark;\n\n            try {\n              var _JSON$parse = JSON.parse(mark.value),\n                  feature = _JSON$parse.feature,\n                  method = _JSON$parse.method,\n                  args = _JSON$parse.args;\n\n              if (this.constructor.name === feature) {\n                var callback = this[method];\n\n                if (callback && typeof callback === \'function\') {\n                  callback.apply(this, args);\n                } else {\n                  console.warn("Function ".concat(method, " does not exist within feature ").concat(feature));\n                }\n              }\n            } catch (e) {}\n          }\n        }]);\n\n        return SSMLSpeechMarkMixin;\n      }(ParentClass);\n\n      return SSMLSpeechMarkMixin;\n    }\n  }]);\n\n  return SSMLSpeechmarkInterface;\n}(awspack_TextToSpeechFeatureDependentInterface);\n\n/* harmony default export */ const awspack_SSMLSpeechmarkInterface = (SSMLSpeechmarkInterface);\n;// CONCATENATED MODULE: ./src/core/GestureFeature.js\nfunction GestureFeature_typeof(obj) { "@babel/helpers - typeof"; return GestureFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, GestureFeature_typeof(obj); }\n\nfunction GestureFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction GestureFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? GestureFeature_ownKeys(Object(source), !0).forEach(function (key) { GestureFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : GestureFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction GestureFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction GestureFeature_slicedToArray(arr, i) { return GestureFeature_arrayWithHoles(arr) || GestureFeature_iterableToArrayLimit(arr, i) || GestureFeature_unsupportedIterableToArray(arr, i) || GestureFeature_nonIterableRest(); }\n\nfunction GestureFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction GestureFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return GestureFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GestureFeature_arrayLikeToArray(o, minLen); }\n\nfunction GestureFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction GestureFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction GestureFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction GestureFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GestureFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GestureFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) GestureFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) GestureFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction GestureFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { GestureFeature_get = Reflect.get; } else { GestureFeature_get = function _get(target, property, receiver) { var base = GestureFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return GestureFeature_get.apply(this, arguments); }\n\nfunction GestureFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GestureFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction GestureFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) GestureFeature_setPrototypeOf(subClass, superClass); }\n\nfunction GestureFeature_setPrototypeOf(o, p) { GestureFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GestureFeature_setPrototypeOf(o, p); }\n\nfunction GestureFeature_createSuper(Derived) { var hasNativeReflectConstruct = GestureFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = GestureFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = GestureFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return GestureFeature_possibleConstructorReturn(this, result); }; }\n\nfunction GestureFeature_possibleConstructorReturn(self, call) { if (call && (GestureFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return GestureFeature_assertThisInitialized(self); }\n\nfunction GestureFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GestureFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction GestureFeature_getPrototypeOf(o) { GestureFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GestureFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n\n/**\n * @constant\n */\n\nvar DefaultGestureWords = {\n  big: [\'add\', \'above\', \'authority\', \'big\', \'cover\', \'full\', \'fly\', \'grow\', \'growth\', \'high\', \'huge\', \'increase\', \'major\', \'majority\', \'large\', \'leader\', \'lot\', \'raise\', \'rise\', \'tall\'],\n  heart: [\'accept\', \'admit\', \'believe\', \'care\', \'feeling\', \'feel\', \'friend\', \'grateful\', \'happy\', \'heart\', \'human\', \'pain\', \'save\', \'safe\', \'kind\', \'love\'],\n  "in": [\'include\', \'including\', \'inside\', \'into\', \'now\', \'near\', \'nearest\', \'closest\', \'therein\', \'within\'],\n  many: [\'all\', \'always\', \'any\', \'anyone\', \'among\', \'area\', \'around\', \'beautiful\', \'entire\', \'environment\', \'environments\', \'environmental\', \'everybody\', \'everyone\', \'everything\', \'audience\', \'total\', \'group\', \'groups\', \'million\', \'millions\', \'others\', \'billion\', \'billions\', \'hundred\', \'hundreds\', \'many\', \'thousand\', \'thousands\', \'world\', \'worlds\', \'outside\', \'reveal\'],\n  movement: [\'away\', \'across\', \'ahead\', \'along\', \'far\', \'fast\', \'follow\', \'go\', \'leave\', \'move\', \'movement\', \'through\', \'throughout\', \'toward\', \'travel\', \'turned\', \'passed\'],\n  one: [\'single\', \'one\', \'once\', \'first\', \'firstly\', \'only\', \'solo\', \'warned\', \'truly\', \'up\', \'alone\'],\n  aggressive: [\'power\', \'powers\', \'powerful\', \'assert\', \'assertive\', \'strong\', \'stronger\', \'strongest\', \'strength\', \'flex\', \'dang\', \'damn\', \'damnit\', \'darn\', \'shucks\', \'doh\', \'drat\', \'angry\', \'angrier\', \'angriest\', \'aggressive\', \'annoyed\', \'annoying\', \'attack\', \'attacking\', \'offense\', \'offensive\', \'battle\'],\n  you: [\'you\', \'yall\', "y\'all", \'your\', \'yours\', \'thou\', \'thy\'],\n  defense: [\'defense\', \'fear\', \'repulsed\', \'scared\', \'scary\', \'scarier\', \'scariest\', \'fearful\', \'afraid\', \'cower\', \'cowers\', \'cowering\', \'hideous\', \'doomed\', \'terrified\', \'terrify\', \'terrifying\', \'terrifies\', \'spooky\', \'spookier\', \'spookiest\'],\n  wave: [\'hello\', \'hi\', \'hiya\', \'howdy\', \'welcome\', \'aloha\', \'heya\', \'hey\', \'bye\', \'goodbye\', \'hola\', \'adios\', \'chao\'],\n  self: [\'my\', \'I\', \'myself\', \'self\', "I\'ve", \'Ive\', \'me\', \'mine\', \'own\']\n};\n/**\n * Gesture allows you to play animations on demand on one or more layers from script\n * or ssml. If gesture is played that is a QueueState, the queue will automatically\n * be progressed after a given hold time if a looping queued state is reached. Gesture\n * layers can optionally be automatically disabled when no gesture animation is\n * in progress.\n *\n * @extends AbstractHostFeature\n * @implements SSMLSpeechmarkInterface\n * @implements ManagedAnimationLayerInterface\n */\n\nvar GestureFeature = /*#__PURE__*/function (_AbstractHostFeature$) {\n  GestureFeature_inherits(GestureFeature, _AbstractHostFeature$);\n\n  var _super = GestureFeature_createSuper(GestureFeature);\n\n  /**\n   * @constructor\n   *\n   * @param {core/HostObject} host - Host object that owns the feature.\n   * @param {Object=} options - Optional options for the feature.\n   * @param {number} [options.holdTime = 3] - Amount of time in seconds that must\n   * elapse before advancing a gesture that\'s a {@link QueueState} when the current\n   * state in the queue is set to loop infinitely.\n   * @param {number} [options.minimumInterval = 0.25] - The minimum amount of time\n   * in seconds that must elapse before another gesture can be played.\n   * @param  {Object} layers - An object that maps layer names to layer options.\n   * These are the layers that will be registered as tracked gesture layers. See\n   * {@link ManagedAnimationLayerInterface#registerLayer} for more information\n   * on expected format for each layer options object.\n   */\n  function GestureFeature(host) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$holdTime = _ref.holdTime,\n        holdTime = _ref$holdTime === void 0 ? 3 : _ref$holdTime,\n        _ref$minimumInterval = _ref.minimumInterval,\n        minimumInterval = _ref$minimumInterval === void 0 ? 1 : _ref$minimumInterval,\n        _ref$layers = _ref.layers,\n        layers = _ref$layers === void 0 ? {} : _ref$layers;\n\n    GestureFeature_classCallCheck(this, GestureFeature);\n\n    _this = _super.call(this, host);\n    _this.holdTime = holdTime;\n    _this.minimumInterval = minimumInterval; // Register the gesture layers\n\n    Object.entries(layers).forEach(function (_ref2) {\n      var _ref3 = GestureFeature_slicedToArray(_ref2, 2),\n          name = _ref3[0],\n          _ref3$ = _ref3[1],\n          options = _ref3$ === void 0 ? {} : _ref3$;\n\n      _this.registerLayer(name, options);\n    });\n    return _this;\n  }\n  /**\n   * Return a valid hold time value. If hold time isn\'t defined for the animation,\n   * try to use the hold time for the layer. If that\'s not defined, fall back to\n   * the hold time for the feature.\n   *\n   * @private\n   *\n   * @param {Object} layer - Managed layer options object.\n   * @param {Object} animation - Managed animation options object.\n   *\n   * @returns {number}\n   */\n\n\n  GestureFeature_createClass(GestureFeature, [{\n    key: "_getHoldTime",\n    value: function _getHoldTime(layer, animation) {\n      var layerHoldTime = layer.holdTime !== undefined ? layer.holdTime : this.holdTime;\n      return animation.holdTime !== undefined ? animation.holdTime : layerHoldTime;\n    }\n    /**\n     * Return a valid minimum interval value. If minimum interval isn\'t defined for\n     * the animation, try to use the minimum interval for the layer. If that\'s not\n     * defined, fall back to the minimum interval for the feature.\n     *\n     * @private\n     *\n     * @param {Object} layer - Managed layer options object.\n     * @param {Object} animation - Managed animation options object.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "_getMinimumInterval",\n    value: function _getMinimumInterval(layer, animation) {\n      var layerMinimumInterval = layer.minimumInterval !== undefined ? layer.minimumInterval : this.minimumInterval;\n      return animation.minimumInterval !== undefined ? animation.minimumInterval : layerMinimumInterval;\n    }\n    /**\n     * Callback for {@link core/AnimationFeature#playNextAnimation} event. If the\n     * event is emitted for a managed animation and the new queued state cannot\n     * advance on its own, start a new timer promise that will advance the queue\n     * once it resolves.\n     *\n     * @private\n     *\n     * @param {Object} options - Options object passed from playNextAnimation event.\n     * @param {string} layerName - Name of the layer that owns the queue state.\n     * @param {string} animationName - Name of the queue state animation.\n     * @param {boolean} canAdvance - Whether or not the current state in the queue\n     * can advance on its own.\n     * @param {boolean} isQueueEnd - Whether the current state in the queue is the last\n     * state in the queue.\n     */\n\n  }, {\n    key: "_onNext",\n    value: function _onNext(_ref4) {\n      var _this2 = this;\n\n      var layerName = _ref4.layerName,\n          animationName = _ref4.animationName,\n          canAdvance = _ref4.canAdvance,\n          isQueueEnd = _ref4.isQueueEnd;\n      // Exit if this isn\'t a managed layer\n      var layer = this._managedLayers[layerName];\n\n      if (layer === undefined) {\n        return;\n      } // Exit if it isn\'t a managed animation\n\n\n      var animation = layer.animations[animationName];\n\n      if (animation === undefined) {\n        return;\n      } // Start a new timer for looping states that aren\'t the end of the queue\n\n\n      if (!canAdvance && !isQueueEnd && layer.currentGesture === animationName) {\n        var holdTime = this._getHoldTime(layer, animation);\n\n        layer.holdTimer.cancel(); // Skip to the next animation right away if hold time is zero\n\n        if (holdTime <= 0) {\n          this._host.AnimationFeature.playNextAnimation(layerName, animationName);\n        } // Wait for the given hold time before progressing\n        else {\n          layer.holdTimer = core_Utils.wait(holdTime, {\n            onFinish: function onFinish() {\n              // Advance the queue to the next state\n              if (layer.currentGesture === animationName) {\n                _this2._host.AnimationFeature.playNextAnimation(layerName, animationName);\n              }\n            }\n          });\n        }\n      }\n    }\n    /**\n     * Callback for {@link core/AnimationFeature#stopAnimation} event. If the\n     * event is emitted for a managed animation cancel the layer\'s stored timers.\n     * If the layer is set to auto-disable set its weight to 0.\n     *\n     * @private\n     *\n     * @param {Object} options - Options object passed from playNextAnimation event.\n     * @param {string} layerName - Name of the layer that owns the stopped animation.\n     * @param {string} animationName - Name of the animation that was stopped.\n     */\n\n  }, {\n    key: "_onStop",\n    value: function _onStop(_ref5) {\n      var layerName = _ref5.layerName,\n          animationName = _ref5.animationName;\n      // Make sure the layer is managed\n      var layer = this._managedLayers[layerName];\n\n      if (layer === undefined) {\n        return;\n      } // Make sure the animation is managed\n\n\n      var animation = layer.animations[animationName];\n\n      if (animation !== undefined && animationName === layer.currentGesture) {\n        layer.currentGesture = null;\n        layer.playTimer = null;\n        layer.holdTimer.cancel(); // Turn off layer weight\n\n        if (layer.autoDisable) {\n          this.setLayerWeights(function (name) {\n            return name === layerName;\n          }, 0);\n        }\n      }\n    }\n  }, {\n    key: "_onAnimationAdded",\n    value: function _onAnimationAdded(_ref6) {\n      var layerName = _ref6.layerName,\n          animationName = _ref6.animationName;\n      var layer = this._managedLayers[layerName];\n\n      if (layer !== undefined) {\n        var animation = layer.animations[animationName]; // Register the animation as active if it is unmanaged\n\n        if (animation === undefined) {\n          this.registerAnimation(layerName, animationName);\n        } // Mark the animation as active if it is managed\n        else {\n          animation.isActive = true;\n        }\n      }\n    }\n  }, {\n    key: "registerLayer",\n    value: function registerLayer(name) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "registerLayer", this).call(this, name, GestureFeature_objectSpread(GestureFeature_objectSpread({}, options), {}, {\n        holdTimer: core_Deferred.resolve(),\n        playTimer: null,\n        currentGesture: null\n      }));\n\n      if (this._managedLayers[name].isActive) {\n        this._host.AnimationFeature.getAnimations(name).forEach(function (anim) {\n          // Automatically register all animations on the layer\n          if (_this3._managedLayers[name].animations[anim] === undefined) {\n            _this3.registerAnimation(name, anim, _this3._managedLayers[name].animations[anim]);\n          }\n        });\n      }\n    }\n  }, {\n    key: "registerAnimation",\n    value: function registerAnimation(layerName, animationName) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      // Try to fall back to a default word array\n      if (!(options.words instanceof Array) && !(options.words instanceof Set)) {\n        options.words = DefaultGestureWords[animationName] || [];\n      }\n\n      GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "registerAnimation", this).call(this, layerName, animationName, options);\n    }\n    /**\n     * Create an object that maps ssml mark syntax required to play each gesture to\n     * the words array associated with each gesture. Words arrays are defined at when\n     * the gesture animation is registered. Gestures without associated words will\n     * be excluded from the result. The resulting object can be used as an input\n     * for {@link TextToSpeechUtils.autoGenerateSSMLMarks} to update a speech string\n     * with the markup required to play gestures timed with their associated words.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: "createGestureMap",\n    value: function createGestureMap() {\n      var _this4 = this;\n\n      var gestureMap = {};\n      Object.entries(this._managedLayers).forEach(function (_ref7) {\n        var _ref8 = GestureFeature_slicedToArray(_ref7, 2),\n            layerName = _ref8[0],\n            animations = _ref8[1].animations;\n\n        Object.entries(animations).forEach(function (_ref9) {\n          var _ref10 = GestureFeature_slicedToArray(_ref9, 2),\n              animationName = _ref10[0],\n              _ref10$ = _ref10[1],\n              holdTime = _ref10$.holdTime,\n              minimumInterval = _ref10$.minimumInterval,\n              words = _ref10$.words,\n              transitionTime = _ref10$.transitionTime;\n\n          // Only store gestures that have any associated words\n          if (words.length) {\n            var options = GestureFeature_objectSpread(GestureFeature_objectSpread(GestureFeature_objectSpread({}, holdTime && {\n              holdTime: holdTime\n            }), minimumInterval && {\n              minimumInterval: minimumInterval\n            }), transitionTime && {\n              transitionTime: transitionTime\n            });\n\n            var key = {\n              feature: _this4.constructor.name,\n              method: \'playGesture\',\n              args: [layerName, animationName, options]\n            };\n            gestureMap[JSON.stringify(key)] = words;\n          }\n        });\n      });\n      return gestureMap;\n    }\n    /**\n     * Create an array that contains ssml mark syntax required to play each gesture\n     * that does not have any associated words. The resulting array can be used as\n     * an input for {@link TextToSpeechUtils.autoGenerateSSMLMarks} or\n     * {@link TextToSpeechUtils.addMarksToUnmarkedSentences} to update a speech\n     * string with the markup required to play random gestures at each unmarked\n     * sentence in the string.\n     *\n     * @param {Array.<string>=} layers - An array of names of managed layers to generate\n     * marks for. If undefined, use all managed layers.\n     *\n     * @returns {Array.<string>}\n     */\n\n  }, {\n    key: "createGenericGestureArray",\n    value: function createGenericGestureArray(layers) {\n      var _this5 = this;\n\n      var genericGestures = [];\n      layers = layers || Object.keys(this._managedLayers);\n      layers.forEach(function (layerName) {\n        var layer = _this5._managedLayers[layerName]; // Make sure the layer is managed\n\n        if (!layer) {\n          return;\n        }\n\n        Object.entries(layer.animations).forEach(function (_ref11) {\n          var _ref12 = GestureFeature_slicedToArray(_ref11, 2),\n              animationName = _ref12[0],\n              _ref12$ = _ref12[1],\n              holdTime = _ref12$.holdTime,\n              minimumInterval = _ref12$.minimumInterval,\n              words = _ref12$.words,\n              transitionTime = _ref12$.transitionTime;\n\n          // Only store gestures that don\'t have any associated words\n          if (!words.length) {\n            var options = GestureFeature_objectSpread(GestureFeature_objectSpread(GestureFeature_objectSpread({}, holdTime && {\n              holdTime: holdTime\n            }), minimumInterval && {\n              minimumInterval: minimumInterval\n            }), transitionTime && {\n              transitionTime: transitionTime\n            });\n\n            var key = JSON.stringify({\n              feature: _this5.constructor.name,\n              method: \'playGesture\',\n              args: [layerName, animationName, options]\n            });\n\n            if (!genericGestures.includes(key)) {\n              genericGestures.push(key);\n            }\n          }\n        });\n      });\n      return genericGestures;\n    }\n    /**\n     * Play a managed gesture animation.\n     *\n     * @param {string} layerName - The name of the layer that contains the gesture\n     * animation.\n     * @param {string} animationName - The name of the gesture animation.\n     * @param {Object=} options - Optional gesture options.\n     * @param {number=} options.holdTime - This option only applies to {@link QueueState}\n     * gestures. When a QueueState gesture progresses to a looping state, this option\n     * defines how many seconds should elapse before moving the queue forward. If\n     * undefined, it will fall back first to the holdTime defined in the options when\n     * the gesture animation was registered and then to the holdTime defined on the\n     * feature.\n     * @param {number=} options.minimumInterval - The minimum amount of time that\n     * must have elapsed since the last time a gesture was played.\n     */\n\n  }, {\n    key: "playGesture",\n    value: function playGesture(layerName, animationName) {\n      var _ref13 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          holdTime = _ref13.holdTime,\n          minimumInterval = _ref13.minimumInterval,\n          transitionTime = _ref13.transitionTime,\n          _ref13$force = _ref13.force,\n          force = _ref13$force === void 0 ? false : _ref13$force;\n\n      // Make sure the animation is registered\n      if (this._managedLayers[layerName] === undefined || this._managedLayers[layerName].animations[animationName] === undefined) {\n        this.registerAnimation(layerName, animationName, {\n          holdTime: holdTime,\n          minimumInterval: minimumInterval,\n          transitionTime: transitionTime\n        });\n      }\n\n      var layer = this._managedLayers[layerName];\n      var animation = layer.animations[animationName]; // Make sure the animation is active\n\n      if (!animation.isActive) {\n        // Create warning message based on which object doesn\'t exist yet\n        var typeName = layer.isActive ? \'animation\' : \'layer\';\n        var message = "Skipping gesture ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No ").concat(typeName, " exists with this name yet.");\n        console.warn(message);\n        return core_Deferred.cancel({\n          reason: \'inactive\',\n          value: typeName\n        });\n      } // Check if the gesture is already playing\n\n\n      var currentGesture = layer.currentGesture;\n\n      if (currentGesture === animationName && !force) {\n        var _message = "Skipping gesture ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". The gesture is already playing. Use options.force to force the gesture replay, which may result in a hard transition.");\n\n        console.warn(_message);\n        return core_Deferred.cancel({\n          reason: \'playing\',\n          value: animationName\n        });\n      } // Update animation options\n\n\n      if (holdTime !== undefined) {\n        animation.holdTime = holdTime;\n      }\n\n      if (minimumInterval !== undefined) {\n        animation.minimumInterval = minimumInterval;\n      } else {\n        minimumInterval = this._getMinimumInterval(layer, animation);\n      } // Check the interval\n\n\n      if (!force && layer.playTimer !== null && layer.playTimer < minimumInterval) {\n        console.warn("Skipping gesture ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". Minimum interval ").concat(minimumInterval, " has not been met."));\n        return core_Deferred.cancel({\n          reason: \'minimumInterval\',\n          value: minimumInterval - layer.playTimer\n        });\n      } // Play the animation\n\n\n      layer.currentGesture = animationName;\n      layer.playTimer = 0;\n      layer.holdTimer.cancel();\n\n      if (layer.autoDisable) {\n        this.setLayerWeights(function (name) {\n          return name === layerName;\n        }, 1);\n      }\n\n      return this._host.AnimationFeature.playAnimation(layerName, animationName, transitionTime);\n    }\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      var _this6 = this;\n\n      GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "update", this).call(this, deltaTime); // Increment the timers\n\n\n      Object.entries(this._managedLayers).forEach(function (_ref14) {\n        var _ref15 = GestureFeature_slicedToArray(_ref14, 2),\n            name = _ref15[0],\n            options = _ref15[1];\n\n        if (options.isActive && !_this6._host.AnimationFeature.getPaused(name)) {\n          options.holdTimer.execute(deltaTime);\n\n          if (options.playTimer !== null) {\n            options.playTimer += deltaTime / 1000;\n          }\n        }\n      });\n    }\n  }, {\n    key: "installApi",\n    value: function installApi() {\n      /**\n       * @inner\n       * @namespace GestureFeature\n       */\n      var api = GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "installApi", this).call(this);\n\n      Object.assign(api, {\n        /**\n         * @memberof GestureFeature\n         * @instance\n         * @method\n         * @see GestureFeature#createGestureMap\n         */\n        createGestureMap: this.createGestureMap.bind(this),\n\n        /**\n         * @memberof GestureFeature\n         * @instance\n         * @method\n         * @see GestureFeature#createGenericGestureArray\n         */\n        createGenericGestureArray: this.createGenericGestureArray.bind(this),\n\n        /**\n         * @memberof GestureFeature\n         * @instance\n         * @method\n         * @see GestureFeature#playGesture\n         */\n        playGesture: this.playGesture.bind(this)\n      });\n    }\n  }]);\n\n  return GestureFeature;\n}(core_AbstractHostFeature.mix(awspack_SSMLSpeechmarkInterface.Mixin, animpack_ManagedAnimationLayerInterface.Mixin));\n\nObject.defineProperties(GestureFeature, {\n  DEFAULT_LAYER_OPTIONS: {\n    value: GestureFeature_objectSpread(GestureFeature_objectSpread({}, GestureFeature.DEFAULT_LAYER_OPTIONS), {}, {\n      autoDisable: true\n    }),\n    writable: false\n  },\n  EVENT_DEPENDENCIES: {\n    value: GestureFeature_objectSpread(GestureFeature_objectSpread({}, GestureFeature.EVENT_DEPENDENCIES), {}, {\n      AnimationFeature: GestureFeature_objectSpread(GestureFeature_objectSpread({}, GestureFeature.EVENT_DEPENDENCIES.AnimationFeature), {}, {\n        playNextAnimation: \'_onNext\',\n        stopAnimation: \'_onStop\',\n        interruptAnimation: \'_onStop\'\n      })\n    })\n  }\n});\n/* harmony default export */ const core_GestureFeature = (GestureFeature);\n\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationUtils.js\nfunction AnimationUtils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AnimationUtils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AnimationUtils_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationUtils_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationUtils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n/**\n * A collection of useful animation functions.\n *\n * @hideconstructor\n */\n\nvar AnimationUtils = /*#__PURE__*/function () {\n  function AnimationUtils() {\n    AnimationUtils_classCallCheck(this, AnimationUtils);\n  }\n\n  AnimationUtils_createClass(AnimationUtils, null, [{\n    key: "lerp",\n    value: function lerp(from, to, factor) {\n      console.warn("AnimationUtils.lerp is being deprecated. Use MathUtils.lerp instead.");\n      return core_MathUtils.lerp(from, to, factor);\n    }\n    /**\n     * Clamp a number between 2 values.\n     *\n     * @param {number} value - Value to clamp.\n     * @param {number} [min=0] - Minumum value.\n     * @param {number} [max=1] - Maximum value.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "clamp",\n    value: function clamp(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      console.warn("AnimationUtils.clamp is being deprecated. Use MathUtils.clamp instead.");\n      return core_MathUtils.clamp(value, min, max);\n    }\n    /**\n     * Return a deferred promise that can be used to update the value of a numeric\n     * property of this object over time. Pass delta time in milliseconds to the\n     * deferred promise\'s execute method in an update loop to animate the property\n     * towards the target value.\n     *\n     * @param {Object} propertyOwner - Object that contains the property to animation.\n     * @param {string} propertyName - Name of the property to animate.\n     * @param {number} targetValue - Target value to reach.\n     * @param {Object=} options - Optional options object\n     * @param {number} [options.seconds=0] - Number of seconds it will take to reach\n     * the target value.\n     * @param {Function} [options.easingFn=Linear.InOut] - Easing function to use for animation.\n     * @param {Function} [options.onFinish] - Callback to execute once the animation completes.\n     * The target value is passed as a parameter.\n     * @param {Function=} options.onProgress - Callback to execute each time the animation\n     * property is updated during the animation. The property\'s value at the time of\n     * the update is passed as a parameter.\n     * @param {Function=} options.onCancel - Callback to execute if the user cancels the\n     * animation before completion. The animation property\'s value at the time of\n     * cancel is passed as a parameter.\n     * @param {Function=} options.onError - Callback to execute if the animation stops\n     * because an error is encountered. The error message is passed as a parameter.\n     *\n     * @returns {Deferred} Resolves with the property\'s value once it reaches the\n     * target value.\n     */\n\n  }, {\n    key: "interpolateProperty",\n    value: function interpolateProperty(propertyOwner, propertyName, targetValue) {\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          _ref$seconds = _ref.seconds,\n          seconds = _ref$seconds === void 0 ? 0 : _ref$seconds,\n          easingFn = _ref.easingFn,\n          _onFinish = _ref.onFinish,\n          _onProgress = _ref.onProgress,\n          _onCancel = _ref.onCancel,\n          onError = _ref.onError;\n\n      // Make sure property is an object\n      if (!(propertyOwner instanceof Object)) {\n        var e = new Error("Cannot interpolate property ".concat(propertyName, ". Property owner must be an object."));\n\n        if (typeof onError === \'function\') {\n          onError(e);\n        }\n\n        return core_Deferred.reject(e);\n      } // Make sure property is numeric\n\n\n      if (Number.isNaN(Number(propertyOwner[propertyName]))) {\n        var _e = new Error("Cannot interpolate property ".concat(propertyName, ". Property must be numeric."));\n\n        if (typeof onError === \'function\') {\n          onError(_e);\n        }\n\n        return core_Deferred.reject(_e);\n      } // Make sure the target value is numeric\n\n\n      if (Number.isNaN(Number(targetValue))) {\n        var _e2 = new Error("Cannot interpolate property ".concat(propertyName, " to value ").concat(targetValue, ". Target value must be numeric."));\n\n        if (typeof onError === \'function\') {\n          onError(_e2);\n        }\n\n        return core_Deferred.reject(_e2);\n      } // Resolve immediately if the target has already been reached\n\n\n      var startValue = propertyOwner[propertyName];\n\n      if (startValue === targetValue) {\n        if (typeof _onFinish === \'function\') {\n          _onFinish(targetValue);\n        }\n\n        return core_Deferred.resolve(targetValue);\n      } // Default to linear interpolation\n\n\n      if (typeof easingFn !== \'function\') {\n        if (easingFn !== undefined) {\n          console.warn("Invalid property interpolation easingFn. Defaulting to linear interpolation.");\n        }\n\n        easingFn = Linear.InOut;\n      }\n\n      var interpolator = core_Utils.wait(seconds, {\n        onFinish: function onFinish() {\n          propertyOwner[propertyName] = targetValue;\n\n          if (typeof _onFinish === \'function\') {\n            _onFinish(targetValue);\n          }\n        },\n        onCancel: function onCancel() {\n          if (typeof _onCancel === \'function\') {\n            _onCancel(propertyOwner[propertyName]);\n          }\n        },\n        onProgress: function onProgress(progress) {\n          if (propertyOwner[propertyName] !== targetValue) {\n            // Calculate the lerp factor\n            var easeFactor = easingFn(progress);\n\n            if (typeof easeFactor !== \'number\') {\n              var _e3 = new Error("Invalid property interpolation easingFn. EasingFn must return a number.");\n\n              interpolator.reject(_e3);\n              return;\n            } // Update the value\n\n\n            propertyOwner[propertyName] = core_MathUtils.lerp(startValue, targetValue, easeFactor);\n          } // Signal progress\n\n\n          if (typeof _onProgress === \'function\') {\n            _onProgress(propertyOwner[propertyName]);\n          } // Signal completion once time is up\n\n\n          if (progress === 1) {\n            propertyOwner[propertyName] = targetValue;\n            interpolator.resolve(targetValue);\n          }\n        },\n        onError: onError\n      });\n      return interpolator;\n    }\n  }]);\n\n  return AnimationUtils;\n}();\n\n/* harmony default export */ const animpack_AnimationUtils = (AnimationUtils);\n;// CONCATENATED MODULE: ./src/core/animpack/state/AbstractState.js\nfunction AbstractState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AbstractState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AbstractState_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractState_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n/**\n * Base class for a state in our animation system.\n *\n * @abstract\n */\n\nvar AbstractState = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {Object=} options - Options for the animation state.\n   * @param {string=} options.name - Name for the animation state. Names must be\n   * unique for the container the state is applied to and should be validated at\n   * the container level. If no name is given it will default to the constructor\n   * name.\n   * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\n   */\n  function AbstractState() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    AbstractState_classCallCheck(this, AbstractState);\n\n    this.name = options.name !== undefined ? options.name : this.constructor.name;\n    this._weight = options.weight !== undefined ? core_MathUtils.clamp(options.weight, 0, 1) : 0;\n    this._internalWeight = this._weight;\n    this._paused = false;\n    this._promises = {\n      finish: core_Deferred.resolve(),\n      weight: core_Deferred.resolve(),\n      play: core_Deferred.resolve()\n    };\n    this._playCallbacks = {\n      onFinish: undefined,\n      onError: undefined,\n      onCancel: undefined\n    };\n  }\n  /**\n   * Gets whether or not the state is currently paused.\n   *\n   * @type {number}\n   */\n\n\n  AbstractState_createClass(AbstractState, [{\n    key: "paused",\n    get: function get() {\n      return this._paused;\n    }\n    /**\n     * Gets and sets the user defined weight.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "weight",\n    get: function get() {\n      return this._weight;\n    },\n    set: function set(weight) {\n      this._weight = core_MathUtils.clamp(weight, 0, 1);\n    }\n    /**\n     * Gets whether or not the weight is currently being animated.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "weightPending",\n    get: function get() {\n      return this._promises.weight && this._promises.weight.pending;\n    }\n    /**\n     * Updates the user defined weight over time.\n     *\n     * @param {number} weight - The target weight value.\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\n     * target weight.\n     * @param {Function=} easingFn - The easing function to use for interpolation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "setWeight",\n    value: function setWeight(weight) {\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\n\n      this._promises.weight.cancel();\n\n      weight = core_MathUtils.clamp(weight);\n      this._promises.weight = animpack_AnimationUtils.interpolateProperty(this, \'weight\', weight, {\n        seconds: seconds,\n        easingFn: easingFn\n      });\n      return this._promises.weight;\n    }\n    /**\n     * Gets the internal weight.\n     *\n     * @readonly\n     * @type {number}\n     */\n\n  }, {\n    key: "internalWeight",\n    get: function get() {\n      return this._internalWeight;\n    }\n    /**\n     * Multiplies the user weight by a factor to determine the internal weight.\n     *\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\n     */\n\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      this._internalWeight = this._weight * factor;\n    }\n    /**\n     * Update any values that need to be evaluated every frame.\n     *\n     * @param {number} deltaTime - Time in milliseconds since the last update.\n     */\n\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      if (!this._paused) {\n        Object.values(this._promises).forEach(function (promise) {\n          promise.execute(deltaTime);\n        });\n      }\n    }\n    /**\n     * Start playback of the state from the beginning.\n     *\n     * @param {Function=} onFinish - Function to execute when the state finishes.\n     * @param {Function=} onError - Function to execute if the state encounters\n     * an error during playback.\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "play",\n    value: function play(onFinish, onError, onCancel) {\n      this._paused = false;\n      this._playCallbacks.onFinish = onFinish;\n      this._playCallbacks.onError = onError;\n      this._playCallbacks.onCancel = onCancel;\n      this._promises.play = new core_Deferred(undefined, onFinish, onError, onCancel);\n      this._promises.finish = core_Deferred.all([this._promises.play, this._promises.weight]);\n      return this._promises.finish;\n    }\n    /**\n     * Pause playback of the state. This prevents pending promises from being executed.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "pause",\n    value: function pause() {\n      this._paused = true;\n      return true;\n    }\n    /**\n     * Resume playback of the state.\n     *\n     * @param {Function=} onFinish - Function to execute when the state finishes.\n     * @param {Function=} onError - Function to execute if the state encounters\n     * an error during playback.\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "resume",\n    value: function resume(onFinish, onError, onCancel) {\n      this._paused = false;\n\n      if (!this._promises.play.pending) {\n        this._playCallbacks.onFinish = onFinish || this._playCallbacks.onFinish;\n        this._playCallbacks.onError = onError || this._playCallbacks.onError;\n        this._playCallbacks.onCancel = onCancel || this._playCallbacks.onCancel;\n        this._promises.play = new core_Deferred(undefined, this._playCallbacks.onFinish, this._playCallbacks.onError, this._playCallbacks.onCancel);\n        this._promises.finish = core_Deferred.all([this._promises.play, this._promises.weight]);\n      }\n\n      return this._promises.finish;\n    }\n    /**\n     * Cancel playback of the state and cancel any pending promises.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      this._paused = true;\n      Object.values(this._promises).forEach(function (promise) {\n        promise.cancel();\n      });\n      return true;\n    }\n    /**\n     * Stop playback of the state and resolve any pending promises.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "stop",\n    value: function stop() {\n      this._paused = true;\n      Object.values(this._promises).forEach(function (promise) {\n        promise.resolve();\n      });\n      return true;\n    }\n    /**\n     * Cancel any pending promises and remove reference to them.\n     */\n\n  }, {\n    key: "discard",\n    value: function discard() {\n      this.cancel();\n      delete this._promises;\n    }\n    /**\n     * Force the internal weight to 0. Should be called before switching or transitioning\n     * to a new state.\n     */\n\n  }, {\n    key: "deactivate",\n    value: function deactivate() {\n      this.updateInternalWeight(0);\n    }\n  }]);\n\n  return AbstractState;\n}();\n\n/* harmony default export */ const state_AbstractState = (AbstractState);\n;// CONCATENATED MODULE: ./src/core/animpack/state/TransitionState.js\nfunction TransitionState_typeof(obj) { "@babel/helpers - typeof"; return TransitionState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TransitionState_typeof(obj); }\n\nfunction TransitionState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TransitionState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TransitionState_createClass(Constructor, protoProps, staticProps) { if (protoProps) TransitionState_defineProperties(Constructor.prototype, protoProps); if (staticProps) TransitionState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction TransitionState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { TransitionState_get = Reflect.get; } else { TransitionState_get = function _get(target, property, receiver) { var base = TransitionState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return TransitionState_get.apply(this, arguments); }\n\nfunction TransitionState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = TransitionState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction TransitionState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TransitionState_setPrototypeOf(subClass, superClass); }\n\nfunction TransitionState_setPrototypeOf(o, p) { TransitionState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TransitionState_setPrototypeOf(o, p); }\n\nfunction TransitionState_createSuper(Derived) { var hasNativeReflectConstruct = TransitionState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TransitionState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TransitionState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TransitionState_possibleConstructorReturn(this, result); }; }\n\nfunction TransitionState_possibleConstructorReturn(self, call) { if (call && (TransitionState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TransitionState_assertThisInitialized(self); }\n\nfunction TransitionState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction TransitionState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction TransitionState_getPrototypeOf(o) { TransitionState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TransitionState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n/**\n * Class for smooth transitioning between states on an animation layer.\n *\n * @extends AbstractState\n */\n\nvar TransitionState = /*#__PURE__*/function (_AbstractState) {\n  TransitionState_inherits(TransitionState, _AbstractState);\n\n  var _super = TransitionState_createSuper(TransitionState);\n\n  function TransitionState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    TransitionState_classCallCheck(this, TransitionState);\n\n    _this = _super.call(this, options);\n    _this._to = null;\n    _this._from = [];\n    _this._weightPromise = core_Deferred.resolve();\n    return _this;\n  }\n\n  TransitionState_createClass(TransitionState, [{\n    key: "internalWeight",\n    get: function get() {\n      // Find the combined weight of all sub-states\n      var totalWeight = 0;\n\n      if (this._to) {\n        totalWeight += this._to.weight;\n      }\n\n      this._from.forEach(function (state) {\n        totalWeight += state.weight;\n      });\n\n      return totalWeight * this._internalWeight;\n    }\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      var _this2 = this;\n\n      TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      this._from.forEach(function (state) {\n        state.updateInternalWeight(_this2._internalWeight);\n      });\n\n      if (this._to) {\n        this._to.updateInternalWeight(this._internalWeight);\n      }\n    }\n    /**\n     * Update sub-states the transition is controlling and start new weight\n     * animations on each one. This should be called each time the current state of\n     * an animation layer gets updated to a new value and a transition time greater\n     * that zero is specified.\n     *\n     * @param {Array.<AbstractState>} [currentStates=[]] - States whose weight values\n     * will be animated to 0.\n     * @param {AbstractState=} targetState - State whose weight will be animated\n     * to 1.\n     * @param {number} transitionTime - Amount of time it will in seconds take for\n     * weight animations to complete.\n     * @param {Function=} easingFn - Easing function to use for weight animations.\n     * Default is Easing.Linear.InOut.\n     * @param {Function=} onComplete - Function to execute once all weight animations\n     * complete.\n     */\n\n  }, {\n    key: "configure",\n    value: function configure() {\n      var currentStates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var targetState = arguments.length > 1 ? arguments[1] : undefined;\n      var transitionTime = arguments.length > 2 ? arguments[2] : undefined;\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\n      var onComplete = arguments.length > 4 ? arguments[4] : undefined;\n\n      // Deactivate any states that aren\'t in the new configuration\n      if (this._to === targetState || currentStates.includes(this._to)) {\n        this._to = null;\n      }\n\n      this._from = this._from.filter(function (state) {\n        return state !== targetState && !currentStates.includes(state);\n      });\n      this.deactivate();\n      this._from = currentStates;\n      this._to = targetState;\n      this.reset(transitionTime, easingFn, onComplete);\n    }\n    /**\n     * Start new weight animations state the transition controls. This should be called\n     * if an animation is played with a transition time greater than zero and a transtion\n     * to that animation was already in progress.\n     *\n     * @param {number} transitionTime - Amount of time it will in seconds take for\n     * weight animations to complete.\n     * @param {Function=} easingFn - Easing function to use for weight animations.\n     * Default is Easing.Linear.InOut.\n     * @param {Function=} onComplete - Function to execute once all weight animations\n     * complete.\n     */\n\n  }, {\n    key: "reset",\n    value: function reset(transitionTime, easingFn, onComplete) {\n      var _this3 = this;\n\n      // Stop any pending promises\n      this._weightPromise.cancel(); // Start tweening weight to 0 for the current states\n\n\n      var weightPromises = this._from.map(function (state) {\n        return state.setWeight(0, transitionTime, easingFn);\n      }); // Start tweening weight to 1 for the target state\n\n\n      if (this._to) {\n        weightPromises.push(this._to.setWeight(1, transitionTime, easingFn));\n        this.name = this._to.name;\n      } else {\n        this.name = null;\n      }\n\n      this._weightPromise = core_Deferred.all(weightPromises, function () {\n        _this3._from.forEach(function (state) {\n          state.cancel();\n          state.deactivate();\n        });\n\n        if (typeof onComplete === \'function\') {\n          onComplete();\n        }\n      });\n    }\n  }, {\n    key: "play",\n    value: function play(onFinish, onError, onCancel, onNext) {\n      this._paused = false;\n      this._playCallbacks.onFinish = onFinish;\n      this._playCallbacks.onError = onError;\n      this._playCallbacks.onCancel = onCancel;\n      var promises = [this._weightPromise];\n\n      this._from.forEach(function (state) {\n        state.resume();\n      });\n\n      if (this._to) {\n        this._promises.play = this._to.play(undefined, undefined, undefined, onNext);\n        promises.push(this._promises.play);\n      }\n\n      this._promises.finish = core_Deferred.all(promises, onFinish, onError, onCancel);\n      return this._promises.finish;\n    }\n  }, {\n    key: "pause",\n    value: function pause() {\n      this._from.forEach(function (state) {\n        state.pause();\n      });\n\n      if (this._to) {\n        this._to.pause();\n      }\n\n      return TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "pause", this).call(this);\n    }\n  }, {\n    key: "resume",\n    value: function resume(onFinish, onError, onCancel, onNext) {\n      this._paused = false;\n\n      if (!this._promises.play.pending) {\n        this._playCallbacks.onFinish = onFinish || this._playCallbacks.onFinish;\n        this._playCallbacks.onError = onError || this._playCallbacks.onError;\n        this._playCallbacks.onCancel = onCancel || this._playCallbacks.onCancel;\n      }\n\n      var promises = [this._weightPromise];\n\n      this._from.forEach(function (state) {\n        state.resume();\n      });\n\n      if (this._to) {\n        this._promises.play = this._to.resume(undefined, undefined, undefined, onNext);\n        promises.push(this._promises.play);\n      }\n\n      this._promises.finish = core_Deferred.all(promises, this._playCallbacks.onFinish, this._playCallbacks.onError, this._playCallbacks.onCancel);\n      return this._promises.finish;\n    }\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      this._from.forEach(function (state) {\n        state.pause();\n      });\n\n      if (this._to) {\n        this._to.cancel();\n      }\n\n      this._weightPromise.cancel();\n\n      return TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "cancel", this).call(this);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this._from.forEach(function (state) {\n        state.pause();\n      });\n\n      if (this._to) {\n        this._to.stop();\n      }\n\n      return TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "stop", this).call(this);\n    }\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "update", this).call(this, deltaTime);\n\n      this._from.forEach(function (state) {\n        state.update(deltaTime);\n      });\n\n      if (this._to) {\n        this._to.update(deltaTime);\n      }\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "discard", this).call(this);\n\n      this._weightPromise.cancel();\n\n      delete this._weightPromise;\n      this._to = null;\n      this._from.length = 0;\n    }\n  }, {\n    key: "deactivate",\n    value: function deactivate() {\n      if (this._to) {\n        this._to.deactivate();\n      }\n\n      this._from.forEach(function (state) {\n        state.deactivate();\n      });\n    }\n  }]);\n\n  return TransitionState;\n}(state_AbstractState);\n\n/* harmony default export */ const state_TransitionState = (TransitionState);\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationPlayerInterface.js\nfunction AnimationPlayerInterface_typeof(obj) { "@babel/helpers - typeof"; return AnimationPlayerInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationPlayerInterface_typeof(obj); }\n\nfunction AnimationPlayerInterface_toConsumableArray(arr) { return AnimationPlayerInterface_arrayWithoutHoles(arr) || AnimationPlayerInterface_iterableToArray(arr) || AnimationPlayerInterface_unsupportedIterableToArray(arr) || AnimationPlayerInterface_nonIterableSpread(); }\n\nfunction AnimationPlayerInterface_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction AnimationPlayerInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AnimationPlayerInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AnimationPlayerInterface_arrayLikeToArray(o, minLen); }\n\nfunction AnimationPlayerInterface_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction AnimationPlayerInterface_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AnimationPlayerInterface_arrayLikeToArray(arr); }\n\nfunction AnimationPlayerInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction AnimationPlayerInterface_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationPlayerInterface_get = Reflect.get; } else { AnimationPlayerInterface_get = function _get(target, property, receiver) { var base = AnimationPlayerInterface_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationPlayerInterface_get.apply(this, arguments); }\n\nfunction AnimationPlayerInterface_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationPlayerInterface_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction AnimationPlayerInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationPlayerInterface_setPrototypeOf(subClass, superClass); }\n\nfunction AnimationPlayerInterface_setPrototypeOf(o, p) { AnimationPlayerInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationPlayerInterface_setPrototypeOf(o, p); }\n\nfunction AnimationPlayerInterface_createSuper(Derived) { var hasNativeReflectConstruct = AnimationPlayerInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationPlayerInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationPlayerInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationPlayerInterface_possibleConstructorReturn(this, result); }; }\n\nfunction AnimationPlayerInterface_possibleConstructorReturn(self, call) { if (call && (AnimationPlayerInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationPlayerInterface_assertThisInitialized(self); }\n\nfunction AnimationPlayerInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AnimationPlayerInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AnimationPlayerInterface_getPrototypeOf(o) { AnimationPlayerInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationPlayerInterface_getPrototypeOf(o); }\n\nfunction AnimationPlayerInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AnimationPlayerInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AnimationPlayerInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationPlayerInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationPlayerInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable max-classes-per-file */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-empty-function */\n\n/* eslint-disable getter-return */\n\n/* eslint-disable no-useless-constructor */\n\n\n/**\n * Class factory interface for controlling playback of a collection of animations.\n * One animation can be played at any given time, crossfading between animations\n * will result in playing a {@link TransitionState}.\n *\n * @interface\n */\n\nvar AnimationPlayerInterface = /*#__PURE__*/function () {\n  function AnimationPlayerInterface() {\n    AnimationPlayerInterface_classCallCheck(this, AnimationPlayerInterface);\n  }\n\n  AnimationPlayerInterface_createClass(AnimationPlayerInterface, [{\n    key: "paused",\n    get:\n    /**\n     * Gets whether or not the player is updating states.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    function get() {\n      return this._paused;\n    }\n    /**\n     * Gets and sets the default number of seconds it takes to transition to a new\n     * animation.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "transitionTime",\n    get: function get() {},\n    set: function set(seconds) {}\n    /**\n     * Gets and sets the default easing function to use when transitioning and\n     * setting weights.\n     *\n     * @type {Function}\n     */\n\n  }, {\n    key: "easingFn",\n    get: function get() {},\n    set: function set(fn) {}\n    /**\n     * Gets the state the layer is currently in control of.\n     *\n     * @readonly\n     * @type {AbstractState}\n     */\n\n  }, {\n    key: "currentState",\n    get: function get() {}\n    /**\n     * Gets the name of the state the layer is currently in control of.\n     *\n     * @readonly\n     * @type {string}\n     */\n\n  }, {\n    key: "currentAnimation",\n    get: function get() {}\n    /**\n     * Gets whether or not the layer is currently transitioning to a new animation.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "isTransitioning",\n    get: function get() {}\n    /**\n     * Update the layer\'s current state to a new value. If transitionTime is defined\n     * and greater than zero, perform a smooth blend between any states that currently\n     * have non-zero weight values and the new state.\n     *\n     * @private\n     *\n     * @param {(string|null)} name - Name of the state to transition to.\n     * @param {string} playMethod - Name of the operation being prepared for, to be\n     * used in error messaging.\n     * @param {number=} transitionTime - Amount of time in seconds it will take to\n     * switch to the new state.\n     * @param {Function=} easingFn - Easing function to use when transitioning to a\n     * new state over time.\n     * @param {Function=} onError - Function to execute if an error is encountered.\n     */\n\n  }, {\n    key: "_prepareCurrentState",\n    value: function _prepareCurrentState(name, playMethod, transitionTime, easingFn, onError) {}\n    /**\n     * Start playback an animation from the beginning.\n     *\n     * @param {string} name - Name of the animation to play.\n     * @param {number=} transitionTime - Amount of time it will take before the\n     * new state has full influence for the layer.\n     * @param {Function=} easingFn - Easing function to use for blending if transitionTime\n     * is greater than zero.\n     * @param {Function=} onFinish - Function to execute when the animation finishes.\n     * @param {Function=} onError - Function to execute if the animation encounters\n     * an error during playback.\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\n     * @param {Function=} onNext - Function to execute if an animation queue is\n     * played and it advances to the next animation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "playAnimation",\n    value: function playAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {}\n    /**\n     * Cancel playback of the current animation.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "cancelAnimation",\n    value: function cancelAnimation() {}\n    /**\n     * Pause playback of the current animation.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "pauseAnimation",\n    value: function pauseAnimation() {}\n    /**\n     * Resume playback of an animation.\n     *\n     * @param {string=} name - Name of the animation to resume playback for. Default\n     * is the layer\'s current animation name.\n     * @param {number=} transitionTime - Amount of time it will take before the\n     * new state has full influence for the layer.\n     * @param {Function=} onFinish - Function to execute when the state finishes.\n     * @param {Function=} onError - Function to execute if the state encounters\n     * an error during playback.\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\n     * @param {Function=} onNext - Function to execute if an animation queue is\n     * played and it advances to the next animation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "resumeAnimation",\n    value: function resumeAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {}\n    /**\n     * Stop playback of the current animation.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "stopAnimation",\n    value: function stopAnimation() {}\n    /**\n     * Update the current animation.\n     *\n     * @param {number} deltaTime - Time in milliseconds since the last update.\n     */\n\n  }, {\n    key: "update",\n    value: function update(deltaTime) {}\n    /**\n     * Discard the transition state.\n     */\n\n  }, {\n    key: "discard",\n    value: function discard() {}\n    /**\n     * Creates a class that implements {@link AnimationPlayerInterface} and extends\n     * a specified base class.\n     *\n     * @param {Class} [BaseClass = class{}] - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link AnimationPlayerInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin() {\n      var BaseClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /*#__PURE__*/function () {\n        function _class() {\n          AnimationPlayerInterface_classCallCheck(this, _class);\n        }\n\n        return AnimationPlayerInterface_createClass(_class);\n      }();\n\n      var AnimationPlayerMixin = /*#__PURE__*/function (_BaseClass) {\n        AnimationPlayerInterface_inherits(AnimationPlayerMixin, _BaseClass);\n\n        var _super = AnimationPlayerInterface_createSuper(AnimationPlayerMixin);\n\n        function AnimationPlayerMixin() {\n          var _this;\n\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          AnimationPlayerInterface_classCallCheck(this, AnimationPlayerMixin);\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          _this = _super.call.apply(_super, [this, options].concat(args));\n          _this._transitionState = new state_TransitionState();\n          _this._states = _this._states !== undefined ? _this._states : new Map();\n          _this._currentState = null;\n          _this._paused = false;\n          _this._transitionTime = Number(options.transitionTime) >= 0 ? Number(options.transitionTime) : 0;\n          _this._easingFn = typeof options.easingFn === \'function\' ? options.easingFn : undefined;\n          return _this;\n        }\n\n        AnimationPlayerInterface_createClass(AnimationPlayerMixin, [{\n          key: "paused",\n          get: function get() {\n            return this._paused;\n          }\n        }, {\n          key: "transitionTime",\n          get: function get() {\n            return this._transitionTime;\n          },\n          set: function set(seconds) {\n            seconds = Number(seconds);\n\n            if (!(seconds >= 0)) {\n              throw new Error("Cannot set transition time for ".concat(this.constructor.name, " to ").concat(seconds, ". Seconds must be a numeric value greather than or equal to zero."));\n            }\n\n            this._transitionTime = seconds;\n          }\n        }, {\n          key: "easingFn",\n          get: function get() {\n            return this._easingFn;\n          },\n          set: function set(fn) {\n            this._easingFn = fn;\n          }\n        }, {\n          key: "currentState",\n          get: function get() {\n            return this._currentState;\n          }\n        }, {\n          key: "currentAnimation",\n          get: function get() {\n            if (this._currentState) {\n              return this._currentState.name;\n            }\n\n            return null;\n          }\n        }, {\n          key: "isTransitioning",\n          get: function get() {\n            return this._currentState === this._transitionState;\n          }\n        }, {\n          key: "_prepareCurrentState",\n          value: function _prepareCurrentState(name, playMethod, transitionTime, easingFn, onError) {\n            var _this2 = this;\n\n            if (name !== null && !this._states.has(name)) {\n              var e = new Error("Cannot ".concat(playMethod, " animation ").concat(name, ". No animation exists with this name."));\n\n              if (typeof onError === \'function\') {\n                onError(e);\n              }\n\n              throw e;\n            }\n\n            var targetState = name !== null ? this._states.get(name) : null; // Make sure the new state isn\'t already playing\n\n            if (this.currentAnimation !== name) {\n              // Switch to the new state immediately\n              if (transitionTime <= 0) {\n                // Cancel the current state and set its weight to 0\n                if (this._currentState) {\n                  this._currentState.cancel();\n\n                  this._currentState.weight = 0;\n\n                  this._currentState.deactivate();\n                }\n\n                this._currentState = targetState;\n              } // Blend to the new state over time\n              else {\n                // Make sure to transition out of any states with non-zero weight\n                var currentStates = AnimationPlayerInterface_toConsumableArray(this._states.values()).filter(function (s) {\n                  return s !== targetState && (s.weight || s.weightPending);\n                }); // Update the transition state with new inputs\n\n\n                this._transitionState.configure(currentStates, targetState, transitionTime, easingFn, function () {\n                  _this2._currentState = targetState;\n                  _this2._transitionState.weight = 0;\n                });\n\n                this._currentState = this._transitionState;\n              }\n            } else if (playMethod === \'play\') {\n              this._currentState.cancel();\n\n              if (this._currentState === this._transitionState) {\n                this._transitionState.reset(transitionTime, easingFn, function () {\n                  _this2._currentState = targetState;\n                  _this2._transitionState.weight = 0;\n                });\n              }\n            } // Update weight for the new current state so it has full influence for the player\n\n\n            this._currentState.weight = 1;\n\n            this._currentState.updateInternalWeight(this._internalWeight);\n          }\n        }, {\n          key: "playAnimation",\n          value: function playAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {\n            var error;\n            var reject = false;\n\n            try {\n              this._prepareCurrentState(name, \'play\', transitionTime !== undefined ? transitionTime : this._transitionTime, easingFn !== undefined ? easingFn : this._easingFn, onError);\n            } catch (e) {\n              error = e;\n              reject = true;\n            }\n\n            if (reject) {\n              return core_Deferred.reject(error);\n            }\n\n            return this._currentState.play(onFinish, onError, onCancel, onNext);\n          }\n        }, {\n          key: "pauseAnimation",\n          value: function pauseAnimation() {\n            if (this._currentState) {\n              return this._currentState.pause();\n            } else {\n              return false;\n            }\n          }\n        }, {\n          key: "resumeAnimation",\n          value: function resumeAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {\n            if (name === undefined && this._currentState) {\n              name = this._currentState.name;\n            }\n\n            var error;\n            var reject = false;\n\n            try {\n              this._prepareCurrentState(name, \'resume\', transitionTime !== undefined ? transitionTime : this._transitionTime, easingFn !== undefined ? easingFn : this._easingFn, onError);\n            } catch (e) {\n              error = e;\n              reject = true;\n            }\n\n            if (reject) {\n              return core_Deferred.reject(error);\n            }\n\n            return this._currentState.resume(onFinish, onError, onCancel, onNext);\n          }\n        }, {\n          key: "cancelAnimation",\n          value: function cancelAnimation() {\n            if (this._currentState) {\n              return this._currentState.cancel();\n            } else {\n              return false;\n            }\n          }\n        }, {\n          key: "stopAnimation",\n          value: function stopAnimation() {\n            if (this._currentState) {\n              return this._currentState.stop();\n            } else {\n              return false;\n            }\n          }\n        }, {\n          key: "update",\n          value: function update(deltaTime) {\n            if (AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "update", this)) {\n              AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "update", this).call(this, deltaTime);\n            }\n\n            if (this._currentState) {\n              this._currentState.update(deltaTime);\n            }\n          }\n        }, {\n          key: "discard",\n          value: function discard() {\n            if (AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "discard", this)) {\n              AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "discard", this).call(this);\n            }\n\n            this._transitionState.discard();\n\n            delete this._transitionState;\n          }\n        }]);\n\n        return AnimationPlayerMixin;\n      }(BaseClass);\n\n      return AnimationPlayerMixin;\n    }\n  }]);\n\n  return AnimationPlayerInterface;\n}();\n\n/* harmony default export */ const animpack_AnimationPlayerInterface = (AnimationPlayerInterface);\n;// CONCATENATED MODULE: ./src/core/animpack/state/StateContainerInterface.js\nfunction StateContainerInterface_typeof(obj) { "@babel/helpers - typeof"; return StateContainerInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, StateContainerInterface_typeof(obj); }\n\nfunction StateContainerInterface_toConsumableArray(arr) { return StateContainerInterface_arrayWithoutHoles(arr) || StateContainerInterface_iterableToArray(arr) || StateContainerInterface_unsupportedIterableToArray(arr) || StateContainerInterface_nonIterableSpread(); }\n\nfunction StateContainerInterface_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction StateContainerInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return StateContainerInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return StateContainerInterface_arrayLikeToArray(o, minLen); }\n\nfunction StateContainerInterface_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction StateContainerInterface_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return StateContainerInterface_arrayLikeToArray(arr); }\n\nfunction StateContainerInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction StateContainerInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) StateContainerInterface_setPrototypeOf(subClass, superClass); }\n\nfunction StateContainerInterface_setPrototypeOf(o, p) { StateContainerInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return StateContainerInterface_setPrototypeOf(o, p); }\n\nfunction StateContainerInterface_createSuper(Derived) { var hasNativeReflectConstruct = StateContainerInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = StateContainerInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = StateContainerInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return StateContainerInterface_possibleConstructorReturn(this, result); }; }\n\nfunction StateContainerInterface_possibleConstructorReturn(self, call) { if (call && (StateContainerInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return StateContainerInterface_assertThisInitialized(self); }\n\nfunction StateContainerInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction StateContainerInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction StateContainerInterface_getPrototypeOf(o) { StateContainerInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return StateContainerInterface_getPrototypeOf(o); }\n\nfunction StateContainerInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction StateContainerInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction StateContainerInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) StateContainerInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) StateContainerInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable max-classes-per-file */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-empty-function */\n\n/* eslint-disable getter-return */\n\n/**\n * Class factory interface for manipulating a collection of {@link AbstractState}.\n *\n * @interface\n */\n\nvar StateContainerInterface = /*#__PURE__*/function () {\n  function StateContainerInterface() {\n    StateContainerInterface_classCallCheck(this, StateContainerInterface);\n  }\n\n  StateContainerInterface_createClass(StateContainerInterface, [{\n    key: "getState",\n    value:\n    /**\n     * Return the state with the given name.\n     *\n     * @param {string} name - Name of the state.\n     *\n     * @returns {AbstractState}\n     */\n    function getState(name) {}\n    /**\n     * Gets an array of the names of all states in the container.\n     *\n     * @type {Array.<string>}\n     */\n\n  }, {\n    key: "getStateNames",\n    value: function getStateNames() {}\n    /**\n     * Add a new state to be controlled by the container. States are stored keyed\n     * by their name property, which must be unique. If it isn\'t, a number will\n     * be added or incremented until a unique key is generated.\n     *\n     * @param {AbstractState} state - State to add to the container.\n     *\n     * @returns {string} - Unique name of the state.\n     */\n\n  }, {\n    key: "addState",\n    value: function addState(state) {}\n    /**\n     * Removes a state with the given name from the container.\n     *\n     * @param {string} name - Name of the state to remove.\n     *\n     * @returns {boolean} - Whether or not a state was removed.\n     */\n\n  }, {\n    key: "removeState",\n    value: function removeState(name) {}\n    /**\n     * Renames a state with the given name in the container. Name must be unique\n     * to the container, if it isn\'t the name will be incremented until it is unique.\n     *\n     * @param {string} currentName - Name of the state to rename.\n     * @param {string} newName - Name to update the state with.\n     *\n     * @returns {string} - Updated name for the state.\n     */\n\n  }, {\n    key: "renameState",\n    value: function renameState(currentName, newName) {}\n    /**\n     * Discards all states.\n     */\n\n  }, {\n    key: "discardStates",\n    value: function discardStates() {}\n    /**\n     * Creates a class that implements {@link StateContainerInterface} and extends\n     * a specified base class.\n     *\n     * @param {Class} [BaseClass = class{}] - The class to extend.\n     *\n     * @return {Class} A class that extends `BaseClass` and implements {@link StateContainerInterface}.\n     */\n\n  }], [{\n    key: "Mixin",\n    value: function Mixin() {\n      var BaseClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /*#__PURE__*/function () {\n        function _class() {\n          StateContainerInterface_classCallCheck(this, _class);\n        }\n\n        return StateContainerInterface_createClass(_class);\n      }();\n\n      /**\n       * This mixin adds functionality for manipulating uniquely-named animation states in\n       * a map.\n       */\n      var StateContainerMixin = /*#__PURE__*/function (_BaseClass) {\n        StateContainerInterface_inherits(StateContainerMixin, _BaseClass);\n\n        var _super = StateContainerInterface_createSuper(StateContainerMixin);\n\n        function StateContainerMixin() {\n          var _this;\n\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n          StateContainerInterface_classCallCheck(this, StateContainerMixin);\n\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          _this = _super.call.apply(_super, [this, options].concat(args));\n          _this._states = _this._states !== undefined ? _this._states : new Map();\n          return _this;\n        }\n\n        StateContainerInterface_createClass(StateContainerMixin, [{\n          key: "getState",\n          value: function getState(name) {\n            return this._states.get(name);\n          }\n        }, {\n          key: "getStateNames",\n          value: function getStateNames() {\n            return StateContainerInterface_toConsumableArray(this._states.keys());\n          }\n        }, {\n          key: "addState",\n          value: function addState(state) {\n            // Make sure the state is not already in this container\n            if (StateContainerInterface_toConsumableArray(this._states.values()).includes(state)) {\n              console.warn("Cannot add animation to state ".concat(this.name, ". Animation was already added."));\n              return state.name;\n            } // Make sure the state name is unique\n\n\n            var uniqueName = core_Utils.getUniqueName(state.name, StateContainerInterface_toConsumableArray(this._states.keys()));\n\n            if (state.name !== uniqueName) {\n              console.warn("Animation name ".concat(state.name, " is not unique for state ").concat(this.name, ". New animation will be added with name ").concat(uniqueName, "."));\n              state.name = uniqueName;\n            }\n\n            this._states.set(state.name, state);\n\n            return state.name;\n          }\n        }, {\n          key: "removeState",\n          value: function removeState(name) {\n            // Check if the state is in this container\n            if (!this._states || !this._states.has(name)) {\n              console.warn("Did not remove animation ".concat(name, " from state ").concat(this.name, ". No animation exists with this name."));\n              return false;\n            }\n\n            this._states.get(name).discard();\n\n            this._states["delete"](name);\n\n            return true;\n          }\n        }, {\n          key: "renameState",\n          value: function renameState(currentName, newName) {\n            // Make sure the state is in this container\n            if (!this._states || !this._states.has(currentName)) {\n              throw new Error("Cannot rename animation ".concat(currentName, " in ").concat(this.name, ". No animation exists with this name."));\n            }\n\n            var state = this._states.get(currentName); // Exit if the names are the same\n\n\n            if (currentName === newName) {\n              return currentName;\n            } // Make sure the name is unique\n\n\n            var uniqueName = core_Utils.getUniqueName(newName, StateContainerInterface_toConsumableArray(this._states.keys()).filter(function (s) {\n              return s.name !== currentName;\n            }));\n\n            if (newName !== uniqueName) {\n              console.warn("Animation name ".concat(newName, " is not unique in state ").concat(this.name, ". Animation will be renamed to ").concat(uniqueName, "."));\n              newName = uniqueName;\n            }\n\n            state.name = newName;\n\n            this._states["delete"](currentName);\n\n            this._states.set(state.name, state);\n\n            return state.name;\n          }\n        }, {\n          key: "discardStates",\n          value: function discardStates() {\n            this._states.forEach(function (state) {\n              state.discard();\n            });\n\n            delete this._states;\n          }\n        }]);\n\n        return StateContainerMixin;\n      }(BaseClass);\n\n      return StateContainerMixin;\n    }\n  }]);\n\n  return StateContainerInterface;\n}();\n\n/* harmony default export */ const state_StateContainerInterface = (StateContainerInterface);\n;// CONCATENATED MODULE: ./src/core/animpack/state/QueueState.js\nfunction QueueState_typeof(obj) { "@babel/helpers - typeof"; return QueueState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, QueueState_typeof(obj); }\n\nfunction QueueState_toConsumableArray(arr) { return QueueState_arrayWithoutHoles(arr) || QueueState_iterableToArray(arr) || QueueState_unsupportedIterableToArray(arr) || QueueState_nonIterableSpread(); }\n\nfunction QueueState_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction QueueState_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return QueueState_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QueueState_arrayLikeToArray(o, minLen); }\n\nfunction QueueState_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction QueueState_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return QueueState_arrayLikeToArray(arr); }\n\nfunction QueueState_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction QueueState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction QueueState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction QueueState_createClass(Constructor, protoProps, staticProps) { if (protoProps) QueueState_defineProperties(Constructor.prototype, protoProps); if (staticProps) QueueState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction QueueState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { QueueState_get = Reflect.get; } else { QueueState_get = function _get(target, property, receiver) { var base = QueueState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return QueueState_get.apply(this, arguments); }\n\nfunction QueueState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = QueueState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction QueueState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) QueueState_setPrototypeOf(subClass, superClass); }\n\nfunction QueueState_setPrototypeOf(o, p) { QueueState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return QueueState_setPrototypeOf(o, p); }\n\nfunction QueueState_createSuper(Derived) { var hasNativeReflectConstruct = QueueState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = QueueState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = QueueState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return QueueState_possibleConstructorReturn(this, result); }; }\n\nfunction QueueState_possibleConstructorReturn(self, call) { if (call && (QueueState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return QueueState_assertThisInitialized(self); }\n\nfunction QueueState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction QueueState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction QueueState_getPrototypeOf(o) { QueueState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return QueueState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n/**\n * Class for playing an ordered array of animation states in sequence.\n *\n * @extends AbstractState\n * @implements @AnimationPlayerInterface\n */\n\nvar QueueState = /*#__PURE__*/function (_AnimationPlayerInter) {\n  QueueState_inherits(QueueState, _AnimationPlayerInter);\n\n  var _super = QueueState_createSuper(QueueState);\n\n  /**\n   * @constructor\n   *\n   * @param {Object} [options={}] - Options for the state.\n   * @param {boolean} [options.autoAdvance=true] - Whether to autmatically advance\n   * to the next state in the queue as each state completes.\n   * @param {Array.<AbstractState>} [queueStates=[]] - Array of states to be played\n   * in order.\n   */\n  function QueueState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var queueStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    QueueState_classCallCheck(this, QueueState);\n\n    _this = _super.call(this, options);\n    queueStates.forEach(function (state) {\n      _this.addState(state);\n    });\n    _this._queue = _this._states.keys();\n    _this._done = true;\n    return _this;\n  }\n  /**\n   * Gets whether the animation queue has reached the end.\n   */\n\n\n  QueueState_createClass(QueueState, [{\n    key: "done",\n    get: function get() {\n      return this._done;\n    }\n    /**\n     * Gets the internal weight.\n     *\n     * @readonly\n     * @type {number}\n     */\n\n  }, {\n    key: "internalWeight",\n    get: function get() {\n      return this._currentState ? this._currentState.internalWeight * this._internalWeight : 0;\n    }\n    /**\n     * Restart the queue iterator.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_reset",\n    value: function _reset() {\n      this._queue = this._states.keys();\n\n      var _this$_queue$next = this._queue.next(),\n          value = _this$_queue$next.value,\n          done = _this$_queue$next.done;\n\n      this._done = done;\n      return value || null;\n    }\n    /**\n     * Multiplies the user weight by a factor to determine the internal weight.\n     *\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\n     */\n\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      if (this._currentState) {\n        this._currentState.updateInternalWeight(this._internalWeight);\n      }\n    }\n    /**\n     * Start the next animation in the queue.\n     *\n     * @param {Function=} onNext - Function to execute each time an animation completes\n     * and the queue moves to the next animation.\n     * @param {boolean} [wrap=false] - Whether or not to start the queue from the\n     * beginning again if the end has been reached.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "next",\n    value: function next(onNext) {\n      var _this2 = this;\n\n      var wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // Move the queue forward\n      var _this$_queue$next2 = this._queue.next(),\n          name = _this$_queue$next2.value,\n          done = _this$_queue$next2.done;\n\n      this._done = done;\n      this._paused = false; // The queue has reached the end\n\n      if (done) {\n        // Start the queue over\n        if (wrap) {\n          return this.play(this._playCallbacks.onFinish, this._playCallbacks.onError, this._playCallbacks.onCancel, onNext);\n        } // Stop the queue\n        else {\n          this._promises.finish.resolve();\n\n          return this._promises.finish;\n        }\n      } // Signal the next animation is starting\n\n\n      if (typeof onNext === \'function\') {\n        var lastName = QueueState_toConsumableArray(this._states.keys())[this._states.size - 1];\n\n        var isQueueEnd = name === lastName;\n        onNext({\n          name: name,\n          canAdvance: this.getState(name).loopCount !== Infinity && !isQueueEnd,\n          isQueueEnd: isQueueEnd\n        });\n      } // Start the next animation\n\n\n      this.playAnimation(name, this._transitionTime, this._easingFn, function () {\n        if (!_this2._paused && !_this2.isTransitioning) {\n          _this2.next(onNext);\n        }\n      }, this._playCallbacks.onError);\n      return this._promises.finish;\n    }\n  }, {\n    key: "play",\n    value: function play(onFinish, onError, onCancel, onNext) {\n      var _this3 = this;\n\n      var name = this._reset();\n\n      QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "play", this).call(this, onFinish, onError, onCancel);\n\n      if (this._done) {\n        this._promises.finish.resolve();\n      } else {\n        // Signal the next animation is starting\n        if (name !== this.currentAnimation && typeof onNext === \'function\') {\n          var lastName = QueueState_toConsumableArray(this._states.keys())[this._states.size - 1];\n\n          var isQueueEnd = name === lastName;\n          onNext({\n            name: name,\n            canAdvance: name ? this.getState(name).loopCount !== Infinity && !isQueueEnd : true,\n            isQueueEnd: !name || isQueueEnd\n          });\n        } // Start the next animation\n\n\n        this.playAnimation(name, this._currentState ? this._transitionTime : 0, this._easingFn, function () {\n          if (!_this3._paused && !_this3.isTransitioning) {\n            _this3.next(onNext);\n          }\n        }, onError);\n      }\n\n      return this._promises.finish;\n    }\n  }, {\n    key: "pause",\n    value: function pause() {\n      var paused = QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "pause", this).call(this);\n\n      this.pauseAnimation();\n      return paused;\n    }\n  }, {\n    key: "resume",\n    value: function resume(onFinish, onError, onCancel, onNext) {\n      var _this4 = this;\n\n      if (this._done) {\n        return this.play(onFinish, onError, onCancel, onNext);\n      } else {\n        QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "resume", this).call(this, onFinish, onError, onCancel);\n\n        this.resumeAnimation(this._currentState.name, this._transitionTime, this._easingFn, function () {\n          if (!_this4._paused && !_this4.isTransitioning) {\n            _this4.next(onNext);\n          }\n        }, onError);\n        return this._promises.finish;\n      }\n    }\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      var canceled = QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "cancel", this).call(this);\n\n      if (this._currentState) {\n        this._currentState.cancel();\n      }\n\n      return canceled;\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      var stopped = QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "stop", this).call(this);\n\n      this.stopAnimation();\n      this._done = true;\n      return stopped;\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "discard", this).call(this);\n\n      this.discardStates();\n    }\n  }]);\n\n  return QueueState;\n}(animpack_AnimationPlayerInterface.Mixin(state_StateContainerInterface.Mixin(state_AbstractState)));\n\n/* harmony default export */ const state_QueueState = (QueueState);\n;// CONCATENATED MODULE: ./src/core/animpack/state/AbstractBlendState.js\nfunction AbstractBlendState_typeof(obj) { "@babel/helpers - typeof"; return AbstractBlendState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AbstractBlendState_typeof(obj); }\n\nfunction AbstractBlendState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AbstractBlendState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AbstractBlendState_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractBlendState_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractBlendState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction AbstractBlendState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AbstractBlendState_get = Reflect.get; } else { AbstractBlendState_get = function _get(target, property, receiver) { var base = AbstractBlendState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AbstractBlendState_get.apply(this, arguments); }\n\nfunction AbstractBlendState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AbstractBlendState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction AbstractBlendState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AbstractBlendState_setPrototypeOf(subClass, superClass); }\n\nfunction AbstractBlendState_setPrototypeOf(o, p) { AbstractBlendState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AbstractBlendState_setPrototypeOf(o, p); }\n\nfunction AbstractBlendState_createSuper(Derived) { var hasNativeReflectConstruct = AbstractBlendState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AbstractBlendState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AbstractBlendState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AbstractBlendState_possibleConstructorReturn(this, result); }; }\n\nfunction AbstractBlendState_possibleConstructorReturn(self, call) { if (call && (AbstractBlendState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AbstractBlendState_assertThisInitialized(self); }\n\nfunction AbstractBlendState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AbstractBlendState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AbstractBlendState_getPrototypeOf(o) { AbstractBlendState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AbstractBlendState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n/**\n * Base class for a state that blends a collection of {@link AbstractState}.\n *\n * @abstract\n * @implements StateContainerInterface\n */\n\nvar AbstractBlendState = /*#__PURE__*/function (_StateContainerInterf) {\n  AbstractBlendState_inherits(AbstractBlendState, _StateContainerInterf);\n\n  var _super = AbstractBlendState_createSuper(AbstractBlendState);\n\n  function AbstractBlendState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    AbstractBlendState_classCallCheck(this, AbstractBlendState);\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this, options].concat(args));\n    blendStates.forEach(function (state) {\n      _this.addState(state);\n    });\n    return _this;\n  }\n  /**\n   * Gets the sum of internal weights of the sub-states.\n   *\n   * @readonly\n   * @type {number}\n   */\n\n\n  AbstractBlendState_createClass(AbstractBlendState, [{\n    key: "internalWeight",\n    get: function get() {\n      var blendWeights = 0;\n\n      this._states.forEach(function (state) {\n        blendWeights += state.internalWeight;\n      });\n\n      return blendWeights;\n    }\n    /**\n     * Returns the weight of a state controlled by the container.\n     *\n     * @param {string} name - Name of the state to return the weight from.\n     *\n     * @returns {number} - Weight of the state.\n     */\n\n  }, {\n    key: "getBlendWeight",\n    value: function getBlendWeight(name) {\n      // Make sure the name is valid\n      var state = this.getState(name);\n\n      if (state === undefined) {\n        throw new Error("Cannot get weight of state ".concat(name, " from BlendState ").concat(this.name, ". No state exists with this name."));\n      }\n\n      return state.weight;\n    }\n    /**\n     * Sets the weight of a state controlled by the container.\n     *\n     * @param {string} name - Name of the state to set the weight of.\n     * @param {number} weight - Weight value to set on the state.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "setBlendWeight",\n    value: function setBlendWeight(name, weight) {\n      var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\n      // Make sure the name is valid\n      var state = this.getState(name);\n\n      if (state === undefined) {\n        throw new Error("Cannot set weight of state ".concat(name, " from BlendState ").concat(this.name, ". No state exists with this name."));\n      }\n\n      weight = core_MathUtils.clamp(weight);\n      return state.setWeight(weight, seconds, easingFn);\n    }\n    /**\n     * Multiplies the weight of each sub-state by a factor to determine the internal weight.\n     *\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\n     */\n\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      var _this2 = this;\n\n      AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      this._states.forEach(function (state) {\n        state.updateInternalWeight(_this2._internalWeight);\n      });\n    }\n    /**\n     * Update any values of the sub-states that need to be evaluated every frame.\n     *\n     * @param {number} deltaTime - Time in milliseconds since the last update.\n     */\n\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "update", this).call(this, deltaTime);\n\n      this._states.forEach(function (state) {\n        state.update(deltaTime);\n      });\n    }\n    /**\n     * Start playback of the sub-states from the beginning.\n     *\n     * @param {Function=} onFinish - Function to execute when the state finishes.\n     * @param {Function=} onError - Function to execute if the state encounters\n     * an error during playback.\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "play",\n    value: function play(onFinish, onError, onCancel) {\n      var promises = [AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "play", this).call(this)];\n\n      this._states.forEach(function (state) {\n        promises.push(state.play());\n      });\n\n      return core_Deferred.all(promises, onFinish, onError, onCancel);\n    }\n    /**\n     * Pause playback of the sub-states. This prevents pending promises from being executed.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "pause",\n    value: function pause() {\n      this._states.forEach(function (state) {\n        state.pause();\n      });\n\n      return AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "pause", this).call(this);\n    }\n    /**\n     * Resume playback of the sub-states.\n     *\n     * @param {Function=} onFinish - Function to execute when the state finishes.\n     * @param {Function=} onError - Function to execute if the state encounters\n     * an error during playback.\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "resume",\n    value: function resume(onFinish, onError, onCancel) {\n      var promises = [AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "resume", this).call(this)];\n\n      this._states.forEach(function (state) {\n        promises.push(state.resume());\n      });\n\n      return core_Deferred.all(promises, onFinish, onError, onCancel);\n    }\n    /**\n     * Cancel playback of the sub-states and cancel any pending promises.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      this._states.forEach(function (state) {\n        state.cancel();\n      });\n\n      return AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "cancel", this).call(this);\n    }\n    /**\n     * Stop playback of the sub-states and resolve any pending promises.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "stop",\n    value: function stop() {\n      this._states.forEach(function (state) {\n        state.stop();\n      });\n\n      return AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "stop", this).call(this);\n    }\n    /**\n     * Discards all sub-state resources.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "discard",\n    value: function discard() {\n      AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "discard", this).call(this);\n\n      this.discardStates();\n    }\n  }]);\n\n  return AbstractBlendState;\n}(state_StateContainerInterface.Mixin(state_AbstractState));\n\n/* harmony default export */ const state_AbstractBlendState = (AbstractBlendState);\n;// CONCATENATED MODULE: ./src/core/animpack/state/FreeBlendState.js\nfunction FreeBlendState_typeof(obj) { "@babel/helpers - typeof"; return FreeBlendState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FreeBlendState_typeof(obj); }\n\nfunction FreeBlendState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction FreeBlendState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction FreeBlendState_createClass(Constructor, protoProps, staticProps) { if (protoProps) FreeBlendState_defineProperties(Constructor.prototype, protoProps); if (staticProps) FreeBlendState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction FreeBlendState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { FreeBlendState_get = Reflect.get; } else { FreeBlendState_get = function _get(target, property, receiver) { var base = FreeBlendState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return FreeBlendState_get.apply(this, arguments); }\n\nfunction FreeBlendState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = FreeBlendState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction FreeBlendState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) FreeBlendState_setPrototypeOf(subClass, superClass); }\n\nfunction FreeBlendState_setPrototypeOf(o, p) { FreeBlendState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FreeBlendState_setPrototypeOf(o, p); }\n\nfunction FreeBlendState_createSuper(Derived) { var hasNativeReflectConstruct = FreeBlendState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = FreeBlendState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = FreeBlendState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return FreeBlendState_possibleConstructorReturn(this, result); }; }\n\nfunction FreeBlendState_possibleConstructorReturn(self, call) { if (call && (FreeBlendState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return FreeBlendState_assertThisInitialized(self); }\n\nfunction FreeBlendState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction FreeBlendState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction FreeBlendState_getPrototypeOf(o) { FreeBlendState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FreeBlendState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * Class for blending N number of blend states.\n *\n * @extends AbstractBlendState\n */\n\nvar FreeBlendState = /*#__PURE__*/function (_AbstractBlendState) {\n  FreeBlendState_inherits(FreeBlendState, _AbstractBlendState);\n\n  var _super = FreeBlendState_createSuper(FreeBlendState);\n\n  /**\n   * @constructor\n   *\n   * @param {Object} [options={}] - Options for the container state.\n   * @param {Array.<AbstractState>} [blendStates=[]] - Blend states to be controlled by\n   * this container.\n   */\n  function FreeBlendState() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    FreeBlendState_classCallCheck(this, FreeBlendState);\n\n    return _super.call(this, options, blendStates);\n  }\n\n  FreeBlendState_createClass(FreeBlendState, [{\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      var _this = this;\n\n      FreeBlendState_get(FreeBlendState_getPrototypeOf(FreeBlendState.prototype), "updateInternalWeight", this).call(this, factor); // Determine the total active weight of blend states\n\n\n      var sumWeights = 0;\n\n      this._states.forEach(function (state) {\n        sumWeights += state.weight;\n      }); // Ensure the sum of blend state internal weights does not exceed container internal weight\n\n\n      factor /= Math.max(sumWeights, 1); // Sum of blend state internal weights should not exceed container internal weight\n\n      this._states.forEach(function (state) {\n        state.updateInternalWeight(factor * _this._weight);\n      });\n    }\n  }]);\n\n  return FreeBlendState;\n}(state_AbstractBlendState);\n\n/* harmony default export */ const state_FreeBlendState = (FreeBlendState);\n;// CONCATENATED MODULE: ./src/core/animpack/state/Blend1dState.js\nfunction Blend1dState_typeof(obj) { "@babel/helpers - typeof"; return Blend1dState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Blend1dState_typeof(obj); }\n\nfunction Blend1dState_toConsumableArray(arr) { return Blend1dState_arrayWithoutHoles(arr) || Blend1dState_iterableToArray(arr) || Blend1dState_unsupportedIterableToArray(arr) || Blend1dState_nonIterableSpread(); }\n\nfunction Blend1dState_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Blend1dState_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Blend1dState_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Blend1dState_arrayLikeToArray(o, minLen); }\n\nfunction Blend1dState_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction Blend1dState_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Blend1dState_arrayLikeToArray(arr); }\n\nfunction Blend1dState_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Blend1dState_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction Blend1dState_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? Blend1dState_ownKeys(Object(source), !0).forEach(function (key) { Blend1dState_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Blend1dState_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction Blend1dState_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Blend1dState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Blend1dState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Blend1dState_createClass(Constructor, protoProps, staticProps) { if (protoProps) Blend1dState_defineProperties(Constructor.prototype, protoProps); if (staticProps) Blend1dState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction Blend1dState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Blend1dState_get = Reflect.get; } else { Blend1dState_get = function _get(target, property, receiver) { var base = Blend1dState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Blend1dState_get.apply(this, arguments); }\n\nfunction Blend1dState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Blend1dState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Blend1dState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Blend1dState_setPrototypeOf(subClass, superClass); }\n\nfunction Blend1dState_setPrototypeOf(o, p) { Blend1dState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Blend1dState_setPrototypeOf(o, p); }\n\nfunction Blend1dState_createSuper(Derived) { var hasNativeReflectConstruct = Blend1dState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Blend1dState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Blend1dState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Blend1dState_possibleConstructorReturn(this, result); }; }\n\nfunction Blend1dState_possibleConstructorReturn(self, call) { if (call && (Blend1dState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Blend1dState_assertThisInitialized(self); }\n\nfunction Blend1dState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Blend1dState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Blend1dState_getPrototypeOf(o) { Blend1dState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Blend1dState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n/**\n * Class for blending N number of blend states based on a single\n * parameter.\n *\n * @extends AbstractBlendState\n */\n\nvar Blend1dState = /*#__PURE__*/function (_AbstractBlendState) {\n  Blend1dState_inherits(Blend1dState, _AbstractBlendState);\n\n  var _super = Blend1dState_createSuper(Blend1dState);\n\n  /**\n   * @constructor\n   *\n   * @param {Object} [options] - Options for the container state\n   * @param {Array.<AbstractBlendState>} [blendStates=[]] - Blend states to be\n   * controlled by this container.\n   * @param {Array.<number>} [blendThresholds=[]] - Threshold values for activating\n   * each blend state.\n   * @param {Array.<boolean>} [phaseMatches=[]] - Booleans indicating whether or not\n   * each blend state should be phase matched.\n   */\n  function Blend1dState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var blendThresholds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var phaseMatches = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    Blend1dState_classCallCheck(this, Blend1dState);\n\n    _this = _super.call(this, options, blendStates);\n    _this._blendValue = 0;\n    _this._promises = Blend1dState_objectSpread(Blend1dState_objectSpread({}, _this._promises), {}, {\n      blendValue: core_Deferred.resolve()\n    }); // Validate there are no duplicate thresholds\n\n    var nonZeroDifferentSize = blendStates.length !== 0 && blendStates.length !== blendThresholds.length;\n\n    if (nonZeroDifferentSize) {\n      throw new Error("Cannot create Blend1dState with blendThresholds ".concat(blendThresholds, ". BlendThresholds count does not match blendStates count."));\n    }\n\n    var containsDuplicates = new Set(blendThresholds).size !== blendThresholds.length;\n\n    if (containsDuplicates) {\n      throw new Error("Cannot create Blend1dState with blendThresholds ".concat(blendThresholds, ". BlendThresholds contains duplicate values"));\n    } // Initialize the thresholds map\n\n\n    _this._thresholds = [];\n\n    Blend1dState_toConsumableArray(_this._states.values()).forEach(function (state, index) {\n      _this._thresholds.push({\n        value: blendThresholds[index],\n        name: state.name,\n        phaseMatch: phaseMatches[index] || false\n      });\n    });\n\n    _this._sortThresholds();\n\n    _this._forceNoThresholdDupes = true;\n    _this._phaseLeadState = null;\n\n    _this._updateBlendWeights();\n\n    return _this;\n  }\n  /**\n   * Gets and sets the blend parameter value.\n   */\n\n\n  Blend1dState_createClass(Blend1dState, [{\n    key: "blendValue",\n    get: function get() {\n      return this._blendValue;\n    },\n    set: function set(value) {\n      this._blendValue = value;\n    }\n    /**\n     * Gets whether or not the blend value is currently being animated.\n     */\n\n  }, {\n    key: "blendValuePending",\n    get: function get() {\n      return this._promises.blendValue && this._promises.blendValue.pending;\n    }\n    /**\n     * Updates the user defined weight over time.\n     *\n     * @param {null} name - Unused parameter.\n     * @param {number} weight - The target weight value.\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\n     * target weight.\n     * @param {Function=} easingFn - The easing function to use for interpolation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "setBlendWeight",\n    value: function setBlendWeight(name, value) {\n      var _this2 = this;\n\n      var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\n\n      this._promises.blendValue.cancel();\n\n      this._promises.blendValue = animpack_AnimationUtils.interpolateProperty(this, \'blendValue\', value, {\n        seconds: seconds,\n        easingFn: easingFn,\n        onProgress: function onProgress() {\n          _this2._updateBlendWeights();\n        },\n        onFinish: function onFinish() {\n          _this2._updateBlendWeights();\n        }\n      });\n      return this._promises.blendValue;\n    }\n    /**\n     * Gets the user defined weight.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getBlendWeight",\n    value: function getBlendWeight() {\n      return this.blendValue;\n    }\n  }, {\n    key: "addState",\n    value: function addState(state) {\n      var thresholdValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var phaseMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._thresholds = this._thresholds || []; // Make sure there is not already a state with this threshold\n\n      var sameValue = this._thresholds.find(function (threshold) {\n        return threshold.value === thresholdValue;\n      });\n\n      if (this._forceNoThresholdDupes && sameValue !== undefined) {\n        throw new Error("Cannot set blend threshold of ".concat(thresholdValue, " for state ").concat(state.name, " on ").concat(this.name, ". A state already exists with that threshold."));\n      }\n\n      Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "addState", this).call(this, state);\n\n      this._thresholds.push({\n        value: thresholdValue,\n        name: state.name,\n        phaseMatch: phaseMatch || false\n      });\n\n      this._sortThresholds();\n\n      return state.name;\n    }\n  }, {\n    key: "removeState",\n    value: function removeState(name) {\n      var removed = Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "removeState", this).call(this, name);\n\n      if (removed) {\n        var index = this._thresholds.findIndex(function (threshold) {\n          return threshold.name === name;\n        });\n\n        this._thresholds.splice(index, 1);\n      }\n\n      return removed;\n    }\n  }, {\n    key: "renameState",\n    value: function renameState(currentName, newName) {\n      newName = Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "renameState", this).call(this, currentName, newName);\n\n      var threshold = this._thresholds.find(function (threshold) {\n        return threshold.name === currentName;\n      });\n\n      threshold.name = newName;\n      return newName;\n    }\n    /**\n     * Gets the threshold value of a blend with the corresponding name.\n     *\n     * @param {string} name - Name of the blend to get the threshold of.\n     *\n     * @returns {number} Threhold value.\n     */\n\n  }, {\n    key: "getBlendThreshold",\n    value: function getBlendThreshold(name) {\n      var threshold = this._thresholds.find(function (threshold) {\n        return threshold.name === name;\n      });\n\n      if (threshold === undefined) {\n        throw new Error("Cannot get blend threshold of state ".concat(name, " on ").concat(this.name, ". No state exists with that name."));\n      }\n\n      return threshold.value;\n    }\n    /**\n     * Sets the threshold value of a blend with the corresponding name.\n     *\n     * @param {string} name - Name of the blend to set the threshold.\n     * @param {number} value - Value of the threshold to set.\n     *\n     * @returns {number} Set threshold value.\n     */\n\n  }, {\n    key: "setBlendThreshold",\n    value: function setBlendThreshold(name, value) {\n      // Make sure there is not already a state with this threshold\n      var sameValue = this._thresholds.find(function (threshold) {\n        return threshold.value === value;\n      });\n\n      if (sameValue !== undefined) {\n        throw new Error("Cannot set blend threshold of ".concat(value, " for state ").concat(name, " on ").concat(this.name, ". A state already exists with that threshold."));\n      }\n\n      var threshold = this._thresholds.find(function (threshold) {\n        return threshold.name === name;\n      });\n\n      if (threshold === undefined) {\n        throw new Error("Cannot set blend threshold of state ".concat(name, " on ").concat(this.name, ". No state exists with that name."));\n      }\n\n      threshold.value = value;\n\n      this._sortThresholds();\n\n      return threshold.value;\n    }\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      var _this3 = this;\n\n      Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      if (this._phaseLeadState) {\n        this._states.forEach(function (state) {\n          if (state.weight !== 0) {\n            state.normalizedTime = _this3._phaseLeadState.normalizedTime;\n          }\n        });\n      }\n    }\n    /**\n     * Updates the blend weights based on their corresponding threshold values\n     * and the current blendValue. Additionally, sets a lead phase state if the\n     * conditions for phase-matching have been satisfied.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_updateBlendWeights",\n    value: function _updateBlendWeights() {\n      var _this4 = this;\n\n      if (this._thresholds.length === 0) return;\n\n      if (this._thresholds.length === 1) {\n        var state = this._states.get(this._thresholds[0].name);\n\n        state.setWeight(1);\n        return;\n      } // Initially set all sub-state weights to zero\n\n\n      this._states.forEach(function (state) {\n        state.setWeight(0);\n      });\n\n      this._phaseLeadState = null; // Find the first threshold that is greater than or equal to the parameter value\n\n      var targetIndex = this._thresholds.findIndex(function (threshold) {\n        return threshold.value >= _this4._blendValue;\n      });\n\n      if (targetIndex === 0 || targetIndex === -1) {\n        // Give one state full influence\n        targetIndex = targetIndex === -1 ? this._thresholds.length - 1 : 0;\n\n        var _state = this._states.get(this._thresholds[targetIndex].name);\n\n        _state.setWeight(1);\n      } else {\n        // Linear interpolate influence between two states\n        var thresholdA = this._thresholds[targetIndex - 1];\n        var thresholdB = this._thresholds[targetIndex];\n        var factorB = (this.blendValue - thresholdA.value) / (thresholdB.value - thresholdA.value);\n        var factorA = 1 - factorB;\n\n        var stateA = this._states.get(thresholdA.name);\n\n        var stateB = this._states.get(thresholdB.name);\n\n        stateA.setWeight(factorA);\n        stateB.setWeight(factorB); // Set phase-matching if needed\n\n        if (thresholdA.phaseMatch && thresholdB.phaseMatch) {\n          this._phaseLeadState = factorA > factorB ? stateA : stateB;\n        }\n      }\n    }\n    /**\n     * Sorts the thresholds from low to high based on value.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_sortThresholds",\n    value: function _sortThresholds() {\n      this._thresholds.sort(function (a, b) {\n        return a.value - b.value;\n      });\n    }\n  }]);\n\n  return Blend1dState;\n}(state_AbstractBlendState);\n\n/* harmony default export */ const state_Blend1dState = (Blend1dState);\n;// CONCATENATED MODULE: ./src/core/animpack/state/Blend2dState.js\nfunction Blend2dState_typeof(obj) { "@babel/helpers - typeof"; return Blend2dState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Blend2dState_typeof(obj); }\n\nfunction Blend2dState_toConsumableArray(arr) { return Blend2dState_arrayWithoutHoles(arr) || Blend2dState_iterableToArray(arr) || Blend2dState_unsupportedIterableToArray(arr) || Blend2dState_nonIterableSpread(); }\n\nfunction Blend2dState_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction Blend2dState_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Blend2dState_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Blend2dState_arrayLikeToArray(o, minLen); }\n\nfunction Blend2dState_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction Blend2dState_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Blend2dState_arrayLikeToArray(arr); }\n\nfunction Blend2dState_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction Blend2dState_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction Blend2dState_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? Blend2dState_ownKeys(Object(source), !0).forEach(function (key) { Blend2dState_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Blend2dState_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction Blend2dState_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction Blend2dState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Blend2dState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Blend2dState_createClass(Constructor, protoProps, staticProps) { if (protoProps) Blend2dState_defineProperties(Constructor.prototype, protoProps); if (staticProps) Blend2dState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction Blend2dState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Blend2dState_get = Reflect.get; } else { Blend2dState_get = function _get(target, property, receiver) { var base = Blend2dState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Blend2dState_get.apply(this, arguments); }\n\nfunction Blend2dState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Blend2dState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Blend2dState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Blend2dState_setPrototypeOf(subClass, superClass); }\n\nfunction Blend2dState_setPrototypeOf(o, p) { Blend2dState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Blend2dState_setPrototypeOf(o, p); }\n\nfunction Blend2dState_createSuper(Derived) { var hasNativeReflectConstruct = Blend2dState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Blend2dState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Blend2dState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Blend2dState_possibleConstructorReturn(this, result); }; }\n\nfunction Blend2dState_possibleConstructorReturn(self, call) { if (call && (Blend2dState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Blend2dState_assertThisInitialized(self); }\n\nfunction Blend2dState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Blend2dState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Blend2dState_getPrototypeOf(o) { Blend2dState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Blend2dState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable no-underscore-dangle */\n\n\n\n\n/**\n * Class for blending N number of blend states based on two\n * paramters.\n *\n * @extends AbstractBlendState\n */\n\nvar Blend2dState = /*#__PURE__*/function (_AbstractBlendState) {\n  Blend2dState_inherits(Blend2dState, _AbstractBlendState);\n\n  var _super = Blend2dState_createSuper(Blend2dState);\n\n  /**\n   * @constructor\n   *\n   * @param {Object} [options] - Options for the container state\n   * @param {Array.<AbstractBlendState>} [blendStates=[]] - Blend states to be\n   * controlled by this container.\n   * @param {Array.<Array.<number>>} [blendThresholds=[]] - Threshold values for activating\n   * each blend state.\n   * @param {Array.<boolean>} [phaseMatches=[]] - Booleans indicating whether or not\n   * each blend state should be phase matched.\n   */\n  function Blend2dState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var blendThresholds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var phaseMatches = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    Blend2dState_classCallCheck(this, Blend2dState);\n\n    _this = _super.call(this, options, blendStates);\n\n    if (blendStates.length !== blendThresholds.length) {\n      throw new Error("Cannot create Blend2dState with blendStates ".concat(blendStates, " and blendThresholds ").concat(blendThresholds, ". Count of blendStates must match count of blendThresholds."));\n    }\n\n    blendThresholds.slice(0, blendThresholds.length - 1).forEach(function (threshold, index) {\n      blendThresholds.slice(index + 1).forEach(function (otherThreshold) {\n        if (threshold[0] === otherThreshold[0] && threshold[1] === otherThreshold[1]) {\n          throw new Error("Cannot create Blend2dState with blendThresholds ".concat(blendThresholds, ". No duplicate values allowed in blendThresholds."));\n        }\n      });\n    });\n    _this._blendValueX = 0;\n    _this._blendValueY = 0;\n    _this._promises = Blend2dState_objectSpread(Blend2dState_objectSpread({}, _this._promises), {}, {\n      blendValueX: core_Deferred.resolve(),\n      blendValueY: core_Deferred.resolve()\n    });\n    _this._thresholds = [];\n\n    Blend2dState_toConsumableArray(_this._states.values()).forEach(function (state, index) {\n      _this._thresholds.push({\n        name: state.name,\n        phaseMatch: phaseMatches[index] || false\n      });\n    });\n\n    _this._vertices = blendThresholds;\n\n    if (_this._vertices.length >= 3) {\n      _this._triangles = core_MathUtils.getDelaunayTriangulation(_this._vertices);\n    }\n\n    _this._phaseLeadState = null;\n\n    _this._updateBlendWeights();\n\n    return _this;\n  }\n  /**\n   * Updates the user defined weight over time.\n   *\n   * @param {string} name - Name of blend weight to update.\n   * @param {number} weight - Target weight value.\n   * @param {number} [seconds=0] - The amount of time it will take to reach the\n   * target value.\n   * @param {Function=} easingFn - The easing function to use for interpolation.\n   *\n   * @returns {Deferred}\n   */\n\n\n  Blend2dState_createClass(Blend2dState, [{\n    key: "setBlendWeight",\n    value: function setBlendWeight(name, value) {\n      var _this2 = this;\n\n      var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\n      var property = "blendValue".concat(name.toUpperCase());\n\n      if (property !== \'blendValueX\' && property !== \'blendValueY\') {\n        throw new Error("Cannot set blend weight for ".concat(name, " on ").concat(this.name, ". Blend2dState only accepts \'X\' or \'Y\' for setBlendWeight"));\n      }\n\n      this._promises[property].cancel();\n\n      this._promises[property] = animpack_AnimationUtils.interpolateProperty(this, property, value, {\n        seconds: seconds,\n        easingFn: easingFn,\n        onProgress: function onProgress() {\n          _this2._updateBlendWeights();\n        },\n        onFinish: function onFinish() {\n          _this2._updateBlendWeights();\n        }\n      });\n      return this._promises[property];\n    }\n    /**\n     * Gets the user defined weight.\n     *\n     * @param {string} name - Name of blend weight.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getBlendWeight",\n    value: function getBlendWeight(name) {\n      var property = name.toUpperCase();\n\n      if (property !== \'X\' && property !== \'Y\') {\n        throw new Error("Cannot get blend weight for ".concat(name, " on ").concat(this.name, ". Blend2dState only accepts \'X\' or \'Y\' for getBlendWeight"));\n      }\n\n      return property === \'X\' ? this._blendValueX : this._blendValueY;\n    }\n    /**\n     * Gets and sets the x blend weight.\n     */\n\n  }, {\n    key: "blendValueX",\n    get: function get() {\n      return this._blendValueX;\n    },\n    set: function set(value) {\n      this._blendValueX = value;\n    }\n    /**\n     * Gets and sets the y blend weight.\n     */\n\n  }, {\n    key: "blendValueY",\n    get: function get() {\n      return this._blendValueY;\n    },\n    set: function set(value) {\n      this._blendValueY = value;\n    }\n    /**\n     * Gets whether or not the x blend value is currently being animated.\n     */\n\n  }, {\n    key: "blendValueXPending",\n    get: function get() {\n      return this._promises.blendValueX && this._promises.blendValueX.pending;\n    }\n    /**\n     * Gets whether or not the y blend value is currently being animated.\n     */\n\n  }, {\n    key: "blendValueYPending",\n    get: function get() {\n      return this._promises.blendValueY && this._promises.blendValueY.pending;\n    }\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      var _this3 = this;\n\n      Blend2dState_get(Blend2dState_getPrototypeOf(Blend2dState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      if (this._phaseLeadState) {\n        Blend2dState_toConsumableArray(this._states.values()).forEach(function (state, index) {\n          if (state.weight !== 0 && _this3._thresholds[index].phaseMatch) {\n            state.normalizedTime = _this3._phaseLeadState.normalizedTime;\n          }\n        });\n      }\n    }\n    /**\n     * Updates the blend weights based on their corresponding threshold values\n     * and the current [x,y] blendValue. Additionally, sets a lead phase state if the\n     * conditions for phase-matching have been satisfied.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_updateBlendWeights",\n    value: function _updateBlendWeights() {\n      var _this4 = this;\n\n      if (!this._vertices || this._vertices.length === 0) return;\n\n      if (this._vertices.length === 1) {\n        Blend2dState_toConsumableArray(this._states.values())[0].weight = 1;\n        return;\n      } // Initially set all sub-state weights to zero\n\n\n      this._states.forEach(function (state) {\n        state.setWeight(0);\n      });\n\n      this._phaseLeadState = null;\n      var p = [this._blendValueX, this._blendValueY];\n\n      if (this._vertices.length === 2) {\n        this._setInfluenceClosestPointOnLine(p);\n      } else {\n        var triangle = this._triangles.find(function (triangle) {\n          return core_MathUtils.isPointInTriangle(_this4._vertices[triangle[0]], _this4._vertices[triangle[1]], _this4._vertices[triangle[2]], p);\n        });\n\n        if (triangle) {\n          this._setInfluenceTriangle(triangle, p);\n        } else {\n          this._setInfluenceClosestPointInTriangles(p);\n        }\n      }\n    }\n    /**\n     * Sets blend weights for states corresponding to a\n     * triangle of thresholds and a given [x,y] blendValues.\n     *\n     * @param {Array.<Array.<number>>} triangle - Set of triangluated indices\n     * that correspond to blend thresholds.\n     * @param {Array.<number>} p - Given [x,y] blendValue.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_setInfluenceTriangle",\n    value: function _setInfluenceTriangle(triangle, p) {\n      var areaA = core_MathUtils.triangleArea(this._vertices[triangle[1]], this._vertices[triangle[2]], p);\n      var areaB = core_MathUtils.triangleArea(this._vertices[triangle[0]], this._vertices[triangle[2]], p);\n      var areaC = core_MathUtils.triangleArea(this._vertices[triangle[0]], this._vertices[triangle[1]], p);\n      var totalArea = areaA + areaB + areaC;\n      var weightA = areaA / totalArea;\n      var weightB = areaB / totalArea;\n      var weightC = areaC / totalArea;\n      var thresholdA = this._thresholds[triangle[0]];\n      var thresholdB = this._thresholds[triangle[1]];\n      var thresholdC = this._thresholds[triangle[2]];\n\n      var stateA = this._states.get(thresholdA.name);\n\n      var stateB = this._states.get(thresholdB.name);\n\n      var stateC = this._states.get(thresholdC.name);\n\n      stateA.setWeight(weightA);\n      stateB.setWeight(weightB);\n      stateC.setWeight(weightC);\n\n      this._setPhaseLeadState([stateA, stateB, stateC], [thresholdA.phaseMatch, thresholdB.phaseMatch, thresholdC.phaseMatch]);\n    }\n    /**\n     * Determines the closest point within a triangle of\n     * thresholds based on the current [x,y] blendValues and\n     * then sets blend weights for the corresponding states.\n     *\n     * @param {Array.<number>} p - Given [x,y] blendValue.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_setInfluenceClosestPointInTriangles",\n    value: function _setInfluenceClosestPointInTriangles(p) {\n      var _this5 = this;\n\n      var globalClosestPoint = null;\n      var globalMinDist = Number.POSITIVE_INFINITY;\n      var closestTriangle = -1;\n\n      this._triangles.forEach(function (triangle, index) {\n        var pointA = core_MathUtils.closestPointOnLine(_this5._vertices[triangle[0]], _this5._vertices[triangle[1]], p);\n        var pointB = core_MathUtils.closestPointOnLine(_this5._vertices[triangle[1]], _this5._vertices[triangle[2]], p);\n        var pointC = core_MathUtils.closestPointOnLine(_this5._vertices[triangle[2]], _this5._vertices[triangle[0]], p);\n        var distA = core_MathUtils.distanceSquared(pointA, p);\n        var distB = core_MathUtils.distanceSquared(pointB, p);\n        var distC = core_MathUtils.distanceSquared(pointC, p);\n        var localClosestPoint = pointC;\n        var localMinDist = distC;\n\n        if (distA < localMinDist) {\n          localClosestPoint = pointA;\n          localMinDist = distA;\n        }\n\n        if (distB < localMinDist) {\n          localClosestPoint = pointB;\n          localMinDist = distB;\n        }\n\n        if (localMinDist < globalMinDist) {\n          globalMinDist = localMinDist;\n          globalClosestPoint = Blend2dState_toConsumableArray(localClosestPoint);\n          closestTriangle = index;\n        }\n      });\n\n      this._setInfluenceTriangle(this._triangles[closestTriangle], globalClosestPoint);\n    }\n    /**\n     * Determines the closest point on the line formed between the\n     * two blend thresholds based on the current [x,y] blendValues and\n     * then sets blend weights for the corresponding states.\n     *\n     * @param {Array.<number>} p - Given [x,y] blendValue.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_setInfluenceClosestPointOnLine",\n    value: function _setInfluenceClosestPointOnLine(p) {\n      var closestPoint = core_MathUtils.closestPointOnLine(this._vertices[[0]], this._vertices[[1]], p);\n      var distA = core_MathUtils.distanceSquared(this._vertices[0], closestPoint);\n      var distB = core_MathUtils.distanceSquared(this._vertices[1], closestPoint);\n      var weightA = distB / (distA + distB);\n      var weightB = distA / (distA + distB);\n      var thresholdA = this._thresholds[0];\n      var thresholdB = this._thresholds[1];\n\n      var stateA = this._states.get(thresholdA.name);\n\n      var stateB = this._states.get(thresholdB.name);\n\n      stateA.setWeight(weightA);\n      stateB.setWeight(weightB);\n\n      this._setPhaseLeadState([stateA, stateB], [thresholdA.phaseMatch, thresholdB.phaseMatch]);\n    }\n    /**\n     * Sets a lead phase state if the conditions\n     * for phase-matching are satisfied.\n     *\n     * @param {Array.<AbstractBlendState>} states - States to\n     * check phase-matching criteria.\n     * @param {Array.<boolean>} phaseMatched - List of phase-match booleans.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_setPhaseLeadState",\n    value: function _setPhaseLeadState(states, phaseMatched) {\n      var _this6 = this;\n\n      var max = 0;\n      states.forEach(function (state, index) {\n        if (phaseMatched[index] && state.weight > max) {\n          _this6._phaseLeadState = state;\n          max = state.weight;\n        }\n      });\n    }\n  }]);\n\n  return Blend2dState;\n}(state_AbstractBlendState);\n\n/* harmony default export */ const state_Blend2dState = (Blend2dState);\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationLayer.js\nfunction AnimationLayer_typeof(obj) { "@babel/helpers - typeof"; return AnimationLayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationLayer_typeof(obj); }\n\nfunction AnimationLayer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AnimationLayer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AnimationLayer_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationLayer_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationLayer_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction AnimationLayer_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationLayer_get = Reflect.get; } else { AnimationLayer_get = function _get(target, property, receiver) { var base = AnimationLayer_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationLayer_get.apply(this, arguments); }\n\nfunction AnimationLayer_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationLayer_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction AnimationLayer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationLayer_setPrototypeOf(subClass, superClass); }\n\nfunction AnimationLayer_setPrototypeOf(o, p) { AnimationLayer_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationLayer_setPrototypeOf(o, p); }\n\nfunction AnimationLayer_createSuper(Derived) { var hasNativeReflectConstruct = AnimationLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationLayer_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationLayer_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationLayer_possibleConstructorReturn(this, result); }; }\n\nfunction AnimationLayer_possibleConstructorReturn(self, call) { if (call && (AnimationLayer_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationLayer_assertThisInitialized(self); }\n\nfunction AnimationLayer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AnimationLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AnimationLayer_getPrototypeOf(o) { AnimationLayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationLayer_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n\n\n/**\n * Enum for types of {@link AnimationLayer} blending.\n *\n * @readonly\n * @enum {string}\n */\n\nvar LayerBlendModes = {\n  Override: \'Override\',\n  Additive: \'Additive\'\n};\n/**\n * The default blending mode {@link AnimationLayer}.\n *\n * @readonly\n * @type {string}\n */\n\nvar DefaultLayerBlendMode = \'Override\';\n/**\n * Checks if a given blendMode is present in the values of {@link LayerBlendModes}.\n * If it is, return the original value, otherwise return {@link DefaultLayerBlendMode}.\n *\n * @param {string} blendMode - The name of the type of blending.\n *\n * @returns {(string|DefaultLayerBlendMode)}\n */\n\nfunction validateBlendMode(blendMode) {\n  if (Array.from(Object.values(LayerBlendModes)).includes(blendMode)) {\n    return blendMode;\n  } else {\n    return DefaultLayerBlendMode;\n  }\n}\n/**\n * Class for managing a set of animations where only one state can be active at\n * any given time.\n *\n * @implements AnimationPlayerInterface\n * @implements StateContainerInterface\n */\n\nvar AnimationLayer = /*#__PURE__*/function (_AnimationPlayerInter) {\n  AnimationLayer_inherits(AnimationLayer, _AnimationPlayerInter);\n\n  var _super = AnimationLayer_createSuper(AnimationLayer);\n\n  /**\n   * @constructor\n   *\n   * @param {Object=} options -  Options for the animation layer.\n   * @param {string} options.name - Name of the layer. Names must be unique to the\n   * animation feature that contains the layer.\n   * @param {LayerBlendModes} [options.blendMode=DefaultLayerBlendMode] -\n   * Type of blending to use for all states controlled by the layer.\n   * @param {number} [options.weight=1] - The amount of influence the layer\'s current\n   * animation has over the result for the host.\n   * @param {number} [options.transitionTime=0] - The default amount of time to use when\n   * playing and resuming animations.\n   * @param {Function=} options.easingFn - The default easing function to use when\n   * transitioning between animations and setting layer weight.\n   */\n  function AnimationLayer() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    AnimationLayer_classCallCheck(this, AnimationLayer);\n\n    _this = _super.call(this, options);\n    _this.name = options.name === undefined ? \'AnimationLayer\' : options.name;\n    _this._blendMode = Array.from(Object.values(LayerBlendModes)).includes(options.blendMode) ? options.blendMode : DefaultLayerBlendMode;\n    _this._promises = {\n      weight: core_Deferred.resolve()\n    };\n    _this._weightPaused = false;\n    _this.weight = typeof options.weight === \'number\' ? options.weight : 1;\n    _this._internalWeight = _this._weight;\n    return _this;\n  }\n  /**\n   * Gets the type of blending used for states controlled by the layer.\n   *\n   * @readonly\n   * @type {string}\n   */\n\n\n  AnimationLayer_createClass(AnimationLayer, [{\n    key: "blendMode",\n    get: function get() {\n      return this._blendMode;\n    }\n    /**\n     * Gets and sets the amount of influence the layer\'s current animation has over\n     * the result for the host.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "weight",\n    get: function get() {\n      return this._weight;\n    }\n    /**\n     * Gets whether or not the layer\'s weight value is currently being animated.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    ,\n    set: function set(weight) {\n      this._weight = core_MathUtils.clamp(weight, 0, 1);\n    }\n  }, {\n    key: "weightPending",\n    get: function get() {\n      return this._promises.weight && this._promises.weight.pending;\n    }\n    /**\n     * Pause the current animation state and any interpolation happening on the layer\'s\n     * weight property.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "pause",\n    value: function pause() {\n      this._paused = true;\n      this._weightPaused = true;\n      return this.pauseAnimation() || this.weightPending;\n    }\n    /**\n     * Resume the current animation state and any interpolation happening on the layer\'s\n     * weight property.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "resume",\n    value: function resume() {\n      this._paused = false;\n      this._weightPaused = false;\n      var isWeightActive = this.weightPending;\n\n      if (this._currentState) {\n        return this.resumeAnimation() || isWeightActive;\n      } else {\n        return isWeightActive;\n      }\n    }\n    /**\n     * Updates the user defined weight over time.\n     *\n     * @param {number} weight - The target weight value.\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\n     * target weight.\n     * @param {Function=} easingFn - The easing function to use for interpolation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "setWeight",\n    value: function setWeight(weight) {\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (this.weightPending) {\n        this._promises.weight.cancel();\n      }\n\n      weight = core_MathUtils.clamp(weight);\n      this._promises.weight = animpack_AnimationUtils.interpolateProperty(this, \'weight\', weight, {\n        seconds: seconds,\n        easingFn: easingFn !== undefined ? easingFn : this._easingFn\n      });\n      return this._promises.weight;\n    }\n    /**\n     * Pause any interpolation happening on the layer\'s weight property.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "pauseWeight",\n    value: function pauseWeight() {\n      this._weightPaused = true;\n      return this.weightPending;\n    }\n    /**\n     * Resume any interpolation happening on the layer\'s weight property.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "resumeWeight",\n    value: function resumeWeight() {\n      this._weightPaused = false;\n      return this.weightPending;\n    }\n    /**\n     * Multiplies the user weight by a factor to determine the internal weight.\n     *\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\n     */\n\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      this._internalWeight = this._weight * factor;\n\n      if (this._currentState) {\n        this._currentState.updateInternalWeight(this._internalWeight);\n      }\n    }\n    /**\n     * Returns the names of blend states in an animation.\n     *\n     * @param {string} animationName - Name of the animation.\n     *\n     * @returns {Array.<string>} - Names of blend states.\n     */\n\n  }, {\n    key: "getAnimationBlendNames",\n    value: function getAnimationBlendNames(animationName) {\n      var state = this.getState(animationName);\n\n      if (state === undefined) {\n        throw new Error("Cannot get blend names of animation ".concat(animationName, " on layer ").concat(this.name, ". No animation exists with this name."));\n      }\n\n      if (state instanceof state_AbstractBlendState) {\n        return state.getStateNames();\n      }\n\n      throw new Error("Cannot get blend names of animation ".concat(animationName, " on layer ").concat(this.name, ". Animation is not an instance of AbstractBlendState."));\n    }\n    /**\n     * Update the weight for a blend state of an animation.\n     *\n     * @param {string} animationName - Name of the animation containing the blend state\n     * to update.\n     * @param {string} blendName - Name of the blend state to update.\n     * @param {number} weight - Weight value to set on the animation. This number shoudld be\n     * in the 0-1 range.\n     * @param {number=} seconds - Number of seconds it should take to reach the new weight.\n     * Default is zero and will set immediately.\n     * @param {Function=} easingFn - Easing function to use while interpolating the new\n     * weight. Default is Easing.Linear.InOut.\n     *\n     * @returns {Deferred} - Promise that will resolve once the animation\'s weight reaches\n     * the target value.\n     */\n\n  }, {\n    key: "setAnimationBlendWeight",\n    value: function setAnimationBlendWeight(animationName, blendName, weight) {\n      var seconds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var easingFn = arguments.length > 4 ? arguments[4] : undefined;\n      var state = this.getState(animationName);\n\n      if (state === undefined) {\n        throw new Error("Cannot set blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". No animation exists with this name."));\n      }\n\n      if (state instanceof state_AbstractBlendState) {\n        return state.setBlendWeight(blendName, weight, seconds, easingFn);\n      }\n\n      throw new Error("Cannot set blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". Animation is not an instance of AbstractBlendState."));\n    }\n    /**\n     * Returns the weight for a blend state of an animation.\n     *\n     * @param {string} animationName - Name of the animation containing the blend state\n     * to update.\n     * @param {string} blendName - Name of the blend state to retrieve the weight of.\n     *\n     * @returns {number} - Weight of the blend state.\n     */\n\n  }, {\n    key: "getAnimationBlendWeight",\n    value: function getAnimationBlendWeight(animationName, blendName) {\n      var state = this.getState(animationName);\n\n      if (state === undefined) {\n        throw new Error("Cannot get blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". No animation exists with this name."));\n      }\n\n      if (state instanceof state_AbstractBlendState) {\n        return state.getBlendWeight(blendName);\n      }\n\n      throw new Error("Cannot get blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". Animation is not an instance of AbstractBlendState."));\n    }\n    /**\n     * Update any weight interpolators and the current animation.\n     *\n     * @param {number} deltaTime - Time in milliseconds since the last update.\n     */\n\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      AnimationLayer_get(AnimationLayer_getPrototypeOf(AnimationLayer.prototype), "update", this).call(this, deltaTime);\n\n      if (!this._paused && !this._weightPaused) {\n        this._promises.weight.execute(deltaTime);\n      }\n    }\n    /**\n     * Cancel any pending promises and discard states controlled by the layer.\n     */\n\n  }, {\n    key: "discard",\n    value: function discard() {\n      AnimationLayer_get(AnimationLayer_getPrototypeOf(AnimationLayer.prototype), "discard", this).call(this);\n\n      this.discardStates();\n\n      this._promises.weight.cancel();\n\n      delete this._promises;\n    }\n  }]);\n\n  return AnimationLayer;\n}(animpack_AnimationPlayerInterface.Mixin(state_StateContainerInterface.Mixin()));\n\n/* harmony default export */ const animpack_AnimationLayer = (AnimationLayer);\n;// CONCATENATED MODULE: ./src/core/animpack/state/SingleState.js\nfunction SingleState_typeof(obj) { "@babel/helpers - typeof"; return SingleState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, SingleState_typeof(obj); }\n\nfunction SingleState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SingleState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SingleState_createClass(Constructor, protoProps, staticProps) { if (protoProps) SingleState_defineProperties(Constructor.prototype, protoProps); if (staticProps) SingleState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction SingleState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) SingleState_setPrototypeOf(subClass, superClass); }\n\nfunction SingleState_setPrototypeOf(o, p) { SingleState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SingleState_setPrototypeOf(o, p); }\n\nfunction SingleState_createSuper(Derived) { var hasNativeReflectConstruct = SingleState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = SingleState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = SingleState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return SingleState_possibleConstructorReturn(this, result); }; }\n\nfunction SingleState_possibleConstructorReturn(self, call) { if (call && (SingleState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return SingleState_assertThisInitialized(self); }\n\nfunction SingleState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction SingleState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction SingleState_getPrototypeOf(o) { SingleState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SingleState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n/**\n * Class for playing a single animation clip.\n *\n * @extends AbstractState\n * @alias core/SingleState\n */\n\nvar SingleState = /*#__PURE__*/function (_AbstractState) {\n  SingleState_inherits(SingleState, _AbstractState);\n\n  var _super = SingleState_createSuper(SingleState);\n\n  /**\n   * @constructor\n   *\n   * @param {Object=} options - Options for the animation state.\n   * @param {string=} options.name - Name for the animation state. Names must be\n   * unique for the layer the state is applied to.\n   * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\n   * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\n   * animation.\n   * @param {number} [options.loopCount=Infinity] - Number of times the animation should\n   * repeat before finishing.\n   * @param {string} [options.blendMode=DefaultLayerBlendMode] - Type of\n   * blending the animation should use.\n   */\n  function SingleState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    SingleState_classCallCheck(this, SingleState);\n\n    _this = _super.call(this, options);\n    _this._timeScale = options.timeScale !== undefined ? options.timeScale : 1;\n    _this._promises.timeScale = core_Deferred.resolve();\n    _this._loopCount = options.loopCount !== undefined ? options.loopCount : Infinity;\n    _this._blendMode = validateBlendMode(options.blendMode);\n    return _this;\n  }\n  /**\n   * Gets and sets the normalized playing time of the current animation\n   *\n   * @type {number}\n   */\n\n\n  SingleState_createClass(SingleState, [{\n    key: "normalizedTime",\n    get: function get() {\n      return 0;\n    },\n    set: function set(time) {}\n    /**\n     * Gets and sets the a factor to scale animation playback speed with.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "timeScale",\n    get: function get() {\n      return this._timeScale;\n    },\n    set: function set(timeScale) {\n      this._timeScale = timeScale;\n    }\n    /**\n     * Gets whether or not the timeScale is currently being animated.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "timeScalePending",\n    get: function get() {\n      return this._promises.timeScale.pending;\n    }\n    /**\n     * Updates the timeScale value over time.\n     *\n     * @param {number} weight - The target timeScale value.\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\n     * target timeScale.\n     * @param {Function=} easingFn - The easing function to use for interpolation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "setTimeScale",\n    value: function setTimeScale(timeScale) {\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\n\n      this._promises.timeScale.cancel();\n\n      this._promises.timeScale = animpack_AnimationUtils.interpolateProperty(this, \'timeScale\', timeScale, {\n        seconds: seconds,\n        easingFn: easingFn\n      });\n      return this._promises.timeScale;\n    }\n    /**\n     * Gets and sets the number of times the animation will repeat before finishing.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "loopCount",\n    get: function get() {\n      return this._loopCount;\n    },\n    set: function set(loopCount) {\n      this._loopCount = loopCount;\n    }\n    /**\n     * Gets the type of blending used for the animation.\n     *\n     * @readonly\n     * @type {string}\n     */\n\n  }, {\n    key: "blendMode",\n    get: function get() {\n      return this._blendMode;\n    }\n  }]);\n\n  return SingleState;\n}(state_AbstractState);\n\n/* harmony default export */ const state_SingleState = (SingleState);\n;// CONCATENATED MODULE: ./src/core/animpack/state/RandomAnimationState.js\nfunction RandomAnimationState_typeof(obj) { "@babel/helpers - typeof"; return RandomAnimationState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, RandomAnimationState_typeof(obj); }\n\nfunction RandomAnimationState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction RandomAnimationState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction RandomAnimationState_createClass(Constructor, protoProps, staticProps) { if (protoProps) RandomAnimationState_defineProperties(Constructor.prototype, protoProps); if (staticProps) RandomAnimationState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction RandomAnimationState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { RandomAnimationState_get = Reflect.get; } else { RandomAnimationState_get = function _get(target, property, receiver) { var base = RandomAnimationState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return RandomAnimationState_get.apply(this, arguments); }\n\nfunction RandomAnimationState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = RandomAnimationState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction RandomAnimationState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) RandomAnimationState_setPrototypeOf(subClass, superClass); }\n\nfunction RandomAnimationState_setPrototypeOf(o, p) { RandomAnimationState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return RandomAnimationState_setPrototypeOf(o, p); }\n\nfunction RandomAnimationState_createSuper(Derived) { var hasNativeReflectConstruct = RandomAnimationState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = RandomAnimationState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = RandomAnimationState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return RandomAnimationState_possibleConstructorReturn(this, result); }; }\n\nfunction RandomAnimationState_possibleConstructorReturn(self, call) { if (call && (RandomAnimationState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return RandomAnimationState_assertThisInitialized(self); }\n\nfunction RandomAnimationState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction RandomAnimationState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction RandomAnimationState_getPrototypeOf(o) { RandomAnimationState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return RandomAnimationState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n/**\n * Class for playing random animations at random intervals within this state.\n *\n * @extends AbstractState\n * @implements AnimationPlayerInterface\n * @implements StateContainerInterface\n */\n\nvar RandomAnimationState = /*#__PURE__*/function (_AnimationPlayerInter) {\n  RandomAnimationState_inherits(RandomAnimationState, _AnimationPlayerInter);\n\n  var _super = RandomAnimationState_createSuper(RandomAnimationState);\n\n  /**\n   * @constructor\n   *\n   * @param {Object} [options={}] - Options for the container state.\n   * @param {number} [options.playInterval=3] - The base animation playback interval.\n   * @param {Array.<AbstractState>} [subStates=[]] - states to be randomly picked to play\n   */\n  function RandomAnimationState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var subStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    RandomAnimationState_classCallCheck(this, RandomAnimationState);\n\n    _this = _super.call(this, options);\n    _this._playInterval = options.playInterval ? options.playInterval : 3;\n    subStates.forEach(function (state) {\n      _this.addState(state);\n    });\n    return _this;\n  }\n  /**\n   * Gets and sets the base animation play interval\n   *\n   * @type {float}\n   */\n\n\n  RandomAnimationState_createClass(RandomAnimationState, [{\n    key: "playInterval",\n    get: function get() {\n      return this._playInterval;\n    },\n    set: function set(playInterval) {\n      this._playInterval = playInterval;\n    }\n    /**\n     * Reset the internal timer for animation play interval\n     *\n     * @private\n     */\n\n  }, {\n    key: "_resetTimer",\n    value: function _resetTimer() {\n      var _this2 = this;\n\n      var playTimer = core_Utils.getRandomFloat(this._playInterval / 4, this._playInterval * 2);\n\n      var onFinish = function onFinish() {\n        _this2.playRandomAnimation(_this2._playCallbacks.onError);\n      };\n\n      this._promises.timer = core_Utils.wait(playTimer, {\n        onFinish: onFinish\n      });\n    }\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      if (this._currentState) {\n        this._currentState.updateInternalWeight(this._internalWeight);\n      }\n    }\n    /**\n     * Pick a random animation and utilize AnimationPlayerInterface to play that animation\n     *\n     * @param {Function=} onError - Function to execute if the state encounters\n     * an error during playback.\n     */\n\n  }, {\n    key: "playRandomAnimation",\n    value: function playRandomAnimation(onError) {\n      this._resetTimer();\n\n      var states = this.getStateNames();\n\n      if (this._currentState) {\n        states.splice(states.indexOf(this._currentState.name), 1);\n      }\n\n      var randomState = states[core_Utils.getRandomInt(0, states.length)];\n      this.playAnimation(randomState, this._transitionTime, this._easingFn, undefined, onError, undefined);\n    }\n  }, {\n    key: "play",\n    value: function play(onFinish, onError, onCancel) {\n      this.playRandomAnimation(onError);\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "play", this).call(this, onFinish, onError, onCancel);\n    }\n  }, {\n    key: "pause",\n    value: function pause() {\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "pause", this).call(this) && this.pauseAnimation();\n    }\n  }, {\n    key: "resume",\n    value: function resume(onFinish, onError, onCancel) {\n      if (this._currentState) {\n        this.resumeAnimation(this._currentState.name, this._transitionTime, this._easingFn, undefined, onError, undefined);\n      }\n\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "resume", this).call(this, onFinish, onError, onCancel);\n    }\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "cancel", this).call(this) && this.cancelAnimation();\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "stop", this).call(this) && this.stopAnimation();\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "discard", this).call(this);\n\n      this.discardStates();\n    }\n  }]);\n\n  return RandomAnimationState;\n}(animpack_AnimationPlayerInterface.Mixin(state_StateContainerInterface.Mixin(state_AbstractState)));\n\n/* harmony default export */ const state_RandomAnimationState = (RandomAnimationState);\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationFeature.js\nfunction AnimationFeature_typeof(obj) { "@babel/helpers - typeof"; return AnimationFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationFeature_typeof(obj); }\n\nfunction AnimationFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction AnimationFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AnimationFeature_ownKeys(Object(source), !0).forEach(function (key) { AnimationFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AnimationFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction AnimationFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction AnimationFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AnimationFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AnimationFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction AnimationFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationFeature_get = Reflect.get; } else { AnimationFeature_get = function _get(target, property, receiver) { var base = AnimationFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationFeature_get.apply(this, arguments); }\n\nfunction AnimationFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction AnimationFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationFeature_setPrototypeOf(subClass, superClass); }\n\nfunction AnimationFeature_setPrototypeOf(o, p) { AnimationFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationFeature_setPrototypeOf(o, p); }\n\nfunction AnimationFeature_createSuper(Derived) { var hasNativeReflectConstruct = AnimationFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationFeature_possibleConstructorReturn(this, result); }; }\n\nfunction AnimationFeature_possibleConstructorReturn(self, call) { if (call && (AnimationFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationFeature_assertThisInitialized(self); }\n\nfunction AnimationFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AnimationFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AnimationFeature_getPrototypeOf(o) { AnimationFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n\n\n\n\n\n\n/**\n * Enum for animation state classes.\n *\n * @readonly\n * @enum {Class}\n */\n\nvar AnimationTypes = {\n  single: state_SingleState,\n  freeBlend: state_FreeBlendState,\n  queue: state_QueueState,\n  randomAnimation: state_RandomAnimationState,\n  blend1d: state_Blend1dState,\n  blend2d: state_Blend2dState\n};\n/**\n * Feature for managing animations on an object.\n *\n * @extends AbstractHostFeature\n * @alias core/AnimationFeature\n *\n * @property {Object} EVENTS - Built-in messages that the feature emits. When the\n * feature is added to a {@link core/HostObject}, event names will be prefixed by the\n * name of the feature class + \'.\'.\n * @property {string} [EVENTS.addLayer=onAddLayerEvent] - Message that is emitted after\n * [addLayer]{@link core/AnimationFeature#addLayer} has been successfully executed.\n * An object representing the name of the layer that was added and its index in\n * the layer stack with the signature {name: string, index: number} is supplied\n * as an argument to listener functions.\n * @property {string} [EVENTS.removeLayer=onRemoveLayerEvent] - Message that is\n * emitted after [removeLayer]{@link core/AnimationFeature#removeLayer} has been\n * successfully executed. An object representing the name of the layer that was\n * removed and its index in the layer stack with the signature {name: string, index: number}\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.renameLayer=onRenameLayerEvent] - Message that is\n * emitted after [renameLayer]{@link core/AnimationFeature#renameLayer} has been\n * successfully executed. An object representing the original name of the layer\n * that was renamed and its updated name with the signature {oldName: string, newName: string}\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.addAnimation=onAddAnimationEvent] - Message that is\n * emitted after [addAnimation]{@link core/AnimationFeature#addAnimation} has been\n * successfully executed. An object representing the name of the layer that the\n * animation was added to and the name of the animation that was added with the\n * signature {layerName: string, animationName: string} is supplied as an argument\n * to listener functions.\n * @property {string} [EVENTS.removeAnimation=onRemovedAnimationEvent] - Message\n * that is emitted after [removeAnimation]{@link core/AnimationFeature#removeAnimation}\n * has been successfully executed. An object representing the name of the layer\n * that the animation was removed from and the name of the animation that was removed\n * with the signature {layerName: string, animationName: string} is supplied as\n * an argument to listener functions.\n * @property {string} [EVENTS.renameAnimation=onRenameAnimationEvent] - Message\n * that is emitted after [renameAnimation]{@link core/AnimationFeature#renameAnimation}\n * has been successfully executed. An object representing the name of the layer\n * that contains the animation that was renamed, the original name of the animation\n * that was renamed and its updated name with the signature {layerName: string, oldName: string, newName: string}\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.play=onPlayEvent] - Message that is emitted after\n * each call to [play]{@link core/AnimationFeature#playAnimation}. An object representing\n * the name of the layer contains the animation that was played and the name of\n * the animation that was played with the signature {layerName: string, animationName: string}\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.pause=onPauseEvent] - Message that is emitted after\n * each call to [pause]{@link core/AnimationFeature#pauseAnimation}. An object representing\n * the name of the layer contains the animation that was paused and the name of\n * the animation that was paused with the signature {layerName: string, animationName: string}\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.resume=onResumeEvent] - Message that is emitted after\n * each call to [resume]{@link core/AnimationFeature#resumeAnimation}. An object representing\n * the name of the layer contains the animation that was resumed and the name of\n * the animation that was resumed with the signature {layerName: string, animationName: string}\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.interrupt=onInterruptEvent] - Message that is emitted\n * if there is a current speech in progress and [play]{@link core/AnimationFeature#playAnimation}\n * or [resume]{@link core/AnimationFeature#resumeAnimation} are executed for a new speech.\n * An object representing the name of the layer contains the animation that was\n * interrupted and the name of the animation that was interrupted with the signature\n * {layerName: string, animationName: string} is supplied as an argument to listener\n * functions.\n * @property {string} [EVENTS.stop=onStopEvent] - Message that is emitted after\n * each call to [stop]{@link core/AnimationFeature#stopAnimation} and when a speech reaches\n * the end of playback. An object representing\n * the name of the layer contains the animation that was stopped and the name of\n * the animation that was stopped with the signature {layerName: string, animationName: string}\n * is supplied as an argument to listener functions.\n */\n\nvar AnimationFeature = /*#__PURE__*/function (_AbstractHostFeature) {\n  AnimationFeature_inherits(AnimationFeature, _AbstractHostFeature);\n\n  var _super = AnimationFeature_createSuper(AnimationFeature);\n\n  /**\n   * @constructor\n   *\n   * @param {core/HostObject} host - Host object that owns the feature.\n   */\n  function AnimationFeature(host) {\n    var _this;\n\n    AnimationFeature_classCallCheck(this, AnimationFeature);\n\n    _this = _super.call(this, host);\n    _this._layers = [];\n    _this._layerMap = {};\n    _this._paused = false;\n    return _this;\n  }\n  /**\n   * Make sure a supplied layer index is within the range of layers.\n   *\n   * @private\n   *\n   * @param {number} index\n   * @param {boolean} [existing=true] - Whether the index represents and existing\n   * layer or a new layer to be added.\n   *\n   * @returns {number=}\n   */\n\n\n  AnimationFeature_createClass(AnimationFeature, [{\n    key: "_validateIndex",\n    value: function _validateIndex(index) {\n      var existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // Index is invalid if there are no layers and we\'re checking for an existing layer index\n      if (this._layers.length === 0 && existing) {\n        return undefined;\n      }\n\n      var lastIndex = existing ? this._layers.length - 1 : this._layers.length; // Count from the end of the array for negative indices\n\n      if (index < 0) {\n        index = lastIndex + index + 1;\n      }\n\n      if (index < 0 || index > lastIndex) {\n        return undefined;\n      } else {\n        return index;\n      }\n    }\n    /**\n     * Re-evaluate internal weight values of layers starting from the top of the\n     * stack. Override layers\' weights affect the values of all layers lower in the\n     * stack.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_updateInternalWeights",\n    value: function _updateInternalWeights() {\n      var numLayers = this._layers.length;\n      var weightMultiplier = 1; // Update internal weight values on layers in reverse order\n\n      for (var i = numLayers - 1; i >= 0; i--) {\n        var layer = this._layers[i];\n        layer.updateInternalWeight(weightMultiplier); // If the layer is override, update the multiplier with the remainder of the full weight\n\n        if (layer.blendMode === LayerBlendModes.Override && layer.currentState) {\n          weightMultiplier *= 1 - layer.currentState.internalWeight;\n        }\n      }\n    }\n    /**\n     * Return a new instance of a SingleState.\n     *\n     * @private\n     *\n     * @param {Object} options - Options to pass to the SingleState constructor.\n     * @param {string=} options.name - Name for the animation state. Names must be\n     * unique for the layer the state is applied to.\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\n     * animation.\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\n     * repeat before finishing.\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\n     * blending the animation should use.\n     *\n     * @returns {core/SingleState}\n     */\n\n  }, {\n    key: "_createSingleState",\n    value: function _createSingleState(options) {\n      return new state_SingleState(options);\n    }\n    /**\n     * Return a new instance of a FreeBlendState.\n     *\n     * @private\n     *\n     * @param {Object} options - Options to pass to the FreeBlendState constructor.\n     * @param {string=} options.name - Name for the animation state. Names must be\n     * unique for the layer the state is applied to.\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\n     * animation.\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\n     * repeat before finishing.\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\n     * blending the animation should use.\n     * @param {Array.<Object>} [options.blendStateOptions] - Array of options used to create the\n     * blend states for this container.\n     *\n     * @returns {FreeBlendState}\n     */\n\n  }, {\n    key: "_createFreeBlendState",\n    value: function _createFreeBlendState(options) {\n      var _this2 = this;\n\n      var _options$blendStateOp = options.blendStateOptions,\n          blendStateOptions = _options$blendStateOp === void 0 ? [] : _options$blendStateOp;\n      var blendStates = [];\n      blendStateOptions.forEach(function (blendOptions) {\n        blendStates.push(_this2._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, blendOptions), {}, {\n          blendMode: options.blendMode\n        })));\n      });\n      return new state_FreeBlendState(options, blendStates);\n    }\n    /**\n     * Return a new instance of a QueueState.\n     *\n     * @private\n     *\n     * @param {Object} options - Options to pass to the QueueState constructor.\n     * @param {string=} options.name - Name for the animation state. Names must be\n     * unique for the layer the state is applied to.\n     * @param {number} [options.weight=0] - The 0-1 amount of influence the state will have.\n     * @param {number=} options.transitionTime - The amount of time it takes to transition\n     * between queued states.\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\n     * blending the animation should use.\n     * @param {Array.<Object>} [options.queueOptions] - Array of options used to create the\n     * queue states for this container.\n     *\n     * @returns {QueueState}\n     */\n\n  }, {\n    key: "_createQueueState",\n    value: function _createQueueState(options) {\n      var _this3 = this;\n\n      var _options$queueOptions = options.queueOptions,\n          queueOptions = _options$queueOptions === void 0 ? [] : _options$queueOptions;\n      var queueStates = queueOptions.map(function (queueOption) {\n        return _this3._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({\n          transitionTime: options.transitionTime\n        }, queueOption), {}, {\n          blendMode: options.blendMode\n        }));\n      });\n      return new state_QueueState(options, queueStates);\n    }\n    /**\n     * Return a new instance of a Blend1dState.\n     *\n     * @private\n     *\n     * @param {Object} options - Options to pass to the Blend1dState constructor.\n     * @param {string=} options.name - Name for the animation state. Names must be\n     * unique for the layer the state is applied to.\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\n     * animation.\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\n     * repeat before finishing.\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\n     * blending the animation should use.\n     * @param {Array.<Object>} [options.blendStateOptions] - Array of options used to create the\n     * blend states for this container.\n     * @param {Array.<number>} [options.blendThresholds] - Array of numbers used to set the\n     * thresholds for each blend state in this container.\n     * @param {Array.<boolean>} [options.blendMatchPhases=[]] - Optional array of booleans used to\n     * set whether or not each blend state in this container will match phases.\n     *\n     * @returns {Blend1dState}\n     */\n\n  }, {\n    key: "_createBlend1dState",\n    value: function _createBlend1dState(options) {\n      var _this4 = this;\n\n      var _options$blendStateOp2 = options.blendStateOptions,\n          blendStateOptions = _options$blendStateOp2 === void 0 ? [] : _options$blendStateOp2;\n      var _options$blendThresho = options.blendThresholds,\n          blendThresholds = _options$blendThresho === void 0 ? [] : _options$blendThresho;\n      var _options$blendMatchPh = options.blendMatchPhases,\n          blendMatchPhases = _options$blendMatchPh === void 0 ? [] : _options$blendMatchPh;\n      var blendStates = [];\n      blendStateOptions.forEach(function (blendOptions) {\n        blendStates.push(_this4._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, blendOptions), {}, {\n          blendMode: options.blendMode\n        })));\n      });\n      return new state_Blend1dState(options, blendStates, blendThresholds, blendMatchPhases);\n    }\n    /**\n     * Return a new instance of a Blend2dState.\n     *\n     * @private\n     *\n     * @param {Object} options - Options to pass to the Blend1dState constructor.\n     * @param {string=} options.name - Name for the animation state. Names must be\n     * unique for the layer the state is applied to.\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\n     * animation.\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\n     * repeat before finishing.\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\n     * blending the animation should use.\n     * @param {Array.<Object>} [options.blendStateOptions] - Array of options used to create the\n     * blend states for this container.\n     * @param {Array.<Array.<number>>} [options.blendThresholds] - Array of Array of numbers used to set the\n     * thresholds for each blend state in this container.\n     * @param {Array.<boolean>} [options.blendMatchPhases=[]] - Optional array of booleans used to\n     * set whether or not each blend state in this container will match phases.\n     *\n     * @returns {Blend1dState}\n     */\n\n  }, {\n    key: "_createBlend2dState",\n    value: function _createBlend2dState(options) {\n      var _this5 = this;\n\n      var _options$blendStateOp3 = options.blendStateOptions,\n          blendStateOptions = _options$blendStateOp3 === void 0 ? [] : _options$blendStateOp3;\n      var _options$blendThresho2 = options.blendThresholds,\n          blendThresholds = _options$blendThresho2 === void 0 ? [] : _options$blendThresho2;\n      var _options$blendMatchPh2 = options.blendMatchPhases,\n          blendMatchPhases = _options$blendMatchPh2 === void 0 ? [] : _options$blendMatchPh2;\n      var blendStates = [];\n      blendStateOptions.forEach(function (blendOptions) {\n        blendStates.push(_this5._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, blendOptions), {}, {\n          blendMode: options.blendMode\n        })));\n      });\n      return new state_Blend2dState(options, blendStates, blendThresholds, blendMatchPhases);\n    }\n    /**\n     * Return a new instance of a RandomAnimationState.\n     *\n     * @private\n     *\n     * @param {Object} options - Options to pass to the RandomAnimationState constructor.\n     * @param {string=} options.name - Name for the animation state. Names must be\n     * unique for the layer the state is applied to.\n     * @param {number} [options.playInterval=3] - The base animation playback interval.\n     * @param {Array.<Object>} [options.subStateOptions] - Array of options used to create the\n     * sub states for this container.\n     *\n     * @returns {RandomAnimationState}\n     */\n\n  }, {\n    key: "_createRandomAnimationState",\n    value: function _createRandomAnimationState(options) {\n      var _this6 = this;\n\n      var _options$subStateOpti = options.subStateOptions,\n          subStateOptions = _options$subStateOpti === void 0 ? [] : _options$subStateOpti;\n      var subStates = [];\n      subStateOptions.forEach(function (subStateOptions) {\n        subStates.push(_this6._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, subStateOptions), {}, {\n          blendMode: options.blendMode\n        })));\n      });\n      return new state_RandomAnimationState(options, subStates);\n    }\n    /**\n     * Make sure the layer with the given name exists and return a unique version\n     * of the animation name supplied for that layer.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer to check against.\n     * @param {string} animationName - Name of the animation to validate.\n     *\n     * @returns {string} Validated animation name.\n     */\n\n  }, {\n    key: "_validateNewAnimation",\n    value: function _validateNewAnimation(layerName, animationName) {\n      // Make sure the layerName is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Cannot add animation to layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      } // Make sure the animationName is unique\n\n\n      var name = core_Utils.getUniqueName(animationName, layer.getStateNames());\n\n      if (name !== animationName) {\n        console.warn("Animation name ".concat(animationName, " is not unique for layer ").concat(layer.name, ". Animation will be renamed to ").concat(name, "."));\n      }\n\n      return name;\n    }\n    /**\n     * Gets whether or not all animations are paused.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "paused",\n    get: function get() {\n      return this._paused;\n    }\n    /**\n     * Gets an array of names of animation layers.\n     *\n     * @readonly\n     * @type {Array.<string>}\n     */\n\n  }, {\n    key: "layers",\n    get: function get() {\n      return this._layers.map(function (layer) {\n        return layer.name;\n      });\n    }\n    /**\n     * Create and store a new animation layer.\n     *\n     * @param {string} [name=\'NewLayer\'] - Name for the layer.\n     * @param {Object} [options={}] - Options to pass to {@link AnimationLayer#constructor}\n     * @param {index=} index - Index to insert the new layer at. If none is provided\n     * it will be added to the end of the stack.\n     *\n     * @returns {number} Index of the new layer.\n     */\n\n  }, {\n    key: "addLayer",\n    value: function addLayer() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'NewLayer\';\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var numLayers = this._layers.length;\n      var layerIndex = index; // Make sure the given index is within the range of layers\n\n      if (index === undefined || index === -1) {\n        layerIndex = this._layers.length;\n      } else {\n        layerIndex = this._validateIndex(index, false);\n\n        if (layerIndex === undefined) {\n          // Insert at the beginning if the user passed in a negative index\n          if (index < 0) {\n            layerIndex = 0;\n          } // Otherwise append to the end\n          else {\n            layerIndex = this._layers.length;\n          }\n\n          console.warn("Index ".concat(index, " is invalid for host ").concat(this._host.id, ". New layer will be added at the closest valid index: ").concat(layerIndex, "."));\n        }\n      } // Make sure the layer name is unique\n\n\n      var layerName = core_Utils.getUniqueName(name, Object.keys(this._layerMap));\n\n      if (name !== layerName) {\n        console.warn("Layer name ".concat(name, " is not unique. New layer will be added with the name ").concat(layerName, "."));\n      }\n\n      var layer = new animpack_AnimationLayer(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, options), {}, {\n        name: layerName\n      }));\n      this._layerMap[layerName] = layer;\n\n      if (layerIndex === numLayers) {\n        this._layers.push(layer);\n      } else {\n        this._layers.splice(layerIndex, 0, layer);\n      } // Notify that a layer has been added to the feature\n\n\n      var eventData = {\n        name: layerName,\n        index: layerIndex\n      };\n      this.emit(this.constructor.EVENTS.addLayer, eventData);\n      return eventData;\n    }\n    /**\n     * Remove an animation layer from the stack. Animations on this layer will no\n     * longer be evaluated.\n     *\n     * @param {string} name - Name for the layer to remove.\n     *\n     * @returns {boolean} Whether or not removal was successful.\n     */\n\n  }, {\n    key: "removeLayer",\n    value: function removeLayer(name) {\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        console.warn("Did not remove layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\n        return false;\n      }\n\n      layer.discard();\n\n      var index = this._layers.indexOf(layer);\n\n      this._layers.splice(index, 1);\n\n      delete this._layerMap[name]; // Notify that a layer has been removed from the feature\n\n      this.emit(this.constructor.EVENTS.removeLayer, {\n        name: name,\n        index: index\n      });\n      return true;\n    }\n    /**\n     * Re-order the layer stack so that the layer with the given name is positioned\n     * at the given index.\n     *\n     * @param {string} name - Name of the layer to move.\n     * @param {number} index - New index to position the layer at.\n     *\n     * @returns {number} The new index of the layer\n     */\n\n  }, {\n    key: "moveLayer",\n    value: function moveLayer(name, index) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        throw new Error("Cannot move layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      } // Make sure the index falls in the range of existing layers\n\n\n      var layerIndex = this._validateIndex(index, true);\n\n      var lastIndex = this._layers.length - 1;\n\n      if (layerIndex === undefined) {\n        throw new Error("Cannot move layer ".concat(name, " from host ").concat(this._host.id, " to index ").concat(index, ". Index must be in the 0 - ").concat(lastIndex, " range."));\n      }\n\n      var currentIndex = this._layers.indexOf(layer);\n\n      if (currentIndex === layerIndex) {\n        return;\n      } // Remove from the current position\n\n\n      this._layers.splice(currentIndex, 1); // Insert at the new position\n\n\n      if (layerIndex === lastIndex) {\n        this._layers.push(layer);\n      } else {\n        this._layers.splice(layerIndex, 0, layer);\n      }\n\n      return layerIndex;\n    }\n    /**\n     * Update the name of a layer. Names must be unique, if the new name is not\n     * unique it will have trailing numbers appended until it is unique.\n     *\n     * @param {string} currentName - Current name of the layer.\n     * @param {string} newName - New name to set on the layer.\n     *\n     * @returns {string} The new name of the layer\n     */\n\n  }, {\n    key: "renameLayer",\n    value: function renameLayer(currentName, newName) {\n      // Make sure the name is valid\n      var layer = this._layerMap[currentName];\n\n      if (layer === undefined) {\n        throw new Error("Cannot rename layer ".concat(currentName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      } // Make sure the layer name is unique\n\n\n      var name = core_Utils.getUniqueName(newName, Object.keys(this._layerMap));\n\n      if (name !== newName) {\n        console.warn("Layer name ".concat(newName, " is not unique. Layer will be renamed to ").concat(name, "."));\n      }\n\n      delete this._layerMap[currentName];\n      this._layerMap[name] = layer;\n      layer.name = name; // Notify that a layer has been renamed on the feature\n\n      this.emit(this.constructor.EVENTS.renameLayer, {\n        oldName: currentName,\n        newName: name\n      });\n      return name;\n    }\n    /**\n     * Return the weight of an animation layer.\n     *\n     * @param {string} name - Name of the layer to return weight from.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getLayerWeight",\n    value: function getLayerWeight(name) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        throw new Error("Cannot get weight on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.weight;\n    }\n    /**\n     * Update the weight of an animation layer.\n     *\n     * @param {string} name - The name of the layer to update.\n     * @param {number} weight - The weight value to set on the layer. This number\n     * should be in the 0-1 range.\n     * @param {number=} seconds - The number of seconds it should take to reach the\n     * new weight. Default is zero and will set immediately.\n     * @param {Function=} easingFn - The easing function to use while interpolating\n     * the weight. Default is Easing.Linear.InOut.\n     *\n     * @returns {Deferred} A promise that will resolve once the layer\'s weight reaches\n     * the target value.\n     */\n\n  }, {\n    key: "setLayerWeight",\n    value: function setLayerWeight(name, weight, seconds, easingFn) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        var e = "Cannot set weight on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      }\n\n      return layer.setWeight(weight, seconds, easingFn);\n    }\n    /**\n     * Returns the names of blend states in an animation in a layer.\n     *\n     * @param {string} layerName - Name of the layer containing the animation containing\n     * the blend state to update.\n     * @param {string} animationName - Name of the animation containing the blend state\n     * to update.\n     *\n     * @returns {Array.<string>} - Names of blend states.\n     */\n\n  }, {\n    key: "getAnimationBlendNames",\n    value: function getAnimationBlendNames(layerName, animationName) {\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Cannot get blend names on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.getAnimationBlendNames(animationName);\n    }\n    /**\n     * Update the weight for a blend state in an animation in a layer.\n     *\n     * @param {string} layerName - Name of the layer containing the animation containing\n     * the blend state to update.\n     * @param {string} animationName - Name of the animation containing the blend state\n     * to update.\n     * @param {string} blendName - Name of the blend state to update.\n     * @param {number} weight - Weight value to set on the animation. This number shoudld be\n     * in the 0-1 range.\n     * @param {number=} seconds - Number of seconds it should take to reach the new weight.\n     * Default is zero and will set immediately.\n     * @param {Function=} easingFn - Easing function to use while interpolating the new\n     * weight. Default is Easing.Linear.InOut.\n     *\n     * @returns {Deferred} - Promise that will resolve once the animation\'s weight reaches\n     * the target value.\n     */\n\n  }, {\n    key: "setAnimationBlendWeight",\n    value: function setAnimationBlendWeight(layerName, animationName, blendName, weight, seconds, easingFn) {\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        var e = "Cannot set blend weight on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      }\n\n      return layer.setAnimationBlendWeight(animationName, blendName, weight, seconds, easingFn);\n    }\n    /**\n     * Returns the weight for a blend state in an animation in a layer.\n     *\n     * @param {string} layerName - Name of the layer containing the animation containing\n     * the blend state to update.\n     * @param {string} animationName - Name of the animation containing the blend state\n     * to update.\n     * @param {string} blendName - Name of the blend state to update.\n     *\n     * @returns {number} - Weight of the blend state.\n     */\n\n  }, {\n    key: "getAnimationBlendWeight",\n    value: function getAnimationBlendWeight(layerName, animationName, blendName) {\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Cannot get blend weight on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.getAnimationBlendWeight(animationName, blendName);\n    }\n    /**\n     * Pause weight interpolation animation on a layer with the given name.\n     *\n     * @param {string} name - Name of the layer to pause.\n     *\n     * @returns {boolean} - Whether or not there was an existing interpolation to pause.\n     */\n\n  }, {\n    key: "pauseLayerWeight",\n    value: function pauseLayerWeight(name) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        throw new Error("Cannot pause weight interpolation on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.pauseWeight();\n    }\n    /**\n     * Resume weight interpolation animation on a layer with the given name.\n     *\n     * @param {string} name - Name of the layer to resume.\n     *\n     * @returns {Deferred} - Resolves once the layer\'s weight reaches its target value.\n     */\n\n  }, {\n    key: "resumeLayerWeight",\n    value: function resumeLayerWeight(name) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        var e = "Cannot resume weight interpolation on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      }\n\n      return layer.resumeWeight();\n    }\n    /**\n     * Pause current animation and weight interpolation animation on a layer with\n     * the given name.\n     *\n     * @param {string} name - Name of the layer to pause.\n     *\n     * @returns {boolean} - Whether or not there was an existing interpolation or\n     * current animation to pause.\n     */\n\n  }, {\n    key: "pauseLayer",\n    value: function pauseLayer(name) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        throw new Error("Cannot pause layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.pause();\n    }\n    /**\n     * Resume current animation and weight interpolation animation on a layer with\n     * the given name.\n     *\n     * @param {string} name - Name of the layer to resume.\n     *\n     * @returns {Deferred} - Resolves once the layer\'s weight reaches its target value\n     * and it\'s current animation finishes playing.\n     */\n\n  }, {\n    key: "resumeLayer",\n    value: function resumeLayer(name) {\n      // Make sure the name is valid\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        var e = "Cannot resume layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      }\n\n      return layer.resume();\n    }\n    /**\n     * Return whether or not the animation layer with the given name is currently\n     * transitioning between animations.\n     *\n     * @param {string} layerName - Name of the layer to check.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "getTransitioning",\n    value: function getTransitioning(layerName) {\n      // Make sure the layerName is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Get transitioning on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.isTransitioning;\n    }\n    /**\n     * Return an array of the names of all states the layer with the given name controls.\n     *\n     * @param {string} layerName - Name of the layer to search.\n     *\n     * @returns {Array.<string>}\n     */\n\n  }, {\n    key: "getAnimations",\n    value: function getAnimations(layerName) {\n      // Make sure the layerName is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Get animations on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.getStateNames();\n    }\n    /**\n     * Return the name of the state currently active on the layer with the given name.\n     * Return null if there is no current animation for the layer.\n     *\n     * @param {string} layerName - Name of the layer.\n     *\n     * @returns {(string|null)}\n     */\n\n  }, {\n    key: "getCurrentAnimation",\n    value: function getCurrentAnimation(layerName) {\n      // Make sure the layerName is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Get current animation on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.currentAnimation;\n    }\n    /**\n     * Return whether or not a layer with the given name is currently playing an\n     * animation and that animation is paused.\n     *\n     * @param {string} layerName - Name of the layer.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "getPaused",\n    value: function getPaused(layerName) {\n      // Make sure the layerName is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Get paused on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      return layer.currentState && layer.currentState.paused;\n    }\n    /**\n     * Return the type name of the given animation. @see AnimationTypes.\n     *\n     * @param {string} layerName - Name of the layer that contains the animation.\n     * @param {string} animationName - Name of the animation to check.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "getAnimationType",\n    value: function getAnimationType(layerName, animationName) {\n      // Make sure the layerName is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Get animation type on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      var state = layer.getState(animationName);\n\n      if (state === undefined) {\n        throw new Error("Get animation type for animation ".concat(animationName, " on layer ").concat(layerName, " from host ").concat(this._host.id, ". No animation exists with this name."));\n      }\n\n      var constructor = state.constructor;\n      return Object.keys(AnimationTypes).find(function (typeName) {\n        return AnimationTypes[typeName] === constructor;\n      });\n    }\n    /**\n     * Add a new animation to an animation layer.\n     *\n     * @param {string} layerName - Name of the layer to add the animation to.\n     * @param {string} animationName - Name to use when calling the animation.\n     * @param {Object=} options - Options to pass to the constructor for the new\n     * SingleState animation.\n     *\n     * @returns {string} - The name of the animation that was added\n     */\n\n  }, {\n    key: "addAnimation",\n    value: function addAnimation(layerName, animationName) {\n      var animationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnimationTypes.single;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      options.name = this._validateNewAnimation(layerName, animationName); // Make sure the animation type is valid\n\n      if (!Object.values(AnimationTypes).includes(animationType)) {\n        throw new Error("Cannot add animation ".concat(animationName, " to layer ").concat(layerName, " on host ").concat(this._host.id, ". Invalid animation type."));\n      }\n\n      var layer = this._layerMap[layerName];\n      options.blendMode = layer.blendMode;\n      options.transitionTime = layer.transitionTime;\n      var state = this["_create".concat(animationType.name)](options);\n      var name = layer.addState(state); // Notify that an animation has been added to the feature\n\n      this.emit(this.constructor.EVENTS.addAnimation, {\n        layerName: layerName,\n        animationName: name\n      });\n      return name;\n    }\n    /**\n     * Remove an animation from an animation layer.\n     *\n     * @param {string} layerName - Name of the layer to remove the animation from.\n     * @param {string} name - Name of the animation to remove.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "removeAnimation",\n    value: function removeAnimation(layerName, animationName) {\n      // Make sure the name is valid\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Cannot remove animation from layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      var removed = layer.removeState(animationName); // Notify that an animation has been removed from the feature\n\n      if (removed === true) {\n        this.emit(this.constructor.EVENTS.removeAnimation, {\n          layerName: layerName,\n          animationName: animationName\n        });\n      }\n\n      return removed;\n    }\n    /**\n     * Update the name of an animation. Names must be unique on each layer, if the new\n     * name is not unique it will have trailing numbers appended until it is unique.\n     *\n     * @param {string} layerName - Name of the layer that contains the animation that\n     * will be renamed,\n     * @param {string} currentAnimationName - Current name of the animation.\n     * @param {string} newAnimationName - New name to set on the animation.\n     *\n     * @returns {string} - The new name of the animation\n     */\n\n  }, {\n    key: "renameAnimation",\n    value: function renameAnimation(layerName, currentAnimationName, newAnimationName) {\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        throw new Error("Cannot rename animation ".concat(currentAnimationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name."));\n      }\n\n      var name = layer.renameState(currentAnimationName, newAnimationName); // Notify that an animation has been renamed on the feature\n\n      this.emit(this.constructor.EVENTS.renameAnimation, {\n        layerName: layerName,\n        oldName: currentAnimationName,\n        newName: name\n      });\n      return name;\n    }\n    /**\n     * Pause the currently playing animation and play a new animation from the beginning.\n     *\n     * @param {string} layerName - Name of the layer that contains the animation.\n     * @param {string} animationName - Name of the animation state to play.\n     * @param {number=} seconds - The number of seconds it should take to transition\n     * to the new animation. Default is zero and will set immediately.\n     * @param {Function=} easingFn - The easing function to use while transitioning\n     * between animations. Default is Easing.Linear.InOut.\n     *\n     * @returns {Deferred} - Resolves once the animation reaches the end of its\n     * timeline. Looping animations can only resolve if they are interrupted or\n     * manually stopped.\n     */\n\n  }, {\n    key: "playAnimation",\n    value: function playAnimation(layerName, animationName, seconds, easingFn) {\n      var _this7 = this;\n\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        var e = "Cannot play animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      } // Notify that a new animation has begun\n\n\n      this.emit(this.constructor.EVENTS.playAnimation, {\n        layerName: layerName,\n        animationName: animationName\n      });\n      return layer.playAnimation(animationName, seconds, easingFn, function () {\n        // Notify that an animation has stopped\n        _this7.emit(_this7.constructor.EVENTS.stopAnimation, {\n          layerName: layerName,\n          animationName: animationName\n        });\n      }, undefined, function () {\n        // Notify that an animation has been interrupted\n        _this7.emit(_this7.constructor.EVENTS.interruptAnimation, {\n          layerName: layerName,\n          animationName: animationName\n        });\n      }, function (_ref) {\n        var name = _ref.name,\n            canAdvance = _ref.canAdvance,\n            isQueueEnd = _ref.isQueueEnd;\n\n        if (layer.currentAnimation === animationName) {\n          // Notify that a new animation has begun\n          _this7.emit(_this7.constructor.EVENTS.playNextAnimation, {\n            layerName: layerName,\n            animationName: animationName,\n            nextQueuedAnimation: name,\n            canAdvance: canAdvance,\n            isQueueEnd: isQueueEnd\n          });\n        }\n      });\n    }\n    /**\n     * Play the next animation in the queue of a QueueState animation.\n     *\n     * @param {string} layerName - Name of the layer that contains the queue animation.\n     * @param {string=} animationName - Name of the animation queue animation. Defaults\n     * to the name of the current animation for the layer.\n     * @param {number=} seconds - The number of seconds it should take to transition\n     * to the queue animation if it\'s not already currently playing. Default is zero\n     * and will set immediately.\n     * @param {Function=} easingFn - The easing function to use while transitioning\n     * to the queue animation if it isn\'t already playing. Default is Easing.Linear.InOut.\n     *\n     * @returns {Deferred} - Resolves once the last animation in the queue finishes\n     * playing.\n     */\n\n  }, {\n    key: "playNextAnimation",\n    value: function playNextAnimation(layerName, animationName, transitionTime, easingFn) {\n      var _this8 = this;\n\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        var e = "Cannot play next animation on layer ".concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      }\n\n      if (animationName === undefined) {\n        animationName = layer.currentAnimation;\n      }\n\n      var animation = layer.getState(layer.currentAnimation);\n\n      if (animation === null) {\n        var _e = "Cannot play next animation on layer ".concat(layerName, " for host ").concat(this._host.id, ". No animation exists with name ").concat(animationName, ".");\n\n        return core_Deferred.reject(_e);\n      } else if (this.getAnimationType(layerName, animationName) !== \'queue\') {\n        var _e2 = "Cannot play next animation on layer ".concat(layerName, " for host ").concat(this._host.id, ". ").concat(animationName, " is not a queue state.");\n\n        return core_Deferred.reject(_e2);\n      }\n\n      var onNext = function onNext(_ref2) {\n        var name = _ref2.name,\n            canAdvance = _ref2.canAdvance,\n            isQueueEnd = _ref2.isQueueEnd;\n\n        if (layer.currentAnimation === animationName) {\n          // Notify that a new animation has begun\n          _this8.emit(_this8.constructor.EVENTS.playNextAnimation, {\n            layerName: layerName,\n            animationName: animationName,\n            nextQueuedAnimation: name,\n            canAdvance: canAdvance,\n            isQueueEnd: isQueueEnd\n          });\n        }\n      }; // Make the queue animation current if it wasn\'t already\n\n\n      if (layer.currentAnimation === null) {\n        layer.resumeAnimation(animation.name, transitionTime, easingFn, undefined, undefined, undefined, onNext);\n      }\n\n      return animation.next(onNext, true);\n    }\n    /**\n     * Pause the current animation on a layer.\n     *\n     * @param {string} name - Name of the layer to pause.\n     *\n     * @returns {boolean} Whether or not an animation was successfully paused.\n     */\n\n  }, {\n    key: "pauseAnimation",\n    value: function pauseAnimation(name) {\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        console.warn("Did not pause animation on layer ".concat(name, " for host ").concat(this._host.id, ". No layer exists with this name."));\n        return false;\n      }\n\n      var paused = layer.pauseAnimation(); // Notify that an animation was paused\n\n      if (paused) {\n        var animationName = layer.currentAnimation;\n        this.emit(this.constructor.EVENTS.pauseAnimation, {\n          layerName: name,\n          animationName: animationName\n        });\n      }\n\n      return paused;\n    }\n    /**\n     * Pause the currently playing animation and play a new animation from where it\n     * last left off.\n     *\n     * @param {string} layerName - Name of the layer that contains the animation.\n     * @param {string=} animationName - Name of the animation state to resume. Defaults\n     * to the name of the current animation for the layer.\n     * @param {number=} seconds - The number of seconds it should take to transition\n     * to the new animation. Default is zero and will set immediately.\n     * @param {Function=} easingFn - The easing function to use while transitioning\n     * between animations. Default is Easing.Linear.InOut.\n     *\n     * @returns {Deferred} - Resolves once the animation reaches the end of its\n     * timeline. Looping animations can only resolve if they are interrupted or\n     * manually stopped.\n     */\n\n  }, {\n    key: "resumeAnimation",\n    value: function resumeAnimation(layerName, animationName, seconds, easingFn) {\n      var _this9 = this;\n\n      var layer = this._layerMap[layerName];\n\n      if (layer === undefined) {\n        var e = "Cannot resume animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name.");\n        return core_Deferred.reject(e);\n      } // Notify that an animation was resumed\n\n\n      this.emit(this.constructor.EVENTS.resumeAnimation, {\n        layerName: layerName,\n        animationName: animationName\n      });\n      return layer.resumeAnimation(animationName, seconds, easingFn, function () {\n        // Notify that an animation has stopped\n        _this9.emit(_this9.constructor.EVENTS.stopAnimation, {\n          layerName: layerName,\n          animationName: animationName\n        });\n      }, undefined, function () {\n        // Notify that an animation has been interrupted\n        _this9.emit(_this9.constructor.EVENTS.interruptAnimation, {\n          layerName: layerName,\n          animationName: animationName\n        });\n      }, function (_ref3) {\n        var name = _ref3.name,\n            canAdvance = _ref3.canAdvance,\n            isQueueEnd = _ref3.isQueueEnd;\n\n        if (layer.currentAnimation === animationName) {\n          // Notify that a new animation has begun\n          _this9.emit(_this9.constructor.EVENTS.playNextAnimation, {\n            layerName: layerName,\n            animationName: animationName,\n            nextQueuedAnimation: name,\n            canAdvance: canAdvance,\n            isQueueEnd: isQueueEnd\n          });\n        }\n      });\n    }\n    /**\n     * Stop the current animation on a layer. Stop rewinds the animation to the\n     * beginning and prevents it from progressing forward.\n     *\n     * @param {string} name - Name of the layer that contains the animation.\n     *\n     * @returns {boolean} Whether or not an animation was successfully stopped.\n     */\n\n  }, {\n    key: "stopAnimation",\n    value: function stopAnimation(name) {\n      var layer = this._layerMap[name];\n\n      if (layer === undefined) {\n        console.warn("Did not stop animation on layer ".concat(name, " for host ").concat(this._host.id, ". No layer exists with this name."));\n        return false;\n      }\n\n      return layer.stopAnimation();\n    }\n    /**\n     * Pause current animation and weight interpolation animation on all layers.\n      * @returns {boolean} - Whether or not there was an existing interpolation or\n     * current animations to pause.\n     */\n\n  }, {\n    key: "pause",\n    value: function pause() {\n      this._paused = true;\n      var paused = false;\n\n      this._layers.forEach(function (l) {\n        if (l.pause()) {\n          paused = true;\n        }\n      });\n\n      return paused;\n    }\n    /**\n     * Resume current animation and weight interpolation animation on all layers.\n      * @returns {boolean} - Whether or not there was an existing interpolation or\n     * current animations to resume.\n     */\n\n  }, {\n    key: "resume",\n    value: function resume() {\n      this._paused = false;\n      var resumed = false;\n\n      this._layers.forEach(function (l) {\n        if (l.resume()) {\n          resumed = true;\n        }\n      });\n\n      return resumed;\n    }\n    /**\n     * Adds a namespace to the host with the name of the feature to contain properties\n     * and methods from the feature that users of the host need access to.\n     *\n     * @see AnimationFeature\n     */\n\n  }, {\n    key: "installApi",\n    value: function installApi() {\n      var _this10 = this;\n\n      /**\n       * @inner\n       * @namespace AnimationFeature\n       */\n      var api = AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "installApi", this).call(this);\n\n      Object.defineProperties(api, {\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @see core/AnimationFeature#paused\n         */\n        paused: {\n          get: function get() {\n            return _this10.paused;\n          }\n        },\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @see core/AnimationFeature#layers\n         */\n        layers: {\n          get: function get() {\n            return _this10.layers;\n          }\n        }\n      });\n      Object.assign(api, {\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#addLayer\n         */\n        addLayer: this.addLayer.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#removeLayer\n         */\n        removeLayer: this.removeLayer.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#moveLayer\n         */\n        moveLayer: this.moveLayer.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#renameLayer\n         */\n        renameLayer: this.renameLayer.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getLayerWeight\n         */\n        getLayerWeight: this.getLayerWeight.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#setLayerWeight\n         */\n        setLayerWeight: this.setLayerWeight.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#pauseLayerWeight\n         */\n        pauseLayerWeight: this.pauseLayerWeight.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#resumeLayerWeight\n         */\n        resumeLayerWeight: this.resumeLayerWeight.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#pauseLayer\n         */\n        pauseLayer: this.pauseLayer.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#resumeLayer\n         */\n        resumeLayer: this.resumeLayer.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getTransitioning\n         */\n        getTransitioning: this.getTransitioning.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getAnimations\n         */\n        getAnimations: this.getAnimations.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getCurrentAnimation\n         */\n        getCurrentAnimation: this.getCurrentAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getPaused\n         */\n        getPaused: this.getPaused.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getAnimationType\n         */\n        getAnimationType: this.getAnimationType.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#addAnimation\n         */\n        addAnimation: this.addAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#removeAnimation\n         */\n        removeAnimation: this.removeAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#renameAnimation\n         */\n        renameAnimation: this.renameAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getAnimationBlendNames\n         */\n        getAnimationBlendNames: this.getAnimationBlendNames.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#getAnimationBlendWeight\n         */\n        getAnimationBlendWeight: this.getAnimationBlendWeight.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#setAnimationBlendWeight\n         */\n        setAnimationBlendWeight: this.setAnimationBlendWeight.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#playAnimation\n         */\n        playAnimation: this.playAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#playNextAnimation\n         */\n        playNextAnimation: this.playNextAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#pauseAnimation\n         */\n        pauseAnimation: this.pauseAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#resumeAnimation\n         */\n        resumeAnimation: this.resumeAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#stopAnimation\n         */\n        stopAnimation: this.stopAnimation.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#pause\n         */\n        pause: this.pause.bind(this),\n\n        /**\n         * @memberof AnimationFeature\n         * @instance\n         * @method\n         * @see core/AnimationFeature#resume\n         */\n        resume: this.resume.bind(this)\n      });\n    }\n    /**\n     * Update each animation layer.\n     *\n     * @param {number} deltaTime - Time since the last update.\n     */\n\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      if (!this._layers.length) {\n        return;\n      }\n\n      if (this._paused) {\n        deltaTime = 0;\n      } // Re-evaluate internal weights for layers\n\n\n      this._updateInternalWeights(); // Update layers\n\n\n      this._layers.forEach(function (layer) {\n        layer.update(deltaTime);\n      });\n\n      AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "update", this).call(this, deltaTime);\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      this._layers.forEach(function (layer) {\n        layer.discard();\n      });\n\n      delete this._layers;\n      delete this._layerMap;\n\n      AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "discard", this).call(this);\n    }\n  }]);\n\n  return AnimationFeature;\n}(core_AbstractHostFeature);\n\nObject.defineProperty(AnimationFeature, \'EVENTS\', {\n  value: AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, Object.getPrototypeOf(core_AbstractHostFeature).EVENTS), {}, {\n    addLayer: \'onAddLayerEvent\',\n    removeLayer: \'onRemoveLayerEvent\',\n    renameLayer: \'onRenameLayerEvent\',\n    addAnimation: \'onAddAnimationEvent\',\n    removeAnimation: \'onRemovedAnimationEvent\',\n    renameAnimation: \'onRenameAnimationEvent\',\n    playAnimation: \'onPlayEvent\',\n    playNextAnimation: \'onNextEvent\',\n    pauseAnimation: \'onPauseEvent\',\n    resumeAnimation: \'onResumeEvent\',\n    interruptAnimation: \'onInterruptEvent\',\n    stopAnimation: \'onStopEvent\'\n  })\n});\n/* harmony default export */ const animpack_AnimationFeature = (AnimationFeature);\n;// CONCATENATED MODULE: ./src/core/PointOfInterestFeature.js\nfunction PointOfInterestFeature_typeof(obj) { "@babel/helpers - typeof"; return PointOfInterestFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PointOfInterestFeature_typeof(obj); }\n\nfunction PointOfInterestFeature_slicedToArray(arr, i) { return PointOfInterestFeature_arrayWithHoles(arr) || PointOfInterestFeature_iterableToArrayLimit(arr, i) || PointOfInterestFeature_unsupportedIterableToArray(arr, i) || PointOfInterestFeature_nonIterableRest(); }\n\nfunction PointOfInterestFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction PointOfInterestFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction PointOfInterestFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction PointOfInterestFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction PointOfInterestFeature_toConsumableArray(arr) { return PointOfInterestFeature_arrayWithoutHoles(arr) || PointOfInterestFeature_iterableToArray(arr) || PointOfInterestFeature_unsupportedIterableToArray(arr) || PointOfInterestFeature_nonIterableSpread(); }\n\nfunction PointOfInterestFeature_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction PointOfInterestFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PointOfInterestFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PointOfInterestFeature_arrayLikeToArray(o, minLen); }\n\nfunction PointOfInterestFeature_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction PointOfInterestFeature_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return PointOfInterestFeature_arrayLikeToArray(arr); }\n\nfunction PointOfInterestFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction PointOfInterestFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction PointOfInterestFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PointOfInterestFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) PointOfInterestFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) PointOfInterestFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction PointOfInterestFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { PointOfInterestFeature_get = Reflect.get; } else { PointOfInterestFeature_get = function _get(target, property, receiver) { var base = PointOfInterestFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return PointOfInterestFeature_get.apply(this, arguments); }\n\nfunction PointOfInterestFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PointOfInterestFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction PointOfInterestFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) PointOfInterestFeature_setPrototypeOf(subClass, superClass); }\n\nfunction PointOfInterestFeature_setPrototypeOf(o, p) { PointOfInterestFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PointOfInterestFeature_setPrototypeOf(o, p); }\n\nfunction PointOfInterestFeature_createSuper(Derived) { var hasNativeReflectConstruct = PointOfInterestFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = PointOfInterestFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = PointOfInterestFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return PointOfInterestFeature_possibleConstructorReturn(this, result); }; }\n\nfunction PointOfInterestFeature_possibleConstructorReturn(self, call) { if (call && (PointOfInterestFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return PointOfInterestFeature_assertThisInitialized(self); }\n\nfunction PointOfInterestFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction PointOfInterestFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction PointOfInterestFeature_getPrototypeOf(o) { PointOfInterestFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PointOfInterestFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\n\n/**\n * Enum for axis directions.\n *\n * @readonly\n * @enum {Class}\n */\n\nvar AxisMap = {\n  PositiveX: [1, 0, 0],\n  NegativeX: [-1, 0, 0],\n  PositiveY: [0, 1, 0],\n  NegativeY: [0, -1, 0],\n  PositiveZ: [0, 0, 1],\n  NegativeZ: [0, 0, -1]\n};\nvar FaceTargetTypes = {\n  EyeCenter: 0,\n  EyeLeft: 1,\n  EyeRight: 2,\n  Mouth: 3\n}; // Average distance between pupils is .064m, golden ratio says that the distance\n// from center of the pupils to the center of the mouth should be about the same.\n\nvar FaceVectors = [[0, 0, 0], [-0.032, 0, 0], [0.032, 0, 0], [0, -0.064, 0]]; // Time ranges to use when choosing a new random wait time between saccades\n\nvar MicroSaccadeWaitRanges = {\n  "default": [0.8, 1.75],\n  postMacro: [0.6, 1.3125]\n};\nvar MacroSaccadeWaitRanges = {\n  "default": [5.0, 8.0],\n  mouthTarget: [0.2, 0.75],\n  // Look away from a mouth target the fastest\n  eyeTarget: [1.5, 4.0]\n}; // Minimum angle in degrees the eye direction must change to trigger a blink animation\n\nvar BlinkThreshold = 35; // Maximum number of milliseconds to use for calculating look speed\n\nvar MaxDelta = 100 / 3;\n/**\n * PointOfInterest controls the gaze direction of the host. Given one or more\n * animations of type Blend2dState, it calculates the angles between the lookTracker\n * object (generally a joint in the host\'s skeleton) and the lookTarget (the object\n * the host should look at) and drives the managed Blend2dStates\' X and Y blend\n * values using the result. You can optionally add saccadic movement to any managed\n * animation to help make the host\'s eyes appear alive when focused on the same\n * point for exteded periods of time. If blink animations are specified, a blink\n * will be played during large changes in gaze direction.\n *\n * @extends AbstractHostFeature\n * @alias core/PointOfInterestFeature\n * @implements SSMLSpeechmarkInterface\n * @implements ManagedAnimationLayerInterface\n */\n\nvar PointOfInterestFeature = /*#__PURE__*/function (_AbstractHostFeature$) {\n  PointOfInterestFeature_inherits(PointOfInterestFeature, _AbstractHostFeature$);\n\n  var _super = PointOfInterestFeature_createSuper(PointOfInterestFeature);\n\n  /**\n   * @constructor\n   *\n   * @param {core/HostObject} host - Host that owns the feature.\n   * @param {Object=} options - Options for the feature.\n   * @param {Object=} target - 3D transformation node that the host should try to\n   * look at.\n   * @param {Object} options.lookTracker - 3D transformation node that represents\n   * the direction the host is currently looking during animation.\n   * @param {Object=} options.scene - Engine-specific scene object that contains\n   * the host. This object must be defined if using \'setTargetByName\' or \'SetTargetById\'\n   * methods.\n   * @param {Object=} lookOptions - Options for the look animation layers.\n   * @param {number} [lookOptions.blendTime=0.1] - Default amount of time it will\n   * take to manipulate the weights of the look layers.\n   * @param {number} [lookOptions.easingFn=Quadratic.InOut] - Default easing function\n   * to use when manipulating look layer weights.\n   * @param {Array.<Object>} [lookOptions.layers=[]] - An array of layer options\n   * objects to register as look layers.\n   * @param {Object=} blinkOptions - Options for the blink animation layers.\n   * @param {number} [blinkOptions.blendTime=0.075] - Default amount of time it\n   * will take to manipulate the weights of the blink layers.\n   * @param {number} [blinkOptions.easingFn=Quadratic.InOut] - Default easing function\n   * to use when manipulating blink layer weights.\n   * @param {Array.<Object>} [blinkOptions.layers=[]] - An array of layer options\n   * objects to register as blink layers.\n   */\n  function PointOfInterestFeature(host) {\n    var _this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        target = _ref.target,\n        lookTracker = _ref.lookTracker,\n        scene = _ref.scene;\n\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$blendTime = _ref2.blendTime,\n        lookBlendTime = _ref2$blendTime === void 0 ? 0.1 : _ref2$blendTime,\n        _ref2$easingFn = _ref2.easingFn,\n        lookEasingFn = _ref2$easingFn === void 0 ? Quadratic.InOut : _ref2$easingFn,\n        _ref2$layers = _ref2.layers,\n        lookLayers = _ref2$layers === void 0 ? [] : _ref2$layers;\n\n    var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref3$blendTime = _ref3.blendTime,\n        blinkBlendTime = _ref3$blendTime === void 0 ? 0.075 : _ref3$blendTime,\n        _ref3$easingFn = _ref3.easingFn,\n        blinkEasingFn = _ref3$easingFn === void 0 ? Quadratic.InOut : _ref3$easingFn,\n        _ref3$layers = _ref3.layers,\n        blinkLayers = _ref3$layers === void 0 ? [] : _ref3$layers;\n\n    PointOfInterestFeature_classCallCheck(this, PointOfInterestFeature);\n\n    _this = _super.call(this, host);\n\n    if (!_this.constructor._validateTransformObject(lookTracker)) {\n      throw new Error("Cannot initialize PointOfInterestFeature on host ".concat(_this._host.id, ". LookTracker must be defined as a valid transformation object."));\n    }\n\n    _this._lookTracker = lookTracker;\n    _this._scene = scene;\n    _this._target = target || null;\n    _this._prevTargetPos = [0, 0, 0];\n    _this._isTargetMoving = false;\n    _this._lookLayers = _this._lookLayers || {};\n    _this._trackingConfigs = _this._trackingConfigs || [];\n    _this._blinkLayers = _this._blinkLayers || {}; // Register the look layers\n\n    lookLayers.forEach(function (_ref4) {\n      var name = _ref4.name,\n          animation = _ref4.animation,\n          maxSpeed = _ref4.maxSpeed,\n          reference = _ref4.reference,\n          forwardAxis = _ref4.forwardAxis,\n          hasSaccade = _ref4.hasSaccade,\n          blendTime = _ref4.blendTime,\n          easingFn = _ref4.easingFn;\n\n      _this.registerLookLayer(name, {\n        animation: animation,\n        maxSpeed: maxSpeed,\n        reference: reference,\n        forwardAxis: forwardAxis,\n        hasSaccade: hasSaccade,\n        blendTime: blendTime !== undefined ? blendTime : lookBlendTime,\n        easingFn: easingFn !== undefined ? easingFn : lookEasingFn\n      });\n    }); // Register the blink layers\n\n    blinkLayers.forEach(function (_ref5) {\n      var name = _ref5.name,\n          animation = _ref5.animation,\n          blendTime = _ref5.blendTime,\n          easingFn = _ref5.easingFn;\n\n      _this.registerBlinkLayer(name, {\n        animation: animation,\n        blendTime: blendTime !== undefined ? blendTime : blinkBlendTime,\n        easingFn: easingFn !== undefined ? easingFn : blinkEasingFn\n      });\n    });\n    return _this;\n  }\n  /**\n   * Gets and sets the target object the host should look at.\n   *\n   * @type {Object|null}\n   */\n\n\n  PointOfInterestFeature_createClass(PointOfInterestFeature, [{\n    key: "target",\n    get: function get() {\n      return this._target;\n    },\n    set: function set(target) {\n      this._target = target || null;\n    }\n    /**\n     * Return a vector representing the global position of an object. Should be\n     * overloaded for each rendering engine implementation.\n     *\n     * @private\n     *\n     * @param {any} _obj - Engine-specific 3D transform object.\n     *\n     * @returns {Array.<number>} - An array consisting of three numbers representing\n     * x, y and z coordinates.\n     */\n\n  }, {\n    key: "_onLayerAdded",\n    value: function _onLayerAdded(_ref6) {\n      var name = _ref6.name;\n      this._lookLayers = this._lookLayers || {};\n      this._blinkLayers = this._blinkLayers || {};\n\n      PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "_onLayerAdded", this).call(this, {\n        name: name\n      }); // Validate the look animation\n\n\n      if (this._lookLayers[name] !== undefined) {\n        this._registerLookAnimation(name, this._lookLayers[name]);\n      }\n    }\n  }, {\n    key: "_onAnimationAdded",\n    value: function _onAnimationAdded(_ref7) {\n      var layerName = _ref7.layerName,\n          animationName = _ref7.animationName;\n      this._lookLayers = this._lookLayers || {};\n      this._blinkLayers = this._blinkLayers || {};\n\n      PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "_onAnimationAdded", this).call(this, {\n        layerName: layerName\n      }); // Validate the look animation\n\n\n      if (this._lookLayers[layerName] === animationName) {\n        this._registerLookAnimation(layerName, animationName);\n      }\n    }\n    /**\n     * Ensure that registered look animations are Blend2dStates.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that contains the look animation.\n     * @param {string} animationName - Name of the animation.\n     */\n\n  }, {\n    key: "_registerLookAnimation",\n    value: function _registerLookAnimation(layerName, animationName) {\n      if (this._managedLayers[layerName].animations[animationName].isActive) {\n        if (AnimationTypes[this._host.AnimationFeature.getAnimationType(layerName, animationName)] !== AnimationTypes.blend2d) {\n          // Warn and deactivate if the registered state is not blend2d\n          console.warn("Cannot register Point of Interest look animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". Look animations must be of type \'blend2d\'."));\n          this._managedLayers[layerName].animations[animationName].isActive = false;\n        }\n      }\n    }\n    /**\n     * Check if the given object is not of an engine-specific type. Should\n     * be overloaded for each rendering engine implementation.\n     *\n     * @private\n     *\n     * @param {any} obj - Object to validate.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "_addTrackingConfig",\n    value:\n    /**\n     * Check if the given configuration object has already been stored as a tracking\n     * config. If it has, return the stored configuration. Otherwise, store and\n     * return it.\n     *\n     * @private\n     *\n     * @param {Object} config - Object containing tracker, reference and forwardAxis\n     * properties.\n     *\n     * @returns {Object}\n     */\n    function _addTrackingConfig(config) {\n      var trackingConfig = this._trackingConfigs.find(function (c) {\n        return c.reference === config.reference && c.forwardAxis === config.forwardAxis;\n      });\n\n      if (trackingConfig) {\n        return trackingConfig;\n      } else {\n        config.angles = {\n          h: 0,\n          v: 0\n        };\n        config.prevAngles = {\n          h: 0,\n          v: 0\n        };\n\n        this._trackingConfigs.push(config);\n\n        return config;\n      }\n    }\n    /**\n     * Return the distance between the look tracker and the look target.\n     *\n     * @private\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "_getTargetDistance",\n    value: function _getTargetDistance() {\n      // Find the vector between the global positions of tracker and target\n      var sourcePosition = this.constructor._getWorldPosition(this._lookTracker);\n\n      var targetPosition = this.constructor._getWorldPosition(this._target);\n\n      var lookVector = [targetPosition[0] - sourcePosition[0], targetPosition[1] - sourcePosition[1], targetPosition[2] - sourcePosition[2]];\n      return core_MathUtils.getVectorMagnitude(lookVector);\n    }\n    /**\n     * Reset all stored tracking angles to 0.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_resetLookAngles",\n    value: function _resetLookAngles() {\n      this._trackingConfigs.forEach(function (_ref8) {\n        var angles = _ref8.angles;\n        angles.h = 0;\n        angles.v = 0;\n      });\n    }\n    /**\n     * Store the difference in horizontal and vertical rotation for the tracker\'s\n     * reference rotation and the direction of the target from the tracker.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_setLookAngles",\n    value: function _setLookAngles() {\n      var _this2 = this;\n\n      // Get the current positions of the tracker and target objects\n      var targetPos = this.constructor._getWorldPosition(this._target);\n\n      var trackerPos = this.constructor._getWorldPosition(this._lookTracker); // Check if the target has moved\n\n\n      this._isTargetMoving = core_MathUtils.getVectorMagnitude([targetPos[0] - this._prevTargetPos[0], targetPos[1] - this._prevTargetPos[1], targetPos[2] - this._prevTargetPos[2]]) > 0;\n      Object.assign(this._prevTargetPos, targetPos); // Calculate the horizontal and vertical angles to rotate to the target\n\n      var targetSpherical = core_MathUtils.cartesianToSpherical(targetPos[0] - trackerPos[0], targetPos[1] - trackerPos[1], targetPos[2] - trackerPos[2]);\n\n      var targetAngles = this.constructor._sphericalToBlendValue(targetSpherical[1], targetSpherical[2]); // Calculate angles relative to the reference objects\n\n\n      this._trackingConfigs.forEach(function (_ref9) {\n        var reference = _ref9.reference,\n            forwardAxis = _ref9.forwardAxis,\n            angles = _ref9.angles;\n\n        // Calculate the horizontal and vertical angles to rotate to the direction of the tracker\n        var refDirection = _this2.constructor._getObjectDirection(reference, forwardAxis);\n\n        var refSpherical = core_MathUtils.cartesianToSpherical.apply(core_MathUtils, PointOfInterestFeature_toConsumableArray(refDirection));\n\n        var refAngles = _this2.constructor._sphericalToBlendValue(refSpherical[1], refSpherical[2]); // Store the difference\n\n\n        angles.h = targetAngles.h - refAngles.h;\n        angles.v = targetAngles.v - refAngles.v;\n      });\n    }\n    /**\n     * Return the horizontal and vertical angles it would require to simulate looking\n     * at the given type of face target\n     *\n     * @private\n     *\n     * @param {number} targetType - Integer representing the FaceTargetType.\n     *\n     * @returns {Object}- An object with signature {r: number, h: number, v: number}\n     * where \'r\' represents radius, h represents the horizontal/azimuthal angle and\n     * v represents the vertical/polar angle.\n     */\n\n  }, {\n    key: "_getFaceTargetAngles",\n    value: function _getFaceTargetAngles(targetType) {\n      // No offset when the target is the center of the eyes\n      if (targetType === 0) {\n        return {\n          h: 0,\n          v: 0\n        };\n      } // Build a vector to the face target type using the current distance to the target\n\n\n      var distance = this._getTargetDistance(this._lookTracker);\n\n      var faceVector = PointOfInterestFeature_toConsumableArray(FaceVectors[targetType]);\n\n      faceVector[2] = distance;\n      var spherical = core_MathUtils.cartesianToSpherical.apply(core_MathUtils, PointOfInterestFeature_toConsumableArray(faceVector)); // Make sure values are clamped within the range of motion of the human eye, in case the target is very close\n\n      var blendValues = this.constructor._sphericalToBlendValue(spherical[1], spherical[2]);\n\n      blendValues.h = core_MathUtils.clamp(blendValues.h, -35, 35);\n      blendValues.v = core_MathUtils.clamp(blendValues.v, -25, 30);\n      return blendValues;\n    }\n    /**\n     * Updated the stored speed and duration variables for a layer based on the\n     * change in horizontal and vertical angles of the tracker.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer to store values on.\n     * @param {number} h - Change in horizontal angle, in degrees.\n     * @param {number} v - Change in vertical angle, in degrees.\n     */\n\n  }, {\n    key: "_updateLayerSpeed",\n    value: function _updateLayerSpeed(layerName, h, v) {\n      var layer = this._managedLayers[layerName]; // From "Realistic Avatar and head Animation Using a Neurobiological Model of Visual Attention", Itti, Dhavale, Pighin\n\n      layer.maxHSpeed = 473 * (1 - Math.exp(-h / 7.8));\n      layer.maxVSpeed = 473 * (1 - Math.exp(-v / 7.8)); // From "Eyes Alive", Lee, Badler\n\n      var D0 = 0.025;\n      var d = 0.00235;\n      layer.hDuration = D0 + d * h;\n      layer.vDuration = D0 + d * v;\n    }\n    /**\n     * Set the microSaccade object with new randomized values.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\n     */\n\n  }, {\n    key: "_setMicroSaccade",\n    value: function _setMicroSaccade(layerName) {\n      var layer = this._managedLayers[layerName];\n      var microSaccade = layer.microSaccade;\n\n      if (this._target) {\n        // Micro movements should be smaller when focused on a target\n        microSaccade.h = core_Utils.getRandomFloat(0.01, 0.15);\n        microSaccade.v = core_Utils.getRandomFloat(0.01, 0.15);\n      } else {\n        // Microsaccades. Encyclopedia of Neuroscience. (2009) Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-540-29678-2_3492\n        microSaccade.h = core_Utils.getRandomFloat(0.01, 0.3);\n        microSaccade.v = core_Utils.getRandomFloat(0.01, 0.3);\n      }\n\n      this._updateLayerSpeed(layerName, microSaccade.h, microSaccade.v); // Restart the timer\n\n\n      this._initializeMicroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(MicroSaccadeWaitRanges["default"])));\n    }\n    /**\n     * Set the macroSaccade object with new randomized values.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\n     */\n\n  }, {\n    key: "_setMacroSaccade",\n    value: function _setMacroSaccade(layerName) {\n      var layer = this._managedLayers[layerName];\n      var macroSaccade = layer.macroSaccade;\n      var macroSaccadeWaitRange; // Increase random value range when not focused on a target\n\n      if (!this._target) {\n        macroSaccadeWaitRange = MacroSaccadeWaitRanges["default"]; // Normal human horizontal eye rotation limit is about 35 degrees\n\n        var hLimit = core_Utils.getRandomFloat(0.143, 0.286);\n        var hFactor = core_Utils.getRandomFloat(-hLimit, hLimit);\n        macroSaccade.h = hFactor * 35; // Normal human vertical eye rotation limit is about 25 degrees upward and 30 degrees downward\n\n        var vLimit = core_Utils.getRandomFloat(0.093, 0.186);\n        var vFactor = core_Utils.getRandomFloat(-vLimit, vLimit);\n        macroSaccade.v = vFactor > 0 ? vFactor * 25 : vFactor * 30;\n      } // Pick a new face target\n      else {\n        // Social triangle - saccade between eyes and mouth, weighted to look at eyes more often\n        switch (layer.saccadeTarget) {\n          case 1:\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.eyeTarget;\n            layer.saccadeTarget = Math.random() < 0.75 ? FaceTargetTypes.EyeRight : FaceTargetTypes.Mouth;\n            break;\n\n          case 2:\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.eyeTarget;\n            layer.saccadeTarget = Math.random() < 0.75 ? FaceTargetTypes.EyeLeft : FaceTargetTypes.Mouth;\n            break;\n\n          case 3:\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.mouthTarget;\n            layer.saccadeTarget = Math.random() < 0.5 ? FaceTargetTypes.EyeLeft : FaceTargetTypes.EyeRight;\n            break;\n\n          case 0:\n          default:\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.eyeTarget;\n            layer.saccadeTarget = Math.random() < 0.5 ? FaceTargetTypes.EyeLeft : FaceTargetTypes.EyeRight;\n            break;\n        }\n\n        var _this$_getFaceTargetA = this._getFaceTargetAngles(layer.saccadeTarget),\n            h = _this$_getFaceTargetA.h,\n            v = _this$_getFaceTargetA.v;\n\n        macroSaccade.h = h;\n        macroSaccade.v = v;\n      }\n\n      this._updateLayerSpeed(layerName, macroSaccade.h, macroSaccade.v); // Restart the timers\n\n\n      this._initializeMicroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(MicroSaccadeWaitRanges.postMacro)));\n\n      this._initializeMacroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(macroSaccadeWaitRange)));\n    }\n    /**\n     * Start a new wait timer that will set a new micro saccade movement when it\n     * resolves.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\n     * @param {number} minWaitTime - Minimum number of seconds before a new saccade\n     * will be triggered.\n     * @param {number} maxWaitTime - Maximum number of seconds before a new saccade\n     * will be triggered.\n     */\n\n  }, {\n    key: "_initializeMicroTimer",\n    value: function _initializeMicroTimer(layerName, minWaitTime, maxWaitTime) {\n      var _this3 = this;\n\n      var layer = this._managedLayers[layerName];\n      var waitTime = core_Utils.getRandomFloat(minWaitTime, maxWaitTime);\n\n      if (layer.microSaccadeTimer) {\n        layer.microSaccadeTimer.cancel();\n      }\n\n      layer.microSaccadeTimer = core_Utils.wait(waitTime, {\n        onFinish: function onFinish() {\n          _this3._setMicroSaccade(layerName);\n        }\n      });\n    }\n    /**\n     * Start a new wait timer that will set a new macro saccade movement when it\n     * resolves.\n     *\n     * @private\n     *\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\n     * @param {number} minWaitTime - Minimum number of seconds before a new saccade\n     * will be triggered.\n     * @param {number} maxWaitTime - Maximum number of seconds before a new saccade\n     * will be triggered.\n     */\n\n  }, {\n    key: "_initializeMacroTimer",\n    value: function _initializeMacroTimer(layerName, minWaitTime, maxWaitTime) {\n      var _this4 = this;\n\n      var layer = this._managedLayers[layerName];\n      var waitTime = core_Utils.getRandomFloat(minWaitTime, maxWaitTime);\n\n      if (layer.macroSaccadeTimer) {\n        layer.macroSaccadeTimer.cancel();\n      }\n\n      layer.macroSaccadeTimer = core_Utils.wait(waitTime, {\n        onFinish: function onFinish() {\n          _this4._setMacroSaccade(layerName);\n        }\n      });\n    }\n    /**\n     * Sets a new target to look at.\n     *\n     * @param {Object|null} target - The new target to look at.\n     */\n\n  }, {\n    key: "setTarget",\n    value: function setTarget(target) {\n      this.target = target;\n    }\n    /**\n     * Finds an object given its name and sets it as the new target to look at.\n     * Should be overloaded for each rendering engine implementation.\n     *\n     * @param {string} target - Name to search for.\n     */\n\n  }, {\n    key: "setTargetByName",\n    value: function setTargetByName(name) {\n      if (!name) {\n        this._target = null;\n      }\n\n      if (!this._scene) {\n        throw new Error("Cannot set PointOfInterestFeature target using name ".concat(name, " on host ").concat(this._host.id, ". Scene must be defined."));\n      }\n    }\n    /**\n     * Finds an object given its id and sets it as the new target to look at.\n     * Should be overloaded for each rendering engine implementation.\n     *\n     * @param {string|number} target - Id to search for.\n     */\n\n  }, {\n    key: "setTargetById",\n    value: function setTargetById(id) {\n      if (!id) {\n        this._target = null;\n      }\n\n      if (!this._scene) {\n        throw new Error("Cannot set PointOfInterestFeature target using id ".concat(id, " on host ").concat(this._host.id, ". Scene must be defined."));\n      }\n    }\n    /**\n     * Start keeping track of an animation layer that owns a blend2d animation with\n     * blendWeights corresponding to horizontal and vertical look angles.\n     *\n     * @param {string} layerName - Name of the layer to keep track of.\n     * @param {Object=} options - Options for the layer.\n     * @param {string} [options.animation = \'look\'] - Name of the animation on the\n     * layer whose blendWeights will be driven based on the angle between the lookTracker\n     * and the lookTarget. This animation must be of type blend2d.\n     * @param {number} [options.maxSpeed = 25] - The maximum speed at which the blend2d\n     * blendWeights can be manipulated.\n     * @param {string} [options.forwardAxis = \'PositiveZ\'] - Axis pointing from the\n     * front of the lookReference object. Valid options are \'PositiveX\', \'NegativeX\',\n     * \'PositiveY\', \'NegativeY\', \'PositiveZ\', \'NegativeZ\'.\n     * @param {Object=} options.lookReference - 3D transformation node that the lookTracker\n     * rotation limits should be calculated relative to. Defaults to the host owner.\n     * @param {number} [options.hasSaccade = false] - Whether or not to include\n     * saccadic motion onto the blendWeight animation. This should only be set to\n     * true for blend2d animations representing eye animation.\n     * @param {number=} [options.blendTime=[PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link PointOfInterestFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\n     * Default amount of time to use when manipulating layer weight.\n     * @param {Function=} options.easingFn - Default easing function to use when\n     * manipulating layer weight.\n     */\n\n  }, {\n    key: "registerLookLayer",\n    value: function registerLookLayer(layerName) {\n      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref10$animation = _ref10.animation,\n          animation = _ref10$animation === void 0 ? \'look\' : _ref10$animation,\n          _ref10$maxSpeed = _ref10.maxSpeed,\n          maxSpeed = _ref10$maxSpeed === void 0 ? 25 : _ref10$maxSpeed,\n          reference = _ref10.reference,\n          _ref10$forwardAxis = _ref10.forwardAxis,\n          forwardAxis = _ref10$forwardAxis === void 0 ? \'PositiveZ\' : _ref10$forwardAxis,\n          _ref10$hasSaccade = _ref10.hasSaccade,\n          hasSaccade = _ref10$hasSaccade === void 0 ? false : _ref10$hasSaccade,\n          _ref10$blendTime = _ref10.blendTime,\n          blendTime = _ref10$blendTime === void 0 ? PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref10$blendTime,\n          easingFn = _ref10.easingFn;\n\n      // Validate reference object\n      reference = reference || this._host.owner;\n\n      if (!this.constructor._validateTransformObject(reference)) {\n        throw new Error("Cannot initialize register look layer ".concat(layerName, " for PointOfInterestFeature on host ").concat(this._host.id, ". Reference must be defined as a valid transformation object."));\n      } // Find vector associated with axis string\n\n\n      forwardAxis = AxisMap[forwardAxis] !== undefined ? AxisMap[forwardAxis] : AxisMap.PositiveZ; // Store tracking configuration\n\n      var trackingConfig = this._addTrackingConfig({\n        reference: reference,\n        forwardAxis: forwardAxis\n      }); // Register the layer and animation\n\n\n      this.registerLayer(layerName, {\n        trackingConfig: trackingConfig,\n        maxSpeed: maxSpeed,\n        maxHSpeed: undefined,\n        maxVSpeed: undefined,\n        hDuration: undefined,\n        vDuration: undefined,\n        hVelocity: [0, 0],\n        vVelocity: [0, 0],\n        hasSaccade: hasSaccade,\n        blendTime: blendTime,\n        easingFn: easingFn,\n        microSaccade: {\n          h: 0,\n          v: 0\n        },\n        macroSaccade: {\n          h: 0,\n          v: 0\n        },\n        saccadeTarget: FaceTargetTypes.EyeCenter,\n        animations: PointOfInterestFeature_defineProperty({}, animation, {})\n      });\n      this._lookLayers[layerName] = animation; // Validate the look animation\n\n      this._registerLookAnimation(layerName, animation); // Initialize saccade timers\n\n\n      if (hasSaccade) {\n        var macroSaccadeWaitRange = this._target ? MacroSaccadeWaitRanges.eyeTarget : MacroSaccadeWaitRanges["default"];\n\n        this._initializeMicroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(MicroSaccadeWaitRanges["default"])));\n\n        this._initializeMacroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(macroSaccadeWaitRange)));\n      }\n    }\n    /**\n     * Start keeping track of an animation layer that owns a blink animation. Blink\n     * animations can be of any type, but if it is of type randomAnimation then a\n     * it will be randomized each time a blink is called.\n     *\n     * @param {string} layerName - Name of the layer to keep track of.\n     * @param {Object=} options - Options for the layer.\n     * @param {string} [options.animation = \'blink\'] - Name of the blink animation\n     * on the layer.\n     * @param {number} [options.blendTime=[PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link PointOfInterestFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\n     * Default amount of time to use when manipulating the layer\'s weight.\n     * @param {Function=} options.easingFn - Default easing function to use when\n     * manipulating the layer\'s weight.\n     */\n\n  }, {\n    key: "registerBlinkLayer",\n    value: function registerBlinkLayer(layerName) {\n      var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref11$animation = _ref11.animation,\n          animation = _ref11$animation === void 0 ? \'blink\' : _ref11$animation,\n          _ref11$blendTime = _ref11.blendTime,\n          blendTime = _ref11$blendTime === void 0 ? PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref11$blendTime,\n          easingFn = _ref11.easingFn;\n\n      // Register the layer and animation\n      this.registerLayer(layerName, {\n        blendTime: blendTime,\n        easingFn: easingFn,\n        animations: PointOfInterestFeature_defineProperty({}, animation, {})\n      });\n      this._blinkLayers[layerName] = animation;\n    }\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      var _this5 = this;\n\n      PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "update", this).call(this, deltaTime); // Update the look angles\n\n\n      if (this._target) {\n        this._setLookAngles();\n      } else {\n        this._resetLookAngles();\n      }\n\n      var deltaSeconds = Math.min(deltaTime, MaxDelta) / 1000;\n      var triggerBlink = false; // Set look blend values\n\n      Object.entries(this._lookLayers).forEach(function (_ref12) {\n        var _ref13 = PointOfInterestFeature_slicedToArray(_ref12, 2),\n            layerName = _ref13[0],\n            animName = _ref13[1];\n\n        var options = _this5._managedLayers[layerName]; // Increment the saccade timers\n\n        if (options.isActive && options.hasSaccade) {\n          options.microSaccadeTimer.execute(deltaTime);\n          options.macroSaccadeTimer.execute(deltaTime);\n        } // Set the blend values\n\n\n        if (options.animations[animName].isActive) {\n          var currentH = _this5._host.AnimationFeature.getAnimationBlendWeight(layerName, animName, \'X\');\n\n          var currentV = _this5._host.AnimationFeature.getAnimationBlendWeight(layerName, animName, \'Y\');\n\n          var targetH = options.trackingConfig.angles.h;\n          var targetV = options.trackingConfig.angles.v; // Check if the look angle has changed enough to trigger a blink\n\n          if (_this5._isTargetMoving && !triggerBlink) {\n            var prevTargetH = options.trackingConfig.prevAngles.h;\n            var prevTargetV = options.trackingConfig.prevAngles.v;\n            var changeAmount = core_MathUtils.toDegrees(core_MathUtils.getAngleBetween([prevTargetH, prevTargetV], [targetH, targetV]));\n\n            if (changeAmount >= BlinkThreshold) {\n              triggerBlink = true;\n            }\n          }\n\n          options.trackingConfig.prevAngles.h = targetH;\n          options.trackingConfig.prevAngles.v = targetV; // Add in the saccade movement\n\n          if (options.hasSaccade) {\n            core_MathUtils.dampValue(0, options.macroSaccade.h + options.macroSaccade.h, options.hVelocity, options.hDuration, options.maxHSpeed);\n            targetH += options.hVelocity[0];\n            core_MathUtils.dampValue(0, options.macroSaccade.v + options.macroSaccade.v, options.vVelocity, options.vDuration, options.maxVSpeed);\n            targetV += options.vVelocity[0];\n          } // Clamp to max speed\n\n\n          var factor = core_MathUtils.clamp(deltaSeconds * options.maxSpeed, 0, 1);\n          targetH = core_MathUtils.lerp(currentH, targetH, factor);\n          targetV = core_MathUtils.lerp(currentV, targetV, factor); // Update the blend values\n\n          _this5._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, \'X\', targetH);\n\n          _this5._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, \'Y\', targetV);\n        }\n      });\n\n      if (!triggerBlink || !this._isTargetMoving) {\n        return;\n      } // Execute blink\n\n\n      Object.entries(this._blinkLayers).forEach(function (_ref14) {\n        var _ref15 = PointOfInterestFeature_slicedToArray(_ref14, 2),\n            layerName = _ref15[0],\n            animName = _ref15[1];\n\n        var animation = _this5._managedLayers[layerName].animations[animName];\n\n        if (animation.isActive) {\n          _this5._host.AnimationFeature.playAnimation(layerName, animName);\n        }\n      });\n    }\n  }, {\n    key: "installApi",\n    value: function installApi() {\n      var _this6 = this;\n\n      /**\n       * @inner\n       * @namespace PointOfInterestFeature\n       */\n      var api = PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "installApi", this).call(this);\n\n      Object.defineProperties(api, {\n        /**\n         * @memberof PointOfInterestFeature\n         * @instance\n         * @see core/PointOfInterestFeature#target\n         */\n        target: {\n          get: function get() {\n            return _this6.target;\n          },\n          set: function set(target) {\n            _this6.target = target;\n          }\n        }\n      });\n      Object.assign(api, {\n        /**\n         * @memberof PointOfInterestFeature\n         * @instance\n         * @method\n         * @see core/PointOfInterestFeature#registerLookLayer\n         */\n        registerLookLayer: this.registerLookLayer.bind(this),\n\n        /**\n         * @memberof PointOfInterestFeature\n         * @instance\n         * @method\n         * @see core/PointOfInterestFeature#registerBlinkLayer\n         */\n        registerBlinkLayer: this.registerBlinkLayer.bind(this),\n\n        /**\n         * @memberof PointOfInterestFeature\n         * @instance\n         * @method\n         * @see core/PointOfInterestFeature#setTarget\n         */\n        setTarget: this.setTarget.bind(this),\n\n        /**\n         * @memberof PointOfInterestFeature\n         * @instance\n         * @method\n         * @see core/PointOfInterestFeature#setTargetByName\n         */\n        setTargetByName: this.setTargetByName.bind(this),\n\n        /**\n         * @memberof PointOfInterestFeature\n         * @instance\n         * @method\n         * @see core/PointOfInterestFeature#setTargetById\n         */\n        setTargetById: this.setTargetById.bind(this)\n      });\n      return api;\n    }\n  }], [{\n    key: "_getWorldPosition",\n    value: function _getWorldPosition(obj) {\n      return [0, 0, 0];\n    }\n    /**\n     * Return a matrix representing the global transformation matrix of an object.\n     * Should be overloaded for each rendering engine implementation.\n     *\n     * @private\n     *\n     * @param {any} obj - Engine-specific 3D transform object.\n     *\n     * @returns {Array.<number>} - An array consisting of 16 numbers representing\n     * the 3d transformation.\n     */\n\n  }, {\n    key: "_getWorldMatrix",\n    value: function _getWorldMatrix(obj) {\n      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    }\n    /**\n     * Rotate the given local direction vector by the object\'s world rotation matrix.\n     *\n     * @private\n     *\n     * @param {any} obj - Engine-specific 3D transform object.\n     * @param {Array.<number>} forwardVector - Unit vector representing the local\n     * forward direction of the object.\n     *\n     * @returns {Array.<number>}\n     */\n\n  }, {\n    key: "_getObjectDirection",\n    value: function _getObjectDirection(obj) {\n      var forwardVector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AxisMap.PositiveZ;\n      var rotation = core_MathUtils.getRotationMatrix(this._getWorldMatrix(obj));\n      return core_MathUtils.rotateVector(forwardVector, rotation);\n    }\n    /**\n     * Calculate horizontal and vertical look angles in degrees given spherical theta\n     * and phi angles in radians.\n     *\n     * @param {number} theta - Vertical/polar angle in radians where 0 points directly\n     * along positive Y axis.\n     * @param {number} phi - Horizontal/azimuthal angle in radians.\n     *\n     * @returns {Object} - An object with the signature {h: number, v: number} where\n     * h represents horizontal rotation in degrees and v represents vertical rotation\n     * in degrees.\n     */\n\n  }, {\n    key: "_sphericalToBlendValue",\n    value: function _sphericalToBlendValue(theta, phi) {\n      var h = core_MathUtils.toDegrees(phi); // Offset the vertical angle so 0 is pointing forward instead of up\n\n      var v = core_MathUtils.toDegrees(theta) - 90; // Convert vertical angle to -180, 180 range\n\n      return {\n        h: h,\n        v: v\n      };\n    }\n  }, {\n    key: "_validateTransformObject",\n    value: function _validateTransformObject(obj) {\n      return obj instanceof Object;\n    }\n  }]);\n\n  return PointOfInterestFeature;\n}(core_AbstractHostFeature.mix(awspack_SSMLSpeechmarkInterface.Mixin, animpack_ManagedAnimationLayerInterface.Mixin));\n\n/* harmony default export */ const core_PointOfInterestFeature = (PointOfInterestFeature);\n\n;// CONCATENATED MODULE: ./src/core/animpack/index.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * @module core/animpack\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @namespace\n */\n\nvar Easing = {\n  /**\n   * @see Linear\n   */\n  Linear: Linear,\n\n  /**\n   * @see Quadratic\n   */\n  Quadratic: Quadratic,\n\n  /**\n   * @see Cubic\n   */\n  Cubic: Cubic,\n\n  /**\n   * @see Quartic\n   */\n  Quartic: Quartic,\n\n  /**\n   * @see Quintic\n   */\n  Quintic: Quintic,\n\n  /**\n   * @see Sinusoidal\n   */\n  Sinusoidal: Sinusoidal,\n\n  /**\n   * @see Exponential\n   */\n  Exponential: Exponential,\n\n  /**\n   * @see Circular\n   */\n  Circular: Circular,\n\n  /**\n   * @see Elastic\n   */\n  Elastic: Elastic,\n\n  /**\n   * @see Back\n   */\n  Back: Back,\n\n  /**\n   * @see Bounce\n   */\n  Bounce: Bounce\n};\n/* harmony default export */ const animpack = ({\n  /**\n   * @see core/AnimationFeature\n   */\n  AnimationFeature: animpack_AnimationFeature,\n\n  /**\n   * @see AnimationLayer\n   */\n  AnimationLayer: animpack_AnimationLayer,\n\n  /**\n   * @see core/SingleState\n   */\n  SingleState: state_SingleState,\n\n  /**\n   * @see TransitionState\n   */\n  TransitionState: state_TransitionState,\n\n  /**\n   * @see FreeBlendState\n   */\n  FreeBlendState: state_FreeBlendState,\n\n  /**\n   * @see QueueState\n   */\n  QueueState: state_QueueState,\n\n  /**\n   * @see RandomAnimationState\n   */\n  RandomAnimationState: state_RandomAnimationState,\n\n  /**\n   * @see Blend1dState\n   */\n  Blend1dState: state_Blend1dState,\n\n  /**\n   * @see Blend2dState\n   */\n  Blend2dState: state_Blend2dState,\n\n  /**\n   * @see AnimationUtils\n   */\n  AnimationUtils: animpack_AnimationUtils,\n  Easing: Easing,\n\n  /**\n   * @see LayerBlendModes\n   */\n  LayerBlendModes: LayerBlendModes,\n\n  /**\n   * @see DefaultLayerBlendMode\n   */\n  DefaultLayerBlendMode: DefaultLayerBlendMode,\n\n  /**\n   * @see AnimationTypes\n   */\n  AnimationTypes: AnimationTypes\n});\n;// CONCATENATED MODULE: ./src/core/awspack/TextToSpeechUtils.js\nfunction TextToSpeechUtils_toConsumableArray(arr) { return TextToSpeechUtils_arrayWithoutHoles(arr) || TextToSpeechUtils_iterableToArray(arr) || TextToSpeechUtils_unsupportedIterableToArray(arr) || TextToSpeechUtils_nonIterableSpread(); }\n\nfunction TextToSpeechUtils_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction TextToSpeechUtils_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction TextToSpeechUtils_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return TextToSpeechUtils_arrayLikeToArray(arr); }\n\nfunction TextToSpeechUtils_slicedToArray(arr, i) { return TextToSpeechUtils_arrayWithHoles(arr) || TextToSpeechUtils_iterableToArrayLimit(arr, i) || TextToSpeechUtils_unsupportedIterableToArray(arr, i) || TextToSpeechUtils_nonIterableRest(); }\n\nfunction TextToSpeechUtils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction TextToSpeechUtils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return TextToSpeechUtils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TextToSpeechUtils_arrayLikeToArray(o, minLen); }\n\nfunction TextToSpeechUtils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction TextToSpeechUtils_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction TextToSpeechUtils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction TextToSpeechUtils_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechUtils_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechUtils_typeof(obj); }\n\nfunction TextToSpeechUtils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TextToSpeechUtils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TextToSpeechUtils_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechUtils_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechUtils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * A collection of useful text-to-speech functions.\n *\n * @hideconstructor\n */\n\nvar TextToSpeechUtils = /*#__PURE__*/function () {\n  function TextToSpeechUtils() {\n    TextToSpeechUtils_classCallCheck(this, TextToSpeechUtils);\n  }\n\n  TextToSpeechUtils_createClass(TextToSpeechUtils, null, [{\n    key: "autoGenerateSSMLMarks",\n    value:\n    /**\n     * Returns a new string with SSML marks inserted based on\n     * matches between the input string and the input map. The\n     * word matches are case-insensitive. Words within existing\n     * SSML tags will not be affected. Input text will be surrounded\n     * by <speak></speak> tags if needed.\n     *\n     * @param {string} text - Input string.\n     * @param {object} map - Input object that maps mark keys\n     * to arrays of words. Example:\n     *\n     *  {\n     *    \'mark:sad\' : [\'sad\', \'blue\', \'down\'],\n     *    \'mark:happy\' : [\'joy\', \'glad\', \'great\'],\n     *    \'mark:no\' : [\'no\', \'nah\', \'nay\', \'sure\']\n     *  }\n     * @param {Array.<string>} [randomMarks = []] - If there are sentences that don\'t\n     * match any words from the map object, marks from this array will be randomly\n     * chosen and inserted.\n     *\n     * @returns {string} - Updated input string.\n     */\n    function autoGenerateSSMLMarks(text, map) {\n      var _this = this;\n\n      var randomMarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      if (TextToSpeechUtils_typeof(map) !== \'object\' || map === null) {\n        throw new Error("Cannot generate SSML marks for text \\"".concat(text, "\\" because map is not an object."));\n      } // process the input map into an internal format\n\n\n      var internalMap = this._processInputMap(map);\n\n      var speakTags = [\'<speak>\', \'</speak>\'];\n      var ssmlMarkRegex = /<mark name=(?:"|\')(.*?)(?:"|\')\\/>/;\n      var ssmlTagRegex = /<[^>]*>/g; // Identify any existing SSML tags\n\n      var existingTags = [];\n      var result = ssmlTagRegex.exec(text);\n\n      while (result !== null) {\n        existingTags.push({\n          start: result.index,\n          end: result.index + result[0].length,\n          text: result[0]\n        });\n        result = ssmlTagRegex.exec(text);\n      }\n\n      var chunks = [];\n      var index = 0;\n      var ssmlMarkResult;\n      var duplicateMarkToCheck = [];\n      existingTags.forEach(function (existingTag) {\n        var substr = text.slice(index, existingTag.start);\n\n        if (substr !== \'\') {\n          // auto-mark non-tag text\n          chunks.push(_this._insertMarks(substr, internalMap, duplicateMarkToCheck));\n          duplicateMarkToCheck = [];\n        }\n\n        ssmlMarkResult = ssmlMarkRegex.exec(existingTag.text);\n\n        if (ssmlMarkResult !== null) {\n          var markText = ssmlMarkResult[1];\n          duplicateMarkToCheck.push(markText);\n        } else if (!speakTags.includes(existingTag.text)) {\n          chunks.push(existingTag.text);\n        } // advance the index\n\n\n        index = existingTag.end;\n      });\n      chunks.push(this._insertMarks(text.slice(index), internalMap, duplicateMarkToCheck));\n      var markedText = chunks.join(\'\');\n\n      if (randomMarks && randomMarks.length > 0) {\n        // add random marks to any unmarked sentences\n        markedText = this.addMarksToUnmarkedSentences(markedText, randomMarks);\n      }\n\n      return TextToSpeechUtils.validateText(markedText);\n    }\n    /**\n     * Returns a new string with a random SSML mark inserted at each sentence that\n     * does not already contain an SSML mark.\n     *\n     * @param {string} text - Input string.\n     * @param {Array.<string>} marks - Any array of random SSML marks to choose from\n     * when modifying the text.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "addMarksToUnmarkedSentences",\n    value: function addMarksToUnmarkedSentences(text, marks) {\n      if (!marks || marks.length === 0) return text;\n      var ssmlMarkRegex = /<mark name=(?:"|\')(.*?)(?:"|\')\\/>/g;\n      var ssmlTagRegex = /<[^>]*>/g; // Find the indices of any marks in the text\n\n      var markIndices = [];\n      var markResult = ssmlMarkRegex.exec(text);\n\n      while (markResult !== null) {\n        markIndices.push(markResult.index);\n        markResult = ssmlMarkRegex.exec(text);\n      } // Find all SSML tags in the text\n\n\n      var existingTags = [];\n      var ssmlResult = ssmlTagRegex.exec(text);\n\n      while (ssmlResult !== null) {\n        existingTags.push({\n          start: ssmlResult.index,\n          end: ssmlResult.index + ssmlResult[0].length,\n          text: ssmlResult[0]\n        });\n        ssmlResult = ssmlTagRegex.exec(text);\n      } // Create a copy of the text with all SSML marks replaces with whitespace\n\n\n      var cleanedText = text.slice();\n      existingTags.forEach(function (existingSsml) {\n        var whitespace = new Array(existingSsml.text.length + 1).join(\' \');\n        cleanedText = [cleanedText.slice(0, existingSsml.start), whitespace, cleanedText.slice(existingSsml.end)].join(\'\');\n      });\n\n      var sentenceEndIndices = this._getSentenceEnds(cleanedText); // Only insert random marks into sentences that don\'t already have any\n\n\n      var prevIndex = 0;\n      var targetIndices = sentenceEndIndices.filter(function (index) {\n        var containsMark = markIndices.findIndex(function (markIndex) {\n          return prevIndex <= markIndex && index > markIndex;\n        }) !== -1;\n        prevIndex = index;\n        return !containsMark;\n      });\n\n      var randomMarkedText = this._insertRandomMarksAt(text, targetIndices, marks);\n\n      return randomMarkedText;\n    }\n    /**\n     * Generate a version of given text that is enclosed by Polly ssml speak tags.\n     *\n     * @param {string} text - The text to validate.\n     *\n     * @returns {string} - Updated input string.\n     */\n\n  }, {\n    key: "validateText",\n    value: function validateText(text) {\n      if (!text) {\n        text = \'<speak></speak>\';\n      } else {\n        text = text.replace(/(^\\s*<\\s*speak\\s*)>\\s*|(^\\s*)/, \'<speak>\').replace(/(\\s*<\\s*\\/\\s*speak\\s*>\\s*$|\\s*$)/, \'</speak>\');\n      }\n\n      return text;\n    }\n    /**\n     * Parse an input string and insert SSML marks based on\n     * word matches in a map.\n     *\n     * @private\n     *\n     * @param {string} text - Input string.\n     * @param {Array.<number>} [indices = []] - An array of indices in the text input\n     * where random marks should be inserted.\n     * @param {Array.<string>} [marks = []] - An array of mark strings to choose\n     * from when inserting random marks.\n     *\n     * @returns {string} - Updated input string.\n     */\n\n  }, {\n    key: "_insertRandomMarksAt",\n    value: function _insertRandomMarksAt(text) {\n      var indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var marks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      if (!marks || marks.length === 0 || !indices || indices.length === 0) {\n        return text;\n      }\n\n      var offset = 0;\n      indices.forEach(function (index) {\n        var randomMark = "<mark name=\'".concat(marks[core_Utils.getRandomInt(0, marks.length)], "\'/>");\n        text = [text.slice(0, index + offset), randomMark, text.slice(index + offset)].join(\'\');\n        offset += randomMark.length;\n      });\n      return text;\n    }\n    /**\n     * Parses a string of text and returns an array containing the indices\n     * of the last character in a sentence that is not in the following list:\n     *  (\'.\', \'?\', \'!\')\n     *\n     * @private\n     *\n     * @param {string} text - Text to process for end of sentence\n     * indices.\n     *\n     * @returns {Array.<number>} - Array of end of sentence indices.\n     */\n\n  }, {\n    key: "_getSentenceEnds",\n    value: function _getSentenceEnds(text) {\n      var sentenceRegex = /[^.!?]+[.!?]+/g;\n      var endSentenceRegex = /[.!?]+/;\n      var result = sentenceRegex.exec(text);\n      var sentenceEnds = [];\n\n      while (result !== null) {\n        // find the last non-punctuation character\n        var punctResult = endSentenceRegex.exec(result[0]);\n        sentenceEnds.push(result.index + result[0].length - punctResult[0].length);\n        result = sentenceRegex.exec(text);\n      }\n\n      return sentenceEnds;\n    }\n    /**\n     * Parse an input string and insert SSML marks based on\n     * word matches in a map.\n     *\n     * @private\n     *\n     * @param {string} text - Input string.\n     * @param {Map} map - Mapping of words to mark values that\n     * will be inserted as the value for a mark\'s \'name\' attribute.\n     * @param {Array} duplicatesToCheck - A list of mark values to check for duplicate against the first word\n     *\n     * @returns {string} - Updated input string.\n     */\n\n  }, {\n    key: "_insertMarks",\n    value: function _insertMarks(text, map, duplicatesToCheck) {\n      if (text === \'\') return text;\n      var wordRegex = /\\w+|\\s+|[^\\s\\w]+/g;\n      var lowerCaseWord;\n      var checkDuplicate = true;\n      var markedWords = text.match(wordRegex).map(function (word) {\n        lowerCaseWord = word.toLowerCase();\n\n        if (map.has(lowerCaseWord)) {\n          var marks = map.get(lowerCaseWord).map(function (mark) {\n            if (checkDuplicate) {\n              checkDuplicate = false;\n              return duplicatesToCheck.includes(mark) ? \'\' : "<mark name=\'".concat(mark, "\'/>");\n            } else {\n              return "<mark name=\'".concat(mark, "\'/>");\n            }\n          });\n          return "".concat(marks.join(\'\')).concat(word);\n        } else {\n          checkDuplicate = false;\n          return word;\n        }\n      });\n      var existingMarks = duplicatesToCheck.map(function (mark) {\n        return "<mark name=\'".concat(mark, "\'/>");\n      });\n      return "".concat(existingMarks.join(\'\')).concat(markedWords.join(\'\'));\n    }\n    /**\n     * Processes an input object for mapping an array\n     * of words to specific mark keys. Converts the input\n     * map into a Map with a more efficient format for\n     * performing mark injection.\n     *\n     * @private\n     *\n     * @param {object} map - Input object that maps mark keys\n     * to arrays of words.\n     *\n     * @returns {Map} - Map for internal use.\n     */\n\n  }, {\n    key: "_processInputMap",\n    value: function _processInputMap(map) {\n      var internalMap = new Map();\n      var list = [];\n      Object.entries(map).forEach(function (_ref) {\n        var _ref2 = TextToSpeechUtils_slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        if (!Array.isArray(value)) {\n          throw new Error("Cannot generate SSML marks from map \\"".concat(map, "\\" because value for key \'").concat(key, "\' is not an array."));\n        }\n\n        value.forEach(function (word) {\n          var lowerCaseWord = word.toLowerCase();\n          list = internalMap.get(lowerCaseWord);\n\n          if (list !== undefined && !list.includes(key)) {\n            internalMap.set(lowerCaseWord, [].concat(TextToSpeechUtils_toConsumableArray(list), [key]));\n          } else {\n            internalMap.set(lowerCaseWord, [key]);\n          }\n        });\n      });\n      return internalMap;\n    }\n  }]);\n\n  return TextToSpeechUtils;\n}();\n\n/* harmony default export */ const awspack_TextToSpeechUtils = (TextToSpeechUtils);\n;// CONCATENATED MODULE: ./src/core/awspack/AbstractSpeech.js\nfunction AbstractSpeech_toConsumableArray(arr) { return AbstractSpeech_arrayWithoutHoles(arr) || AbstractSpeech_iterableToArray(arr) || AbstractSpeech_unsupportedIterableToArray(arr) || AbstractSpeech_nonIterableSpread(); }\n\nfunction AbstractSpeech_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction AbstractSpeech_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AbstractSpeech_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AbstractSpeech_arrayLikeToArray(o, minLen); }\n\nfunction AbstractSpeech_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction AbstractSpeech_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AbstractSpeech_arrayLikeToArray(arr); }\n\nfunction AbstractSpeech_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction AbstractSpeech_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AbstractSpeech_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AbstractSpeech_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractSpeech_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractSpeech_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * Class that can play back audio generated by AWS Polly and synchronized emit\n * speechmark messages.\n *\n * @abstract\n */\n\nvar AbstractSpeech = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   *\n   * @param {core/TextToSpeechFeature} speaker - The feature that owns the Speech and\n   * will emit speechmark messages.\n   * @param {string} text - The text of the speech.\n   * @param {Array.<Object>} [speechmarks=[]] - An array of speechmark objects representing\n   * the text and timing of the speech.\n   */\n  function AbstractSpeech(speaker, text) {\n    var speechmarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    AbstractSpeech_classCallCheck(this, AbstractSpeech);\n\n    this._speaker = speaker;\n    this._text = text;\n    this._speechmarks = speechmarks;\n    this._speechmarkOffset = 0;\n\n    this._reset();\n  }\n  /**\n   * Reset tracking properties.\n   *\n   * @private\n   *\n   * @param {number} [currentTime=0] - Time to use for _startTime.\n   */\n\n\n  AbstractSpeech_createClass(AbstractSpeech, [{\n    key: "_reset",\n    value: function _reset() {\n      var currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this._startTime = currentTime;\n      this._localTime = 0;\n      this._pauseTime = 0;\n      this._playing = false;\n      this._markIter = this._speechmarks.values();\n\n      var _this$_markIter$next = this._markIter.next(),\n          value = _this$_markIter$next.value,\n          done = _this$_markIter$next.done;\n\n      this._currentMark = value;\n      this._endTime = this._speechmarks.length ? this._speechmarks[this._speechmarks.length - 1].time : 0;\n      this._done = done;\n      this._promise = null;\n    }\n    /**\n     * Create a new promise that will stop playback and emit messages for this speech.\n     *\n     * @param {Function=} onFinish - Funciton to execute once the speech stops.\n     * @param {onError=} onError - Function to execute if the speech encounters an\n     * error.\n     * @param {Function=} onInterrupt - Function to execute if the speech is canceled.\n     *\n     * @returns {Deferred}\n     *\n     * @private\n     */\n\n  }, {\n    key: "_createPromise",\n    value: function _createPromise(onFinish, onError, onInterrupt) {\n      var _this = this;\n\n      var onResolve = function onResolve(value) {\n        _this._playing = false;\n\n        _this._speaker.emit(_this._speaker.constructor.EVENTS.stop, _this);\n\n        _this._speaker.constructor.emit(_this._speaker.constructor.EVENTS.stop, _this);\n\n        if (typeof onFinish === \'function\') {\n          onFinish(value);\n        }\n      };\n\n      var onReject = function onReject(e) {\n        _this._playing = false;\n\n        _this._speaker.emit(_this._speaker.constructor.EVENTS.stop, _this);\n\n        _this._speaker.constructor.emit(_this._speaker.constructor.EVENTS.stop, _this);\n\n        console.error("".concat(_this.constructor.name, " encountered an unexpected error: ").concat(e));\n\n        if (typeof onError === \'function\') {\n          onError(e);\n        }\n      };\n\n      var onCancel = function onCancel(value) {\n        _this._playing = false;\n\n        _this._speaker.emit(_this._speaker.constructor.EVENTS.interrupt, _this);\n\n        _this._speaker.constructor.emit(_this._speaker.constructor.EVENTS.interrupt, _this);\n\n        if (typeof onInterrupt === \'function\') {\n          onInterrupt(value);\n        }\n      };\n\n      this._promise = new core_Deferred(undefined, onResolve, onReject, onCancel);\n      return this._promise;\n    }\n    /**\n     * Return whether or not the speech has reached it\'s end.\n     *\n     * @private\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "_checkFinished",\n    value: function _checkFinished() {\n      return this._done && this._localTime >= this._endTime;\n    }\n    /**\n     * Gets the playback state of the audio.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "playing",\n    get: function get() {\n      return this._playing;\n    }\n    /**\n     * Gets the text of the speech.\n     *\n     * @readonly\n     * @type {string}\n     */\n\n  }, {\n    key: "text",\n    get: function get() {\n      return this._text;\n    }\n    /**\n     * Gets a shallow copy of the speechmarks array for the speech.\n     *\n     * @readonly\n     * @type {Array.<Object>}\n     */\n\n  }, {\n    key: "speechmarks",\n    get: function get() {\n      return AbstractSpeech_toConsumableArray(this._speechmarks);\n    }\n    /**\n     * Gets and sets the number of seconds to offset speechmark emission.\n     * @type {number}\n     */\n\n  }, {\n    key: "speechmarkOffset",\n    get: function get() {\n      return this._speechmarkOffset / 1000;\n    },\n    set: function set(offset) {\n      this._speechmarkOffset = offset * 1000; // Store as milliseconds\n    }\n    /**\n     * Emit speechmark messages as they are encountered in sync with audio.\n     *\n     * @param {number} currentTime - Current global time when update was called.\n     */\n\n  }, {\n    key: "update",\n    value: function update(currentTime) {\n      if (!this._playing) {\n        return;\n      } // Update local audio time\n\n\n      this._localTime = currentTime - this._startTime;\n\n      if (!this._done) {\n        // Emit speechmark messages for marks up to the current time\n        while (!this._done && this._currentMark.time + this._speechmarkOffset <= this._localTime) {\n          this._speaker.emit(this._speaker.constructor.EVENTS[this._currentMark.type], {\n            speech: this,\n            mark: this._currentMark\n          });\n\n          var _this$_markIter$next2 = this._markIter.next(),\n              value = _this$_markIter$next2.value,\n              done = _this$_markIter$next2.done;\n\n          this._currentMark = value;\n          this._done = done;\n        }\n      } // End playback\n\n\n      if (this._checkFinished()) {\n        this.stop();\n\n        this._reset();\n      }\n    }\n    /**\n     * Play the speech from the beginning.\n     *\n     * @param {number} currentTime - Current global time when play was called.\n     * @param {Function=} onFinish - Optional function to execute once the speech\n     * promise resolves.\n     * @param {Function=} onError - Optional function to execute if the speech\n     * encounters and error during playback.\n     * @param {Function=} onInterrupt - Optional function to execute if the speech\n     * is canceled.\n     *\n     * @returns {Deferred} Resolves once the speech reaches the end of playback.\n     */\n\n  }, {\n    key: "play",\n    value: function play(currentTime, onFinish, onError, onInterrupt) {\n      this._reset(currentTime);\n\n      this._playing = true;\n\n      this._speaker.emit(this._speaker.constructor.EVENTS.play, this);\n\n      this._speaker.constructor.emit(this._speaker.constructor.EVENTS.play, this);\n\n      return this._createPromise(onFinish, onError, onInterrupt);\n    }\n    /**\n     * Pause the speech at the current time.\n     *\n     * @param {number} currentTime - Current global time when pause was called.\n     */\n\n  }, {\n    key: "pause",\n    value: function pause(currentTime) {\n      this._playing = false;\n      this._pauseTime = currentTime;\n\n      this._speaker.emit(this._speaker.constructor.EVENTS.pause, this);\n\n      this._speaker.constructor.emit(this._speaker.constructor.EVENTS.pause, this);\n    }\n    /**\n     * Resume the speech at the current time.\n     *\n     * @param {number} currentTime - Current global time when resume was called.\n     * @param {Function=} onFinish - Optional function to execute once the speech\n     * promise resolves.\n     * @param {Function=} onError - Optional function to execute if the speech\n     * encounters and error during playback.\n     * @param {Function=} onInterrupt - Optional function to execute if the speech\n     * is canceled.\n     *\n     * @returns {Deferred} Resolves once the speech reaches the end of playback.\n     */\n\n  }, {\n    key: "resume",\n    value: function resume(currentTime, onFinish, onError, onInterrupt) {\n      // Play from the beginning if the speech hasn\'t played yet\n      if (!this._promise) {\n        this._reset(currentTime);\n\n        this._createPromise(onFinish, onError, onInterrupt);\n      }\n\n      this._playing = true;\n      this._startTime += currentTime - this._pauseTime;\n\n      this._speaker.emit(this._speaker.constructor.EVENTS.resume, this);\n\n      this._speaker.constructor.emit(this._speaker.constructor.EVENTS.resume, this);\n\n      return this._promise;\n    }\n    /**\n     * Cancels playback of the speech at the current time. Cancel the speech promise.\n     */\n\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      if (this._promise) {\n        this._promise.cancel();\n\n        this._promise = null;\n      }\n\n      this._playing = false;\n    }\n    /**\n     * Stop the speech and reset time to the beginning. Resolve the speech promise.\n     */\n\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this._promise) {\n        this._promise.resolve();\n\n        this._promise = null;\n      }\n\n      this._playing = false;\n    }\n  }]);\n\n  return AbstractSpeech;\n}();\n\n/* harmony default export */ const awspack_AbstractSpeech = (AbstractSpeech);\n;// CONCATENATED MODULE: ./src/core/awspack/Speech.js\nfunction Speech_typeof(obj) { "@babel/helpers - typeof"; return Speech_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Speech_typeof(obj); }\n\nfunction Speech_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Speech_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Speech_createClass(Constructor, protoProps, staticProps) { if (protoProps) Speech_defineProperties(Constructor.prototype, protoProps); if (staticProps) Speech_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction Speech_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Speech_get = Reflect.get; } else { Speech_get = function _get(target, property, receiver) { var base = Speech_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Speech_get.apply(this, arguments); }\n\nfunction Speech_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Speech_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Speech_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Speech_setPrototypeOf(subClass, superClass); }\n\nfunction Speech_setPrototypeOf(o, p) { Speech_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Speech_setPrototypeOf(o, p); }\n\nfunction Speech_createSuper(Derived) { var hasNativeReflectConstruct = Speech_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Speech_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Speech_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Speech_possibleConstructorReturn(this, result); }; }\n\nfunction Speech_possibleConstructorReturn(self, call) { if (call && (Speech_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Speech_assertThisInitialized(self); }\n\nfunction Speech_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Speech_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Speech_getPrototypeOf(o) { Speech_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Speech_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * The built-in class for asynchronous Promises.\n * @external Audio\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio\n */\n\n/**\n * @extends AbstractSpeech\n * @alias core/Speech\n */\n\nvar Speech = /*#__PURE__*/function (_AbstractSpeech) {\n  Speech_inherits(Speech, _AbstractSpeech);\n\n  var _super = Speech_createSuper(Speech);\n\n  /**\n   * @constructor\n   *\n   * @param {TextToSpeech} speaker - The owner of the Speech that will emit speechmark\n   * messages.\n   * @param {string} text - The text of the speech.\n   * @param {Array.<Object>} [speechmarks=[]] - An array of speechmark objects representing\n   * the text and timing of the speech.\n   * @param {Object} audioConfig - Object containing audio and url.\n   * @param {external:Audio} audioConfig.audio - Playable audio object.\n   */\n  function Speech(speaker, text) {\n    var _this;\n\n    var speechmarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var audioConfig = arguments.length > 3 ? arguments[3] : undefined;\n\n    Speech_classCallCheck(this, Speech);\n\n    _this = _super.call(this, speaker, text, speechmarks);\n    _this._audio = audioConfig.audio; // Keep track of whether the audio has finished playing through\n\n    _this._audio.onended = function () {\n      _this._audioFinished = true;\n    };\n\n    _this._audioFinished = true;\n    return _this;\n  }\n\n  Speech_createClass(Speech, [{\n    key: "_checkFinished",\n    value: function _checkFinished() {\n      return this._audioFinished && Speech_get(Speech_getPrototypeOf(Speech.prototype), "_checkFinished", this).call(this);\n    }\n    /**\n     * Gets the playable audio for the speech.\n     *\n     * @readonly\n     * @type {external:Audio}\n     */\n\n  }, {\n    key: "audio",\n    get: function get() {\n      return this._audio;\n    }\n    /**\n     * Gets the audio volume for the speech.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "volume",\n    get: function get() {\n      return this._audio.volume;\n    }\n    /**\n     * Sets the audio volume for the speech.\n     */\n    ,\n    set: function set(volume) {\n      this._audio.volume = volume;\n    }\n    /**\n     * Set the audio\'s current local time and play it.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_playAudio",\n    value: function _playAudio() {\n      var _this2 = this;\n\n      if (this._speechmarkOffset < 0) {\n        this._audio.currentTime = this._speechmarkOffset;\n        setTimeout(function () {\n          if (_this2._playing) {\n            _this2._audio.currentTime = (_this2._localTime + _this2._speechmarkOffset) / 1000;\n\n            _this2._audio.play();\n          }\n        }, -this._speechmarkOffset);\n      } else {\n        this._audio.currentTime = 0;\n\n        this._audio.play();\n      }\n    }\n    /**\n     * Pause the audio once it is playable.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_pauseAudio",\n    value: function _pauseAudio() {\n      var _this3 = this;\n\n      this._audio.play().then(function () {\n        if (!_this3._playing) {\n          _this3._audio.pause();\n        }\n      });\n    }\n  }, {\n    key: "play",\n    value: function play(currentTime, onFinish, onError, onInterrupt) {\n      this._audioFinished = false;\n\n      this._playAudio();\n\n      return Speech_get(Speech_getPrototypeOf(Speech.prototype), "play", this).call(this, currentTime, onFinish, onError, onInterrupt);\n    }\n  }, {\n    key: "pause",\n    value: function pause(currentTime) {\n      this._pauseAudio();\n\n      Speech_get(Speech_getPrototypeOf(Speech.prototype), "pause", this).call(this, currentTime);\n    }\n  }, {\n    key: "resume",\n    value: function resume(currentTime, onFinish, onError, onInterrupt) {\n      this._audioFinished = false;\n\n      this._audio.play();\n\n      return Speech_get(Speech_getPrototypeOf(Speech.prototype), "resume", this).call(this, currentTime, onFinish, onError, onInterrupt);\n    }\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      this._pauseAudio();\n\n      Speech_get(Speech_getPrototypeOf(Speech.prototype), "cancel", this).call(this);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      this._pauseAudio();\n\n      this._audio.currentTime = 0;\n\n      Speech_get(Speech_getPrototypeOf(Speech.prototype), "stop", this).call(this);\n    }\n  }]);\n\n  return Speech;\n}(awspack_AbstractSpeech);\n\n/* harmony default export */ const awspack_Speech = (Speech);\n;// CONCATENATED MODULE: ./src/core/awspack/AbstractTextToSpeechFeature.js\nfunction AbstractTextToSpeechFeature_typeof(obj) { "@babel/helpers - typeof"; return AbstractTextToSpeechFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AbstractTextToSpeechFeature_typeof(obj); }\n\nfunction AbstractTextToSpeechFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction AbstractTextToSpeechFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AbstractTextToSpeechFeature_ownKeys(Object(source), !0).forEach(function (key) { AbstractTextToSpeechFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AbstractTextToSpeechFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction AbstractTextToSpeechFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction AbstractTextToSpeechFeature_slicedToArray(arr, i) { return AbstractTextToSpeechFeature_arrayWithHoles(arr) || AbstractTextToSpeechFeature_iterableToArrayLimit(arr, i) || AbstractTextToSpeechFeature_unsupportedIterableToArray(arr, i) || AbstractTextToSpeechFeature_nonIterableRest(); }\n\nfunction AbstractTextToSpeechFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction AbstractTextToSpeechFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction AbstractTextToSpeechFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction AbstractTextToSpeechFeature_toConsumableArray(arr) { return AbstractTextToSpeechFeature_arrayWithoutHoles(arr) || AbstractTextToSpeechFeature_iterableToArray(arr) || AbstractTextToSpeechFeature_unsupportedIterableToArray(arr) || AbstractTextToSpeechFeature_nonIterableSpread(); }\n\nfunction AbstractTextToSpeechFeature_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction AbstractTextToSpeechFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AbstractTextToSpeechFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AbstractTextToSpeechFeature_arrayLikeToArray(o, minLen); }\n\nfunction AbstractTextToSpeechFeature_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction AbstractTextToSpeechFeature_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AbstractTextToSpeechFeature_arrayLikeToArray(arr); }\n\nfunction AbstractTextToSpeechFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction AbstractTextToSpeechFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AbstractTextToSpeechFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AbstractTextToSpeechFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractTextToSpeechFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractTextToSpeechFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction AbstractTextToSpeechFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AbstractTextToSpeechFeature_get = Reflect.get; } else { AbstractTextToSpeechFeature_get = function _get(target, property, receiver) { var base = AbstractTextToSpeechFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AbstractTextToSpeechFeature_get.apply(this, arguments); }\n\nfunction AbstractTextToSpeechFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AbstractTextToSpeechFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction AbstractTextToSpeechFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AbstractTextToSpeechFeature_setPrototypeOf(subClass, superClass); }\n\nfunction AbstractTextToSpeechFeature_setPrototypeOf(o, p) { AbstractTextToSpeechFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AbstractTextToSpeechFeature_setPrototypeOf(o, p); }\n\nfunction AbstractTextToSpeechFeature_createSuper(Derived) { var hasNativeReflectConstruct = AbstractTextToSpeechFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AbstractTextToSpeechFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AbstractTextToSpeechFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AbstractTextToSpeechFeature_possibleConstructorReturn(this, result); }; }\n\nfunction AbstractTextToSpeechFeature_possibleConstructorReturn(self, call) { if (call && (AbstractTextToSpeechFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AbstractTextToSpeechFeature_assertThisInitialized(self); }\n\nfunction AbstractTextToSpeechFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AbstractTextToSpeechFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AbstractTextToSpeechFeature_getPrototypeOf(o) { AbstractTextToSpeechFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AbstractTextToSpeechFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n\n\n/**\n * The Amazon Polly service object.\n * @external Polly\n * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly.html\n */\n\n/**\n * The presigner object that can be used to generate presigned urls for the Polly service.\n * @external Presigner\n * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly/Presigner.html\n */\n// Available options for Polly\n\nvar engines = [\'standard\', \'neural\'];\nvar audioFormats = [\'mp3\', \'ogg_vorbis\', \'pcm\'];\nvar speechmarkTypes = [\'sentence\', \'ssml\', \'viseme\', \'word\'];\nvar sampleRates = {\n  mp3: {\n    rates: [\'8000\', \'16000\', \'22050\', \'24000\'],\n    defaults: {\n      standard: \'2050\',\n      neural: \'2400\'\n    }\n  },\n  pcm: {\n    rates: [\'8000\', \'16000\'],\n    defaults: {\n      standard: \'1600\',\n      neural: \'1600\'\n    }\n  }\n};\nsampleRates.ogg_vorbis = sampleRates.mp3;\nvar awsVersion;\n/**\n * Base class for turning text input into playable audio. There should be one instance\n * per speaker, each instance can play only one piece of text at a time.\n *\n * @extends AbstractHostFeature\n * @abstract\n *\n * @property {(number|undefined)} AWS_VERSION - Gets the version of AWS SDK being\n * used. Will be undefined until [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\n * has been successfully executed.\n * @property {string} [POLLY_MIN_NEURAL_VERSION=\'2.503\'] - Gets the minimum version\n * of the AWS SDK that is necessary to use neural voices with AWS Polly.\n * @property {Object} POLLY_DEFAULTS - Default values to use with calls to {@link external:Polly}.\n * @property {string} [POLLY_DEFAULTS.Engine=\'standard\']\n * @property {Array.<string>} [POLLY_DEFAULTS.LexiconNames=[]]\n * @property {string} [POLLY_DEFAULTS.OutputFormat=\'mp3\']\n * @property {string} [POLLY_DEFAULTS.SampleRate=\'22050\']\n * @property {string} [POLLY_DEFAULTS.Text=\'\']\n * @property {string} [POLLY_DEFAULTS.TextType=\'ssml\']\n * @property {string} [POLLY_DEFAULTS.VoiceId=\'Amy\']\n * @property {string} [POLLY_DEFAULTS.LanguageCode=\'en-GB\']\n * @property {string} [POLLY_DEFAULTS.LanguageName=\'British English\']\n * @property {Array.<string>} [POLLY_VOICES=[]] - An array of voices available in\n * Polly. Will be empty until [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\n * has been successfully executed. See [Polly Documentation]{@link https://docs.aws.amazon.com/polly/latest/dg/voicelist.html}\n * for a full list of available voices.\n * @property {Object} [POLLY_LANGUAGES={}] - An object that maps language names\n * to language codes that are available in Polly. Will be empty until\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\n * has been successfully executed. See [Polly Documentation]{@link https://docs.aws.amazon.com/polly/latest/dg/SupportedLanguage.html}\n * for a full list of available languages and corresponding codes.\n * @property {Object} [POLLY_LANGUAGE_CODES={}] - An object that maps language codes\n * to language names that are available in Polly. Will be empty until\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\n * has been successfully executed. See [Polly Documentation]{@link https://docs.aws.amazon.com/polly/latest/dg/SupportedLanguage.html}\n * for a full list of available languages and corresponding codes.\n * @property {Object} EVENTS - Built-in messages that the feature emits. When the\n * feature is added to a {@link core/HostObject}, event names will be prefixed by the\n * name of the feature class + \'.\'.\n * @property {string} [EVENTS.ready=onReadyEvent] - Message that is emitted after\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService} has been\n * successfully executed.\n * @property {string} [EVENTS.play=onPlayEvent] - Message that is emitted after\n * each call to [play]{@link AbstractTextToSpeechFeature#play}. The speech that was played\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.pause=onPauseEvent] - Message that is emitted after\n * each call to [pause]{@link AbstractTextToSpeechFeature#pause}. The speech that was paused\n * is supplied as an argument to listener functions.\n * @property {string} [EVENTS.resume=onResumeEvent] - Message that is emitted after\n * each call to [resume]{@link AbstractTextToSpeechFeature#resume}. The speech that was\n * resumed is supplied as an argument to listener functions.\n * @property {string} [EVENTS.interrupt=onInterruptEvent] - Message that is emitted\n * if there is a current speech in progress and [play]{@link AbstractTextToSpeechFeature#play}\n * or [resume]{@link AbstractTextToSpeechFeature#resume} are executed for a new speech.\n * The speech that was interrupted is supplied as an argument to listener functions.\n * @property {string} [EVENTS.stop=onStopEvent] - Message that is emitted after\n * each call to [stop]{@link AbstractTextToSpeechFeature#stop} and when a speech reaches\n * the end of playback. The speech that was stopped is supplied as an argument\n * to listener functions.\n * @property {string} [EVENTS.sentence=onSentenceEvent] - Message that is emitted\n * each time a sentence speechmark is encountered whose timestamp matches up with\n * the speech audio\'s current time. The sentence speechmark object is supplied as\n * an argument to listener functions.\n * @property {string} [EVENTS.word=onWordEvent] - Message that is emitted\n * each time a word speechmark is encountered whose timestamp matches up with\n * the speech audio\'s current time. The word speechmark object is supplied as\n * an argument to listener functions.\n * @property {string} [EVENTS.viseme=onVisemeEvent] - Message that is emitted\n * each time a viseme speechmark is encountered whose timestamp matches up with\n * the speech audio\'s current time. The viseme speechmark object is supplied as\n * an argument to listener functions.\n * @property {string} [EVENTS.ssml=onSsmlEvent] - Message that is emitted\n * each time a ssml speechmark is encountered whose timestamp matches up with\n * the speech audio\'s current time. The ssml speechmark object is supplied as\n * an argument to listener functions.\n * @property {Object} SERVICES - AWS services that are necessary for the feature\n * to function.\n * @property {external:Polly} SERVICES.polly - The Polly service that is used\n * to synthesize speechmarks. Will be undefined until [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\n * has been successfully executed\n * @property {external:Presigner} SERVICES.presigner - The Polly Presigner\n * object that is used to synthesize speech audio. Will be undefined until\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\n * has been successfully executed.\n */\n\nvar AbstractTextToSpeechFeature = /*#__PURE__*/function (_AbstractHostFeature) {\n  AbstractTextToSpeechFeature_inherits(AbstractTextToSpeechFeature, _AbstractHostFeature);\n\n  var _super = AbstractTextToSpeechFeature_createSuper(AbstractTextToSpeechFeature);\n\n  /**\n   * @constructor\n   *\n   * @param {core/HostObject} host - Host object managing the feature.\n   * @param {Object=} options - Options that will be sent to Polly for each speech.\n   * @param {string=} options.voice - The name of the Polly voice to use for all speech.\n   * @param {string=} options.engine - The name of the Polly engine to use for all speech.\n   * @param {string=} options.language - The name of the language to use for all speech.\n   * @param {audioFormat} [options.audioFormat=\'mp3\'] - The format to use for generated\n   * audio for all speeches.\n   * @param {string=} options.sampleRate - The sample rate for audio files for all\n   * speeches.\n   * @param {number} [options.speechmarkOffset=0] - Amount of time in seconds to\n   * offset speechmark event emission from the audio.\n   * @param {number} [options.minEndMarkDuration=.05] - The minimum amount of time\n   * in seconds that the last speechmark of each type in a speech can have its\n   * duration property set to.\n   * @param {number} [options.volume=1] - The default volume to play speech audio\n   * with.\n   * @param {boolean} [options.isGlobal=false] - Whether the audio source should default\n   * to global regardless of whether or not it is attached to an object.\n   */\n  function AbstractTextToSpeechFeature(host) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      voice: undefined,\n      engine: undefined,\n      language: undefined,\n      audioFormat: \'mp3\',\n      sampleRate: undefined,\n      speechmarkOffset: 0,\n      minEndMarkDuration: 0.05,\n      volume: 1,\n      isGlobal: false\n    };\n\n    AbstractTextToSpeechFeature_classCallCheck(this, AbstractTextToSpeechFeature);\n\n    _this = _super.call(this, host);\n    _this._speechCache = {};\n    _this._currentSpeech = null;\n    _this._currentPromise = null;\n    _this._isValidated = false;\n    _this.speechmarkOffset = Number.isNaN(Number(options.speechmarkOffset)) ? 0 : Number(options.speechmarkOffset);\n    _this.minEndMarkDuration = Number.isNaN(Number(options.minEndMarkDuration)) ? 0 : Number(options.minEndMarkDuration);\n    _this.volume = Number.isNaN(Number(options.volume)) ? 1 : Number(options.volume);\n    _this._isGlobal = options.isGlobal || false;\n    _this._promises = {\n      volume: core_Deferred.resolve()\n    };\n    _this._volumePaused = false; // Set default options for each speech\n\n    _this._voice = options.voice || _this.constructor.POLLY_DEFAULTS.VoiceId;\n    _this._language = options.language || _this.constructor.POLLY_DEFAULTS.LanguageName;\n    _this._engine = engines.includes(options.engine) ? options.engine : _this.constructor.POLLY_DEFAULTS.Engine;\n    _this._audioFormat = audioFormats.includes(options.audioFormat) ? options.audioFormat : _this.constructor.POLLY_DEFAULTS.OutputFormat;\n    _this._sampleRate = sampleRates[_this._audioFormat].rates.includes(options.sampleRate) ? options.sampleRate : _this.constructor.POLLY_DEFAULTS.SampleRate;\n    return _this;\n  }\n  /**\n   * Store Polly, Presigner and AWS SDK Version for use across all instances.\n   *\n   * @param {external:Polly} polly - Polly instance to use to generate speechmarks.\n   * @param {external:Presigner} presigner - Presigner instance to use to generate\n   * audio URLs.\n   * @param {string} version - Version of the AWS SDK to use to validate voice options.\n   */\n\n\n  AbstractTextToSpeechFeature_createClass(AbstractTextToSpeechFeature, [{\n    key: "currentSpeech",\n    get:\n    /**\n     * Gets the text of the currently playing speech.\n     *\n     * @readonly\n     * @type {string}\n     */\n    function get() {\n      if (this._currentSpeech) {\n        return this._currentSpeech.text;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Gets and sets the number of seconds to offset speechmark emission.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "speechmarkOffset",\n    get: function get() {\n      return this._speechmarkOffset;\n    },\n    set: function set(offset) {\n      this._speechmarkOffset = offset;\n\n      if (this._currentSpeech) {\n        this._currentSpeech.speechmarkOffset = offset;\n      }\n    }\n    /**\n     * Gets and sets the The minimum amount of time in seconds that the last\n     * speechmark of each type in a speech can have its duration property set to.\n     *\n     * @type number\n     */\n\n  }, {\n    key: "minEndMarkDuration",\n    get: function get() {\n      return this._minEndMarkDuration / 1000;\n    },\n    set: function set(duration) {\n      this._minEndMarkDuration = duration * 1000;\n    }\n    /**\n     * Appends the Sumerian Hosts custom user-agent to a string if it is not\n     * already present.\n     *\n     * @private\n     *\n     * @param {string} currentUserAgent - String to append to if needed.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "_validateEngine",\n    value:\n    /**\n     * Checks if a given engine type is compatible with the AWS SDK version. If it\n     * is, return the original value. Otherwise return a default.\n     *\n     * @private\n     *\n     * @param {string} engine - The type of Polly voice engine to validate.\n     *\n     * @returns {string}\n     */\n    function _validateEngine(engine) {\n      // Default to the standard engine if neural is not available for this version\n      if (engine === undefined || this.constructor.AWS_VERSION < this.constructor.POLLY_MIN_NEURAL_VERSION) {\n        engine = this.constructor.POLLY_DEFAULTS.Engine;\n      }\n\n      return engine;\n    }\n    /**\n     * Checks if a given audio format type is compatible with Polly. If it is, return\n     * the original value. Otherwise return a default.\n     *\n     * @private\n     *\n     * @param {string} engine - The type of Polly voice engine to validate.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "_validateFormat",\n    value: function _validateFormat(format) {\n      if (format === undefined || !audioFormats.includes(format)) {\n        format = this.constructor.POLLY_DEFAULTS.OutputFormat;\n      }\n\n      return format;\n    }\n    /**\n     * Checks if a given audio sampling rate is compatible with the current audio\n     * format. If it is, return the original value. Otherwise return a default.\n     *\n     * @private\n     *\n     * @param {string} engine - The type of Polly voice engine to validate.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "_validateRate",\n    value: function _validateRate(rate) {\n      // Use default if specified sample rate is not valid for the audio format\n      if (rate === undefined || !sampleRates[this._audioFormat].rates.includes(rate)) {\n        rate = sampleRates[this._audioFormat].defaults[this._engine];\n      }\n\n      return rate;\n    }\n    /**\n     * Checks if a given Polly voice id is compatible with the current Polly engine.\n     * If it is, return the original value. Otherwise return a default.\n     *\n     * @private\n     *\n     * @param {string} engine - The type of Polly voice engine to validate.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "_validateVoice",\n    value: function _validateVoice(voiceId) {\n      var voice = this.constructor.POLLY_VOICES.find(function (v) {\n        return v.Id === voiceId;\n      }); // Use the default voice if the voice isn\'t supported by the engine\n\n      if (voice === undefined || !voice.SupportedEngines.includes(this._engine)) {\n        voiceId = this.constructor.POLLY_DEFAULTS.VoiceId;\n      }\n\n      return voiceId;\n    }\n    /**\n     * Checks if a given Polly language is compatible with the current Polly voice.\n     * If it is, return the original value. Otherwise return a default.\n     *\n     * @private\n     *\n     * @param {string} engine - The type of Polly voice engine to validate.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: "_validateLanguage",\n    value: function _validateLanguage(language) {\n      var _this2 = this;\n\n      var voice = this.constructor.POLLY_VOICES.find(function (v) {\n        return v.Id === _this2._voice;\n      });\n      var languageCode = this.constructor.POLLY_LANGUAGES[language]; // Find the languages available for the current voice\n\n      var availableCodes = [voice.LanguageCode];\n\n      if (voice.AdditionalLanguageCodes) {\n        availableCodes.push.apply(availableCodes, AbstractTextToSpeechFeature_toConsumableArray(voice.AdditionalLanguageCodes));\n      } // If the current voice doesn\'t support the language, use its default\n\n\n      if (!availableCodes.includes(languageCode)) {\n        language = this.constructor.POLLY_LANGUAGE_CODES[voice.LanguageCode];\n      }\n\n      return language;\n    }\n    /**\n     * Validate the current Polly options to make sure they are compatible with each\n     * other.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_validate",\n    value: function _validate() {\n      // Validate speech parameters\n      this._engine = this._validateEngine(this._engine);\n      this._audioFormat = this._validateFormat(this._audioFormat);\n      this._sampleRate = this._validateRate(this._sampleRate);\n      this._voice = this._validateVoice(this._voice);\n      this._language = this._validateLanguage(this._language);\n      this._isValidated = true;\n    }\n    /**\n     * Return an object containing parameters compatible with Polly.synthesizeSpeech.\n     *\n     * @private\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: "_getConfig",\n    value: function _getConfig() {\n      // Make sure parameters have been validated\n      if (this.constructor.isReady && !this._isValidated) {\n        this._validate();\n      } // Create a config object compatible with Polly\n\n\n      return {\n        Engine: this._engine,\n        OutputFormat: this._audioFormat,\n        SampleRate: this._sampleRate,\n        VoiceId: this._voice,\n        LanguageCode: this.constructor.POLLY_LANGUAGES[this._language]\n      };\n    }\n    /**\n     * Update Polly parameters with options from a given config. All stored speeches\n     * will be updated to use the new parameters, unless the speech text is contained\n     * in the \'skipSpeeches\' parameter.\n     *\n     * @private\n     *\n     * @param {Object} config - Polly parameter options to overwrite.\n     * @param {Array.<string>} skipSpeeches - Text of any speeches that should not\n     * have parameters updated.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: "_updateConfig",\n    value: function _updateConfig(config) {\n      var _this3 = this;\n\n      var skipSpeeches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      var currentConfig = this._getConfig();\n\n      if (!config) {\n        return currentConfig;\n      }\n\n      this._isValidated = false;\n      var currentConfigStr = JSON.stringify(currentConfig); // Update options\n\n      if (config.Engine) {\n        this._engine = config.Engine;\n      }\n\n      if (config.audioFormat) {\n        this._audioFormat = config.audioFormat;\n      }\n\n      if (config.SampleRate) {\n        this._sampleRate = config.SampleRate;\n      }\n\n      if (config.VoiceId) {\n        this._voice = config.VoiceId;\n      }\n\n      if (config.Language) {\n        this._language = config.Language;\n      } // Validate the config\n\n\n      var validConfig = this._getConfig(); // Exit if nothing has changed\n\n\n      var configStr = JSON.stringify(validConfig);\n\n      if (currentConfigStr === configStr) {\n        this._isValidated = true;\n        return validConfig;\n      } // Update all cached configs\n\n\n      Object.entries(this._speechCache).forEach(function (_ref) {\n        var _ref2 = AbstractTextToSpeechFeature_slicedToArray(_ref, 2),\n            text = _ref2[0],\n            speech = _ref2[1];\n\n        // Check if this is a skipped speech\n        if (skipSpeeches.includes(text)) {\n          return;\n        }\n\n        var speechConfigStr = JSON.stringify(speech.config); // Update the speech with new parameters\n\n        if (speechConfigStr !== configStr) {\n          _this3._updateSpeech(text, validConfig);\n        }\n      });\n      return validConfig;\n    }\n    /**\n     * Update an existing speech, or add a new speech with new Polly parameters with\n     * options from a given config.\n     *\n     * @private\n     *\n     * @param {string} text - The text of the speech to update.\n     * @param {Object} config - Polly parameter options to update.\n     * @param {boolean} [force=false] - Whether to force the speech to be updated\n     * if no parameters have changes.\n     *\n     * @returns {AbstractSpeech}\n     */\n\n  }, {\n    key: "_updateSpeech",\n    value: function _updateSpeech(text, config) {\n      var _this4 = this;\n\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var speech = this._speechCache[text] || {}; // Exit if nothing has changed and force is false\n\n      if (!force && config !== undefined && speech.config && JSON.stringify(config) === JSON.stringify(speech.config)) {\n        return speech;\n      } // Create separate parameters for audio and speechmark generation\n\n\n      var audioParams = AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, config), {}, {\n        Text: text,\n        TextType: \'ssml\'\n      });\n\n      var speechmarkParams = AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, audioParams), {}, {\n        OutputFormat: \'json\',\n        SpeechMarkTypes: speechmarkTypes\n      }); // Generate audio and speechmarks\n\n\n      speech.config = config;\n      speech.promise = Promise.all([this._synthesizeSpeechmarks(speechmarkParams), this._synthesizeAudio(audioParams)]).then(function (results) {\n        return _this4._createSpeech.apply(_this4, [text].concat(AbstractTextToSpeechFeature_toConsumableArray(results)));\n      });\n      this._speechCache[text] = speech;\n      return speech;\n    }\n    /**\n     * Create a new Speech object for the speaker.\n     *\n     * @private\n     *\n     * @param {TextToSpeech} speaker - The TextToSpeech instance that will own the speech.\n     * @param {string} text - Text of the speech.\n     * @param {Object} speechmarks - Speechmarks for the speech.\n     * @param {Object} audioConfig - Audio for the speech.\n     *\n     * @returns {AbstractSpeech}\n     */\n\n  }, {\n    key: "_createSpeech",\n    value: function _createSpeech(text, speechmarks, audioConfig) {\n      return new awspack_AbstractSpeech(this, text, speechmarks, audioConfig);\n    }\n    /**\n     * Create presigned URL of speech audio for the given speech text.\n     *\n     * @private\n     *\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\n     *\n     * @returns {Deferred} Resolves with an object containing the audio URL.\n     */\n\n  }, {\n    key: "_synthesizeAudio",\n    value: function _synthesizeAudio(params) {\n      var _this5 = this;\n\n      return new core_Deferred(function (resolve, reject) {\n        _this5.constructor.SERVICES.presigner.getSynthesizeSpeechUrl(params, function (error, url) {\n          if (!error) {\n            resolve({\n              url: url\n            });\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n    /**\n     * Retrieves and parses speechmarks for the given speech text.\n     *\n     * @private\n     *\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\n     *\n     * @returns {Deferred} Resolves with an array of speechmark objects\n     */\n\n  }, {\n    key: "_synthesizeSpeechmarks",\n    value: function _synthesizeSpeechmarks(params) {\n      var _this6 = this;\n\n      return this.constructor.SERVICES.polly.synthesizeSpeech(params).promise().then(function (result) {\n        // Convert charcodes to string\n        var jsonString = JSON.stringify(result.AudioStream);\n        var json = JSON.parse(jsonString);\n        var dataStr = json.data.map(function (c) {\n          return String.fromCharCode(c);\n        }).join(\'\');\n        var markTypes = {\n          sentence: [],\n          word: [],\n          viseme: [],\n          ssml: []\n        };\n        var endMarkTypes = {\n          sentence: null,\n          word: null,\n          viseme: null,\n          ssml: null\n        }; // Split by enclosing {} to create speechmark objects\n\n        var speechMarks = AbstractTextToSpeechFeature_toConsumableArray(dataStr.matchAll(/\\{.*?\\}(?=\\n|$)/gm)).map(function (match) {\n          var mark = JSON.parse(match[0]); // Set the duration of the last speechmark stored matching this one\'s type\n\n          var numMarks = markTypes[mark.type].length;\n\n          if (numMarks > 0) {\n            var lastMark = markTypes[mark.type][numMarks - 1];\n            lastMark.duration = mark.time - lastMark.time;\n          }\n\n          markTypes[mark.type].push(mark);\n          endMarkTypes[mark.type] = mark;\n          return mark;\n        }); // Find the time of the latest speechmark\n\n\n        var endTimes = [];\n\n        if (endMarkTypes.sentence) {\n          endTimes.push(endMarkTypes.sentence.time);\n        }\n\n        if (endMarkTypes.word) {\n          endTimes.push(endMarkTypes.word.time);\n        }\n\n        if (endMarkTypes.viseme) {\n          endTimes.push(endMarkTypes.viseme.time);\n        }\n\n        if (endMarkTypes.ssml) {\n          endTimes.push(endMarkTypes.ssml.time);\n        }\n\n        var endTime = Math.max.apply(Math, endTimes); // Calculate duration for the ending speechMarks of each type\n\n        if (endMarkTypes.sentence) {\n          endMarkTypes.sentence.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.sentence.time);\n        }\n\n        if (endMarkTypes.word) {\n          endMarkTypes.word.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.word.time);\n        }\n\n        if (endMarkTypes.viseme) {\n          endMarkTypes.viseme.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.viseme.time);\n        }\n\n        if (endMarkTypes.ssml) {\n          endMarkTypes.ssml.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.ssml.time);\n        }\n\n        return speechMarks;\n      });\n    }\n    /**\n     * Returns a Speech object that has the given text.\n     *\n     * @private\n     *\n     * @param {string} text - The text content of the Speech.\n     * @param {Object=} config - Options to update the Speech with.\n     *\n     * @returns {Deferred} Resolves with Speech or null;\n     */\n\n  }, {\n    key: "_getSpeech",\n    value: function _getSpeech(text, config) {\n      // Make sure AWS services exist\n      if (!this.constructor.isReady) {\n        var e = \'AWS services have not been initialized.\';\n        return core_Deferred.reject(e);\n      } // Make sure its possible to generate speeches\n\n\n      if (!text) {\n        var _e2 = \'Cannot play a speech with no text.\';\n        return core_Deferred.reject(_e2);\n      } // Update the speech with options\n\n\n      text = awspack_TextToSpeechUtils.validateText(text);\n      config = this._updateConfig(config, text);\n      return this._updateSpeech(text, config).promise;\n    }\n    /**\n     * Adds a namespace to the host with the name of the feature to contain properties\n     * and methods from the feature that users of the host need access to.\n     *\n     * @see TextToSpeechFeature\n     */\n\n  }, {\n    key: "installApi",\n    value: function installApi() {\n      var _this7 = this;\n\n      /**\n       * @inner\n       * @namespace TextToSpeechFeature\n       */\n      var api = AbstractTextToSpeechFeature_get(AbstractTextToSpeechFeature_getPrototypeOf(AbstractTextToSpeechFeature.prototype), "installApi", this).call(this);\n\n      Object.assign(api, {\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#play\n         */\n        play: this.play.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#pause\n         */\n        pause: this.pause.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#resume\n         */\n        resume: this.resume.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#stop\n         */\n        stop: this.stop.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#getVolume\n         */\n        getVolume: this.getVolume.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#setVolume\n         */\n        setVolume: this.setVolume.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#pauseVolume\n         */\n        pauseVolume: this.pauseVolume.bind(this),\n\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @method\n         * @see AbstractTextToSpeechFeature#resumeVolume\n         */\n        resumeVolume: this.resumeVolume.bind(this)\n      });\n      Object.defineProperties(api, {\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @see AbstractTextToSpeechFeature#speechmarkOffset\n         */\n        speechmarkOffset: {\n          get: function get() {\n            return _this7.speechmarkOffset;\n          },\n          set: function set(offset) {\n            _this7.speechmarkOffset = offset;\n          }\n        }\n      });\n      return api;\n    }\n    /**\n     * Gets and sets the volume used for all audio clips played by the speaker.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: "volume",\n    get: function get() {\n      return this._volume;\n    }\n    /**\n     * Gets whether or not the speaker\'s volume value is currently being tweened.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    ,\n    set: function set(volume) {\n      this._volume = core_MathUtils.clamp(volume);\n    }\n  }, {\n    key: "volumePending",\n    get: function get() {\n      return this._promises.volume && this._promises.volume.pending;\n    }\n    /**\n     * Gets the volume used for all audio clips played by the speaker.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: "getVolume",\n    value: function getVolume() {\n      return this.volume;\n    }\n    /**\n     * Updates the volume used for all audio clips played by the speaker over time.\n     *\n     * @param {number} volume - Target volume value.\n     * @param {number} [seconds=0] - Amount of time it will take to reach the target\n     * volume.\n     * @param {Function=} easingFn - Easing function used for interpolation.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "setVolume",\n    value: function setVolume(volume) {\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (this.volumePending) {\n        this._promises.volume.cancel();\n      }\n\n      volume = core_MathUtils.clamp(volume);\n      this._promises.volume = animpack_AnimationUtils.interpolateProperty(this, \'volume\', volume, {\n        seconds: seconds,\n        easingFn: easingFn\n      });\n      return this._promises.volume;\n    }\n    /**\n     * Pause interpolation happening on the speaker\'s volume property.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "pauseVolume",\n    value: function pauseVolume() {\n      this._volumePaused = true;\n      return this.volumePending;\n    }\n    /**\n     * Resume any interpolation happening on the speaker\'s volume property.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: "resumeVolume",\n    value: function resumeVolume() {\n      this._volumePaused = false;\n      return this.volumePending;\n    }\n    /**\n     * Update the currently playing speech.\n     *\n     * @param {number} deltaTime - Time since the last update.\n     */\n\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      if (!this._volumePaused) {\n        this._promises.volume.execute(deltaTime);\n      }\n\n      if (this._currentSpeech && this._currentSpeech.playing) {\n        this._currentSpeech.volume = this._volume;\n\n        this._currentSpeech.update(this._host.now);\n\n        AbstractTextToSpeechFeature_get(AbstractTextToSpeechFeature_getPrototypeOf(AbstractTextToSpeechFeature.prototype), "update", this).call(this, deltaTime);\n      }\n    }\n    /**\n     * Set the current speech to a new asset and update the speech\'s speechmark\n     * offset value to match that of the feature.\n     *\n     * @private\n     *\n     * @param {AbstractSpeech} speech - Speech to set as current.\n     */\n\n  }, {\n    key: "_setCurrentSpeech",\n    value: function _setCurrentSpeech(speech) {\n      speech.speechmarkOffset = this._speechmarkOffset;\n      this._currentSpeech = speech;\n    }\n    /**\n     * Create a promise that will play/resume a speech with the given text after\n     * the audio context attempts to resume and speech audio is retrieved from Polly.\n     *\n     * @private\n     *\n     * @param {string} text - The text of the new speech to play.\n     * @param {Object=} config - Optional parameters for the speech.\n     * @param {string} [playMethod = \'play\'] - Method to execute on the resulting\n     * Speech object. Valid options are \'play\' and \'resume\'.\n     */\n\n  }, {\n    key: "_startSpeech",\n    value: function _startSpeech(text, config) {\n      var _this8 = this;\n\n      var playMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'play\';\n\n      // If no text is provided, try to use the current speech\n      if (text === undefined && playMethod === \'resume\' && this._currentSpeech) {\n        text = this._currentSpeech.text;\n      }\n\n      var currentPromise = this._currentPromise || {\n        play: new core_Deferred(undefined, function () {\n          currentPromise.speech.cancel();\n        }, function () {\n          currentPromise.speech.cancel();\n        }, function () {\n          currentPromise.speech.cancel();\n        }),\n        speech: new core_Deferred()\n      };\n      this._currentPromise = currentPromise;\n\n      this._getSpeech(text, config).then(function (speech) {\n        // Exit if the promise is no longer pending because of user interaction\n        if (!currentPromise.play.pending) {\n          return;\n        } else if (_this8._currentPromise !== currentPromise) {\n          // Cancel if another call to play has already been made\n          currentPromise.play.cancel();\n          return;\n        } // Reset current speech when the speech ends\n\n\n        var onFinish = function onFinish() {\n          _this8._currentSpeech = null;\n          _this8._currentPromise = null;\n        }; // Cancel the currently playing speech\n\n\n        if (_this8._currentSpeech && _this8._currentSpeech.playing) {\n          if (playMethod === \'play\') {\n            _this8._currentSpeech.cancel();\n          } else if (playMethod === \'resume\' && _this8._currentSpeech.audio !== speech.audio) {\n            _this8._currentSpeech.cancel();\n          }\n        }\n\n        _this8._setCurrentSpeech(speech); // Play the speech\n\n\n        currentPromise.speech = speech[playMethod](_this8._host.now, onFinish, onFinish, onFinish);\n        currentPromise.speech.then(function () {\n          if (currentPromise.speech.resolved) {\n            currentPromise.play.resolve();\n          } else {\n            currentPromise.play.cancel();\n          }\n        })["catch"](function (error) {\n          currentPromise.play.reject(error);\n        });\n      })["catch"](function (e) {\n        e = "Cannot ".concat(playMethod, " speech ").concat(text, " on host ").concat(_this8.host.id, ". ").concat(e);\n        currentPromise.play.reject(e);\n      });\n\n      return currentPromise.play;\n    }\n    /**\n     * Stop any speeches currently playing and play a new speech from the beginning.\n     *\n     * @param {string} text - The text of the new speech to play.\n     * @param {Object=} config - Optional parameters for the speech.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "play",\n    value: function play(text, config) {\n      return this._startSpeech(text, config, \'play\');\n    }\n    /**\n     * If a speech is currently playing, pause it at the current time.\n     */\n\n  }, {\n    key: "pause",\n    value: function pause() {\n      if (this._currentSpeech && this._currentSpeech.playing) {\n        this._currentSpeech.pause(this._host.now);\n      } else {\n        console.warn("Cannot pause speech on host ".concat(this.host.id, ". No speech is currently playing"));\n      }\n    }\n    /**\n     * Stop any speeches currently playing and resume a new speech from the current\n     * time.\n     *\n     * @param {string=} text - The text of the new speech to play. If undefined and\n     * there is a current speech that is paused, the current speech will be resumed.\n     * @param {Object=} config - Optional parameters for the speech.\n     *\n     * @returns {Deferred}\n     */\n\n  }, {\n    key: "resume",\n    value: function resume(text, config) {\n      return this._startSpeech(text, config, \'resume\');\n    }\n    /**\n     * If a speech is currently playing, stop playback and reset time.\n     */\n\n  }, {\n    key: "stop",\n    value: function stop() {\n      if (this._currentSpeech && this._currentSpeech.playing) {\n        this._currentSpeech.stop();\n\n        this._currentSpeech = null;\n      } else {\n        console.warn("Cannot stop speech on host ".concat(this.host.id, ". No speech is currently playing."));\n      }\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      if (this._currentSpeech && this._currentSpeech.playing) {\n        this._currentSpeech.stop();\n      }\n\n      delete this._speechCache;\n\n      AbstractTextToSpeechFeature_get(AbstractTextToSpeechFeature_getPrototypeOf(AbstractTextToSpeechFeature.prototype), "discard", this).call(this);\n    }\n  }], [{\n    key: "initializeService",\n    value: function initializeService(polly, presigner, version) {\n      var _this9 = this;\n\n      // Make sure all were defined\n      if (polly === undefined || presigner === undefined || version === undefined) {\n        throw new Error(\'Cannot initialize TextToSpeech feature. All arguments must be defined.\');\n      } // Add sumerian hosts user-agent\n\n\n      if (polly.config) {\n        polly.config.customUserAgent = this._withCustomUserAgent(polly.config.customUserAgent);\n      }\n\n      if (presigner.service && presigner.service.config) {\n        presigner.service.config.customUserAgent = this._withCustomUserAgent(presigner.service.config.customUserAgent);\n      }\n\n      this._isReady = false; // Store parameters\n\n      this.SERVICES.polly = polly;\n      this.SERVICES.presigner = presigner;\n      awsVersion = version; // Clear the current polly objects\n\n      var availableVoices = this.POLLY_VOICES;\n      availableVoices.length = 0;\n      var availableLanguages = this.POLLY_LANGUAGES;\n      Object.keys(availableLanguages).forEach(function (name) {\n        delete availableLanguages[name];\n      });\n      var availableLanguageCodes = this.POLLY_LANGUAGE_CODES;\n      Object.keys(availableLanguageCodes).forEach(function (name) {\n        delete availableLanguageCodes[name];\n      }); // Re-populate according to version\n\n      var minNeuralSdk = this.POLLY_MIN_NEURAL_VERSION;\n      return this.SERVICES.polly.describeVoices().promise().then(function (response) {\n        var allCodes = {};\n        response.Voices.forEach(function (voice) {\n          if (voice.SupportedEngines.includes(\'standard\') || version >= minNeuralSdk) {\n            availableVoices.push(voice);\n          }\n\n          availableVoices.forEach(function (voice) {\n            availableLanguages[voice.LanguageName] = voice.LanguageCode;\n            allCodes[voice.LanguageCode] = voice.LanguageName;\n          });\n        });\n        Object.entries(availableLanguages).forEach(function (_ref3) {\n          var _ref4 = AbstractTextToSpeechFeature_slicedToArray(_ref3, 2),\n              name = _ref4[0],\n              code = _ref4[1];\n\n          availableLanguageCodes[code] = name;\n        }); // Notify that we\'re ready to generate speeches\n\n        _this9._isReady = true;\n\n        _this9.emit(_this9.EVENTS.ready);\n      });\n    }\n    /**\n     * Indicates whether or not the class is capable of generating speech audio. Polly,\n     * Presigner and AWS SDK version number must have been defined using\n     * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "isReady",\n    get: function get() {\n      return this._isReady;\n    }\n  }, {\n    key: "_withCustomUserAgent",\n    value: function _withCustomUserAgent(currentUserAgent) {\n      var sumerianHostsUserAgent = \'request-source/SumerianHosts\';\n\n      if (currentUserAgent == null) {\n        return sumerianHostsUserAgent;\n      }\n\n      if (currentUserAgent.indexOf(sumerianHostsUserAgent) !== -1) {\n        return currentUserAgent;\n      }\n\n      return currentUserAgent.concat(\' \', sumerianHostsUserAgent);\n    }\n  }]);\n\n  return AbstractTextToSpeechFeature;\n}(core_AbstractHostFeature);\n\nObject.defineProperties(AbstractTextToSpeechFeature, {\n  AWS_VERSION: {\n    get: function get() {\n      return awsVersion;\n    }\n  },\n  POLLY_MIN_NEURAL_VERSION: {\n    value: \'2.503\',\n    writable: false\n  },\n  POLLY_DEFAULTS: {\n    value: {\n      Engine: \'standard\',\n      LexiconNames: [],\n      OutputFormat: \'mp3\',\n      SampleRate: \'22050\',\n      Text: \'\',\n      TextType: \'ssml\',\n      VoiceId: \'Amy\',\n      LanguageCode: \'en-GB\',\n      LanguageName: \'British English\'\n    },\n    writable: false\n  },\n  POLLY_VOICES: {\n    value: [],\n    writable: false\n  },\n  POLLY_LANGUAGES: {\n    value: {},\n    writable: false\n  },\n  POLLY_LANGUAGE_CODES: {\n    value: {},\n    writable: false\n  },\n  _isReady: {\n    value: false,\n    writable: true\n  },\n  EVENTS: {\n    value: AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, Object.getPrototypeOf(AbstractTextToSpeechFeature).EVENTS), {}, {\n      ready: \'onReadyEvent\',\n      play: \'onPlayEvent\',\n      pause: \'onPauseEvent\',\n      resume: \'onResumeEvent\',\n      interrupt: \'onInterruptEvent\',\n      stop: \'onStopEvent\',\n      sentence: \'onSentenceEvent\',\n      word: \'onWordEvent\',\n      viseme: \'onVisemeEvent\',\n      ssml: \'onSsmlEvent\'\n    })\n  },\n  SERVICES: {\n    value: AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, Object.getPrototypeOf(AbstractTextToSpeechFeature).SERVICES), {}, {\n      polly: undefined,\n      presigner: undefined\n    })\n  }\n});\n/* harmony default export */ const awspack_AbstractTextToSpeechFeature = (AbstractTextToSpeechFeature);\n;// CONCATENATED MODULE: ./src/core/awspack/TextToSpeechFeature.js\nfunction TextToSpeechFeature_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechFeature_typeof(obj); }\n\nfunction TextToSpeechFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TextToSpeechFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TextToSpeechFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction TextToSpeechFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { TextToSpeechFeature_get = Reflect.get; } else { TextToSpeechFeature_get = function _get(target, property, receiver) { var base = TextToSpeechFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return TextToSpeechFeature_get.apply(this, arguments); }\n\nfunction TextToSpeechFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = TextToSpeechFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction TextToSpeechFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TextToSpeechFeature_setPrototypeOf(subClass, superClass); }\n\nfunction TextToSpeechFeature_setPrototypeOf(o, p) { TextToSpeechFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TextToSpeechFeature_setPrototypeOf(o, p); }\n\nfunction TextToSpeechFeature_createSuper(Derived) { var hasNativeReflectConstruct = TextToSpeechFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TextToSpeechFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TextToSpeechFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TextToSpeechFeature_possibleConstructorReturn(this, result); }; }\n\nfunction TextToSpeechFeature_possibleConstructorReturn(self, call) { if (call && (TextToSpeechFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TextToSpeechFeature_assertThisInitialized(self); }\n\nfunction TextToSpeechFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction TextToSpeechFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction TextToSpeechFeature_getPrototypeOf(o) { TextToSpeechFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TextToSpeechFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n/**\n * @extends AbstractTextToSpeechFeature\n * @alias core/TextToSpeechFeature\n */\n\nvar TextToSpeechFeature = /*#__PURE__*/function (_AbstractTextToSpeech) {\n  TextToSpeechFeature_inherits(TextToSpeechFeature, _AbstractTextToSpeech);\n\n  var _super = TextToSpeechFeature_createSuper(TextToSpeechFeature);\n\n  function TextToSpeechFeature() {\n    var _this;\n\n    TextToSpeechFeature_classCallCheck(this, TextToSpeechFeature);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._enabled = false;\n\n    _this._setAudioContext();\n\n    _this._observeAudioContext();\n\n    return _this;\n  }\n  /**\n   * Store the audio context that will be used to ensure audio can be played.\n   *\n   * @private\n   */\n\n\n  TextToSpeechFeature_createClass(TextToSpeechFeature, [{\n    key: "_setAudioContext",\n    value: function _setAudioContext() {\n      this._audioContext = new AudioContext();\n    }\n    /**\n     * Listen for state changes on the audio context to determine whether the feature\n     * is enabled.\n     *\n     * @private\n     */\n\n  }, {\n    key: "_observeAudioContext",\n    value: function _observeAudioContext() {\n      var _this2 = this;\n\n      if (this._audioContext) {\n        this._audioContext.onstatechange = function () {\n          if (_this2._audioContext.state === \'running\') {\n            _this2._enabled = true;\n          } else {\n            _this2._enabled = false;\n            console.warn(\'The audio context is not running. Speech will not be able to be played until it is resumed. Use the "TextToSpeechFeature.resumeAudio" method to try to resume it after a user gesture.\');\n          }\n        };\n\n        this._audioContext.onstatechange();\n      }\n    }\n    /**\n     * Create an Audio object of speech audio for the given speech text.\n     *\n     * @private\n     *\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\n     *\n     * @returns {Promise} Resolves with an object containing the audio URL and Audio\n     * object.\n     */\n\n  }, {\n    key: "_synthesizeAudio",\n    value: function _synthesizeAudio(params) {\n      var _this3 = this;\n\n      return TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "_synthesizeAudio", this).call(this, params).then(function (result) {\n        var url = result.url; // Create an Audio object that points to the presigned url\n\n        var audio = new Audio(url);\n        audio.loop = _this3.loop;\n        audio.crossOrigin = \'anonymous\';\n        audio.preload = \'auto\';\n        result.audio = audio;\n        return new Promise(function (resolve) {\n          // Resolve once the minimum amount is loaded\n          audio.addEventListener(\'canplaythrough\', function () {\n            resolve(result);\n          }); // Start loading the audio\n\n          document.body.appendChild(audio);\n          audio.load();\n        });\n      });\n    }\n    /**\n     * Create a new Speech object for the speaker.\n     *\n     * @private\n     *\n     * @param {TextToSpeech} speaker - The TextToSpeech instance that will own the speech.\n     * @param {string} text - Text of the speech.\n     * @param {Object} speechmarks - Speechmarks for the speech.\n     * @param {Object} audioConfig - Audio for the speech.\n     *\n     * @returns {AbstractSpeech}\n     */\n\n  }, {\n    key: "_createSpeech",\n    value: function _createSpeech(text, speechmarks, audioConfig) {\n      return new awspack_Speech(this, text, speechmarks, audioConfig);\n    }\n    /**\n     * Gets whether or not the audio context is running and speech can be played.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n\n  }, {\n    key: "enabled",\n    get: function get() {\n      return this._enabled;\n    }\n    /**\n     * Try to resume the audio context. This will be automatically executed each time\n     * speech is played or resumed. If using manually, it should be called after a\n     * user interaction occurs.\n     *\n     * @returns {Deferred} - Resolves once the audio context has resumed.\n     */\n\n  }, {\n    key: "resumeAudio",\n    value: function resumeAudio() {\n      var _this4 = this;\n\n      var promise = new core_Deferred(function (resolve, reject) {\n        _this4._audioContext.resume().then(function () {\n          _this4._enabled = true;\n          resolve();\n        })["catch"](function (e) {\n          _this4._enabled = false;\n          reject(e);\n        });\n      });\n      return promise;\n    }\n  }, {\n    key: "_startSpeech",\n    value: function _startSpeech(text, config) {\n      var _this5 = this;\n\n      var playMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'play\';\n      var currentPromise = {\n        play: new core_Deferred(undefined, function () {\n          currentPromise.speech.cancel();\n        }, function () {\n          currentPromise.speech.cancel();\n        }, function () {\n          currentPromise.speech.cancel();\n        }),\n        speech: new core_Deferred()\n      };\n      this._currentPromise = currentPromise; // Try to start the audio context\n\n      this.resumeAudio().then(function () {\n        // Exit if the promise is no longer pending because of user interaction\n        if (!currentPromise.play.pending) {\n          return;\n        } // Cancel if another call to play has already been made\n        else if (_this5._currentPromise !== currentPromise) {\n          currentPromise.play.cancel();\n          return;\n        } // The audio context is running so the speech can be played\n\n\n        if (_this5._enabled) {\n          TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "_startSpeech", _this5).call(_this5, text, config, playMethod);\n        } // Reject if the audio context is not running\n        else {\n          currentPromise.reject(new Error("Cannot ".concat(playMethod, " speech on host ").concat(_this5._host.id, ". The audio context is not running. Use the \\"TextToSpeechFeature.resumeAudio\\" method to try to resume it after a user gesture.")));\n        }\n      });\n      return currentPromise.play;\n    }\n  }, {\n    key: "play",\n    value: function play(text, config) {\n      return this._startSpeech(text, config, \'play\');\n    }\n  }, {\n    key: "resume",\n    value: function resume(text, config) {\n      return this._startSpeech(text, config, \'resume\');\n    }\n  }, {\n    key: "installApi",\n    value: function installApi() {\n      var _this6 = this;\n\n      var api = TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "installApi", this).call(this);\n\n      Object.defineProperties(api, {\n        /**\n         * @memberof TextToSpeechFeature\n         * @instance\n         * @see core/TextToSpeechFeature#enabled\n         */\n        enabled: {\n          get: function get() {\n            return _this6._enabled;\n          }\n        }\n      });\n      return api;\n    }\n  }]);\n\n  return TextToSpeechFeature;\n}(awspack_AbstractTextToSpeechFeature);\n\n/* harmony default export */ const awspack_TextToSpeechFeature = (TextToSpeechFeature);\n;// CONCATENATED MODULE: ./src/core/awspack/index.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n\n\n/**\n * @module core/awspack\n */\n\n/* harmony default export */ const awspack = ({\n  /**\n   * @see AbstractTextToSpeechFeature\n   */\n  AbstractTextToSpeechFeature: awspack_AbstractTextToSpeechFeature,\n\n  /**\n   * @see core/TextToSpeechFeature\n   */\n  TextToSpeechFeature: awspack_TextToSpeechFeature,\n\n  /**\n   * @see TextToSpeechUtils\n   */\n  TextToSpeechUtils: awspack_TextToSpeechUtils,\n\n  /**\n   * @see AbstractSpeech\n   */\n  AbstractSpeech: awspack_AbstractSpeech,\n\n  /**\n   * @see core/Speech\n   */\n  Speech: awspack_Speech\n});\n;// CONCATENATED MODULE: ./src/core/index.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\n * @module hosts/core\n */\n\n\n\n\n\n\n\n\n\n\nvar core_Easing = animpack.Easing,\n    core_AnimationFeature = animpack.AnimationFeature,\n    core_AnimationTypes = animpack.AnimationTypes,\n    core_AnimationLayer = animpack.AnimationLayer,\n    core_LayerBlendModes = animpack.LayerBlendModes,\n    core_DefaultLayerBlendMode = animpack.DefaultLayerBlendMode,\n    core_SingleState = animpack.SingleState,\n    core_TransitionState = animpack.TransitionState,\n    core_FreeBlendState = animpack.FreeBlendState,\n    core_QueueState = animpack.QueueState,\n    core_RandomAnimationState = animpack.RandomAnimationState,\n    core_Blend1dState = animpack.Blend1dState,\n    core_Blend2dState = animpack.Blend2dState,\n    core_AnimationUtils = animpack.AnimationUtils;\n\nvar core_AbstractTextToSpeechFeature = awspack.AbstractTextToSpeechFeature,\n    core_TextToSpeechFeature = awspack.TextToSpeechFeature,\n    core_TextToSpeechUtils = awspack.TextToSpeechUtils,\n    core_AbstractSpeech = awspack.AbstractSpeech,\n    core_Speech = awspack.Speech;\n/* harmony default export */ const core = ({\n  /**\n   * @see env\n   */\n  env: env,\n\n  /**\n   * @see Utils\n   */\n  Utils: core_Utils,\n\n  /**\n   * @see MathUtils\n   */\n  MathUtils: core_MathUtils,\n\n  /**\n   * @see Deferred\n   */\n  Deferred: core_Deferred,\n\n  /**\n   * @see core/Messenger\n   */\n  Messenger: core_Messenger,\n\n  /**\n   * @see core/HostObject\n   */\n  HostObject: core_HostObject,\n\n  /**\n   * @see LipsyncFeature\n   */\n  LipsyncFeature: core_LipsyncFeature,\n\n  /**\n   * @see GestureFeature\n   */\n  GestureFeature: core_GestureFeature,\n\n  /**\n   * @see PointOfInterestFeature\n   */\n  PointOfInterestFeature: core_PointOfInterestFeature,\n\n  /**\n   * @see DefaultVisemeMap\n   */\n  DefaultVisemeMap: DefaultVisemeMap,\n\n  /**\n   * @see DefaultGestureWords\n   */\n  DefaultGestureWords: DefaultGestureWords,\n\n  /**\n   * @see AxisMap\n   */\n  AxisMap: AxisMap,\n  // Amnimpack\n\n  /**\n   * @see module:core/animpack.Easing\n   */\n  Easing: core_Easing,\n\n  /**\n   * @see module:core/animpack.AnimationFeature\n   */\n  AnimationFeature: core_AnimationFeature,\n\n  /**\n   * @see module:core/animpack.AnimationLayer\n   */\n  AnimationLayer: core_AnimationLayer,\n\n  /**\n   * @see module:core/animpack.SingleState\n   */\n  SingleState: core_SingleState,\n\n  /**\n   * @see module:core/animpack.TransitionState\n   */\n  TransitionState: core_TransitionState,\n\n  /**\n   * @see module:core/animpack.FreeBlendState\n   */\n  FreeBlendState: core_FreeBlendState,\n\n  /**\n   * @see module:core/animpack.QueueState\n   */\n  QueueState: core_QueueState,\n\n  /**\n   * @see module:core/animpack.RandomAnimationState\n   */\n  RandomAnimationState: core_RandomAnimationState,\n\n  /**\n   * @see module:core/animpack.Blend1dState\n   */\n  Blend1dState: core_Blend1dState,\n\n  /**\n   * @see module:core/animpack.Blend2dState\n   */\n  Blend2dState: core_Blend2dState,\n\n  /**\n   * @see module:core/animpack.AnimationUtils\n   */\n  AnimationUtils: core_AnimationUtils,\n\n  /**\n   * @see module:core/animpack.LayerBlendModes\n   */\n  LayerBlendModes: core_LayerBlendModes,\n\n  /**\n   * @see module:core/animpack.DefaultLayerBlendMode\n   */\n  DefaultLayerBlendMode: core_DefaultLayerBlendMode,\n\n  /**\n   * @see module:core/animpack.AnimationTypes\n   */\n  AnimationTypes: core_AnimationTypes,\n  // AWS Pack\n\n  /**\n   * @see module:core/awspack.AbstractTextToSpeechFeature\n   */\n  AbstractTextToSpeechFeature: core_AbstractTextToSpeechFeature,\n\n  /**\n   * @see module:core/awspack.TextToSpeechFeature\n   */\n  TextToSpeechFeature: core_TextToSpeechFeature,\n\n  /**\n   * @see module:core/awspack.TextToSpeechUtils\n   */\n  TextToSpeechUtils: core_TextToSpeechUtils,\n\n  /**\n   * @see module:core/awspack.AbstractSpeech\n   */\n  AbstractSpeech: core_AbstractSpeech,\n\n  /**\n   * @see module:core/awspack.Speech\n   */\n  Speech: core_Speech\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///437\n')}},__webpack_require__={d:(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},__webpack_exports__={};return __webpack_modules__[437](0,__webpack_exports__,__webpack_require__),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));