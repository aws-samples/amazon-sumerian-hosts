/*! For license information please see host.three.js.LICENSE.txt */
!function(V,l){"object"==typeof exports&&"object"==typeof module?module.exports=l():"function"==typeof define&&define.amd?define("HOST",[],l):"object"==typeof exports?exports.HOST=l():V.HOST=l()}("undefined"!=typeof self?self:"undefined"!=typeof global?global:this,(function(){return(()=>{var __webpack_modules__={24:function(module,exports,__webpack_require__){eval('/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},_typeof(obj);}/*! For license information please see host.core.js.LICENSE.txt */!function(e,t){"object"==( false?0:_typeof(exports))&&"object"==( false?0:_typeof(module))?module.exports=t(): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0;}("undefined"!=typeof self?self:"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:this,function(){return function(){"use strict";var __webpack_modules__={437:function _(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval(\'\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  "default": () => (/* binding */ core)\\n});\\n\\n;// CONCATENATED MODULE: ./src/core/Deferred.js\\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\\n\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\\n\\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * The built-in class for asynchronous Promises.\\r\\n * @external Promise\\r\\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\r\\n */\\n\\n/**\\r\\n * A Promise object that can be resolved, rejected or canceled at any time by the\\r\\n * user.\\r\\n *\\r\\n * @extends external:Promise\\r\\n */\\nvar Deferred = /*#__PURE__*/function (_Promise) {\\n  _inherits(Deferred, _Promise);\\n\\n  var _super = _createSuper(Deferred);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Function} [executable=() => {}] - The function to be executed by the\\r\\n   * constructor, during the process of constructing the promise. The signature\\r\\n   * of this is expected to be: executable(  resolutionFunc, rejectionFunc, cancellationFunc ).\\r\\n   * @param {Function=} onResolve - Optional function to execute once the promise\\r\\n   * is resolved.\\r\\n   * @param {Function=} onReject - Optional function to execute once the promise\\r\\n   * is rejected.\\r\\n   * @param {Function=} onCancel - Optional function to execute if the user cancels\\r\\n   * the promise. Canceling results in the promise having a status of \\\'resolved\\\'.\\r\\n   */\\n  function Deferred() {\\n    var _this;\\n\\n    var executable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\\n    var onResolve = arguments.length > 1 ? arguments[1] : undefined;\\n    var onReject = arguments.length > 2 ? arguments[2] : undefined;\\n    var onCancel = arguments.length > 3 ? arguments[3] : undefined;\\n\\n    _classCallCheck(this, Deferred);\\n\\n    if (typeof executable !== \\\'function\\\') {\\n      throw new Error("Cannot create new Deferred. Executable must be a function.");\\n    }\\n\\n    if (typeof onResolve !== \\\'undefined\\\' && typeof onResolve !== \\\'function\\\') {\\n      throw new Error("Cannot create new Deferred. OnResolve must be a function.");\\n    }\\n\\n    if (typeof onReject !== \\\'undefined\\\' && typeof onReject !== \\\'function\\\') {\\n      throw new Error("Cannot create new Deferred. OnReject must be a function.");\\n    }\\n\\n    if (typeof onCancel !== \\\'undefined\\\' && typeof onCancel !== \\\'function\\\') {\\n      throw new Error("Cannot create new Deferred. OnCancel must be a function.");\\n    }\\n\\n    var res;\\n    var rej;\\n    var cancel;\\n    var status = {\\n      resolved: false,\\n      rejected: false,\\n      canceled: false,\\n      pending: true\\n    };\\n    _this = _super.call(this, function (resolve, reject) {\\n      // Store the resolver\\n      res = function res(value) {\\n        if (status.pending) {\\n          status.resolved = true;\\n          status.pending = false;\\n\\n          if (typeof onResolve === \\\'function\\\') {\\n            value = onResolve(value);\\n          }\\n\\n          return resolve(value);\\n        }\\n      }; // Store the rejecter\\n\\n\\n      rej = function rej(value) {\\n        if (status.pending) {\\n          status.rejected = true;\\n          status.pending = false;\\n\\n          if (typeof onReject === \\\'function\\\') {\\n            value = onReject(value);\\n          }\\n\\n          return reject(value);\\n        }\\n      }; // Store the canceler\\n\\n\\n      cancel = function cancel(value) {\\n        if (status.pending) {\\n          status.canceled = true;\\n          status.pending = false;\\n\\n          if (typeof onCancel === \\\'function\\\') {\\n            value = onCancel(value);\\n          }\\n\\n          return resolve(value);\\n        }\\n      }; // Run the executable with custom resolver and rejecter\\n\\n\\n      executable(res, rej, cancel);\\n    });\\n    _this._status = status;\\n    _this._resolve = res;\\n    _this._reject = rej;\\n    _this._cancel = cancel;\\n    _this._executable = executable;\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets the resolved state of the promise.\\r\\n   *\\r\\n   * @readonly\\r\\n   */\\n\\n\\n  _createClass(Deferred, [{\\n    key: "resolved",\\n    get: function get() {\\n      return this._status.resolved;\\n    }\\n    /**\\r\\n     * Gets the rejected state of the promise.\\r\\n     *\\r\\n     * @readonly\\r\\n     */\\n\\n  }, {\\n    key: "rejected",\\n    get: function get() {\\n      return this._status.rejected;\\n    }\\n    /**\\r\\n     * Gets the canceled state of the promise.\\r\\n     *\\r\\n     * @readonly\\r\\n     */\\n\\n  }, {\\n    key: "canceled",\\n    get: function get() {\\n      return this._status.canceled;\\n    }\\n    /**\\r\\n     * Gets the pending state of the promise.\\r\\n     *\\r\\n     * @readonly\\r\\n     */\\n\\n  }, {\\n    key: "pending",\\n    get: function get() {\\n      return this._status.pending;\\n    }\\n    /**\\r\\n     * Force the promise to resolve.\\r\\n     *\\r\\n     * @param {any=} value - Value to pass to the resolver.\\r\\n     *\\r\\n     * @returns {any} - The return value of the resolver function.\\r\\n     */\\n\\n  }, {\\n    key: "resolve",\\n    value: function resolve(value) {\\n      return this._resolve(value);\\n    }\\n    /**\\r\\n     * Force the promise to reject.\\r\\n     *\\r\\n     * @param {any=} value - Value to pass to the rejecter.\\r\\n     *\\r\\n     * @returns {any} - The return value of the rejecter function.\\r\\n     */\\n\\n  }, {\\n    key: "reject",\\n    value: function reject(value) {\\n      return this._reject(value);\\n    }\\n    /**\\r\\n     * Force the promise to resolve and set the canceled state to true.\\r\\n     *\\r\\n     * @param {any=} value - Value to pass to the canceller.\\r\\n     *\\r\\n     * @returns {any} - The return value of the canceller function.\\r\\n     */\\n\\n  }, {\\n    key: "cancel",\\n    value: function cancel(value) {\\n      return this._cancel(value);\\n    }\\n    /**\\r\\n     * Run the promise function to try to resolve the promise. Promise must be\\r\\n     * pending.\\r\\n     *\\r\\n     * @param {...any} args - Optional arguments to pass after resolve and reject.\\r\\n     */\\n\\n  }, {\\n    key: "execute",\\n    value: function execute() {\\n      if (this.pending) {\\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n          args[_key] = arguments[_key];\\n        }\\n\\n        this._executable.apply(this, [this._resolve, this._reject, this._cancel].concat(args));\\n      }\\n    }\\n    /**\\r\\n     * Return a canceled deferred promise.\\r\\n     *\\r\\n     * @param {any=} value - Value to cancel the promise with.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }], [{\\n    key: "cancel",\\n    value: function cancel(value) {\\n      return new Deferred(function (_resolve, _reject, cancel) {\\n        cancel(value);\\n      });\\n    }\\n    /**\\r\\n     * Return a new Deferred promise that will resolve or reject once all promises\\r\\n     * in the input array have been resolved or one promise is canceled or rejected.\\r\\n     * Promises in the array that are Deferred promises will be manually resolved,\\r\\n     * rejected or canceled when calling resolve, reject or cancel on the return promise.\\r\\n     *\\r\\n     * @param {Array.<any>} iterable - An iterable such as an array.\\r\\n     * @param {Function=} onResolve - Optional function to execute once the promise\\r\\n     * is resolved.\\r\\n     * @param {Function=} onReject - Optional function to execute once the promise\\r\\n     * is rejected.\\r\\n     * @param {Function=} onCancel - Optional function to execute if the user cancels\\r\\n     * the promise. Canceling results in the promise having a status of \\\'canceled\\\'.\\r\\n     *\\r\\n     * @returns Deferred\\r\\n     */\\n\\n  }, {\\n    key: "all",\\n    value: function all(iterable, onResolve, onReject, onCancel) {\\n      if (iterable == null || typeof iterable[Symbol.iterator] !== \\\'function\\\') {\\n        var e = "Cannot execute Deferred.all. First argument must be iterable.";\\n\\n        if (typeof onReject === \\\'function\\\') {\\n          e = onReject(e);\\n        }\\n\\n        return Deferred.reject(e);\\n      }\\n\\n      var array = _toConsumableArray(iterable);\\n\\n      var deferred = array.filter(function (item) {\\n        return item instanceof Deferred;\\n      });\\n      var result = new Deferred(undefined, function (resolveValue) {\\n        deferred.forEach(function (item) {\\n          item.resolve(resolveValue);\\n        });\\n        deferred.length = 0;\\n\\n        if (typeof onResolve === \\\'function\\\') {\\n          return onResolve(resolveValue);\\n        } else {\\n          return resolveValue;\\n        }\\n      }, function (error) {\\n        deferred.forEach(function (item) {\\n          item.reject(error);\\n        });\\n        deferred.length = 0;\\n\\n        if (typeof onReject === \\\'function\\\') {\\n          return onReject(error);\\n        } else {\\n          return error;\\n        }\\n      }, function (cancelValue) {\\n        deferred.forEach(function (item) {\\n          item.cancel(cancelValue);\\n        });\\n        deferred.length = 0;\\n\\n        if (typeof onCancel === \\\'function\\\') {\\n          return onCancel(cancelValue);\\n        } else {\\n          return cancelValue;\\n        }\\n      });\\n      var numItems = array.length;\\n      var itemTracker = {\\n        failed: false,\\n        numResolved: 0,\\n        resolutions: []\\n      };\\n      array.forEach(function (item, index) {\\n        if (itemTracker.failed) {\\n          return;\\n        } else if (!(item instanceof Promise)) {\\n          itemTracker.resolutions[index] = item;\\n          itemTracker.numResolved += 1;\\n\\n          if (itemTracker.numResolved === numItems) {\\n            result.resolve(itemTracker.resolutions);\\n          }\\n\\n          return;\\n        }\\n\\n        item.then(function (value) {\\n          if (!itemTracker.failed && !item.canceled) {\\n            itemTracker.resolutions[index] = value;\\n            itemTracker.numResolved += 1;\\n\\n            if (itemTracker.numResolved === numItems) {\\n              result.resolve(itemTracker.resolutions);\\n            }\\n          } else if (!itemTracker.failed) {\\n            itemTracker.failed = true;\\n            result.cancel(value);\\n          }\\n        }, function (error) {\\n          if (!itemTracker.failed) {\\n            itemTracker.failed = true;\\n            result.reject(error);\\n          }\\n        });\\n      });\\n      return result;\\n    }\\n  }]);\\n\\n  return Deferred;\\n}( /*#__PURE__*/_wrapNativeSuper(Promise));\\n\\n/* harmony default export */ const core_Deferred = (Deferred);\\n;// CONCATENATED MODULE: ./src/core/Utils.js\\nfunction Utils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Utils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Utils_createClass(Constructor, protoProps, staticProps) { if (protoProps) Utils_defineProperties(Constructor.prototype, protoProps); if (staticProps) Utils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * A collection of useful generic functions.\\r\\n *\\r\\n * @hideconstructor\\r\\n */\\n\\nvar Utils = /*#__PURE__*/function () {\\n  function Utils() {\\n    Utils_classCallCheck(this, Utils);\\n  }\\n\\n  Utils_createClass(Utils, null, [{\\n    key: "createId",\\n    value:\\n    /**\\r\\n     * @static\\r\\n     *\\r\\n     * Generate a unique id\\r\\n     *\\r\\n     * @returns {String}\\r\\n     */\\n    function createId() {\\n      return \\\'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx\\\'.replace(/[xy]/g, function (c) {\\n        var randomNumber = Math.floor((Date.now() + Math.random() * 16) % 16);\\n\\n        if (c === \\\'x\\\') {\\n          return randomNumber.toString(16);\\n        } // Set bit 6 and 7 to 0 and 1\\n\\n\\n        return (randomNumber & 0x3 | 0x8).toString(16);\\n      });\\n    }\\n    /**\\r\\n     * @static\\r\\n     *\\r\\n     * Check a name string against an array of strings to determine if it is unique.\\r\\n     * If it isn\\\'t, append incremented trailing integers to the end of the name\\r\\n     * until it is unique.\\r\\n     *\\r\\n     * @param {string} name - String name to make unique.\\r\\n     * @param {Array.<string>=} nameArray - Array of string names to check agains.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "getUniqueName",\\n    value: function getUniqueName(name) {\\n      var nameArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n\\n      // If the name isn\\\'t in the array return it right away\\n      if (!nameArray.includes(name)) {\\n        return name;\\n      }\\n\\n      var nameSet = new Set(nameArray); // Separate the name into string and trailing numbers\\n\\n      var matchGroup = name.match(/\\\\d*$/);\\n      var index = matchGroup.index;\\n      var baseName = name.slice(0, index);\\n      var increment = Number(matchGroup[0]); // Find the highest trailing number value for the base of the name\\n\\n      nameSet.forEach(function (setName) {\\n        var setMatchGroup = setName.match(/\\\\d*$/);\\n\\n        if (setName.slice(0, setMatchGroup.index) === baseName) {\\n          var setIncrement = Number(setMatchGroup[0]);\\n\\n          if (setIncrement > increment) {\\n            increment = setIncrement;\\n          }\\n        }\\n      }); // Increment the highest trailing number and append to the name\\n\\n      return "".concat(baseName).concat(increment + 1);\\n    }\\n    /**\\r\\n     * Return a deferred promise that will wait a given number of seconds before\\r\\n     * resolving. Pass delta time in milliseconds to the deferred promise\\\'s execute\\r\\n     * method in an update loop to progress time.\\r\\n     *\\r\\n     * @param {number} [seconds=0] - Number of seconds to wait before resolving.\\r\\n     * @param {Object=} options - Optional options object\\r\\n     * @param {Function} [options.onFinish] - Callback to execute once the wait time\\r\\n     * is met.\\r\\n     * @param {Function=} options.onProgress - Callback to execute each time the wait\\r\\n     * time progresses towards the target number of seconds. The amount of progress\\r\\n     * as a 0-1 percentage is passed as an argument.\\r\\n     * @param {Function=} options.onCancel - Callback to execute if the user cancels\\r\\n     * the wait before completion.\\r\\n     * @param {Function=} options.onError - Callback to execute if the wait stops\\r\\n     * because an error is encountered. The error message is passed as a parameter.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "wait",\\n    value: function wait() {\\n      var seconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\\n\\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n          onFinish = _ref.onFinish,\\n          onProgress = _ref.onProgress,\\n          onCancel = _ref.onCancel,\\n          onError = _ref.onError;\\n\\n      // Make sure seconds is numeric\\n      if (typeof seconds !== \\\'number\\\') {\\n        console.warn("Invalid seconds value ".concat(seconds, " for wait. Defaulting to 0."));\\n        seconds = 0;\\n      } // Resolve immediately if the wait time is not greater than 0\\n\\n\\n      if (seconds <= 0) {\\n        if (typeof onFinish === \\\'function\\\') {\\n          onFinish();\\n        }\\n\\n        return core_Deferred.resolve();\\n      }\\n\\n      var currentTime = 0;\\n      var totalTime = seconds * 1000; // convert to milliseconds\\n      // Executable to pass to Deferred, meant to be run in an update loop\\n\\n      var onUpdate = function onUpdate(resolve, reject, _cancel) {\\n        var deltaTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\\n\\n        if (typeof deltaTime !== \\\'number\\\') {\\n          var e = new Error("Invalid property wait deltaTime. DeltaTime must be a number.");\\n          reject(e);\\n          return;\\n        } // Make sure time has passed\\n\\n\\n        if (deltaTime === 0) {\\n          return;\\n        } // Signal progress\\n\\n\\n        currentTime += deltaTime;\\n\\n        if (currentTime < 0) {\\n          currentTime = 0;\\n        }\\n\\n        if (typeof onProgress === \\\'function\\\') {\\n          onProgress(Math.min(currentTime / totalTime, 1));\\n        } // Signal completion once time is up\\n\\n\\n        if (currentTime >= totalTime) {\\n          resolve();\\n        }\\n      };\\n\\n      return new core_Deferred(onUpdate, onFinish, onError, onCancel);\\n    }\\n    /**\\r\\n      * Get a random float number between a min (inclusive) and max (exclusive) value\\r\\n      * @param {number} min minimum value\\r\\n      * @param {number} max maximum value\\r\\n      * @returns {float}\\r\\n      */\\n\\n  }, {\\n    key: "getRandomFloat",\\n    value: function getRandomFloat(min, max) {\\n      return Math.random() * (max - min) + min;\\n    }\\n    /**\\r\\n      * Get a random integer number between a min (inclusive) and max (exclusive) value\\r\\n      * @param {number} min minimum value\\r\\n      * @param {number} max maximum value\\r\\n      * @returns {integer}\\r\\n      */\\n\\n  }, {\\n    key: "getRandomInt",\\n    value: function getRandomInt(min, max) {\\n      min = Math.ceil(min);\\n      max = Math.floor(max);\\n      return Math.floor(Math.random() * (max - min)) + min;\\n    }\\n  }]);\\n\\n  return Utils;\\n}();\\n\\n/* harmony default export */ const core_Utils = (Utils);\\n;// CONCATENATED MODULE: ./src/core/MathUtils.js\\nfunction MathUtils_toConsumableArray(arr) { return MathUtils_arrayWithoutHoles(arr) || MathUtils_iterableToArray(arr) || MathUtils_unsupportedIterableToArray(arr) || MathUtils_nonIterableSpread(); }\\n\\nfunction MathUtils_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction MathUtils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return MathUtils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return MathUtils_arrayLikeToArray(o, minLen); }\\n\\nfunction MathUtils_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction MathUtils_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return MathUtils_arrayLikeToArray(arr); }\\n\\nfunction MathUtils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction MathUtils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction MathUtils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction MathUtils_createClass(Constructor, protoProps, staticProps) { if (protoProps) MathUtils_defineProperties(Constructor.prototype, protoProps); if (staticProps) MathUtils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\nvar RadianToDegree = 180 / Math.PI;\\nvar DegreeToRadian = Math.PI / 180;\\n/**\\r\\n * A collection of useful math functions.\\r\\n *\\r\\n * @hideconstructor\\r\\n */\\n\\nvar MathUtils = /*#__PURE__*/function () {\\n  function MathUtils() {\\n    MathUtils_classCallCheck(this, MathUtils);\\n  }\\n\\n  MathUtils_createClass(MathUtils, null, [{\\n    key: "toDegrees",\\n    value:\\n    /**\\r\\n     * Convert the given angle from radians to degrees.\\r\\n     *\\r\\n     * @param {number} radians - Angle in radians.\\r\\n     *\\r\\n     * @returns {number} - Angle in degrees.\\r\\n     */\\n    function toDegrees(radians) {\\n      return radians * RadianToDegree;\\n    }\\n    /**\\r\\n     * Convert the given angle from degrees to radians.\\r\\n     *\\r\\n     * @param {number} degrees - Angle in degrees.\\r\\n     *\\r\\n     * @returns {number} - Angle in radians.\\r\\n     */\\n\\n  }, {\\n    key: "toRadians",\\n    value: function toRadians(degrees) {\\n      return degrees * DegreeToRadian;\\n    }\\n    /**\\r\\n     * Linearly interpolate between two values.\\r\\n     *\\r\\n     * @param {number} from - Start value.\\r\\n     * @param {number} to - Target value.\\r\\n     * @param {number} factor - 0-1 amount to interpolate between from and to.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "lerp",\\n    value: function lerp(from, to, factor) {\\n      return from + (to - from) * factor;\\n    }\\n    /**\\r\\n     * Clamp a number between 2 values.\\r\\n     *\\r\\n     * @param {number} value - Value to clamp.\\r\\n     * @param {number} [min=0] - Minumum value.\\r\\n     * @param {number} [max=1] - Maximum value.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "clamp",\\n    value: function clamp(value) {\\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\\n      return Math.max(min, Math.min(value, max));\\n    }\\n    /**\\r\\n     * Calculates the closest point on a given 2D line segement\\r\\n     * from a given 2D point.\\r\\n     *\\r\\n     * @param {Array.<number>} a - First point on line segment.\\r\\n     * @param {Array.<number>} b - Second point on line segment.\\r\\n     * @param {Array.<number>} p - 2D point.\\r\\n     *\\r\\n     * @returns {Array.<number>}\\r\\n     */\\n\\n  }, {\\n    key: "closestPointOnLine",\\n    value: function closestPointOnLine(a, b, p) {\\n      var distSqr = MathUtils.distanceSquared(a, b); // Line segment is a single point\\n\\n      if (distSqr === 0) {\\n        return a;\\n      }\\n\\n      var t = ((p[0] - a[0]) * (b[0] - a[0]) + (p[1] - a[1]) * (b[1] - a[1])) / distSqr;\\n\\n      var point = MathUtils_toConsumableArray(a);\\n\\n      if (t > 1) {\\n        point = MathUtils_toConsumableArray(b);\\n      } else if (t > 0) {\\n        point = [a[0] + t * (b[0] - a[0]), a[1] + t * (b[1] - a[1])];\\n      }\\n\\n      return point;\\n    }\\n    /**\\r\\n     * Gets the distance squared for two 2D points.\\r\\n     * @param {Array.<number>} a - 2D point.\\r\\n     * @param {Array.<number>} b - 2D point.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "distanceSquared",\\n    value: function distanceSquared(a, b) {\\n      return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]);\\n    }\\n    /**\\r\\n     * Triangulates a set of 2D points using an implementation\\r\\n     * of the Bowyer-Watson incremental Delaunay triangulation.\\r\\n     *\\r\\n     * @param {Array.<Array.<number>>} vertices - Array of 2D points.\\r\\n     *\\r\\n     * @returns {Array.<Array<number>>} - Array of triangle indices.\\r\\n     */\\n\\n  }, {\\n    key: "getDelaunayTriangulation",\\n    value: function getDelaunayTriangulation(vertices) {\\n      if (!vertices || vertices.length < 3) {\\n        throw new Error("Cannot get delaunay triangulation for points ".concat(vertices, ". Input must contain at least three points."));\\n      }\\n\\n      var minX = Number.POSITIVE_INFINITY;\\n      var minY = Number.POSITIVE_INFINITY;\\n      var maxX = Number.NEGATIVE_INFINITY;\\n      var maxY = Number.NEGATIVE_INFINITY;\\n      vertices.forEach(function (v) {\\n        minX = v[0] < minX ? v[0] : minX;\\n        minY = v[1] < minY ? v[1] : minY;\\n        maxX = v[0] > maxX ? v[0] : maxX;\\n        maxY = v[1] > maxY ? v[1] : maxY;\\n      });\\n      var dX = maxX - minX;\\n      var dY = maxY - minY;\\n      var midX = (minX + maxX) / 2;\\n      var midY = (minY + maxY) / 2;\\n      var dMax = dX > dY ? dX : dY;\\n      var superIndices = [vertices.length, vertices.length + 1, vertices.length + 2];\\n      var vertsWithSuper = [].concat(MathUtils_toConsumableArray(vertices), [[midX - 20 * dMax, midY - dMax], [midX, midY + 20 * dMax], [midX + 20 * dMax, midY - dMax]]);\\n      var superSortedIndices = MathUtils.sortPointsCCW(superIndices, vertsWithSuper);\\n      var superTriangle = {\\n        indices: superSortedIndices,\\n        edges: [[superSortedIndices[0], superSortedIndices[1]], [superSortedIndices[1], superSortedIndices[2]], [superSortedIndices[2], superSortedIndices[0]]]\\n      };\\n      var triangles = [superTriangle];\\n      vertsWithSuper.forEach(function (newVert, newIndex) {\\n        var invalidTriangles = [];\\n        triangles.forEach(function (triangle) {\\n          if (MathUtils.isPointInCircumCircle(vertsWithSuper[triangle.indices[0]], vertsWithSuper[triangle.indices[1]], vertsWithSuper[triangle.indices[2]], newVert)) {\\n            invalidTriangles.push(triangle);\\n          }\\n        });\\n        var boundingPoly = [];\\n        invalidTriangles.forEach(function (triangle) {\\n          triangle.edges.forEach(function (edge) {\\n            var count = 0;\\n            invalidTriangles.forEach(function (otherTriangle) {\\n              if (triangle !== otherTriangle) {\\n                otherTriangle.edges.forEach(function (otherEdge) {\\n                  if (edge[0] === otherEdge[0] && edge[1] === otherEdge[1] || edge[1] === otherEdge[0] && edge[0] === otherEdge[1]) {\\n                    count += 1;\\n                  }\\n                });\\n              }\\n            });\\n            if (count === 0) boundingPoly.push(edge);\\n          });\\n        });\\n        invalidTriangles.forEach(function (triangle) {\\n          triangles.splice(triangles.indexOf(triangle), 1);\\n        });\\n        boundingPoly.forEach(function (edge) {\\n          var sortedIndices = MathUtils.sortPointsCCW([edge[0], edge[1], newIndex], vertsWithSuper);\\n          triangles.push({\\n            indices: sortedIndices,\\n            edges: [[sortedIndices[0], sortedIndices[1]], [sortedIndices[1], sortedIndices[2]], [sortedIndices[2], sortedIndices[0]]]\\n          });\\n        });\\n      });\\n      var trianglesToRemove = [];\\n      triangles.forEach(function (triangle) {\\n        triangle.indices.forEach(function (index) {\\n          if (superIndices.includes(index)) {\\n            trianglesToRemove.push(triangle);\\n          }\\n        });\\n      });\\n      trianglesToRemove.forEach(function (triangle) {\\n        var index = triangles.indexOf(triangle);\\n\\n        if (index !== -1) {\\n          triangles.splice(index, 1);\\n        }\\n      });\\n      return triangles.map(function (triangle) {\\n        return triangle.indices;\\n      });\\n    }\\n    /**\\r\\n     * Determines if a given 2D point is within the cicrumcircle\\r\\n     * defined by three 2D points. The triangle points must be in\\r\\n     * counter-clockwise order a -> b -> c.\\r\\n     *\\r\\n     * @param {Array.<number>} a - First triangle point.\\r\\n     * @param {Array.<number>} b - Second triangle point.\\r\\n     * @param {Array.<number>} c - Third triangle point.\\r\\n     * @param {Array.<number>} p - 2D point.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "isPointInCircumCircle",\\n    value: function isPointInCircumCircle(a, b, c, p) {\\n      var ax = a[0] - p[0];\\n      var ay = a[1] - p[1];\\n      var bx = b[0] - p[0];\\n      var by = b[1] - p[1];\\n      var cx = c[0] - p[0];\\n      var cy = c[1] - p[1];\\n      return (ax * ax + ay * ay) * (bx * cy - cx * by) - (bx * bx + by * by) * (ax * cy - cx * ay) + (cx * cx + cy * cy) * (ax * by - bx * ay) > 0;\\n    }\\n    /**\\r\\n     * Determines if a given 2D point is within a given triangle.\\r\\n     *\\r\\n     * @param {Array.<number>} a - First triangle point.\\r\\n     * @param {Array.<number>} b - Second triangle point.\\r\\n     * @param {Array.<number>} c - Third triangle point.\\r\\n     * @param {Array.<number>} p - 2D point.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "isPointInTriangle",\\n    value: function isPointInTriangle(a, b, c, p) {\\n      var denom = (b[1] - c[1]) * (a[0] - c[0]) + (c[0] - b[0]) * (a[1] - c[1]);\\n      var aVal = ((b[1] - c[1]) * (p[0] - c[0]) + (c[0] - b[0]) * (p[1] - c[1])) / denom;\\n      var bVal = ((c[1] - a[1]) * (p[0] - c[0]) + (a[0] - c[0]) * (p[1] - c[1])) / denom;\\n      var cVal = 1 - aVal - bVal;\\n      return aVal >= 0 && aVal <= 1 && bVal >= 0 && bVal <= 1 && cVal >= 0 && cVal <= 1;\\n    }\\n    /**\\r\\n     * Gets the sorted indices of a given set of 2D points in\\r\\n     * counter-clockwise order.\\r\\n     *\\r\\n     * @param {Array.<number>} indices - List of indices.\\r\\n     * @param {Array.<Array.<number>>} vertices - List of 2D points.\\r\\n     *\\r\\n     * @returns {Array.<Array.<number>>} - List of sorted indices.\\r\\n     */\\n\\n  }, {\\n    key: "sortPointsCCW",\\n    value: function sortPointsCCW(indices, vertices) {\\n      var centroid = [0, 0];\\n      indices.forEach(function (index) {\\n        centroid[0] += vertices[index][0];\\n        centroid[1] += vertices[index][1];\\n      });\\n      centroid[0] /= indices.length;\\n      centroid[1] /= indices.length;\\n      indices.sort(function (a, b) {\\n        var bVal = Math.atan2(vertices[b][1] - centroid[1], vertices[b][0] - centroid[0]);\\n        var aVal = Math.atan2(vertices[a][1] - centroid[1], vertices[a][0] - centroid[0]);\\n        return aVal - bVal;\\n      });\\n      return indices;\\n    }\\n    /**\\r\\n     * Cacluates the area of a triangle\\r\\n     * @param {Array.<number>} a - First triangle point.\\r\\n     * @param {Array.<number>} b - Second triangle point.\\r\\n     * @param {Array.<number>} c - Third triangle point.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "triangleArea",\\n    value: function triangleArea(a, b, c) {\\n      return Math.abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) * 0.5);\\n    }\\n    /**\\r\\n     * Return the magnitude of a given vector array.\\r\\n     *\\r\\n     * @param {Array.<number>} vector - Array consisting of numbers.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getVectorMagnitude",\\n    value: function getVectorMagnitude(vector) {\\n      if (!(vector instanceof Array)) {\\n        throw new Error("Cannot get magnitude for vector ".concat(vector, ". Input must be an Array numbers."));\\n      }\\n\\n      var reducer = function reducer(accumulator, currentValue) {\\n        if (typeof currentValue !== \\\'number\\\') {\\n          throw new Error("Cannot get magnitude for vector ".concat(vector, ". All items in the input Array must be numbers."));\\n        }\\n\\n        return accumulator + Math.pow(currentValue, 2);\\n      };\\n\\n      return Math.sqrt(vector.reduce(reducer, 0));\\n    }\\n    /**\\r\\n     * Return the dot product between two vectors.\\r\\n     *\\r\\n     * @param {Array.<number>} vectorA - Array consisting of numbers.\\r\\n     * @param {Array.<number>} vectorB - Array consisting of numbers.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getDotProduct",\\n    value: function getDotProduct(vectorA, vectorB) {\\n      if (!(vectorA instanceof Array) || !(vectorB instanceof Array) || vectorA.length !== vectorB.length) {\\n        throw new Error("Cannot get dot product between ".concat(vectorA, " and ").concat(vectorB, ". Inputs must be vectors of the same length."));\\n      }\\n\\n      var result = 0;\\n      vectorA.forEach(function (valueA, index) {\\n        var valueB = vectorB[index];\\n\\n        if (typeof valueA !== \\\'number\\\' || typeof valueB !== \\\'number\\\') {\\n          throw new Error("Cannot get dot product between ".concat(vectorA, " and ").concat(vectorB, ". Vectors must only consist of numeric values."));\\n        }\\n\\n        result += valueA * valueB;\\n      });\\n      return result;\\n    }\\n    /**\\r\\n     * Return the angle in radians between vectorA and vectorB.\\r\\n     *\\r\\n     * @param {Array.<number>} vectorA - Array consisting of numbers.\\r\\n     * @param {Array.<number>} vectorB - Array consisting of numbers.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getAngleBetween",\\n    value: function getAngleBetween(vectorA, vectorB) {\\n      var normalA = this.normalizeVector(MathUtils_toConsumableArray(vectorA));\\n      var normalB = this.normalizeVector(MathUtils_toConsumableArray(vectorB));\\n      var dot = this.getDotProduct(normalA, normalB);\\n      return Math.acos(this.clamp(dot, -1, 1));\\n    }\\n    /**\\r\\n     * Multiply a 3x3 rotation matrix with a vector3.\\r\\n     *\\r\\n     * @param {Array.<number>} vector3 - Array consisting of 3 numbers representing\\r\\n     * a direction vector.\\r\\n     * @param {Array.<number>} matrix3 - An array of 9 numbers representing a row\\r\\n     * major rotation matrix.\\r\\n     *\\r\\n     * @returns {Array.<number>} - An array of 3 numbers representing the new direction\\r\\n     * of the vector.\\r\\n     */\\n\\n  }, {\\n    key: "rotateVector",\\n    value: function rotateVector(vector3, matrix3) {\\n      if (!(vector3 instanceof Array) || vector3.length !== 3 || !vector3.every(function (v) {\\n        return typeof v === \\\'number\\\';\\n      })) {\\n        throw new Error("Cannot rotate vector ".concat(vector3, " by rotation matrix ").concat(matrix3, ". Input vector must be an array of 3 numbers."));\\n      }\\n\\n      if (!(matrix3 instanceof Array) || matrix3.length !== 9 || !matrix3.every(function (v) {\\n        return typeof v === \\\'number\\\';\\n      })) {\\n        throw new Error("Cannot rotate vector ".concat(vector3, " by rotation matrix ").concat(matrix3, ". Input matrix3 must be an array of 9 numbers."));\\n      }\\n\\n      var x = matrix3[0] * vector3[0] + matrix3[3] * vector3[1] + matrix3[6] * vector3[2];\\n      var y = matrix3[1] * vector3[0] + matrix3[4] * vector3[1] + matrix3[7] * vector3[2];\\n      var z = matrix3[2] * vector3[0] + matrix3[5] * vector3[1] + matrix3[8] * vector3[2];\\n      return [x, y, z];\\n    }\\n    /**\\r\\n     * Normalize a given vector array.\\r\\n     *\\r\\n     * @param {Array.<number>} vector - Array consisting of numbers.\\r\\n     *\\r\\n     * @returns {Array.<number>} The original vector with normalized values, for chaining.\\r\\n     */\\n\\n  }, {\\n    key: "normalizeVector",\\n    value: function normalizeVector(vector) {\\n      var magnitude = this.getVectorMagnitude(vector);\\n\\n      if (magnitude === 0) {\\n        vector.fill(0);\\n      } else {\\n        vector.forEach(function (value, index) {\\n          vector[index] = value / magnitude;\\n        });\\n      }\\n\\n      return vector;\\n    }\\n    /**\\r\\n     * Extract the 3x3 rotation matrix from a given 4x4 transformation matrix.\\r\\n     *\\r\\n     * @param {Array.<number>} matrix4 - An array of 16 numbers representing a row\\r\\n     * major transformation matrix.\\r\\n     *\\r\\n     * @returns {Array.<number>} - An array of 9 numbers representing a row major\\r\\n     * rotation matrix.\\r\\n     */\\n\\n  }, {\\n    key: "getRotationMatrix",\\n    value: function getRotationMatrix(matrix4) {\\n      if (!(matrix4 instanceof Array) || matrix4.length !== 16 || !matrix4.every(function (v) {\\n        return typeof v === \\\'number\\\';\\n      })) {\\n        throw new Error("Cannot convert matrix ".concat(matrix4, " to a rotation matrix. Input matrix must be an array of 16 numbers."));\\n      } // Extract scale\\n\\n\\n      var scaleX = 1 / (this.getVectorMagnitude(matrix4.slice(0, 4)) || 1);\\n      var scaleY = 1 / (this.getVectorMagnitude(matrix4.slice(4, 8)) || 1);\\n      var scaleZ = 1 / (this.getVectorMagnitude(matrix4.slice(8, 12)) || 1);\\n      return [matrix4[0] * scaleX, matrix4[1] * scaleX, matrix4[2] * scaleX, matrix4[4] * scaleY, matrix4[5] * scaleY, matrix4[6] * scaleY, matrix4[8] * scaleZ, matrix4[9] * scaleZ, matrix4[10] * scaleZ];\\n    }\\n    /**\\r\\n     * Return an array containing the spherical coordinates of the given cartesian\\r\\n     * xyz coordinates.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {number} x - Position along the x axis.\\r\\n     * @param {number} y - Position along the y axis.\\r\\n     * @param {number} z - Position along the z axis.\\r\\n     *\\r\\n     * @returns {Array.<number>} - An array consisting of three numberes where index\\r\\n     * 0 represents the radius, index 1 represents the vertical/polar angle in radians\\r\\n     * and index 2 represents the horizontal/azimuthal angle in radians.\\r\\n     */\\n\\n  }, {\\n    key: "cartesianToSpherical",\\n    value: function cartesianToSpherical(x, y, z) {\\n      var r = this.getVectorMagnitude([x, y, z]); // Return identity if the vector has no length\\n\\n      if (r === 0) {\\n        return [0, 0, 0];\\n      }\\n\\n      return [r, Math.acos(this.clamp(y / r, -1, 1)), Math.atan2(x, z)];\\n    }\\n    /**\\r\\n     * Gradually change a value of a numeric property towards a goal over time using\\r\\n     * a critically damped spring function.\\r\\n     *\\r\\n     * @param {number} currentValue - The starting value.\\r\\n     * @param {number} targetValue- The goal value.\\r\\n     * @param {Array.<number>} [valueStore = [0, 0]] - An Array consisting of two\\r\\n     * numbers where the first number holds the result value and the second holds\\r\\n     * the velocity that resulted in that value. The same array should be provided\\r\\n     * with each call to this function.\\r\\n     * @param {number} [deltaTime = 1e-7] - The time since the last call to this function\\r\\n     * in seconds.\\r\\n     * @param {number} [smoothTime = 0.3] - The approximate amount of time in seconds\\r\\n     * it should take to reach the target value.\\r\\n     * @param {number} [maxSpeed = 1e7] - A clamping value for the maximum speed the\\r\\n     * value can change.\\r\\n     *\\r\\n     * @returns {Array.<number>} - The valueStore array.\\r\\n     */\\n\\n  }, {\\n    key: "dampValue",\\n    value: function dampValue(currentValue, targetValue) {\\n      var valueStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\\n      var deltaTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e-7;\\n      var smoothTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.3;\\n      var maxSpeed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1e7;\\n      smoothTime = Math.max(0.0001, smoothTime);\\n      deltaTime = Math.max(1e-7, deltaTime); // Find the delta between values and use it to estimate the previous value\\n\\n      var clampTime = maxSpeed * smoothTime;\\n      var deltaValue = currentValue - targetValue;\\n      var clampDeltaValue = this.clamp(deltaValue, -clampTime, clampTime);\\n      var lastValue = currentValue - clampDeltaValue; // Calculate damping factors\\n\\n      var d1 = 2 / smoothTime;\\n      var d2 = d1 * deltaTime;\\n      var d3 = 1 / (1 + d2 + 0.5 * Math.pow(d2, 2) + 0.25 * Math.pow(d2, 3));\\n      var d4 = (valueStore[1] + d1 * clampDeltaValue) * deltaTime; // Damp the target value and update the velocity\\n\\n      valueStore[0] = lastValue + (clampDeltaValue + d4) * d3;\\n      valueStore[1] = (valueStore[1] - d1 * d4) * d3; // Prevent overshooting\\n\\n      if (targetValue - currentValue > 0 === valueStore[0] > targetValue) {\\n        valueStore[0] = targetValue;\\n        valueStore[1] = (valueStore[0] - targetValue) / deltaTime;\\n      }\\n\\n      return valueStore;\\n    }\\n  }]);\\n\\n  return MathUtils;\\n}();\\n\\n/* harmony default export */ const core_MathUtils = (MathUtils);\\n;// CONCATENATED MODULE: ./src/core/HostEnvironment.js\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable import/prefer-default-export */\\n\\n/**\\r\\n * Indicates the type of host build.\\r\\n *\\r\\n * @type {string}\\r\\n */\\nvar env = \\\'core\\\';\\n\\n;// CONCATENATED MODULE: ./src/core/Messenger.js\\nfunction Messenger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Messenger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Messenger_createClass(Constructor, protoProps, staticProps) { if (protoProps) Messenger_defineProperties(Constructor.prototype, protoProps); if (staticProps) Messenger_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable no-underscore-dangle */\\n\\n/**\\r\\n * Class that can execute functions when local messages are received. Local messages\\r\\n * are prefixed with the instance\\\'s id.\\r\\n *\\r\\n * @alias core/Messenger\\r\\n *\\r\\n * @property {core/Messenger} GlobalMessenger - A messenger that can be used for\\r\\n * global messaging. When using static listen and emit methods they are executed\\r\\n * on this messenger.\\r\\n * @property {Object} EVENTS - Built-in events that the Messenger emits.\\r\\n */\\n\\nvar Messenger = /*#__PURE__*/function () {\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {any=} id - Id for the object. If none is provided a new id will\\r\\n   * be created. Id should be able to be represented as a string.\\r\\n   */\\n  function Messenger(id) {\\n    Messenger_classCallCheck(this, Messenger);\\n\\n    this._id = id !== undefined ? id : core_Utils.createId();\\n    this._dispatcher = window;\\n    this._callbacks = {};\\n    this._eventListeners = {};\\n  }\\n  /**\\r\\n   * Gets the string id of the object.\\r\\n   *\\r\\n   * @readonly\\r\\n   * @type {string}\\r\\n   */\\n\\n\\n  Messenger_createClass(Messenger, [{\\n    key: "id",\\n    get: function get() {\\n      return this._id;\\n    }\\n    /**\\r\\n     * Prefix a message with the instance id.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} message\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "_createLocalMessage",\\n    value: function _createLocalMessage(message) {\\n      return "".concat(this.id, ".").concat(message);\\n    }\\n    /**\\r\\n     * Return a function that will call a callback function and supply the event\\\'s\\r\\n     * detail property as an argument.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Function} callback\\r\\n     *\\r\\n     * @returns {Function}\\r\\n     */\\n\\n  }, {\\n    key: "_createListener",\\n    value: function _createListener(callback) {\\n      return function (e) {\\n        var value;\\n\\n        if (e.detail !== null) {\\n          value = e.detail;\\n        }\\n\\n        callback(value);\\n      };\\n    }\\n    /**\\r\\n     * Create an event object and send it to listeners.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} message - Event type name.\\r\\n     * @param {any=} value - Value to send to listeners.\\r\\n     *\\r\\n     * @returns {CustomEvent}\\r\\n     */\\n\\n  }, {\\n    key: "_createEvent",\\n    value: function _createEvent(message, value) {\\n      return new CustomEvent(message, {\\n        detail: value\\n      });\\n    }\\n    /**\\r\\n     * Register an event.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} message - Event type name.\\r\\n     * @param {Function} listener - A listener function generated using _createListener.\\r\\n     */\\n\\n  }, {\\n    key: "_addListener",\\n    value: function _addListener(message, listener) {\\n      this._dispatcher.addEventListener(this._createLocalMessage(message), listener);\\n    }\\n    /**\\r\\n     * Unregister an event.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} message - Event type name.\\r\\n     * @param {Function} listener - A listener function generated using _createListener.\\r\\n     */\\n\\n  }, {\\n    key: "_removeListener",\\n    value: function _removeListener(message, listener) {\\n      this._dispatcher.removeEventListener(this._createLocalMessage(message), listener);\\n    }\\n    /**\\r\\n     * Execute a function when a message is received for this object.\\r\\n     *\\r\\n     * @param {string} message - The message to listen for.\\r\\n     * @param {Function} callback - Function to execute once the message is received.\\r\\n     */\\n\\n  }, {\\n    key: "listenTo",\\n    value: function listenTo(message, callback) {\\n      if (typeof callback !== \\\'function\\\') {\\n        throw new Error("Cannot add listener for ".concat(message, " on ").concat(this.id, ". Callback must be a function."));\\n      }\\n\\n      if (this._callbacks[message] === undefined) {\\n        this._callbacks[message] = [];\\n        this._eventListeners[message] = [];\\n      }\\n\\n      var listener = this._createListener(callback);\\n\\n      this._callbacks[message].push(callback);\\n\\n      this._eventListeners[message].push(listener);\\n\\n      this._addListener(message, listener);\\n    }\\n    /**\\r\\n     * Prevent a function from being executed when a message is received for this\\r\\n     * object.\\r\\n     *\\r\\n     * @param {string} message - The message to stop listening for.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for the message.\\r\\n     */\\n\\n  }, {\\n    key: "stopListening",\\n    value: function stopListening(message, callback) {\\n      if (this._callbacks[message] === undefined) {\\n        return;\\n      } else if (callback === undefined) {\\n        // If no callback was defined, call stopListening on all callbacks for the message\\n        for (var i = this._callbacks[message].length - 1; i > -1; i--) {\\n          this.stopListening(message, this._callbacks[message][i]);\\n        }\\n\\n        return;\\n      } // If a callback was defined, make sure it\\\'s a listener\\n\\n\\n      var index = this._callbacks[message].indexOf(callback);\\n\\n      if (index === -1) {\\n        return;\\n      }\\n\\n      var listener = this._eventListeners[message][index];\\n\\n      this._removeListener(message, listener);\\n\\n      this._callbacks[message].splice(index, 1);\\n\\n      this._eventListeners[message].splice(index, 1);\\n\\n      if (this._callbacks[message].length === 0) {\\n        delete this._callbacks[message];\\n        delete this._eventListeners[message];\\n      }\\n    }\\n    /**\\r\\n     * De-register callback(s) from being executed when messages matching the given\\r\\n     * regular expression are received.\\r\\n     *\\r\\n     * @param {Regexp} regexp - regexp - The regular expression to filter messages with.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for messages matching the regular expression.\\r\\n     */\\n\\n  }, {\\n    key: "stopListeningByRegexp",\\n    value: function stopListeningByRegexp(regexp, callback) {\\n      var _this = this;\\n\\n      var messages = Object.keys(this._callbacks).filter(function (message) {\\n        return regexp.test(message);\\n      });\\n      messages.forEach(function (message) {\\n        _this.stopListening(message, callback);\\n      });\\n    }\\n    /**\\r\\n     * Prevent any functions from being executed when any message is received for\\r\\n     * this object.\\r\\n     */\\n\\n  }, {\\n    key: "stopListeningToAll",\\n    value: function stopListeningToAll() {\\n      var messages = Object.keys(this._callbacks);\\n\\n      for (var i = messages.length - 1; i > -1; i--) {\\n        this.stopListening(messages[i]);\\n      }\\n    }\\n    /**\\r\\n     * Send a message, causing listener functions for the message on this object\\r\\n     * to be executed.\\r\\n     *\\r\\n     * @param {string} message - The message to emit.\\r\\n     * @param {any=} value - Optional argument to pass to listener callbacks.\\r\\n     */\\n\\n  }, {\\n    key: "emit",\\n    value: function emit(message, value) {\\n      if (this._callbacks[message] === undefined) {\\n        return;\\n      }\\n\\n      message = this._createLocalMessage(message);\\n\\n      var event = this._createEvent(message, value);\\n\\n      this._dispatcher.dispatchEvent(event);\\n    }\\n    /**\\r\\n     * Execute a function when a message is received for the global Messenger instance.\\r\\n     *\\r\\n     * @static\\r\\n     *\\r\\n     * @param {string} message - The message to listen for.\\r\\n     * @param {Function} callback - Function to execute once the message is received.\\r\\n     */\\n\\n  }], [{\\n    key: "listenTo",\\n    value: function listenTo(message, callback, messenger) {\\n      this.GlobalMessenger.listenTo(message, callback, messenger);\\n    }\\n    /**\\r\\n     * Prevent a function from being executed when a message is received for the\\r\\n     * global Messenger instance.\\r\\n     *\\r\\n     * @static\\r\\n     *\\r\\n     * @param {string} message - The message to stop listening for.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for the message.\\r\\n     */\\n\\n  }, {\\n    key: "stopListening",\\n    value: function stopListening(message, callback) {\\n      this.GlobalMessenger.stopListening(message, callback);\\n    }\\n    /**\\r\\n     * De-register callback(s) from being executed on the global messengerr instance\\r\\n     * when messages matching the given regular expression are received.\\r\\n     *\\r\\n     * @param {Regexp} regexp - regexp - The regular expression to filter messages with.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for messages matching the regular expression.\\r\\n     */\\n\\n  }, {\\n    key: "stopListeningByRegexp",\\n    value: function stopListeningByRegexp(regexp, callback) {\\n      var _this2 = this;\\n\\n      var messages = Object.keys(this.GlobalMessenger._callbacks).filter(function (message) {\\n        return regexp.test(message);\\n      });\\n      messages.forEach(function (message) {\\n        _this2.stopListening(message, callback);\\n      });\\n    }\\n    /**\\r\\n     * Prevent any functions from being executed when any message is received for\\r\\n     * the global Messenger instance.\\r\\n     *\\r\\n     * @static\\r\\n     */\\n\\n  }, {\\n    key: "stopListeningToAll",\\n    value: function stopListeningToAll() {\\n      this.GlobalMessenger.stopListeningToAll();\\n    }\\n    /**\\r\\n     * Send a message, causing listener functions for the message on the global Messenger\\r\\n     * instance to be executed.\\r\\n     *\\r\\n     * @static\\r\\n     *\\r\\n     * @param {string} message - The message to emit.\\r\\n     * @param {any=} value - Optional argument to pass to listener callbacks.\\r\\n     */\\n\\n  }, {\\n    key: "emit",\\n    value: function emit(message, value) {\\n      this.GlobalMessenger.emit(message, value);\\n    }\\n  }]);\\n\\n  return Messenger;\\n}();\\n\\nObject.defineProperties(Messenger, {\\n  GlobalMessenger: {\\n    value: new Messenger(),\\n    writable: false\\n  },\\n  EVENTS: {\\n    value: {},\\n    writable: false\\n  }\\n});\\n/* harmony default export */ const core_Messenger = (Messenger);\\n;// CONCATENATED MODULE: ./src/core/AbstractHostFeature.js\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || AbstractHostFeature_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction AbstractHostFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AbstractHostFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AbstractHostFeature_arrayLikeToArray(o, minLen); }\\n\\nfunction AbstractHostFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction AbstractHostFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AbstractHostFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AbstractHostFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractHostFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractHostFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * Base class for all host features. Keeps a reference to the host object managing\\r\\n * the feature.\\r\\n *\\r\\n * @abstract\\r\\n *\\r\\n * @property {Object} EVENTS - Built-in messages that the feature emits. When the\\r\\n * feature is added to a {@link core/HostObject}, event names will be prefixed by the\\r\\n * name of the feature class + \\\'.\\\'.\\r\\n * @property {string} [EVENTS.update=onUpdate] - Message that is emitted after\\r\\n * each call to [update]{@link AbstractHostFeature#update}.\\r\\n * @property {Object} SERVICES - Any AWS services that are necessary for the\\r\\n * feature to function.\\r\\n */\\n\\nvar AbstractHostFeature = /*#__PURE__*/function () {\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/HostObject} host - The HostObject managing the feature.\\r\\n   */\\n  function AbstractHostFeature(host) {\\n    AbstractHostFeature_classCallCheck(this, AbstractHostFeature);\\n\\n    this._host = host;\\n  }\\n  /**\\r\\n   * Adds a namespace to the host with the name of the feature to contain properties\\r\\n   * and methods from the feature that users of the host need access to.\\r\\n   */\\n\\n\\n  AbstractHostFeature_createClass(AbstractHostFeature, [{\\n    key: "installApi",\\n    value: function installApi() {\\n      var _this = this;\\n\\n      var events = {};\\n      var api = {\\n        EVENTS: events\\n      }; // Add the class name to event names\\n\\n      Object.entries(this.constructor.EVENTS).forEach(function (_ref) {\\n        var _ref2 = _slicedToArray(_ref, 2),\\n            name = _ref2[0],\\n            value = _ref2[1];\\n\\n        events[name] = "".concat(_this.constructor.name, ".").concat(value);\\n      });\\n      this._host[this.constructor.name] = api;\\n      return api;\\n    }\\n    /**\\r\\n     * Gets the host that manages the feature.\\r\\n     *\\r\\n     * @readonly\\r\\n     */\\n\\n  }, {\\n    key: "host",\\n    get: function get() {\\n      return this._host;\\n    }\\n    /**\\r\\n     * Gets the engine owner object of the host.\\r\\n     *\\r\\n     * @readonly\\r\\n     */\\n\\n  }, {\\n    key: "owner",\\n    get: function get() {\\n      return this._host.owner;\\n    }\\n    /**\\r\\n     * Listen to a feature message from the host object.\\r\\n     *\\r\\n     * @param {string} message - Message to listen for.\\r\\n     * @param {Function} callback - The callback to execute when the message is received.\\r\\n     */\\n\\n  }, {\\n    key: "listenTo",\\n    value: function listenTo(message, callback) {\\n      this._host.listenTo(message, callback);\\n    }\\n    /**\\r\\n     * Listen to a feature message from the global messenger. Feature messages will\\r\\n     * be prefixed with the class name of the feature.\\r\\n     *\\r\\n     * @param {string} message - Message to listen for.\\r\\n     * @param {Function} callback - The callback to execute when the message is received.\\r\\n     */\\n\\n  }, {\\n    key: "stopListening",\\n    value:\\n    /**\\r\\n     * Stop listening to a message from the host object.\\r\\n     *\\r\\n     * @param {string} message - Message to stop listening for.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for the message.\\r\\n     */\\n    function stopListening(message, callback) {\\n      this._host.stopListening(message, callback);\\n    }\\n    /**\\r\\n     * Stop listening to a message from the global messenger.\\r\\n     *\\r\\n     * @param {string} message - Message to stop listening for.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for the message.\\r\\n     */\\n\\n  }, {\\n    key: "stopListeningByRegexp",\\n    value:\\n    /**\\r\\n     * Stop listening to a message matching the given regular expression from the\\r\\n     * host object.\\r\\n     *\\r\\n     * @param {Regexp} regexp - The regular expression to stop listening for.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for the message.\\r\\n     */\\n    function stopListeningByRegexp(regexp, callback) {\\n      this._host.stopListeningByRegexp(regexp, callback);\\n    }\\n    /**\\r\\n     * Stop listening to a message matching the given regular expression from the\\r\\n     * global messenger.\\r\\n     *\\r\\n     * @param {Regexp} regexp - The regular expression to stop listening for.\\r\\n     * @param {Function=} callback - Optional callback to remove. If none is defined,\\r\\n     * remove all callbacks for the message.\\r\\n     */\\n\\n  }, {\\n    key: "stopListeningToAll",\\n    value:\\n    /**\\r\\n     * Stop listening to all messages.\\r\\n     */\\n    function stopListeningToAll() {\\n      this._host.stopListeningToAll();\\n    }\\n    /**\\r\\n     * Stop listening to all feature messages.\\r\\n     */\\n\\n  }, {\\n    key: "emit",\\n    value:\\n    /**\\r\\n     * Emit feature messages from the host. Feature messages will be prefixed with\\r\\n     * the class name of the feature.\\r\\n     *\\r\\n     * @param {string} message - The message to emit.\\r\\n     * @param {any=} value - Optional parameter to pass to listener callbacks.\\r\\n     */\\n    function emit(message, value) {\\n      message = "".concat(this.constructor.name, ".").concat(message);\\n\\n      this._host.emit(message, value);\\n    }\\n    /**\\r\\n     * Emit feature messages from the global messenger. Feature messages will be prefixed\\r\\n     * with the class name of the feature.\\r\\n     *\\r\\n     * @param {string} message - The message to emit.\\r\\n     * @param {any=} value - Optional parameter to pass to listener callbacks.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value:\\n    /**\\r\\n     * Executes each time the host is updated.\\r\\n     *\\r\\n     * @param {number} deltaTime - Amount of time since the last host update was\\r\\n     * called.\\r\\n     */\\n    function update(deltaTime) {\\n      this.emit(this.constructor.EVENTS.update, deltaTime);\\n    }\\n    /**\\r\\n     * Clean up once the feature is no longer in use. Remove the feature namespace\\r\\n     * from the host and remove reference to the host.\\r\\n     */\\n\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      var _this2 = this;\\n\\n      Object.keys(this._host[this.constructor.name]).forEach(function (name) {\\n        delete _this2._host[_this2.constructor.name][name];\\n      });\\n      delete this._host[this.constructor.name];\\n      delete this._host;\\n    }\\n    /**\\r\\n     * Applies a sequence of mixin class factory functions to this class and\\r\\n     * returns the result. Each function is expected to return a class that\\r\\n     * extends the class it was given. The functions are applied in the order\\r\\n     * that parameters are given, meaning that the first factory will\\r\\n     * extend this base class.\\r\\n     *\\r\\n     * @param {...Function} mixinClassFactories Class factory functions that will\\r\\n     * be applied.\\r\\n     *\\r\\n     * @returns {Class} A class that is the result of applying the factory functions.\\r\\n     * The resulting class will always inherit from AbstractHostFeature.\\r\\n     */\\n\\n  }], [{\\n    key: "listenTo",\\n    value: function listenTo(message, callback) {\\n      message = "".concat(this.name, ".").concat(message);\\n      core_Messenger.listenTo(message, callback);\\n    }\\n  }, {\\n    key: "stopListening",\\n    value: function stopListening(message, callback) {\\n      message = "".concat(this.name, ".").concat(message);\\n      core_Messenger.stopListening(message, callback);\\n    }\\n  }, {\\n    key: "stopListeningByRegexp",\\n    value: function stopListeningByRegexp(regexp, callback) {\\n      regexp = new RegExp("^".concat(this.name, ".").concat(regexp.source.replace(/\\\\^/, \\\'\\\')));\\n      core_Messenger.stopListeningByRegexp(regexp, callback);\\n    }\\n  }, {\\n    key: "stopListeningToAll",\\n    value: function stopListeningToAll() {\\n      core_Messenger.stopListeningByRegexp(new RegExp("^".concat(this.name, ".")));\\n    }\\n  }, {\\n    key: "emit",\\n    value: function emit(message, value) {\\n      message = "".concat(this.name, ".").concat(message);\\n      core_Messenger.emit(message, value);\\n    }\\n  }, {\\n    key: "mix",\\n    value: function mix() {\\n      var ResultClass = this;\\n\\n      for (var _len = arguments.length, mixinClassFactories = new Array(_len), _key = 0; _key < _len; _key++) {\\n        mixinClassFactories[_key] = arguments[_key];\\n      }\\n\\n      mixinClassFactories.forEach(function (mixinClassFactory) {\\n        ResultClass = mixinClassFactory(ResultClass);\\n      });\\n      return ResultClass;\\n    }\\n  }]);\\n\\n  return AbstractHostFeature;\\n}();\\n\\nObject.defineProperties(AbstractHostFeature, {\\n  EVENTS: {\\n    value: {\\n      update: \\\'onUpdate\\\'\\n    },\\n    writable: false\\n  },\\n  SERVICES: {\\n    value: {},\\n    writable: false\\n  }\\n});\\n/* harmony default export */ const core_AbstractHostFeature = (AbstractHostFeature);\\n;// CONCATENATED MODULE: ./src/core/HostObject.js\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction HostObject_construct(Parent, args, Class) { if (HostObject_isNativeReflectConstruct()) { HostObject_construct = Reflect.construct; } else { HostObject_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) HostObject_setPrototypeOf(instance, Class.prototype); return instance; }; } return HostObject_construct.apply(null, arguments); }\\n\\nfunction HostObject_typeof(obj) { "@babel/helpers - typeof"; return HostObject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, HostObject_typeof(obj); }\\n\\nfunction HostObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction HostObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction HostObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) HostObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) HostObject_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction HostObject_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) HostObject_setPrototypeOf(subClass, superClass); }\\n\\nfunction HostObject_setPrototypeOf(o, p) { HostObject_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return HostObject_setPrototypeOf(o, p); }\\n\\nfunction HostObject_createSuper(Derived) { var hasNativeReflectConstruct = HostObject_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = HostObject_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = HostObject_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return HostObject_possibleConstructorReturn(this, result); }; }\\n\\nfunction HostObject_possibleConstructorReturn(self, call) { if (call && (HostObject_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return HostObject_assertThisInitialized(self); }\\n\\nfunction HostObject_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction HostObject_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction HostObject_getPrototypeOf(o) { HostObject_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return HostObject_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n/**\\r\\n * Object that manages access to all Host features. Contains a reference to\\r\\n * engine-specific visuals if applicable.\\r\\n *\\r\\n * @extends core/Messenger\\r\\n * @alias core/HostObject\\r\\n *\\r\\n * @property {Object} EVENTS - Built-in messages that the Messenger emits.\\r\\n * @property {string} [EVENTS.update=\\\'onUpdate\\\'] - Message that is emitted after\\r\\n * each call to [update]{@link core/HostObject#update}.\\r\\n * @property {string} [EVENTS.addFeature=\\\'onAddFeature\\\'] - Message that is emitted\\r\\n * after each call to [addFeature]{@link core/HostObject#addFeature}.\\r\\n * @property {string} [EVENTS.removeFeature=\\\'onRemoveFeature\\\'] - Message that is emitted\\r\\n * after each call to [removeFeature]{@link core/HostObject#removeFeature}.\\r\\n */\\n\\nvar HostObject = /*#__PURE__*/function (_Messenger) {\\n  HostObject_inherits(HostObject, _Messenger);\\n\\n  var _super = HostObject_createSuper(HostObject);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object=} options - Options for the host.\\r\\n   * @param {Object=} options.owner - Optional engine-specific owner of the host.\\r\\n   */\\n  function HostObject() {\\n    var _this;\\n\\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\\n        _ref$owner = _ref.owner,\\n        owner = _ref$owner === void 0 ? {} : _ref$owner;\\n\\n    HostObject_classCallCheck(this, HostObject);\\n\\n    // If an owner is specified, use its id for messaging\\n    _this = _super.call(this, owner.id);\\n    _this._owner = owner;\\n    _this._features = {};\\n    _this._waits = [];\\n    _this._lastUpdate = _this.now;\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets the engine owner object of the host.\\r\\n   *\\r\\n   * @readonly\\r\\n   * @type {Object}\\r\\n   */\\n\\n\\n  HostObject_createClass(HostObject, [{\\n    key: "owner",\\n    get: function get() {\\n      return this._owner;\\n    }\\n    /**\\r\\n     * Gets the current time in milliseconds.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "now",\\n    get: function get() {\\n      return Date.now();\\n    }\\n    /**\\r\\n     * Gets the amount of time in milliseconds since update was last called.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "deltaTime",\\n    get: function get() {\\n      return this.now - this._lastUpdate;\\n    }\\n    /**\\r\\n     * This function should be called in the engine\\\'s render loop. Executes update\\r\\n     * loops for all features.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update() {\\n      var currentTime = this.now;\\n      var dt = this.deltaTime; // Progress stored waits\\n\\n      this._waits.forEach(function (wait) {\\n        wait.execute(dt);\\n      }); // Update all features\\n\\n\\n      Object.values(this._features).forEach(function (feature) {\\n        feature.update(dt);\\n      }); // Notify listeners an update occured\\n\\n      this.emit(this.constructor.EVENTS.update, dt);\\n      this._lastUpdate = currentTime;\\n    }\\n    /**\\r\\n     * Return a deferred promise that will wait a given number of seconds before\\r\\n     * resolving. The host will continuously update the wait promise during the\\r\\n     * update loop until it resolves.\\r\\n     *\\r\\n     * @param {number} [seconds=0] - Number of seconds to wait before resolving.\\r\\n     * @param {Object=} options - Optional options object\\r\\n     * @param {Function} [options.onFinish] - Callback to execute once the wait time\\r\\n     * is met.\\r\\n     * @param {Function=} options.onProgress - Callback to execute each time the wait\\r\\n     * time progresses towards the target number of seconds. The amount of progress\\r\\n     * as a 0-1 percentage is passed as an argument.\\r\\n     * @param {Function=} options.onCancel - Callback to execute if the user cancels\\r\\n     * the wait before completion.\\r\\n     * @param {Function=} options.onError - Callback to execute if the wait stops\\r\\n     * because an error is encountered. The error message is passed as a parameter.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "wait",\\n    value: function wait(seconds) {\\n      var _this2 = this;\\n\\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n          onFinish = _ref2.onFinish,\\n          onProgress = _ref2.onProgress,\\n          onCancel = _ref2.onCancel,\\n          onError = _ref2.onError;\\n\\n      var wait = core_Utils.wait(seconds, {\\n        onFinish: onFinish,\\n        onProgress: onProgress,\\n        onCancel: onCancel,\\n        onError: onError\\n      });\\n\\n      this._waits.push(wait); // Once the wait promise is no longer pending remove it from the waits array\\n\\n\\n      var onComplete = function onComplete() {\\n        _this2._waits.splice(_this2._waits.indexOf(wait), 1);\\n      };\\n\\n      wait.then(onComplete, onComplete);\\n      return wait;\\n    }\\n    /**\\r\\n     * Instantiate a new Host feature and store it. Features must inherit from\\r\\n     * AbstractHostFeature.\\r\\n     *\\r\\n     * @param {Class} FeatureClass - Class that will instantiate the feature. Must\\r\\n     * extend {@link AbstractHostFeature}.\\r\\n     * @param {boolean} [force=false] - Whether or not to overwrite an existing\\r\\n     * feature if one of this type already exists on the object.\\r\\n     * @param  {...any} args - Additional arguments to pass to the FeatureClass\\r\\n     * constructor. The HostObject will always be passed as the first argument.\\r\\n     *\\r\\n     * @returns {boolean} - Whether or not a feature was successfully added.\\r\\n     */\\n\\n  }, {\\n    key: "addFeature",\\n    value: function addFeature(FeatureClass) {\\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n\\n      var inputType = HostObject_typeof(FeatureClass); // Make sure the FeatureClass can be executed\\n\\n\\n      if (inputType !== \\\'function\\\') {\\n        throw new Error("Cannot add feature to host ".concat(this.id, ". FeatureClass must be a class."));\\n      } // Make sure the feature is a host feature\\n      else if (!(FeatureClass.prototype instanceof core_AbstractHostFeature)) {\\n        throw new Error("Cannot add feature ".concat(FeatureClass.name, " to host ").concat(this.id, ". FeatureClass must extend AbstractHostFeature."));\\n      } // Check if the FeatureClass already exists on this object\\n\\n\\n      if (this._features[FeatureClass.name] !== undefined) {\\n        if (force) {\\n          console.warn("Feature ".concat(FeatureClass.name, " already exists on host ").concat(this.id, ". Existing feature will be overwritten."));\\n        } else {\\n          throw new Error("Feature ".concat(FeatureClass.name, " already exists on host ").concat(this.id, ". Use \\\'force\\\' argument to overwrite the feature."));\\n        }\\n      } // Initialize the feature\\n\\n\\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\\n        args[_key - 2] = arguments[_key];\\n      }\\n\\n      var feature = HostObject_construct(FeatureClass, [this].concat(args));\\n\\n      feature.installApi();\\n      this._features[FeatureClass.name] = feature;\\n      this.emit(this.constructor.EVENTS.addFeature, FeatureClass.name);\\n      return true;\\n    }\\n    /**\\r\\n     * Remove a feature from the object.\\r\\n     *\\r\\n     * @param {string} typeName - Name of the type of feature to remove.\\r\\n     *\\r\\n     * @returns {boolean} - Whether or not a feature was successfully removed.\\r\\n     */\\n\\n  }, {\\n    key: "removeFeature",\\n    value: function removeFeature(typeName) {\\n      if (this._features[typeName] === undefined) {\\n        console.warn("Feature of type ".concat(typeName, " does not exist on host ").concat(this.id, ". No feature will be removed."));\\n        return false;\\n      } else {\\n        // Remove the feature\\n        this.emit(this.constructor.EVENTS.removeFeature, typeName);\\n\\n        this._features[typeName].discard();\\n\\n        delete this._features[typeName];\\n        return true;\\n      }\\n    }\\n    /**\\r\\n     * Indicate whether a specified feature is installed on the host.\\r\\n     *\\r\\n     * @param {string} typeName - Name of the type of feature to look for.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "hasFeature",\\n    value: function hasFeature(typeName) {\\n      return !!this._features[typeName];\\n    }\\n    /**\\r\\n     * List the names of the features installed on the host.\\r\\n     *\\r\\n     * @returns {Array.<string>}\\r\\n     */\\n\\n  }, {\\n    key: "listFeatures",\\n    value: function listFeatures() {\\n      return Object.keys(this._features);\\n    }\\n  }]);\\n\\n  return HostObject;\\n}(core_Messenger);\\n\\nObject.defineProperty(HostObject, \\\'EVENTS\\\', {\\n  value: _objectSpread(_objectSpread({}, Object.getPrototypeOf(HostObject).EVENTS), {}, {\\n    update: \\\'onUpdate\\\',\\n    addFeature: \\\'onAddFeature\\\',\\n    removeFeature: \\\'onRemoveFeature\\\'\\n  }),\\n  writable: false\\n});\\n/* harmony default export */ const core_HostObject = (HostObject);\\n;// CONCATENATED MODULE: ./src/core/animpack/Easing.js\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * @typedef {Object} EasingObject Object containing easing functions\\r\\n * @property {Function} In - Easing \\\'In\\\' function. Should use the signature (k:number):number.\\r\\n * @property {Function} Out - Easing \\\'Out\\\' function. Should use the signature (k:number):number.\\r\\n * @property {Function} InOut - Easing \\\'InOut\\\' function. Should use the signature (k:number):number.\\r\\n */\\n\\n/**\\r\\n * Linear Easing\\r\\n * @type {EasingObject}\\r\\n */\\nvar Linear = {\\n  None: function None(k) {\\n    return k;\\n  },\\n  In: function In(k) {\\n    return k;\\n  },\\n  Out: function Out(k) {\\n    return k;\\n  },\\n  InOut: function InOut(k) {\\n    return k;\\n  }\\n};\\n/**\\r\\n * Quadratic Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Quadratic = {\\n  In: function In(k) {\\n    return k * k;\\n  },\\n  Out: function Out(k) {\\n    return k * (2 - k);\\n  },\\n  InOut: function InOut(k) {\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return 0.5 * k * k;\\n    }\\n\\n    return -0.5 * (--k * (k - 2) - 1);\\n  }\\n};\\n/**\\r\\n * Cubic Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Cubic = {\\n  In: function In(k) {\\n    return k * k * k;\\n  },\\n  Out: function Out(k) {\\n    return --k * k * k + 1;\\n  },\\n  InOut: function InOut(k) {\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return 0.5 * k * k * k;\\n    }\\n\\n    k -= 2;\\n    return 0.5 * (k * k * k + 2);\\n  }\\n};\\n/**\\r\\n * Quartic Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Quartic = {\\n  In: function In(k) {\\n    return k * k * k * k;\\n  },\\n  Out: function Out(k) {\\n    return 1 - --k * k * k * k;\\n  },\\n  InOut: function InOut(k) {\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return 0.5 * k * k * k * k;\\n    }\\n\\n    k -= 2;\\n    return -0.5 * (k * k * k * k - 2);\\n  }\\n};\\n/**\\r\\n * Quintic Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Quintic = {\\n  In: function In(k) {\\n    return k * k * k * k * k;\\n  },\\n  Out: function Out(k) {\\n    return --k * k * k * k * k + 1;\\n  },\\n  InOut: function InOut(k) {\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return 0.5 * k * k * k * k * k;\\n    }\\n\\n    k -= 2;\\n    return 0.5 * (k * k * k * k * k + 2);\\n  }\\n};\\n/**\\r\\n * Sinusoidal Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Sinusoidal = {\\n  In: function In(k) {\\n    return 1 - Math.cos(k * Math.PI / 2);\\n  },\\n  Out: function Out(k) {\\n    return Math.sin(k * Math.PI / 2);\\n  },\\n  InOut: function InOut(k) {\\n    return 0.5 * (1 - Math.cos(Math.PI * k));\\n  }\\n};\\n/**\\r\\n * Exponential Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Exponential = {\\n  In: function In(k) {\\n    return k === 0 ? 0 : Math.pow(1024, k - 1);\\n  },\\n  Out: function Out(k) {\\n    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\\n  },\\n  InOut: function InOut(k) {\\n    if (k === 0) {\\n      return 0;\\n    }\\n\\n    if (k === 1) {\\n      return 1;\\n    }\\n\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return 0.5 * Math.pow(1024, k - 1);\\n    }\\n\\n    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\\n  }\\n};\\n/**\\r\\n * Circular Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Circular = {\\n  In: function In(k) {\\n    return 1 - Math.sqrt(1 - k * k);\\n  },\\n  Out: function Out(k) {\\n    return Math.sqrt(1 - --k * k);\\n  },\\n  InOut: function InOut(k) {\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return -0.5 * (Math.sqrt(1 - k * k) - 1);\\n    }\\n\\n    k -= 2;\\n    return 0.5 * (Math.sqrt(1 - k * k) + 1);\\n  }\\n};\\n/**\\r\\n * Elastic Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Elastic = {\\n  In: function In(k) {\\n    var s;\\n    var a = 0.1;\\n    var p = 0.4;\\n\\n    if (k === 0) {\\n      return 0;\\n    }\\n\\n    if (k === 1) {\\n      return 1;\\n    }\\n\\n    if (!a || a < 1) {\\n      a = 1;\\n      s = p / 4;\\n    } else {\\n      s = p * Math.asin(1 / a) / (2 * Math.PI);\\n    }\\n\\n    k -= 1;\\n    return -(a * Math.pow(2, 10 * k) * Math.sin((k - s) * (2 * Math.PI) / p));\\n  },\\n  Out: function Out(k) {\\n    var s;\\n    var a = 0.1;\\n    var p = 0.4;\\n\\n    if (k === 0) {\\n      return 0;\\n    }\\n\\n    if (k === 1) {\\n      return 1;\\n    }\\n\\n    if (!a || a < 1) {\\n      a = 1;\\n      s = p / 4;\\n    } else {\\n      s = p * Math.asin(1 / a) / (2 * Math.PI);\\n    }\\n\\n    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;\\n  },\\n  InOut: function InOut(k) {\\n    var s;\\n    var a = 0.1;\\n    var p = 0.4;\\n\\n    if (k === 0) {\\n      return 0;\\n    }\\n\\n    if (k === 1) {\\n      return 1;\\n    }\\n\\n    if (!a || a < 1) {\\n      a = 1;\\n      s = p / 4;\\n    } else {\\n      s = p * Math.asin(1 / a) / (2 * Math.PI);\\n    }\\n\\n    k *= 2;\\n\\n    if (k < 1) {\\n      k -= 1;\\n      return -0.5 * (a * Math.pow(2, 10 * k) * Math.sin((k - s) * (2 * Math.PI) / p));\\n    }\\n\\n    k -= 1;\\n    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\\n  }\\n};\\n/**\\r\\n * Back Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Back = {\\n  In: function In(k) {\\n    var s = 1.70158;\\n    return k * k * ((s + 1) * k - s);\\n  },\\n  Out: function Out(k) {\\n    var s = 1.70158;\\n    return --k * k * ((s + 1) * k + s) + 1;\\n  },\\n  InOut: function InOut(k) {\\n    var s = 1.70158 * 1.525;\\n    k *= 2;\\n\\n    if (k < 1) {\\n      return 0.5 * (k * k * ((s + 1) * k - s));\\n    }\\n\\n    k -= 2;\\n    return 0.5 * (k * k * ((s + 1) * k + s) + 2);\\n  }\\n};\\n/**\\r\\n * Bounce Easing\\r\\n * @type {EasingObject}\\r\\n */\\n\\nvar Bounce = {\\n  In: function In(k) {\\n    return 1 - Bounce.Out(1 - k);\\n  },\\n  Out: function Out(k) {\\n    if (k < 1 / 2.75) {\\n      return 7.5625 * k * k;\\n    } else if (k < 2 / 2.75) {\\n      k -= 1.5;\\n      return 7.5625 * (k / 2.75) * k + 0.75;\\n    } else if (k < 2.5 / 2.75) {\\n      k -= 2.25;\\n      return 7.5625 * (k / 2.75) * k + 0.9375;\\n    }\\n\\n    k -= 2.625;\\n    return 7.5625 * (k / 2.75) * k + 0.984375;\\n  },\\n  InOut: function InOut(k) {\\n    if (k < 0.5) {\\n      return Bounce.In(k * 2) * 0.5;\\n    }\\n\\n    return Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\\n  }\\n};\\n;// CONCATENATED MODULE: ./src/core/FeatureDependentInterface.js\\nfunction FeatureDependentInterface_typeof(obj) { "@babel/helpers - typeof"; return FeatureDependentInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FeatureDependentInterface_typeof(obj); }\\n\\nfunction FeatureDependentInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction FeatureDependentInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? FeatureDependentInterface_ownKeys(Object(source), !0).forEach(function (key) { FeatureDependentInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : FeatureDependentInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction FeatureDependentInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction FeatureDependentInterface_slicedToArray(arr, i) { return FeatureDependentInterface_arrayWithHoles(arr) || FeatureDependentInterface_iterableToArrayLimit(arr, i) || FeatureDependentInterface_unsupportedIterableToArray(arr, i) || FeatureDependentInterface_nonIterableRest(); }\\n\\nfunction FeatureDependentInterface_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction FeatureDependentInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FeatureDependentInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FeatureDependentInterface_arrayLikeToArray(o, minLen); }\\n\\nfunction FeatureDependentInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction FeatureDependentInterface_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction FeatureDependentInterface_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\\n\\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = FeatureDependentInterface_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction FeatureDependentInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) FeatureDependentInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction FeatureDependentInterface_setPrototypeOf(o, p) { FeatureDependentInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FeatureDependentInterface_setPrototypeOf(o, p); }\\n\\nfunction FeatureDependentInterface_createSuper(Derived) { var hasNativeReflectConstruct = FeatureDependentInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = FeatureDependentInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = FeatureDependentInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return FeatureDependentInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction FeatureDependentInterface_possibleConstructorReturn(self, call) { if (call && (FeatureDependentInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return FeatureDependentInterface_assertThisInitialized(self); }\\n\\nfunction FeatureDependentInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction FeatureDependentInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction FeatureDependentInterface_getPrototypeOf(o) { FeatureDependentInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FeatureDependentInterface_getPrototypeOf(o); }\\n\\nfunction FeatureDependentInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction FeatureDependentInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction FeatureDependentInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) FeatureDependentInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) FeatureDependentInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable no-unused-vars */\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/**\\r\\n * Class factory interface for features that are dependent on other features being\\r\\n * present on the host. Event dependencies will be listened for when a feature of\\r\\n * matching type is added to the host and will stop being listened for when one\\r\\n * is removed. If the feature is already present when constructed, events will\\r\\n * be listened for right away.\\r\\n *\\r\\n * @interface\\r\\n *\\r\\n * @property {Object} EVENT_DEPENDENCIES - Events that the feature should start/stop\\r\\n * listening for when a feature of type FeatureName is added/removed from the host.\\r\\n * Event dependencies should follow the signature:\\r\\n *  { FeatureName: { eventName: callbackName, ... }, ... }\\r\\n */\\n\\nvar FeatureDependentInterface = /*#__PURE__*/function () {\\n  function FeatureDependentInterface() {\\n    FeatureDependentInterface_classCallCheck(this, FeatureDependentInterface);\\n  }\\n\\n  FeatureDependentInterface_createClass(FeatureDependentInterface, [{\\n    key: "_onFeatureAdded",\\n    value:\\n    /**\\r\\n     * Start listening for event dependencies that match the given feature type.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} typeName - type of feature to listen for.\\r\\n     */\\n    function _onFeatureAdded(typeName) {}\\n    /**\\r\\n     * Stop listening for event dependencies that match the given feature type.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} typeName - type of feature to stop listening for.\\r\\n     */\\n\\n  }, {\\n    key: "_onFeatureRemoved",\\n    value: function _onFeatureRemoved(typeName) {}\\n    /**\\r\\n     * @augments {@link AbstractHostFeature#discard}\\r\\n     */\\n\\n  }, {\\n    key: "discard",\\n    value: function discard() {}\\n    /**\\r\\n     * Creates a class that implements {@link FeatureDependentInterface} and extends\\r\\n     * a specified base class.\\r\\n     *\\r\\n     * @param {Class} BaseClass - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link FeatureDependentInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin(BaseClass) {\\n      var FeatureDependentMixin = /*#__PURE__*/function (_BaseClass) {\\n        FeatureDependentInterface_inherits(FeatureDependentMixin, _BaseClass);\\n\\n        var _super = FeatureDependentInterface_createSuper(FeatureDependentMixin);\\n\\n        function FeatureDependentMixin(host) {\\n          var _this;\\n\\n          FeatureDependentInterface_classCallCheck(this, FeatureDependentMixin);\\n\\n          _this = _super.call(this, host);\\n          _this._host = host; // No need to listen for events if the mixin is in the prototype chain multiple times\\n\\n          if (!_this._initialized) {\\n            _this._initialized = true; // Start listening for feature events\\n\\n            _this._onFeatureAdded = _this._onFeatureAdded.bind(FeatureDependentInterface_assertThisInitialized(_this));\\n            _this._onFeatureRemoved = _this._onFeatureRemoved.bind(FeatureDependentInterface_assertThisInitialized(_this));\\n\\n            _this._host.listenTo(core_HostObject.EVENTS.addFeature, _this._onFeatureAdded);\\n\\n            _this._host.listenTo(core_HostObject.EVENTS.removeFeature, _this._onFeatureRemoved); // Register features that already exist\\n\\n\\n            Object.keys(_this.constructor.EVENT_DEPENDENCIES).forEach(function (typeName) {\\n              if (_this._host[typeName] !== undefined) {\\n                _this._onFeatureAdded(typeName);\\n              }\\n            });\\n          }\\n\\n          return _this;\\n        }\\n\\n        FeatureDependentInterface_createClass(FeatureDependentMixin, [{\\n          key: "_onFeatureAdded",\\n          value: function _onFeatureAdded(typeName) {\\n            var _this2 = this;\\n\\n            if (this.constructor.EVENT_DEPENDENCIES[typeName] !== undefined) {\\n              var events = this.constructor.EVENT_DEPENDENCIES[typeName];\\n              Object.entries(events).forEach(function (_ref) {\\n                var _ref2 = FeatureDependentInterface_slicedToArray(_ref, 2),\\n                    eventName = _ref2[0],\\n                    callback = _ref2[1];\\n\\n                _this2[callback] = _this2[callback].bind(_this2);\\n\\n                _this2._host.listenTo(_this2._host[typeName].EVENTS[eventName], _this2[callback]);\\n              });\\n            }\\n          }\\n        }, {\\n          key: "_onFeatureRemoved",\\n          value: function _onFeatureRemoved(typeName) {\\n            var _this3 = this;\\n\\n            if (this.constructor.EVENT_DEPENDENCIES[typeName] !== undefined) {\\n              var events = this.constructor.EVENT_DEPENDENCIES[typeName];\\n              Object.entries(events).forEach(function (_ref3) {\\n                var _ref4 = FeatureDependentInterface_slicedToArray(_ref3, 2),\\n                    eventName = _ref4[0],\\n                    callback = _ref4[1];\\n\\n                _this3._host.stopListening(_this3._host[typeName].EVENTS[eventName], _this3[callback]);\\n              });\\n            }\\n          }\\n        }, {\\n          key: "discard",\\n          value: function discard() {\\n            var _this4 = this;\\n\\n            // Stop listening for feature events\\n            this._host.stopListening(core_HostObject.EVENTS.addFeature, this._onFeatureAdded);\\n\\n            this._host.stopListening(core_HostObject.EVENTS.removeFeature, this._onFeatureRemoved); // Stop listening to feature-specific events\\n\\n\\n            Object.keys(this.constructor.EVENT_DEPENDENCIES).forEach(function (typeName) {\\n              if (_this4._host[typeName] !== undefined) {\\n                _this4._onFeatureRemoved(typeName);\\n              }\\n            });\\n\\n            _get(FeatureDependentInterface_getPrototypeOf(FeatureDependentMixin.prototype), "discard", this).call(this);\\n          }\\n        }]);\\n\\n        return FeatureDependentMixin;\\n      }(BaseClass);\\n\\n      var EVENT_DEPENDENCIES = BaseClass.EVENT_DEPENDENCIES || {};\\n      Object.defineProperties(FeatureDependentMixin, {\\n        EVENT_DEPENDENCIES: {\\n          value: FeatureDependentInterface_objectSpread({}, EVENT_DEPENDENCIES),\\n          writable: false\\n        }\\n      });\\n      return FeatureDependentMixin;\\n    }\\n  }]);\\n\\n  return FeatureDependentInterface;\\n}();\\n/**\\r\\n * Event dependencies should follow the signature:\\r\\n * {\\r\\n *  FeatureName: {\\r\\n *    // Events that the feature should start/stop listening for when a feature\\r\\n *    // of type FeatureName is added/removed from the host\\r\\n *    {\\r\\n *      eventName: callbackName,\\r\\n *      ...\\r\\n *    },\\r\\n *  }\\r\\n * }\\r\\n */\\n\\n\\nObject.defineProperties(FeatureDependentInterface, {\\n  EVENT_DEPENDENCIES: {\\n    value: {},\\n    writable: false\\n  }\\n});\\n/* harmony default export */ const core_FeatureDependentInterface = (FeatureDependentInterface);\\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationFeatureDependentInterface.js\\nfunction AnimationFeatureDependentInterface_typeof(obj) { "@babel/helpers - typeof"; return AnimationFeatureDependentInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationFeatureDependentInterface_typeof(obj); }\\n\\nfunction AnimationFeatureDependentInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction AnimationFeatureDependentInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AnimationFeatureDependentInterface_ownKeys(Object(source), !0).forEach(function (key) { AnimationFeatureDependentInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AnimationFeatureDependentInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction AnimationFeatureDependentInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction AnimationFeatureDependentInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AnimationFeatureDependentInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AnimationFeatureDependentInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationFeatureDependentInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationFeatureDependentInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction AnimationFeatureDependentInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationFeatureDependentInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction AnimationFeatureDependentInterface_setPrototypeOf(o, p) { AnimationFeatureDependentInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationFeatureDependentInterface_setPrototypeOf(o, p); }\\n\\nfunction AnimationFeatureDependentInterface_createSuper(Derived) { var hasNativeReflectConstruct = AnimationFeatureDependentInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationFeatureDependentInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationFeatureDependentInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationFeatureDependentInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction AnimationFeatureDependentInterface_possibleConstructorReturn(self, call) { if (call && (AnimationFeatureDependentInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationFeatureDependentInterface_assertThisInitialized(self); }\\n\\nfunction AnimationFeatureDependentInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction AnimationFeatureDependentInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction AnimationFeatureDependentInterface_getPrototypeOf(o) { AnimationFeatureDependentInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationFeatureDependentInterface_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable no-unused-vars */\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/**\\r\\n * Class factory interface for features that are dependent on the AnimationFeature\\r\\n * being present on the host. Layer and animation events will automatically be\\r\\n * listened for once a AnimationFeature is added to the host and stopped once it\\r\\n * is removed.\\r\\n *\\r\\n * @interface\\r\\n * @extends FeatureDependentInterface\\r\\n *\\r\\n * @property {Object} EVENT_DEPENDENCIES - Events that the feature should start/stop\\r\\n * listening for when a feature of type FeatureName is added/removed from the host.\\r\\n * @property {Object} EVENT_DEPENDENCIES.AnimationFeature - Events that are\\r\\n * specific to the AnimationFeature.\\r\\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.addLayer=\\\'_onLayerAdded\\\'] -\\r\\n * The name of the method that will be executed when AnimationFeature addLayer\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.removeLayer=\\\'_onLayerRemoved\\\'] -\\r\\n * The name of the method that will be executed when AnimationFeature removeLayer\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.renameLayer=\\\'_onLayerRenamed\\\'] -\\r\\n * The name of the method that will be executed when AnimationFeature renameLayer\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.addAnimation=\\\'_onAnimationAdded\\\'] -\\r\\n * The name of the method that will be executed when AnimationFeature addAnimation\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.removeAnimation=\\\'_onAnimationRemoved\\\'] -\\r\\n * The name of the method that will be executed when AnimationFeature removeAnimation\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.AnimationFeature.renameAnimation=\\\'_onAnimationRenamed\\\'] -\\r\\n * The name of the method that will be executed when AnimationFeature renameAnimation\\r\\n * events are emitted.\\r\\n */\\n\\nvar AnimationFeatureDependentInterface = /*#__PURE__*/function (_FeatureDependentInte) {\\n  AnimationFeatureDependentInterface_inherits(AnimationFeatureDependentInterface, _FeatureDependentInte);\\n\\n  var _super = AnimationFeatureDependentInterface_createSuper(AnimationFeatureDependentInterface);\\n\\n  function AnimationFeatureDependentInterface() {\\n    AnimationFeatureDependentInterface_classCallCheck(this, AnimationFeatureDependentInterface);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  AnimationFeatureDependentInterface_createClass(AnimationFeatureDependentInterface, [{\\n    key: "_onLayerAdded",\\n    value:\\n    /**\\r\\n     * Executed when animation layer added events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} name - Name of the layer that was added.\\r\\n     */\\n    function _onLayerAdded(_ref) {\\n      var name = _ref.name;\\n    }\\n    /**\\r\\n     * Executed when animation layer removed events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} name - Name of the layer that was removed.\\r\\n     */\\n\\n  }, {\\n    key: "_onLayerRemoved",\\n    value: function _onLayerRemoved(_ref2) {\\n      var name = _ref2.name;\\n    }\\n    /**\\r\\n     * Executed when animation layer renamed events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} oldName - Name of the layer that was renamed.\\r\\n     * @param {string} newName - New name of the layer.\\r\\n     */\\n\\n  }, {\\n    key: "_onLayerRenamed",\\n    value: function _onLayerRenamed(_ref3) {\\n      var oldName = _ref3.oldName,\\n          newName = _ref3.newName;\\n    }\\n    /**\\r\\n     * Executed when animation added events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that an animation was added to.\\r\\n     * @param {string} animationName - Name of the animation that was added.\\r\\n     */\\n\\n  }, {\\n    key: "_onAnimationAdded",\\n    value: function _onAnimationAdded(_ref4) {\\n      var layerName = _ref4.layerName,\\n          animationName = _ref4.animationName;\\n    }\\n    /**\\r\\n     * Executed when animation removed events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that an animation was removed from.\\r\\n     * @param {string} animationName - Name of the animation that was removed.\\r\\n     */\\n\\n  }, {\\n    key: "_onAnimationRemoved",\\n    value: function _onAnimationRemoved(_ref5) {\\n      var layerName = _ref5.layerName,\\n          animationName = _ref5.animationName;\\n    }\\n    /**\\r\\n     * Executed when animation renamed events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that an animation belongs to.\\r\\n     * @param {string} oldName - Name of the animation that was renamed.\\r\\n     * @param {string} newName - New name of the animation.\\r\\n     */\\n\\n  }, {\\n    key: "_onAnimationRenamed",\\n    value: function _onAnimationRenamed(_ref6) {\\n      var layerName = _ref6.layerName,\\n          oldName = _ref6.oldName,\\n          newName = _ref6.newName;\\n    }\\n    /**\\r\\n     * Creates a class that implements {@link AnimationFeatureDependentInterface}\\r\\n     * and extends a specified base class.\\r\\n     *\\r\\n     * @param {Class} BaseClass - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link AnimationFeatureDependentInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin(BaseClass) {\\n      var ParentClass = core_FeatureDependentInterface.Mixin(BaseClass);\\n\\n      var AnimationFeatureDependentMixin = /*#__PURE__*/function (_ParentClass) {\\n        AnimationFeatureDependentInterface_inherits(AnimationFeatureDependentMixin, _ParentClass);\\n\\n        var _super2 = AnimationFeatureDependentInterface_createSuper(AnimationFeatureDependentMixin);\\n\\n        function AnimationFeatureDependentMixin() {\\n          AnimationFeatureDependentInterface_classCallCheck(this, AnimationFeatureDependentMixin);\\n\\n          return _super2.apply(this, arguments);\\n        }\\n\\n        AnimationFeatureDependentInterface_createClass(AnimationFeatureDependentMixin, [{\\n          key: "_onLayerAdded",\\n          value: function _onLayerAdded(_ref7) {\\n            var name = _ref7.name;\\n          }\\n        }, {\\n          key: "_onLayerRemoved",\\n          value: function _onLayerRemoved(_ref8) {\\n            var name = _ref8.name;\\n          }\\n        }, {\\n          key: "_onLayerRenamed",\\n          value: function _onLayerRenamed(_ref9) {\\n            var oldName = _ref9.oldName,\\n                newName = _ref9.newName;\\n          }\\n        }, {\\n          key: "_onAnimationAdded",\\n          value: function _onAnimationAdded(_ref10) {\\n            var layerName = _ref10.layerName,\\n                animationName = _ref10.animationName;\\n          }\\n        }, {\\n          key: "_onAnimationRemoved",\\n          value: function _onAnimationRemoved(_ref11) {\\n            var layerName = _ref11.layerName,\\n                animationName = _ref11.animationName;\\n          }\\n        }, {\\n          key: "_onAnimationRenamed",\\n          value: function _onAnimationRenamed(_ref12) {\\n            var layerName = _ref12.layerName,\\n                oldName = _ref12.oldName,\\n                newName = _ref12.newName;\\n          }\\n        }]);\\n\\n        return AnimationFeatureDependentMixin;\\n      }(ParentClass);\\n\\n      Object.defineProperties(AnimationFeatureDependentMixin, {\\n        EVENT_DEPENDENCIES: {\\n          value: AnimationFeatureDependentInterface_objectSpread(AnimationFeatureDependentInterface_objectSpread({}, ParentClass.EVENT_DEPENDENCIES), AnimationFeatureDependentInterface.EVENT_DEPENDENCIES),\\n          writable: false\\n        }\\n      });\\n      return AnimationFeatureDependentMixin;\\n    }\\n  }]);\\n\\n  return AnimationFeatureDependentInterface;\\n}(core_FeatureDependentInterface);\\n\\nObject.defineProperties(AnimationFeatureDependentInterface, {\\n  EVENT_DEPENDENCIES: {\\n    value: {\\n      AnimationFeature: {\\n        addLayer: \\\'_onLayerAdded\\\',\\n        removeLayer: \\\'_onLayerRemoved\\\',\\n        renameLayer: \\\'_onLayerRenamed\\\',\\n        addAnimation: \\\'_onAnimationAdded\\\',\\n        removeAnimation: \\\'_onAnimationRemoved\\\',\\n        renameAnimation: \\\'_onAnimationRenamed\\\'\\n      }\\n    },\\n    writable: false\\n  }\\n});\\n/* harmony default export */ const animpack_AnimationFeatureDependentInterface = (AnimationFeatureDependentInterface);\\n;// CONCATENATED MODULE: ./src/core/animpack/ManagedAnimationLayerInterface.js\\nfunction ManagedAnimationLayerInterface_typeof(obj) { "@babel/helpers - typeof"; return ManagedAnimationLayerInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, ManagedAnimationLayerInterface_typeof(obj); }\\n\\nfunction ManagedAnimationLayerInterface_slicedToArray(arr, i) { return ManagedAnimationLayerInterface_arrayWithHoles(arr) || ManagedAnimationLayerInterface_iterableToArrayLimit(arr, i) || ManagedAnimationLayerInterface_unsupportedIterableToArray(arr, i) || ManagedAnimationLayerInterface_nonIterableRest(); }\\n\\nfunction ManagedAnimationLayerInterface_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction ManagedAnimationLayerInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ManagedAnimationLayerInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ManagedAnimationLayerInterface_arrayLikeToArray(o, minLen); }\\n\\nfunction ManagedAnimationLayerInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction ManagedAnimationLayerInterface_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction ManagedAnimationLayerInterface_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction ManagedAnimationLayerInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction ManagedAnimationLayerInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ManagedAnimationLayerInterface_ownKeys(Object(source), !0).forEach(function (key) { ManagedAnimationLayerInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ManagedAnimationLayerInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction ManagedAnimationLayerInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction ManagedAnimationLayerInterface_get() { if (typeof Reflect !== "undefined" && Reflect.get) { ManagedAnimationLayerInterface_get = Reflect.get; } else { ManagedAnimationLayerInterface_get = function _get(target, property, receiver) { var base = ManagedAnimationLayerInterface_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return ManagedAnimationLayerInterface_get.apply(this, arguments); }\\n\\nfunction ManagedAnimationLayerInterface_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = ManagedAnimationLayerInterface_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction ManagedAnimationLayerInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction ManagedAnimationLayerInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction ManagedAnimationLayerInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) ManagedAnimationLayerInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) ManagedAnimationLayerInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction ManagedAnimationLayerInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ManagedAnimationLayerInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction ManagedAnimationLayerInterface_setPrototypeOf(o, p) { ManagedAnimationLayerInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ManagedAnimationLayerInterface_setPrototypeOf(o, p); }\\n\\nfunction ManagedAnimationLayerInterface_createSuper(Derived) { var hasNativeReflectConstruct = ManagedAnimationLayerInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ManagedAnimationLayerInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ManagedAnimationLayerInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ManagedAnimationLayerInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction ManagedAnimationLayerInterface_possibleConstructorReturn(self, call) { if (call && (ManagedAnimationLayerInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ManagedAnimationLayerInterface_assertThisInitialized(self); }\\n\\nfunction ManagedAnimationLayerInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction ManagedAnimationLayerInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction ManagedAnimationLayerInterface_getPrototypeOf(o) { ManagedAnimationLayerInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ManagedAnimationLayerInterface_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable no-unused-vars */\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/**\\r\\n * Class factory interface for that keeps track of layers and animations on a host.\\r\\n * Tracked assets are marked as inactive until layers and animations with matching\\r\\n * names are detected as present on the host.\\r\\n *\\r\\n * @interface\\r\\n * @extends AnimationFeatureDependentInterface\\r\\n *\\r\\n * @property {Object} DEFAULT_LAYER_OPTIONS - Default options to use when executing\\r\\n * {@link AnimationLayer} methods.\\r\\n * @property {number} [DEFAULT_LAYER_OPTIONS.blendTime=0.5] - Default time in seconds\\r\\n * to use when executing {@link AnimationLayer.setBlendWeight}.\\r\\n * @property {Object} [DEFAULT_LAYER_OPTIONS.animations={}] - Maps animation names\\r\\n * to default options objects to use for managed animations.\\r\\n */\\n\\nvar ManagedAnimationLayerInterface = /*#__PURE__*/function (_AnimationFeatureDepe) {\\n  ManagedAnimationLayerInterface_inherits(ManagedAnimationLayerInterface, _AnimationFeatureDepe);\\n\\n  var _super = ManagedAnimationLayerInterface_createSuper(ManagedAnimationLayerInterface);\\n\\n  function ManagedAnimationLayerInterface() {\\n    ManagedAnimationLayerInterface_classCallCheck(this, ManagedAnimationLayerInterface);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  ManagedAnimationLayerInterface_createClass(ManagedAnimationLayerInterface, [{\\n    key: "registerLayer",\\n    value:\\n    /**\\r\\n     * Start tracking keeping track of whether a layer with the given name is present\\r\\n     * on the host.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to keep track of.\\r\\n     * @param {Object=} options - Options for the layer.\\r\\n     * @param {number=} options.blendTime - Default amount of time to use when\\r\\n     * manipulating layer weights on this layer.\\r\\n     * @param {Function=} options.easingFn - Default easing function to use when\\r\\n     * manipulating layer weights on this layer.\\r\\n     * @param {Object=} options.animations - Animations to keep track of on the layer.\\r\\n     * Animations are represented as key/value pairs of animation names and their\\r\\n     * options.\\r\\n     */\\n    function registerLayer(name) {\\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n    }\\n    /**\\r\\n     * Start tracking keeping track of whether an animation with the given name is\\r\\n     * present on the host.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that will own the animation.\\r\\n     * @param {string} animationName - Name of the animation to keep track of.\\r\\n     * @param {Object=} options - Options for the animation.\\r\\n     */\\n\\n  }, {\\n    key: "registerAnimation",\\n    value: function registerAnimation(layerName, animationName) {\\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n    }\\n    /**\\r\\n     * Set layer weights on tracked layers.\\r\\n     *\\r\\n     * @param {Function=} nameFilter - Predicate function to test each tracked layer\\r\\n     * with. By default all layers will pass.\\r\\n     * @param {number} weight - Weight value to set on layers.\\r\\n     * @param {number=} seconds - Number of seconds it will take to reach the weight\\r\\n     * on each layer. If undefined, each layers\\\' blendTime option is used.\\r\\n     * @param {Function=} easingFn - Easing function to use when setting weight\\r\\n     * on each layer. If undefined, each layers\\\' easingFn option is used.\\r\\n     */\\n\\n  }, {\\n    key: "setLayerWeights",\\n    value: function setLayerWeights() {\\n      var nameFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\\n        return true;\\n      };\\n      var weight = arguments.length > 1 ? arguments[1] : undefined;\\n      var seconds = arguments.length > 2 ? arguments[2] : undefined;\\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\\n    }\\n    /**\\r\\n     * Set all tracked layers\\\' weights to 1.\\r\\n     *\\r\\n     * @param {number=} seconds - Number of seconds it will take to reach the weight\\r\\n     * on each layer. If undefined, each layers\\\' blendTime option is used.\\r\\n     * @param {Function=} easingFn - Easing function to use when setting weight\\r\\n     * on each layer. If undefined, each layers\\\' easingFn option is used.\\r\\n     */\\n\\n  }, {\\n    key: "enable",\\n    value: function enable(seconds, easingFn) {}\\n    /**\\r\\n     * Set all tracked layers\\\' weights to 0.\\r\\n     *\\r\\n     * @param {number=} seconds - Number of seconds it will take to reach the weight\\r\\n     * on each layer. If undefined, each layers\\\' blendTime option is used.\\r\\n     * @param {Function=} easingFn - Easing function to use when setting weight\\r\\n     * on each layer. If undefined, each layers\\\' easingFn option is used.\\r\\n     */\\n\\n  }, {\\n    key: "disable",\\n    value: function disable(seconds, easingFn) {}\\n    /**\\r\\n     * Creates a class that implements {@link ManagedAnimationLayerInterface}\\r\\n     * and extends a specified base class.\\r\\n     *\\r\\n     * @param {Class} BaseClass - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link ManagedAnimationLayerInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin(BaseClass) {\\n      var ParentClass = animpack_AnimationFeatureDependentInterface.Mixin(BaseClass);\\n\\n      var ManagedAnimationLayerMixin = /*#__PURE__*/function (_ParentClass) {\\n        ManagedAnimationLayerInterface_inherits(ManagedAnimationLayerMixin, _ParentClass);\\n\\n        var _super2 = ManagedAnimationLayerInterface_createSuper(ManagedAnimationLayerMixin);\\n\\n        function ManagedAnimationLayerMixin() {\\n          var _this;\\n\\n          ManagedAnimationLayerInterface_classCallCheck(this, ManagedAnimationLayerMixin);\\n\\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n            args[_key] = arguments[_key];\\n          }\\n\\n          _this = _super2.call.apply(_super2, [this].concat(args));\\n          _this._managedLayers = {};\\n          return _this;\\n        }\\n\\n        ManagedAnimationLayerInterface_createClass(ManagedAnimationLayerMixin, [{\\n          key: "_onFeatureAdded",\\n          value: function _onFeatureAdded(typeName) {\\n            var _this2 = this;\\n\\n            ManagedAnimationLayerInterface_get(ManagedAnimationLayerInterface_getPrototypeOf(ManagedAnimationLayerMixin.prototype), "_onFeatureAdded", this).call(this, typeName);\\n\\n            if (typeName !== \\\'AnimationFeature\\\') {\\n              return;\\n            }\\n\\n            this._managedLayers = this._managedLayers || {}; // Detect new layers\\n\\n            this._host.AnimationFeature.layers.forEach(function (name) {\\n              _this2._onLayerAdded({\\n                name: name\\n              });\\n            });\\n          }\\n        }, {\\n          key: "_onFeatureRemoved",\\n          value: function _onFeatureRemoved(typeName) {\\n            var _this3 = this;\\n\\n            ManagedAnimationLayerInterface_get(ManagedAnimationLayerInterface_getPrototypeOf(ManagedAnimationLayerMixin.prototype), "_onFeatureRemoved", this).call(this, typeName);\\n\\n            if (typeName !== \\\'AnimationFeature\\\') {\\n              return;\\n            }\\n\\n            this._managedLayers = this._managedLayers || {}; // Deactivate the layers\\n\\n            Object.keys(this._managedLayers).forEach(function (name) {\\n              _this3._onLayerRemoved({\\n                name: name\\n              });\\n            });\\n          }\\n        }, {\\n          key: "_onLayerAdded",\\n          value: function _onLayerAdded(_ref) {\\n            var _this4 = this;\\n\\n            var name = _ref.name;\\n\\n            // Mark the layer as active if it is managed\\n            if (this._managedLayers[name] !== undefined) {\\n              this._managedLayers[name].isActive = true; // Detect new animations\\n\\n              this._host.AnimationFeature.getAnimations(name).forEach(function (animName) {\\n                _this4._onAnimationAdded({\\n                  layerName: name,\\n                  animationName: animName\\n                });\\n              });\\n            }\\n          }\\n        }, {\\n          key: "_onLayerRemoved",\\n          value: function _onLayerRemoved(_ref2) {\\n            var _this5 = this;\\n\\n            var name = _ref2.name;\\n\\n            // Deactivate the layer if it is managed\\n            if (this._managedLayers[name] !== undefined) {\\n              this._managedLayers[name].isActive = false; // Deactivate the animations\\n\\n              Object.keys(this._managedLayers[name].animations).forEach(function (animName) {\\n                _this5._onAnimationRemoved({\\n                  layerName: name,\\n                  animationName: animName\\n                });\\n              });\\n            }\\n          }\\n        }, {\\n          key: "_onLayerRenamed",\\n          value: function _onLayerRenamed(_ref3) {\\n            var oldName = _ref3.oldName,\\n                newName = _ref3.newName;\\n            var layerOptions = this._managedLayers[oldName]; // Replace the layer key with the new name\\n\\n            if (layerOptions !== undefined) {\\n              delete this._managedLayers[oldName];\\n              this._managedLayers[newName] = layerOptions;\\n            }\\n          }\\n        }, {\\n          key: "_onAnimationAdded",\\n          value: function _onAnimationAdded(_ref4) {\\n            var layerName = _ref4.layerName,\\n                animationName = _ref4.animationName;\\n\\n            // Mark the animation as active if it is managed\\n            if (this._managedLayers[layerName] !== undefined && this._managedLayers[layerName].animations[animationName] !== undefined) {\\n              this._managedLayers[layerName].animations[animationName].isActive = true;\\n            }\\n          }\\n        }, {\\n          key: "_onAnimationRemoved",\\n          value: function _onAnimationRemoved(_ref5) {\\n            var layerName = _ref5.layerName,\\n                animationName = _ref5.animationName;\\n\\n            // Deactivate the animation if it is managed\\n            if (this._managedLayers[layerName] !== undefined && this._managedLayers[layerName].animations[animationName] !== undefined) {\\n              this._managedLayers[layerName].animations[animationName].isActive = false;\\n            }\\n          }\\n        }, {\\n          key: "_onAnimationRenamed",\\n          value: function _onAnimationRenamed(_ref6) {\\n            var layerName = _ref6.layerName,\\n                oldName = _ref6.oldName,\\n                newName = _ref6.newName;\\n\\n            if (this._managedLayers[layerName] !== undefined && this._managedLayers[layerName].animations[oldName] !== undefined) {\\n              // Replace the animation key with the new name\\n              var animOptions = this._managedLayers[layerName].animations[oldName];\\n              delete this._managedLayers[layerName].animations[oldName];\\n              this._managedLayers[layerName].animations[newName] = animOptions;\\n            }\\n          }\\n        }, {\\n          key: "registerLayer",\\n          value: function registerLayer(name) {\\n            var _this6 = this;\\n\\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n            // Start with default options for each new layer\\n            if (this._managedLayers[name] === undefined) {\\n              this._managedLayers[name] = ManagedAnimationLayerInterface_objectSpread(ManagedAnimationLayerInterface_objectSpread({}, this.constructor.DEFAULT_LAYER_OPTIONS), {}, {\\n                animations: {}\\n              });\\n            } // Update all options except animations\\n\\n\\n            var layerOptions = this._managedLayers[name];\\n            options = ManagedAnimationLayerInterface_objectSpread({}, options);\\n            var animationOptions = options.animations || {};\\n            delete options.animations;\\n            Object.assign(layerOptions, options); // Check whether the layer can be manipulated now\\n\\n            layerOptions.isActive = this._host.AnimationFeature !== undefined && this._host.AnimationFeature.layers.includes(name); // Register the animations\\n\\n            Object.entries(animationOptions).forEach(function (_ref7) {\\n              var _ref8 = ManagedAnimationLayerInterface_slicedToArray(_ref7, 2),\\n                  animName = _ref8[0],\\n                  animOptions = _ref8[1];\\n\\n              _this6.registerAnimation(name, animName, animOptions);\\n            });\\n          }\\n        }, {\\n          key: "registerAnimation",\\n          value: function registerAnimation(layerName, animationName) {\\n            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n\\n            // Register the layer if it hasn\\\'t been registered yet\\n            if (this._managedLayers[layerName] === undefined) {\\n              this.registerLayer(layerName);\\n            } // Update animation options\\n\\n\\n            var animOptions = this._managedLayers[layerName].animations[animationName] || {};\\n            Object.assign(animOptions, options);\\n            this._managedLayers[layerName].animations[animationName] = animOptions; // Check whether the animation can be manipulated now\\n\\n            this._managedLayers[layerName].animations[animationName].isActive = this._managedLayers[layerName].isActive && this._host.AnimationFeature.getAnimations(layerName).includes(animationName);\\n          }\\n        }, {\\n          key: "setLayerWeights",\\n          value: function setLayerWeights() {\\n            var _this7 = this;\\n\\n            var nameFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\\n              return true;\\n            };\\n            var weight = arguments.length > 1 ? arguments[1] : undefined;\\n            var seconds = arguments.length > 2 ? arguments[2] : undefined;\\n            var easingFn = arguments.length > 3 ? arguments[3] : undefined;\\n            var layerNames = Object.keys(this._managedLayers).filter(nameFilter);\\n            layerNames.forEach(function (name) {\\n              var layerOptions = _this7._managedLayers[name];\\n\\n              if (layerOptions.isActive) {\\n                _this7._host.AnimationFeature.setLayerWeight(name, weight, seconds !== undefined ? seconds : layerOptions.blendTime, easingFn || layerOptions.easingFn);\\n              }\\n            });\\n          }\\n        }, {\\n          key: "enable",\\n          value: function enable(seconds, easingFn) {\\n            this.setLayerWeights(undefined, 1, seconds, easingFn);\\n          }\\n        }, {\\n          key: "disable",\\n          value: function disable(seconds, easingFn) {\\n            this.setLayerWeights(undefined, 0, seconds, easingFn);\\n          }\\n        }, {\\n          key: "installApi",\\n          value: function installApi() {\\n            var api = ManagedAnimationLayerInterface_get(ManagedAnimationLayerInterface_getPrototypeOf(ManagedAnimationLayerMixin.prototype), "installApi", this).call(this);\\n\\n            Object.assign(api, {\\n              registerLayer: this.registerLayer.bind(this),\\n              registerAnimation: this.registerAnimation.bind(this),\\n              setLayerWeights: this.setLayerWeights.bind(this),\\n              enable: this.enable.bind(this),\\n              disable: this.disable.bind(this)\\n            });\\n            return api;\\n          }\\n        }]);\\n\\n        return ManagedAnimationLayerMixin;\\n      }(ParentClass);\\n\\n      Object.defineProperties(ManagedAnimationLayerMixin, {\\n        DEFAULT_LAYER_OPTIONS: {\\n          value: ManagedAnimationLayerInterface.DEFAULT_LAYER_OPTIONS,\\n          writable: false\\n        }\\n      });\\n      return ManagedAnimationLayerMixin;\\n    }\\n  }]);\\n\\n  return ManagedAnimationLayerInterface;\\n}(animpack_AnimationFeatureDependentInterface);\\n\\nObject.defineProperties(ManagedAnimationLayerInterface, {\\n  DEFAULT_LAYER_OPTIONS: {\\n    value: {\\n      blendTime: 0.5,\\n      animations: {}\\n    },\\n    writable: false\\n  }\\n});\\n/* harmony default export */ const animpack_ManagedAnimationLayerInterface = (ManagedAnimationLayerInterface);\\n;// CONCATENATED MODULE: ./src/core/awspack/TextToSpeechFeatureDependentInterface.js\\nfunction TextToSpeechFeatureDependentInterface_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechFeatureDependentInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechFeatureDependentInterface_typeof(obj); }\\n\\nfunction TextToSpeechFeatureDependentInterface_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction TextToSpeechFeatureDependentInterface_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? TextToSpeechFeatureDependentInterface_ownKeys(Object(source), !0).forEach(function (key) { TextToSpeechFeatureDependentInterface_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : TextToSpeechFeatureDependentInterface_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction TextToSpeechFeatureDependentInterface_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction TextToSpeechFeatureDependentInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction TextToSpeechFeatureDependentInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction TextToSpeechFeatureDependentInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechFeatureDependentInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechFeatureDependentInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction TextToSpeechFeatureDependentInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TextToSpeechFeatureDependentInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction TextToSpeechFeatureDependentInterface_setPrototypeOf(o, p) { TextToSpeechFeatureDependentInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TextToSpeechFeatureDependentInterface_setPrototypeOf(o, p); }\\n\\nfunction TextToSpeechFeatureDependentInterface_createSuper(Derived) { var hasNativeReflectConstruct = TextToSpeechFeatureDependentInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TextToSpeechFeatureDependentInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TextToSpeechFeatureDependentInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TextToSpeechFeatureDependentInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction TextToSpeechFeatureDependentInterface_possibleConstructorReturn(self, call) { if (call && (TextToSpeechFeatureDependentInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TextToSpeechFeatureDependentInterface_assertThisInitialized(self); }\\n\\nfunction TextToSpeechFeatureDependentInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction TextToSpeechFeatureDependentInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction TextToSpeechFeatureDependentInterface_getPrototypeOf(o) { TextToSpeechFeatureDependentInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TextToSpeechFeatureDependentInterface_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/**\\r\\n * Class factory interface for features that are dependent on the TextToSpeechFeature\\r\\n * being present on the host. Speech events will automatically be listened for once a\\r\\n * TextToSpeechFeature is added to the host and stopped once it is removed.\\r\\n *\\r\\n * @interface\\r\\n * @extends FeatureDependentInterface\\r\\n *\\r\\n * @property {Object} EVENT_DEPENDENCIES - Events that the feature should start/stop\\r\\n * listening for when a feature of type FeatureName is added/removed from the host.\\r\\n * @property {Object} EVENT_DEPENDENCIES.TextToSpeechFeature - Events that are\\r\\n * specific to the TextToSpeechFeature.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.play=\\\'_onPlay\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature play\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.pause=\\\'_onPause\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature pause\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.resume=\\\'_onResume\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature resume\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.stop=\\\'_onStop\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature stop\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.sentence=\\\'_onSentence\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature sentence\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.word=\\\'_onWord\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature word\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.viseme=\\\'_onViseme\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature viseme\\r\\n * events are emitted.\\r\\n * @property {string} [EVENT_DEPENDENCIES.TextToSpeechFeature.ssml=\\\'_onSsml\\\'] -\\r\\n * The name of the method that will be executed when TextToSpeechFeature ssml\\r\\n * events are emitted.\\r\\n */\\n\\nvar TextToSpeechFeatureDependentInterface = /*#__PURE__*/function (_FeatureDependentInte) {\\n  TextToSpeechFeatureDependentInterface_inherits(TextToSpeechFeatureDependentInterface, _FeatureDependentInte);\\n\\n  var _super = TextToSpeechFeatureDependentInterface_createSuper(TextToSpeechFeatureDependentInterface);\\n\\n  function TextToSpeechFeatureDependentInterface() {\\n    TextToSpeechFeatureDependentInterface_classCallCheck(this, TextToSpeechFeatureDependentInterface);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  TextToSpeechFeatureDependentInterface_createClass(TextToSpeechFeatureDependentInterface, [{\\n    key: "_onPlay",\\n    value:\\n    /**\\r\\n     * Executed when speech play events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n    function _onPlay() {}\\n    /**\\r\\n     * Executed when speech pause events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onPause",\\n    value: function _onPause() {}\\n    /**\\r\\n     * Executed when speech resume events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onResume",\\n    value: function _onResume() {}\\n    /**\\r\\n     * Executed when speech stop events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onStop",\\n    value: function _onStop() {}\\n    /**\\r\\n     * Executed when speech sentence events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onSentence",\\n    value: function _onSentence() {}\\n    /**\\r\\n     * Executed when speech word events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onWord",\\n    value: function _onWord() {}\\n    /**\\r\\n     * Executed when speech viseme events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onViseme",\\n    value: function _onViseme() {}\\n    /**\\r\\n     * Executed when speech ssml events are caught.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_onSsml",\\n    value: function _onSsml() {}\\n    /**\\r\\n     * Creates a class that implements {@link TextToSpeechFeatureDependentInterface}\\r\\n     * and extends a specified base class.\\r\\n     *\\r\\n     * @param {Class} BaseClass - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link TextToSpeechFeatureDependentInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin(BaseClass) {\\n      var ParentClass = core_FeatureDependentInterface.Mixin(BaseClass);\\n\\n      var TextToSpeechFeatureDependentMixin = /*#__PURE__*/function (_ParentClass) {\\n        TextToSpeechFeatureDependentInterface_inherits(TextToSpeechFeatureDependentMixin, _ParentClass);\\n\\n        var _super2 = TextToSpeechFeatureDependentInterface_createSuper(TextToSpeechFeatureDependentMixin);\\n\\n        function TextToSpeechFeatureDependentMixin() {\\n          TextToSpeechFeatureDependentInterface_classCallCheck(this, TextToSpeechFeatureDependentMixin);\\n\\n          return _super2.apply(this, arguments);\\n        }\\n\\n        TextToSpeechFeatureDependentInterface_createClass(TextToSpeechFeatureDependentMixin, [{\\n          key: "_onPlay",\\n          value: function _onPlay() {}\\n        }, {\\n          key: "_onPause",\\n          value: function _onPause() {}\\n        }, {\\n          key: "_onResume",\\n          value: function _onResume() {}\\n        }, {\\n          key: "_onStop",\\n          value: function _onStop() {}\\n        }, {\\n          key: "_onSentence",\\n          value: function _onSentence() {}\\n        }, {\\n          key: "_onWord",\\n          value: function _onWord() {}\\n        }, {\\n          key: "_onViseme",\\n          value: function _onViseme() {}\\n        }, {\\n          key: "_onSsml",\\n          value: function _onSsml() {}\\n        }]);\\n\\n        return TextToSpeechFeatureDependentMixin;\\n      }(ParentClass);\\n\\n      Object.defineProperties(TextToSpeechFeatureDependentMixin, {\\n        EVENT_DEPENDENCIES: {\\n          value: TextToSpeechFeatureDependentInterface_objectSpread(TextToSpeechFeatureDependentInterface_objectSpread({}, ParentClass.EVENT_DEPENDENCIES), TextToSpeechFeatureDependentInterface.EVENT_DEPENDENCIES),\\n          writable: false\\n        }\\n      });\\n      return TextToSpeechFeatureDependentMixin;\\n    }\\n  }]);\\n\\n  return TextToSpeechFeatureDependentInterface;\\n}(core_FeatureDependentInterface);\\n\\nObject.defineProperties(TextToSpeechFeatureDependentInterface, {\\n  EVENT_DEPENDENCIES: {\\n    value: {\\n      TextToSpeechFeature: {\\n        play: \\\'_onPlay\\\',\\n        pause: \\\'_onPause\\\',\\n        resume: \\\'_onResume\\\',\\n        stop: \\\'_onStop\\\',\\n        sentence: \\\'_onSentence\\\',\\n        word: \\\'_onWord\\\',\\n        viseme: \\\'_onViseme\\\',\\n        ssml: \\\'_onSsml\\\'\\n      }\\n    },\\n    writable: false\\n  }\\n});\\n/* harmony default export */ const awspack_TextToSpeechFeatureDependentInterface = (TextToSpeechFeatureDependentInterface);\\n;// CONCATENATED MODULE: ./src/core/LipsyncFeature.js\\nfunction LipsyncFeature_typeof(obj) { "@babel/helpers - typeof"; return LipsyncFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, LipsyncFeature_typeof(obj); }\\n\\nfunction LipsyncFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction LipsyncFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? LipsyncFeature_ownKeys(Object(source), !0).forEach(function (key) { LipsyncFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : LipsyncFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction LipsyncFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\\n\\nfunction LipsyncFeature_slicedToArray(arr, i) { return LipsyncFeature_arrayWithHoles(arr) || LipsyncFeature_iterableToArrayLimit(arr, i) || LipsyncFeature_unsupportedIterableToArray(arr, i) || LipsyncFeature_nonIterableRest(); }\\n\\nfunction LipsyncFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction LipsyncFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LipsyncFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LipsyncFeature_arrayLikeToArray(o, minLen); }\\n\\nfunction LipsyncFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction LipsyncFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction LipsyncFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction LipsyncFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction LipsyncFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction LipsyncFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) LipsyncFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) LipsyncFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction LipsyncFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { LipsyncFeature_get = Reflect.get; } else { LipsyncFeature_get = function _get(target, property, receiver) { var base = LipsyncFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return LipsyncFeature_get.apply(this, arguments); }\\n\\nfunction LipsyncFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = LipsyncFeature_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction LipsyncFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) LipsyncFeature_setPrototypeOf(subClass, superClass); }\\n\\nfunction LipsyncFeature_setPrototypeOf(o, p) { LipsyncFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return LipsyncFeature_setPrototypeOf(o, p); }\\n\\nfunction LipsyncFeature_createSuper(Derived) { var hasNativeReflectConstruct = LipsyncFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = LipsyncFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = LipsyncFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return LipsyncFeature_possibleConstructorReturn(this, result); }; }\\n\\nfunction LipsyncFeature_possibleConstructorReturn(self, call) { if (call && (LipsyncFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return LipsyncFeature_assertThisInitialized(self); }\\n\\nfunction LipsyncFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction LipsyncFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction LipsyncFeature_getPrototypeOf(o) { LipsyncFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return LipsyncFeature_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n\\n/**\\r\\n * Default mapping of Polly viseme names to animation options objects.\\r\\n *\\r\\n * @property {Object} [sil={name: \\\'sil\\\'}]\\r\\n * @property {Object} [p={name: \\\'p\\\', overrideWeight: 0.9}]\\r\\n * @property {Object} [t={name: \\\'t\\\', blendTime: 0.2}]\\r\\n * @property {Object} [S={name: \\\'S\\\'}]\\r\\n * @property {Object} [T={name: \\\'T\\\'}]\\r\\n * @property {Object} [f={name: \\\'f\\\', overrideWeight: 0.75}]\\r\\n * @property {Object} [k={name: \\\'k\\\'}]\\r\\n * @property {Object} [i={name: \\\'i\\\'}]\\r\\n * @property {Object} [r={name: \\\'r\\\'}]\\r\\n * @property {Object} [s={name: \\\'s\\\', blendTime: 0.25}]\\r\\n * @property {Object} [u={name: \\\'u\\\'}]\\r\\n * @property {Object} [@={name: \\\'@\\\'}]\\r\\n * @property {Object} [a={name: \\\'a\\\'}]\\r\\n * @property {Object} [e={name: \\\'e\\\', blendTime: 0.2}]\\r\\n * @property {Object} [E={name: \\\'E\\\'}]\\r\\n * @property {Object} [o={name: \\\'o\\\'}]\\r\\n * @property {Object} [O={name: \\\'O\\\'}]\\r\\n */\\n\\nvar DefaultVisemeMap = {\\n  sil: {\\n    name: \\\'sil\\\'\\n  },\\n  p: {\\n    name: \\\'p\\\',\\n    overrideWeight: 0.9\\n  },\\n  t: {\\n    name: \\\'t\\\',\\n    blendTime: 0.2\\n  },\\n  S: {\\n    name: \\\'S\\\'\\n  },\\n  T: {\\n    name: \\\'T\\\'\\n  },\\n  f: {\\n    name: \\\'f\\\',\\n    overrideWeight: 0.75\\n  },\\n  k: {\\n    name: \\\'k\\\'\\n  },\\n  i: {\\n    name: \\\'i\\\'\\n  },\\n  r: {\\n    name: \\\'r\\\'\\n  },\\n  s: {\\n    name: \\\'s\\\',\\n    blendTime: 0.25\\n  },\\n  u: {\\n    name: \\\'u\\\'\\n  },\\n  \\\'@\\\': {\\n    name: \\\'@\\\'\\n  },\\n  a: {\\n    name: \\\'a\\\'\\n  },\\n  e: {\\n    name: \\\'e\\\',\\n    blendTime: 0.2\\n  },\\n  E: {\\n    name: \\\'E\\\'\\n  },\\n  o: {\\n    name: \\\'o\\\'\\n  },\\n  O: {\\n    name: \\\'O\\\'\\n  }\\n};\\n/**\\r\\n * Lipsync controls two types of movement: idle animation that should play while\\r\\n * speech is playing and viseme animations corresponding to Polly visemes whose\\r\\n * weights should be turned on and off as they are encountered in the Polly SSML\\r\\n * transcript. Layers owned by this feature will be enabled while speech is playing\\r\\n * and disabled once it stops.\\r\\n *\\r\\n * @extends AbstractHostFeature\\r\\n * @alias core/LipsyncFeature\\r\\n * @implements TextToSpeechFeatureDependentInterface\\r\\n * @implements ManagedAnimationLayerInterface\\r\\n */\\n\\nvar LipsyncFeature = /*#__PURE__*/function (_AbstractHostFeature$) {\\n  LipsyncFeature_inherits(LipsyncFeature, _AbstractHostFeature$);\\n\\n  var _super = LipsyncFeature_createSuper(LipsyncFeature);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/HostObject} host - Host that owns the feature.\\r\\n   * @param {Object=} visemeOptions - Options for the viseme layers.\\r\\n   * @param {number} [visemeOptions.blendTime=0.15] - Default amount of time it\\r\\n   * will take to manipulate each freeBlend weight on the viseme states.\\r\\n   * @param {Object} [visemeOptions.decayRate={amount: .5, seconds: .5}] - An object\\r\\n   * describing the 0-1 factor viseme weight will decay if the viseme duration is\\r\\n   * longer than the blendTime and the number of seconds it would take to decay\\r\\n   * by that factor.\\r\\n   * @param {number} [visemeOptions.easingFn=Quadratic.InOut] - Default easing function\\r\\n   * to use when manipulating viseme freeBlend weights.\\r\\n   * @param {Array.<Object>} [visemeOptions..layers=[]] - An array of layer options\\r\\n   * objects to register as viseme layers.\\r\\n   * @param {Object=} talkingOptions - Options for the talking layers.\\r\\n   * @param {number} [talkingOptions.blendTime=0.75] - Default amount of time to\\r\\n   * enable and disable the talking idle layers\\r\\n   * @param {number} [talkingOptions.easingFn=Quadratic.InOut] - Default easing\\r\\n   * function to use when manipulating weights on the talking idle layers.\\r\\n   * @param {Array.<Object>} [talkingOptions.layers=[]] - An array of layer options\\r\\n   * objects to register as talking layers.\\r\\n   * @param {number} [visemeLeadTime=.067] - The amount of time to instruct the\\r\\n   * TextToSpeechFeature to emit speechmarks before each one\\\'s actual timestamp\\r\\n   * is reached. This will set the \\\'speechMarkOffset\\\' variable on the TextToSpeechFeature.\\r\\n   */\\n  function LipsyncFeature(host) {\\n    var _this;\\n\\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n        _ref$blendTime = _ref.blendTime,\\n        visemeBlendTime = _ref$blendTime === void 0 ? 0.15 : _ref$blendTime,\\n        _ref$decayRate = _ref.decayRate;\\n\\n    _ref$decayRate = _ref$decayRate === void 0 ? {} : _ref$decayRate;\\n    var _ref$decayRate$amount = _ref$decayRate.amount,\\n        amount = _ref$decayRate$amount === void 0 ? 0.5 : _ref$decayRate$amount,\\n        _ref$decayRate$second = _ref$decayRate.seconds,\\n        seconds = _ref$decayRate$second === void 0 ? 0.5 : _ref$decayRate$second,\\n        _ref$easingFn = _ref.easingFn,\\n        visemeEasingFn = _ref$easingFn === void 0 ? Quadratic.InOut : _ref$easingFn,\\n        _ref$layers = _ref.layers,\\n        visemeLayers = _ref$layers === void 0 ? [] : _ref$layers;\\n\\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\\n        _ref2$blendTime = _ref2.blendTime,\\n        talkingBlendTime = _ref2$blendTime === void 0 ? 0.75 : _ref2$blendTime,\\n        _ref2$easingFn = _ref2.easingFn,\\n        talkingEasingFn = _ref2$easingFn === void 0 ? Quadratic.InOut : _ref2$easingFn,\\n        _ref2$layers = _ref2.layers,\\n        talkingLayers = _ref2$layers === void 0 ? [] : _ref2$layers;\\n\\n    var visemeLeadTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.067;\\n\\n    LipsyncFeature_classCallCheck(this, LipsyncFeature);\\n\\n    _this = _super.call(this, host);\\n    _this._visemeLayers = {};\\n    _this._talkingLayers = {};\\n    _this.visemeLeadTime = visemeLeadTime; // Register the viseme layers\\n\\n    visemeLayers.forEach(function (_ref3) {\\n      var name = _ref3.name,\\n          animation = _ref3.animation,\\n          _ref3$visemeMap = _ref3.visemeMap,\\n          visemeMap = _ref3$visemeMap === void 0 ? DefaultVisemeMap : _ref3$visemeMap;\\n\\n      _this.registerVisemeLayer(name, {\\n        animation: animation,\\n        visemeMap: visemeMap,\\n        decayRate: {\\n          amount: amount,\\n          seconds: seconds\\n        },\\n        blendTime: visemeBlendTime,\\n        easingFn: visemeEasingFn\\n      });\\n    }); // Register the talking layers\\n\\n    talkingLayers.forEach(function (_ref4) {\\n      var name = _ref4.name,\\n          animation = _ref4.animation;\\n\\n      _this.registerTalkingLayer(name, {\\n        animation: animation,\\n        blendTime: talkingBlendTime,\\n        easingFn: talkingEasingFn\\n      });\\n    });\\n    return _this;\\n  }\\n  /**\\r\\n   * Ensure that registered viseme animations are FreeBlendStates.\\r\\n   *\\r\\n   * @private\\r\\n   *\\r\\n   * @param {string} layerName - Name of the layer that contains the viseme animation.\\r\\n   * @param {string} animationName - Name of the animation.\\r\\n   */\\n\\n\\n  LipsyncFeature_createClass(LipsyncFeature, [{\\n    key: "_registerVisemeAnimation",\\n    value: function _registerVisemeAnimation(layerName, animationName) {\\n      if (this._managedLayers[layerName].animations[animationName].isActive) {\\n        if (this._host.AnimationFeature.getAnimationType(layerName, animationName) !== \\\'freeBlend\\\') {\\n          // Warn and deactivate if the registered state is not freeBlend\\n          console.warn("Cannot register Lipsync viseme animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". Viseme animations must be of type \\\'freeBlend\\\'."));\\n          this._managedLayers[layerName].animations[animationName].isActive = false;\\n        } else {\\n          // Check if the blendWeights can be manipulated now\\n          var weightNames = this._host.AnimationFeature.getAnimationBlendNames(layerName, animationName);\\n\\n          var visemeMap = this._managedLayers[layerName].animations[animationName].visemeMap;\\n          Object.values(visemeMap).forEach(function (visemeOptions) {\\n            visemeOptions.isActive = weightNames.includes(visemeOptions.name);\\n          });\\n        }\\n      }\\n    }\\n    /**\\r\\n     * If the added feature is TextToSpeech, update its speechMarkOffset variable.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} typeName - Name of the type of feature that was added.\\r\\n     */\\n\\n  }, {\\n    key: "_onFeatureAdded",\\n    value: function _onFeatureAdded(typeName) {\\n      this._visemeLayers = this._visemeLayers || {};\\n      this._talkingLayers = this._talkingLayers || {};\\n\\n      LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "_onFeatureAdded", this).call(this, typeName);\\n\\n      if (typeName === \\\'TextToSpeechFeature\\\') {\\n        this._host.TextToSpeechFeature.speechmarkOffset = -this._visemeLeadTime || 0;\\n      }\\n    }\\n  }, {\\n    key: "_onLayerAdded",\\n    value: function _onLayerAdded(_ref5) {\\n      var name = _ref5.name;\\n\\n      LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "_onLayerAdded", this).call(this, {\\n        name: name\\n      }); // Validate the viseme animation\\n\\n\\n      if (this._visemeLayers[name] !== undefined) {\\n        this._registerVisemeAnimation(name, this._visemeLayers[name]);\\n      }\\n    }\\n  }, {\\n    key: "_onAnimationAdded",\\n    value: function _onAnimationAdded(_ref6) {\\n      var layerName = _ref6.layerName,\\n          animationName = _ref6.animationName;\\n\\n      LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "_onAnimationAdded", this).call(this, {\\n        layerName: layerName\\n      }); // Validate the viseme animation\\n\\n\\n      if (this._visemeLayers[layerName] === animationName) {\\n        this._registerVisemeAnimation(layerName, this._visemeLayers[layerName]);\\n      }\\n    }\\n  }, {\\n    key: "_onPlay",\\n    value: function _onPlay() {\\n      var _this2 = this;\\n\\n      // Turn on the layer weights\\n      this.enable(); // Set the current animations\\n\\n      [this._visemeLayers, this._talkingLayers].forEach(function (layers) {\\n        Object.entries(layers).forEach(function (_ref7) {\\n          var _ref8 = LipsyncFeature_slicedToArray(_ref7, 2),\\n              layerName = _ref8[0],\\n              animationName = _ref8[1];\\n\\n          if (_this2._managedLayers[layerName].animations[animationName].isActive) {\\n            _this2._host.AnimationFeature.resumeAnimation(layerName, animationName);\\n          }\\n        });\\n      });\\n    }\\n  }, {\\n    key: "_onPause",\\n    value: function _onPause() {\\n      this._onStop();\\n    }\\n  }, {\\n    key: "_onResume",\\n    value: function _onResume() {\\n      this._onPlay();\\n    }\\n  }, {\\n    key: "_onStop",\\n    value: function _onStop() {\\n      var _this3 = this;\\n\\n      // Turn off the layer weights\\n      this.disable(); // Pause the current animations\\n\\n      [this._visemeLayers, this._talkingLayers].forEach(function (layers) {\\n        Object.entries(layers).forEach(function (_ref9) {\\n          var _ref10 = LipsyncFeature_slicedToArray(_ref9, 2),\\n              layerName = _ref10[0],\\n              animationName = _ref10[1];\\n\\n          if (_this3._managedLayers[layerName].animations[animationName].isActive) {\\n            _this3._host.AnimationFeature.pauseAnimation(layerName, animationName);\\n          }\\n        });\\n      });\\n    }\\n    /**\\r\\n     * When viseme events are caught, turn on weight of the new viseme for the duration\\r\\n     * of the speech mark, then turn weight back off.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} event - Event data passed from the speech.\\r\\n     * @param {Object} event.mark - Speechmark object.\\r\\n     */\\n\\n  }, {\\n    key: "_onViseme",\\n    value: function () {\\n      var _onViseme2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref11) {\\n        var _this4 = this;\\n\\n        var mark;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                mark = _ref11.mark;\\n                Object.entries(this._visemeLayers).forEach(function (_ref12) {\\n                  var _ref13 = LipsyncFeature_slicedToArray(_ref12, 2),\\n                      layerName = _ref13[0],\\n                      animName = _ref13[1];\\n\\n                  // Make sure the layer can be manipulated\\n                  var _this4$_managedLayers = _this4._managedLayers[layerName].animations[animName],\\n                      isActive = _this4$_managedLayers.isActive,\\n                      visemeMap = _this4$_managedLayers.visemeMap;\\n\\n                  if (!isActive) {\\n                    return;\\n                  } // Take variables from the viseme if they exist and default to the layer\\n\\n\\n                  var _this4$_managedLayers2 = LipsyncFeature_objectSpread(LipsyncFeature_objectSpread({}, _this4._managedLayers[layerName]), visemeMap[mark.value]),\\n                      viseme = _this4$_managedLayers2.name,\\n                      isVisemeActive = _this4$_managedLayers2.isActive,\\n                      decayRate = _this4$_managedLayers2.decayRate,\\n                      blendTime = _this4$_managedLayers2.blendTime,\\n                      easingFn = _this4$_managedLayers2.easingFn,\\n                      overrideWeight = _this4$_managedLayers2.overrideWeight;\\n\\n                  var visemeNames = _this4._host.AnimationFeature.getAnimationBlendNames(layerName, animName); // Make sure the new viseme has an active freeBlend weight\\n\\n\\n                  if (!isVisemeActive || !visemeNames.includes(viseme)) {\\n                    return;\\n                  } // Find the peak weight for the viseme and the amount of time it should\\n                  // take to reach it\\n\\n\\n                  var weight = 1;\\n                  var duration = mark.duration / 1000;\\n\\n                  if (duration < blendTime) {\\n                    var lerpFactor = blendTime > 0 ? duration / blendTime : 1;\\n                    weight = overrideWeight !== undefined ? overrideWeight : core_MathUtils.lerp(0, 1, lerpFactor);\\n                  }\\n\\n                  var blendInTime = Math.min(duration, blendTime); // Find the amount and time viseme will be held for\\n\\n                  var holdTime = duration - blendTime;\\n\\n                  if (holdTime < 0) {\\n                    // Perform in -> out animation\\n                    _this4._animateSimpleViseme(layerName, animName, viseme, weight, blendInTime, blendTime, easingFn);\\n                  } else {\\n                    var _lerpFactor = decayRate.seconds > 0 ? holdTime / decayRate.seconds : 1; // Perform in -> hold -> out animation\\n\\n\\n                    var decayWeight = core_MathUtils.lerp(weight, weight * decayRate.amount, Math.min(1, _lerpFactor));\\n\\n                    _this4._animateHeldViseme(layerName, animName, viseme, weight, decayWeight, blendInTime, holdTime, blendTime, easingFn);\\n                  }\\n                });\\n\\n              case 2:\\n              case "end":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function _onViseme(_x) {\\n        return _onViseme2.apply(this, arguments);\\n      }\\n\\n      return _onViseme;\\n    }()\\n    /**\\r\\n     * Animate a viseme blend weight towards a value and then back to zero.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the viseme.\\r\\n     * @param {string} animName - Name of the freeblend animation that contains\\r\\n     * the viseme.\\r\\n     * @param {string} visemeName - Name of the blend weight to manipulate.\\r\\n     * @param {number} weight - Peak weight to animate towards.\\r\\n     * @param {number} blendInTime - Amount of time it should take to reach the\\r\\n     * peak weight.\\r\\n     * @param {number} blendOutTime - Amount of time it should take to animate back\\r\\n     * to zero after reaching the peak weight.\\r\\n     * @param {Function} easingFn - Easing function to use during animation.\\r\\n     */\\n\\n  }, {\\n    key: "_animateSimpleViseme",\\n    value: function _animateSimpleViseme(layerName, animName, visemeName, peakWeight, blendInTime, blendOutTime, easingFn) {\\n      var _this5 = this;\\n\\n      // Animate towards the peak value\\n      var weightPromise = this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, peakWeight, blendInTime, easingFn); // Animate back to zero if there was no weight interruption\\n\\n\\n      weightPromise.then(function () {\\n        if (!weightPromise.canceled) {\\n          _this5._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, 0, blendOutTime, easingFn);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Animate a viseme blend weight towards a value and then back to zero.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the viseme.\\r\\n     * @param {string} animName - Name of the freeblend animation that contains\\r\\n     * the viseme.\\r\\n     * @param {string} visemeName - Name of the blend weight to manipulate.\\r\\n     * @param {number} peakWeight - Peak weight to animate towards.\\r\\n     * @param {number} decayWeight - Weight to animate towards after reaching the\\r\\n     * peak weight.\\r\\n     * @param {number} blendInTime - Amount of time it should take to reach the\\r\\n     * peak weight.\\r\\n     * @param {number} holdTime - Amount of time it should take to reach the decay\\r\\n     * weight after the peak weight has been reached.\\r\\n     * @param {number} blendOutTime - Amount of time it should take to animate back\\r\\n     * to zero after reaching the decay weight.\\r\\n     * @param {Function} easingFn - Easing function to use during animation.\\r\\n     */\\n\\n  }, {\\n    key: "_animateHeldViseme",\\n    value: function () {\\n      var _animateHeldViseme2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(layerName, animName, visemeName, peakWeight, decayWeight, blendInTime, holdTime, blendOutTime, easingFn) {\\n        var startPromise, holdPromise;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                // Animate towards the peak value\\n                startPromise = this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, peakWeight, blendInTime, easingFn);\\n                _context2.next = 3;\\n                return startPromise;\\n\\n              case 3:\\n                if (startPromise.canceled) {\\n                  _context2.next = 8;\\n                  break;\\n                }\\n\\n                // Animate towards the decay value if there was no weight interruption\\n                holdPromise = this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, decayWeight, holdTime, easingFn);\\n                _context2.next = 7;\\n                return holdPromise;\\n\\n              case 7:\\n                if (!holdPromise.canceled) {\\n                  // Animate back to zero if there was no weight interruption\\n                  this._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, visemeName, 0, blendOutTime, easingFn);\\n                }\\n\\n              case 8:\\n              case "end":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function _animateHeldViseme(_x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10) {\\n        return _animateHeldViseme2.apply(this, arguments);\\n      }\\n\\n      return _animateHeldViseme;\\n    }()\\n    /**\\r\\n     * Gets and sets the amount of time in seconds to negatively offset speechmark\\r\\n     * emission by.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "visemeLeadTime",\\n    get: function get() {\\n      return this._visemeLeadTime;\\n    },\\n    set: function set(seconds) {\\n      this._visemeLeadTime = seconds;\\n\\n      if (this._host.TextToSpeechFeature) {\\n        this._host.TextToSpeechFeature.speechmarkOffset = -seconds;\\n      }\\n    }\\n    /**\\r\\n     * Start keeping track of an animation layer that owns a freeBlend animation\\r\\n     * with blendWeights corresponding to visemes.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to keep track of.\\r\\n     * @param {Object=} options - Options for the layer.\\r\\n     * @param {string} [options.animation=\\\'visemes\\\'] - Name of the animation on the\\r\\n     * layer that will be played during speech. This animation must be of type\\r\\n     * freeBlend.\\r\\n     * @param {Object=} decayRate\\r\\n     * @param {number} [decayRate.amount=0.5] - The percentage to decrease the viseme\\\'s\\r\\n     * peak value by over time once the peak value has been reached.\\r\\n     * @param {number} [decayRate.seconds=0.5] - The amount of time in seconds to\\r\\n     * decrease the viseme\\\'s weight once it has reached its peak value.\\r\\n     * @param {number=} [options.blendTime=[LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link LipsyncFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\\r\\n     * Default amount of time to use when manipulating animation blendWeights.\\r\\n     * @param {Function=} options.easingFn - Default easing function to use when\\r\\n     * manipulating animation blendWeights.\\r\\n     * @param {Object} [options.visemeMap=DefaultVisemeMap] - Object containing key/value pairs of\\r\\n     * Polly viseme names mapped to objects containing the name of the corresponding\\r\\n     * animation blendWeight and any other animation options to use such as viseme\\r\\n     * specific blend times and easing functions.\\r\\n     */\\n\\n  }, {\\n    key: "registerVisemeLayer",\\n    value: function registerVisemeLayer(layerName) {\\n      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n          _ref14$animation = _ref14.animation,\\n          animation = _ref14$animation === void 0 ? \\\'visemes\\\' : _ref14$animation,\\n          _ref14$decayRate = _ref14.decayRate,\\n          decayRate = _ref14$decayRate === void 0 ? {\\n        amount: 0.5,\\n        seconds: 0.5\\n      } : _ref14$decayRate,\\n          _ref14$blendTime = _ref14.blendTime,\\n          blendTime = _ref14$blendTime === void 0 ? LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref14$blendTime,\\n          easingFn = _ref14.easingFn,\\n          _ref14$visemeMap = _ref14.visemeMap,\\n          visemeMap = _ref14$visemeMap === void 0 ? DefaultVisemeMap : _ref14$visemeMap;\\n\\n      // Register the layer and animation\\n      this.registerLayer(layerName, {\\n        decayRate: decayRate,\\n        blendTime: blendTime,\\n        easingFn: easingFn,\\n        animations: LipsyncFeature_defineProperty({}, animation, {\\n          visemeMap: visemeMap\\n        })\\n      });\\n      this._visemeLayers[layerName] = animation; // Validate the viseme animation\\n\\n      this._registerVisemeAnimation(layerName, animation);\\n    }\\n    /**\\r\\n     * Start keeping track of an animation layer that contains a looping animation\\r\\n     * to be played during speech.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to keep track of.\\r\\n     * @param {Object=} options - Options for the layer.\\r\\n     * @param {string} [options.animation=\\\'stand_talk\\\'] - Name of the animation on the\\r\\n     * layer that will be played during speech.\\r\\n     * @param {number} [options.blendTime=[LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link LipsyncFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\\r\\n     * Default amount of time to use when manipulating the layer\\\'s weights.\\r\\n     * @param {Function=} options.easingFn - Default easing function to use when\\r\\n     * manipulating the layer\\\'s weights.\\r\\n     */\\n\\n  }, {\\n    key: "registerTalkingLayer",\\n    value: function registerTalkingLayer(layerName) {\\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n          _ref15$animation = _ref15.animation,\\n          animation = _ref15$animation === void 0 ? \\\'stand_talk\\\' : _ref15$animation,\\n          _ref15$blendTime = _ref15.blendTime,\\n          blendTime = _ref15$blendTime === void 0 ? LipsyncFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref15$blendTime,\\n          easingFn = _ref15.easingFn;\\n\\n      // Register the layer and animation\\n      this.registerLayer(layerName, {\\n        blendTime: blendTime,\\n        easingFn: easingFn,\\n        animations: LipsyncFeature_defineProperty({}, animation, {})\\n      });\\n      this._talkingLayers[layerName] = animation;\\n    }\\n    /**\\r\\n     * Adds a namespace to the host with the name of the feature to contain properties\\r\\n     * and methods from the feature that users of the host need access to.\\r\\n     *\\r\\n     * @see LipsyncFeature\\r\\n     */\\n\\n  }, {\\n    key: "installApi",\\n    value: function installApi() {\\n      var _this6 = this;\\n\\n      /**\\r\\n       * @inner\\r\\n       * @namespace LipsyncFeature\\r\\n       */\\n      var api = LipsyncFeature_get(LipsyncFeature_getPrototypeOf(LipsyncFeature.prototype), "installApi", this).call(this);\\n      /**\\r\\n       * @memberof LipsyncFeature\\r\\n       * @name registerLayer\\r\\n       * @instance\\r\\n       * @method\\r\\n       * @see ManagedAnimationLayerInterface#registerLayer\\r\\n       */\\n\\n      /**\\r\\n       * @memberof LipsyncFeature\\r\\n       * @name registerAnimation\\r\\n       * @instance\\r\\n       * @method\\r\\n       * @see ManagedAnimationLayerInterface#registerAnimation\\r\\n       */\\n\\n      /**\\r\\n       * @memberof LipsyncFeature\\r\\n       * @name setLayerWeights\\r\\n       * @instance\\r\\n       * @method\\r\\n       * @see ManagedAnimationLayerInterface#setLayerWeights\\r\\n       */\\n\\n      /**\\r\\n       * @memberof LipsyncFeature\\r\\n       * @name enable\\r\\n       * @instance\\r\\n       * @method\\r\\n       * @see ManagedAnimationLayerInterface#enable\\r\\n       */\\n\\n      /**\\r\\n       * @memberof LipsyncFeature\\r\\n       * @name disable\\r\\n       * @instance\\r\\n       * @method\\r\\n       * @see ManagedAnimationLayerInterface#disable\\r\\n       */\\n\\n\\n      Object.assign(api, {\\n        /**\\r\\n         * @memberof LipsyncFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/LipsyncFeature#registerVisemeLayer\\r\\n         */\\n        registerVisemeLayer: this.registerVisemeLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof LipsyncFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/LipsyncFeature#registerTalkingLayer\\r\\n         */\\n        registerTalkingLayer: this.registerTalkingLayer.bind(this)\\n      });\\n      /**\\r\\n       * @memberof LipsyncFeature\\r\\n       * @instance\\r\\n       * @name visemeLeadTime\\r\\n       * @see core/LipsyncFeature#visemeLeadTime\\r\\n       */\\n\\n      Object.defineProperty(api, \\\'visemeLeadTime\\\', {\\n        get: function get() {\\n          return _this6.visemeLeadTime;\\n        },\\n        set: function set(seconds) {\\n          _this6.visemeLeadTime = seconds;\\n        }\\n      });\\n      return api;\\n    }\\n  }]);\\n\\n  return LipsyncFeature;\\n}(core_AbstractHostFeature.mix(awspack_TextToSpeechFeatureDependentInterface.Mixin, animpack_ManagedAnimationLayerInterface.Mixin));\\n\\n/* harmony default export */ const core_LipsyncFeature = (LipsyncFeature);\\n\\n;// CONCATENATED MODULE: ./src/core/awspack/SSMLSpeechmarkInterface.js\\nfunction SSMLSpeechmarkInterface_typeof(obj) { "@babel/helpers - typeof"; return SSMLSpeechmarkInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, SSMLSpeechmarkInterface_typeof(obj); }\\n\\nfunction SSMLSpeechmarkInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction SSMLSpeechmarkInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction SSMLSpeechmarkInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) SSMLSpeechmarkInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) SSMLSpeechmarkInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction SSMLSpeechmarkInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) SSMLSpeechmarkInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction SSMLSpeechmarkInterface_setPrototypeOf(o, p) { SSMLSpeechmarkInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SSMLSpeechmarkInterface_setPrototypeOf(o, p); }\\n\\nfunction SSMLSpeechmarkInterface_createSuper(Derived) { var hasNativeReflectConstruct = SSMLSpeechmarkInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = SSMLSpeechmarkInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = SSMLSpeechmarkInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return SSMLSpeechmarkInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction SSMLSpeechmarkInterface_possibleConstructorReturn(self, call) { if (call && (SSMLSpeechmarkInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return SSMLSpeechmarkInterface_assertThisInitialized(self); }\\n\\nfunction SSMLSpeechmarkInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction SSMLSpeechmarkInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction SSMLSpeechmarkInterface_getPrototypeOf(o) { SSMLSpeechmarkInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SSMLSpeechmarkInterface_getPrototypeOf(o); }\\n\\n/* eslint-disable no-unused-vars */\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/* eslint-disable no-empty */\\n\\n/**\\r\\n * Class factory interface for that registers callback method when a ssml speechmark event is emitted.\\r\\n *\\r\\n * @interface\\r\\n * @extends TextToSpeechFeatureDependentInterface\\r\\n */\\n\\nvar SSMLSpeechmarkInterface = /*#__PURE__*/function (_TextToSpeechFeatureD) {\\n  SSMLSpeechmarkInterface_inherits(SSMLSpeechmarkInterface, _TextToSpeechFeatureD);\\n\\n  var _super = SSMLSpeechmarkInterface_createSuper(SSMLSpeechmarkInterface);\\n\\n  function SSMLSpeechmarkInterface() {\\n    SSMLSpeechmarkInterface_classCallCheck(this, SSMLSpeechmarkInterface);\\n\\n    return _super.apply(this, arguments);\\n  }\\n\\n  SSMLSpeechmarkInterface_createClass(SSMLSpeechmarkInterface, [{\\n    key: "_onSsml",\\n    value:\\n    /**\\r\\n     * When ssml events are caught, this will try to parse the speech mark value and execute any function which meets criteria defined in the value.\\r\\n     * Speech mark value will be treated as stringified json format containing required feature name, function name and argument array to pass in.\\r\\n     * Example speech mark value might look like: \\\'{"feature":"GestureFeature", "method":"switchToGesture", "args":["genricA", 0.5]}\\\'\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} event - Event data passed from the speech.\\r\\n     * @param {Object} event.mark - Speechmark object.\\r\\n     */\\n    function _onSsml(_ref) {\\n      var mark = _ref.mark;\\n    }\\n    /**\\r\\n     * Creates a class that implements {@link SSMLSpeechmarkInterface}\\r\\n     * and extends a specified base class.\\r\\n     *\\r\\n     * @param {Class} BaseClass - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link SSMLSpeechmarkInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin(BaseClass) {\\n      var ParentClass = awspack_TextToSpeechFeatureDependentInterface.Mixin(BaseClass);\\n\\n      var SSMLSpeechMarkMixin = /*#__PURE__*/function (_ParentClass) {\\n        SSMLSpeechmarkInterface_inherits(SSMLSpeechMarkMixin, _ParentClass);\\n\\n        var _super2 = SSMLSpeechmarkInterface_createSuper(SSMLSpeechMarkMixin);\\n\\n        function SSMLSpeechMarkMixin() {\\n          SSMLSpeechmarkInterface_classCallCheck(this, SSMLSpeechMarkMixin);\\n\\n          return _super2.apply(this, arguments);\\n        }\\n\\n        SSMLSpeechmarkInterface_createClass(SSMLSpeechMarkMixin, [{\\n          key: "_onSsml",\\n          value: function _onSsml(_ref2) {\\n            var mark = _ref2.mark;\\n\\n            try {\\n              var _JSON$parse = JSON.parse(mark.value),\\n                  feature = _JSON$parse.feature,\\n                  method = _JSON$parse.method,\\n                  args = _JSON$parse.args;\\n\\n              if (this.constructor.name === feature) {\\n                var callback = this[method];\\n\\n                if (callback && typeof callback === \\\'function\\\') {\\n                  callback.apply(this, args);\\n                } else {\\n                  console.warn("Function ".concat(method, " does not exist within feature ").concat(feature));\\n                }\\n              }\\n            } catch (e) {}\\n          }\\n        }]);\\n\\n        return SSMLSpeechMarkMixin;\\n      }(ParentClass);\\n\\n      return SSMLSpeechMarkMixin;\\n    }\\n  }]);\\n\\n  return SSMLSpeechmarkInterface;\\n}(awspack_TextToSpeechFeatureDependentInterface);\\n\\n/* harmony default export */ const awspack_SSMLSpeechmarkInterface = (SSMLSpeechmarkInterface);\\n;// CONCATENATED MODULE: ./src/core/GestureFeature.js\\nfunction GestureFeature_typeof(obj) { "@babel/helpers - typeof"; return GestureFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, GestureFeature_typeof(obj); }\\n\\nfunction GestureFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction GestureFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? GestureFeature_ownKeys(Object(source), !0).forEach(function (key) { GestureFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : GestureFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction GestureFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction GestureFeature_slicedToArray(arr, i) { return GestureFeature_arrayWithHoles(arr) || GestureFeature_iterableToArrayLimit(arr, i) || GestureFeature_unsupportedIterableToArray(arr, i) || GestureFeature_nonIterableRest(); }\\n\\nfunction GestureFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction GestureFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return GestureFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return GestureFeature_arrayLikeToArray(o, minLen); }\\n\\nfunction GestureFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction GestureFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction GestureFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction GestureFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction GestureFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction GestureFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) GestureFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) GestureFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction GestureFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { GestureFeature_get = Reflect.get; } else { GestureFeature_get = function _get(target, property, receiver) { var base = GestureFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return GestureFeature_get.apply(this, arguments); }\\n\\nfunction GestureFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GestureFeature_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction GestureFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) GestureFeature_setPrototypeOf(subClass, superClass); }\\n\\nfunction GestureFeature_setPrototypeOf(o, p) { GestureFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GestureFeature_setPrototypeOf(o, p); }\\n\\nfunction GestureFeature_createSuper(Derived) { var hasNativeReflectConstruct = GestureFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = GestureFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = GestureFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return GestureFeature_possibleConstructorReturn(this, result); }; }\\n\\nfunction GestureFeature_possibleConstructorReturn(self, call) { if (call && (GestureFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return GestureFeature_assertThisInitialized(self); }\\n\\nfunction GestureFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction GestureFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction GestureFeature_getPrototypeOf(o) { GestureFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GestureFeature_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n\\nvar DefaultGestureWords = {\\n  big: [\\\'add\\\', \\\'above\\\', \\\'authority\\\', \\\'big\\\', \\\'cover\\\', \\\'full\\\', \\\'fly\\\', \\\'grow\\\', \\\'growth\\\', \\\'high\\\', \\\'huge\\\', \\\'increase\\\', \\\'major\\\', \\\'majority\\\', \\\'large\\\', \\\'leader\\\', \\\'lot\\\', \\\'raise\\\', \\\'rise\\\', \\\'tall\\\'],\\n  heart: [\\\'accept\\\', \\\'admit\\\', \\\'believe\\\', \\\'care\\\', \\\'feeling\\\', \\\'feel\\\', \\\'friend\\\', \\\'grateful\\\', \\\'happy\\\', \\\'heart\\\', \\\'human\\\', \\\'pain\\\', \\\'save\\\', \\\'safe\\\', \\\'kind\\\', \\\'love\\\'],\\n  "in": [\\\'include\\\', \\\'including\\\', \\\'inside\\\', \\\'into\\\', \\\'now\\\', \\\'near\\\', \\\'nearest\\\', \\\'closest\\\', \\\'therein\\\', \\\'within\\\'],\\n  many: [\\\'all\\\', \\\'always\\\', \\\'any\\\', \\\'anyone\\\', \\\'among\\\', \\\'area\\\', \\\'around\\\', \\\'beautiful\\\', \\\'entire\\\', \\\'environment\\\', \\\'environments\\\', \\\'environmental\\\', \\\'everybody\\\', \\\'everyone\\\', \\\'everything\\\', \\\'audience\\\', \\\'total\\\', \\\'group\\\', \\\'groups\\\', \\\'million\\\', \\\'millions\\\', \\\'others\\\', \\\'billion\\\', \\\'billions\\\', \\\'hundred\\\', \\\'hundreds\\\', \\\'many\\\', \\\'thousand\\\', \\\'thousands\\\', \\\'world\\\', \\\'worlds\\\', \\\'outside\\\', \\\'reveal\\\'],\\n  movement: [\\\'away\\\', \\\'across\\\', \\\'ahead\\\', \\\'along\\\', \\\'far\\\', \\\'fast\\\', \\\'follow\\\', \\\'go\\\', \\\'leave\\\', \\\'move\\\', \\\'movement\\\', \\\'through\\\', \\\'throughout\\\', \\\'toward\\\', \\\'travel\\\', \\\'turned\\\', \\\'passed\\\'],\\n  one: [\\\'single\\\', \\\'one\\\', \\\'once\\\', \\\'first\\\', \\\'firstly\\\', \\\'only\\\', \\\'solo\\\', \\\'warned\\\', \\\'truly\\\', \\\'up\\\', \\\'alone\\\'],\\n  aggressive: [\\\'power\\\', \\\'powers\\\', \\\'powerful\\\', \\\'assert\\\', \\\'assertive\\\', \\\'strong\\\', \\\'stronger\\\', \\\'strongest\\\', \\\'strength\\\', \\\'flex\\\', \\\'dang\\\', \\\'damn\\\', \\\'damnit\\\', \\\'darn\\\', \\\'shucks\\\', \\\'doh\\\', \\\'drat\\\', \\\'angry\\\', \\\'angrier\\\', \\\'angriest\\\', \\\'aggressive\\\', \\\'annoyed\\\', \\\'annoying\\\', \\\'attack\\\', \\\'attacking\\\', \\\'offense\\\', \\\'offensive\\\', \\\'battle\\\'],\\n  you: [\\\'you\\\', \\\'yall\\\', "y\\\'all", \\\'your\\\', \\\'yours\\\', \\\'thou\\\', \\\'thy\\\'],\\n  defense: [\\\'defense\\\', \\\'fear\\\', \\\'repulsed\\\', \\\'scared\\\', \\\'scary\\\', \\\'scarier\\\', \\\'scariest\\\', \\\'fearful\\\', \\\'afraid\\\', \\\'cower\\\', \\\'cowers\\\', \\\'cowering\\\', \\\'hideous\\\', \\\'doomed\\\', \\\'terrified\\\', \\\'terrify\\\', \\\'terrifying\\\', \\\'terrifies\\\', \\\'spooky\\\', \\\'spookier\\\', \\\'spookiest\\\'],\\n  wave: [\\\'hello\\\', \\\'hi\\\', \\\'hiya\\\', \\\'howdy\\\', \\\'welcome\\\', \\\'aloha\\\', \\\'heya\\\', \\\'hey\\\', \\\'bye\\\', \\\'goodbye\\\', \\\'hola\\\', \\\'adios\\\', \\\'chao\\\'],\\n  self: [\\\'my\\\', \\\'I\\\', \\\'myself\\\', \\\'self\\\', "I\\\'ve", \\\'Ive\\\', \\\'me\\\', \\\'mine\\\', \\\'own\\\']\\n};\\n/**\\r\\n * Gesture allows you to play animations on demand on one or more layers from script\\r\\n * or ssml. If gesture is played that is a QueueState, the queue will automatically\\r\\n * be progressed after a given hold time if a looping queued state is reached. Gesture\\r\\n * layers can optionally be automatically disabled when no gesture animation is\\r\\n * in progress.\\r\\n *\\r\\n * @extends AbstractHostFeature\\r\\n * @implements SSMLSpeechmarkInterface\\r\\n * @implements ManagedAnimationLayerInterface\\r\\n */\\n\\nvar GestureFeature = /*#__PURE__*/function (_AbstractHostFeature$) {\\n  GestureFeature_inherits(GestureFeature, _AbstractHostFeature$);\\n\\n  var _super = GestureFeature_createSuper(GestureFeature);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/HostObject} host - Host object that owns the feature.\\r\\n   * @param {Object=} options - Optional options for the feature.\\r\\n   * @param {number} [options.holdTime = 3] - Amount of time in seconds that must\\r\\n   * elapse before advancing a gesture that\\\'s a {@link QueueState} when the current\\r\\n   * state in the queue is set to loop infinitely.\\r\\n   * @param {number} [options.minimumInterval = 0.25] - The minimum amount of time\\r\\n   * in seconds that must elapse before another gesture can be played.\\r\\n   * @param  {Object} layers - An object that maps layer names to layer options.\\r\\n   * These are the layers that will be registered as tracked gesture layers. See\\r\\n   * {@link ManagedAnimationLayerInterface#registerLayer} for more information\\r\\n   * on expected format for each layer options object.\\r\\n   */\\n  function GestureFeature(host) {\\n    var _this;\\n\\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n        _ref$holdTime = _ref.holdTime,\\n        holdTime = _ref$holdTime === void 0 ? 3 : _ref$holdTime,\\n        _ref$minimumInterval = _ref.minimumInterval,\\n        minimumInterval = _ref$minimumInterval === void 0 ? 1 : _ref$minimumInterval,\\n        _ref$layers = _ref.layers,\\n        layers = _ref$layers === void 0 ? {} : _ref$layers;\\n\\n    GestureFeature_classCallCheck(this, GestureFeature);\\n\\n    _this = _super.call(this, host);\\n    _this.holdTime = holdTime;\\n    _this.minimumInterval = minimumInterval; // Register the gesture layers\\n\\n    Object.entries(layers).forEach(function (_ref2) {\\n      var _ref3 = GestureFeature_slicedToArray(_ref2, 2),\\n          name = _ref3[0],\\n          _ref3$ = _ref3[1],\\n          options = _ref3$ === void 0 ? {} : _ref3$;\\n\\n      _this.registerLayer(name, options);\\n    });\\n    return _this;\\n  }\\n  /**\\r\\n   * Return a valid hold time value. If hold time isn\\\'t defined for the animation,\\r\\n   * try to use the hold time for the layer. If that\\\'s not defined, fall back to\\r\\n   * the hold time for the feature.\\r\\n   *\\r\\n   * @private\\r\\n   *\\r\\n   * @param {Object} layer - Managed layer options object.\\r\\n   * @param {Object} animation - Managed animation options object.\\r\\n   *\\r\\n   * @returns {number}\\r\\n   */\\n\\n\\n  GestureFeature_createClass(GestureFeature, [{\\n    key: "_getHoldTime",\\n    value: function _getHoldTime(layer, animation) {\\n      var layerHoldTime = layer.holdTime !== undefined ? layer.holdTime : this.holdTime;\\n      return animation.holdTime !== undefined ? animation.holdTime : layerHoldTime;\\n    }\\n    /**\\r\\n     * Return a valid minimum interval value. If minimum interval isn\\\'t defined for\\r\\n     * the animation, try to use the minimum interval for the layer. If that\\\'s not\\r\\n     * defined, fall back to the minimum interval for the feature.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} layer - Managed layer options object.\\r\\n     * @param {Object} animation - Managed animation options object.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "_getMinimumInterval",\\n    value: function _getMinimumInterval(layer, animation) {\\n      var layerMinimumInterval = layer.minimumInterval !== undefined ? layer.minimumInterval : this.minimumInterval;\\n      return animation.minimumInterval !== undefined ? animation.minimumInterval : layerMinimumInterval;\\n    }\\n    /**\\r\\n     * Callback for {@link core/AnimationFeature#playNextAnimation} event. If the\\r\\n     * event is emitted for a managed animation and the new queued state cannot\\r\\n     * advance on its own, start a new timer promise that will advance the queue\\r\\n     * once it resolves.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options object passed from playNextAnimation event.\\r\\n     * @param {string} layerName - Name of the layer that owns the queue state.\\r\\n     * @param {string} animationName - Name of the queue state animation.\\r\\n     * @param {boolean} canAdvance - Whether or not the current state in the queue\\r\\n     * can advance on its own.\\r\\n     * @param {boolean} isQueueEnd - Whether the current state in the queue is the last\\r\\n     * state in the queue.\\r\\n     */\\n\\n  }, {\\n    key: "_onNext",\\n    value: function _onNext(_ref4) {\\n      var _this2 = this;\\n\\n      var layerName = _ref4.layerName,\\n          animationName = _ref4.animationName,\\n          canAdvance = _ref4.canAdvance,\\n          isQueueEnd = _ref4.isQueueEnd;\\n      // Exit if this isn\\\'t a managed layer\\n      var layer = this._managedLayers[layerName];\\n\\n      if (layer === undefined) {\\n        return;\\n      } // Exit if it isn\\\'t a managed animation\\n\\n\\n      var animation = layer.animations[animationName];\\n\\n      if (animation === undefined) {\\n        return;\\n      } // Start a new timer for looping states that aren\\\'t the end of the queue\\n\\n\\n      if (!canAdvance && !isQueueEnd && layer.currentGesture === animationName) {\\n        var holdTime = this._getHoldTime(layer, animation);\\n\\n        layer.holdTimer.cancel(); // Skip to the next animation right away if hold time is zero\\n\\n        if (holdTime <= 0) {\\n          this._host.AnimationFeature.playNextAnimation(layerName, animationName);\\n        } // Wait for the given hold time before progressing\\n        else {\\n          layer.holdTimer = core_Utils.wait(holdTime, {\\n            onFinish: function onFinish() {\\n              // Advance the queue to the next state\\n              if (layer.currentGesture === animationName) {\\n                _this2._host.AnimationFeature.playNextAnimation(layerName, animationName);\\n              }\\n            }\\n          });\\n        }\\n      }\\n    }\\n    /**\\r\\n     * Callback for {@link core/AnimationFeature#stopAnimation} event. If the\\r\\n     * event is emitted for a managed animation cancel the layer\\\'s stored timers.\\r\\n     * If the layer is set to auto-disable set its weight to 0.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options object passed from playNextAnimation event.\\r\\n     * @param {string} layerName - Name of the layer that owns the stopped animation.\\r\\n     * @param {string} animationName - Name of the animation that was stopped.\\r\\n     */\\n\\n  }, {\\n    key: "_onStop",\\n    value: function _onStop(_ref5) {\\n      var layerName = _ref5.layerName,\\n          animationName = _ref5.animationName;\\n      // Make sure the layer is managed\\n      var layer = this._managedLayers[layerName];\\n\\n      if (layer === undefined) {\\n        return;\\n      } // Make sure the animation is managed\\n\\n\\n      var animation = layer.animations[animationName];\\n\\n      if (animation !== undefined && animationName === layer.currentGesture) {\\n        layer.currentGesture = null;\\n        layer.playTimer = null;\\n        layer.holdTimer.cancel(); // Turn off layer weight\\n\\n        if (layer.autoDisable) {\\n          this.setLayerWeights(function (name) {\\n            return name === layerName;\\n          }, 0);\\n        }\\n      }\\n    }\\n  }, {\\n    key: "_onAnimationAdded",\\n    value: function _onAnimationAdded(_ref6) {\\n      var layerName = _ref6.layerName,\\n          animationName = _ref6.animationName;\\n      var layer = this._managedLayers[layerName];\\n\\n      if (layer !== undefined) {\\n        var animation = layer.animations[animationName]; // Register the animation as active if it is unmanaged\\n\\n        if (animation === undefined) {\\n          this.registerAnimation(layerName, animationName);\\n        } // Mark the animation as active if it is managed\\n        else {\\n          animation.isActive = true;\\n        }\\n      }\\n    }\\n  }, {\\n    key: "registerLayer",\\n    value: function registerLayer(name) {\\n      var _this3 = this;\\n\\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n      GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "registerLayer", this).call(this, name, GestureFeature_objectSpread(GestureFeature_objectSpread({}, options), {}, {\\n        holdTimer: core_Deferred.resolve(),\\n        playTimer: null,\\n        currentGesture: null\\n      }));\\n\\n      if (this._managedLayers[name].isActive) {\\n        this._host.AnimationFeature.getAnimations(name).forEach(function (anim) {\\n          // Automatically register all animations on the layer\\n          if (_this3._managedLayers[name].animations[anim] === undefined) {\\n            _this3.registerAnimation(name, anim, _this3._managedLayers[name].animations[anim]);\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: "registerAnimation",\\n    value: function registerAnimation(layerName, animationName) {\\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n\\n      // Try to fall back to a default word array\\n      if (!(options.words instanceof Array) && !(options.words instanceof Set)) {\\n        options.words = DefaultGestureWords[animationName] || [];\\n      }\\n\\n      GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "registerAnimation", this).call(this, layerName, animationName, options);\\n    }\\n    /**\\r\\n     * Create an object that maps ssml mark syntax required to play each gesture to\\r\\n     * the words array associated with each gesture. Words arrays are defined at when\\r\\n     * the gesture animation is registered. Gestures without associated words will\\r\\n     * be excluded from the result. The resulting object can be used as an input\\r\\n     * for {@link TextToSpeechUtils.autoGenerateSSMLMarks} to update a speech string\\r\\n     * with the markup required to play gestures timed with their associated words.\\r\\n     *\\r\\n     * @returns {Object}\\r\\n     */\\n\\n  }, {\\n    key: "createGestureMap",\\n    value: function createGestureMap() {\\n      var _this4 = this;\\n\\n      var gestureMap = {};\\n      Object.entries(this._managedLayers).forEach(function (_ref7) {\\n        var _ref8 = GestureFeature_slicedToArray(_ref7, 2),\\n            layerName = _ref8[0],\\n            animations = _ref8[1].animations;\\n\\n        Object.entries(animations).forEach(function (_ref9) {\\n          var _ref10 = GestureFeature_slicedToArray(_ref9, 2),\\n              animationName = _ref10[0],\\n              _ref10$ = _ref10[1],\\n              holdTime = _ref10$.holdTime,\\n              minimumInterval = _ref10$.minimumInterval,\\n              words = _ref10$.words,\\n              transitionTime = _ref10$.transitionTime;\\n\\n          // Only store gestures that have any associated words\\n          if (words.length) {\\n            var options = GestureFeature_objectSpread(GestureFeature_objectSpread(GestureFeature_objectSpread({}, holdTime && {\\n              holdTime: holdTime\\n            }), minimumInterval && {\\n              minimumInterval: minimumInterval\\n            }), transitionTime && {\\n              transitionTime: transitionTime\\n            });\\n\\n            var key = {\\n              feature: _this4.constructor.name,\\n              method: \\\'playGesture\\\',\\n              args: [layerName, animationName, options]\\n            };\\n            gestureMap[JSON.stringify(key)] = words;\\n          }\\n        });\\n      });\\n      return gestureMap;\\n    }\\n    /**\\r\\n     * Create an array that contains ssml mark syntax required to play each gesture\\r\\n     * that does not have any associated words. The resulting array can be used as\\r\\n     * an input for {@link TextToSpeechUtils.autoGenerateSSMLMarks} or\\r\\n     * {@link TextToSpeechUtils.addMarksToUnmarkedSentences} to update a speech\\r\\n     * string with the markup required to play random gestures at each unmarked\\r\\n     * sentence in the string.\\r\\n     *\\r\\n     * @param {Array.<string>=} layers - An array of names of managed layers to generate\\r\\n     * marks for. If undefined, use all managed layers.\\r\\n     *\\r\\n     * @returns {Array.<string>}\\r\\n     */\\n\\n  }, {\\n    key: "createGenericGestureArray",\\n    value: function createGenericGestureArray(layers) {\\n      var _this5 = this;\\n\\n      var genericGestures = [];\\n      layers = layers || Object.keys(this._managedLayers);\\n      layers.forEach(function (layerName) {\\n        var layer = _this5._managedLayers[layerName]; // Make sure the layer is managed\\n\\n        if (!layer) {\\n          return;\\n        }\\n\\n        Object.entries(layer.animations).forEach(function (_ref11) {\\n          var _ref12 = GestureFeature_slicedToArray(_ref11, 2),\\n              animationName = _ref12[0],\\n              _ref12$ = _ref12[1],\\n              holdTime = _ref12$.holdTime,\\n              minimumInterval = _ref12$.minimumInterval,\\n              words = _ref12$.words,\\n              transitionTime = _ref12$.transitionTime;\\n\\n          // Only store gestures that don\\\'t have any associated words\\n          if (!words.length) {\\n            var options = GestureFeature_objectSpread(GestureFeature_objectSpread(GestureFeature_objectSpread({}, holdTime && {\\n              holdTime: holdTime\\n            }), minimumInterval && {\\n              minimumInterval: minimumInterval\\n            }), transitionTime && {\\n              transitionTime: transitionTime\\n            });\\n\\n            var key = JSON.stringify({\\n              feature: _this5.constructor.name,\\n              method: \\\'playGesture\\\',\\n              args: [layerName, animationName, options]\\n            });\\n\\n            if (!genericGestures.includes(key)) {\\n              genericGestures.push(key);\\n            }\\n          }\\n        });\\n      });\\n      return genericGestures;\\n    }\\n    /**\\r\\n     * Play a managed gesture animation.\\r\\n     *\\r\\n     * @param {string} layerName - The name of the layer that contains the gesture\\r\\n     * animation.\\r\\n     * @param {string} animationName - The name of the gesture animation.\\r\\n     * @param {Object=} options - Optional gesture options.\\r\\n     * @param {number=} options.holdTime - This option only applies to {@link QueueState}\\r\\n     * gestures. When a QueueState gesture progresses to a looping state, this option\\r\\n     * defines how many seconds should elapse before moving the queue forward. If\\r\\n     * undefined, it will fall back first to the holdTime defined in the options when\\r\\n     * the gesture animation was registered and then to the holdTime defined on the\\r\\n     * feature.\\r\\n     * @param {number=} options.minimumInterval - The minimum amount of time that\\r\\n     * must have elapsed since the last time a gesture was played.\\r\\n     */\\n\\n  }, {\\n    key: "playGesture",\\n    value: function playGesture(layerName, animationName) {\\n      var _ref13 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\\n          holdTime = _ref13.holdTime,\\n          minimumInterval = _ref13.minimumInterval,\\n          transitionTime = _ref13.transitionTime,\\n          _ref13$force = _ref13.force,\\n          force = _ref13$force === void 0 ? false : _ref13$force;\\n\\n      // Make sure the animation is registered\\n      if (this._managedLayers[layerName] === undefined || this._managedLayers[layerName].animations[animationName] === undefined) {\\n        this.registerAnimation(layerName, animationName, {\\n          holdTime: holdTime,\\n          minimumInterval: minimumInterval,\\n          transitionTime: transitionTime\\n        });\\n      }\\n\\n      var layer = this._managedLayers[layerName];\\n      var animation = layer.animations[animationName]; // Make sure the animation is active\\n\\n      if (!animation.isActive) {\\n        // Create warning message based on which object doesn\\\'t exist yet\\n        var typeName = layer.isActive ? \\\'animation\\\' : \\\'layer\\\';\\n        var message = "Skipping gesture ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No ").concat(typeName, " exists with this name yet.");\\n        console.warn(message);\\n        return core_Deferred.cancel({\\n          reason: \\\'inactive\\\',\\n          value: typeName\\n        });\\n      } // Check if the gesture is already playing\\n\\n\\n      var currentGesture = layer.currentGesture;\\n\\n      if (currentGesture === animationName && !force) {\\n        var _message = "Skipping gesture ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". The gesture is already playing. Use options.force to force the gesture replay, which may result in a hard transition.");\\n\\n        console.warn(_message);\\n        return core_Deferred.cancel({\\n          reason: \\\'playing\\\',\\n          value: animationName\\n        });\\n      } // Update animation options\\n\\n\\n      if (holdTime !== undefined) {\\n        animation.holdTime = holdTime;\\n      }\\n\\n      if (minimumInterval !== undefined) {\\n        animation.minimumInterval = minimumInterval;\\n      } else {\\n        minimumInterval = this._getMinimumInterval(layer, animation);\\n      } // Check the interval\\n\\n\\n      if (!force && layer.playTimer !== null && layer.playTimer < minimumInterval) {\\n        console.warn("Skipping gesture ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". Minimum interval ").concat(minimumInterval, " has not been met."));\\n        return core_Deferred.cancel({\\n          reason: \\\'minimumInterval\\\',\\n          value: minimumInterval - layer.playTimer\\n        });\\n      } // Play the animation\\n\\n\\n      layer.currentGesture = animationName;\\n      layer.playTimer = 0;\\n      layer.holdTimer.cancel();\\n\\n      if (layer.autoDisable) {\\n        this.setLayerWeights(function (name) {\\n          return name === layerName;\\n        }, 1);\\n      }\\n\\n      return this._host.AnimationFeature.playAnimation(layerName, animationName, transitionTime);\\n    }\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      var _this6 = this;\\n\\n      GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "update", this).call(this, deltaTime); // Increment the timers\\n\\n\\n      Object.entries(this._managedLayers).forEach(function (_ref14) {\\n        var _ref15 = GestureFeature_slicedToArray(_ref14, 2),\\n            name = _ref15[0],\\n            options = _ref15[1];\\n\\n        if (options.isActive && !_this6._host.AnimationFeature.getPaused(name)) {\\n          options.holdTimer.execute(deltaTime);\\n\\n          if (options.playTimer !== null) {\\n            options.playTimer += deltaTime / 1000;\\n          }\\n        }\\n      });\\n    }\\n  }, {\\n    key: "installApi",\\n    value: function installApi() {\\n      /**\\r\\n       * @inner\\r\\n       * @namespace GestureFeature\\r\\n       */\\n      var api = GestureFeature_get(GestureFeature_getPrototypeOf(GestureFeature.prototype), "installApi", this).call(this);\\n\\n      Object.assign(api, {\\n        /**\\r\\n         * @memberof GestureFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see GestureFeature#createGestureMap\\r\\n         */\\n        createGestureMap: this.createGestureMap.bind(this),\\n\\n        /**\\r\\n         * @memberof GestureFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see GestureFeature#createGenericGestureArray\\r\\n         */\\n        createGenericGestureArray: this.createGenericGestureArray.bind(this),\\n\\n        /**\\r\\n         * @memberof GestureFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see GestureFeature#playGesture\\r\\n         */\\n        playGesture: this.playGesture.bind(this)\\n      });\\n    }\\n  }]);\\n\\n  return GestureFeature;\\n}(core_AbstractHostFeature.mix(awspack_SSMLSpeechmarkInterface.Mixin, animpack_ManagedAnimationLayerInterface.Mixin));\\n\\nObject.defineProperties(GestureFeature, {\\n  DEFAULT_LAYER_OPTIONS: {\\n    value: GestureFeature_objectSpread(GestureFeature_objectSpread({}, GestureFeature.DEFAULT_LAYER_OPTIONS), {}, {\\n      autoDisable: true\\n    }),\\n    writable: false\\n  },\\n  EVENT_DEPENDENCIES: {\\n    value: GestureFeature_objectSpread(GestureFeature_objectSpread({}, GestureFeature.EVENT_DEPENDENCIES), {}, {\\n      AnimationFeature: GestureFeature_objectSpread(GestureFeature_objectSpread({}, GestureFeature.EVENT_DEPENDENCIES.AnimationFeature), {}, {\\n        playNextAnimation: \\\'_onNext\\\',\\n        stopAnimation: \\\'_onStop\\\',\\n        interruptAnimation: \\\'_onStop\\\'\\n      })\\n    })\\n  }\\n});\\n/* harmony default export */ const core_GestureFeature = (GestureFeature);\\n\\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationUtils.js\\nfunction AnimationUtils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AnimationUtils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AnimationUtils_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationUtils_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationUtils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n/**\\r\\n * A collection of useful animation functions.\\r\\n *\\r\\n * @hideconstructor\\r\\n */\\n\\nvar AnimationUtils = /*#__PURE__*/function () {\\n  function AnimationUtils() {\\n    AnimationUtils_classCallCheck(this, AnimationUtils);\\n  }\\n\\n  AnimationUtils_createClass(AnimationUtils, null, [{\\n    key: "lerp",\\n    value: function lerp(from, to, factor) {\\n      console.warn("AnimationUtils.lerp is being deprecated. Use MathUtils.lerp instead.");\\n      return core_MathUtils.lerp(from, to, factor);\\n    }\\n    /**\\r\\n     * Clamp a number between 2 values.\\r\\n     *\\r\\n     * @param {number} value - Value to clamp.\\r\\n     * @param {number} [min=0] - Minumum value.\\r\\n     * @param {number} [max=1] - Maximum value.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "clamp",\\n    value: function clamp(value) {\\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\\n      console.warn("AnimationUtils.clamp is being deprecated. Use MathUtils.clamp instead.");\\n      return core_MathUtils.clamp(value, min, max);\\n    }\\n    /**\\r\\n     * Return a deferred promise that can be used to update the value of a numeric\\r\\n     * property of this object over time. Pass delta time in milliseconds to the\\r\\n     * deferred promise\\\'s execute method in an update loop to animate the property\\r\\n     * towards the target value.\\r\\n     *\\r\\n     * @param {Object} propertyOwner - Object that contains the property to animation.\\r\\n     * @param {string} propertyName - Name of the property to animate.\\r\\n     * @param {number} targetValue - Target value to reach.\\r\\n     * @param {Object=} options - Optional options object\\r\\n     * @param {number} [options.seconds=0] - Number of seconds it will take to reach\\r\\n     * the target value.\\r\\n     * @param {Function} [options.easingFn=Linear.InOut] - Easing function to use for animation.\\r\\n     * @param {Function} [options.onFinish] - Callback to execute once the animation completes.\\r\\n     * The target value is passed as a parameter.\\r\\n     * @param {Function=} options.onProgress - Callback to execute each time the animation\\r\\n     * property is updated during the animation. The property\\\'s value at the time of\\r\\n     * the update is passed as a parameter.\\r\\n     * @param {Function=} options.onCancel - Callback to execute if the user cancels the\\r\\n     * animation before completion. The animation property\\\'s value at the time of\\r\\n     * cancel is passed as a parameter.\\r\\n     * @param {Function=} options.onError - Callback to execute if the animation stops\\r\\n     * because an error is encountered. The error message is passed as a parameter.\\r\\n     *\\r\\n     * @returns {Deferred} Resolves with the property\\\'s value once it reaches the\\r\\n     * target value.\\r\\n     */\\n\\n  }, {\\n    key: "interpolateProperty",\\n    value: function interpolateProperty(propertyOwner, propertyName, targetValue) {\\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\\n          _ref$seconds = _ref.seconds,\\n          seconds = _ref$seconds === void 0 ? 0 : _ref$seconds,\\n          easingFn = _ref.easingFn,\\n          _onFinish = _ref.onFinish,\\n          _onProgress = _ref.onProgress,\\n          _onCancel = _ref.onCancel,\\n          onError = _ref.onError;\\n\\n      // Make sure property is an object\\n      if (!(propertyOwner instanceof Object)) {\\n        var e = new Error("Cannot interpolate property ".concat(propertyName, ". Property owner must be an object."));\\n\\n        if (typeof onError === \\\'function\\\') {\\n          onError(e);\\n        }\\n\\n        return core_Deferred.reject(e);\\n      } // Make sure property is numeric\\n\\n\\n      if (Number.isNaN(Number(propertyOwner[propertyName]))) {\\n        var _e = new Error("Cannot interpolate property ".concat(propertyName, ". Property must be numeric."));\\n\\n        if (typeof onError === \\\'function\\\') {\\n          onError(_e);\\n        }\\n\\n        return core_Deferred.reject(_e);\\n      } // Make sure the target value is numeric\\n\\n\\n      if (Number.isNaN(Number(targetValue))) {\\n        var _e2 = new Error("Cannot interpolate property ".concat(propertyName, " to value ").concat(targetValue, ". Target value must be numeric."));\\n\\n        if (typeof onError === \\\'function\\\') {\\n          onError(_e2);\\n        }\\n\\n        return core_Deferred.reject(_e2);\\n      } // Resolve immediately if the target has already been reached\\n\\n\\n      var startValue = propertyOwner[propertyName];\\n\\n      if (startValue === targetValue) {\\n        if (typeof _onFinish === \\\'function\\\') {\\n          _onFinish(targetValue);\\n        }\\n\\n        return core_Deferred.resolve(targetValue);\\n      } // Default to linear interpolation\\n\\n\\n      if (typeof easingFn !== \\\'function\\\') {\\n        if (easingFn !== undefined) {\\n          console.warn("Invalid property interpolation easingFn. Defaulting to linear interpolation.");\\n        }\\n\\n        easingFn = Linear.InOut;\\n      }\\n\\n      var interpolator = core_Utils.wait(seconds, {\\n        onFinish: function onFinish() {\\n          propertyOwner[propertyName] = targetValue;\\n\\n          if (typeof _onFinish === \\\'function\\\') {\\n            _onFinish(targetValue);\\n          }\\n        },\\n        onCancel: function onCancel() {\\n          if (typeof _onCancel === \\\'function\\\') {\\n            _onCancel(propertyOwner[propertyName]);\\n          }\\n        },\\n        onProgress: function onProgress(progress) {\\n          if (propertyOwner[propertyName] !== targetValue) {\\n            // Calculate the lerp factor\\n            var easeFactor = easingFn(progress);\\n\\n            if (typeof easeFactor !== \\\'number\\\') {\\n              var _e3 = new Error("Invalid property interpolation easingFn. EasingFn must return a number.");\\n\\n              interpolator.reject(_e3);\\n              return;\\n            } // Update the value\\n\\n\\n            propertyOwner[propertyName] = core_MathUtils.lerp(startValue, targetValue, easeFactor);\\n          } // Signal progress\\n\\n\\n          if (typeof _onProgress === \\\'function\\\') {\\n            _onProgress(propertyOwner[propertyName]);\\n          } // Signal completion once time is up\\n\\n\\n          if (progress === 1) {\\n            propertyOwner[propertyName] = targetValue;\\n            interpolator.resolve(targetValue);\\n          }\\n        },\\n        onError: onError\\n      });\\n      return interpolator;\\n    }\\n  }]);\\n\\n  return AnimationUtils;\\n}();\\n\\n/* harmony default export */ const animpack_AnimationUtils = (AnimationUtils);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/AbstractState.js\\nfunction AbstractState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AbstractState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AbstractState_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractState_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n/**\\r\\n * Base class for a state in our animation system.\\r\\n *\\r\\n * @abstract\\r\\n */\\n\\nvar AbstractState = /*#__PURE__*/function () {\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object=} options - Options for the animation state.\\r\\n   * @param {string=} options.name - Name for the animation state. Names must be\\r\\n   * unique for the container the state is applied to and should be validated at\\r\\n   * the container level. If no name is given it will default to the constructor\\r\\n   * name.\\r\\n   * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n   */\\n  function AbstractState() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    AbstractState_classCallCheck(this, AbstractState);\\n\\n    this.name = options.name !== undefined ? options.name : this.constructor.name;\\n    this._weight = options.weight !== undefined ? core_MathUtils.clamp(options.weight, 0, 1) : 0;\\n    this._internalWeight = this._weight;\\n    this._paused = false;\\n    this._promises = {\\n      finish: core_Deferred.resolve(),\\n      weight: core_Deferred.resolve(),\\n      play: core_Deferred.resolve()\\n    };\\n    this._playCallbacks = {\\n      onFinish: undefined,\\n      onError: undefined,\\n      onCancel: undefined\\n    };\\n  }\\n  /**\\r\\n   * Gets whether or not the state is currently paused.\\r\\n   *\\r\\n   * @type {number}\\r\\n   */\\n\\n\\n  AbstractState_createClass(AbstractState, [{\\n    key: "paused",\\n    get: function get() {\\n      return this._paused;\\n    }\\n    /**\\r\\n     * Gets and sets the user defined weight.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "weight",\\n    get: function get() {\\n      return this._weight;\\n    },\\n    set: function set(weight) {\\n      this._weight = core_MathUtils.clamp(weight, 0, 1);\\n    }\\n    /**\\r\\n     * Gets whether or not the weight is currently being animated.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "weightPending",\\n    get: function get() {\\n      return this._promises.weight && this._promises.weight.pending;\\n    }\\n    /**\\r\\n     * Updates the user defined weight over time.\\r\\n     *\\r\\n     * @param {number} weight - The target weight value.\\r\\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\\r\\n     * target weight.\\r\\n     * @param {Function=} easingFn - The easing function to use for interpolation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "setWeight",\\n    value: function setWeight(weight) {\\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\\n\\n      this._promises.weight.cancel();\\n\\n      weight = core_MathUtils.clamp(weight);\\n      this._promises.weight = animpack_AnimationUtils.interpolateProperty(this, \\\'weight\\\', weight, {\\n        seconds: seconds,\\n        easingFn: easingFn\\n      });\\n      return this._promises.weight;\\n    }\\n    /**\\r\\n     * Gets the internal weight.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "internalWeight",\\n    get: function get() {\\n      return this._internalWeight;\\n    }\\n    /**\\r\\n     * Multiplies the user weight by a factor to determine the internal weight.\\r\\n     *\\r\\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\\r\\n     */\\n\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      this._internalWeight = this._weight * factor;\\n    }\\n    /**\\r\\n     * Update any values that need to be evaluated every frame.\\r\\n     *\\r\\n     * @param {number} deltaTime - Time in milliseconds since the last update.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      if (!this._paused) {\\n        Object.values(this._promises).forEach(function (promise) {\\n          promise.execute(deltaTime);\\n        });\\n      }\\n    }\\n    /**\\r\\n     * Start playback of the state from the beginning.\\r\\n     *\\r\\n     * @param {Function=} onFinish - Function to execute when the state finishes.\\r\\n     * @param {Function=} onError - Function to execute if the state encounters\\r\\n     * an error during playback.\\r\\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "play",\\n    value: function play(onFinish, onError, onCancel) {\\n      this._paused = false;\\n      this._playCallbacks.onFinish = onFinish;\\n      this._playCallbacks.onError = onError;\\n      this._playCallbacks.onCancel = onCancel;\\n      this._promises.play = new core_Deferred(undefined, onFinish, onError, onCancel);\\n      this._promises.finish = core_Deferred.all([this._promises.play, this._promises.weight]);\\n      return this._promises.finish;\\n    }\\n    /**\\r\\n     * Pause playback of the state. This prevents pending promises from being executed.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      this._paused = true;\\n      return true;\\n    }\\n    /**\\r\\n     * Resume playback of the state.\\r\\n     *\\r\\n     * @param {Function=} onFinish - Function to execute when the state finishes.\\r\\n     * @param {Function=} onError - Function to execute if the state encounters\\r\\n     * an error during playback.\\r\\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "resume",\\n    value: function resume(onFinish, onError, onCancel) {\\n      this._paused = false;\\n\\n      if (!this._promises.play.pending) {\\n        this._playCallbacks.onFinish = onFinish || this._playCallbacks.onFinish;\\n        this._playCallbacks.onError = onError || this._playCallbacks.onError;\\n        this._playCallbacks.onCancel = onCancel || this._playCallbacks.onCancel;\\n        this._promises.play = new core_Deferred(undefined, this._playCallbacks.onFinish, this._playCallbacks.onError, this._playCallbacks.onCancel);\\n        this._promises.finish = core_Deferred.all([this._promises.play, this._promises.weight]);\\n      }\\n\\n      return this._promises.finish;\\n    }\\n    /**\\r\\n     * Cancel playback of the state and cancel any pending promises.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      this._paused = true;\\n      Object.values(this._promises).forEach(function (promise) {\\n        promise.cancel();\\n      });\\n      return true;\\n    }\\n    /**\\r\\n     * Stop playback of the state and resolve any pending promises.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      this._paused = true;\\n      Object.values(this._promises).forEach(function (promise) {\\n        promise.resolve();\\n      });\\n      return true;\\n    }\\n    /**\\r\\n     * Cancel any pending promises and remove reference to them.\\r\\n     */\\n\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      this.cancel();\\n      delete this._promises;\\n    }\\n    /**\\r\\n     * Force the internal weight to 0. Should be called before switching or transitioning\\r\\n     * to a new state.\\r\\n     */\\n\\n  }, {\\n    key: "deactivate",\\n    value: function deactivate() {\\n      this.updateInternalWeight(0);\\n    }\\n  }]);\\n\\n  return AbstractState;\\n}();\\n\\n/* harmony default export */ const state_AbstractState = (AbstractState);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/TransitionState.js\\nfunction TransitionState_typeof(obj) { "@babel/helpers - typeof"; return TransitionState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TransitionState_typeof(obj); }\\n\\nfunction TransitionState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction TransitionState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction TransitionState_createClass(Constructor, protoProps, staticProps) { if (protoProps) TransitionState_defineProperties(Constructor.prototype, protoProps); if (staticProps) TransitionState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction TransitionState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { TransitionState_get = Reflect.get; } else { TransitionState_get = function _get(target, property, receiver) { var base = TransitionState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return TransitionState_get.apply(this, arguments); }\\n\\nfunction TransitionState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = TransitionState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction TransitionState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TransitionState_setPrototypeOf(subClass, superClass); }\\n\\nfunction TransitionState_setPrototypeOf(o, p) { TransitionState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TransitionState_setPrototypeOf(o, p); }\\n\\nfunction TransitionState_createSuper(Derived) { var hasNativeReflectConstruct = TransitionState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TransitionState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TransitionState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TransitionState_possibleConstructorReturn(this, result); }; }\\n\\nfunction TransitionState_possibleConstructorReturn(self, call) { if (call && (TransitionState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TransitionState_assertThisInitialized(self); }\\n\\nfunction TransitionState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction TransitionState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction TransitionState_getPrototypeOf(o) { TransitionState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TransitionState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n/**\\r\\n * Class for smooth transitioning between states on an animation layer.\\r\\n *\\r\\n * @extends AbstractState\\r\\n */\\n\\nvar TransitionState = /*#__PURE__*/function (_AbstractState) {\\n  TransitionState_inherits(TransitionState, _AbstractState);\\n\\n  var _super = TransitionState_createSuper(TransitionState);\\n\\n  function TransitionState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    TransitionState_classCallCheck(this, TransitionState);\\n\\n    _this = _super.call(this, options);\\n    _this._to = null;\\n    _this._from = [];\\n    _this._weightPromise = core_Deferred.resolve();\\n    return _this;\\n  }\\n\\n  TransitionState_createClass(TransitionState, [{\\n    key: "internalWeight",\\n    get: function get() {\\n      // Find the combined weight of all sub-states\\n      var totalWeight = 0;\\n\\n      if (this._to) {\\n        totalWeight += this._to.weight;\\n      }\\n\\n      this._from.forEach(function (state) {\\n        totalWeight += state.weight;\\n      });\\n\\n      return totalWeight * this._internalWeight;\\n    }\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      var _this2 = this;\\n\\n      TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "updateInternalWeight", this).call(this, factor);\\n\\n      this._from.forEach(function (state) {\\n        state.updateInternalWeight(_this2._internalWeight);\\n      });\\n\\n      if (this._to) {\\n        this._to.updateInternalWeight(this._internalWeight);\\n      }\\n    }\\n    /**\\r\\n     * Update sub-states the transition is controlling and start new weight\\r\\n     * animations on each one. This should be called each time the current state of\\r\\n     * an animation layer gets updated to a new value and a transition time greater\\r\\n     * that zero is specified.\\r\\n     *\\r\\n     * @param {Array.<AbstractState>} [currentStates=[]] - States whose weight values\\r\\n     * will be animated to 0.\\r\\n     * @param {AbstractState=} targetState - State whose weight will be animated\\r\\n     * to 1.\\r\\n     * @param {number} transitionTime - Amount of time it will in seconds take for\\r\\n     * weight animations to complete.\\r\\n     * @param {Function=} easingFn - Easing function to use for weight animations.\\r\\n     * Default is Easing.Linear.InOut.\\r\\n     * @param {Function=} onComplete - Function to execute once all weight animations\\r\\n     * complete.\\r\\n     */\\n\\n  }, {\\n    key: "configure",\\n    value: function configure() {\\n      var currentStates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\\n      var targetState = arguments.length > 1 ? arguments[1] : undefined;\\n      var transitionTime = arguments.length > 2 ? arguments[2] : undefined;\\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\\n      var onComplete = arguments.length > 4 ? arguments[4] : undefined;\\n\\n      // Deactivate any states that aren\\\'t in the new configuration\\n      if (this._to === targetState || currentStates.includes(this._to)) {\\n        this._to = null;\\n      }\\n\\n      this._from = this._from.filter(function (state) {\\n        return state !== targetState && !currentStates.includes(state);\\n      });\\n      this.deactivate();\\n      this._from = currentStates;\\n      this._to = targetState;\\n      this.reset(transitionTime, easingFn, onComplete);\\n    }\\n    /**\\r\\n     * Start new weight animations state the transition controls. This should be called\\r\\n     * if an animation is played with a transition time greater than zero and a transtion\\r\\n     * to that animation was already in progress.\\r\\n     *\\r\\n     * @param {number} transitionTime - Amount of time it will in seconds take for\\r\\n     * weight animations to complete.\\r\\n     * @param {Function=} easingFn - Easing function to use for weight animations.\\r\\n     * Default is Easing.Linear.InOut.\\r\\n     * @param {Function=} onComplete - Function to execute once all weight animations\\r\\n     * complete.\\r\\n     */\\n\\n  }, {\\n    key: "reset",\\n    value: function reset(transitionTime, easingFn, onComplete) {\\n      var _this3 = this;\\n\\n      // Stop any pending promises\\n      this._weightPromise.cancel(); // Start tweening weight to 0 for the current states\\n\\n\\n      var weightPromises = this._from.map(function (state) {\\n        return state.setWeight(0, transitionTime, easingFn);\\n      }); // Start tweening weight to 1 for the target state\\n\\n\\n      if (this._to) {\\n        weightPromises.push(this._to.setWeight(1, transitionTime, easingFn));\\n        this.name = this._to.name;\\n      } else {\\n        this.name = null;\\n      }\\n\\n      this._weightPromise = core_Deferred.all(weightPromises, function () {\\n        _this3._from.forEach(function (state) {\\n          state.cancel();\\n          state.deactivate();\\n        });\\n\\n        if (typeof onComplete === \\\'function\\\') {\\n          onComplete();\\n        }\\n      });\\n    }\\n  }, {\\n    key: "play",\\n    value: function play(onFinish, onError, onCancel, onNext) {\\n      this._paused = false;\\n      this._playCallbacks.onFinish = onFinish;\\n      this._playCallbacks.onError = onError;\\n      this._playCallbacks.onCancel = onCancel;\\n      var promises = [this._weightPromise];\\n\\n      this._from.forEach(function (state) {\\n        state.resume();\\n      });\\n\\n      if (this._to) {\\n        this._promises.play = this._to.play(undefined, undefined, undefined, onNext);\\n        promises.push(this._promises.play);\\n      }\\n\\n      this._promises.finish = core_Deferred.all(promises, onFinish, onError, onCancel);\\n      return this._promises.finish;\\n    }\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      this._from.forEach(function (state) {\\n        state.pause();\\n      });\\n\\n      if (this._to) {\\n        this._to.pause();\\n      }\\n\\n      return TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "pause", this).call(this);\\n    }\\n  }, {\\n    key: "resume",\\n    value: function resume(onFinish, onError, onCancel, onNext) {\\n      this._paused = false;\\n\\n      if (!this._promises.play.pending) {\\n        this._playCallbacks.onFinish = onFinish || this._playCallbacks.onFinish;\\n        this._playCallbacks.onError = onError || this._playCallbacks.onError;\\n        this._playCallbacks.onCancel = onCancel || this._playCallbacks.onCancel;\\n      }\\n\\n      var promises = [this._weightPromise];\\n\\n      this._from.forEach(function (state) {\\n        state.resume();\\n      });\\n\\n      if (this._to) {\\n        this._promises.play = this._to.resume(undefined, undefined, undefined, onNext);\\n        promises.push(this._promises.play);\\n      }\\n\\n      this._promises.finish = core_Deferred.all(promises, this._playCallbacks.onFinish, this._playCallbacks.onError, this._playCallbacks.onCancel);\\n      return this._promises.finish;\\n    }\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      this._from.forEach(function (state) {\\n        state.pause();\\n      });\\n\\n      if (this._to) {\\n        this._to.cancel();\\n      }\\n\\n      this._weightPromise.cancel();\\n\\n      return TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "cancel", this).call(this);\\n    }\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      this._from.forEach(function (state) {\\n        state.pause();\\n      });\\n\\n      if (this._to) {\\n        this._to.stop();\\n      }\\n\\n      return TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "stop", this).call(this);\\n    }\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "update", this).call(this, deltaTime);\\n\\n      this._from.forEach(function (state) {\\n        state.update(deltaTime);\\n      });\\n\\n      if (this._to) {\\n        this._to.update(deltaTime);\\n      }\\n    }\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      TransitionState_get(TransitionState_getPrototypeOf(TransitionState.prototype), "discard", this).call(this);\\n\\n      this._weightPromise.cancel();\\n\\n      delete this._weightPromise;\\n      this._to = null;\\n      this._from.length = 0;\\n    }\\n  }, {\\n    key: "deactivate",\\n    value: function deactivate() {\\n      if (this._to) {\\n        this._to.deactivate();\\n      }\\n\\n      this._from.forEach(function (state) {\\n        state.deactivate();\\n      });\\n    }\\n  }]);\\n\\n  return TransitionState;\\n}(state_AbstractState);\\n\\n/* harmony default export */ const state_TransitionState = (TransitionState);\\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationPlayerInterface.js\\nfunction AnimationPlayerInterface_typeof(obj) { "@babel/helpers - typeof"; return AnimationPlayerInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationPlayerInterface_typeof(obj); }\\n\\nfunction AnimationPlayerInterface_toConsumableArray(arr) { return AnimationPlayerInterface_arrayWithoutHoles(arr) || AnimationPlayerInterface_iterableToArray(arr) || AnimationPlayerInterface_unsupportedIterableToArray(arr) || AnimationPlayerInterface_nonIterableSpread(); }\\n\\nfunction AnimationPlayerInterface_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction AnimationPlayerInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AnimationPlayerInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AnimationPlayerInterface_arrayLikeToArray(o, minLen); }\\n\\nfunction AnimationPlayerInterface_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction AnimationPlayerInterface_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AnimationPlayerInterface_arrayLikeToArray(arr); }\\n\\nfunction AnimationPlayerInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction AnimationPlayerInterface_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationPlayerInterface_get = Reflect.get; } else { AnimationPlayerInterface_get = function _get(target, property, receiver) { var base = AnimationPlayerInterface_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationPlayerInterface_get.apply(this, arguments); }\\n\\nfunction AnimationPlayerInterface_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationPlayerInterface_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction AnimationPlayerInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationPlayerInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction AnimationPlayerInterface_setPrototypeOf(o, p) { AnimationPlayerInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationPlayerInterface_setPrototypeOf(o, p); }\\n\\nfunction AnimationPlayerInterface_createSuper(Derived) { var hasNativeReflectConstruct = AnimationPlayerInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationPlayerInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationPlayerInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationPlayerInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction AnimationPlayerInterface_possibleConstructorReturn(self, call) { if (call && (AnimationPlayerInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationPlayerInterface_assertThisInitialized(self); }\\n\\nfunction AnimationPlayerInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction AnimationPlayerInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction AnimationPlayerInterface_getPrototypeOf(o) { AnimationPlayerInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationPlayerInterface_getPrototypeOf(o); }\\n\\nfunction AnimationPlayerInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AnimationPlayerInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AnimationPlayerInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationPlayerInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationPlayerInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/* eslint-disable no-unused-vars */\\n\\n/* eslint-disable no-empty-function */\\n\\n/* eslint-disable getter-return */\\n\\n/* eslint-disable no-useless-constructor */\\n\\n\\n/**\\r\\n * Class factory interface for controlling playback of a collection of animations.\\r\\n * One animation can be played at any given time, crossfading between animations\\r\\n * will result in playing a {@link TransitionState}.\\r\\n *\\r\\n * @interface\\r\\n */\\n\\nvar AnimationPlayerInterface = /*#__PURE__*/function () {\\n  function AnimationPlayerInterface() {\\n    AnimationPlayerInterface_classCallCheck(this, AnimationPlayerInterface);\\n  }\\n\\n  AnimationPlayerInterface_createClass(AnimationPlayerInterface, [{\\n    key: "paused",\\n    get:\\n    /**\\r\\n     * Gets whether or not the player is updating states.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n    function get() {\\n      return this._paused;\\n    }\\n    /**\\r\\n     * Gets and sets the default number of seconds it takes to transition to a new\\r\\n     * animation.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "transitionTime",\\n    get: function get() {},\\n    set: function set(seconds) {}\\n    /**\\r\\n     * Gets and sets the default easing function to use when transitioning and\\r\\n     * setting weights.\\r\\n     *\\r\\n     * @type {Function}\\r\\n     */\\n\\n  }, {\\n    key: "easingFn",\\n    get: function get() {},\\n    set: function set(fn) {}\\n    /**\\r\\n     * Gets the state the layer is currently in control of.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {AbstractState}\\r\\n     */\\n\\n  }, {\\n    key: "currentState",\\n    get: function get() {}\\n    /**\\r\\n     * Gets the name of the state the layer is currently in control of.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {string}\\r\\n     */\\n\\n  }, {\\n    key: "currentAnimation",\\n    get: function get() {}\\n    /**\\r\\n     * Gets whether or not the layer is currently transitioning to a new animation.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "isTransitioning",\\n    get: function get() {}\\n    /**\\r\\n     * Update the layer\\\'s current state to a new value. If transitionTime is defined\\r\\n     * and greater than zero, perform a smooth blend between any states that currently\\r\\n     * have non-zero weight values and the new state.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {(string|null)} name - Name of the state to transition to.\\r\\n     * @param {string} playMethod - Name of the operation being prepared for, to be\\r\\n     * used in error messaging.\\r\\n     * @param {number=} transitionTime - Amount of time in seconds it will take to\\r\\n     * switch to the new state.\\r\\n     * @param {Function=} easingFn - Easing function to use when transitioning to a\\r\\n     * new state over time.\\r\\n     * @param {Function=} onError - Function to execute if an error is encountered.\\r\\n     */\\n\\n  }, {\\n    key: "_prepareCurrentState",\\n    value: function _prepareCurrentState(name, playMethod, transitionTime, easingFn, onError) {}\\n    /**\\r\\n     * Start playback an animation from the beginning.\\r\\n     *\\r\\n     * @param {string} name - Name of the animation to play.\\r\\n     * @param {number=} transitionTime - Amount of time it will take before the\\r\\n     * new state has full influence for the layer.\\r\\n     * @param {Function=} easingFn - Easing function to use for blending if transitionTime\\r\\n     * is greater than zero.\\r\\n     * @param {Function=} onFinish - Function to execute when the animation finishes.\\r\\n     * @param {Function=} onError - Function to execute if the animation encounters\\r\\n     * an error during playback.\\r\\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\\r\\n     * @param {Function=} onNext - Function to execute if an animation queue is\\r\\n     * played and it advances to the next animation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "playAnimation",\\n    value: function playAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {}\\n    /**\\r\\n     * Cancel playback of the current animation.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "cancelAnimation",\\n    value: function cancelAnimation() {}\\n    /**\\r\\n     * Pause playback of the current animation.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "pauseAnimation",\\n    value: function pauseAnimation() {}\\n    /**\\r\\n     * Resume playback of an animation.\\r\\n     *\\r\\n     * @param {string=} name - Name of the animation to resume playback for. Default\\r\\n     * is the layer\\\'s current animation name.\\r\\n     * @param {number=} transitionTime - Amount of time it will take before the\\r\\n     * new state has full influence for the layer.\\r\\n     * @param {Function=} onFinish - Function to execute when the state finishes.\\r\\n     * @param {Function=} onError - Function to execute if the state encounters\\r\\n     * an error during playback.\\r\\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\\r\\n     * @param {Function=} onNext - Function to execute if an animation queue is\\r\\n     * played and it advances to the next animation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "resumeAnimation",\\n    value: function resumeAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {}\\n    /**\\r\\n     * Stop playback of the current animation.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "stopAnimation",\\n    value: function stopAnimation() {}\\n    /**\\r\\n     * Update the current animation.\\r\\n     *\\r\\n     * @param {number} deltaTime - Time in milliseconds since the last update.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {}\\n    /**\\r\\n     * Discard the transition state.\\r\\n     */\\n\\n  }, {\\n    key: "discard",\\n    value: function discard() {}\\n    /**\\r\\n     * Creates a class that implements {@link AnimationPlayerInterface} and extends\\r\\n     * a specified base class.\\r\\n     *\\r\\n     * @param {Class} [BaseClass = class{}] - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link AnimationPlayerInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin() {\\n      var BaseClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /*#__PURE__*/function () {\\n        function _class() {\\n          AnimationPlayerInterface_classCallCheck(this, _class);\\n        }\\n\\n        return AnimationPlayerInterface_createClass(_class);\\n      }();\\n\\n      var AnimationPlayerMixin = /*#__PURE__*/function (_BaseClass) {\\n        AnimationPlayerInterface_inherits(AnimationPlayerMixin, _BaseClass);\\n\\n        var _super = AnimationPlayerInterface_createSuper(AnimationPlayerMixin);\\n\\n        function AnimationPlayerMixin() {\\n          var _this;\\n\\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n          AnimationPlayerInterface_classCallCheck(this, AnimationPlayerMixin);\\n\\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n            args[_key - 1] = arguments[_key];\\n          }\\n\\n          _this = _super.call.apply(_super, [this, options].concat(args));\\n          _this._transitionState = new state_TransitionState();\\n          _this._states = _this._states !== undefined ? _this._states : new Map();\\n          _this._currentState = null;\\n          _this._paused = false;\\n          _this._transitionTime = Number(options.transitionTime) >= 0 ? Number(options.transitionTime) : 0;\\n          _this._easingFn = typeof options.easingFn === \\\'function\\\' ? options.easingFn : undefined;\\n          return _this;\\n        }\\n\\n        AnimationPlayerInterface_createClass(AnimationPlayerMixin, [{\\n          key: "paused",\\n          get: function get() {\\n            return this._paused;\\n          }\\n        }, {\\n          key: "transitionTime",\\n          get: function get() {\\n            return this._transitionTime;\\n          },\\n          set: function set(seconds) {\\n            seconds = Number(seconds);\\n\\n            if (!(seconds >= 0)) {\\n              throw new Error("Cannot set transition time for ".concat(this.constructor.name, " to ").concat(seconds, ". Seconds must be a numeric value greather than or equal to zero."));\\n            }\\n\\n            this._transitionTime = seconds;\\n          }\\n        }, {\\n          key: "easingFn",\\n          get: function get() {\\n            return this._easingFn;\\n          },\\n          set: function set(fn) {\\n            this._easingFn = fn;\\n          }\\n        }, {\\n          key: "currentState",\\n          get: function get() {\\n            return this._currentState;\\n          }\\n        }, {\\n          key: "currentAnimation",\\n          get: function get() {\\n            if (this._currentState) {\\n              return this._currentState.name;\\n            }\\n\\n            return null;\\n          }\\n        }, {\\n          key: "isTransitioning",\\n          get: function get() {\\n            return this._currentState === this._transitionState;\\n          }\\n        }, {\\n          key: "_prepareCurrentState",\\n          value: function _prepareCurrentState(name, playMethod, transitionTime, easingFn, onError) {\\n            var _this2 = this;\\n\\n            if (name !== null && !this._states.has(name)) {\\n              var e = new Error("Cannot ".concat(playMethod, " animation ").concat(name, ". No animation exists with this name."));\\n\\n              if (typeof onError === \\\'function\\\') {\\n                onError(e);\\n              }\\n\\n              throw e;\\n            }\\n\\n            var targetState = name !== null ? this._states.get(name) : null; // Make sure the new state isn\\\'t already playing\\n\\n            if (this.currentAnimation !== name) {\\n              // Switch to the new state immediately\\n              if (transitionTime <= 0) {\\n                // Cancel the current state and set its weight to 0\\n                if (this._currentState) {\\n                  this._currentState.cancel();\\n\\n                  this._currentState.weight = 0;\\n\\n                  this._currentState.deactivate();\\n                }\\n\\n                this._currentState = targetState;\\n              } // Blend to the new state over time\\n              else {\\n                // Make sure to transition out of any states with non-zero weight\\n                var currentStates = AnimationPlayerInterface_toConsumableArray(this._states.values()).filter(function (s) {\\n                  return s !== targetState && (s.weight || s.weightPending);\\n                }); // Update the transition state with new inputs\\n\\n\\n                this._transitionState.configure(currentStates, targetState, transitionTime, easingFn, function () {\\n                  _this2._currentState = targetState;\\n                  _this2._transitionState.weight = 0;\\n                });\\n\\n                this._currentState = this._transitionState;\\n              }\\n            } else if (playMethod === \\\'play\\\') {\\n              this._currentState.cancel();\\n\\n              if (this._currentState === this._transitionState) {\\n                this._transitionState.reset(transitionTime, easingFn, function () {\\n                  _this2._currentState = targetState;\\n                  _this2._transitionState.weight = 0;\\n                });\\n              }\\n            } // Update weight for the new current state so it has full influence for the player\\n\\n\\n            this._currentState.weight = 1;\\n\\n            this._currentState.updateInternalWeight(this._internalWeight);\\n          }\\n        }, {\\n          key: "playAnimation",\\n          value: function playAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {\\n            var error;\\n            var reject = false;\\n\\n            try {\\n              this._prepareCurrentState(name, \\\'play\\\', transitionTime !== undefined ? transitionTime : this._transitionTime, easingFn !== undefined ? easingFn : this._easingFn, onError);\\n            } catch (e) {\\n              error = e;\\n              reject = true;\\n            }\\n\\n            if (reject) {\\n              return core_Deferred.reject(error);\\n            }\\n\\n            return this._currentState.play(onFinish, onError, onCancel, onNext);\\n          }\\n        }, {\\n          key: "pauseAnimation",\\n          value: function pauseAnimation() {\\n            if (this._currentState) {\\n              return this._currentState.pause();\\n            } else {\\n              return false;\\n            }\\n          }\\n        }, {\\n          key: "resumeAnimation",\\n          value: function resumeAnimation(name, transitionTime, easingFn, onFinish, onError, onCancel, onNext) {\\n            if (name === undefined && this._currentState) {\\n              name = this._currentState.name;\\n            }\\n\\n            var error;\\n            var reject = false;\\n\\n            try {\\n              this._prepareCurrentState(name, \\\'resume\\\', transitionTime !== undefined ? transitionTime : this._transitionTime, easingFn !== undefined ? easingFn : this._easingFn, onError);\\n            } catch (e) {\\n              error = e;\\n              reject = true;\\n            }\\n\\n            if (reject) {\\n              return core_Deferred.reject(error);\\n            }\\n\\n            return this._currentState.resume(onFinish, onError, onCancel, onNext);\\n          }\\n        }, {\\n          key: "cancelAnimation",\\n          value: function cancelAnimation() {\\n            if (this._currentState) {\\n              return this._currentState.cancel();\\n            } else {\\n              return false;\\n            }\\n          }\\n        }, {\\n          key: "stopAnimation",\\n          value: function stopAnimation() {\\n            if (this._currentState) {\\n              return this._currentState.stop();\\n            } else {\\n              return false;\\n            }\\n          }\\n        }, {\\n          key: "update",\\n          value: function update(deltaTime) {\\n            if (AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "update", this)) {\\n              AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "update", this).call(this, deltaTime);\\n            }\\n\\n            if (this._currentState) {\\n              this._currentState.update(deltaTime);\\n            }\\n          }\\n        }, {\\n          key: "discard",\\n          value: function discard() {\\n            if (AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "discard", this)) {\\n              AnimationPlayerInterface_get(AnimationPlayerInterface_getPrototypeOf(AnimationPlayerMixin.prototype), "discard", this).call(this);\\n            }\\n\\n            this._transitionState.discard();\\n\\n            delete this._transitionState;\\n          }\\n        }]);\\n\\n        return AnimationPlayerMixin;\\n      }(BaseClass);\\n\\n      return AnimationPlayerMixin;\\n    }\\n  }]);\\n\\n  return AnimationPlayerInterface;\\n}();\\n\\n/* harmony default export */ const animpack_AnimationPlayerInterface = (AnimationPlayerInterface);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/StateContainerInterface.js\\nfunction StateContainerInterface_typeof(obj) { "@babel/helpers - typeof"; return StateContainerInterface_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, StateContainerInterface_typeof(obj); }\\n\\nfunction StateContainerInterface_toConsumableArray(arr) { return StateContainerInterface_arrayWithoutHoles(arr) || StateContainerInterface_iterableToArray(arr) || StateContainerInterface_unsupportedIterableToArray(arr) || StateContainerInterface_nonIterableSpread(); }\\n\\nfunction StateContainerInterface_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction StateContainerInterface_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return StateContainerInterface_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return StateContainerInterface_arrayLikeToArray(o, minLen); }\\n\\nfunction StateContainerInterface_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction StateContainerInterface_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return StateContainerInterface_arrayLikeToArray(arr); }\\n\\nfunction StateContainerInterface_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction StateContainerInterface_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) StateContainerInterface_setPrototypeOf(subClass, superClass); }\\n\\nfunction StateContainerInterface_setPrototypeOf(o, p) { StateContainerInterface_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return StateContainerInterface_setPrototypeOf(o, p); }\\n\\nfunction StateContainerInterface_createSuper(Derived) { var hasNativeReflectConstruct = StateContainerInterface_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = StateContainerInterface_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = StateContainerInterface_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return StateContainerInterface_possibleConstructorReturn(this, result); }; }\\n\\nfunction StateContainerInterface_possibleConstructorReturn(self, call) { if (call && (StateContainerInterface_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return StateContainerInterface_assertThisInitialized(self); }\\n\\nfunction StateContainerInterface_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction StateContainerInterface_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction StateContainerInterface_getPrototypeOf(o) { StateContainerInterface_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return StateContainerInterface_getPrototypeOf(o); }\\n\\nfunction StateContainerInterface_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction StateContainerInterface_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction StateContainerInterface_createClass(Constructor, protoProps, staticProps) { if (protoProps) StateContainerInterface_defineProperties(Constructor.prototype, protoProps); if (staticProps) StateContainerInterface_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable max-classes-per-file */\\n\\n/* eslint-disable no-unused-vars */\\n\\n/* eslint-disable no-empty-function */\\n\\n/* eslint-disable getter-return */\\n\\n/**\\r\\n * Class factory interface for manipulating a collection of {@link AbstractState}.\\r\\n *\\r\\n * @interface\\r\\n */\\n\\nvar StateContainerInterface = /*#__PURE__*/function () {\\n  function StateContainerInterface() {\\n    StateContainerInterface_classCallCheck(this, StateContainerInterface);\\n  }\\n\\n  StateContainerInterface_createClass(StateContainerInterface, [{\\n    key: "getState",\\n    value:\\n    /**\\r\\n     * Return the state with the given name.\\r\\n     *\\r\\n     * @param {string} name - Name of the state.\\r\\n     *\\r\\n     * @returns {AbstractState}\\r\\n     */\\n    function getState(name) {}\\n    /**\\r\\n     * Gets an array of the names of all states in the container.\\r\\n     *\\r\\n     * @type {Array.<string>}\\r\\n     */\\n\\n  }, {\\n    key: "getStateNames",\\n    value: function getStateNames() {}\\n    /**\\r\\n     * Add a new state to be controlled by the container. States are stored keyed\\r\\n     * by their name property, which must be unique. If it isn\\\'t, a number will\\r\\n     * be added or incremented until a unique key is generated.\\r\\n     *\\r\\n     * @param {AbstractState} state - State to add to the container.\\r\\n     *\\r\\n     * @returns {string} - Unique name of the state.\\r\\n     */\\n\\n  }, {\\n    key: "addState",\\n    value: function addState(state) {}\\n    /**\\r\\n     * Removes a state with the given name from the container.\\r\\n     *\\r\\n     * @param {string} name - Name of the state to remove.\\r\\n     *\\r\\n     * @returns {boolean} - Whether or not a state was removed.\\r\\n     */\\n\\n  }, {\\n    key: "removeState",\\n    value: function removeState(name) {}\\n    /**\\r\\n     * Renames a state with the given name in the container. Name must be unique\\r\\n     * to the container, if it isn\\\'t the name will be incremented until it is unique.\\r\\n     *\\r\\n     * @param {string} currentName - Name of the state to rename.\\r\\n     * @param {string} newName - Name to update the state with.\\r\\n     *\\r\\n     * @returns {string} - Updated name for the state.\\r\\n     */\\n\\n  }, {\\n    key: "renameState",\\n    value: function renameState(currentName, newName) {}\\n    /**\\r\\n     * Discards all states.\\r\\n     */\\n\\n  }, {\\n    key: "discardStates",\\n    value: function discardStates() {}\\n    /**\\r\\n     * Creates a class that implements {@link StateContainerInterface} and extends\\r\\n     * a specified base class.\\r\\n     *\\r\\n     * @param {Class} [BaseClass = class{}] - The class to extend.\\r\\n     *\\r\\n     * @return {Class} A class that extends `BaseClass` and implements {@link StateContainerInterface}.\\r\\n     */\\n\\n  }], [{\\n    key: "Mixin",\\n    value: function Mixin() {\\n      var BaseClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : /*#__PURE__*/function () {\\n        function _class() {\\n          StateContainerInterface_classCallCheck(this, _class);\\n        }\\n\\n        return StateContainerInterface_createClass(_class);\\n      }();\\n\\n      /**\\r\\n       * This mixin adds functionality for manipulating uniquely-named animation states in\\r\\n       * a map.\\r\\n       */\\n      var StateContainerMixin = /*#__PURE__*/function (_BaseClass) {\\n        StateContainerInterface_inherits(StateContainerMixin, _BaseClass);\\n\\n        var _super = StateContainerInterface_createSuper(StateContainerMixin);\\n\\n        function StateContainerMixin() {\\n          var _this;\\n\\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n          StateContainerInterface_classCallCheck(this, StateContainerMixin);\\n\\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n            args[_key - 1] = arguments[_key];\\n          }\\n\\n          _this = _super.call.apply(_super, [this, options].concat(args));\\n          _this._states = _this._states !== undefined ? _this._states : new Map();\\n          return _this;\\n        }\\n\\n        StateContainerInterface_createClass(StateContainerMixin, [{\\n          key: "getState",\\n          value: function getState(name) {\\n            return this._states.get(name);\\n          }\\n        }, {\\n          key: "getStateNames",\\n          value: function getStateNames() {\\n            return StateContainerInterface_toConsumableArray(this._states.keys());\\n          }\\n        }, {\\n          key: "addState",\\n          value: function addState(state) {\\n            // Make sure the state is not already in this container\\n            if (StateContainerInterface_toConsumableArray(this._states.values()).includes(state)) {\\n              console.warn("Cannot add animation to state ".concat(this.name, ". Animation was already added."));\\n              return state.name;\\n            } // Make sure the state name is unique\\n\\n\\n            var uniqueName = core_Utils.getUniqueName(state.name, StateContainerInterface_toConsumableArray(this._states.keys()));\\n\\n            if (state.name !== uniqueName) {\\n              console.warn("Animation name ".concat(state.name, " is not unique for state ").concat(this.name, ". New animation will be added with name ").concat(uniqueName, "."));\\n              state.name = uniqueName;\\n            }\\n\\n            this._states.set(state.name, state);\\n\\n            return state.name;\\n          }\\n        }, {\\n          key: "removeState",\\n          value: function removeState(name) {\\n            // Check if the state is in this container\\n            if (!this._states || !this._states.has(name)) {\\n              console.warn("Did not remove animation ".concat(name, " from state ").concat(this.name, ". No animation exists with this name."));\\n              return false;\\n            }\\n\\n            this._states.get(name).discard();\\n\\n            this._states["delete"](name);\\n\\n            return true;\\n          }\\n        }, {\\n          key: "renameState",\\n          value: function renameState(currentName, newName) {\\n            // Make sure the state is in this container\\n            if (!this._states || !this._states.has(currentName)) {\\n              throw new Error("Cannot rename animation ".concat(currentName, " in ").concat(this.name, ". No animation exists with this name."));\\n            }\\n\\n            var state = this._states.get(currentName); // Exit if the names are the same\\n\\n\\n            if (currentName === newName) {\\n              return currentName;\\n            } // Make sure the name is unique\\n\\n\\n            var uniqueName = core_Utils.getUniqueName(newName, StateContainerInterface_toConsumableArray(this._states.keys()).filter(function (s) {\\n              return s.name !== currentName;\\n            }));\\n\\n            if (newName !== uniqueName) {\\n              console.warn("Animation name ".concat(newName, " is not unique in state ").concat(this.name, ". Animation will be renamed to ").concat(uniqueName, "."));\\n              newName = uniqueName;\\n            }\\n\\n            state.name = newName;\\n\\n            this._states["delete"](currentName);\\n\\n            this._states.set(state.name, state);\\n\\n            return state.name;\\n          }\\n        }, {\\n          key: "discardStates",\\n          value: function discardStates() {\\n            this._states.forEach(function (state) {\\n              state.discard();\\n            });\\n\\n            delete this._states;\\n          }\\n        }]);\\n\\n        return StateContainerMixin;\\n      }(BaseClass);\\n\\n      return StateContainerMixin;\\n    }\\n  }]);\\n\\n  return StateContainerInterface;\\n}();\\n\\n/* harmony default export */ const state_StateContainerInterface = (StateContainerInterface);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/QueueState.js\\nfunction QueueState_typeof(obj) { "@babel/helpers - typeof"; return QueueState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, QueueState_typeof(obj); }\\n\\nfunction QueueState_toConsumableArray(arr) { return QueueState_arrayWithoutHoles(arr) || QueueState_iterableToArray(arr) || QueueState_unsupportedIterableToArray(arr) || QueueState_nonIterableSpread(); }\\n\\nfunction QueueState_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction QueueState_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return QueueState_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QueueState_arrayLikeToArray(o, minLen); }\\n\\nfunction QueueState_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction QueueState_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return QueueState_arrayLikeToArray(arr); }\\n\\nfunction QueueState_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction QueueState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction QueueState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction QueueState_createClass(Constructor, protoProps, staticProps) { if (protoProps) QueueState_defineProperties(Constructor.prototype, protoProps); if (staticProps) QueueState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction QueueState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { QueueState_get = Reflect.get; } else { QueueState_get = function _get(target, property, receiver) { var base = QueueState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return QueueState_get.apply(this, arguments); }\\n\\nfunction QueueState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = QueueState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction QueueState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) QueueState_setPrototypeOf(subClass, superClass); }\\n\\nfunction QueueState_setPrototypeOf(o, p) { QueueState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return QueueState_setPrototypeOf(o, p); }\\n\\nfunction QueueState_createSuper(Derived) { var hasNativeReflectConstruct = QueueState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = QueueState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = QueueState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return QueueState_possibleConstructorReturn(this, result); }; }\\n\\nfunction QueueState_possibleConstructorReturn(self, call) { if (call && (QueueState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return QueueState_assertThisInitialized(self); }\\n\\nfunction QueueState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction QueueState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction QueueState_getPrototypeOf(o) { QueueState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return QueueState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n/**\\r\\n * Class for playing an ordered array of animation states in sequence.\\r\\n *\\r\\n * @extends AbstractState\\r\\n * @implements @AnimationPlayerInterface\\r\\n */\\n\\nvar QueueState = /*#__PURE__*/function (_AnimationPlayerInter) {\\n  QueueState_inherits(QueueState, _AnimationPlayerInter);\\n\\n  var _super = QueueState_createSuper(QueueState);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object} [options={}] - Options for the state.\\r\\n   * @param {boolean} [options.autoAdvance=true] - Whether to autmatically advance\\r\\n   * to the next state in the queue as each state completes.\\r\\n   * @param {Array.<AbstractState>} [queueStates=[]] - Array of states to be played\\r\\n   * in order.\\r\\n   */\\n  function QueueState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n    var queueStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n\\n    QueueState_classCallCheck(this, QueueState);\\n\\n    _this = _super.call(this, options);\\n    queueStates.forEach(function (state) {\\n      _this.addState(state);\\n    });\\n    _this._queue = _this._states.keys();\\n    _this._done = true;\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets whether the animation queue has reached the end.\\r\\n   */\\n\\n\\n  QueueState_createClass(QueueState, [{\\n    key: "done",\\n    get: function get() {\\n      return this._done;\\n    }\\n    /**\\r\\n     * Gets the internal weight.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "internalWeight",\\n    get: function get() {\\n      return this._currentState ? this._currentState.internalWeight * this._internalWeight : 0;\\n    }\\n    /**\\r\\n     * Restart the queue iterator.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_reset",\\n    value: function _reset() {\\n      this._queue = this._states.keys();\\n\\n      var _this$_queue$next = this._queue.next(),\\n          value = _this$_queue$next.value,\\n          done = _this$_queue$next.done;\\n\\n      this._done = done;\\n      return value || null;\\n    }\\n    /**\\r\\n     * Multiplies the user weight by a factor to determine the internal weight.\\r\\n     *\\r\\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\\r\\n     */\\n\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "updateInternalWeight", this).call(this, factor);\\n\\n      if (this._currentState) {\\n        this._currentState.updateInternalWeight(this._internalWeight);\\n      }\\n    }\\n    /**\\r\\n     * Start the next animation in the queue.\\r\\n     *\\r\\n     * @param {Function=} onNext - Function to execute each time an animation completes\\r\\n     * and the queue moves to the next animation.\\r\\n     * @param {boolean} [wrap=false] - Whether or not to start the queue from the\\r\\n     * beginning again if the end has been reached.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "next",\\n    value: function next(onNext) {\\n      var _this2 = this;\\n\\n      var wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n\\n      // Move the queue forward\\n      var _this$_queue$next2 = this._queue.next(),\\n          name = _this$_queue$next2.value,\\n          done = _this$_queue$next2.done;\\n\\n      this._done = done;\\n      this._paused = false; // The queue has reached the end\\n\\n      if (done) {\\n        // Start the queue over\\n        if (wrap) {\\n          return this.play(this._playCallbacks.onFinish, this._playCallbacks.onError, this._playCallbacks.onCancel, onNext);\\n        } // Stop the queue\\n        else {\\n          this._promises.finish.resolve();\\n\\n          return this._promises.finish;\\n        }\\n      } // Signal the next animation is starting\\n\\n\\n      if (typeof onNext === \\\'function\\\') {\\n        var lastName = QueueState_toConsumableArray(this._states.keys())[this._states.size - 1];\\n\\n        var isQueueEnd = name === lastName;\\n        onNext({\\n          name: name,\\n          canAdvance: this.getState(name).loopCount !== Infinity && !isQueueEnd,\\n          isQueueEnd: isQueueEnd\\n        });\\n      } // Start the next animation\\n\\n\\n      this.playAnimation(name, this._transitionTime, this._easingFn, function () {\\n        if (!_this2._paused && !_this2.isTransitioning) {\\n          _this2.next(onNext);\\n        }\\n      }, this._playCallbacks.onError);\\n      return this._promises.finish;\\n    }\\n  }, {\\n    key: "play",\\n    value: function play(onFinish, onError, onCancel, onNext) {\\n      var _this3 = this;\\n\\n      var name = this._reset();\\n\\n      QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "play", this).call(this, onFinish, onError, onCancel);\\n\\n      if (this._done) {\\n        this._promises.finish.resolve();\\n      } else {\\n        // Signal the next animation is starting\\n        if (name !== this.currentAnimation && typeof onNext === \\\'function\\\') {\\n          var lastName = QueueState_toConsumableArray(this._states.keys())[this._states.size - 1];\\n\\n          var isQueueEnd = name === lastName;\\n          onNext({\\n            name: name,\\n            canAdvance: name ? this.getState(name).loopCount !== Infinity && !isQueueEnd : true,\\n            isQueueEnd: !name || isQueueEnd\\n          });\\n        } // Start the next animation\\n\\n\\n        this.playAnimation(name, this._currentState ? this._transitionTime : 0, this._easingFn, function () {\\n          if (!_this3._paused && !_this3.isTransitioning) {\\n            _this3.next(onNext);\\n          }\\n        }, onError);\\n      }\\n\\n      return this._promises.finish;\\n    }\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      var paused = QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "pause", this).call(this);\\n\\n      this.pauseAnimation();\\n      return paused;\\n    }\\n  }, {\\n    key: "resume",\\n    value: function resume(onFinish, onError, onCancel, onNext) {\\n      var _this4 = this;\\n\\n      if (this._done) {\\n        return this.play(onFinish, onError, onCancel, onNext);\\n      } else {\\n        QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "resume", this).call(this, onFinish, onError, onCancel);\\n\\n        this.resumeAnimation(this._currentState.name, this._transitionTime, this._easingFn, function () {\\n          if (!_this4._paused && !_this4.isTransitioning) {\\n            _this4.next(onNext);\\n          }\\n        }, onError);\\n        return this._promises.finish;\\n      }\\n    }\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      var canceled = QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "cancel", this).call(this);\\n\\n      if (this._currentState) {\\n        this._currentState.cancel();\\n      }\\n\\n      return canceled;\\n    }\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      var stopped = QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "stop", this).call(this);\\n\\n      this.stopAnimation();\\n      this._done = true;\\n      return stopped;\\n    }\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      QueueState_get(QueueState_getPrototypeOf(QueueState.prototype), "discard", this).call(this);\\n\\n      this.discardStates();\\n    }\\n  }]);\\n\\n  return QueueState;\\n}(animpack_AnimationPlayerInterface.Mixin(state_StateContainerInterface.Mixin(state_AbstractState)));\\n\\n/* harmony default export */ const state_QueueState = (QueueState);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/AbstractBlendState.js\\nfunction AbstractBlendState_typeof(obj) { "@babel/helpers - typeof"; return AbstractBlendState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AbstractBlendState_typeof(obj); }\\n\\nfunction AbstractBlendState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AbstractBlendState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AbstractBlendState_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractBlendState_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractBlendState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction AbstractBlendState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AbstractBlendState_get = Reflect.get; } else { AbstractBlendState_get = function _get(target, property, receiver) { var base = AbstractBlendState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AbstractBlendState_get.apply(this, arguments); }\\n\\nfunction AbstractBlendState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AbstractBlendState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction AbstractBlendState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AbstractBlendState_setPrototypeOf(subClass, superClass); }\\n\\nfunction AbstractBlendState_setPrototypeOf(o, p) { AbstractBlendState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AbstractBlendState_setPrototypeOf(o, p); }\\n\\nfunction AbstractBlendState_createSuper(Derived) { var hasNativeReflectConstruct = AbstractBlendState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AbstractBlendState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AbstractBlendState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AbstractBlendState_possibleConstructorReturn(this, result); }; }\\n\\nfunction AbstractBlendState_possibleConstructorReturn(self, call) { if (call && (AbstractBlendState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AbstractBlendState_assertThisInitialized(self); }\\n\\nfunction AbstractBlendState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction AbstractBlendState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction AbstractBlendState_getPrototypeOf(o) { AbstractBlendState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AbstractBlendState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n/**\\r\\n * Base class for a state that blends a collection of {@link AbstractState}.\\r\\n *\\r\\n * @abstract\\r\\n * @implements StateContainerInterface\\r\\n */\\n\\nvar AbstractBlendState = /*#__PURE__*/function (_StateContainerInterf) {\\n  AbstractBlendState_inherits(AbstractBlendState, _StateContainerInterf);\\n\\n  var _super = AbstractBlendState_createSuper(AbstractBlendState);\\n\\n  function AbstractBlendState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n\\n    AbstractBlendState_classCallCheck(this, AbstractBlendState);\\n\\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\\n      args[_key - 2] = arguments[_key];\\n    }\\n\\n    _this = _super.call.apply(_super, [this, options].concat(args));\\n    blendStates.forEach(function (state) {\\n      _this.addState(state);\\n    });\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets the sum of internal weights of the sub-states.\\r\\n   *\\r\\n   * @readonly\\r\\n   * @type {number}\\r\\n   */\\n\\n\\n  AbstractBlendState_createClass(AbstractBlendState, [{\\n    key: "internalWeight",\\n    get: function get() {\\n      var blendWeights = 0;\\n\\n      this._states.forEach(function (state) {\\n        blendWeights += state.internalWeight;\\n      });\\n\\n      return blendWeights;\\n    }\\n    /**\\r\\n     * Returns the weight of a state controlled by the container.\\r\\n     *\\r\\n     * @param {string} name - Name of the state to return the weight from.\\r\\n     *\\r\\n     * @returns {number} - Weight of the state.\\r\\n     */\\n\\n  }, {\\n    key: "getBlendWeight",\\n    value: function getBlendWeight(name) {\\n      // Make sure the name is valid\\n      var state = this.getState(name);\\n\\n      if (state === undefined) {\\n        throw new Error("Cannot get weight of state ".concat(name, " from BlendState ").concat(this.name, ". No state exists with this name."));\\n      }\\n\\n      return state.weight;\\n    }\\n    /**\\r\\n     * Sets the weight of a state controlled by the container.\\r\\n     *\\r\\n     * @param {string} name - Name of the state to set the weight of.\\r\\n     * @param {number} weight - Weight value to set on the state.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "setBlendWeight",\\n    value: function setBlendWeight(name, weight) {\\n      var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\\n      // Make sure the name is valid\\n      var state = this.getState(name);\\n\\n      if (state === undefined) {\\n        throw new Error("Cannot set weight of state ".concat(name, " from BlendState ").concat(this.name, ". No state exists with this name."));\\n      }\\n\\n      weight = core_MathUtils.clamp(weight);\\n      return state.setWeight(weight, seconds, easingFn);\\n    }\\n    /**\\r\\n     * Multiplies the weight of each sub-state by a factor to determine the internal weight.\\r\\n     *\\r\\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\\r\\n     */\\n\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      var _this2 = this;\\n\\n      AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "updateInternalWeight", this).call(this, factor);\\n\\n      this._states.forEach(function (state) {\\n        state.updateInternalWeight(_this2._internalWeight);\\n      });\\n    }\\n    /**\\r\\n     * Update any values of the sub-states that need to be evaluated every frame.\\r\\n     *\\r\\n     * @param {number} deltaTime - Time in milliseconds since the last update.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "update", this).call(this, deltaTime);\\n\\n      this._states.forEach(function (state) {\\n        state.update(deltaTime);\\n      });\\n    }\\n    /**\\r\\n     * Start playback of the sub-states from the beginning.\\r\\n     *\\r\\n     * @param {Function=} onFinish - Function to execute when the state finishes.\\r\\n     * @param {Function=} onError - Function to execute if the state encounters\\r\\n     * an error during playback.\\r\\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "play",\\n    value: function play(onFinish, onError, onCancel) {\\n      var promises = [AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "play", this).call(this)];\\n\\n      this._states.forEach(function (state) {\\n        promises.push(state.play());\\n      });\\n\\n      return core_Deferred.all(promises, onFinish, onError, onCancel);\\n    }\\n    /**\\r\\n     * Pause playback of the sub-states. This prevents pending promises from being executed.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      this._states.forEach(function (state) {\\n        state.pause();\\n      });\\n\\n      return AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "pause", this).call(this);\\n    }\\n    /**\\r\\n     * Resume playback of the sub-states.\\r\\n     *\\r\\n     * @param {Function=} onFinish - Function to execute when the state finishes.\\r\\n     * @param {Function=} onError - Function to execute if the state encounters\\r\\n     * an error during playback.\\r\\n     * @param {Function=} onCancel - Function to execute if playback is canceled.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "resume",\\n    value: function resume(onFinish, onError, onCancel) {\\n      var promises = [AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "resume", this).call(this)];\\n\\n      this._states.forEach(function (state) {\\n        promises.push(state.resume());\\n      });\\n\\n      return core_Deferred.all(promises, onFinish, onError, onCancel);\\n    }\\n    /**\\r\\n     * Cancel playback of the sub-states and cancel any pending promises.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      this._states.forEach(function (state) {\\n        state.cancel();\\n      });\\n\\n      return AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "cancel", this).call(this);\\n    }\\n    /**\\r\\n     * Stop playback of the sub-states and resolve any pending promises.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      this._states.forEach(function (state) {\\n        state.stop();\\n      });\\n\\n      return AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "stop", this).call(this);\\n    }\\n    /**\\r\\n     * Discards all sub-state resources.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      AbstractBlendState_get(AbstractBlendState_getPrototypeOf(AbstractBlendState.prototype), "discard", this).call(this);\\n\\n      this.discardStates();\\n    }\\n  }]);\\n\\n  return AbstractBlendState;\\n}(state_StateContainerInterface.Mixin(state_AbstractState));\\n\\n/* harmony default export */ const state_AbstractBlendState = (AbstractBlendState);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/FreeBlendState.js\\nfunction FreeBlendState_typeof(obj) { "@babel/helpers - typeof"; return FreeBlendState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FreeBlendState_typeof(obj); }\\n\\nfunction FreeBlendState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction FreeBlendState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction FreeBlendState_createClass(Constructor, protoProps, staticProps) { if (protoProps) FreeBlendState_defineProperties(Constructor.prototype, protoProps); if (staticProps) FreeBlendState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction FreeBlendState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { FreeBlendState_get = Reflect.get; } else { FreeBlendState_get = function _get(target, property, receiver) { var base = FreeBlendState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return FreeBlendState_get.apply(this, arguments); }\\n\\nfunction FreeBlendState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = FreeBlendState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction FreeBlendState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) FreeBlendState_setPrototypeOf(subClass, superClass); }\\n\\nfunction FreeBlendState_setPrototypeOf(o, p) { FreeBlendState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FreeBlendState_setPrototypeOf(o, p); }\\n\\nfunction FreeBlendState_createSuper(Derived) { var hasNativeReflectConstruct = FreeBlendState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = FreeBlendState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = FreeBlendState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return FreeBlendState_possibleConstructorReturn(this, result); }; }\\n\\nfunction FreeBlendState_possibleConstructorReturn(self, call) { if (call && (FreeBlendState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return FreeBlendState_assertThisInitialized(self); }\\n\\nfunction FreeBlendState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction FreeBlendState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction FreeBlendState_getPrototypeOf(o) { FreeBlendState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FreeBlendState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * Class for blending N number of blend states.\\r\\n *\\r\\n * @extends AbstractBlendState\\r\\n */\\n\\nvar FreeBlendState = /*#__PURE__*/function (_AbstractBlendState) {\\n  FreeBlendState_inherits(FreeBlendState, _AbstractBlendState);\\n\\n  var _super = FreeBlendState_createSuper(FreeBlendState);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object} [options={}] - Options for the container state.\\r\\n   * @param {Array.<AbstractState>} [blendStates=[]] - Blend states to be controlled by\\r\\n   * this container.\\r\\n   */\\n  function FreeBlendState() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n\\n    FreeBlendState_classCallCheck(this, FreeBlendState);\\n\\n    return _super.call(this, options, blendStates);\\n  }\\n\\n  FreeBlendState_createClass(FreeBlendState, [{\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      var _this = this;\\n\\n      FreeBlendState_get(FreeBlendState_getPrototypeOf(FreeBlendState.prototype), "updateInternalWeight", this).call(this, factor); // Determine the total active weight of blend states\\n\\n\\n      var sumWeights = 0;\\n\\n      this._states.forEach(function (state) {\\n        sumWeights += state.weight;\\n      }); // Ensure the sum of blend state internal weights does not exceed container internal weight\\n\\n\\n      factor /= Math.max(sumWeights, 1); // Sum of blend state internal weights should not exceed container internal weight\\n\\n      this._states.forEach(function (state) {\\n        state.updateInternalWeight(factor * _this._weight);\\n      });\\n    }\\n  }]);\\n\\n  return FreeBlendState;\\n}(state_AbstractBlendState);\\n\\n/* harmony default export */ const state_FreeBlendState = (FreeBlendState);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/Blend1dState.js\\nfunction Blend1dState_typeof(obj) { "@babel/helpers - typeof"; return Blend1dState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Blend1dState_typeof(obj); }\\n\\nfunction Blend1dState_toConsumableArray(arr) { return Blend1dState_arrayWithoutHoles(arr) || Blend1dState_iterableToArray(arr) || Blend1dState_unsupportedIterableToArray(arr) || Blend1dState_nonIterableSpread(); }\\n\\nfunction Blend1dState_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction Blend1dState_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Blend1dState_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Blend1dState_arrayLikeToArray(o, minLen); }\\n\\nfunction Blend1dState_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction Blend1dState_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Blend1dState_arrayLikeToArray(arr); }\\n\\nfunction Blend1dState_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction Blend1dState_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction Blend1dState_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? Blend1dState_ownKeys(Object(source), !0).forEach(function (key) { Blend1dState_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Blend1dState_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction Blend1dState_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction Blend1dState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Blend1dState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Blend1dState_createClass(Constructor, protoProps, staticProps) { if (protoProps) Blend1dState_defineProperties(Constructor.prototype, protoProps); if (staticProps) Blend1dState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction Blend1dState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Blend1dState_get = Reflect.get; } else { Blend1dState_get = function _get(target, property, receiver) { var base = Blend1dState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Blend1dState_get.apply(this, arguments); }\\n\\nfunction Blend1dState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Blend1dState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction Blend1dState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Blend1dState_setPrototypeOf(subClass, superClass); }\\n\\nfunction Blend1dState_setPrototypeOf(o, p) { Blend1dState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Blend1dState_setPrototypeOf(o, p); }\\n\\nfunction Blend1dState_createSuper(Derived) { var hasNativeReflectConstruct = Blend1dState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Blend1dState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Blend1dState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Blend1dState_possibleConstructorReturn(this, result); }; }\\n\\nfunction Blend1dState_possibleConstructorReturn(self, call) { if (call && (Blend1dState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Blend1dState_assertThisInitialized(self); }\\n\\nfunction Blend1dState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction Blend1dState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction Blend1dState_getPrototypeOf(o) { Blend1dState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Blend1dState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n/**\\r\\n * Class for blending N number of blend states based on a single\\r\\n * parameter.\\r\\n *\\r\\n * @extends AbstractBlendState\\r\\n */\\n\\nvar Blend1dState = /*#__PURE__*/function (_AbstractBlendState) {\\n  Blend1dState_inherits(Blend1dState, _AbstractBlendState);\\n\\n  var _super = Blend1dState_createSuper(Blend1dState);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object} [options] - Options for the container state\\r\\n   * @param {Array.<AbstractBlendState>} [blendStates=[]] - Blend states to be\\r\\n   * controlled by this container.\\r\\n   * @param {Array.<number>} [blendThresholds=[]] - Threshold values for activating\\r\\n   * each blend state.\\r\\n   * @param {Array.<boolean>} [phaseMatches=[]] - Booleans indicating whether or not\\r\\n   * each blend state should be phase matched.\\r\\n   */\\n  function Blend1dState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n    var blendThresholds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\\n    var phaseMatches = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\\n\\n    Blend1dState_classCallCheck(this, Blend1dState);\\n\\n    _this = _super.call(this, options, blendStates);\\n    _this._blendValue = 0;\\n    _this._promises = Blend1dState_objectSpread(Blend1dState_objectSpread({}, _this._promises), {}, {\\n      blendValue: core_Deferred.resolve()\\n    }); // Validate there are no duplicate thresholds\\n\\n    var nonZeroDifferentSize = blendStates.length !== 0 && blendStates.length !== blendThresholds.length;\\n\\n    if (nonZeroDifferentSize) {\\n      throw new Error("Cannot create Blend1dState with blendThresholds ".concat(blendThresholds, ". BlendThresholds count does not match blendStates count."));\\n    }\\n\\n    var containsDuplicates = new Set(blendThresholds).size !== blendThresholds.length;\\n\\n    if (containsDuplicates) {\\n      throw new Error("Cannot create Blend1dState with blendThresholds ".concat(blendThresholds, ". BlendThresholds contains duplicate values"));\\n    } // Initialize the thresholds map\\n\\n\\n    _this._thresholds = [];\\n\\n    Blend1dState_toConsumableArray(_this._states.values()).forEach(function (state, index) {\\n      _this._thresholds.push({\\n        value: blendThresholds[index],\\n        name: state.name,\\n        phaseMatch: phaseMatches[index] || false\\n      });\\n    });\\n\\n    _this._sortThresholds();\\n\\n    _this._forceNoThresholdDupes = true;\\n    _this._phaseLeadState = null;\\n\\n    _this._updateBlendWeights();\\n\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets and sets the blend parameter value.\\r\\n   */\\n\\n\\n  Blend1dState_createClass(Blend1dState, [{\\n    key: "blendValue",\\n    get: function get() {\\n      return this._blendValue;\\n    },\\n    set: function set(value) {\\n      this._blendValue = value;\\n    }\\n    /**\\r\\n     * Gets whether or not the blend value is currently being animated.\\r\\n     */\\n\\n  }, {\\n    key: "blendValuePending",\\n    get: function get() {\\n      return this._promises.blendValue && this._promises.blendValue.pending;\\n    }\\n    /**\\r\\n     * Updates the user defined weight over time.\\r\\n     *\\r\\n     * @param {null} name - Unused parameter.\\r\\n     * @param {number} weight - The target weight value.\\r\\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\\r\\n     * target weight.\\r\\n     * @param {Function=} easingFn - The easing function to use for interpolation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "setBlendWeight",\\n    value: function setBlendWeight(name, value) {\\n      var _this2 = this;\\n\\n      var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\\n\\n      this._promises.blendValue.cancel();\\n\\n      this._promises.blendValue = animpack_AnimationUtils.interpolateProperty(this, \\\'blendValue\\\', value, {\\n        seconds: seconds,\\n        easingFn: easingFn,\\n        onProgress: function onProgress() {\\n          _this2._updateBlendWeights();\\n        },\\n        onFinish: function onFinish() {\\n          _this2._updateBlendWeights();\\n        }\\n      });\\n      return this._promises.blendValue;\\n    }\\n    /**\\r\\n     * Gets the user defined weight.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getBlendWeight",\\n    value: function getBlendWeight() {\\n      return this.blendValue;\\n    }\\n  }, {\\n    key: "addState",\\n    value: function addState(state) {\\n      var thresholdValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var phaseMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\\n      this._thresholds = this._thresholds || []; // Make sure there is not already a state with this threshold\\n\\n      var sameValue = this._thresholds.find(function (threshold) {\\n        return threshold.value === thresholdValue;\\n      });\\n\\n      if (this._forceNoThresholdDupes && sameValue !== undefined) {\\n        throw new Error("Cannot set blend threshold of ".concat(thresholdValue, " for state ").concat(state.name, " on ").concat(this.name, ". A state already exists with that threshold."));\\n      }\\n\\n      Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "addState", this).call(this, state);\\n\\n      this._thresholds.push({\\n        value: thresholdValue,\\n        name: state.name,\\n        phaseMatch: phaseMatch || false\\n      });\\n\\n      this._sortThresholds();\\n\\n      return state.name;\\n    }\\n  }, {\\n    key: "removeState",\\n    value: function removeState(name) {\\n      var removed = Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "removeState", this).call(this, name);\\n\\n      if (removed) {\\n        var index = this._thresholds.findIndex(function (threshold) {\\n          return threshold.name === name;\\n        });\\n\\n        this._thresholds.splice(index, 1);\\n      }\\n\\n      return removed;\\n    }\\n  }, {\\n    key: "renameState",\\n    value: function renameState(currentName, newName) {\\n      newName = Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "renameState", this).call(this, currentName, newName);\\n\\n      var threshold = this._thresholds.find(function (threshold) {\\n        return threshold.name === currentName;\\n      });\\n\\n      threshold.name = newName;\\n      return newName;\\n    }\\n    /**\\r\\n     * Gets the threshold value of a blend with the corresponding name.\\r\\n     *\\r\\n     * @param {string} name - Name of the blend to get the threshold of.\\r\\n     *\\r\\n     * @returns {number} Threhold value.\\r\\n     */\\n\\n  }, {\\n    key: "getBlendThreshold",\\n    value: function getBlendThreshold(name) {\\n      var threshold = this._thresholds.find(function (threshold) {\\n        return threshold.name === name;\\n      });\\n\\n      if (threshold === undefined) {\\n        throw new Error("Cannot get blend threshold of state ".concat(name, " on ").concat(this.name, ". No state exists with that name."));\\n      }\\n\\n      return threshold.value;\\n    }\\n    /**\\r\\n     * Sets the threshold value of a blend with the corresponding name.\\r\\n     *\\r\\n     * @param {string} name - Name of the blend to set the threshold.\\r\\n     * @param {number} value - Value of the threshold to set.\\r\\n     *\\r\\n     * @returns {number} Set threshold value.\\r\\n     */\\n\\n  }, {\\n    key: "setBlendThreshold",\\n    value: function setBlendThreshold(name, value) {\\n      // Make sure there is not already a state with this threshold\\n      var sameValue = this._thresholds.find(function (threshold) {\\n        return threshold.value === value;\\n      });\\n\\n      if (sameValue !== undefined) {\\n        throw new Error("Cannot set blend threshold of ".concat(value, " for state ").concat(name, " on ").concat(this.name, ". A state already exists with that threshold."));\\n      }\\n\\n      var threshold = this._thresholds.find(function (threshold) {\\n        return threshold.name === name;\\n      });\\n\\n      if (threshold === undefined) {\\n        throw new Error("Cannot set blend threshold of state ".concat(name, " on ").concat(this.name, ". No state exists with that name."));\\n      }\\n\\n      threshold.value = value;\\n\\n      this._sortThresholds();\\n\\n      return threshold.value;\\n    }\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      var _this3 = this;\\n\\n      Blend1dState_get(Blend1dState_getPrototypeOf(Blend1dState.prototype), "updateInternalWeight", this).call(this, factor);\\n\\n      if (this._phaseLeadState) {\\n        this._states.forEach(function (state) {\\n          if (state.weight !== 0) {\\n            state.normalizedTime = _this3._phaseLeadState.normalizedTime;\\n          }\\n        });\\n      }\\n    }\\n    /**\\r\\n     * Updates the blend weights based on their corresponding threshold values\\r\\n     * and the current blendValue. Additionally, sets a lead phase state if the\\r\\n     * conditions for phase-matching have been satisfied.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_updateBlendWeights",\\n    value: function _updateBlendWeights() {\\n      var _this4 = this;\\n\\n      if (this._thresholds.length === 0) return;\\n\\n      if (this._thresholds.length === 1) {\\n        var state = this._states.get(this._thresholds[0].name);\\n\\n        state.setWeight(1);\\n        return;\\n      } // Initially set all sub-state weights to zero\\n\\n\\n      this._states.forEach(function (state) {\\n        state.setWeight(0);\\n      });\\n\\n      this._phaseLeadState = null; // Find the first threshold that is greater than or equal to the parameter value\\n\\n      var targetIndex = this._thresholds.findIndex(function (threshold) {\\n        return threshold.value >= _this4._blendValue;\\n      });\\n\\n      if (targetIndex === 0 || targetIndex === -1) {\\n        // Give one state full influence\\n        targetIndex = targetIndex === -1 ? this._thresholds.length - 1 : 0;\\n\\n        var _state = this._states.get(this._thresholds[targetIndex].name);\\n\\n        _state.setWeight(1);\\n      } else {\\n        // Linear interpolate influence between two states\\n        var thresholdA = this._thresholds[targetIndex - 1];\\n        var thresholdB = this._thresholds[targetIndex];\\n        var factorB = (this.blendValue - thresholdA.value) / (thresholdB.value - thresholdA.value);\\n        var factorA = 1 - factorB;\\n\\n        var stateA = this._states.get(thresholdA.name);\\n\\n        var stateB = this._states.get(thresholdB.name);\\n\\n        stateA.setWeight(factorA);\\n        stateB.setWeight(factorB); // Set phase-matching if needed\\n\\n        if (thresholdA.phaseMatch && thresholdB.phaseMatch) {\\n          this._phaseLeadState = factorA > factorB ? stateA : stateB;\\n        }\\n      }\\n    }\\n    /**\\r\\n     * Sorts the thresholds from low to high based on value.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_sortThresholds",\\n    value: function _sortThresholds() {\\n      this._thresholds.sort(function (a, b) {\\n        return a.value - b.value;\\n      });\\n    }\\n  }]);\\n\\n  return Blend1dState;\\n}(state_AbstractBlendState);\\n\\n/* harmony default export */ const state_Blend1dState = (Blend1dState);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/Blend2dState.js\\nfunction Blend2dState_typeof(obj) { "@babel/helpers - typeof"; return Blend2dState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Blend2dState_typeof(obj); }\\n\\nfunction Blend2dState_toConsumableArray(arr) { return Blend2dState_arrayWithoutHoles(arr) || Blend2dState_iterableToArray(arr) || Blend2dState_unsupportedIterableToArray(arr) || Blend2dState_nonIterableSpread(); }\\n\\nfunction Blend2dState_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction Blend2dState_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Blend2dState_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Blend2dState_arrayLikeToArray(o, minLen); }\\n\\nfunction Blend2dState_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction Blend2dState_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Blend2dState_arrayLikeToArray(arr); }\\n\\nfunction Blend2dState_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction Blend2dState_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction Blend2dState_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? Blend2dState_ownKeys(Object(source), !0).forEach(function (key) { Blend2dState_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Blend2dState_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction Blend2dState_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction Blend2dState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Blend2dState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Blend2dState_createClass(Constructor, protoProps, staticProps) { if (protoProps) Blend2dState_defineProperties(Constructor.prototype, protoProps); if (staticProps) Blend2dState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction Blend2dState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Blend2dState_get = Reflect.get; } else { Blend2dState_get = function _get(target, property, receiver) { var base = Blend2dState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Blend2dState_get.apply(this, arguments); }\\n\\nfunction Blend2dState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Blend2dState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction Blend2dState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Blend2dState_setPrototypeOf(subClass, superClass); }\\n\\nfunction Blend2dState_setPrototypeOf(o, p) { Blend2dState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Blend2dState_setPrototypeOf(o, p); }\\n\\nfunction Blend2dState_createSuper(Derived) { var hasNativeReflectConstruct = Blend2dState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Blend2dState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Blend2dState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Blend2dState_possibleConstructorReturn(this, result); }; }\\n\\nfunction Blend2dState_possibleConstructorReturn(self, call) { if (call && (Blend2dState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Blend2dState_assertThisInitialized(self); }\\n\\nfunction Blend2dState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction Blend2dState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction Blend2dState_getPrototypeOf(o) { Blend2dState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Blend2dState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable no-underscore-dangle */\\n\\n\\n\\n\\n/**\\r\\n * Class for blending N number of blend states based on two\\r\\n * paramters.\\r\\n *\\r\\n * @extends AbstractBlendState\\r\\n */\\n\\nvar Blend2dState = /*#__PURE__*/function (_AbstractBlendState) {\\n  Blend2dState_inherits(Blend2dState, _AbstractBlendState);\\n\\n  var _super = Blend2dState_createSuper(Blend2dState);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object} [options] - Options for the container state\\r\\n   * @param {Array.<AbstractBlendState>} [blendStates=[]] - Blend states to be\\r\\n   * controlled by this container.\\r\\n   * @param {Array.<Array.<number>>} [blendThresholds=[]] - Threshold values for activating\\r\\n   * each blend state.\\r\\n   * @param {Array.<boolean>} [phaseMatches=[]] - Booleans indicating whether or not\\r\\n   * each blend state should be phase matched.\\r\\n   */\\n  function Blend2dState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n    var blendStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n    var blendThresholds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\\n    var phaseMatches = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\\n\\n    Blend2dState_classCallCheck(this, Blend2dState);\\n\\n    _this = _super.call(this, options, blendStates);\\n\\n    if (blendStates.length !== blendThresholds.length) {\\n      throw new Error("Cannot create Blend2dState with blendStates ".concat(blendStates, " and blendThresholds ").concat(blendThresholds, ". Count of blendStates must match count of blendThresholds."));\\n    }\\n\\n    blendThresholds.slice(0, blendThresholds.length - 1).forEach(function (threshold, index) {\\n      blendThresholds.slice(index + 1).forEach(function (otherThreshold) {\\n        if (threshold[0] === otherThreshold[0] && threshold[1] === otherThreshold[1]) {\\n          throw new Error("Cannot create Blend2dState with blendThresholds ".concat(blendThresholds, ". No duplicate values allowed in blendThresholds."));\\n        }\\n      });\\n    });\\n    _this._blendValueX = 0;\\n    _this._blendValueY = 0;\\n    _this._promises = Blend2dState_objectSpread(Blend2dState_objectSpread({}, _this._promises), {}, {\\n      blendValueX: core_Deferred.resolve(),\\n      blendValueY: core_Deferred.resolve()\\n    });\\n    _this._thresholds = [];\\n\\n    Blend2dState_toConsumableArray(_this._states.values()).forEach(function (state, index) {\\n      _this._thresholds.push({\\n        name: state.name,\\n        phaseMatch: phaseMatches[index] || false\\n      });\\n    });\\n\\n    _this._vertices = blendThresholds;\\n\\n    if (_this._vertices.length >= 3) {\\n      _this._triangles = core_MathUtils.getDelaunayTriangulation(_this._vertices);\\n    }\\n\\n    _this._phaseLeadState = null;\\n\\n    _this._updateBlendWeights();\\n\\n    return _this;\\n  }\\n  /**\\r\\n   * Updates the user defined weight over time.\\r\\n   *\\r\\n   * @param {string} name - Name of blend weight to update.\\r\\n   * @param {number} weight - Target weight value.\\r\\n   * @param {number} [seconds=0] - The amount of time it will take to reach the\\r\\n   * target value.\\r\\n   * @param {Function=} easingFn - The easing function to use for interpolation.\\r\\n   *\\r\\n   * @returns {Deferred}\\r\\n   */\\n\\n\\n  Blend2dState_createClass(Blend2dState, [{\\n    key: "setBlendWeight",\\n    value: function setBlendWeight(name, value) {\\n      var _this2 = this;\\n\\n      var seconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\\n      var easingFn = arguments.length > 3 ? arguments[3] : undefined;\\n      var property = "blendValue".concat(name.toUpperCase());\\n\\n      if (property !== \\\'blendValueX\\\' && property !== \\\'blendValueY\\\') {\\n        throw new Error("Cannot set blend weight for ".concat(name, " on ").concat(this.name, ". Blend2dState only accepts \\\'X\\\' or \\\'Y\\\' for setBlendWeight"));\\n      }\\n\\n      this._promises[property].cancel();\\n\\n      this._promises[property] = animpack_AnimationUtils.interpolateProperty(this, property, value, {\\n        seconds: seconds,\\n        easingFn: easingFn,\\n        onProgress: function onProgress() {\\n          _this2._updateBlendWeights();\\n        },\\n        onFinish: function onFinish() {\\n          _this2._updateBlendWeights();\\n        }\\n      });\\n      return this._promises[property];\\n    }\\n    /**\\r\\n     * Gets the user defined weight.\\r\\n     *\\r\\n     * @param {string} name - Name of blend weight.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getBlendWeight",\\n    value: function getBlendWeight(name) {\\n      var property = name.toUpperCase();\\n\\n      if (property !== \\\'X\\\' && property !== \\\'Y\\\') {\\n        throw new Error("Cannot get blend weight for ".concat(name, " on ").concat(this.name, ". Blend2dState only accepts \\\'X\\\' or \\\'Y\\\' for getBlendWeight"));\\n      }\\n\\n      return property === \\\'X\\\' ? this._blendValueX : this._blendValueY;\\n    }\\n    /**\\r\\n     * Gets and sets the x blend weight.\\r\\n     */\\n\\n  }, {\\n    key: "blendValueX",\\n    get: function get() {\\n      return this._blendValueX;\\n    },\\n    set: function set(value) {\\n      this._blendValueX = value;\\n    }\\n    /**\\r\\n     * Gets and sets the y blend weight.\\r\\n     */\\n\\n  }, {\\n    key: "blendValueY",\\n    get: function get() {\\n      return this._blendValueY;\\n    },\\n    set: function set(value) {\\n      this._blendValueY = value;\\n    }\\n    /**\\r\\n     * Gets whether or not the x blend value is currently being animated.\\r\\n     */\\n\\n  }, {\\n    key: "blendValueXPending",\\n    get: function get() {\\n      return this._promises.blendValueX && this._promises.blendValueX.pending;\\n    }\\n    /**\\r\\n     * Gets whether or not the y blend value is currently being animated.\\r\\n     */\\n\\n  }, {\\n    key: "blendValueYPending",\\n    get: function get() {\\n      return this._promises.blendValueY && this._promises.blendValueY.pending;\\n    }\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      var _this3 = this;\\n\\n      Blend2dState_get(Blend2dState_getPrototypeOf(Blend2dState.prototype), "updateInternalWeight", this).call(this, factor);\\n\\n      if (this._phaseLeadState) {\\n        Blend2dState_toConsumableArray(this._states.values()).forEach(function (state, index) {\\n          if (state.weight !== 0 && _this3._thresholds[index].phaseMatch) {\\n            state.normalizedTime = _this3._phaseLeadState.normalizedTime;\\n          }\\n        });\\n      }\\n    }\\n    /**\\r\\n     * Updates the blend weights based on their corresponding threshold values\\r\\n     * and the current [x,y] blendValue. Additionally, sets a lead phase state if the\\r\\n     * conditions for phase-matching have been satisfied.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_updateBlendWeights",\\n    value: function _updateBlendWeights() {\\n      var _this4 = this;\\n\\n      if (!this._vertices || this._vertices.length === 0) return;\\n\\n      if (this._vertices.length === 1) {\\n        Blend2dState_toConsumableArray(this._states.values())[0].weight = 1;\\n        return;\\n      } // Initially set all sub-state weights to zero\\n\\n\\n      this._states.forEach(function (state) {\\n        state.setWeight(0);\\n      });\\n\\n      this._phaseLeadState = null;\\n      var p = [this._blendValueX, this._blendValueY];\\n\\n      if (this._vertices.length === 2) {\\n        this._setInfluenceClosestPointOnLine(p);\\n      } else {\\n        var triangle = this._triangles.find(function (triangle) {\\n          return core_MathUtils.isPointInTriangle(_this4._vertices[triangle[0]], _this4._vertices[triangle[1]], _this4._vertices[triangle[2]], p);\\n        });\\n\\n        if (triangle) {\\n          this._setInfluenceTriangle(triangle, p);\\n        } else {\\n          this._setInfluenceClosestPointInTriangles(p);\\n        }\\n      }\\n    }\\n    /**\\r\\n     * Sets blend weights for states corresponding to a\\r\\n     * triangle of thresholds and a given [x,y] blendValues.\\r\\n     *\\r\\n     * @param {Array.<Array.<number>>} triangle - Set of triangluated indices\\r\\n     * that correspond to blend thresholds.\\r\\n     * @param {Array.<number>} p - Given [x,y] blendValue.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_setInfluenceTriangle",\\n    value: function _setInfluenceTriangle(triangle, p) {\\n      var areaA = core_MathUtils.triangleArea(this._vertices[triangle[1]], this._vertices[triangle[2]], p);\\n      var areaB = core_MathUtils.triangleArea(this._vertices[triangle[0]], this._vertices[triangle[2]], p);\\n      var areaC = core_MathUtils.triangleArea(this._vertices[triangle[0]], this._vertices[triangle[1]], p);\\n      var totalArea = areaA + areaB + areaC;\\n      var weightA = areaA / totalArea;\\n      var weightB = areaB / totalArea;\\n      var weightC = areaC / totalArea;\\n      var thresholdA = this._thresholds[triangle[0]];\\n      var thresholdB = this._thresholds[triangle[1]];\\n      var thresholdC = this._thresholds[triangle[2]];\\n\\n      var stateA = this._states.get(thresholdA.name);\\n\\n      var stateB = this._states.get(thresholdB.name);\\n\\n      var stateC = this._states.get(thresholdC.name);\\n\\n      stateA.setWeight(weightA);\\n      stateB.setWeight(weightB);\\n      stateC.setWeight(weightC);\\n\\n      this._setPhaseLeadState([stateA, stateB, stateC], [thresholdA.phaseMatch, thresholdB.phaseMatch, thresholdC.phaseMatch]);\\n    }\\n    /**\\r\\n     * Determines the closest point within a triangle of\\r\\n     * thresholds based on the current [x,y] blendValues and\\r\\n     * then sets blend weights for the corresponding states.\\r\\n     *\\r\\n     * @param {Array.<number>} p - Given [x,y] blendValue.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_setInfluenceClosestPointInTriangles",\\n    value: function _setInfluenceClosestPointInTriangles(p) {\\n      var _this5 = this;\\n\\n      var globalClosestPoint = null;\\n      var globalMinDist = Number.POSITIVE_INFINITY;\\n      var closestTriangle = -1;\\n\\n      this._triangles.forEach(function (triangle, index) {\\n        var pointA = core_MathUtils.closestPointOnLine(_this5._vertices[triangle[0]], _this5._vertices[triangle[1]], p);\\n        var pointB = core_MathUtils.closestPointOnLine(_this5._vertices[triangle[1]], _this5._vertices[triangle[2]], p);\\n        var pointC = core_MathUtils.closestPointOnLine(_this5._vertices[triangle[2]], _this5._vertices[triangle[0]], p);\\n        var distA = core_MathUtils.distanceSquared(pointA, p);\\n        var distB = core_MathUtils.distanceSquared(pointB, p);\\n        var distC = core_MathUtils.distanceSquared(pointC, p);\\n        var localClosestPoint = pointC;\\n        var localMinDist = distC;\\n\\n        if (distA < localMinDist) {\\n          localClosestPoint = pointA;\\n          localMinDist = distA;\\n        }\\n\\n        if (distB < localMinDist) {\\n          localClosestPoint = pointB;\\n          localMinDist = distB;\\n        }\\n\\n        if (localMinDist < globalMinDist) {\\n          globalMinDist = localMinDist;\\n          globalClosestPoint = Blend2dState_toConsumableArray(localClosestPoint);\\n          closestTriangle = index;\\n        }\\n      });\\n\\n      this._setInfluenceTriangle(this._triangles[closestTriangle], globalClosestPoint);\\n    }\\n    /**\\r\\n     * Determines the closest point on the line formed between the\\r\\n     * two blend thresholds based on the current [x,y] blendValues and\\r\\n     * then sets blend weights for the corresponding states.\\r\\n     *\\r\\n     * @param {Array.<number>} p - Given [x,y] blendValue.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_setInfluenceClosestPointOnLine",\\n    value: function _setInfluenceClosestPointOnLine(p) {\\n      var closestPoint = core_MathUtils.closestPointOnLine(this._vertices[[0]], this._vertices[[1]], p);\\n      var distA = core_MathUtils.distanceSquared(this._vertices[0], closestPoint);\\n      var distB = core_MathUtils.distanceSquared(this._vertices[1], closestPoint);\\n      var weightA = distB / (distA + distB);\\n      var weightB = distA / (distA + distB);\\n      var thresholdA = this._thresholds[0];\\n      var thresholdB = this._thresholds[1];\\n\\n      var stateA = this._states.get(thresholdA.name);\\n\\n      var stateB = this._states.get(thresholdB.name);\\n\\n      stateA.setWeight(weightA);\\n      stateB.setWeight(weightB);\\n\\n      this._setPhaseLeadState([stateA, stateB], [thresholdA.phaseMatch, thresholdB.phaseMatch]);\\n    }\\n    /**\\r\\n     * Sets a lead phase state if the conditions\\r\\n     * for phase-matching are satisfied.\\r\\n     *\\r\\n     * @param {Array.<AbstractBlendState>} states - States to\\r\\n     * check phase-matching criteria.\\r\\n     * @param {Array.<boolean>} phaseMatched - List of phase-match booleans.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_setPhaseLeadState",\\n    value: function _setPhaseLeadState(states, phaseMatched) {\\n      var _this6 = this;\\n\\n      var max = 0;\\n      states.forEach(function (state, index) {\\n        if (phaseMatched[index] && state.weight > max) {\\n          _this6._phaseLeadState = state;\\n          max = state.weight;\\n        }\\n      });\\n    }\\n  }]);\\n\\n  return Blend2dState;\\n}(state_AbstractBlendState);\\n\\n/* harmony default export */ const state_Blend2dState = (Blend2dState);\\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationLayer.js\\nfunction AnimationLayer_typeof(obj) { "@babel/helpers - typeof"; return AnimationLayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationLayer_typeof(obj); }\\n\\nfunction AnimationLayer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AnimationLayer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AnimationLayer_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationLayer_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationLayer_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction AnimationLayer_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationLayer_get = Reflect.get; } else { AnimationLayer_get = function _get(target, property, receiver) { var base = AnimationLayer_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationLayer_get.apply(this, arguments); }\\n\\nfunction AnimationLayer_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationLayer_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction AnimationLayer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationLayer_setPrototypeOf(subClass, superClass); }\\n\\nfunction AnimationLayer_setPrototypeOf(o, p) { AnimationLayer_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationLayer_setPrototypeOf(o, p); }\\n\\nfunction AnimationLayer_createSuper(Derived) { var hasNativeReflectConstruct = AnimationLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationLayer_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationLayer_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationLayer_possibleConstructorReturn(this, result); }; }\\n\\nfunction AnimationLayer_possibleConstructorReturn(self, call) { if (call && (AnimationLayer_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationLayer_assertThisInitialized(self); }\\n\\nfunction AnimationLayer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction AnimationLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction AnimationLayer_getPrototypeOf(o) { AnimationLayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationLayer_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n\\n\\n/**\\r\\n * Enum for types of {@link AnimationLayer} blending.\\r\\n *\\r\\n * @readonly\\r\\n * @enum {string}\\r\\n */\\n\\nvar LayerBlendModes = {\\n  Override: \\\'Override\\\',\\n  Additive: \\\'Additive\\\'\\n};\\n/**\\r\\n * The default blending mode {@link AnimationLayer}.\\r\\n *\\r\\n * @readonly\\r\\n * @type {string}\\r\\n */\\n\\nvar DefaultLayerBlendMode = \\\'Override\\\';\\n/**\\r\\n * Checks if a given blendMode is present in the values of {@link LayerBlendModes}.\\r\\n * If it is, return the original value, otherwise return {@link DefaultLayerBlendMode}.\\r\\n *\\r\\n * @param {string} blendMode - The name of the type of blending.\\r\\n *\\r\\n * @returns {(string|DefaultLayerBlendMode)}\\r\\n */\\n\\nfunction validateBlendMode(blendMode) {\\n  if (Array.from(Object.values(LayerBlendModes)).includes(blendMode)) {\\n    return blendMode;\\n  } else {\\n    return DefaultLayerBlendMode;\\n  }\\n}\\n/**\\r\\n * Class for managing a set of animations where only one state can be active at\\r\\n * any given time.\\r\\n *\\r\\n * @implements AnimationPlayerInterface\\r\\n * @implements StateContainerInterface\\r\\n */\\n\\nvar AnimationLayer = /*#__PURE__*/function (_AnimationPlayerInter) {\\n  AnimationLayer_inherits(AnimationLayer, _AnimationPlayerInter);\\n\\n  var _super = AnimationLayer_createSuper(AnimationLayer);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object=} options -  Options for the animation layer.\\r\\n   * @param {string} options.name - Name of the layer. Names must be unique to the\\r\\n   * animation feature that contains the layer.\\r\\n   * @param {LayerBlendModes} [options.blendMode=DefaultLayerBlendMode] -\\r\\n   * Type of blending to use for all states controlled by the layer.\\r\\n   * @param {number} [options.weight=1] - The amount of influence the layer\\\'s current\\r\\n   * animation has over the result for the host.\\r\\n   * @param {number} [options.transitionTime=0] - The default amount of time to use when\\r\\n   * playing and resuming animations.\\r\\n   * @param {Function=} options.easingFn - The default easing function to use when\\r\\n   * transitioning between animations and setting layer weight.\\r\\n   */\\n  function AnimationLayer() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    AnimationLayer_classCallCheck(this, AnimationLayer);\\n\\n    _this = _super.call(this, options);\\n    _this.name = options.name === undefined ? \\\'AnimationLayer\\\' : options.name;\\n    _this._blendMode = Array.from(Object.values(LayerBlendModes)).includes(options.blendMode) ? options.blendMode : DefaultLayerBlendMode;\\n    _this._promises = {\\n      weight: core_Deferred.resolve()\\n    };\\n    _this._weightPaused = false;\\n    _this.weight = typeof options.weight === \\\'number\\\' ? options.weight : 1;\\n    _this._internalWeight = _this._weight;\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets the type of blending used for states controlled by the layer.\\r\\n   *\\r\\n   * @readonly\\r\\n   * @type {string}\\r\\n   */\\n\\n\\n  AnimationLayer_createClass(AnimationLayer, [{\\n    key: "blendMode",\\n    get: function get() {\\n      return this._blendMode;\\n    }\\n    /**\\r\\n     * Gets and sets the amount of influence the layer\\\'s current animation has over\\r\\n     * the result for the host.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "weight",\\n    get: function get() {\\n      return this._weight;\\n    }\\n    /**\\r\\n     * Gets whether or not the layer\\\'s weight value is currently being animated.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n    ,\\n    set: function set(weight) {\\n      this._weight = core_MathUtils.clamp(weight, 0, 1);\\n    }\\n  }, {\\n    key: "weightPending",\\n    get: function get() {\\n      return this._promises.weight && this._promises.weight.pending;\\n    }\\n    /**\\r\\n     * Pause the current animation state and any interpolation happening on the layer\\\'s\\r\\n     * weight property.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      this._paused = true;\\n      this._weightPaused = true;\\n      return this.pauseAnimation() || this.weightPending;\\n    }\\n    /**\\r\\n     * Resume the current animation state and any interpolation happening on the layer\\\'s\\r\\n     * weight property.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "resume",\\n    value: function resume() {\\n      this._paused = false;\\n      this._weightPaused = false;\\n      var isWeightActive = this.weightPending;\\n\\n      if (this._currentState) {\\n        return this.resumeAnimation() || isWeightActive;\\n      } else {\\n        return isWeightActive;\\n      }\\n    }\\n    /**\\r\\n     * Updates the user defined weight over time.\\r\\n     *\\r\\n     * @param {number} weight - The target weight value.\\r\\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\\r\\n     * target weight.\\r\\n     * @param {Function=} easingFn - The easing function to use for interpolation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "setWeight",\\n    value: function setWeight(weight) {\\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\\n\\n      if (this.weightPending) {\\n        this._promises.weight.cancel();\\n      }\\n\\n      weight = core_MathUtils.clamp(weight);\\n      this._promises.weight = animpack_AnimationUtils.interpolateProperty(this, \\\'weight\\\', weight, {\\n        seconds: seconds,\\n        easingFn: easingFn !== undefined ? easingFn : this._easingFn\\n      });\\n      return this._promises.weight;\\n    }\\n    /**\\r\\n     * Pause any interpolation happening on the layer\\\'s weight property.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "pauseWeight",\\n    value: function pauseWeight() {\\n      this._weightPaused = true;\\n      return this.weightPending;\\n    }\\n    /**\\r\\n     * Resume any interpolation happening on the layer\\\'s weight property.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "resumeWeight",\\n    value: function resumeWeight() {\\n      this._weightPaused = false;\\n      return this.weightPending;\\n    }\\n    /**\\r\\n     * Multiplies the user weight by a factor to determine the internal weight.\\r\\n     *\\r\\n     * @param {number} factor - 0-1 multiplier to apply to the user weight.\\r\\n     */\\n\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      this._internalWeight = this._weight * factor;\\n\\n      if (this._currentState) {\\n        this._currentState.updateInternalWeight(this._internalWeight);\\n      }\\n    }\\n    /**\\r\\n     * Returns the names of blend states in an animation.\\r\\n     *\\r\\n     * @param {string} animationName - Name of the animation.\\r\\n     *\\r\\n     * @returns {Array.<string>} - Names of blend states.\\r\\n     */\\n\\n  }, {\\n    key: "getAnimationBlendNames",\\n    value: function getAnimationBlendNames(animationName) {\\n      var state = this.getState(animationName);\\n\\n      if (state === undefined) {\\n        throw new Error("Cannot get blend names of animation ".concat(animationName, " on layer ").concat(this.name, ". No animation exists with this name."));\\n      }\\n\\n      if (state instanceof state_AbstractBlendState) {\\n        return state.getStateNames();\\n      }\\n\\n      throw new Error("Cannot get blend names of animation ".concat(animationName, " on layer ").concat(this.name, ". Animation is not an instance of AbstractBlendState."));\\n    }\\n    /**\\r\\n     * Update the weight for a blend state of an animation.\\r\\n     *\\r\\n     * @param {string} animationName - Name of the animation containing the blend state\\r\\n     * to update.\\r\\n     * @param {string} blendName - Name of the blend state to update.\\r\\n     * @param {number} weight - Weight value to set on the animation. This number shoudld be\\r\\n     * in the 0-1 range.\\r\\n     * @param {number=} seconds - Number of seconds it should take to reach the new weight.\\r\\n     * Default is zero and will set immediately.\\r\\n     * @param {Function=} easingFn - Easing function to use while interpolating the new\\r\\n     * weight. Default is Easing.Linear.InOut.\\r\\n     *\\r\\n     * @returns {Deferred} - Promise that will resolve once the animation\\\'s weight reaches\\r\\n     * the target value.\\r\\n     */\\n\\n  }, {\\n    key: "setAnimationBlendWeight",\\n    value: function setAnimationBlendWeight(animationName, blendName, weight) {\\n      var seconds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\\n      var easingFn = arguments.length > 4 ? arguments[4] : undefined;\\n      var state = this.getState(animationName);\\n\\n      if (state === undefined) {\\n        throw new Error("Cannot set blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". No animation exists with this name."));\\n      }\\n\\n      if (state instanceof state_AbstractBlendState) {\\n        return state.setBlendWeight(blendName, weight, seconds, easingFn);\\n      }\\n\\n      throw new Error("Cannot set blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". Animation is not an instance of AbstractBlendState."));\\n    }\\n    /**\\r\\n     * Returns the weight for a blend state of an animation.\\r\\n     *\\r\\n     * @param {string} animationName - Name of the animation containing the blend state\\r\\n     * to update.\\r\\n     * @param {string} blendName - Name of the blend state to retrieve the weight of.\\r\\n     *\\r\\n     * @returns {number} - Weight of the blend state.\\r\\n     */\\n\\n  }, {\\n    key: "getAnimationBlendWeight",\\n    value: function getAnimationBlendWeight(animationName, blendName) {\\n      var state = this.getState(animationName);\\n\\n      if (state === undefined) {\\n        throw new Error("Cannot get blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". No animation exists with this name."));\\n      }\\n\\n      if (state instanceof state_AbstractBlendState) {\\n        return state.getBlendWeight(blendName);\\n      }\\n\\n      throw new Error("Cannot get blend weight of animation ".concat(animationName, " on layer ").concat(this.name, ". Animation is not an instance of AbstractBlendState."));\\n    }\\n    /**\\r\\n     * Update any weight interpolators and the current animation.\\r\\n     *\\r\\n     * @param {number} deltaTime - Time in milliseconds since the last update.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      AnimationLayer_get(AnimationLayer_getPrototypeOf(AnimationLayer.prototype), "update", this).call(this, deltaTime);\\n\\n      if (!this._paused && !this._weightPaused) {\\n        this._promises.weight.execute(deltaTime);\\n      }\\n    }\\n    /**\\r\\n     * Cancel any pending promises and discard states controlled by the layer.\\r\\n     */\\n\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      AnimationLayer_get(AnimationLayer_getPrototypeOf(AnimationLayer.prototype), "discard", this).call(this);\\n\\n      this.discardStates();\\n\\n      this._promises.weight.cancel();\\n\\n      delete this._promises;\\n    }\\n  }]);\\n\\n  return AnimationLayer;\\n}(animpack_AnimationPlayerInterface.Mixin(state_StateContainerInterface.Mixin()));\\n\\n/* harmony default export */ const animpack_AnimationLayer = (AnimationLayer);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/SingleState.js\\nfunction SingleState_typeof(obj) { "@babel/helpers - typeof"; return SingleState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, SingleState_typeof(obj); }\\n\\nfunction SingleState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction SingleState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction SingleState_createClass(Constructor, protoProps, staticProps) { if (protoProps) SingleState_defineProperties(Constructor.prototype, protoProps); if (staticProps) SingleState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction SingleState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) SingleState_setPrototypeOf(subClass, superClass); }\\n\\nfunction SingleState_setPrototypeOf(o, p) { SingleState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SingleState_setPrototypeOf(o, p); }\\n\\nfunction SingleState_createSuper(Derived) { var hasNativeReflectConstruct = SingleState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = SingleState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = SingleState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return SingleState_possibleConstructorReturn(this, result); }; }\\n\\nfunction SingleState_possibleConstructorReturn(self, call) { if (call && (SingleState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return SingleState_assertThisInitialized(self); }\\n\\nfunction SingleState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction SingleState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction SingleState_getPrototypeOf(o) { SingleState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SingleState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n/**\\r\\n * Class for playing a single animation clip.\\r\\n *\\r\\n * @extends AbstractState\\r\\n * @alias core/SingleState\\r\\n */\\n\\nvar SingleState = /*#__PURE__*/function (_AbstractState) {\\n  SingleState_inherits(SingleState, _AbstractState);\\n\\n  var _super = SingleState_createSuper(SingleState);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object=} options - Options for the animation state.\\r\\n   * @param {string=} options.name - Name for the animation state. Names must be\\r\\n   * unique for the layer the state is applied to.\\r\\n   * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n   * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\\r\\n   * animation.\\r\\n   * @param {number} [options.loopCount=Infinity] - Number of times the animation should\\r\\n   * repeat before finishing.\\r\\n   * @param {string} [options.blendMode=DefaultLayerBlendMode] - Type of\\r\\n   * blending the animation should use.\\r\\n   */\\n  function SingleState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    SingleState_classCallCheck(this, SingleState);\\n\\n    _this = _super.call(this, options);\\n    _this._timeScale = options.timeScale !== undefined ? options.timeScale : 1;\\n    _this._promises.timeScale = core_Deferred.resolve();\\n    _this._loopCount = options.loopCount !== undefined ? options.loopCount : Infinity;\\n    _this._blendMode = validateBlendMode(options.blendMode);\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets and sets the normalized playing time of the current animation\\r\\n   *\\r\\n   * @type {number}\\r\\n   */\\n\\n\\n  SingleState_createClass(SingleState, [{\\n    key: "normalizedTime",\\n    get: function get() {\\n      return 0;\\n    },\\n    set: function set(time) {}\\n    /**\\r\\n     * Gets and sets the a factor to scale animation playback speed with.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "timeScale",\\n    get: function get() {\\n      return this._timeScale;\\n    },\\n    set: function set(timeScale) {\\n      this._timeScale = timeScale;\\n    }\\n    /**\\r\\n     * Gets whether or not the timeScale is currently being animated.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "timeScalePending",\\n    get: function get() {\\n      return this._promises.timeScale.pending;\\n    }\\n    /**\\r\\n     * Updates the timeScale value over time.\\r\\n     *\\r\\n     * @param {number} weight - The target timeScale value.\\r\\n     * @param {number} [seconds=0] - The amount of time it will take to reach the\\r\\n     * target timeScale.\\r\\n     * @param {Function=} easingFn - The easing function to use for interpolation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "setTimeScale",\\n    value: function setTimeScale(timeScale) {\\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\\n\\n      this._promises.timeScale.cancel();\\n\\n      this._promises.timeScale = animpack_AnimationUtils.interpolateProperty(this, \\\'timeScale\\\', timeScale, {\\n        seconds: seconds,\\n        easingFn: easingFn\\n      });\\n      return this._promises.timeScale;\\n    }\\n    /**\\r\\n     * Gets and sets the number of times the animation will repeat before finishing.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "loopCount",\\n    get: function get() {\\n      return this._loopCount;\\n    },\\n    set: function set(loopCount) {\\n      this._loopCount = loopCount;\\n    }\\n    /**\\r\\n     * Gets the type of blending used for the animation.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {string}\\r\\n     */\\n\\n  }, {\\n    key: "blendMode",\\n    get: function get() {\\n      return this._blendMode;\\n    }\\n  }]);\\n\\n  return SingleState;\\n}(state_AbstractState);\\n\\n/* harmony default export */ const state_SingleState = (SingleState);\\n;// CONCATENATED MODULE: ./src/core/animpack/state/RandomAnimationState.js\\nfunction RandomAnimationState_typeof(obj) { "@babel/helpers - typeof"; return RandomAnimationState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, RandomAnimationState_typeof(obj); }\\n\\nfunction RandomAnimationState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction RandomAnimationState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction RandomAnimationState_createClass(Constructor, protoProps, staticProps) { if (protoProps) RandomAnimationState_defineProperties(Constructor.prototype, protoProps); if (staticProps) RandomAnimationState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction RandomAnimationState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { RandomAnimationState_get = Reflect.get; } else { RandomAnimationState_get = function _get(target, property, receiver) { var base = RandomAnimationState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return RandomAnimationState_get.apply(this, arguments); }\\n\\nfunction RandomAnimationState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = RandomAnimationState_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction RandomAnimationState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) RandomAnimationState_setPrototypeOf(subClass, superClass); }\\n\\nfunction RandomAnimationState_setPrototypeOf(o, p) { RandomAnimationState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return RandomAnimationState_setPrototypeOf(o, p); }\\n\\nfunction RandomAnimationState_createSuper(Derived) { var hasNativeReflectConstruct = RandomAnimationState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = RandomAnimationState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = RandomAnimationState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return RandomAnimationState_possibleConstructorReturn(this, result); }; }\\n\\nfunction RandomAnimationState_possibleConstructorReturn(self, call) { if (call && (RandomAnimationState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return RandomAnimationState_assertThisInitialized(self); }\\n\\nfunction RandomAnimationState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction RandomAnimationState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction RandomAnimationState_getPrototypeOf(o) { RandomAnimationState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return RandomAnimationState_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n/**\\r\\n * Class for playing random animations at random intervals within this state.\\r\\n *\\r\\n * @extends AbstractState\\r\\n * @implements AnimationPlayerInterface\\r\\n * @implements StateContainerInterface\\r\\n */\\n\\nvar RandomAnimationState = /*#__PURE__*/function (_AnimationPlayerInter) {\\n  RandomAnimationState_inherits(RandomAnimationState, _AnimationPlayerInter);\\n\\n  var _super = RandomAnimationState_createSuper(RandomAnimationState);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {Object} [options={}] - Options for the container state.\\r\\n   * @param {number} [options.playInterval=3] - The base animation playback interval.\\r\\n   * @param {Array.<AbstractState>} [subStates=[]] - states to be randomly picked to play\\r\\n   */\\n  function RandomAnimationState() {\\n    var _this;\\n\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n    var subStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n\\n    RandomAnimationState_classCallCheck(this, RandomAnimationState);\\n\\n    _this = _super.call(this, options);\\n    _this._playInterval = options.playInterval ? options.playInterval : 3;\\n    subStates.forEach(function (state) {\\n      _this.addState(state);\\n    });\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets and sets the base animation play interval\\r\\n   *\\r\\n   * @type {float}\\r\\n   */\\n\\n\\n  RandomAnimationState_createClass(RandomAnimationState, [{\\n    key: "playInterval",\\n    get: function get() {\\n      return this._playInterval;\\n    },\\n    set: function set(playInterval) {\\n      this._playInterval = playInterval;\\n    }\\n    /**\\r\\n     * Reset the internal timer for animation play interval\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_resetTimer",\\n    value: function _resetTimer() {\\n      var _this2 = this;\\n\\n      var playTimer = core_Utils.getRandomFloat(this._playInterval / 4, this._playInterval * 2);\\n\\n      var onFinish = function onFinish() {\\n        _this2.playRandomAnimation(_this2._playCallbacks.onError);\\n      };\\n\\n      this._promises.timer = core_Utils.wait(playTimer, {\\n        onFinish: onFinish\\n      });\\n    }\\n  }, {\\n    key: "updateInternalWeight",\\n    value: function updateInternalWeight(factor) {\\n      RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "updateInternalWeight", this).call(this, factor);\\n\\n      if (this._currentState) {\\n        this._currentState.updateInternalWeight(this._internalWeight);\\n      }\\n    }\\n    /**\\r\\n     * Pick a random animation and utilize AnimationPlayerInterface to play that animation\\r\\n     *\\r\\n     * @param {Function=} onError - Function to execute if the state encounters\\r\\n     * an error during playback.\\r\\n     */\\n\\n  }, {\\n    key: "playRandomAnimation",\\n    value: function playRandomAnimation(onError) {\\n      this._resetTimer();\\n\\n      var states = this.getStateNames();\\n\\n      if (this._currentState) {\\n        states.splice(states.indexOf(this._currentState.name), 1);\\n      }\\n\\n      var randomState = states[core_Utils.getRandomInt(0, states.length)];\\n      this.playAnimation(randomState, this._transitionTime, this._easingFn, undefined, onError, undefined);\\n    }\\n  }, {\\n    key: "play",\\n    value: function play(onFinish, onError, onCancel) {\\n      this.playRandomAnimation(onError);\\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "play", this).call(this, onFinish, onError, onCancel);\\n    }\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "pause", this).call(this) && this.pauseAnimation();\\n    }\\n  }, {\\n    key: "resume",\\n    value: function resume(onFinish, onError, onCancel) {\\n      if (this._currentState) {\\n        this.resumeAnimation(this._currentState.name, this._transitionTime, this._easingFn, undefined, onError, undefined);\\n      }\\n\\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "resume", this).call(this, onFinish, onError, onCancel);\\n    }\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "cancel", this).call(this) && this.cancelAnimation();\\n    }\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      return RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "stop", this).call(this) && this.stopAnimation();\\n    }\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      RandomAnimationState_get(RandomAnimationState_getPrototypeOf(RandomAnimationState.prototype), "discard", this).call(this);\\n\\n      this.discardStates();\\n    }\\n  }]);\\n\\n  return RandomAnimationState;\\n}(animpack_AnimationPlayerInterface.Mixin(state_StateContainerInterface.Mixin(state_AbstractState)));\\n\\n/* harmony default export */ const state_RandomAnimationState = (RandomAnimationState);\\n;// CONCATENATED MODULE: ./src/core/animpack/AnimationFeature.js\\nfunction AnimationFeature_typeof(obj) { "@babel/helpers - typeof"; return AnimationFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationFeature_typeof(obj); }\\n\\nfunction AnimationFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction AnimationFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AnimationFeature_ownKeys(Object(source), !0).forEach(function (key) { AnimationFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AnimationFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction AnimationFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction AnimationFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AnimationFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AnimationFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction AnimationFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationFeature_get = Reflect.get; } else { AnimationFeature_get = function _get(target, property, receiver) { var base = AnimationFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationFeature_get.apply(this, arguments); }\\n\\nfunction AnimationFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationFeature_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction AnimationFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationFeature_setPrototypeOf(subClass, superClass); }\\n\\nfunction AnimationFeature_setPrototypeOf(o, p) { AnimationFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationFeature_setPrototypeOf(o, p); }\\n\\nfunction AnimationFeature_createSuper(Derived) { var hasNativeReflectConstruct = AnimationFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationFeature_possibleConstructorReturn(this, result); }; }\\n\\nfunction AnimationFeature_possibleConstructorReturn(self, call) { if (call && (AnimationFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationFeature_assertThisInitialized(self); }\\n\\nfunction AnimationFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction AnimationFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction AnimationFeature_getPrototypeOf(o) { AnimationFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationFeature_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\r\\n * Enum for animation state classes.\\r\\n *\\r\\n * @readonly\\r\\n * @enum {Class}\\r\\n */\\n\\nvar AnimationTypes = {\\n  single: state_SingleState,\\n  freeBlend: state_FreeBlendState,\\n  queue: state_QueueState,\\n  randomAnimation: state_RandomAnimationState,\\n  blend1d: state_Blend1dState,\\n  blend2d: state_Blend2dState\\n};\\n/**\\r\\n * Feature for managing animations on an object.\\r\\n *\\r\\n * @extends AbstractHostFeature\\r\\n * @alias core/AnimationFeature\\r\\n *\\r\\n * @property {Object} EVENTS - Built-in messages that the feature emits. When the\\r\\n * feature is added to a {@link core/HostObject}, event names will be prefixed by the\\r\\n * name of the feature class + \\\'.\\\'.\\r\\n * @property {string} [EVENTS.addLayer=onAddLayerEvent] - Message that is emitted after\\r\\n * [addLayer]{@link core/AnimationFeature#addLayer} has been successfully executed.\\r\\n * An object representing the name of the layer that was added and its index in\\r\\n * the layer stack with the signature {name: string, index: number} is supplied\\r\\n * as an argument to listener functions.\\r\\n * @property {string} [EVENTS.removeLayer=onRemoveLayerEvent] - Message that is\\r\\n * emitted after [removeLayer]{@link core/AnimationFeature#removeLayer} has been\\r\\n * successfully executed. An object representing the name of the layer that was\\r\\n * removed and its index in the layer stack with the signature {name: string, index: number}\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.renameLayer=onRenameLayerEvent] - Message that is\\r\\n * emitted after [renameLayer]{@link core/AnimationFeature#renameLayer} has been\\r\\n * successfully executed. An object representing the original name of the layer\\r\\n * that was renamed and its updated name with the signature {oldName: string, newName: string}\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.addAnimation=onAddAnimationEvent] - Message that is\\r\\n * emitted after [addAnimation]{@link core/AnimationFeature#addAnimation} has been\\r\\n * successfully executed. An object representing the name of the layer that the\\r\\n * animation was added to and the name of the animation that was added with the\\r\\n * signature {layerName: string, animationName: string} is supplied as an argument\\r\\n * to listener functions.\\r\\n * @property {string} [EVENTS.removeAnimation=onRemovedAnimationEvent] - Message\\r\\n * that is emitted after [removeAnimation]{@link core/AnimationFeature#removeAnimation}\\r\\n * has been successfully executed. An object representing the name of the layer\\r\\n * that the animation was removed from and the name of the animation that was removed\\r\\n * with the signature {layerName: string, animationName: string} is supplied as\\r\\n * an argument to listener functions.\\r\\n * @property {string} [EVENTS.renameAnimation=onRenameAnimationEvent] - Message\\r\\n * that is emitted after [renameAnimation]{@link core/AnimationFeature#renameAnimation}\\r\\n * has been successfully executed. An object representing the name of the layer\\r\\n * that contains the animation that was renamed, the original name of the animation\\r\\n * that was renamed and its updated name with the signature {layerName: string, oldName: string, newName: string}\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.play=onPlayEvent] - Message that is emitted after\\r\\n * each call to [play]{@link core/AnimationFeature#playAnimation}. An object representing\\r\\n * the name of the layer contains the animation that was played and the name of\\r\\n * the animation that was played with the signature {layerName: string, animationName: string}\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.pause=onPauseEvent] - Message that is emitted after\\r\\n * each call to [pause]{@link core/AnimationFeature#pauseAnimation}. An object representing\\r\\n * the name of the layer contains the animation that was paused and the name of\\r\\n * the animation that was paused with the signature {layerName: string, animationName: string}\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.resume=onResumeEvent] - Message that is emitted after\\r\\n * each call to [resume]{@link core/AnimationFeature#resumeAnimation}. An object representing\\r\\n * the name of the layer contains the animation that was resumed and the name of\\r\\n * the animation that was resumed with the signature {layerName: string, animationName: string}\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.interrupt=onInterruptEvent] - Message that is emitted\\r\\n * if there is a current speech in progress and [play]{@link core/AnimationFeature#playAnimation}\\r\\n * or [resume]{@link core/AnimationFeature#resumeAnimation} are executed for a new speech.\\r\\n * An object representing the name of the layer contains the animation that was\\r\\n * interrupted and the name of the animation that was interrupted with the signature\\r\\n * {layerName: string, animationName: string} is supplied as an argument to listener\\r\\n * functions.\\r\\n * @property {string} [EVENTS.stop=onStopEvent] - Message that is emitted after\\r\\n * each call to [stop]{@link core/AnimationFeature#stopAnimation} and when a speech reaches\\r\\n * the end of playback. An object representing\\r\\n * the name of the layer contains the animation that was stopped and the name of\\r\\n * the animation that was stopped with the signature {layerName: string, animationName: string}\\r\\n * is supplied as an argument to listener functions.\\r\\n */\\n\\nvar AnimationFeature = /*#__PURE__*/function (_AbstractHostFeature) {\\n  AnimationFeature_inherits(AnimationFeature, _AbstractHostFeature);\\n\\n  var _super = AnimationFeature_createSuper(AnimationFeature);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/HostObject} host - Host object that owns the feature.\\r\\n   */\\n  function AnimationFeature(host) {\\n    var _this;\\n\\n    AnimationFeature_classCallCheck(this, AnimationFeature);\\n\\n    _this = _super.call(this, host);\\n    _this._layers = [];\\n    _this._layerMap = {};\\n    _this._paused = false;\\n    return _this;\\n  }\\n  /**\\r\\n   * Make sure a supplied layer index is within the range of layers.\\r\\n   *\\r\\n   * @private\\r\\n   *\\r\\n   * @param {number} index\\r\\n   * @param {boolean} [existing=true] - Whether the index represents and existing\\r\\n   * layer or a new layer to be added.\\r\\n   *\\r\\n   * @returns {number=}\\r\\n   */\\n\\n\\n  AnimationFeature_createClass(AnimationFeature, [{\\n    key: "_validateIndex",\\n    value: function _validateIndex(index) {\\n      var existing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\\n\\n      // Index is invalid if there are no layers and we\\\'re checking for an existing layer index\\n      if (this._layers.length === 0 && existing) {\\n        return undefined;\\n      }\\n\\n      var lastIndex = existing ? this._layers.length - 1 : this._layers.length; // Count from the end of the array for negative indices\\n\\n      if (index < 0) {\\n        index = lastIndex + index + 1;\\n      }\\n\\n      if (index < 0 || index > lastIndex) {\\n        return undefined;\\n      } else {\\n        return index;\\n      }\\n    }\\n    /**\\r\\n     * Re-evaluate internal weight values of layers starting from the top of the\\r\\n     * stack. Override layers\\\' weights affect the values of all layers lower in the\\r\\n     * stack.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_updateInternalWeights",\\n    value: function _updateInternalWeights() {\\n      var numLayers = this._layers.length;\\n      var weightMultiplier = 1; // Update internal weight values on layers in reverse order\\n\\n      for (var i = numLayers - 1; i >= 0; i--) {\\n        var layer = this._layers[i];\\n        layer.updateInternalWeight(weightMultiplier); // If the layer is override, update the multiplier with the remainder of the full weight\\n\\n        if (layer.blendMode === LayerBlendModes.Override && layer.currentState) {\\n          weightMultiplier *= 1 - layer.currentState.internalWeight;\\n        }\\n      }\\n    }\\n    /**\\r\\n     * Return a new instance of a SingleState.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options to pass to the SingleState constructor.\\r\\n     * @param {string=} options.name - Name for the animation state. Names must be\\r\\n     * unique for the layer the state is applied to.\\r\\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\\r\\n     * animation.\\r\\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\\r\\n     * repeat before finishing.\\r\\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\\r\\n     * blending the animation should use.\\r\\n     *\\r\\n     * @returns {core/SingleState}\\r\\n     */\\n\\n  }, {\\n    key: "_createSingleState",\\n    value: function _createSingleState(options) {\\n      return new state_SingleState(options);\\n    }\\n    /**\\r\\n     * Return a new instance of a FreeBlendState.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options to pass to the FreeBlendState constructor.\\r\\n     * @param {string=} options.name - Name for the animation state. Names must be\\r\\n     * unique for the layer the state is applied to.\\r\\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\\r\\n     * animation.\\r\\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\\r\\n     * repeat before finishing.\\r\\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\\r\\n     * blending the animation should use.\\r\\n     * @param {Array.<Object>} [options.blendStateOptions] - Array of options used to create the\\r\\n     * blend states for this container.\\r\\n     *\\r\\n     * @returns {FreeBlendState}\\r\\n     */\\n\\n  }, {\\n    key: "_createFreeBlendState",\\n    value: function _createFreeBlendState(options) {\\n      var _this2 = this;\\n\\n      var _options$blendStateOp = options.blendStateOptions,\\n          blendStateOptions = _options$blendStateOp === void 0 ? [] : _options$blendStateOp;\\n      var blendStates = [];\\n      blendStateOptions.forEach(function (blendOptions) {\\n        blendStates.push(_this2._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, blendOptions), {}, {\\n          blendMode: options.blendMode\\n        })));\\n      });\\n      return new state_FreeBlendState(options, blendStates);\\n    }\\n    /**\\r\\n     * Return a new instance of a QueueState.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options to pass to the QueueState constructor.\\r\\n     * @param {string=} options.name - Name for the animation state. Names must be\\r\\n     * unique for the layer the state is applied to.\\r\\n     * @param {number} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n     * @param {number=} options.transitionTime - The amount of time it takes to transition\\r\\n     * between queued states.\\r\\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\\r\\n     * blending the animation should use.\\r\\n     * @param {Array.<Object>} [options.queueOptions] - Array of options used to create the\\r\\n     * queue states for this container.\\r\\n     *\\r\\n     * @returns {QueueState}\\r\\n     */\\n\\n  }, {\\n    key: "_createQueueState",\\n    value: function _createQueueState(options) {\\n      var _this3 = this;\\n\\n      var _options$queueOptions = options.queueOptions,\\n          queueOptions = _options$queueOptions === void 0 ? [] : _options$queueOptions;\\n      var queueStates = queueOptions.map(function (queueOption) {\\n        return _this3._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({\\n          transitionTime: options.transitionTime\\n        }, queueOption), {}, {\\n          blendMode: options.blendMode\\n        }));\\n      });\\n      return new state_QueueState(options, queueStates);\\n    }\\n    /**\\r\\n     * Return a new instance of a Blend1dState.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options to pass to the Blend1dState constructor.\\r\\n     * @param {string=} options.name - Name for the animation state. Names must be\\r\\n     * unique for the layer the state is applied to.\\r\\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\\r\\n     * animation.\\r\\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\\r\\n     * repeat before finishing.\\r\\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\\r\\n     * blending the animation should use.\\r\\n     * @param {Array.<Object>} [options.blendStateOptions] - Array of options used to create the\\r\\n     * blend states for this container.\\r\\n     * @param {Array.<number>} [options.blendThresholds] - Array of numbers used to set the\\r\\n     * thresholds for each blend state in this container.\\r\\n     * @param {Array.<boolean>} [options.blendMatchPhases=[]] - Optional array of booleans used to\\r\\n     * set whether or not each blend state in this container will match phases.\\r\\n     *\\r\\n     * @returns {Blend1dState}\\r\\n     */\\n\\n  }, {\\n    key: "_createBlend1dState",\\n    value: function _createBlend1dState(options) {\\n      var _this4 = this;\\n\\n      var _options$blendStateOp2 = options.blendStateOptions,\\n          blendStateOptions = _options$blendStateOp2 === void 0 ? [] : _options$blendStateOp2;\\n      var _options$blendThresho = options.blendThresholds,\\n          blendThresholds = _options$blendThresho === void 0 ? [] : _options$blendThresho;\\n      var _options$blendMatchPh = options.blendMatchPhases,\\n          blendMatchPhases = _options$blendMatchPh === void 0 ? [] : _options$blendMatchPh;\\n      var blendStates = [];\\n      blendStateOptions.forEach(function (blendOptions) {\\n        blendStates.push(_this4._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, blendOptions), {}, {\\n          blendMode: options.blendMode\\n        })));\\n      });\\n      return new state_Blend1dState(options, blendStates, blendThresholds, blendMatchPhases);\\n    }\\n    /**\\r\\n     * Return a new instance of a Blend2dState.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options to pass to the Blend1dState constructor.\\r\\n     * @param {string=} options.name - Name for the animation state. Names must be\\r\\n     * unique for the layer the state is applied to.\\r\\n     * @param {weight} [options.weight=0] - The 0-1 amount of influence the state will have.\\r\\n     * @param {timeScale} [options.timeScale=1] - Factor to scale the playback speed of the\\r\\n     * animation.\\r\\n     * @param {number} [options.loopCount=Infinity] - Number of times the animation should\\r\\n     * repeat before finishing.\\r\\n     * @param {string} [options.blendMode=LayerBlendModes[DefaultLayerBlendMode]] - Type of\\r\\n     * blending the animation should use.\\r\\n     * @param {Array.<Object>} [options.blendStateOptions] - Array of options used to create the\\r\\n     * blend states for this container.\\r\\n     * @param {Array.<Array.<number>>} [options.blendThresholds] - Array of Array of numbers used to set the\\r\\n     * thresholds for each blend state in this container.\\r\\n     * @param {Array.<boolean>} [options.blendMatchPhases=[]] - Optional array of booleans used to\\r\\n     * set whether or not each blend state in this container will match phases.\\r\\n     *\\r\\n     * @returns {Blend1dState}\\r\\n     */\\n\\n  }, {\\n    key: "_createBlend2dState",\\n    value: function _createBlend2dState(options) {\\n      var _this5 = this;\\n\\n      var _options$blendStateOp3 = options.blendStateOptions,\\n          blendStateOptions = _options$blendStateOp3 === void 0 ? [] : _options$blendStateOp3;\\n      var _options$blendThresho2 = options.blendThresholds,\\n          blendThresholds = _options$blendThresho2 === void 0 ? [] : _options$blendThresho2;\\n      var _options$blendMatchPh2 = options.blendMatchPhases,\\n          blendMatchPhases = _options$blendMatchPh2 === void 0 ? [] : _options$blendMatchPh2;\\n      var blendStates = [];\\n      blendStateOptions.forEach(function (blendOptions) {\\n        blendStates.push(_this5._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, blendOptions), {}, {\\n          blendMode: options.blendMode\\n        })));\\n      });\\n      return new state_Blend2dState(options, blendStates, blendThresholds, blendMatchPhases);\\n    }\\n    /**\\r\\n     * Return a new instance of a RandomAnimationState.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} options - Options to pass to the RandomAnimationState constructor.\\r\\n     * @param {string=} options.name - Name for the animation state. Names must be\\r\\n     * unique for the layer the state is applied to.\\r\\n     * @param {number} [options.playInterval=3] - The base animation playback interval.\\r\\n     * @param {Array.<Object>} [options.subStateOptions] - Array of options used to create the\\r\\n     * sub states for this container.\\r\\n     *\\r\\n     * @returns {RandomAnimationState}\\r\\n     */\\n\\n  }, {\\n    key: "_createRandomAnimationState",\\n    value: function _createRandomAnimationState(options) {\\n      var _this6 = this;\\n\\n      var _options$subStateOpti = options.subStateOptions,\\n          subStateOptions = _options$subStateOpti === void 0 ? [] : _options$subStateOpti;\\n      var subStates = [];\\n      subStateOptions.forEach(function (subStateOptions) {\\n        subStates.push(_this6._createSingleState(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, subStateOptions), {}, {\\n          blendMode: options.blendMode\\n        })));\\n      });\\n      return new state_RandomAnimationState(options, subStates);\\n    }\\n    /**\\r\\n     * Make sure the layer with the given name exists and return a unique version\\r\\n     * of the animation name supplied for that layer.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to check against.\\r\\n     * @param {string} animationName - Name of the animation to validate.\\r\\n     *\\r\\n     * @returns {string} Validated animation name.\\r\\n     */\\n\\n  }, {\\n    key: "_validateNewAnimation",\\n    value: function _validateNewAnimation(layerName, animationName) {\\n      // Make sure the layerName is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot add animation to layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      } // Make sure the animationName is unique\\n\\n\\n      var name = core_Utils.getUniqueName(animationName, layer.getStateNames());\\n\\n      if (name !== animationName) {\\n        console.warn("Animation name ".concat(animationName, " is not unique for layer ").concat(layer.name, ". Animation will be renamed to ").concat(name, "."));\\n      }\\n\\n      return name;\\n    }\\n    /**\\r\\n     * Gets whether or not all animations are paused.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "paused",\\n    get: function get() {\\n      return this._paused;\\n    }\\n    /**\\r\\n     * Gets an array of names of animation layers.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {Array.<string>}\\r\\n     */\\n\\n  }, {\\n    key: "layers",\\n    get: function get() {\\n      return this._layers.map(function (layer) {\\n        return layer.name;\\n      });\\n    }\\n    /**\\r\\n     * Create and store a new animation layer.\\r\\n     *\\r\\n     * @param {string} [name=\\\'NewLayer\\\'] - Name for the layer.\\r\\n     * @param {Object} [options={}] - Options to pass to {@link AnimationLayer#constructor}\\r\\n     * @param {index=} index - Index to insert the new layer at. If none is provided\\r\\n     * it will be added to the end of the stack.\\r\\n     *\\r\\n     * @returns {number} Index of the new layer.\\r\\n     */\\n\\n  }, {\\n    key: "addLayer",\\n    value: function addLayer() {\\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \\\'NewLayer\\\';\\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n      var index = arguments.length > 2 ? arguments[2] : undefined;\\n      var numLayers = this._layers.length;\\n      var layerIndex = index; // Make sure the given index is within the range of layers\\n\\n      if (index === undefined || index === -1) {\\n        layerIndex = this._layers.length;\\n      } else {\\n        layerIndex = this._validateIndex(index, false);\\n\\n        if (layerIndex === undefined) {\\n          // Insert at the beginning if the user passed in a negative index\\n          if (index < 0) {\\n            layerIndex = 0;\\n          } // Otherwise append to the end\\n          else {\\n            layerIndex = this._layers.length;\\n          }\\n\\n          console.warn("Index ".concat(index, " is invalid for host ").concat(this._host.id, ". New layer will be added at the closest valid index: ").concat(layerIndex, "."));\\n        }\\n      } // Make sure the layer name is unique\\n\\n\\n      var layerName = core_Utils.getUniqueName(name, Object.keys(this._layerMap));\\n\\n      if (name !== layerName) {\\n        console.warn("Layer name ".concat(name, " is not unique. New layer will be added with the name ").concat(layerName, "."));\\n      }\\n\\n      var layer = new animpack_AnimationLayer(AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, options), {}, {\\n        name: layerName\\n      }));\\n      this._layerMap[layerName] = layer;\\n\\n      if (layerIndex === numLayers) {\\n        this._layers.push(layer);\\n      } else {\\n        this._layers.splice(layerIndex, 0, layer);\\n      } // Notify that a layer has been added to the feature\\n\\n\\n      var eventData = {\\n        name: layerName,\\n        index: layerIndex\\n      };\\n      this.emit(this.constructor.EVENTS.addLayer, eventData);\\n      return eventData;\\n    }\\n    /**\\r\\n     * Remove an animation layer from the stack. Animations on this layer will no\\r\\n     * longer be evaluated.\\r\\n     *\\r\\n     * @param {string} name - Name for the layer to remove.\\r\\n     *\\r\\n     * @returns {boolean} Whether or not removal was successful.\\r\\n     */\\n\\n  }, {\\n    key: "removeLayer",\\n    value: function removeLayer(name) {\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        console.warn("Did not remove layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n        return false;\\n      }\\n\\n      layer.discard();\\n\\n      var index = this._layers.indexOf(layer);\\n\\n      this._layers.splice(index, 1);\\n\\n      delete this._layerMap[name]; // Notify that a layer has been removed from the feature\\n\\n      this.emit(this.constructor.EVENTS.removeLayer, {\\n        name: name,\\n        index: index\\n      });\\n      return true;\\n    }\\n    /**\\r\\n     * Re-order the layer stack so that the layer with the given name is positioned\\r\\n     * at the given index.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to move.\\r\\n     * @param {number} index - New index to position the layer at.\\r\\n     *\\r\\n     * @returns {number} The new index of the layer\\r\\n     */\\n\\n  }, {\\n    key: "moveLayer",\\n    value: function moveLayer(name, index) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot move layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      } // Make sure the index falls in the range of existing layers\\n\\n\\n      var layerIndex = this._validateIndex(index, true);\\n\\n      var lastIndex = this._layers.length - 1;\\n\\n      if (layerIndex === undefined) {\\n        throw new Error("Cannot move layer ".concat(name, " from host ").concat(this._host.id, " to index ").concat(index, ". Index must be in the 0 - ").concat(lastIndex, " range."));\\n      }\\n\\n      var currentIndex = this._layers.indexOf(layer);\\n\\n      if (currentIndex === layerIndex) {\\n        return;\\n      } // Remove from the current position\\n\\n\\n      this._layers.splice(currentIndex, 1); // Insert at the new position\\n\\n\\n      if (layerIndex === lastIndex) {\\n        this._layers.push(layer);\\n      } else {\\n        this._layers.splice(layerIndex, 0, layer);\\n      }\\n\\n      return layerIndex;\\n    }\\n    /**\\r\\n     * Update the name of a layer. Names must be unique, if the new name is not\\r\\n     * unique it will have trailing numbers appended until it is unique.\\r\\n     *\\r\\n     * @param {string} currentName - Current name of the layer.\\r\\n     * @param {string} newName - New name to set on the layer.\\r\\n     *\\r\\n     * @returns {string} The new name of the layer\\r\\n     */\\n\\n  }, {\\n    key: "renameLayer",\\n    value: function renameLayer(currentName, newName) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[currentName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot rename layer ".concat(currentName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      } // Make sure the layer name is unique\\n\\n\\n      var name = core_Utils.getUniqueName(newName, Object.keys(this._layerMap));\\n\\n      if (name !== newName) {\\n        console.warn("Layer name ".concat(newName, " is not unique. Layer will be renamed to ").concat(name, "."));\\n      }\\n\\n      delete this._layerMap[currentName];\\n      this._layerMap[name] = layer;\\n      layer.name = name; // Notify that a layer has been renamed on the feature\\n\\n      this.emit(this.constructor.EVENTS.renameLayer, {\\n        oldName: currentName,\\n        newName: name\\n      });\\n      return name;\\n    }\\n    /**\\r\\n     * Return the weight of an animation layer.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to return weight from.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getLayerWeight",\\n    value: function getLayerWeight(name) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot get weight on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.weight;\\n    }\\n    /**\\r\\n     * Update the weight of an animation layer.\\r\\n     *\\r\\n     * @param {string} name - The name of the layer to update.\\r\\n     * @param {number} weight - The weight value to set on the layer. This number\\r\\n     * should be in the 0-1 range.\\r\\n     * @param {number=} seconds - The number of seconds it should take to reach the\\r\\n     * new weight. Default is zero and will set immediately.\\r\\n     * @param {Function=} easingFn - The easing function to use while interpolating\\r\\n     * the weight. Default is Easing.Linear.InOut.\\r\\n     *\\r\\n     * @returns {Deferred} A promise that will resolve once the layer\\\'s weight reaches\\r\\n     * the target value.\\r\\n     */\\n\\n  }, {\\n    key: "setLayerWeight",\\n    value: function setLayerWeight(name, weight, seconds, easingFn) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot set weight on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      }\\n\\n      return layer.setWeight(weight, seconds, easingFn);\\n    }\\n    /**\\r\\n     * Returns the names of blend states in an animation in a layer.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer containing the animation containing\\r\\n     * the blend state to update.\\r\\n     * @param {string} animationName - Name of the animation containing the blend state\\r\\n     * to update.\\r\\n     *\\r\\n     * @returns {Array.<string>} - Names of blend states.\\r\\n     */\\n\\n  }, {\\n    key: "getAnimationBlendNames",\\n    value: function getAnimationBlendNames(layerName, animationName) {\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot get blend names on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.getAnimationBlendNames(animationName);\\n    }\\n    /**\\r\\n     * Update the weight for a blend state in an animation in a layer.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer containing the animation containing\\r\\n     * the blend state to update.\\r\\n     * @param {string} animationName - Name of the animation containing the blend state\\r\\n     * to update.\\r\\n     * @param {string} blendName - Name of the blend state to update.\\r\\n     * @param {number} weight - Weight value to set on the animation. This number shoudld be\\r\\n     * in the 0-1 range.\\r\\n     * @param {number=} seconds - Number of seconds it should take to reach the new weight.\\r\\n     * Default is zero and will set immediately.\\r\\n     * @param {Function=} easingFn - Easing function to use while interpolating the new\\r\\n     * weight. Default is Easing.Linear.InOut.\\r\\n     *\\r\\n     * @returns {Deferred} - Promise that will resolve once the animation\\\'s weight reaches\\r\\n     * the target value.\\r\\n     */\\n\\n  }, {\\n    key: "setAnimationBlendWeight",\\n    value: function setAnimationBlendWeight(layerName, animationName, blendName, weight, seconds, easingFn) {\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot set blend weight on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      }\\n\\n      return layer.setAnimationBlendWeight(animationName, blendName, weight, seconds, easingFn);\\n    }\\n    /**\\r\\n     * Returns the weight for a blend state in an animation in a layer.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer containing the animation containing\\r\\n     * the blend state to update.\\r\\n     * @param {string} animationName - Name of the animation containing the blend state\\r\\n     * to update.\\r\\n     * @param {string} blendName - Name of the blend state to update.\\r\\n     *\\r\\n     * @returns {number} - Weight of the blend state.\\r\\n     */\\n\\n  }, {\\n    key: "getAnimationBlendWeight",\\n    value: function getAnimationBlendWeight(layerName, animationName, blendName) {\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot get blend weight on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.getAnimationBlendWeight(animationName, blendName);\\n    }\\n    /**\\r\\n     * Pause weight interpolation animation on a layer with the given name.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to pause.\\r\\n     *\\r\\n     * @returns {boolean} - Whether or not there was an existing interpolation to pause.\\r\\n     */\\n\\n  }, {\\n    key: "pauseLayerWeight",\\n    value: function pauseLayerWeight(name) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot pause weight interpolation on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.pauseWeight();\\n    }\\n    /**\\r\\n     * Resume weight interpolation animation on a layer with the given name.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to resume.\\r\\n     *\\r\\n     * @returns {Deferred} - Resolves once the layer\\\'s weight reaches its target value.\\r\\n     */\\n\\n  }, {\\n    key: "resumeLayerWeight",\\n    value: function resumeLayerWeight(name) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot resume weight interpolation on layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      }\\n\\n      return layer.resumeWeight();\\n    }\\n    /**\\r\\n     * Pause current animation and weight interpolation animation on a layer with\\r\\n     * the given name.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to pause.\\r\\n     *\\r\\n     * @returns {boolean} - Whether or not there was an existing interpolation or\\r\\n     * current animation to pause.\\r\\n     */\\n\\n  }, {\\n    key: "pauseLayer",\\n    value: function pauseLayer(name) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot pause layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.pause();\\n    }\\n    /**\\r\\n     * Resume current animation and weight interpolation animation on a layer with\\r\\n     * the given name.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to resume.\\r\\n     *\\r\\n     * @returns {Deferred} - Resolves once the layer\\\'s weight reaches its target value\\r\\n     * and it\\\'s current animation finishes playing.\\r\\n     */\\n\\n  }, {\\n    key: "resumeLayer",\\n    value: function resumeLayer(name) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot resume layer ".concat(name, " from host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      }\\n\\n      return layer.resume();\\n    }\\n    /**\\r\\n     * Return whether or not the animation layer with the given name is currently\\r\\n     * transitioning between animations.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to check.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "getTransitioning",\\n    value: function getTransitioning(layerName) {\\n      // Make sure the layerName is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Get transitioning on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.isTransitioning;\\n    }\\n    /**\\r\\n     * Return an array of the names of all states the layer with the given name controls.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to search.\\r\\n     *\\r\\n     * @returns {Array.<string>}\\r\\n     */\\n\\n  }, {\\n    key: "getAnimations",\\n    value: function getAnimations(layerName) {\\n      // Make sure the layerName is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Get animations on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.getStateNames();\\n    }\\n    /**\\r\\n     * Return the name of the state currently active on the layer with the given name.\\r\\n     * Return null if there is no current animation for the layer.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer.\\r\\n     *\\r\\n     * @returns {(string|null)}\\r\\n     */\\n\\n  }, {\\n    key: "getCurrentAnimation",\\n    value: function getCurrentAnimation(layerName) {\\n      // Make sure the layerName is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Get current animation on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.currentAnimation;\\n    }\\n    /**\\r\\n     * Return whether or not a layer with the given name is currently playing an\\r\\n     * animation and that animation is paused.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "getPaused",\\n    value: function getPaused(layerName) {\\n      // Make sure the layerName is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Get paused on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      return layer.currentState && layer.currentState.paused;\\n    }\\n    /**\\r\\n     * Return the type name of the given animation. @see AnimationTypes.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the animation.\\r\\n     * @param {string} animationName - Name of the animation to check.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "getAnimationType",\\n    value: function getAnimationType(layerName, animationName) {\\n      // Make sure the layerName is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Get animation type on layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      var state = layer.getState(animationName);\\n\\n      if (state === undefined) {\\n        throw new Error("Get animation type for animation ".concat(animationName, " on layer ").concat(layerName, " from host ").concat(this._host.id, ". No animation exists with this name."));\\n      }\\n\\n      var constructor = state.constructor;\\n      return Object.keys(AnimationTypes).find(function (typeName) {\\n        return AnimationTypes[typeName] === constructor;\\n      });\\n    }\\n    /**\\r\\n     * Add a new animation to an animation layer.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to add the animation to.\\r\\n     * @param {string} animationName - Name to use when calling the animation.\\r\\n     * @param {Object=} options - Options to pass to the constructor for the new\\r\\n     * SingleState animation.\\r\\n     *\\r\\n     * @returns {string} - The name of the animation that was added\\r\\n     */\\n\\n  }, {\\n    key: "addAnimation",\\n    value: function addAnimation(layerName, animationName) {\\n      var animationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnimationTypes.single;\\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\\n      options.name = this._validateNewAnimation(layerName, animationName); // Make sure the animation type is valid\\n\\n      if (!Object.values(AnimationTypes).includes(animationType)) {\\n        throw new Error("Cannot add animation ".concat(animationName, " to layer ").concat(layerName, " on host ").concat(this._host.id, ". Invalid animation type."));\\n      }\\n\\n      var layer = this._layerMap[layerName];\\n      options.blendMode = layer.blendMode;\\n      options.transitionTime = layer.transitionTime;\\n      var state = this["_create".concat(animationType.name)](options);\\n      var name = layer.addState(state); // Notify that an animation has been added to the feature\\n\\n      this.emit(this.constructor.EVENTS.addAnimation, {\\n        layerName: layerName,\\n        animationName: name\\n      });\\n      return name;\\n    }\\n    /**\\r\\n     * Remove an animation from an animation layer.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to remove the animation from.\\r\\n     * @param {string} name - Name of the animation to remove.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "removeAnimation",\\n    value: function removeAnimation(layerName, animationName) {\\n      // Make sure the name is valid\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot remove animation from layer ".concat(layerName, " from host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      var removed = layer.removeState(animationName); // Notify that an animation has been removed from the feature\\n\\n      if (removed === true) {\\n        this.emit(this.constructor.EVENTS.removeAnimation, {\\n          layerName: layerName,\\n          animationName: animationName\\n        });\\n      }\\n\\n      return removed;\\n    }\\n    /**\\r\\n     * Update the name of an animation. Names must be unique on each layer, if the new\\r\\n     * name is not unique it will have trailing numbers appended until it is unique.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the animation that\\r\\n     * will be renamed,\\r\\n     * @param {string} currentAnimationName - Current name of the animation.\\r\\n     * @param {string} newAnimationName - New name to set on the animation.\\r\\n     *\\r\\n     * @returns {string} - The new name of the animation\\r\\n     */\\n\\n  }, {\\n    key: "renameAnimation",\\n    value: function renameAnimation(layerName, currentAnimationName, newAnimationName) {\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        throw new Error("Cannot rename animation ".concat(currentAnimationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name."));\\n      }\\n\\n      var name = layer.renameState(currentAnimationName, newAnimationName); // Notify that an animation has been renamed on the feature\\n\\n      this.emit(this.constructor.EVENTS.renameAnimation, {\\n        layerName: layerName,\\n        oldName: currentAnimationName,\\n        newName: name\\n      });\\n      return name;\\n    }\\n    /**\\r\\n     * Pause the currently playing animation and play a new animation from the beginning.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the animation.\\r\\n     * @param {string} animationName - Name of the animation state to play.\\r\\n     * @param {number=} seconds - The number of seconds it should take to transition\\r\\n     * to the new animation. Default is zero and will set immediately.\\r\\n     * @param {Function=} easingFn - The easing function to use while transitioning\\r\\n     * between animations. Default is Easing.Linear.InOut.\\r\\n     *\\r\\n     * @returns {Deferred} - Resolves once the animation reaches the end of its\\r\\n     * timeline. Looping animations can only resolve if they are interrupted or\\r\\n     * manually stopped.\\r\\n     */\\n\\n  }, {\\n    key: "playAnimation",\\n    value: function playAnimation(layerName, animationName, seconds, easingFn) {\\n      var _this7 = this;\\n\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot play animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      } // Notify that a new animation has begun\\n\\n\\n      this.emit(this.constructor.EVENTS.playAnimation, {\\n        layerName: layerName,\\n        animationName: animationName\\n      });\\n      return layer.playAnimation(animationName, seconds, easingFn, function () {\\n        // Notify that an animation has stopped\\n        _this7.emit(_this7.constructor.EVENTS.stopAnimation, {\\n          layerName: layerName,\\n          animationName: animationName\\n        });\\n      }, undefined, function () {\\n        // Notify that an animation has been interrupted\\n        _this7.emit(_this7.constructor.EVENTS.interruptAnimation, {\\n          layerName: layerName,\\n          animationName: animationName\\n        });\\n      }, function (_ref) {\\n        var name = _ref.name,\\n            canAdvance = _ref.canAdvance,\\n            isQueueEnd = _ref.isQueueEnd;\\n\\n        if (layer.currentAnimation === animationName) {\\n          // Notify that a new animation has begun\\n          _this7.emit(_this7.constructor.EVENTS.playNextAnimation, {\\n            layerName: layerName,\\n            animationName: animationName,\\n            nextQueuedAnimation: name,\\n            canAdvance: canAdvance,\\n            isQueueEnd: isQueueEnd\\n          });\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Play the next animation in the queue of a QueueState animation.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the queue animation.\\r\\n     * @param {string=} animationName - Name of the animation queue animation. Defaults\\r\\n     * to the name of the current animation for the layer.\\r\\n     * @param {number=} seconds - The number of seconds it should take to transition\\r\\n     * to the queue animation if it\\\'s not already currently playing. Default is zero\\r\\n     * and will set immediately.\\r\\n     * @param {Function=} easingFn - The easing function to use while transitioning\\r\\n     * to the queue animation if it isn\\\'t already playing. Default is Easing.Linear.InOut.\\r\\n     *\\r\\n     * @returns {Deferred} - Resolves once the last animation in the queue finishes\\r\\n     * playing.\\r\\n     */\\n\\n  }, {\\n    key: "playNextAnimation",\\n    value: function playNextAnimation(layerName, animationName, transitionTime, easingFn) {\\n      var _this8 = this;\\n\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot play next animation on layer ".concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      }\\n\\n      if (animationName === undefined) {\\n        animationName = layer.currentAnimation;\\n      }\\n\\n      var animation = layer.getState(layer.currentAnimation);\\n\\n      if (animation === null) {\\n        var _e = "Cannot play next animation on layer ".concat(layerName, " for host ").concat(this._host.id, ". No animation exists with name ").concat(animationName, ".");\\n\\n        return core_Deferred.reject(_e);\\n      } else if (this.getAnimationType(layerName, animationName) !== \\\'queue\\\') {\\n        var _e2 = "Cannot play next animation on layer ".concat(layerName, " for host ").concat(this._host.id, ". ").concat(animationName, " is not a queue state.");\\n\\n        return core_Deferred.reject(_e2);\\n      }\\n\\n      var onNext = function onNext(_ref2) {\\n        var name = _ref2.name,\\n            canAdvance = _ref2.canAdvance,\\n            isQueueEnd = _ref2.isQueueEnd;\\n\\n        if (layer.currentAnimation === animationName) {\\n          // Notify that a new animation has begun\\n          _this8.emit(_this8.constructor.EVENTS.playNextAnimation, {\\n            layerName: layerName,\\n            animationName: animationName,\\n            nextQueuedAnimation: name,\\n            canAdvance: canAdvance,\\n            isQueueEnd: isQueueEnd\\n          });\\n        }\\n      }; // Make the queue animation current if it wasn\\\'t already\\n\\n\\n      if (layer.currentAnimation === null) {\\n        layer.resumeAnimation(animation.name, transitionTime, easingFn, undefined, undefined, undefined, onNext);\\n      }\\n\\n      return animation.next(onNext, true);\\n    }\\n    /**\\r\\n     * Pause the current animation on a layer.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer to pause.\\r\\n     *\\r\\n     * @returns {boolean} Whether or not an animation was successfully paused.\\r\\n     */\\n\\n  }, {\\n    key: "pauseAnimation",\\n    value: function pauseAnimation(name) {\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        console.warn("Did not pause animation on layer ".concat(name, " for host ").concat(this._host.id, ". No layer exists with this name."));\\n        return false;\\n      }\\n\\n      var paused = layer.pauseAnimation(); // Notify that an animation was paused\\n\\n      if (paused) {\\n        var animationName = layer.currentAnimation;\\n        this.emit(this.constructor.EVENTS.pauseAnimation, {\\n          layerName: name,\\n          animationName: animationName\\n        });\\n      }\\n\\n      return paused;\\n    }\\n    /**\\r\\n     * Pause the currently playing animation and play a new animation from where it\\r\\n     * last left off.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the animation.\\r\\n     * @param {string=} animationName - Name of the animation state to resume. Defaults\\r\\n     * to the name of the current animation for the layer.\\r\\n     * @param {number=} seconds - The number of seconds it should take to transition\\r\\n     * to the new animation. Default is zero and will set immediately.\\r\\n     * @param {Function=} easingFn - The easing function to use while transitioning\\r\\n     * between animations. Default is Easing.Linear.InOut.\\r\\n     *\\r\\n     * @returns {Deferred} - Resolves once the animation reaches the end of its\\r\\n     * timeline. Looping animations can only resolve if they are interrupted or\\r\\n     * manually stopped.\\r\\n     */\\n\\n  }, {\\n    key: "resumeAnimation",\\n    value: function resumeAnimation(layerName, animationName, seconds, easingFn) {\\n      var _this9 = this;\\n\\n      var layer = this._layerMap[layerName];\\n\\n      if (layer === undefined) {\\n        var e = "Cannot resume animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". No layer exists with this name.");\\n        return core_Deferred.reject(e);\\n      } // Notify that an animation was resumed\\n\\n\\n      this.emit(this.constructor.EVENTS.resumeAnimation, {\\n        layerName: layerName,\\n        animationName: animationName\\n      });\\n      return layer.resumeAnimation(animationName, seconds, easingFn, function () {\\n        // Notify that an animation has stopped\\n        _this9.emit(_this9.constructor.EVENTS.stopAnimation, {\\n          layerName: layerName,\\n          animationName: animationName\\n        });\\n      }, undefined, function () {\\n        // Notify that an animation has been interrupted\\n        _this9.emit(_this9.constructor.EVENTS.interruptAnimation, {\\n          layerName: layerName,\\n          animationName: animationName\\n        });\\n      }, function (_ref3) {\\n        var name = _ref3.name,\\n            canAdvance = _ref3.canAdvance,\\n            isQueueEnd = _ref3.isQueueEnd;\\n\\n        if (layer.currentAnimation === animationName) {\\n          // Notify that a new animation has begun\\n          _this9.emit(_this9.constructor.EVENTS.playNextAnimation, {\\n            layerName: layerName,\\n            animationName: animationName,\\n            nextQueuedAnimation: name,\\n            canAdvance: canAdvance,\\n            isQueueEnd: isQueueEnd\\n          });\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Stop the current animation on a layer. Stop rewinds the animation to the\\r\\n     * beginning and prevents it from progressing forward.\\r\\n     *\\r\\n     * @param {string} name - Name of the layer that contains the animation.\\r\\n     *\\r\\n     * @returns {boolean} Whether or not an animation was successfully stopped.\\r\\n     */\\n\\n  }, {\\n    key: "stopAnimation",\\n    value: function stopAnimation(name) {\\n      var layer = this._layerMap[name];\\n\\n      if (layer === undefined) {\\n        console.warn("Did not stop animation on layer ".concat(name, " for host ").concat(this._host.id, ". No layer exists with this name."));\\n        return false;\\n      }\\n\\n      return layer.stopAnimation();\\n    }\\n    /**\\r\\n     * Pause current animation and weight interpolation animation on all layers.\\r\\n       * @returns {boolean} - Whether or not there was an existing interpolation or\\r\\n     * current animations to pause.\\r\\n     */\\n\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      this._paused = true;\\n      var paused = false;\\n\\n      this._layers.forEach(function (l) {\\n        if (l.pause()) {\\n          paused = true;\\n        }\\n      });\\n\\n      return paused;\\n    }\\n    /**\\r\\n     * Resume current animation and weight interpolation animation on all layers.\\r\\n       * @returns {boolean} - Whether or not there was an existing interpolation or\\r\\n     * current animations to resume.\\r\\n     */\\n\\n  }, {\\n    key: "resume",\\n    value: function resume() {\\n      this._paused = false;\\n      var resumed = false;\\n\\n      this._layers.forEach(function (l) {\\n        if (l.resume()) {\\n          resumed = true;\\n        }\\n      });\\n\\n      return resumed;\\n    }\\n    /**\\r\\n     * Adds a namespace to the host with the name of the feature to contain properties\\r\\n     * and methods from the feature that users of the host need access to.\\r\\n     *\\r\\n     * @see AnimationFeature\\r\\n     */\\n\\n  }, {\\n    key: "installApi",\\n    value: function installApi() {\\n      var _this10 = this;\\n\\n      /**\\r\\n       * @inner\\r\\n       * @namespace AnimationFeature\\r\\n       */\\n      var api = AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "installApi", this).call(this);\\n\\n      Object.defineProperties(api, {\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @see core/AnimationFeature#paused\\r\\n         */\\n        paused: {\\n          get: function get() {\\n            return _this10.paused;\\n          }\\n        },\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @see core/AnimationFeature#layers\\r\\n         */\\n        layers: {\\n          get: function get() {\\n            return _this10.layers;\\n          }\\n        }\\n      });\\n      Object.assign(api, {\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#addLayer\\r\\n         */\\n        addLayer: this.addLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#removeLayer\\r\\n         */\\n        removeLayer: this.removeLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#moveLayer\\r\\n         */\\n        moveLayer: this.moveLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#renameLayer\\r\\n         */\\n        renameLayer: this.renameLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getLayerWeight\\r\\n         */\\n        getLayerWeight: this.getLayerWeight.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#setLayerWeight\\r\\n         */\\n        setLayerWeight: this.setLayerWeight.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#pauseLayerWeight\\r\\n         */\\n        pauseLayerWeight: this.pauseLayerWeight.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#resumeLayerWeight\\r\\n         */\\n        resumeLayerWeight: this.resumeLayerWeight.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#pauseLayer\\r\\n         */\\n        pauseLayer: this.pauseLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#resumeLayer\\r\\n         */\\n        resumeLayer: this.resumeLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getTransitioning\\r\\n         */\\n        getTransitioning: this.getTransitioning.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getAnimations\\r\\n         */\\n        getAnimations: this.getAnimations.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getCurrentAnimation\\r\\n         */\\n        getCurrentAnimation: this.getCurrentAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getPaused\\r\\n         */\\n        getPaused: this.getPaused.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getAnimationType\\r\\n         */\\n        getAnimationType: this.getAnimationType.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#addAnimation\\r\\n         */\\n        addAnimation: this.addAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#removeAnimation\\r\\n         */\\n        removeAnimation: this.removeAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#renameAnimation\\r\\n         */\\n        renameAnimation: this.renameAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getAnimationBlendNames\\r\\n         */\\n        getAnimationBlendNames: this.getAnimationBlendNames.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#getAnimationBlendWeight\\r\\n         */\\n        getAnimationBlendWeight: this.getAnimationBlendWeight.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#setAnimationBlendWeight\\r\\n         */\\n        setAnimationBlendWeight: this.setAnimationBlendWeight.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#playAnimation\\r\\n         */\\n        playAnimation: this.playAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#playNextAnimation\\r\\n         */\\n        playNextAnimation: this.playNextAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#pauseAnimation\\r\\n         */\\n        pauseAnimation: this.pauseAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#resumeAnimation\\r\\n         */\\n        resumeAnimation: this.resumeAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#stopAnimation\\r\\n         */\\n        stopAnimation: this.stopAnimation.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#pause\\r\\n         */\\n        pause: this.pause.bind(this),\\n\\n        /**\\r\\n         * @memberof AnimationFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/AnimationFeature#resume\\r\\n         */\\n        resume: this.resume.bind(this)\\n      });\\n    }\\n    /**\\r\\n     * Update each animation layer.\\r\\n     *\\r\\n     * @param {number} deltaTime - Time since the last update.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      if (!this._layers.length) {\\n        return;\\n      }\\n\\n      if (this._paused) {\\n        deltaTime = 0;\\n      } // Re-evaluate internal weights for layers\\n\\n\\n      this._updateInternalWeights(); // Update layers\\n\\n\\n      this._layers.forEach(function (layer) {\\n        layer.update(deltaTime);\\n      });\\n\\n      AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "update", this).call(this, deltaTime);\\n    }\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      this._layers.forEach(function (layer) {\\n        layer.discard();\\n      });\\n\\n      delete this._layers;\\n      delete this._layerMap;\\n\\n      AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "discard", this).call(this);\\n    }\\n  }]);\\n\\n  return AnimationFeature;\\n}(core_AbstractHostFeature);\\n\\nObject.defineProperty(AnimationFeature, \\\'EVENTS\\\', {\\n  value: AnimationFeature_objectSpread(AnimationFeature_objectSpread({}, Object.getPrototypeOf(core_AbstractHostFeature).EVENTS), {}, {\\n    addLayer: \\\'onAddLayerEvent\\\',\\n    removeLayer: \\\'onRemoveLayerEvent\\\',\\n    renameLayer: \\\'onRenameLayerEvent\\\',\\n    addAnimation: \\\'onAddAnimationEvent\\\',\\n    removeAnimation: \\\'onRemovedAnimationEvent\\\',\\n    renameAnimation: \\\'onRenameAnimationEvent\\\',\\n    playAnimation: \\\'onPlayEvent\\\',\\n    playNextAnimation: \\\'onNextEvent\\\',\\n    pauseAnimation: \\\'onPauseEvent\\\',\\n    resumeAnimation: \\\'onResumeEvent\\\',\\n    interruptAnimation: \\\'onInterruptEvent\\\',\\n    stopAnimation: \\\'onStopEvent\\\'\\n  })\\n});\\n/* harmony default export */ const animpack_AnimationFeature = (AnimationFeature);\\n;// CONCATENATED MODULE: ./src/core/PointOfInterestFeature.js\\nfunction PointOfInterestFeature_typeof(obj) { "@babel/helpers - typeof"; return PointOfInterestFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PointOfInterestFeature_typeof(obj); }\\n\\nfunction PointOfInterestFeature_slicedToArray(arr, i) { return PointOfInterestFeature_arrayWithHoles(arr) || PointOfInterestFeature_iterableToArrayLimit(arr, i) || PointOfInterestFeature_unsupportedIterableToArray(arr, i) || PointOfInterestFeature_nonIterableRest(); }\\n\\nfunction PointOfInterestFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction PointOfInterestFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction PointOfInterestFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction PointOfInterestFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction PointOfInterestFeature_toConsumableArray(arr) { return PointOfInterestFeature_arrayWithoutHoles(arr) || PointOfInterestFeature_iterableToArray(arr) || PointOfInterestFeature_unsupportedIterableToArray(arr) || PointOfInterestFeature_nonIterableSpread(); }\\n\\nfunction PointOfInterestFeature_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction PointOfInterestFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PointOfInterestFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PointOfInterestFeature_arrayLikeToArray(o, minLen); }\\n\\nfunction PointOfInterestFeature_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction PointOfInterestFeature_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return PointOfInterestFeature_arrayLikeToArray(arr); }\\n\\nfunction PointOfInterestFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction PointOfInterestFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction PointOfInterestFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction PointOfInterestFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) PointOfInterestFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) PointOfInterestFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction PointOfInterestFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { PointOfInterestFeature_get = Reflect.get; } else { PointOfInterestFeature_get = function _get(target, property, receiver) { var base = PointOfInterestFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return PointOfInterestFeature_get.apply(this, arguments); }\\n\\nfunction PointOfInterestFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PointOfInterestFeature_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction PointOfInterestFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) PointOfInterestFeature_setPrototypeOf(subClass, superClass); }\\n\\nfunction PointOfInterestFeature_setPrototypeOf(o, p) { PointOfInterestFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PointOfInterestFeature_setPrototypeOf(o, p); }\\n\\nfunction PointOfInterestFeature_createSuper(Derived) { var hasNativeReflectConstruct = PointOfInterestFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = PointOfInterestFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = PointOfInterestFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return PointOfInterestFeature_possibleConstructorReturn(this, result); }; }\\n\\nfunction PointOfInterestFeature_possibleConstructorReturn(self, call) { if (call && (PointOfInterestFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return PointOfInterestFeature_assertThisInitialized(self); }\\n\\nfunction PointOfInterestFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction PointOfInterestFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction PointOfInterestFeature_getPrototypeOf(o) { PointOfInterestFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PointOfInterestFeature_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/* eslint-disable no-underscore-dangle */\\n\\n/* eslint-disable no-unused-vars */\\n\\n\\n\\n\\n\\n\\n\\n/**\\r\\n * Enum for axis directions.\\r\\n *\\r\\n * @readonly\\r\\n * @enum {Class}\\r\\n */\\n\\nvar AxisMap = {\\n  PositiveX: [1, 0, 0],\\n  NegativeX: [-1, 0, 0],\\n  PositiveY: [0, 1, 0],\\n  NegativeY: [0, -1, 0],\\n  PositiveZ: [0, 0, 1],\\n  NegativeZ: [0, 0, -1]\\n};\\nvar FaceTargetTypes = {\\n  EyeCenter: 0,\\n  EyeLeft: 1,\\n  EyeRight: 2,\\n  Mouth: 3\\n}; // Average distance between pupils is .064m, golden ratio says that the distance\\n// from center of the pupils to the center of the mouth should be about the same.\\n\\nvar FaceVectors = [[0, 0, 0], [-.032, 0, 0], [.032, 0, 0], [0, -.064, 0]]; // Time ranges to use when choosing a new random wait time between saccades\\n\\nvar MicroSaccadeWaitRanges = {\\n  "default": [0.8, 1.75],\\n  postMacro: [0.6, 1.3125]\\n};\\nvar MacroSaccadeWaitRanges = {\\n  "default": [5.0, 8.0],\\n  mouthTarget: [0.2, 0.75],\\n  // Look away from a mouth target the fastest\\n  eyeTarget: [1.5, 4.0]\\n}; // Minimum angle in degrees the eye direction must change to trigger a blink animation\\n\\nvar BlinkThreshold = 35; // Maximum number of milliseconds to use for calculating look speed\\n\\nvar MaxDelta = 100 / 3;\\n/**\\r\\n * PointOfInterest controls the gaze direction of the host. Given one or more\\r\\n * animations of type Blend2dState, it calculates the angles between the lookTracker\\r\\n * object (generally a joint in the host\\\'s skeleton) and the lookTarget (the object\\r\\n * the host should look at) and drives the managed Blend2dStates\\\' X and Y blend\\r\\n * values using the result. You can optionally add saccadic movement to any managed\\r\\n * animation to help make the host\\\'s eyes appear alive when focused on the same\\r\\n * point for exteded periods of time. If blink animations are specified, a blink\\r\\n * will be played during large changes in gaze direction.\\r\\n *\\r\\n * @extends AbstractHostFeature\\r\\n * @alias core/PointOfInterestFeature\\r\\n * @implements SSMLSpeechmarkInterface\\r\\n * @implements ManagedAnimationLayerInterface\\r\\n */\\n\\nvar PointOfInterestFeature = /*#__PURE__*/function (_AbstractHostFeature$) {\\n  PointOfInterestFeature_inherits(PointOfInterestFeature, _AbstractHostFeature$);\\n\\n  var _super = PointOfInterestFeature_createSuper(PointOfInterestFeature);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/HostObject} host - Host that owns the feature.\\r\\n   * @param {Object=} options - Options for the feature.\\r\\n   * @param {Object=} target - 3D transformation node that the host should try to\\r\\n   * look at.\\r\\n   * @param {Object} options.lookTracker - 3D transformation node that represents\\r\\n   * the direction the host is currently looking during animation.\\r\\n   * @param {Object=} options.scene - Engine-specific scene object that contains\\r\\n   * the host. This object must be defined if using \\\'setTargetByName\\\' or \\\'SetTargetById\\\'\\r\\n   * methods.\\r\\n   * @param {Object=} lookOptions - Options for the look animation layers.\\r\\n   * @param {number} [lookOptions.blendTime=0.1] - Default amount of time it will\\r\\n   * take to manipulate the weights of the look layers.\\r\\n   * @param {number} [lookOptions.easingFn=Quadratic.InOut] - Default easing function\\r\\n   * to use when manipulating look layer weights.\\r\\n   * @param {Array.<Object>} [lookOptions.layers=[]] - An array of layer options\\r\\n   * objects to register as look layers.\\r\\n   * @param {Object=} blinkOptions - Options for the blink animation layers.\\r\\n   * @param {number} [blinkOptions.blendTime=0.075] - Default amount of time it\\r\\n   * will take to manipulate the weights of the blink layers.\\r\\n   * @param {number} [blinkOptions.easingFn=Quadratic.InOut] - Default easing function\\r\\n   * to use when manipulating blink layer weights.\\r\\n   * @param {Array.<Object>} [blinkOptions.layers=[]] - An array of layer options\\r\\n   * objects to register as blink layers.\\r\\n   */\\n  function PointOfInterestFeature(host) {\\n    var _this;\\n\\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n        target = _ref.target,\\n        lookTracker = _ref.lookTracker,\\n        scene = _ref.scene;\\n\\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\\n        _ref2$blendTime = _ref2.blendTime,\\n        lookBlendTime = _ref2$blendTime === void 0 ? 0.1 : _ref2$blendTime,\\n        _ref2$easingFn = _ref2.easingFn,\\n        lookEasingFn = _ref2$easingFn === void 0 ? Quadratic.InOut : _ref2$easingFn,\\n        _ref2$layers = _ref2.layers,\\n        lookLayers = _ref2$layers === void 0 ? [] : _ref2$layers;\\n\\n    var _ref3 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\\n        _ref3$blendTime = _ref3.blendTime,\\n        blinkBlendTime = _ref3$blendTime === void 0 ? 0.075 : _ref3$blendTime,\\n        _ref3$easingFn = _ref3.easingFn,\\n        blinkEasingFn = _ref3$easingFn === void 0 ? Quadratic.InOut : _ref3$easingFn,\\n        _ref3$layers = _ref3.layers,\\n        blinkLayers = _ref3$layers === void 0 ? [] : _ref3$layers;\\n\\n    PointOfInterestFeature_classCallCheck(this, PointOfInterestFeature);\\n\\n    _this = _super.call(this, host);\\n\\n    if (!_this.constructor._validateTransformObject(lookTracker)) {\\n      throw new Error("Cannot initialize PointOfInterestFeature on host ".concat(_this._host.id, ". LookTracker must be defined as a valid transformation object."));\\n    }\\n\\n    _this._lookTracker = lookTracker;\\n    _this._scene = scene;\\n    _this._target = target || null;\\n    _this._prevTargetPos = [0, 0, 0];\\n    _this._isTargetMoving = false;\\n    _this._lookLayers = _this._lookLayers || {};\\n    _this._trackingConfigs = _this._trackingConfigs || [];\\n    _this._blinkLayers = _this._blinkLayers || {}; // Register the look layers\\n\\n    lookLayers.forEach(function (_ref4) {\\n      var name = _ref4.name,\\n          animation = _ref4.animation,\\n          maxSpeed = _ref4.maxSpeed,\\n          reference = _ref4.reference,\\n          forwardAxis = _ref4.forwardAxis,\\n          hasSaccade = _ref4.hasSaccade,\\n          blendTime = _ref4.blendTime,\\n          easingFn = _ref4.easingFn;\\n\\n      _this.registerLookLayer(name, {\\n        animation: animation,\\n        maxSpeed: maxSpeed,\\n        reference: reference,\\n        forwardAxis: forwardAxis,\\n        hasSaccade: hasSaccade,\\n        blendTime: blendTime !== undefined ? blendTime : lookBlendTime,\\n        easingFn: easingFn !== undefined ? easingFn : lookEasingFn\\n      });\\n    }); // Register the blink layers\\n\\n    blinkLayers.forEach(function (_ref5) {\\n      var name = _ref5.name,\\n          animation = _ref5.animation,\\n          blendTime = _ref5.blendTime,\\n          easingFn = _ref5.easingFn;\\n\\n      _this.registerBlinkLayer(name, {\\n        animation: animation,\\n        blendTime: blendTime !== undefined ? blendTime : blinkBlendTime,\\n        easingFn: easingFn !== undefined ? easingFn : blinkEasingFn\\n      });\\n    });\\n    return _this;\\n  }\\n  /**\\r\\n   * Gets and sets the target object the host should look at.\\r\\n   *\\r\\n   * @type {Object|null}\\r\\n   */\\n\\n\\n  PointOfInterestFeature_createClass(PointOfInterestFeature, [{\\n    key: "target",\\n    get: function get() {\\n      return this._target;\\n    },\\n    set: function set(target) {\\n      this._target = target || null;\\n    }\\n    /**\\r\\n     * Return a vector representing the global position of an object. Should be\\r\\n     * overloaded for each rendering engine implementation.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {any} _obj - Engine-specific 3D transform object.\\r\\n     *\\r\\n     * @returns {Array.<number>} - An array consisting of three numbers representing\\r\\n     * x, y and z coordinates.\\r\\n     */\\n\\n  }, {\\n    key: "_onLayerAdded",\\n    value: function _onLayerAdded(_ref6) {\\n      var name = _ref6.name;\\n      this._lookLayers = this._lookLayers || {};\\n      this._blinkLayers = this._blinkLayers || {};\\n\\n      PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "_onLayerAdded", this).call(this, {\\n        name: name\\n      }); // Validate the look animation\\n\\n\\n      if (this._lookLayers[name] !== undefined) {\\n        this._registerLookAnimation(name, this._lookLayers[name]);\\n      }\\n    }\\n  }, {\\n    key: "_onAnimationAdded",\\n    value: function _onAnimationAdded(_ref7) {\\n      var layerName = _ref7.layerName,\\n          animationName = _ref7.animationName;\\n      this._lookLayers = this._lookLayers || {};\\n      this._blinkLayers = this._blinkLayers || {};\\n\\n      PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "_onAnimationAdded", this).call(this, {\\n        layerName: layerName\\n      }); // Validate the look animation\\n\\n\\n      if (this._lookLayers[layerName] === animationName) {\\n        this._registerLookAnimation(layerName, animationName);\\n      }\\n    }\\n    /**\\r\\n     * Ensure that registered look animations are Blend2dStates.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that contains the look animation.\\r\\n     * @param {string} animationName - Name of the animation.\\r\\n     */\\n\\n  }, {\\n    key: "_registerLookAnimation",\\n    value: function _registerLookAnimation(layerName, animationName) {\\n      if (this._managedLayers[layerName].animations[animationName].isActive) {\\n        if (AnimationTypes[this._host.AnimationFeature.getAnimationType(layerName, animationName)] !== AnimationTypes.blend2d) {\\n          // Warn and deactivate if the registered state is not blend2d\\n          console.warn("Cannot register Point of Interest look animation ".concat(animationName, " on layer ").concat(layerName, " for host ").concat(this._host.id, ". Look animations must be of type \\\'blend2d\\\'."));\\n          this._managedLayers[layerName].animations[animationName].isActive = false;\\n        }\\n      }\\n    }\\n    /**\\r\\n     * Check if the given object is not of an engine-specific type. Should\\r\\n     * be overloaded for each rendering engine implementation.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {any} obj - Object to validate.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "_addTrackingConfig",\\n    value:\\n    /**\\r\\n     * Check if the given configuration object has already been stored as a tracking\\r\\n     * config. If it has, return the stored configuration. Otherwise, store and\\r\\n     * return it.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} config - Object containing tracker, reference and forwardAxis\\r\\n     * properties.\\r\\n     *\\r\\n     * @returns {Object}\\r\\n     */\\n    function _addTrackingConfig(config) {\\n      var trackingConfig = this._trackingConfigs.find(function (c) {\\n        return c.reference === config.reference && c.forwardAxis === config.forwardAxis;\\n      });\\n\\n      if (trackingConfig) {\\n        return trackingConfig;\\n      } else {\\n        config.angles = {\\n          h: 0,\\n          v: 0\\n        };\\n        config.prevAngles = {\\n          h: 0,\\n          v: 0\\n        };\\n\\n        this._trackingConfigs.push(config);\\n\\n        return config;\\n      }\\n    }\\n    /**\\r\\n     * Return the distance between the look tracker and the look target.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "_getTargetDistance",\\n    value: function _getTargetDistance() {\\n      // Find the vector between the global positions of tracker and target\\n      var sourcePosition = this.constructor._getWorldPosition(this._lookTracker);\\n\\n      var targetPosition = this.constructor._getWorldPosition(this._target);\\n\\n      var lookVector = [targetPosition[0] - sourcePosition[0], targetPosition[1] - sourcePosition[1], targetPosition[2] - sourcePosition[2]];\\n      return core_MathUtils.getVectorMagnitude(lookVector);\\n    }\\n    /**\\r\\n     * Reset all stored tracking angles to 0.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_resetLookAngles",\\n    value: function _resetLookAngles() {\\n      this._trackingConfigs.forEach(function (_ref8) {\\n        var angles = _ref8.angles;\\n        angles.h = 0;\\n        angles.v = 0;\\n      });\\n    }\\n    /**\\r\\n     * Store the difference in horizontal and vertical rotation for the tracker\\\'s\\r\\n     * reference rotation and the direction of the target from the tracker.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_setLookAngles",\\n    value: function _setLookAngles() {\\n      var _this2 = this;\\n\\n      // Get the current positions of the tracker and target objects\\n      var targetPos = this.constructor._getWorldPosition(this._target);\\n\\n      var trackerPos = this.constructor._getWorldPosition(this._lookTracker); // Check if the target has moved\\n\\n\\n      this._isTargetMoving = core_MathUtils.getVectorMagnitude([targetPos[0] - this._prevTargetPos[0], targetPos[1] - this._prevTargetPos[1], targetPos[2] - this._prevTargetPos[2]]) > 0;\\n      Object.assign(this._prevTargetPos, targetPos); // Calculate the horizontal and vertical angles to rotate to the target\\n\\n      var targetSpherical = core_MathUtils.cartesianToSpherical(targetPos[0] - trackerPos[0], targetPos[1] - trackerPos[1], targetPos[2] - trackerPos[2]);\\n\\n      var targetAngles = this.constructor._sphericalToBlendValue(targetSpherical[1], targetSpherical[2]); // Calculate angles relative to the reference objects\\n\\n\\n      this._trackingConfigs.forEach(function (_ref9) {\\n        var reference = _ref9.reference,\\n            forwardAxis = _ref9.forwardAxis,\\n            angles = _ref9.angles;\\n\\n        // Calculate the horizontal and vertical angles to rotate to the direction of the tracker\\n        var refDirection = _this2.constructor._getObjectDirection(reference, forwardAxis);\\n\\n        var refSpherical = core_MathUtils.cartesianToSpherical.apply(core_MathUtils, PointOfInterestFeature_toConsumableArray(refDirection));\\n\\n        var refAngles = _this2.constructor._sphericalToBlendValue(refSpherical[1], refSpherical[2]); // Store the difference\\n\\n\\n        angles.h = targetAngles.h - refAngles.h;\\n        angles.v = targetAngles.v - refAngles.v;\\n      });\\n    }\\n    /**\\r\\n     * Return the horizontal and vertical angles it would require to simulate looking\\r\\n     * at the given type of face target\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {number} targetType - Integer representing the FaceTargetType.\\r\\n     *\\r\\n     * @returns {Object}- An object with signature {r: number, h: number, v: number}\\r\\n     * where \\\'r\\\' represents radius, h represents the horizontal/azimuthal angle and\\r\\n     * v represents the vertical/polar angle.\\r\\n     */\\n\\n  }, {\\n    key: "_getFaceTargetAngles",\\n    value: function _getFaceTargetAngles(targetType) {\\n      // No offset when the target is the center of the eyes\\n      if (targetType === 0) {\\n        return {\\n          h: 0,\\n          v: 0\\n        };\\n      } // Build a vector to the face target type using the current distance to the target\\n\\n\\n      var distance = this._getTargetDistance(this._lookTracker);\\n\\n      var faceVector = PointOfInterestFeature_toConsumableArray(FaceVectors[targetType]);\\n\\n      faceVector[2] = distance;\\n      var spherical = core_MathUtils.cartesianToSpherical.apply(core_MathUtils, PointOfInterestFeature_toConsumableArray(faceVector)); // Make sure values are clamped within the range of motion of the human eye, in case the target is very close\\n\\n      var blendValues = this.constructor._sphericalToBlendValue(spherical[1], spherical[2]);\\n\\n      blendValues.h = core_MathUtils.clamp(blendValues.h, -35, 35);\\n      blendValues.v = core_MathUtils.clamp(blendValues.v, -25, 30);\\n      return blendValues;\\n    }\\n    /**\\r\\n     * Updated the stored speed and duration variables for a layer based on the\\r\\n     * change in horizontal and vertical angles of the tracker.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to store values on.\\r\\n     * @param {number} h - Change in horizontal angle, in degrees.\\r\\n     * @param {number} v - Change in vertical angle, in degrees.\\r\\n     */\\n\\n  }, {\\n    key: "_updateLayerSpeed",\\n    value: function _updateLayerSpeed(layerName, h, v) {\\n      var layer = this._managedLayers[layerName]; // From "Realistic Avatar and head Animation Using a Neurobiological Model of Visual Attention", Itti, Dhavale, Pighin\\n\\n      layer.maxHSpeed = 473 * (1 - Math.exp(-h / 7.8));\\n      layer.maxVSpeed = 473 * (1 - Math.exp(-v / 7.8)); // From "Eyes Alive", Lee, Badler\\n\\n      var D0 = 0.025;\\n      var d = 0.00235;\\n      layer.hDuration = D0 + d * h;\\n      layer.vDuration = D0 + d * v;\\n    }\\n    /**\\r\\n     * Set the microSaccade object with new randomized values.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\\r\\n     */\\n\\n  }, {\\n    key: "_setMicroSaccade",\\n    value: function _setMicroSaccade(layerName) {\\n      var layer = this._managedLayers[layerName];\\n      var microSaccade = layer.microSaccade;\\n\\n      if (this._target) {\\n        // Micro movements should be smaller when focused on a target\\n        microSaccade.h = core_Utils.getRandomFloat(.01, .15);\\n        microSaccade.v = core_Utils.getRandomFloat(.01, .15);\\n      } else {\\n        // Microsaccades. Encyclopedia of Neuroscience. (2009) Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-540-29678-2_3492\\n        microSaccade.h = core_Utils.getRandomFloat(.01, .3);\\n        microSaccade.v = core_Utils.getRandomFloat(.01, .3);\\n      }\\n\\n      this._updateLayerSpeed(layerName, microSaccade.h, microSaccade.v); // Restart the timer\\n\\n\\n      this._initializeMicroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(MicroSaccadeWaitRanges["default"])));\\n    }\\n    /**\\r\\n     * Set the macroSaccade object with new randomized values.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\\r\\n     */\\n\\n  }, {\\n    key: "_setMacroSaccade",\\n    value: function _setMacroSaccade(layerName) {\\n      var layer = this._managedLayers[layerName];\\n      var macroSaccade = layer.macroSaccade;\\n      var macroSaccadeWaitRange; // Increase random value range when not focused on a target\\n\\n      if (!this._target) {\\n        macroSaccadeWaitRange = MacroSaccadeWaitRanges["default"]; // Normal human horizontal eye rotation limit is about 35 degrees\\n\\n        var hLimit = core_Utils.getRandomFloat(.143, .286);\\n        var hFactor = core_Utils.getRandomFloat(-hLimit, hLimit);\\n        macroSaccade.h = hFactor * 35; // Normal human vertical eye rotation limit is about 25 degrees upward and 30 degrees downward\\n\\n        var vLimit = core_Utils.getRandomFloat(.093, .186);\\n        var vFactor = core_Utils.getRandomFloat(-vLimit, vLimit);\\n        macroSaccade.v = vFactor > 0 ? vFactor * 25 : vFactor * 30;\\n      } // Pick a new face target\\n      else {\\n        // Social triangle - saccade between eyes and mouth, weighted to look at eyes more often\\n        switch (layer.saccadeTarget) {\\n          case 1:\\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.eyeTarget;\\n            layer.saccadeTarget = Math.random() < 0.75 ? FaceTargetTypes.EyeRight : FaceTargetTypes.Mouth;\\n            break;\\n\\n          case 2:\\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.eyeTarget;\\n            layer.saccadeTarget = Math.random() < 0.75 ? FaceTargetTypes.EyeLeft : FaceTargetTypes.Mouth;\\n            break;\\n\\n          case 3:\\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.mouthTarget;\\n            layer.saccadeTarget = Math.random() < 0.5 ? FaceTargetTypes.EyeLeft : FaceTargetTypes.EyeRight;\\n            break;\\n\\n          case 0:\\n          default:\\n            macroSaccadeWaitRange = MacroSaccadeWaitRanges.eyeTarget;\\n            layer.saccadeTarget = Math.random() < 0.5 ? FaceTargetTypes.EyeLeft : FaceTargetTypes.EyeRight;\\n            break;\\n        }\\n\\n        var _this$_getFaceTargetA = this._getFaceTargetAngles(layer.saccadeTarget),\\n            h = _this$_getFaceTargetA.h,\\n            v = _this$_getFaceTargetA.v;\\n\\n        macroSaccade.h = h;\\n        macroSaccade.v = v;\\n      }\\n\\n      this._updateLayerSpeed(layerName, macroSaccade.h, macroSaccade.v); // Restart the timers\\n\\n\\n      this._initializeMicroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(MicroSaccadeWaitRanges.postMacro)));\\n\\n      this._initializeMacroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(macroSaccadeWaitRange)));\\n    }\\n    /**\\r\\n     * Start a new wait timer that will set a new micro saccade movement when it\\r\\n     * resolves.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\\r\\n     * @param {number} minWaitTime - Minimum number of seconds before a new saccade\\r\\n     * will be triggered.\\r\\n     * @param {number} maxWaitTime - Maximum number of seconds before a new saccade\\r\\n     * will be triggered.\\r\\n     */\\n\\n  }, {\\n    key: "_initializeMicroTimer",\\n    value: function _initializeMicroTimer(layerName, minWaitTime, maxWaitTime) {\\n      var _this3 = this;\\n\\n      var layer = this._managedLayers[layerName];\\n      var waitTime = core_Utils.getRandomFloat(minWaitTime, maxWaitTime);\\n\\n      if (layer.microSaccadeTimer) {\\n        layer.microSaccadeTimer.cancel();\\n      }\\n\\n      layer.microSaccadeTimer = core_Utils.wait(waitTime, {\\n        onFinish: function onFinish() {\\n          _this3._setMicroSaccade(layerName);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Start a new wait timer that will set a new macro saccade movement when it\\r\\n     * resolves.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer that owns the saccade motion.\\r\\n     * @param {number} minWaitTime - Minimum number of seconds before a new saccade\\r\\n     * will be triggered.\\r\\n     * @param {number} maxWaitTime - Maximum number of seconds before a new saccade\\r\\n     * will be triggered.\\r\\n     */\\n\\n  }, {\\n    key: "_initializeMacroTimer",\\n    value: function _initializeMacroTimer(layerName, minWaitTime, maxWaitTime) {\\n      var _this4 = this;\\n\\n      var layer = this._managedLayers[layerName];\\n      var waitTime = core_Utils.getRandomFloat(minWaitTime, maxWaitTime);\\n\\n      if (layer.macroSaccadeTimer) {\\n        layer.macroSaccadeTimer.cancel();\\n      }\\n\\n      layer.macroSaccadeTimer = core_Utils.wait(waitTime, {\\n        onFinish: function onFinish() {\\n          _this4._setMacroSaccade(layerName);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Sets a new target to look at.\\r\\n     *\\r\\n     * @param {Object|null} target - The new target to look at.\\r\\n     */\\n\\n  }, {\\n    key: "setTarget",\\n    value: function setTarget(target) {\\n      this.target = target;\\n    }\\n    /**\\r\\n     * Finds an object given its name and sets it as the new target to look at.\\r\\n     * Should be overloaded for each rendering engine implementation.\\r\\n     *\\r\\n     * @param {string} target - Name to search for.\\r\\n     */\\n\\n  }, {\\n    key: "setTargetByName",\\n    value: function setTargetByName(name) {\\n      if (!name) {\\n        this._target = null;\\n      }\\n\\n      if (!this._scene) {\\n        throw new Error("Cannot set PointOfInterestFeature target using name ".concat(name, " on host ").concat(this._host.id, ". Scene must be defined."));\\n      }\\n    }\\n    /**\\r\\n     * Finds an object given its id and sets it as the new target to look at.\\r\\n     * Should be overloaded for each rendering engine implementation.\\r\\n     *\\r\\n     * @param {string|number} target - Id to search for.\\r\\n     */\\n\\n  }, {\\n    key: "setTargetById",\\n    value: function setTargetById(id) {\\n      if (!id) {\\n        this._target = null;\\n      }\\n\\n      if (!this._scene) {\\n        throw new Error("Cannot set PointOfInterestFeature target using id ".concat(id, " on host ").concat(this._host.id, ". Scene must be defined."));\\n      }\\n    }\\n    /**\\r\\n     * Start keeping track of an animation layer that owns a blend2d animation with\\r\\n     * blendWeights corresponding to horizontal and vertical look angles.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to keep track of.\\r\\n     * @param {Object=} options - Options for the layer.\\r\\n     * @param {string} [options.animation = \\\'look\\\'] - Name of the animation on the\\r\\n     * layer whose blendWeights will be driven based on the angle between the lookTracker\\r\\n     * and the lookTarget. This animation must be of type blend2d.\\r\\n     * @param {number} [options.maxSpeed = 25] - The maximum speed at which the blend2d\\r\\n     * blendWeights can be manipulated.\\r\\n     * @param {string} [options.forwardAxis = \\\'PositiveZ\\\'] - Axis pointing from the\\r\\n     * front of the lookReference object. Valid options are \\\'PositiveX\\\', \\\'NegativeX\\\',\\r\\n     * \\\'PositiveY\\\', \\\'NegativeY\\\', \\\'PositiveZ\\\', \\\'NegativeZ\\\'.\\r\\n     * @param {Object=} options.lookReference - 3D transformation node that the lookTracker\\r\\n     * rotation limits should be calculated relative to. Defaults to the host owner.\\r\\n     * @param {number} [options.hasSaccade = false] - Whether or not to include\\r\\n     * saccadic motion onto the blendWeight animation. This should only be set to\\r\\n     * true for blend2d animations representing eye animation.\\r\\n     * @param {number=} [options.blendTime=[PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link PointOfInterestFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\\r\\n     * Default amount of time to use when manipulating layer weight.\\r\\n     * @param {Function=} options.easingFn - Default easing function to use when\\r\\n     * manipulating layer weight.\\r\\n     */\\n\\n  }, {\\n    key: "registerLookLayer",\\n    value: function registerLookLayer(layerName) {\\n      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n          _ref10$animation = _ref10.animation,\\n          animation = _ref10$animation === void 0 ? \\\'look\\\' : _ref10$animation,\\n          _ref10$maxSpeed = _ref10.maxSpeed,\\n          maxSpeed = _ref10$maxSpeed === void 0 ? 25 : _ref10$maxSpeed,\\n          reference = _ref10.reference,\\n          _ref10$forwardAxis = _ref10.forwardAxis,\\n          forwardAxis = _ref10$forwardAxis === void 0 ? \\\'PositiveZ\\\' : _ref10$forwardAxis,\\n          _ref10$hasSaccade = _ref10.hasSaccade,\\n          hasSaccade = _ref10$hasSaccade === void 0 ? false : _ref10$hasSaccade,\\n          _ref10$blendTime = _ref10.blendTime,\\n          blendTime = _ref10$blendTime === void 0 ? PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref10$blendTime,\\n          easingFn = _ref10.easingFn;\\n\\n      // Validate reference object\\n      reference = reference || this._host.owner;\\n\\n      if (!this.constructor._validateTransformObject(reference)) {\\n        throw new Error("Cannot initialize register look layer ".concat(layerName, " for PointOfInterestFeature on host ").concat(this._host.id, ". Reference must be defined as a valid transformation object."));\\n      } // Find vector associated with axis string\\n\\n\\n      forwardAxis = AxisMap[forwardAxis] !== undefined ? AxisMap[forwardAxis] : AxisMap.PositiveZ; // Store tracking configuration\\n\\n      var trackingConfig = this._addTrackingConfig({\\n        reference: reference,\\n        forwardAxis: forwardAxis\\n      }); // Register the layer and animation\\n\\n\\n      this.registerLayer(layerName, {\\n        trackingConfig: trackingConfig,\\n        maxSpeed: maxSpeed,\\n        maxHSpeed: undefined,\\n        maxVSpeed: undefined,\\n        hDuration: undefined,\\n        vDuration: undefined,\\n        hVelocity: [0, 0],\\n        vVelocity: [0, 0],\\n        hasSaccade: hasSaccade,\\n        blendTime: blendTime,\\n        easingFn: easingFn,\\n        microSaccade: {\\n          h: 0,\\n          v: 0\\n        },\\n        macroSaccade: {\\n          h: 0,\\n          v: 0\\n        },\\n        saccadeTarget: FaceTargetTypes.EyeCenter,\\n        animations: PointOfInterestFeature_defineProperty({}, animation, {})\\n      });\\n      this._lookLayers[layerName] = animation; // Validate the look animation\\n\\n      this._registerLookAnimation(layerName, animation); // Initialize saccade timers\\n\\n\\n      if (hasSaccade) {\\n        var macroSaccadeWaitRange = this._target ? MacroSaccadeWaitRanges.eyeTarget : MacroSaccadeWaitRanges["default"];\\n\\n        this._initializeMicroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(MicroSaccadeWaitRanges["default"])));\\n\\n        this._initializeMacroTimer.apply(this, [layerName].concat(PointOfInterestFeature_toConsumableArray(macroSaccadeWaitRange)));\\n      }\\n    }\\n    /**\\r\\n     * Start keeping track of an animation layer that owns a blink animation. Blink\\r\\n     * animations can be of any type, but if it is of type randomAnimation then a\\r\\n     * it will be randomized each time a blink is called.\\r\\n     *\\r\\n     * @param {string} layerName - Name of the layer to keep track of.\\r\\n     * @param {Object=} options - Options for the layer.\\r\\n     * @param {string} [options.animation = \\\'blink\\\'] - Name of the blink animation\\r\\n     * on the layer.\\r\\n     * @param {number} [options.blendTime=[PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime]{@link PointOfInterestFeature#DEFAULT_LAYER_OPTIONS#blendTime}] -\\r\\n     * Default amount of time to use when manipulating the layer\\\'s weight.\\r\\n     * @param {Function=} options.easingFn - Default easing function to use when\\r\\n     * manipulating the layer\\\'s weight.\\r\\n     */\\n\\n  }, {\\n    key: "registerBlinkLayer",\\n    value: function registerBlinkLayer(layerName) {\\n      var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\\n          _ref11$animation = _ref11.animation,\\n          animation = _ref11$animation === void 0 ? \\\'blink\\\' : _ref11$animation,\\n          _ref11$blendTime = _ref11.blendTime,\\n          blendTime = _ref11$blendTime === void 0 ? PointOfInterestFeature.DEFAULT_LAYER_OPTIONS.blendTime : _ref11$blendTime,\\n          easingFn = _ref11.easingFn;\\n\\n      // Register the layer and animation\\n      this.registerLayer(layerName, {\\n        blendTime: blendTime,\\n        easingFn: easingFn,\\n        animations: PointOfInterestFeature_defineProperty({}, animation, {})\\n      });\\n      this._blinkLayers[layerName] = animation;\\n    }\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      var _this5 = this;\\n\\n      PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "update", this).call(this, deltaTime); // Update the look angles\\n\\n\\n      if (this._target) {\\n        this._setLookAngles();\\n      } else {\\n        this._resetLookAngles();\\n      }\\n\\n      var deltaSeconds = Math.min(deltaTime, MaxDelta) / 1000;\\n      var triggerBlink = false; // Set look blend values\\n\\n      Object.entries(this._lookLayers).forEach(function (_ref12) {\\n        var _ref13 = PointOfInterestFeature_slicedToArray(_ref12, 2),\\n            layerName = _ref13[0],\\n            animName = _ref13[1];\\n\\n        var options = _this5._managedLayers[layerName]; // Increment the saccade timers\\n\\n        if (options.isActive && options.hasSaccade) {\\n          options.microSaccadeTimer.execute(deltaTime);\\n          options.macroSaccadeTimer.execute(deltaTime);\\n        } // Set the blend values\\n\\n\\n        if (options.animations[animName].isActive) {\\n          var currentH = _this5._host.AnimationFeature.getAnimationBlendWeight(layerName, animName, \\\'X\\\');\\n\\n          var currentV = _this5._host.AnimationFeature.getAnimationBlendWeight(layerName, animName, \\\'Y\\\');\\n\\n          var targetH = options.trackingConfig.angles.h;\\n          var targetV = options.trackingConfig.angles.v; // Check if the look angle has changed enough to trigger a blink\\n\\n          if (_this5._isTargetMoving && !triggerBlink) {\\n            var prevTargetH = options.trackingConfig.prevAngles.h;\\n            var prevTargetV = options.trackingConfig.prevAngles.v;\\n            var changeAmount = core_MathUtils.toDegrees(core_MathUtils.getAngleBetween([prevTargetH, prevTargetV], [targetH, targetV]));\\n\\n            if (changeAmount >= BlinkThreshold) {\\n              triggerBlink = true;\\n            }\\n          }\\n\\n          options.trackingConfig.prevAngles.h = targetH;\\n          options.trackingConfig.prevAngles.v = targetV; // Add in the saccade movement\\n\\n          if (options.hasSaccade) {\\n            core_MathUtils.dampValue(0, options.macroSaccade.h + options.macroSaccade.h, options.hVelocity, options.hDuration, options.maxHSpeed);\\n            targetH += options.hVelocity[0];\\n            core_MathUtils.dampValue(0, options.macroSaccade.v + options.macroSaccade.v, options.vVelocity, options.vDuration, options.maxVSpeed);\\n            targetV += options.vVelocity[0];\\n          } // Clamp to max speed\\n\\n\\n          var factor = core_MathUtils.clamp(deltaSeconds * options.maxSpeed, 0, 1);\\n          targetH = core_MathUtils.lerp(currentH, targetH, factor);\\n          targetV = core_MathUtils.lerp(currentV, targetV, factor); // Update the blend values\\n\\n          _this5._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, \\\'X\\\', targetH);\\n\\n          _this5._host.AnimationFeature.setAnimationBlendWeight(layerName, animName, \\\'Y\\\', targetV);\\n        }\\n      });\\n\\n      if (!triggerBlink || !this._isTargetMoving) {\\n        return;\\n      } // Execute blink\\n\\n\\n      Object.entries(this._blinkLayers).forEach(function (_ref14) {\\n        var _ref15 = PointOfInterestFeature_slicedToArray(_ref14, 2),\\n            layerName = _ref15[0],\\n            animName = _ref15[1];\\n\\n        var animation = _this5._managedLayers[layerName].animations[animName];\\n\\n        if (animation.isActive) {\\n          _this5._host.AnimationFeature.playAnimation(layerName, animName);\\n        }\\n      });\\n    }\\n  }, {\\n    key: "installApi",\\n    value: function installApi() {\\n      var _this6 = this;\\n\\n      /**\\r\\n       * @inner\\r\\n       * @namespace PointOfInterestFeature\\r\\n       */\\n      var api = PointOfInterestFeature_get(PointOfInterestFeature_getPrototypeOf(PointOfInterestFeature.prototype), "installApi", this).call(this);\\n\\n      Object.defineProperties(api, {\\n        /**\\r\\n         * @memberof PointOfInterestFeature\\r\\n         * @instance\\r\\n         * @see core/PointOfInterestFeature#target\\r\\n         */\\n        target: {\\n          get: function get() {\\n            return _this6.target;\\n          },\\n          set: function set(target) {\\n            _this6.target = target;\\n          }\\n        }\\n      });\\n      Object.assign(api, {\\n        /**\\r\\n         * @memberof PointOfInterestFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/PointOfInterestFeature#registerLookLayer\\r\\n         */\\n        registerLookLayer: this.registerLookLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof PointOfInterestFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/PointOfInterestFeature#registerBlinkLayer\\r\\n         */\\n        registerBlinkLayer: this.registerBlinkLayer.bind(this),\\n\\n        /**\\r\\n         * @memberof PointOfInterestFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/PointOfInterestFeature#setTarget\\r\\n         */\\n        setTarget: this.setTarget.bind(this),\\n\\n        /**\\r\\n         * @memberof PointOfInterestFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/PointOfInterestFeature#setTargetByName\\r\\n         */\\n        setTargetByName: this.setTargetByName.bind(this),\\n\\n        /**\\r\\n         * @memberof PointOfInterestFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see core/PointOfInterestFeature#setTargetById\\r\\n         */\\n        setTargetById: this.setTargetById.bind(this)\\n      });\\n      return api;\\n    }\\n  }], [{\\n    key: "_getWorldPosition",\\n    value: function _getWorldPosition(obj) {\\n      return [0, 0, 0];\\n    }\\n    /**\\r\\n     * Return a matrix representing the global transformation matrix of an object.\\r\\n     * Should be overloaded for each rendering engine implementation.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {any} obj - Engine-specific 3D transform object.\\r\\n     *\\r\\n     * @returns {Array.<number>} - An array consisting of 16 numbers representing\\r\\n     * the 3d transformation.\\r\\n     */\\n\\n  }, {\\n    key: "_getWorldMatrix",\\n    value: function _getWorldMatrix(obj) {\\n      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\\n    }\\n    /**\\r\\n     * Rotate the given local direction vector by the object\\\'s world rotation matrix.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {any} obj - Engine-specific 3D transform object.\\r\\n     * @param {Array.<number>} forwardVector - Unit vector representing the local\\r\\n     * forward direction of the object.\\r\\n     *\\r\\n     * @returns {Array.<number>}\\r\\n     */\\n\\n  }, {\\n    key: "_getObjectDirection",\\n    value: function _getObjectDirection(obj) {\\n      var forwardVector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AxisMap.PositiveZ;\\n      var rotation = core_MathUtils.getRotationMatrix(this._getWorldMatrix(obj));\\n      return core_MathUtils.rotateVector(forwardVector, rotation);\\n    }\\n    /**\\r\\n     * Calculate horizontal and vertical look angles in degrees given spherical theta\\r\\n     * and phi angles in radians.\\r\\n     *\\r\\n     * @param {number} theta - Vertical/polar angle in radians where 0 points directly\\r\\n     * along positive Y axis.\\r\\n     * @param {number} phi - Horizontal/azimuthal angle in radians.\\r\\n     *\\r\\n     * @returns {Object} - An object with the signature {h: number, v: number} where\\r\\n     * h represents horizontal rotation in degrees and v represents vertical rotation\\r\\n     * in degrees.\\r\\n     */\\n\\n  }, {\\n    key: "_sphericalToBlendValue",\\n    value: function _sphericalToBlendValue(theta, phi) {\\n      var h = core_MathUtils.toDegrees(phi); // Offset the vertical angle so 0 is pointing forward instead of up\\n\\n      var v = core_MathUtils.toDegrees(theta) - 90; // Convert vertical angle to -180, 180 range\\n\\n      return {\\n        h: h,\\n        v: v\\n      };\\n    }\\n  }, {\\n    key: "_validateTransformObject",\\n    value: function _validateTransformObject(obj) {\\n      return obj instanceof Object;\\n    }\\n  }]);\\n\\n  return PointOfInterestFeature;\\n}(core_AbstractHostFeature.mix(awspack_SSMLSpeechmarkInterface.Mixin, animpack_ManagedAnimationLayerInterface.Mixin));\\n\\n/* harmony default export */ const core_PointOfInterestFeature = (PointOfInterestFeature);\\n\\n;// CONCATENATED MODULE: ./src/core/animpack/index.js\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * @module core/animpack\\r\\n */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\r\\n * @namespace\\r\\n */\\n\\nvar Easing = {\\n  /**\\r\\n   * @see Linear\\r\\n   */\\n  Linear: Linear,\\n\\n  /**\\r\\n   * @see Quadratic\\r\\n   */\\n  Quadratic: Quadratic,\\n\\n  /**\\r\\n   * @see Cubic\\r\\n   */\\n  Cubic: Cubic,\\n\\n  /**\\r\\n   * @see Quartic\\r\\n   */\\n  Quartic: Quartic,\\n\\n  /**\\r\\n   * @see Quintic\\r\\n   */\\n  Quintic: Quintic,\\n\\n  /**\\r\\n   * @see Sinusoidal\\r\\n   */\\n  Sinusoidal: Sinusoidal,\\n\\n  /**\\r\\n   * @see Exponential\\r\\n   */\\n  Exponential: Exponential,\\n\\n  /**\\r\\n   * @see Circular\\r\\n   */\\n  Circular: Circular,\\n\\n  /**\\r\\n   * @see Elastic\\r\\n   */\\n  Elastic: Elastic,\\n\\n  /**\\r\\n   * @see Back\\r\\n   */\\n  Back: Back,\\n\\n  /**\\r\\n   * @see Bounce\\r\\n   */\\n  Bounce: Bounce\\n};\\n/* harmony default export */ const animpack = ({\\n  /**\\r\\n   * @see core/AnimationFeature\\r\\n   */\\n  AnimationFeature: animpack_AnimationFeature,\\n\\n  /**\\r\\n   * @see AnimationLayer\\r\\n   */\\n  AnimationLayer: animpack_AnimationLayer,\\n\\n  /**\\r\\n   * @see core/SingleState\\r\\n   */\\n  SingleState: state_SingleState,\\n\\n  /**\\r\\n   * @see TransitionState\\r\\n   */\\n  TransitionState: state_TransitionState,\\n\\n  /**\\r\\n   * @see FreeBlendState\\r\\n   */\\n  FreeBlendState: state_FreeBlendState,\\n\\n  /**\\r\\n   * @see QueueState\\r\\n   */\\n  QueueState: state_QueueState,\\n\\n  /**\\r\\n   * @see RandomAnimationState\\r\\n   */\\n  RandomAnimationState: state_RandomAnimationState,\\n\\n  /**\\r\\n   * @see Blend1dState\\r\\n   */\\n  Blend1dState: state_Blend1dState,\\n\\n  /**\\r\\n   * @see Blend2dState\\r\\n   */\\n  Blend2dState: state_Blend2dState,\\n\\n  /**\\r\\n   * @see AnimationUtils\\r\\n   */\\n  AnimationUtils: animpack_AnimationUtils,\\n  Easing: Easing,\\n\\n  /**\\r\\n   * @see LayerBlendModes\\r\\n   */\\n  LayerBlendModes: LayerBlendModes,\\n\\n  /**\\r\\n   * @see DefaultLayerBlendMode\\r\\n   */\\n  DefaultLayerBlendMode: DefaultLayerBlendMode,\\n\\n  /**\\r\\n   * @see AnimationTypes\\r\\n   */\\n  AnimationTypes: AnimationTypes\\n});\\n;// CONCATENATED MODULE: ./src/core/awspack/TextToSpeechUtils.js\\nfunction TextToSpeechUtils_toConsumableArray(arr) { return TextToSpeechUtils_arrayWithoutHoles(arr) || TextToSpeechUtils_iterableToArray(arr) || TextToSpeechUtils_unsupportedIterableToArray(arr) || TextToSpeechUtils_nonIterableSpread(); }\\n\\nfunction TextToSpeechUtils_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction TextToSpeechUtils_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction TextToSpeechUtils_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return TextToSpeechUtils_arrayLikeToArray(arr); }\\n\\nfunction TextToSpeechUtils_slicedToArray(arr, i) { return TextToSpeechUtils_arrayWithHoles(arr) || TextToSpeechUtils_iterableToArrayLimit(arr, i) || TextToSpeechUtils_unsupportedIterableToArray(arr, i) || TextToSpeechUtils_nonIterableRest(); }\\n\\nfunction TextToSpeechUtils_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction TextToSpeechUtils_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return TextToSpeechUtils_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TextToSpeechUtils_arrayLikeToArray(o, minLen); }\\n\\nfunction TextToSpeechUtils_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction TextToSpeechUtils_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction TextToSpeechUtils_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction TextToSpeechUtils_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechUtils_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechUtils_typeof(obj); }\\n\\nfunction TextToSpeechUtils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction TextToSpeechUtils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction TextToSpeechUtils_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechUtils_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechUtils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * A collection of useful text-to-speech functions.\\r\\n *\\r\\n * @hideconstructor\\r\\n */\\n\\nvar TextToSpeechUtils = /*#__PURE__*/function () {\\n  function TextToSpeechUtils() {\\n    TextToSpeechUtils_classCallCheck(this, TextToSpeechUtils);\\n  }\\n\\n  TextToSpeechUtils_createClass(TextToSpeechUtils, null, [{\\n    key: "autoGenerateSSMLMarks",\\n    value:\\n    /**\\r\\n     * Returns a new string with SSML marks inserted based on\\r\\n     * matches between the input string and the input map. The\\r\\n     * word matches are case-insensitive. Words within existing\\r\\n     * SSML tags will not be affected. Input text will be surrounded\\r\\n     * by <speak></speak> tags if needed.\\r\\n     *\\r\\n     * @param {string} text - Input string.\\r\\n     * @param {object} map - Input object that maps mark keys\\r\\n     * to arrays of words. Example:\\r\\n     *\\r\\n     *  {\\r\\n     *    \\\'mark:sad\\\' : [\\\'sad\\\', \\\'blue\\\', \\\'down\\\'],\\r\\n     *    \\\'mark:happy\\\' : [\\\'joy\\\', \\\'glad\\\', \\\'great\\\'],\\r\\n     *    \\\'mark:no\\\' : [\\\'no\\\', \\\'nah\\\', \\\'nay\\\', \\\'sure\\\']\\r\\n     *  }\\r\\n     * @param {Array.<string>} [randomMarks = []] - If there are sentences that don\\\'t\\r\\n     * match any words from the map object, marks from this array will be randomly\\r\\n     * chosen and inserted.\\r\\n     *\\r\\n     * @returns {string} - Updated input string.\\r\\n     */\\n    function autoGenerateSSMLMarks(text, map) {\\n      var _this = this;\\n\\n      var randomMarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\\n\\n      if (TextToSpeechUtils_typeof(map) !== \\\'object\\\' || map === null) {\\n        throw new Error("Cannot generate SSML marks for text \\\\"".concat(text, "\\\\" because map is not an object."));\\n      } // process the input map into an internal format\\n\\n\\n      var internalMap = this._processInputMap(map);\\n\\n      var speakTags = [\\\'<speak>\\\', \\\'</speak>\\\'];\\n      var ssmlMarkRegex = /<mark name=(?:"|\\\')(.*?)(?:"|\\\')\\\\/>/;\\n      var ssmlTagRegex = /<[^>]*>/g; // Identify any existing SSML tags\\n\\n      var existingTags = [];\\n      var result = ssmlTagRegex.exec(text);\\n\\n      while (result !== null) {\\n        existingTags.push({\\n          start: result.index,\\n          end: result.index + result[0].length,\\n          text: result[0]\\n        });\\n        result = ssmlTagRegex.exec(text);\\n      }\\n\\n      var chunks = [];\\n      var index = 0;\\n      var ssmlMarkResult;\\n      var duplicateMarkToCheck = [];\\n      existingTags.forEach(function (existingTag) {\\n        var substr = text.slice(index, existingTag.start);\\n\\n        if (substr !== \\\'\\\') {\\n          // auto-mark non-tag text\\n          chunks.push(_this._insertMarks(substr, internalMap, duplicateMarkToCheck));\\n          duplicateMarkToCheck = [];\\n        }\\n\\n        ssmlMarkResult = ssmlMarkRegex.exec(existingTag.text);\\n\\n        if (ssmlMarkResult !== null) {\\n          var markText = ssmlMarkResult[1];\\n          duplicateMarkToCheck.push(markText);\\n        } else if (!speakTags.includes(existingTag.text)) {\\n          chunks.push(existingTag.text);\\n        } // advance the index\\n\\n\\n        index = existingTag.end;\\n      });\\n      chunks.push(this._insertMarks(text.slice(index), internalMap, duplicateMarkToCheck));\\n      var markedText = chunks.join(\\\'\\\');\\n\\n      if (randomMarks && randomMarks.length > 0) {\\n        // add random marks to any unmarked sentences\\n        markedText = this.addMarksToUnmarkedSentences(markedText, randomMarks);\\n      }\\n\\n      return TextToSpeechUtils.validateText(markedText);\\n    }\\n    /**\\r\\n     * Returns a new string with a random SSML mark inserted at each sentence that\\r\\n     * does not already contain an SSML mark.\\r\\n     *\\r\\n     * @param {string} text - Input string.\\r\\n     * @param {Array.<string>} marks - Any array of random SSML marks to choose from\\r\\n     * when modifying the text.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "addMarksToUnmarkedSentences",\\n    value: function addMarksToUnmarkedSentences(text, marks) {\\n      if (!marks || marks.length === 0) return text;\\n      var ssmlMarkRegex = /<mark name=(?:"|\\\')(.*?)(?:"|\\\')\\\\/>/g;\\n      var ssmlTagRegex = /<[^>]*>/g; // Find the indices of any marks in the text\\n\\n      var markIndices = [];\\n      var markResult = ssmlMarkRegex.exec(text);\\n\\n      while (markResult !== null) {\\n        markIndices.push(markResult.index);\\n        markResult = ssmlMarkRegex.exec(text);\\n      } // Find all SSML tags in the text\\n\\n\\n      var existingTags = [];\\n      var ssmlResult = ssmlTagRegex.exec(text);\\n\\n      while (ssmlResult !== null) {\\n        existingTags.push({\\n          start: ssmlResult.index,\\n          end: ssmlResult.index + ssmlResult[0].length,\\n          text: ssmlResult[0]\\n        });\\n        ssmlResult = ssmlTagRegex.exec(text);\\n      } // Create a copy of the text with all SSML marks replaces with whitespace\\n\\n\\n      var cleanedText = text.slice();\\n      existingTags.forEach(function (existingSsml) {\\n        var whitespace = new Array(existingSsml.text.length + 1).join(\\\' \\\');\\n        cleanedText = [cleanedText.slice(0, existingSsml.start), whitespace, cleanedText.slice(existingSsml.end)].join(\\\'\\\');\\n      });\\n\\n      var sentenceEndIndices = this._getSentenceEnds(cleanedText); // Only insert random marks into sentences that don\\\'t already have any\\n\\n\\n      var prevIndex = 0;\\n      var targetIndices = sentenceEndIndices.filter(function (index) {\\n        var containsMark = markIndices.findIndex(function (markIndex) {\\n          return prevIndex <= markIndex && index > markIndex;\\n        }) !== -1;\\n        prevIndex = index;\\n        return !containsMark;\\n      });\\n\\n      var randomMarkedText = this._insertRandomMarksAt(text, targetIndices, marks);\\n\\n      return randomMarkedText;\\n    }\\n    /**\\r\\n     * Generate a version of given text that is enclosed by Polly ssml speak tags.\\r\\n     *\\r\\n     * @param {string} text - The text to validate.\\r\\n     *\\r\\n     * @returns {string} - Updated input string.\\r\\n     */\\n\\n  }, {\\n    key: "validateText",\\n    value: function validateText(text) {\\n      if (!text) {\\n        text = \\\'<speak></speak>\\\';\\n      } else {\\n        text = text.replace(/(^\\\\s*<\\\\s*speak\\\\s*)>\\\\s*|(^\\\\s*)/, \\\'<speak>\\\').replace(/(\\\\s*<\\\\s*\\\\/\\\\s*speak\\\\s*>\\\\s*$|\\\\s*$)/, \\\'</speak>\\\');\\n      }\\n\\n      return text;\\n    }\\n    /**\\r\\n     * Parse an input string and insert SSML marks based on\\r\\n     * word matches in a map.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} text - Input string.\\r\\n     * @param {Array.<number>} [indices = []] - An array of indices in the text input\\r\\n     * where random marks should be inserted.\\r\\n     * @param {Array.<string>} [marks = []] - An array of mark strings to choose\\r\\n     * from when inserting random marks.\\r\\n     *\\r\\n     * @returns {string} - Updated input string.\\r\\n     */\\n\\n  }, {\\n    key: "_insertRandomMarksAt",\\n    value: function _insertRandomMarksAt(text) {\\n      var indices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n      var marks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\\n\\n      if (!marks || marks.length === 0 || !indices || indices.length === 0) {\\n        return text;\\n      }\\n\\n      var offset = 0;\\n      indices.forEach(function (index) {\\n        var randomMark = "<mark name=\\\'".concat(marks[core_Utils.getRandomInt(0, marks.length)], "\\\'/>");\\n        text = [text.slice(0, index + offset), randomMark, text.slice(index + offset)].join(\\\'\\\');\\n        offset += randomMark.length;\\n      });\\n      return text;\\n    }\\n    /**\\r\\n     * Parses a string of text and returns an array containing the indices\\r\\n     * of the last character in a sentence that is not in the following list:\\r\\n     *  (\\\'.\\\', \\\'?\\\', \\\'!\\\')\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} text - Text to process for end of sentence\\r\\n     * indices.\\r\\n     *\\r\\n     * @returns {Array.<number>} - Array of end of sentence indices.\\r\\n     */\\n\\n  }, {\\n    key: "_getSentenceEnds",\\n    value: function _getSentenceEnds(text) {\\n      var sentenceRegex = /[^.!?]+[.!?]+/g;\\n      var endSentenceRegex = /[.!?]+/;\\n      var result = sentenceRegex.exec(text);\\n      var sentenceEnds = [];\\n\\n      while (result !== null) {\\n        // find the last non-punctuation character\\n        var punctResult = endSentenceRegex.exec(result[0]);\\n        sentenceEnds.push(result.index + result[0].length - punctResult[0].length);\\n        result = sentenceRegex.exec(text);\\n      }\\n\\n      return sentenceEnds;\\n    }\\n    /**\\r\\n     * Parse an input string and insert SSML marks based on\\r\\n     * word matches in a map.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} text - Input string.\\r\\n     * @param {Map} map - Mapping of words to mark values that\\r\\n     * will be inserted as the value for a mark\\\'s \\\'name\\\' attribute.\\r\\n     * @param {Array} duplicatesToCheck - A list of mark values to check for duplicate against the first word\\r\\n     *\\r\\n     * @returns {string} - Updated input string.\\r\\n     */\\n\\n  }, {\\n    key: "_insertMarks",\\n    value: function _insertMarks(text, map, duplicatesToCheck) {\\n      if (text === \\\'\\\') return text;\\n      var wordRegex = /\\\\w+|\\\\s+|[^\\\\s\\\\w]+/g;\\n      var lowerCaseWord;\\n      var checkDuplicate = true;\\n      var markedWords = text.match(wordRegex).map(function (word) {\\n        lowerCaseWord = word.toLowerCase();\\n\\n        if (map.has(lowerCaseWord)) {\\n          var marks = map.get(lowerCaseWord).map(function (mark) {\\n            if (checkDuplicate) {\\n              checkDuplicate = false;\\n              return duplicatesToCheck.includes(mark) ? \\\'\\\' : "<mark name=\\\'".concat(mark, "\\\'/>");\\n            } else {\\n              return "<mark name=\\\'".concat(mark, "\\\'/>");\\n            }\\n          });\\n          return "".concat(marks.join(\\\'\\\')).concat(word);\\n        } else {\\n          checkDuplicate = false;\\n          return word;\\n        }\\n      });\\n      var existingMarks = duplicatesToCheck.map(function (mark) {\\n        return "<mark name=\\\'".concat(mark, "\\\'/>");\\n      });\\n      return "".concat(existingMarks.join(\\\'\\\')).concat(markedWords.join(\\\'\\\'));\\n    }\\n    /**\\r\\n     * Processes an input object for mapping an array\\r\\n     * of words to specific mark keys. Converts the input\\r\\n     * map into a Map with a more efficient format for\\r\\n     * performing mark injection.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {object} map - Input object that maps mark keys\\r\\n     * to arrays of words.\\r\\n     *\\r\\n     * @returns {Map} - Map for internal use.\\r\\n     */\\n\\n  }, {\\n    key: "_processInputMap",\\n    value: function _processInputMap(map) {\\n      var internalMap = new Map();\\n      var list = [];\\n      Object.entries(map).forEach(function (_ref) {\\n        var _ref2 = TextToSpeechUtils_slicedToArray(_ref, 2),\\n            key = _ref2[0],\\n            value = _ref2[1];\\n\\n        if (!Array.isArray(value)) {\\n          throw new Error("Cannot generate SSML marks from map \\\\"".concat(map, "\\\\" because value for key \\\'").concat(key, "\\\' is not an array."));\\n        }\\n\\n        value.forEach(function (word) {\\n          var lowerCaseWord = word.toLowerCase();\\n          list = internalMap.get(lowerCaseWord);\\n\\n          if (list !== undefined && !list.includes(key)) {\\n            internalMap.set(lowerCaseWord, [].concat(TextToSpeechUtils_toConsumableArray(list), [key]));\\n          } else {\\n            internalMap.set(lowerCaseWord, [key]);\\n          }\\n        });\\n      });\\n      return internalMap;\\n    }\\n  }]);\\n\\n  return TextToSpeechUtils;\\n}();\\n\\n/* harmony default export */ const awspack_TextToSpeechUtils = (TextToSpeechUtils);\\n;// CONCATENATED MODULE: ./src/core/awspack/AbstractSpeech.js\\nfunction AbstractSpeech_toConsumableArray(arr) { return AbstractSpeech_arrayWithoutHoles(arr) || AbstractSpeech_iterableToArray(arr) || AbstractSpeech_unsupportedIterableToArray(arr) || AbstractSpeech_nonIterableSpread(); }\\n\\nfunction AbstractSpeech_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction AbstractSpeech_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AbstractSpeech_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AbstractSpeech_arrayLikeToArray(o, minLen); }\\n\\nfunction AbstractSpeech_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction AbstractSpeech_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AbstractSpeech_arrayLikeToArray(arr); }\\n\\nfunction AbstractSpeech_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction AbstractSpeech_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AbstractSpeech_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AbstractSpeech_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractSpeech_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractSpeech_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * Class that can play back audio generated by AWS Polly and synchronized emit\\r\\n * speechmark messages.\\r\\n *\\r\\n * @abstract\\r\\n */\\n\\nvar AbstractSpeech = /*#__PURE__*/function () {\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/TextToSpeechFeature} speaker - The feature that owns the Speech and\\r\\n   * will emit speechmark messages.\\r\\n   * @param {string} text - The text of the speech.\\r\\n   * @param {Array.<Object>} [speechmarks=[]] - An array of speechmark objects representing\\r\\n   * the text and timing of the speech.\\r\\n   */\\n  function AbstractSpeech(speaker, text) {\\n    var speechmarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\\n\\n    AbstractSpeech_classCallCheck(this, AbstractSpeech);\\n\\n    this._speaker = speaker;\\n    this._text = text;\\n    this._speechmarks = speechmarks;\\n    this._speechmarkOffset = 0;\\n\\n    this._reset();\\n  }\\n  /**\\r\\n   * Reset tracking properties.\\r\\n   *\\r\\n   * @private\\r\\n   *\\r\\n   * @param {number} [currentTime=0] - Time to use for _startTime.\\r\\n   */\\n\\n\\n  AbstractSpeech_createClass(AbstractSpeech, [{\\n    key: "_reset",\\n    value: function _reset() {\\n      var currentTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\\n      this._startTime = currentTime;\\n      this._localTime = 0;\\n      this._pauseTime = 0;\\n      this._playing = false;\\n      this._markIter = this._speechmarks.values();\\n\\n      var _this$_markIter$next = this._markIter.next(),\\n          value = _this$_markIter$next.value,\\n          done = _this$_markIter$next.done;\\n\\n      this._currentMark = value;\\n      this._endTime = this._speechmarks.length ? this._speechmarks[this._speechmarks.length - 1].time : 0;\\n      this._done = done;\\n      this._promise = null;\\n    }\\n    /**\\r\\n     * Create a new promise that will stop playback and emit messages for this speech.\\r\\n     *\\r\\n     * @param {Function=} onFinish - Funciton to execute once the speech stops.\\r\\n     * @param {onError=} onError - Function to execute if the speech encounters an\\r\\n     * error.\\r\\n     * @param {Function=} onInterrupt - Function to execute if the speech is canceled.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_createPromise",\\n    value: function _createPromise(onFinish, onError, onInterrupt) {\\n      var _this = this;\\n\\n      var onResolve = function onResolve(value) {\\n        _this._playing = false;\\n\\n        _this._speaker.emit(_this._speaker.constructor.EVENTS.stop, _this);\\n\\n        _this._speaker.constructor.emit(_this._speaker.constructor.EVENTS.stop, _this);\\n\\n        if (typeof onFinish === \\\'function\\\') {\\n          onFinish(value);\\n        }\\n      };\\n\\n      var onReject = function onReject(e) {\\n        _this._playing = false;\\n\\n        _this._speaker.emit(_this._speaker.constructor.EVENTS.stop, _this);\\n\\n        _this._speaker.constructor.emit(_this._speaker.constructor.EVENTS.stop, _this);\\n\\n        console.error("".concat(_this.constructor.name, " encountered an unexpected error: ").concat(e));\\n\\n        if (typeof onError === \\\'function\\\') {\\n          onError(e);\\n        }\\n      };\\n\\n      var onCancel = function onCancel(value) {\\n        _this._playing = false;\\n\\n        _this._speaker.emit(_this._speaker.constructor.EVENTS.interrupt, _this);\\n\\n        _this._speaker.constructor.emit(_this._speaker.constructor.EVENTS.interrupt, _this);\\n\\n        if (typeof onInterrupt === \\\'function\\\') {\\n          onInterrupt(value);\\n        }\\n      };\\n\\n      this._promise = new core_Deferred(undefined, onResolve, onReject, onCancel);\\n      return this._promise;\\n    }\\n    /**\\r\\n     * Return whether or not the speech has reached it\\\'s end.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "_checkFinished",\\n    value: function _checkFinished() {\\n      return this._done && this._localTime >= this._endTime;\\n    }\\n    /**\\r\\n     * Gets the playback state of the audio.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "playing",\\n    get: function get() {\\n      return this._playing;\\n    }\\n    /**\\r\\n     * Gets the text of the speech.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {string}\\r\\n     */\\n\\n  }, {\\n    key: "text",\\n    get: function get() {\\n      return this._text;\\n    }\\n    /**\\r\\n     * Gets a shallow copy of the speechmarks array for the speech.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {Array.<Object>}\\r\\n     */\\n\\n  }, {\\n    key: "speechmarks",\\n    get: function get() {\\n      return AbstractSpeech_toConsumableArray(this._speechmarks);\\n    }\\n    /**\\r\\n     * Gets and sets the number of seconds to offset speechmark emission.\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "speechmarkOffset",\\n    get: function get() {\\n      return this._speechmarkOffset / 1000;\\n    },\\n    set: function set(offset) {\\n      this._speechmarkOffset = offset * 1000; // Store as milliseconds\\n    }\\n    /**\\r\\n     * Emit speechmark messages as they are encountered in sync with audio.\\r\\n     *\\r\\n     * @param {number} currentTime - Current global time when update was called.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(currentTime) {\\n      if (!this._playing) {\\n        return;\\n      } // Update local audio time\\n\\n\\n      this._localTime = currentTime - this._startTime;\\n\\n      if (!this._done) {\\n        // Emit speechmark messages for marks up to the current time\\n        while (!this._done && this._currentMark.time + this._speechmarkOffset <= this._localTime) {\\n          this._speaker.emit(this._speaker.constructor.EVENTS[this._currentMark.type], {\\n            speech: this,\\n            mark: this._currentMark\\n          });\\n\\n          var _this$_markIter$next2 = this._markIter.next(),\\n              value = _this$_markIter$next2.value,\\n              done = _this$_markIter$next2.done;\\n\\n          this._currentMark = value;\\n          this._done = done;\\n        }\\n      } // End playback\\n\\n\\n      if (this._checkFinished()) {\\n        this.stop();\\n\\n        this._reset();\\n      }\\n    }\\n    /**\\r\\n     * Play the speech from the beginning.\\r\\n     *\\r\\n     * @param {number} currentTime - Current global time when play was called.\\r\\n     * @param {Function=} onFinish - Optional function to execute once the speech\\r\\n     * promise resolves.\\r\\n     * @param {Function=} onError - Optional function to execute if the speech\\r\\n     * encounters and error during playback.\\r\\n     * @param {Function=} onInterrupt - Optional function to execute if the speech\\r\\n     * is canceled.\\r\\n     *\\r\\n     * @returns {Deferred} Resolves once the speech reaches the end of playback.\\r\\n     */\\n\\n  }, {\\n    key: "play",\\n    value: function play(currentTime, onFinish, onError, onInterrupt) {\\n      this._reset(currentTime);\\n\\n      this._playing = true;\\n\\n      this._speaker.emit(this._speaker.constructor.EVENTS.play, this);\\n\\n      this._speaker.constructor.emit(this._speaker.constructor.EVENTS.play, this);\\n\\n      return this._createPromise(onFinish, onError, onInterrupt);\\n    }\\n    /**\\r\\n     * Pause the speech at the current time.\\r\\n     *\\r\\n     * @param {number} currentTime - Current global time when pause was called.\\r\\n     */\\n\\n  }, {\\n    key: "pause",\\n    value: function pause(currentTime) {\\n      this._playing = false;\\n      this._pauseTime = currentTime;\\n\\n      this._speaker.emit(this._speaker.constructor.EVENTS.pause, this);\\n\\n      this._speaker.constructor.emit(this._speaker.constructor.EVENTS.pause, this);\\n    }\\n    /**\\r\\n     * Resume the speech at the current time.\\r\\n     *\\r\\n     * @param {number} currentTime - Current global time when resume was called.\\r\\n     * @param {Function=} onFinish - Optional function to execute once the speech\\r\\n     * promise resolves.\\r\\n     * @param {Function=} onError - Optional function to execute if the speech\\r\\n     * encounters and error during playback.\\r\\n     * @param {Function=} onInterrupt - Optional function to execute if the speech\\r\\n     * is canceled.\\r\\n     *\\r\\n     * @returns {Deferred} Resolves once the speech reaches the end of playback.\\r\\n     */\\n\\n  }, {\\n    key: "resume",\\n    value: function resume(currentTime, onFinish, onError, onInterrupt) {\\n      // Play from the beginning if the speech hasn\\\'t played yet\\n      if (!this._promise) {\\n        this._reset(currentTime);\\n\\n        this._createPromise(onFinish, onError, onInterrupt);\\n      }\\n\\n      this._playing = true;\\n      this._startTime += currentTime - this._pauseTime;\\n\\n      this._speaker.emit(this._speaker.constructor.EVENTS.resume, this);\\n\\n      this._speaker.constructor.emit(this._speaker.constructor.EVENTS.resume, this);\\n\\n      return this._promise;\\n    }\\n    /**\\r\\n     * Cancels playback of the speech at the current time. Cancel the speech promise.\\r\\n     */\\n\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      if (this._promise) {\\n        this._promise.cancel();\\n\\n        this._promise = null;\\n      }\\n\\n      this._playing = false;\\n    }\\n    /**\\r\\n     * Stop the speech and reset time to the beginning. Resolve the speech promise.\\r\\n     */\\n\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      if (this._promise) {\\n        this._promise.resolve();\\n\\n        this._promise = null;\\n      }\\n\\n      this._playing = false;\\n    }\\n  }]);\\n\\n  return AbstractSpeech;\\n}();\\n\\n/* harmony default export */ const awspack_AbstractSpeech = (AbstractSpeech);\\n;// CONCATENATED MODULE: ./src/core/awspack/Speech.js\\nfunction Speech_typeof(obj) { "@babel/helpers - typeof"; return Speech_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Speech_typeof(obj); }\\n\\nfunction Speech_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Speech_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Speech_createClass(Constructor, protoProps, staticProps) { if (protoProps) Speech_defineProperties(Constructor.prototype, protoProps); if (staticProps) Speech_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction Speech_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Speech_get = Reflect.get; } else { Speech_get = function _get(target, property, receiver) { var base = Speech_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Speech_get.apply(this, arguments); }\\n\\nfunction Speech_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Speech_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction Speech_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Speech_setPrototypeOf(subClass, superClass); }\\n\\nfunction Speech_setPrototypeOf(o, p) { Speech_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Speech_setPrototypeOf(o, p); }\\n\\nfunction Speech_createSuper(Derived) { var hasNativeReflectConstruct = Speech_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Speech_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Speech_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Speech_possibleConstructorReturn(this, result); }; }\\n\\nfunction Speech_possibleConstructorReturn(self, call) { if (call && (Speech_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Speech_assertThisInitialized(self); }\\n\\nfunction Speech_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction Speech_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction Speech_getPrototypeOf(o) { Speech_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Speech_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * The built-in class for asynchronous Promises.\\r\\n * @external Audio\\r\\n * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio\\r\\n */\\n\\n/**\\r\\n * @extends AbstractSpeech\\r\\n * @alias core/Speech\\r\\n */\\n\\nvar Speech = /*#__PURE__*/function (_AbstractSpeech) {\\n  Speech_inherits(Speech, _AbstractSpeech);\\n\\n  var _super = Speech_createSuper(Speech);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {TextToSpeech} speaker - The owner of the Speech that will emit speechmark\\r\\n   * messages.\\r\\n   * @param {string} text - The text of the speech.\\r\\n   * @param {Array.<Object>} [speechmarks=[]] - An array of speechmark objects representing\\r\\n   * the text and timing of the speech.\\r\\n   * @param {Object} audioConfig - Object containing audio and url.\\r\\n   * @param {external:Audio} audioConfig.audio - Playable audio object.\\r\\n   */\\n  function Speech(speaker, text) {\\n    var _this;\\n\\n    var speechmarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\\n    var audioConfig = arguments.length > 3 ? arguments[3] : undefined;\\n\\n    Speech_classCallCheck(this, Speech);\\n\\n    _this = _super.call(this, speaker, text, speechmarks);\\n    _this._audio = audioConfig.audio; // Keep track of whether the audio has finished playing through\\n\\n    _this._audio.onended = function () {\\n      _this._audioFinished = true;\\n    };\\n\\n    _this._audioFinished = true;\\n    return _this;\\n  }\\n\\n  Speech_createClass(Speech, [{\\n    key: "_checkFinished",\\n    value: function _checkFinished() {\\n      return this._audioFinished && Speech_get(Speech_getPrototypeOf(Speech.prototype), "_checkFinished", this).call(this);\\n    }\\n    /**\\r\\n     * Gets the playable audio for the speech.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {external:Audio}\\r\\n     */\\n\\n  }, {\\n    key: "audio",\\n    get: function get() {\\n      return this._audio;\\n    }\\n    /**\\r\\n     * Gets the audio volume for the speech.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "volume",\\n    get: function get() {\\n      return this._audio.volume;\\n    }\\n    /**\\r\\n     * Sets the audio volume for the speech.\\r\\n     */\\n    ,\\n    set: function set(volume) {\\n      this._audio.volume = volume;\\n    }\\n    /**\\r\\n     * Set the audio\\\'s current local time and play it.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_playAudio",\\n    value: function _playAudio() {\\n      var _this2 = this;\\n\\n      if (this._speechmarkOffset < 0) {\\n        this._audio.currentTime = this._speechmarkOffset;\\n        setTimeout(function () {\\n          if (_this2._playing) {\\n            _this2._audio.currentTime = (_this2._localTime + _this2._speechmarkOffset) / 1000;\\n\\n            _this2._audio.play();\\n          }\\n        }, -this._speechmarkOffset);\\n      } else {\\n        this._audio.currentTime = 0;\\n\\n        this._audio.play();\\n      }\\n    }\\n    /**\\r\\n     * Pause the audio once it is playable.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_pauseAudio",\\n    value: function _pauseAudio() {\\n      var _this3 = this;\\n\\n      this._audio.play().then(function () {\\n        if (!_this3._playing) {\\n          _this3._audio.pause();\\n        }\\n      });\\n    }\\n  }, {\\n    key: "play",\\n    value: function play(currentTime, onFinish, onError, onInterrupt) {\\n      this._audioFinished = false;\\n\\n      this._playAudio();\\n\\n      return Speech_get(Speech_getPrototypeOf(Speech.prototype), "play", this).call(this, currentTime, onFinish, onError, onInterrupt);\\n    }\\n  }, {\\n    key: "pause",\\n    value: function pause(currentTime) {\\n      this._pauseAudio();\\n\\n      Speech_get(Speech_getPrototypeOf(Speech.prototype), "pause", this).call(this, currentTime);\\n    }\\n  }, {\\n    key: "resume",\\n    value: function resume(currentTime, onFinish, onError, onInterrupt) {\\n      this._audioFinished = false;\\n\\n      this._audio.play();\\n\\n      return Speech_get(Speech_getPrototypeOf(Speech.prototype), "resume", this).call(this, currentTime, onFinish, onError, onInterrupt);\\n    }\\n  }, {\\n    key: "cancel",\\n    value: function cancel() {\\n      this._pauseAudio();\\n\\n      Speech_get(Speech_getPrototypeOf(Speech.prototype), "cancel", this).call(this);\\n    }\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      this._pauseAudio();\\n\\n      this._audio.currentTime = 0;\\n\\n      Speech_get(Speech_getPrototypeOf(Speech.prototype), "stop", this).call(this);\\n    }\\n  }]);\\n\\n  return Speech;\\n}(awspack_AbstractSpeech);\\n\\n/* harmony default export */ const awspack_Speech = (Speech);\\n;// CONCATENATED MODULE: ./src/core/awspack/AbstractTextToSpeechFeature.js\\nfunction AbstractTextToSpeechFeature_typeof(obj) { "@babel/helpers - typeof"; return AbstractTextToSpeechFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AbstractTextToSpeechFeature_typeof(obj); }\\n\\nfunction AbstractTextToSpeechFeature_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction AbstractTextToSpeechFeature_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AbstractTextToSpeechFeature_ownKeys(Object(source), !0).forEach(function (key) { AbstractTextToSpeechFeature_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AbstractTextToSpeechFeature_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction AbstractTextToSpeechFeature_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction AbstractTextToSpeechFeature_slicedToArray(arr, i) { return AbstractTextToSpeechFeature_arrayWithHoles(arr) || AbstractTextToSpeechFeature_iterableToArrayLimit(arr, i) || AbstractTextToSpeechFeature_unsupportedIterableToArray(arr, i) || AbstractTextToSpeechFeature_nonIterableRest(); }\\n\\nfunction AbstractTextToSpeechFeature_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction AbstractTextToSpeechFeature_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction AbstractTextToSpeechFeature_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction AbstractTextToSpeechFeature_toConsumableArray(arr) { return AbstractTextToSpeechFeature_arrayWithoutHoles(arr) || AbstractTextToSpeechFeature_iterableToArray(arr) || AbstractTextToSpeechFeature_unsupportedIterableToArray(arr) || AbstractTextToSpeechFeature_nonIterableSpread(); }\\n\\nfunction AbstractTextToSpeechFeature_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\\n\\nfunction AbstractTextToSpeechFeature_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AbstractTextToSpeechFeature_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AbstractTextToSpeechFeature_arrayLikeToArray(o, minLen); }\\n\\nfunction AbstractTextToSpeechFeature_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\\n\\nfunction AbstractTextToSpeechFeature_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AbstractTextToSpeechFeature_arrayLikeToArray(arr); }\\n\\nfunction AbstractTextToSpeechFeature_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction AbstractTextToSpeechFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction AbstractTextToSpeechFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction AbstractTextToSpeechFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AbstractTextToSpeechFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AbstractTextToSpeechFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction AbstractTextToSpeechFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AbstractTextToSpeechFeature_get = Reflect.get; } else { AbstractTextToSpeechFeature_get = function _get(target, property, receiver) { var base = AbstractTextToSpeechFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AbstractTextToSpeechFeature_get.apply(this, arguments); }\\n\\nfunction AbstractTextToSpeechFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AbstractTextToSpeechFeature_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction AbstractTextToSpeechFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AbstractTextToSpeechFeature_setPrototypeOf(subClass, superClass); }\\n\\nfunction AbstractTextToSpeechFeature_setPrototypeOf(o, p) { AbstractTextToSpeechFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AbstractTextToSpeechFeature_setPrototypeOf(o, p); }\\n\\nfunction AbstractTextToSpeechFeature_createSuper(Derived) { var hasNativeReflectConstruct = AbstractTextToSpeechFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AbstractTextToSpeechFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AbstractTextToSpeechFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AbstractTextToSpeechFeature_possibleConstructorReturn(this, result); }; }\\n\\nfunction AbstractTextToSpeechFeature_possibleConstructorReturn(self, call) { if (call && (AbstractTextToSpeechFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AbstractTextToSpeechFeature_assertThisInitialized(self); }\\n\\nfunction AbstractTextToSpeechFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction AbstractTextToSpeechFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction AbstractTextToSpeechFeature_getPrototypeOf(o) { AbstractTextToSpeechFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AbstractTextToSpeechFeature_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n\\n\\n/**\\r\\n * The Amazon Polly service object.\\r\\n * @external Polly\\r\\n * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly.html\\r\\n */\\n\\n/**\\r\\n * The presigner object that can be used to generate presigned urls for the Polly service.\\r\\n * @external Presigner\\r\\n * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly/Presigner.html\\r\\n */\\n// Available options for Polly\\n\\nvar engines = [\\\'standard\\\', \\\'neural\\\'];\\nvar audioFormats = [\\\'mp3\\\', \\\'ogg_vorbis\\\', \\\'pcm\\\'];\\nvar speechmarkTypes = [\\\'sentence\\\', \\\'ssml\\\', \\\'viseme\\\', \\\'word\\\'];\\nvar sampleRates = {\\n  mp3: {\\n    rates: [\\\'8000\\\', \\\'16000\\\', \\\'22050\\\', \\\'24000\\\'],\\n    defaults: {\\n      standard: \\\'2050\\\',\\n      neural: \\\'2400\\\'\\n    }\\n  },\\n  pcm: {\\n    rates: [\\\'8000\\\', \\\'16000\\\'],\\n    defaults: {\\n      standard: \\\'1600\\\',\\n      neural: \\\'1600\\\'\\n    }\\n  }\\n};\\nsampleRates.ogg_vorbis = sampleRates.mp3;\\nvar awsVersion;\\n/**\\r\\n * Base class for turning text input into playable audio. There should be one instance\\r\\n * per speaker, each instance can play only one piece of text at a time.\\r\\n *\\r\\n * @extends AbstractHostFeature\\r\\n * @abstract\\r\\n *\\r\\n * @property {(number|undefined)} AWS_VERSION - Gets the version of AWS SDK being\\r\\n * used. Will be undefined until [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\\r\\n * has been successfully executed.\\r\\n * @property {string} [POLLY_MIN_NEURAL_VERSION=\\\'2.503\\\'] - Gets the minimum version\\r\\n * of the AWS SDK that is necessary to use neural voices with AWS Polly.\\r\\n * @property {Object} POLLY_DEFAULTS - Default values to use with calls to {@link external:Polly}.\\r\\n * @property {string} [POLLY_DEFAULTS.Engine=\\\'standard\\\']\\r\\n * @property {Array.<string>} [POLLY_DEFAULTS.LexiconNames=[]]\\r\\n * @property {string} [POLLY_DEFAULTS.OutputFormat=\\\'mp3\\\']\\r\\n * @property {string} [POLLY_DEFAULTS.SampleRate=\\\'22050\\\']\\r\\n * @property {string} [POLLY_DEFAULTS.Text=\\\'\\\']\\r\\n * @property {string} [POLLY_DEFAULTS.TextType=\\\'ssml\\\']\\r\\n * @property {string} [POLLY_DEFAULTS.VoiceId=\\\'Amy\\\']\\r\\n * @property {string} [POLLY_DEFAULTS.LanguageCode=\\\'en-GB\\\']\\r\\n * @property {string} [POLLY_DEFAULTS.LanguageName=\\\'British English\\\']\\r\\n * @property {Array.<string>} [POLLY_VOICES=[]] - An array of voices available in\\r\\n * Polly. Will be empty until [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\\r\\n * has been successfully executed. See [Polly Documentation]{@link https://docs.aws.amazon.com/polly/latest/dg/voicelist.html}\\r\\n * for a full list of available voices.\\r\\n * @property {Object} [POLLY_LANGUAGES={}] - An object that maps language names\\r\\n * to language codes that are available in Polly. Will be empty until\\r\\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\\r\\n * has been successfully executed. See [Polly Documentation]{@link https://docs.aws.amazon.com/polly/latest/dg/SupportedLanguage.html}\\r\\n * for a full list of available languages and corresponding codes.\\r\\n * @property {Object} [POLLY_LANGUAGE_CODES={}] - An object that maps language codes\\r\\n * to language names that are available in Polly. Will be empty until\\r\\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\\r\\n * has been successfully executed. See [Polly Documentation]{@link https://docs.aws.amazon.com/polly/latest/dg/SupportedLanguage.html}\\r\\n * for a full list of available languages and corresponding codes.\\r\\n * @property {Object} EVENTS - Built-in messages that the feature emits. When the\\r\\n * feature is added to a {@link core/HostObject}, event names will be prefixed by the\\r\\n * name of the feature class + \\\'.\\\'.\\r\\n * @property {string} [EVENTS.ready=onReadyEvent] - Message that is emitted after\\r\\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService} has been\\r\\n * successfully executed.\\r\\n * @property {string} [EVENTS.play=onPlayEvent] - Message that is emitted after\\r\\n * each call to [play]{@link AbstractTextToSpeechFeature#play}. The speech that was played\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.pause=onPauseEvent] - Message that is emitted after\\r\\n * each call to [pause]{@link AbstractTextToSpeechFeature#pause}. The speech that was paused\\r\\n * is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.resume=onResumeEvent] - Message that is emitted after\\r\\n * each call to [resume]{@link AbstractTextToSpeechFeature#resume}. The speech that was\\r\\n * resumed is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.interrupt=onInterruptEvent] - Message that is emitted\\r\\n * if there is a current speech in progress and [play]{@link AbstractTextToSpeechFeature#play}\\r\\n * or [resume]{@link AbstractTextToSpeechFeature#resume} are executed for a new speech.\\r\\n * The speech that was interrupted is supplied as an argument to listener functions.\\r\\n * @property {string} [EVENTS.stop=onStopEvent] - Message that is emitted after\\r\\n * each call to [stop]{@link AbstractTextToSpeechFeature#stop} and when a speech reaches\\r\\n * the end of playback. The speech that was stopped is supplied as an argument\\r\\n * to listener functions.\\r\\n * @property {string} [EVENTS.sentence=onSentenceEvent] - Message that is emitted\\r\\n * each time a sentence speechmark is encountered whose timestamp matches up with\\r\\n * the speech audio\\\'s current time. The sentence speechmark object is supplied as\\r\\n * an argument to listener functions.\\r\\n * @property {string} [EVENTS.word=onWordEvent] - Message that is emitted\\r\\n * each time a word speechmark is encountered whose timestamp matches up with\\r\\n * the speech audio\\\'s current time. The word speechmark object is supplied as\\r\\n * an argument to listener functions.\\r\\n * @property {string} [EVENTS.viseme=onVisemeEvent] - Message that is emitted\\r\\n * each time a viseme speechmark is encountered whose timestamp matches up with\\r\\n * the speech audio\\\'s current time. The viseme speechmark object is supplied as\\r\\n * an argument to listener functions.\\r\\n * @property {string} [EVENTS.ssml=onSsmlEvent] - Message that is emitted\\r\\n * each time a ssml speechmark is encountered whose timestamp matches up with\\r\\n * the speech audio\\\'s current time. The ssml speechmark object is supplied as\\r\\n * an argument to listener functions.\\r\\n * @property {Object} SERVICES - AWS services that are necessary for the feature\\r\\n * to function.\\r\\n * @property {external:Polly} SERVICES.polly - The Polly service that is used\\r\\n * to synthesize speechmarks. Will be undefined until [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\\r\\n * has been successfully executed\\r\\n * @property {external:Presigner} SERVICES.presigner - The Polly Presigner\\r\\n * object that is used to synthesize speech audio. Will be undefined until\\r\\n * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}\\r\\n * has been successfully executed.\\r\\n */\\n\\nvar AbstractTextToSpeechFeature = /*#__PURE__*/function (_AbstractHostFeature) {\\n  AbstractTextToSpeechFeature_inherits(AbstractTextToSpeechFeature, _AbstractHostFeature);\\n\\n  var _super = AbstractTextToSpeechFeature_createSuper(AbstractTextToSpeechFeature);\\n\\n  /**\\r\\n   * @constructor\\r\\n   *\\r\\n   * @param {core/HostObject} host - Host object managing the feature.\\r\\n   * @param {Object=} options - Options that will be sent to Polly for each speech.\\r\\n   * @param {string=} options.voice - The name of the Polly voice to use for all speech.\\r\\n   * @param {string=} options.engine - The name of the Polly engine to use for all speech.\\r\\n   * @param {string=} options.language - The name of the language to use for all speech.\\r\\n   * @param {audioFormat} [options.audioFormat=\\\'mp3\\\'] - The format to use for generated\\r\\n   * audio for all speeches.\\r\\n   * @param {string=} options.sampleRate - The sample rate for audio files for all\\r\\n   * speeches.\\r\\n   * @param {number} [options.speechmarkOffset=0] - Amount of time in seconds to\\r\\n   * offset speechmark event emission from the audio.\\r\\n   * @param {number} [options.minEndMarkDuration=.05] - The minimum amount of time\\r\\n   * in seconds that the last speechmark of each type in a speech can have its\\r\\n   * duration property set to.\\r\\n   * @param {number} [options.volume=1] - The default volume to play speech audio\\r\\n   * with.\\r\\n   * @param {boolean} [options.isGlobal=false] - Whether the audio source should default\\r\\n   * to global regardless of whether or not it is attached to an object.\\r\\n   */\\n  function AbstractTextToSpeechFeature(host) {\\n    var _this;\\n\\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\\n      voice: undefined,\\n      engine: undefined,\\n      language: undefined,\\n      audioFormat: \\\'mp3\\\',\\n      sampleRate: undefined,\\n      speechmarkOffset: 0,\\n      minEndMarkDuration: 0.05,\\n      volume: 1,\\n      isGlobal: false\\n    };\\n\\n    AbstractTextToSpeechFeature_classCallCheck(this, AbstractTextToSpeechFeature);\\n\\n    _this = _super.call(this, host);\\n    _this._speechCache = {};\\n    _this._currentSpeech = null;\\n    _this._currentPromise = null;\\n    _this._isValidated = false;\\n    _this.speechmarkOffset = Number.isNaN(Number(options.speechmarkOffset)) ? 0 : Number(options.speechmarkOffset);\\n    _this.minEndMarkDuration = Number.isNaN(Number(options.minEndMarkDuration)) ? 0 : Number(options.minEndMarkDuration);\\n    _this.volume = Number.isNaN(Number(options.volume)) ? 1 : Number(options.volume);\\n    _this._isGlobal = options.isGlobal || false;\\n    _this._promises = {\\n      volume: core_Deferred.resolve()\\n    };\\n    _this._volumePaused = false; // Set default options for each speech\\n\\n    _this._voice = options.voice || _this.constructor.POLLY_DEFAULTS.VoiceId;\\n    _this._language = options.language || _this.constructor.POLLY_DEFAULTS.LanguageName;\\n    _this._engine = engines.includes(options.engine) ? options.engine : _this.constructor.POLLY_DEFAULTS.Engine;\\n    _this._audioFormat = audioFormats.includes(options.audioFormat) ? options.audioFormat : _this.constructor.POLLY_DEFAULTS.OutputFormat;\\n    _this._sampleRate = sampleRates[_this._audioFormat].rates.includes(options.sampleRate) ? options.sampleRate : _this.constructor.POLLY_DEFAULTS.SampleRate;\\n    return _this;\\n  }\\n  /**\\r\\n   * Store Polly, Presigner and AWS SDK Version for use across all instances.\\r\\n   *\\r\\n   * @param {external:Polly} polly - Polly instance to use to generate speechmarks.\\r\\n   * @param {external:Presigner} presigner - Presigner instance to use to generate\\r\\n   * audio URLs.\\r\\n   * @param {string} version - Version of the AWS SDK to use to validate voice options.\\r\\n   */\\n\\n\\n  AbstractTextToSpeechFeature_createClass(AbstractTextToSpeechFeature, [{\\n    key: "currentSpeech",\\n    get:\\n    /**\\r\\n     * Gets the text of the currently playing speech.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {string}\\r\\n     */\\n    function get() {\\n      if (this._currentSpeech) {\\n        return this._currentSpeech.text;\\n      } else {\\n        return null;\\n      }\\n    }\\n    /**\\r\\n     * Gets and sets the number of seconds to offset speechmark emission.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "speechmarkOffset",\\n    get: function get() {\\n      return this._speechmarkOffset;\\n    },\\n    set: function set(offset) {\\n      this._speechmarkOffset = offset;\\n\\n      if (this._currentSpeech) {\\n        this._currentSpeech.speechmarkOffset = offset;\\n      }\\n    }\\n    /**\\r\\n     * Gets and sets the The minimum amount of time in seconds that the last\\r\\n     * speechmark of each type in a speech can have its duration property set to.\\r\\n     *\\r\\n     * @type number\\r\\n     */\\n\\n  }, {\\n    key: "minEndMarkDuration",\\n    get: function get() {\\n      return this._minEndMarkDuration / 1000;\\n    },\\n    set: function set(duration) {\\n      this._minEndMarkDuration = duration * 1000;\\n    }\\n    /**\\r\\n     * Appends the Sumerian Hosts custom user-agent to a string if it is not\\r\\n     * already present.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} currentUserAgent - String to append to if needed.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "_validateEngine",\\n    value:\\n    /**\\r\\n     * Checks if a given engine type is compatible with the AWS SDK version. If it\\r\\n     * is, return the original value. Otherwise return a default.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} engine - The type of Polly voice engine to validate.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n    function _validateEngine(engine) {\\n      // Default to the standard engine if neural is not available for this version\\n      if (engine === undefined || this.constructor.AWS_VERSION < this.constructor.POLLY_MIN_NEURAL_VERSION) {\\n        engine = this.constructor.POLLY_DEFAULTS.Engine;\\n      }\\n\\n      return engine;\\n    }\\n    /**\\r\\n     * Checks if a given audio format type is compatible with Polly. If it is, return\\r\\n     * the original value. Otherwise return a default.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} engine - The type of Polly voice engine to validate.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "_validateFormat",\\n    value: function _validateFormat(format) {\\n      if (format === undefined || !audioFormats.includes(format)) {\\n        format = this.constructor.POLLY_DEFAULTS.OutputFormat;\\n      }\\n\\n      return format;\\n    }\\n    /**\\r\\n     * Checks if a given audio sampling rate is compatible with the current audio\\r\\n     * format. If it is, return the original value. Otherwise return a default.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} engine - The type of Polly voice engine to validate.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "_validateRate",\\n    value: function _validateRate(rate) {\\n      // Use default if specified sample rate is not valid for the audio format\\n      if (rate === undefined || !sampleRates[this._audioFormat].rates.includes(rate)) {\\n        rate = sampleRates[this._audioFormat].defaults[this._engine];\\n      }\\n\\n      return rate;\\n    }\\n    /**\\r\\n     * Checks if a given Polly voice id is compatible with the current Polly engine.\\r\\n     * If it is, return the original value. Otherwise return a default.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} engine - The type of Polly voice engine to validate.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "_validateVoice",\\n    value: function _validateVoice(voiceId) {\\n      var voice = this.constructor.POLLY_VOICES.find(function (v) {\\n        return v.Id === voiceId;\\n      }); // Use the default voice if the voice isn\\\'t supported by the engine\\n\\n      if (voice === undefined || !voice.SupportedEngines.includes(this._engine)) {\\n        voiceId = this.constructor.POLLY_DEFAULTS.VoiceId;\\n      }\\n\\n      return voiceId;\\n    }\\n    /**\\r\\n     * Checks if a given Polly language is compatible with the current Polly voice.\\r\\n     * If it is, return the original value. Otherwise return a default.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} engine - The type of Polly voice engine to validate.\\r\\n     *\\r\\n     * @returns {string}\\r\\n     */\\n\\n  }, {\\n    key: "_validateLanguage",\\n    value: function _validateLanguage(language) {\\n      var _this2 = this;\\n\\n      var voice = this.constructor.POLLY_VOICES.find(function (v) {\\n        return v.Id === _this2._voice;\\n      });\\n      var languageCode = this.constructor.POLLY_LANGUAGES[language]; // Find the languages available for the current voice\\n\\n      var availableCodes = [voice.LanguageCode];\\n\\n      if (voice.AdditionalLanguageCodes) {\\n        availableCodes.push.apply(availableCodes, AbstractTextToSpeechFeature_toConsumableArray(voice.AdditionalLanguageCodes));\\n      } // If the current voice doesn\\\'t support the language, use its default\\n\\n\\n      if (!availableCodes.includes(languageCode)) {\\n        language = this.constructor.POLLY_LANGUAGE_CODES[voice.LanguageCode];\\n      }\\n\\n      return language;\\n    }\\n    /**\\r\\n     * Validate the current Polly options to make sure they are compatible with each\\r\\n     * other.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_validate",\\n    value: function _validate() {\\n      // Validate speech parameters\\n      this._engine = this._validateEngine(this._engine);\\n      this._audioFormat = this._validateFormat(this._audioFormat);\\n      this._sampleRate = this._validateRate(this._sampleRate);\\n      this._voice = this._validateVoice(this._voice);\\n      this._language = this._validateLanguage(this._language);\\n      this._isValidated = true;\\n    }\\n    /**\\r\\n     * Return an object containing parameters compatible with Polly.synthesizeSpeech.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @returns {Object}\\r\\n     */\\n\\n  }, {\\n    key: "_getConfig",\\n    value: function _getConfig() {\\n      // Make sure parameters have been validated\\n      if (this.constructor.isReady && !this._isValidated) {\\n        this._validate();\\n      } // Create a config object compatible with Polly\\n\\n\\n      return {\\n        Engine: this._engine,\\n        OutputFormat: this._audioFormat,\\n        SampleRate: this._sampleRate,\\n        VoiceId: this._voice,\\n        LanguageCode: this.constructor.POLLY_LANGUAGES[this._language]\\n      };\\n    }\\n    /**\\r\\n     * Update Polly parameters with options from a given config. All stored speeches\\r\\n     * will be updated to use the new parameters, unless the speech text is contained\\r\\n     * in the \\\'skipSpeeches\\\' parameter.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} config - Polly parameter options to overwrite.\\r\\n     * @param {Array.<string>} skipSpeeches - Text of any speeches that should not\\r\\n     * have parameters updated.\\r\\n     *\\r\\n     * @returns {Object}\\r\\n     */\\n\\n  }, {\\n    key: "_updateConfig",\\n    value: function _updateConfig(config) {\\n      var _this3 = this;\\n\\n      var skipSpeeches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\\n\\n      var currentConfig = this._getConfig();\\n\\n      if (!config) {\\n        return currentConfig;\\n      }\\n\\n      this._isValidated = false;\\n      var currentConfigStr = JSON.stringify(currentConfig); // Update options\\n\\n      if (config.Engine) {\\n        this._engine = config.Engine;\\n      }\\n\\n      if (config.audioFormat) {\\n        this._audioFormat = config.audioFormat;\\n      }\\n\\n      if (config.SampleRate) {\\n        this._sampleRate = config.SampleRate;\\n      }\\n\\n      if (config.VoiceId) {\\n        this._voice = config.VoiceId;\\n      }\\n\\n      if (config.Language) {\\n        this._language = config.Language;\\n      } // Validate the config\\n\\n\\n      var validConfig = this._getConfig(); // Exit if nothing has changed\\n\\n\\n      var configStr = JSON.stringify(validConfig);\\n\\n      if (currentConfigStr === configStr) {\\n        this._isValidated = true;\\n        return validConfig;\\n      } // Update all cached configs\\n\\n\\n      Object.entries(this._speechCache).forEach(function (_ref) {\\n        var _ref2 = AbstractTextToSpeechFeature_slicedToArray(_ref, 2),\\n            text = _ref2[0],\\n            speech = _ref2[1];\\n\\n        // Check if this is a skipped speech\\n        if (skipSpeeches.includes(text)) {\\n          return;\\n        }\\n\\n        var speechConfigStr = JSON.stringify(speech.config); // Update the speech with new parameters\\n\\n        if (speechConfigStr !== configStr) {\\n          _this3._updateSpeech(text, validConfig);\\n        }\\n      });\\n      return validConfig;\\n    }\\n    /**\\r\\n     * Update an existing speech, or add a new speech with new Polly parameters with\\r\\n     * options from a given config.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} text - The text of the speech to update.\\r\\n     * @param {Object} config - Polly parameter options to update.\\r\\n     * @param {boolean} [force=false] - Whether to force the speech to be updated\\r\\n     * if no parameters have changes.\\r\\n     *\\r\\n     * @returns {AbstractSpeech}\\r\\n     */\\n\\n  }, {\\n    key: "_updateSpeech",\\n    value: function _updateSpeech(text, config) {\\n      var _this4 = this;\\n\\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\\n      var speech = this._speechCache[text] || {}; // Exit if nothing has changed and force is false\\n\\n      if (!force && config !== undefined && speech.config && JSON.stringify(config) === JSON.stringify(speech.config)) {\\n        return speech;\\n      } // Create separate parameters for audio and speechmark generation\\n\\n\\n      var audioParams = AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, config), {}, {\\n        Text: text,\\n        TextType: \\\'ssml\\\'\\n      });\\n\\n      var speechmarkParams = AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, audioParams), {}, {\\n        OutputFormat: \\\'json\\\',\\n        SpeechMarkTypes: speechmarkTypes\\n      }); // Generate audio and speechmarks\\n\\n\\n      speech.config = config;\\n      speech.promise = Promise.all([this._synthesizeSpeechmarks(speechmarkParams), this._synthesizeAudio(audioParams)]).then(function (results) {\\n        return _this4._createSpeech.apply(_this4, [text].concat(AbstractTextToSpeechFeature_toConsumableArray(results)));\\n      });\\n      this._speechCache[text] = speech;\\n      return speech;\\n    }\\n    /**\\r\\n     * Create a new Speech object for the speaker.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {TextToSpeech} speaker - The TextToSpeech instance that will own the speech.\\r\\n     * @param {string} text - Text of the speech.\\r\\n     * @param {Object} speechmarks - Speechmarks for the speech.\\r\\n     * @param {Object} audioConfig - Audio for the speech.\\r\\n     *\\r\\n     * @returns {AbstractSpeech}\\r\\n     */\\n\\n  }, {\\n    key: "_createSpeech",\\n    value: function _createSpeech(text, speechmarks, audioConfig) {\\n      return new awspack_AbstractSpeech(this, text, speechmarks, audioConfig);\\n    }\\n    /**\\r\\n     * Create presigned URL of speech audio for the given speech text.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\\r\\n     *\\r\\n     * @returns {Deferred} Resolves with an object containing the audio URL.\\r\\n     */\\n\\n  }, {\\n    key: "_synthesizeAudio",\\n    value: function _synthesizeAudio(params) {\\n      var _this5 = this;\\n\\n      return new core_Deferred(function (resolve, reject) {\\n        _this5.constructor.SERVICES.presigner.getSynthesizeSpeechUrl(params, function (error, url) {\\n          if (!error) {\\n            resolve({\\n              url: url\\n            });\\n          } else {\\n            reject(error);\\n          }\\n        });\\n      });\\n    }\\n    /**\\r\\n     * Retrieves and parses speechmarks for the given speech text.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\\r\\n     *\\r\\n     * @returns {Deferred} Resolves with an array of speechmark objects\\r\\n     */\\n\\n  }, {\\n    key: "_synthesizeSpeechmarks",\\n    value: function _synthesizeSpeechmarks(params) {\\n      var _this6 = this;\\n\\n      return this.constructor.SERVICES.polly.synthesizeSpeech(params).promise().then(function (result) {\\n        // Convert charcodes to string\\n        var jsonString = JSON.stringify(result.AudioStream);\\n        var json = JSON.parse(jsonString);\\n        var dataStr = json.data.map(function (c) {\\n          return String.fromCharCode(c);\\n        }).join(\\\'\\\');\\n        var markTypes = {\\n          sentence: [],\\n          word: [],\\n          viseme: [],\\n          ssml: []\\n        };\\n        var endMarkTypes = {\\n          sentence: null,\\n          word: null,\\n          viseme: null,\\n          ssml: null\\n        }; // Split by enclosing {} to create speechmark objects\\n\\n        var speechMarks = AbstractTextToSpeechFeature_toConsumableArray(dataStr.matchAll(/\\\\{.*?\\\\}(?=\\\\n|$)/gm)).map(function (match) {\\n          var mark = JSON.parse(match[0]); // Set the duration of the last speechmark stored matching this one\\\'s type\\n\\n          var numMarks = markTypes[mark.type].length;\\n\\n          if (numMarks > 0) {\\n            var lastMark = markTypes[mark.type][numMarks - 1];\\n            lastMark.duration = mark.time - lastMark.time;\\n          }\\n\\n          markTypes[mark.type].push(mark);\\n          endMarkTypes[mark.type] = mark;\\n          return mark;\\n        }); // Find the time of the latest speechmark\\n\\n\\n        var endTimes = [];\\n\\n        if (endMarkTypes.sentence) {\\n          endTimes.push(endMarkTypes.sentence.time);\\n        }\\n\\n        if (endMarkTypes.word) {\\n          endTimes.push(endMarkTypes.word.time);\\n        }\\n\\n        if (endMarkTypes.viseme) {\\n          endTimes.push(endMarkTypes.viseme.time);\\n        }\\n\\n        if (endMarkTypes.ssml) {\\n          endTimes.push(endMarkTypes.ssml.time);\\n        }\\n\\n        var endTime = Math.max.apply(Math, endTimes); // Calculate duration for the ending speechMarks of each type\\n\\n        if (endMarkTypes.sentence) {\\n          endMarkTypes.sentence.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.sentence.time);\\n        }\\n\\n        if (endMarkTypes.word) {\\n          endMarkTypes.word.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.word.time);\\n        }\\n\\n        if (endMarkTypes.viseme) {\\n          endMarkTypes.viseme.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.viseme.time);\\n        }\\n\\n        if (endMarkTypes.ssml) {\\n          endMarkTypes.ssml.duration = Math.max(_this6._minEndMarkDuration, endTime - endMarkTypes.ssml.time);\\n        }\\n\\n        return speechMarks;\\n      });\\n    }\\n    /**\\r\\n     * Returns a Speech object that has the given text.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} text - The text content of the Speech.\\r\\n     * @param {Object=} config - Options to update the Speech with.\\r\\n     *\\r\\n     * @returns {Deferred} Resolves with Speech or null;\\r\\n     */\\n\\n  }, {\\n    key: "_getSpeech",\\n    value: function _getSpeech(text, config) {\\n      // Make sure AWS services exist\\n      if (!this.constructor.isReady) {\\n        var e = \\\'AWS services have not been initialized.\\\';\\n        return core_Deferred.reject(e);\\n      } // Make sure its possible to generate speeches\\n\\n\\n      if (!text) {\\n        var _e2 = \\\'Cannot play a speech with no text.\\\';\\n        return core_Deferred.reject(_e2);\\n      } // Update the speech with options\\n\\n\\n      text = awspack_TextToSpeechUtils.validateText(text);\\n      config = this._updateConfig(config, text);\\n      return this._updateSpeech(text, config).promise;\\n    }\\n    /**\\r\\n     * Adds a namespace to the host with the name of the feature to contain properties\\r\\n     * and methods from the feature that users of the host need access to.\\r\\n     *\\r\\n     * @see TextToSpeechFeature\\r\\n     */\\n\\n  }, {\\n    key: "installApi",\\n    value: function installApi() {\\n      var _this7 = this;\\n\\n      /**\\r\\n       * @inner\\r\\n       * @namespace TextToSpeechFeature\\r\\n       */\\n      var api = AbstractTextToSpeechFeature_get(AbstractTextToSpeechFeature_getPrototypeOf(AbstractTextToSpeechFeature.prototype), "installApi", this).call(this);\\n\\n      Object.assign(api, {\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#play\\r\\n         */\\n        play: this.play.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#pause\\r\\n         */\\n        pause: this.pause.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#resume\\r\\n         */\\n        resume: this.resume.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#stop\\r\\n         */\\n        stop: this.stop.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#getVolume\\r\\n         */\\n        getVolume: this.getVolume.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#setVolume\\r\\n         */\\n        setVolume: this.setVolume.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#pauseVolume\\r\\n         */\\n        pauseVolume: this.pauseVolume.bind(this),\\n\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @method\\r\\n         * @see AbstractTextToSpeechFeature#resumeVolume\\r\\n         */\\n        resumeVolume: this.resumeVolume.bind(this)\\n      });\\n      Object.defineProperties(api, {\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @see AbstractTextToSpeechFeature#speechmarkOffset\\r\\n         */\\n        speechmarkOffset: {\\n          get: function get() {\\n            return _this7.speechmarkOffset;\\n          },\\n          set: function set(offset) {\\n            _this7.speechmarkOffset = offset;\\n          }\\n        }\\n      });\\n      return api;\\n    }\\n    /**\\r\\n     * Gets and sets the volume used for all audio clips played by the speaker.\\r\\n     *\\r\\n     * @type {number}\\r\\n     */\\n\\n  }, {\\n    key: "volume",\\n    get: function get() {\\n      return this._volume;\\n    }\\n    /**\\r\\n     * Gets whether or not the speaker\\\'s volume value is currently being tweened.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n    ,\\n    set: function set(volume) {\\n      this._volume = core_MathUtils.clamp(volume);\\n    }\\n  }, {\\n    key: "volumePending",\\n    get: function get() {\\n      return this._promises.volume && this._promises.volume.pending;\\n    }\\n    /**\\r\\n     * Gets the volume used for all audio clips played by the speaker.\\r\\n     *\\r\\n     * @returns {number}\\r\\n     */\\n\\n  }, {\\n    key: "getVolume",\\n    value: function getVolume() {\\n      return this.volume;\\n    }\\n    /**\\r\\n     * Updates the volume used for all audio clips played by the speaker over time.\\r\\n     *\\r\\n     * @param {number} volume - Target volume value.\\r\\n     * @param {number} [seconds=0] - Amount of time it will take to reach the target\\r\\n     * volume.\\r\\n     * @param {Function=} easingFn - Easing function used for interpolation.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "setVolume",\\n    value: function setVolume(volume) {\\n      var seconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n      var easingFn = arguments.length > 2 ? arguments[2] : undefined;\\n\\n      if (this.volumePending) {\\n        this._promises.volume.cancel();\\n      }\\n\\n      volume = core_MathUtils.clamp(volume);\\n      this._promises.volume = animpack_AnimationUtils.interpolateProperty(this, \\\'volume\\\', volume, {\\n        seconds: seconds,\\n        easingFn: easingFn\\n      });\\n      return this._promises.volume;\\n    }\\n    /**\\r\\n     * Pause interpolation happening on the speaker\\\'s volume property.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "pauseVolume",\\n    value: function pauseVolume() {\\n      this._volumePaused = true;\\n      return this.volumePending;\\n    }\\n    /**\\r\\n     * Resume any interpolation happening on the speaker\\\'s volume property.\\r\\n     *\\r\\n     * @returns {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "resumeVolume",\\n    value: function resumeVolume() {\\n      this._volumePaused = false;\\n      return this.volumePending;\\n    }\\n    /**\\r\\n     * Update the currently playing speech.\\r\\n     *\\r\\n     * @param {number} deltaTime - Time since the last update.\\r\\n     */\\n\\n  }, {\\n    key: "update",\\n    value: function update(deltaTime) {\\n      if (!this._volumePaused) {\\n        this._promises.volume.execute(deltaTime);\\n      }\\n\\n      if (this._currentSpeech && this._currentSpeech.playing) {\\n        this._currentSpeech.volume = this._volume;\\n\\n        this._currentSpeech.update(this._host.now);\\n\\n        AbstractTextToSpeechFeature_get(AbstractTextToSpeechFeature_getPrototypeOf(AbstractTextToSpeechFeature.prototype), "update", this).call(this, deltaTime);\\n      }\\n    }\\n    /**\\r\\n     * Set the current speech to a new asset and update the speech\\\'s speechmark\\r\\n     * offset value to match that of the feature.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {AbstractSpeech} speech - Speech to set as current.\\r\\n     */\\n\\n  }, {\\n    key: "_setCurrentSpeech",\\n    value: function _setCurrentSpeech(speech) {\\n      speech.speechmarkOffset = this._speechmarkOffset;\\n      this._currentSpeech = speech;\\n    }\\n    /**\\r\\n     * Create a promise that will play/resume a speech with the given text after\\r\\n     * the audio context attempts to resume and speech audio is retrieved from Polly.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {string} text - The text of the new speech to play.\\r\\n     * @param {Object=} config - Optional parameters for the speech.\\r\\n     * @param {string} [playMethod = \\\'play\\\'] - Method to execute on the resulting\\r\\n     * Speech object. Valid options are \\\'play\\\' and \\\'resume\\\'.\\r\\n     */\\n\\n  }, {\\n    key: "_startSpeech",\\n    value: function _startSpeech(text, config) {\\n      var _this8 = this;\\n\\n      var playMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \\\'play\\\';\\n\\n      // If no text is provided, try to use the current speech\\n      if (text === undefined && playMethod === \\\'resume\\\' && this._currentSpeech) {\\n        text = this._currentSpeech.text;\\n      }\\n\\n      var currentPromise = this._currentPromise || {\\n        play: new core_Deferred(undefined, function () {\\n          currentPromise.speech.cancel();\\n        }, function () {\\n          currentPromise.speech.cancel();\\n        }, function () {\\n          currentPromise.speech.cancel();\\n        }),\\n        speech: new core_Deferred()\\n      };\\n      this._currentPromise = currentPromise;\\n\\n      this._getSpeech(text, config).then(function (speech) {\\n        // Exit if the promise is no longer pending because of user interaction\\n        if (!currentPromise.play.pending) {\\n          return;\\n        } else if (_this8._currentPromise !== currentPromise) {\\n          // Cancel if another call to play has already been made\\n          currentPromise.play.cancel();\\n          return;\\n        } // Reset current speech when the speech ends\\n\\n\\n        var onFinish = function onFinish() {\\n          _this8._currentSpeech = null;\\n          _this8._currentPromise = null;\\n        }; // Cancel the currently playing speech\\n\\n\\n        if (_this8._currentSpeech && _this8._currentSpeech.playing) {\\n          if (playMethod === \\\'play\\\') {\\n            _this8._currentSpeech.cancel();\\n          } else if (playMethod === \\\'resume\\\' && _this8._currentSpeech.audio !== speech.audio) {\\n            _this8._currentSpeech.cancel();\\n          }\\n        }\\n\\n        _this8._setCurrentSpeech(speech); // Play the speech\\n\\n\\n        currentPromise.speech = speech[playMethod](_this8._host.now, onFinish, onFinish, onFinish);\\n        currentPromise.speech.then(function () {\\n          if (currentPromise.speech.resolved) {\\n            currentPromise.play.resolve();\\n          } else {\\n            currentPromise.play.cancel();\\n          }\\n        })["catch"](function (error) {\\n          currentPromise.play.reject(error);\\n        });\\n      })["catch"](function (e) {\\n        e = "Cannot ".concat(playMethod, " speech ").concat(text, " on host ").concat(_this8.host.id, ". ").concat(e);\\n        currentPromise.play.reject(e);\\n      });\\n\\n      return currentPromise.play;\\n    }\\n    /**\\r\\n     * Stop any speeches currently playing and play a new speech from the beginning.\\r\\n     *\\r\\n     * @param {string} text - The text of the new speech to play.\\r\\n     * @param {Object=} config - Optional parameters for the speech.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "play",\\n    value: function play(text, config) {\\n      return this._startSpeech(text, config, \\\'play\\\');\\n    }\\n    /**\\r\\n     * If a speech is currently playing, pause it at the current time.\\r\\n     */\\n\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      if (this._currentSpeech && this._currentSpeech.playing) {\\n        this._currentSpeech.pause(this._host.now);\\n      } else {\\n        console.warn("Cannot pause speech on host ".concat(this.host.id, ". No speech is currently playing"));\\n      }\\n    }\\n    /**\\r\\n     * Stop any speeches currently playing and resume a new speech from the current\\r\\n     * time.\\r\\n     *\\r\\n     * @param {string=} text - The text of the new speech to play. If undefined and\\r\\n     * there is a current speech that is paused, the current speech will be resumed.\\r\\n     * @param {Object=} config - Optional parameters for the speech.\\r\\n     *\\r\\n     * @returns {Deferred}\\r\\n     */\\n\\n  }, {\\n    key: "resume",\\n    value: function resume(text, config) {\\n      return this._startSpeech(text, config, \\\'resume\\\');\\n    }\\n    /**\\r\\n     * If a speech is currently playing, stop playback and reset time.\\r\\n     */\\n\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      if (this._currentSpeech && this._currentSpeech.playing) {\\n        this._currentSpeech.stop();\\n\\n        this._currentSpeech = null;\\n      } else {\\n        console.warn("Cannot stop speech on host ".concat(this.host.id, ". No speech is currently playing."));\\n      }\\n    }\\n  }, {\\n    key: "discard",\\n    value: function discard() {\\n      if (this._currentSpeech && this._currentSpeech.playing) {\\n        this._currentSpeech.stop();\\n      }\\n\\n      delete this._speechCache;\\n\\n      AbstractTextToSpeechFeature_get(AbstractTextToSpeechFeature_getPrototypeOf(AbstractTextToSpeechFeature.prototype), "discard", this).call(this);\\n    }\\n  }], [{\\n    key: "initializeService",\\n    value: function initializeService(polly, presigner, version) {\\n      var _this9 = this;\\n\\n      // Make sure all were defined\\n      if (polly === undefined || presigner === undefined || version === undefined) {\\n        throw new Error(\\\'Cannot initialize TextToSpeech feature. All arguments must be defined.\\\');\\n      } // Add sumerian hosts user-agent\\n\\n\\n      if (polly.config) {\\n        polly.config.customUserAgent = this._withCustomUserAgent(polly.config.customUserAgent);\\n      }\\n\\n      if (presigner.service && presigner.service.config) {\\n        presigner.service.config.customUserAgent = this._withCustomUserAgent(presigner.service.config.customUserAgent);\\n      }\\n\\n      this._isReady = false; // Store parameters\\n\\n      this.SERVICES.polly = polly;\\n      this.SERVICES.presigner = presigner;\\n      awsVersion = version; // Clear the current polly objects\\n\\n      var availableVoices = this.POLLY_VOICES;\\n      availableVoices.length = 0;\\n      var availableLanguages = this.POLLY_LANGUAGES;\\n      Object.keys(availableLanguages).forEach(function (name) {\\n        delete availableLanguages[name];\\n      });\\n      var availableLanguageCodes = this.POLLY_LANGUAGE_CODES;\\n      Object.keys(availableLanguageCodes).forEach(function (name) {\\n        delete availableLanguageCodes[name];\\n      }); // Re-populate according to version\\n\\n      var minNeuralSdk = this.POLLY_MIN_NEURAL_VERSION;\\n      return this.SERVICES.polly.describeVoices().promise().then(function (response) {\\n        var allCodes = {};\\n        response.Voices.forEach(function (voice) {\\n          if (voice.SupportedEngines.includes(\\\'standard\\\') || version >= minNeuralSdk) {\\n            availableVoices.push(voice);\\n          }\\n\\n          availableVoices.forEach(function (voice) {\\n            availableLanguages[voice.LanguageName] = voice.LanguageCode;\\n            allCodes[voice.LanguageCode] = voice.LanguageName;\\n          });\\n        });\\n        Object.entries(availableLanguages).forEach(function (_ref3) {\\n          var _ref4 = AbstractTextToSpeechFeature_slicedToArray(_ref3, 2),\\n              name = _ref4[0],\\n              code = _ref4[1];\\n\\n          availableLanguageCodes[code] = name;\\n        }); // Notify that we\\\'re ready to generate speeches\\n\\n        _this9._isReady = true;\\n\\n        _this9.emit(_this9.EVENTS.ready);\\n      });\\n    }\\n    /**\\r\\n     * Indicates whether or not the class is capable of generating speech audio. Polly,\\r\\n     * Presigner and AWS SDK version number must have been defined using\\r\\n     * [initializeService]{@link AbstractTextToSpeechFeature.initializeService}.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "isReady",\\n    get: function get() {\\n      return this._isReady;\\n    }\\n  }, {\\n    key: "_withCustomUserAgent",\\n    value: function _withCustomUserAgent(currentUserAgent) {\\n      var sumerianHostsUserAgent = \\\'request-source/SumerianHosts\\\';\\n\\n      if (currentUserAgent == null) {\\n        return sumerianHostsUserAgent;\\n      }\\n\\n      if (currentUserAgent.indexOf(sumerianHostsUserAgent) !== -1) {\\n        return currentUserAgent;\\n      }\\n\\n      return currentUserAgent.concat(\\\' \\\', sumerianHostsUserAgent);\\n    }\\n  }]);\\n\\n  return AbstractTextToSpeechFeature;\\n}(core_AbstractHostFeature);\\n\\nObject.defineProperties(AbstractTextToSpeechFeature, {\\n  AWS_VERSION: {\\n    get: function get() {\\n      return awsVersion;\\n    }\\n  },\\n  POLLY_MIN_NEURAL_VERSION: {\\n    value: \\\'2.503\\\',\\n    writable: false\\n  },\\n  POLLY_DEFAULTS: {\\n    value: {\\n      Engine: \\\'standard\\\',\\n      LexiconNames: [],\\n      OutputFormat: \\\'mp3\\\',\\n      SampleRate: \\\'22050\\\',\\n      Text: \\\'\\\',\\n      TextType: \\\'ssml\\\',\\n      VoiceId: \\\'Amy\\\',\\n      LanguageCode: \\\'en-GB\\\',\\n      LanguageName: \\\'British English\\\'\\n    },\\n    writable: false\\n  },\\n  POLLY_VOICES: {\\n    value: [],\\n    writable: false\\n  },\\n  POLLY_LANGUAGES: {\\n    value: {},\\n    writable: false\\n  },\\n  POLLY_LANGUAGE_CODES: {\\n    value: {},\\n    writable: false\\n  },\\n  _isReady: {\\n    value: false,\\n    writable: true\\n  },\\n  EVENTS: {\\n    value: AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, Object.getPrototypeOf(AbstractTextToSpeechFeature).EVENTS), {}, {\\n      ready: \\\'onReadyEvent\\\',\\n      play: \\\'onPlayEvent\\\',\\n      pause: \\\'onPauseEvent\\\',\\n      resume: \\\'onResumeEvent\\\',\\n      interrupt: \\\'onInterruptEvent\\\',\\n      stop: \\\'onStopEvent\\\',\\n      sentence: \\\'onSentenceEvent\\\',\\n      word: \\\'onWordEvent\\\',\\n      viseme: \\\'onVisemeEvent\\\',\\n      ssml: \\\'onSsmlEvent\\\'\\n    })\\n  },\\n  SERVICES: {\\n    value: AbstractTextToSpeechFeature_objectSpread(AbstractTextToSpeechFeature_objectSpread({}, Object.getPrototypeOf(AbstractTextToSpeechFeature).SERVICES), {}, {\\n      polly: undefined,\\n      presigner: undefined\\n    })\\n  }\\n});\\n/* harmony default export */ const awspack_AbstractTextToSpeechFeature = (AbstractTextToSpeechFeature);\\n;// CONCATENATED MODULE: ./src/core/awspack/TextToSpeechFeature.js\\nfunction TextToSpeechFeature_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechFeature_typeof(obj); }\\n\\nfunction TextToSpeechFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction TextToSpeechFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction TextToSpeechFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\\n\\nfunction TextToSpeechFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { TextToSpeechFeature_get = Reflect.get; } else { TextToSpeechFeature_get = function _get(target, property, receiver) { var base = TextToSpeechFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return TextToSpeechFeature_get.apply(this, arguments); }\\n\\nfunction TextToSpeechFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = TextToSpeechFeature_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction TextToSpeechFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TextToSpeechFeature_setPrototypeOf(subClass, superClass); }\\n\\nfunction TextToSpeechFeature_setPrototypeOf(o, p) { TextToSpeechFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TextToSpeechFeature_setPrototypeOf(o, p); }\\n\\nfunction TextToSpeechFeature_createSuper(Derived) { var hasNativeReflectConstruct = TextToSpeechFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TextToSpeechFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TextToSpeechFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TextToSpeechFeature_possibleConstructorReturn(this, result); }; }\\n\\nfunction TextToSpeechFeature_possibleConstructorReturn(self, call) { if (call && (TextToSpeechFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TextToSpeechFeature_assertThisInitialized(self); }\\n\\nfunction TextToSpeechFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction TextToSpeechFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction TextToSpeechFeature_getPrototypeOf(o) { TextToSpeechFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TextToSpeechFeature_getPrototypeOf(o); }\\n\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n/**\\r\\n * @extends AbstractTextToSpeechFeature\\r\\n * @alias core/TextToSpeechFeature\\r\\n */\\n\\nvar TextToSpeechFeature = /*#__PURE__*/function (_AbstractTextToSpeech) {\\n  TextToSpeechFeature_inherits(TextToSpeechFeature, _AbstractTextToSpeech);\\n\\n  var _super = TextToSpeechFeature_createSuper(TextToSpeechFeature);\\n\\n  function TextToSpeechFeature() {\\n    var _this;\\n\\n    TextToSpeechFeature_classCallCheck(this, TextToSpeechFeature);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _super.call.apply(_super, [this].concat(args));\\n    _this._enabled = false;\\n\\n    _this._setAudioContext();\\n\\n    _this._observeAudioContext();\\n\\n    return _this;\\n  }\\n  /**\\r\\n   * Store the audio context that will be used to ensure audio can be played.\\r\\n   *\\r\\n   * @private\\r\\n   */\\n\\n\\n  TextToSpeechFeature_createClass(TextToSpeechFeature, [{\\n    key: "_setAudioContext",\\n    value: function _setAudioContext() {\\n      this._audioContext = new AudioContext();\\n    }\\n    /**\\r\\n     * Listen for state changes on the audio context to determine whether the feature\\r\\n     * is enabled.\\r\\n     *\\r\\n     * @private\\r\\n     */\\n\\n  }, {\\n    key: "_observeAudioContext",\\n    value: function _observeAudioContext() {\\n      var _this2 = this;\\n\\n      if (this._audioContext) {\\n        this._audioContext.onstatechange = function () {\\n          if (_this2._audioContext.state === \\\'running\\\') {\\n            _this2._enabled = true;\\n          } else {\\n            _this2._enabled = false;\\n            console.warn(\\\'The audio context is not running. Speech will not be able to be played until it is resumed. Use the "TextToSpeechFeature.resumeAudio" method to try to resume it after a user gesture.\\\');\\n          }\\n        };\\n\\n        this._audioContext.onstatechange();\\n      }\\n    }\\n    /**\\r\\n     * Create an Audio object of speech audio for the given speech text.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\\r\\n     *\\r\\n     * @returns {Promise} Resolves with an object containing the audio URL and Audio\\r\\n     * object.\\r\\n     */\\n\\n  }, {\\n    key: "_synthesizeAudio",\\n    value: function _synthesizeAudio(params) {\\n      var _this3 = this;\\n\\n      return TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "_synthesizeAudio", this).call(this, params).then(function (result) {\\n        var url = result.url; // Create an Audio object that points to the presigned url\\n\\n        var audio = new Audio(url);\\n        audio.loop = _this3.loop;\\n        audio.crossOrigin = \\\'anonymous\\\';\\n        audio.preload = \\\'auto\\\';\\n        result.audio = audio;\\n        return new Promise(function (resolve) {\\n          // Resolve once the minimum amount is loaded\\n          audio.addEventListener(\\\'canplaythrough\\\', function () {\\n            resolve(result);\\n          }); // Start loading the audio\\n\\n          document.body.appendChild(audio);\\n          audio.load();\\n        });\\n      });\\n    }\\n    /**\\r\\n     * Create a new Speech object for the speaker.\\r\\n     *\\r\\n     * @private\\r\\n     *\\r\\n     * @param {TextToSpeech} speaker - The TextToSpeech instance that will own the speech.\\r\\n     * @param {string} text - Text of the speech.\\r\\n     * @param {Object} speechmarks - Speechmarks for the speech.\\r\\n     * @param {Object} audioConfig - Audio for the speech.\\r\\n     *\\r\\n     * @returns {AbstractSpeech}\\r\\n     */\\n\\n  }, {\\n    key: "_createSpeech",\\n    value: function _createSpeech(text, speechmarks, audioConfig) {\\n      return new awspack_Speech(this, text, speechmarks, audioConfig);\\n    }\\n    /**\\r\\n     * Gets whether or not the audio context is running and speech can be played.\\r\\n     *\\r\\n     * @readonly\\r\\n     * @type {boolean}\\r\\n     */\\n\\n  }, {\\n    key: "enabled",\\n    get: function get() {\\n      return this._enabled;\\n    }\\n    /**\\r\\n     * Try to resume the audio context. This will be automatically executed each time\\r\\n     * speech is played or resumed. If using manually, it should be called after a\\r\\n     * user interaction occurs.\\r\\n     *\\r\\n     * @returns {Deferred} - Resolves once the audio context has resumed.\\r\\n     */\\n\\n  }, {\\n    key: "resumeAudio",\\n    value: function resumeAudio() {\\n      var _this4 = this;\\n\\n      var promise = new core_Deferred(function (resolve, reject) {\\n        _this4._audioContext.resume().then(function () {\\n          _this4._enabled = true;\\n          resolve();\\n        })["catch"](function (e) {\\n          _this4._enabled = false;\\n          reject(e);\\n        });\\n      });\\n      return promise;\\n    }\\n  }, {\\n    key: "_startSpeech",\\n    value: function _startSpeech(text, config) {\\n      var _this5 = this;\\n\\n      var playMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \\\'play\\\';\\n      var currentPromise = {\\n        play: new core_Deferred(undefined, function () {\\n          currentPromise.speech.cancel();\\n        }, function () {\\n          currentPromise.speech.cancel();\\n        }, function () {\\n          currentPromise.speech.cancel();\\n        }),\\n        speech: new core_Deferred()\\n      };\\n      this._currentPromise = currentPromise; // Try to start the audio context\\n\\n      this.resumeAudio().then(function () {\\n        // Exit if the promise is no longer pending because of user interaction\\n        if (!currentPromise.play.pending) {\\n          return;\\n        } // Cancel if another call to play has already been made\\n        else if (_this5._currentPromise !== currentPromise) {\\n          currentPromise.play.cancel();\\n          return;\\n        } // The audio context is running so the speech can be played\\n\\n\\n        if (_this5._enabled) {\\n          TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "_startSpeech", _this5).call(_this5, text, config, playMethod);\\n        } // Reject if the audio context is not running\\n        else {\\n          currentPromise.reject(new Error("Cannot ".concat(playMethod, " speech on host ").concat(_this5._host.id, ". The audio context is not running. Use the \\\\"TextToSpeechFeature.resumeAudio\\\\" method to try to resume it after a user gesture.")));\\n        }\\n      });\\n      return currentPromise.play;\\n    }\\n  }, {\\n    key: "play",\\n    value: function play(text, config) {\\n      return this._startSpeech(text, config, \\\'play\\\');\\n    }\\n  }, {\\n    key: "resume",\\n    value: function resume(text, config) {\\n      return this._startSpeech(text, config, \\\'resume\\\');\\n    }\\n  }, {\\n    key: "installApi",\\n    value: function installApi() {\\n      var _this6 = this;\\n\\n      var api = TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "installApi", this).call(this);\\n\\n      Object.defineProperties(api, {\\n        /**\\r\\n         * @memberof TextToSpeechFeature\\r\\n         * @instance\\r\\n         * @see core/TextToSpeechFeature#enabled\\r\\n         */\\n        enabled: {\\n          get: function get() {\\n            return _this6._enabled;\\n          }\\n        }\\n      });\\n      return api;\\n    }\\n  }]);\\n\\n  return TextToSpeechFeature;\\n}(awspack_AbstractTextToSpeechFeature);\\n\\n/* harmony default export */ const awspack_TextToSpeechFeature = (TextToSpeechFeature);\\n;// CONCATENATED MODULE: ./src/core/awspack/index.js\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n\\n\\n\\n\\n/**\\r\\n * @module core/awspack\\r\\n */\\n\\n/* harmony default export */ const awspack = ({\\n  /**\\r\\n   * @see core/AbstractTextToSpeechFeature\\r\\n   */\\n  AbstractTextToSpeechFeature: awspack_AbstractTextToSpeechFeature,\\n\\n  /**\\r\\n   * @see core/TextToSpeechFeature\\r\\n   */\\n  TextToSpeechFeature: awspack_TextToSpeechFeature,\\n\\n  /**\\r\\n   * @see core/TextToSpeechUtils\\r\\n   */\\n  TextToSpeechUtils: awspack_TextToSpeechUtils,\\n\\n  /** \\r\\n   * @see core/AbstractSpeech\\r\\n   */\\n  AbstractSpeech: awspack_AbstractSpeech,\\n\\n  /**\\r\\n   * @see core/Speech\\r\\n   */\\n  Speech: awspack_Speech\\n});\\n;// CONCATENATED MODULE: ./src/core/index.js\\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\\n// SPDX-License-Identifier: MIT-0\\n\\n/**\\r\\n * @module core/HOST\\r\\n */\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar core_Easing = animpack.Easing,\\n    core_AnimationFeature = animpack.AnimationFeature,\\n    core_AnimationTypes = animpack.AnimationTypes,\\n    core_AnimationLayer = animpack.AnimationLayer,\\n    core_LayerBlendModes = animpack.LayerBlendModes,\\n    core_DefaultLayerBlendMode = animpack.DefaultLayerBlendMode,\\n    core_SingleState = animpack.SingleState,\\n    core_TransitionState = animpack.TransitionState,\\n    core_FreeBlendState = animpack.FreeBlendState,\\n    core_QueueState = animpack.QueueState,\\n    core_RandomAnimationState = animpack.RandomAnimationState,\\n    core_Blend1dState = animpack.Blend1dState,\\n    core_Blend2dState = animpack.Blend2dState,\\n    core_AnimationUtils = animpack.AnimationUtils;\\n\\nvar core_AbstractTextToSpeechFeature = awspack.AbstractTextToSpeechFeature,\\n    core_TextToSpeechFeature = awspack.TextToSpeechFeature,\\n    core_TextToSpeechUtils = awspack.TextToSpeechUtils,\\n    core_AbstractSpeech = awspack.AbstractSpeech,\\n    core_Speech = awspack.Speech;\\n/* harmony default export */ const core = ({\\n  /**\\r\\n   * @see env\\r\\n   */\\n  env: env,\\n\\n  /**\\r\\n   * @see Utils\\r\\n   */\\n  Utils: core_Utils,\\n\\n  /**\\r\\n   * @see MathUtils\\r\\n   */\\n  MathUtils: core_MathUtils,\\n\\n  /**\\r\\n   * @see Deferred\\r\\n   */\\n  Deferred: core_Deferred,\\n\\n  /**\\r\\n   * @see core/Messenger\\r\\n   */\\n  Messenger: core_Messenger,\\n\\n  /**\\r\\n   * @see core/HostObject\\r\\n   */\\n  HostObject: core_HostObject,\\n\\n  /**\\r\\n   * @see core/LipsyncFeature\\r\\n   */\\n  LipsyncFeature: core_LipsyncFeature,\\n\\n  /**\\r\\n   * @see GestureFeature\\r\\n   */\\n  GestureFeature: core_GestureFeature,\\n\\n  /**\\r\\n   * @see core/PointOfInterestFeature\\r\\n   */\\n  PointOfInterestFeature: core_PointOfInterestFeature,\\n\\n  /**\\r\\n   * @see DefaultVisemeMap\\r\\n   */\\n  DefaultVisemeMap: DefaultVisemeMap,\\n\\n  /**\\r\\n   * @see DefaultGestureWords\\r\\n   */\\n  DefaultGestureWords: DefaultGestureWords,\\n\\n  /**\\r\\n   * @see AxisMap\\r\\n   */\\n  AxisMap: AxisMap,\\n\\n  /**\\r\\n   * @see core/AnimationFeature\\r\\n   */\\n  AnimationFeature: core_AnimationFeature,\\n\\n  /**\\r\\n   * @see AnimationLayer\\r\\n   */\\n  AnimationLayer: core_AnimationLayer,\\n\\n  /**\\r\\n   * @see core/SingleState\\r\\n   */\\n  SingleState: core_SingleState,\\n\\n  /**\\r\\n   * @see TransitionState\\r\\n   */\\n  TransitionState: core_TransitionState,\\n\\n  /**\\r\\n   * @see FreeBlendState\\r\\n   */\\n  FreeBlendState: core_FreeBlendState,\\n\\n  /**\\r\\n   * @see QueueState\\r\\n   */\\n  QueueState: core_QueueState,\\n\\n  /**\\r\\n   * @see RandomAnimationState\\r\\n   */\\n  RandomAnimationState: core_RandomAnimationState,\\n\\n  /**\\r\\n   * @see Blend1dState\\r\\n   */\\n  Blend1dState: core_Blend1dState,\\n\\n  /**\\r\\n   * @see Blend2dState\\r\\n   */\\n  Blend2dState: core_Blend2dState,\\n\\n  /**\\r\\n   * @see AnimationUtils\\r\\n   */\\n  AnimationUtils: core_AnimationUtils,\\n  Easing: core_Easing,\\n\\n  /**\\r\\n   * @see LayerBlendModes\\r\\n   */\\n  LayerBlendModes: core_LayerBlendModes,\\n\\n  /**\\r\\n   * @see DefaultLayerBlendMode\\r\\n   */\\n  DefaultLayerBlendMode: core_DefaultLayerBlendMode,\\n\\n  /**\\r\\n   * @see AnimationTypes\\r\\n   */\\n  AnimationTypes: core_AnimationTypes,\\n  // AWS Pack\\n\\n  /**\\r\\n  * @see core/AbstractTextToSpeechFeature\\r\\n  */\\n  AbstractTextToSpeechFeature: core_AbstractTextToSpeechFeature,\\n\\n  /**\\r\\n   * @see core/TextToSpeechFeature\\r\\n   */\\n  TextToSpeechFeature: core_TextToSpeechFeature,\\n\\n  /**\\r\\n   * @see core/TextToSpeechUtils\\r\\n   */\\n  TextToSpeechUtils: core_TextToSpeechUtils,\\n\\n  /**\\r\\n   * @see core/AbstractSpeech\\r\\n   */\\n  AbstractSpeech: core_AbstractSpeech,\\n\\n  /**\\r\\n   * @see core/Speech\\r\\n   */\\n  Speech: core_Speech\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///437\\n\');}},__nested_webpack_require_1474098__={d:function d(e,t){for(var n in t){__nested_webpack_require_1474098__.o(t,n)&&!__nested_webpack_require_1474098__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]});}},o:function o(e,t){return Object.prototype.hasOwnProperty.call(e,t);}},__webpack_exports__={};return __webpack_modules__[437](0,__webpack_exports__,__nested_webpack_require_1474098__),__webpack_exports__=__webpack_exports__["default"],__webpack_exports__;}();});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJtYXBwaW5ncyI6Ijt1WUFBQSxrRUFDQSxDQUFDLFNBQVNBLENBQVQsQ0FBV0MsQ0FBWCxDQUFhLENBQUMsNEJBQWlCQyxPQUFqQixJQUEwQiw0QkFBaUJDLE1BQWpCLEVBQTFCLENBQWtEQSxNQUFNLENBQUNELE9BQVAsQ0FBZUQsQ0FBQyxFQUFsRSxDQUFxRSxNQUFzQ0csaUNBQW1CLEVBQWIsb0NBQWdCSCxDQUFoQjtBQUFBO0FBQUE7QUFBQSxrR0FBNUMsQ0FBK0QsQ0FBcEksQ0FBbU0sQ0FBak4sQ0FBa04sYUFBYSxNQUFPTSxDQUFBQSxJQUFwQixDQUF5QkEsSUFBekIsQ0FBOEIsYUFBYSxNQUFPQyxDQUFBQSxxQkFBcEIsQ0FBMkJBLHFCQUEzQixDQUFrQyxJQUFsUixDQUF3UixVQUFVLENBQUMsTUFBTyxXQUFJLENBQUMsYUFBYSxHQUFJQyxDQUFBQSxtQkFBbUIsQ0FBQyxDQUFDLElBQUksV0FBQ0MsdUJBQUQsQ0FBeUJDLG1CQUF6QixDQUE2Q0MsbUJBQTdDLENBQW1FLENBQUNDLElBQUksQ0FBQyw2bzk1Q0FBRCxDQUFKLENBQW9wOTVDLENBQTd0OTVDLENBQXhCLENBQXV2OTVDRCxrQ0FBbUIsQ0FBQyxDQUFDRSxDQUFDLENBQUMsV0FBQ2QsQ0FBRCxDQUFHQyxDQUFILENBQU8sQ0FBQyxJQUFJLEdBQUljLENBQUFBLENBQVIsR0FBYWQsQ0FBQUEsQ0FBYixFQUFlVyxrQ0FBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JmLENBQXRCLENBQXdCYyxDQUF4QixHQUE0QixDQUFDSCxrQ0FBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JoQixDQUF0QixDQUF3QmUsQ0FBeEIsQ0FBN0IsRUFBeURFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmxCLENBQXRCLENBQXdCZSxDQUF4QixDQUEwQixDQUFDSSxVQUFVLENBQUMsQ0FBQyxDQUFiLENBQWVDLEdBQUcsQ0FBQ25CLENBQUMsQ0FBQ2MsQ0FBRCxDQUFwQixDQUExQixDQUF6RCxDQUFmLENBQTRILENBQXZJLENBQXdJQyxDQUFDLENBQUMsV0FBQ2hCLENBQUQsQ0FBR0MsQ0FBSCxRQUFPZ0IsQ0FBQUEsTUFBTSxDQUFDSSxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUN2QixDQUFyQyxDQUF1Q0MsQ0FBdkMsQ0FBUCxFQUExSSxDQUEzdzk1QyxDQUF1ODk1Q1UsbUJBQW1CLENBQUMsRUFBMzk5NUMsQ0FBODk5NUMsTUFBT0YsQ0FBQUEsbUJBQW1CLENBQUMsR0FBRCxDQUFuQixDQUF5QixDQUF6QixDQUEyQkUsbUJBQTNCLENBQStDQyxrQ0FBL0MsRUFBb0VELG1CQUFtQixDQUFDQSxtQkFBbUIsV0FBM0csQ0FBb0hBLG1CQUEzSCxDQUErSSxDQUFobys1QyxFQUFOLENBQTBvKzVDLENBQTc2KzVDLENBQUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9IT1NULy4uL2FtYXpvbi1zdW1lcmlhbi1ob3N0cy1jb3JlL2Rpc3QvaG9zdC5jb3JlLmpzP2Q5YjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEZvciBsaWNlbnNlIGluZm9ybWF0aW9uIHBsZWFzZSBzZWUgaG9zdC5jb3JlLmpzLkxJQ0VOU0UudHh0ICovXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIkhPU1RfQ09SRVwiLFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuSE9TVF9DT1JFPXQoKTplLkhPU1RfQ09SRT10KCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6dGhpcywoZnVuY3Rpb24oKXtyZXR1cm4oKCk9PntcInVzZSBzdHJpY3RcIjt2YXIgX193ZWJwYWNrX21vZHVsZXNfXz17NDM3OihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSxfX3dlYnBhY2tfZXhwb3J0c19fLF9fd2VicGFja19yZXF1aXJlX18pPT57ZXZhbCgnXFxuLy8gRVhQT1JUU1xcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XFxuICBcImRlZmF1bHRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gY29yZSlcXG59KTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9EZWZlcnJlZC5qc1xcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cXG5cXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XFxuXFxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHsgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0OyB9IGVsc2UgeyBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IHZhciBhID0gW251bGxdOyBhLnB1c2guYXBwbHkoYSwgYXJncyk7IHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTsgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7IGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpOyByZXR1cm4gaW5zdGFuY2U7IH07IH0gcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cXG5cXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKipcXHJcXG4gKiBUaGUgYnVpbHQtaW4gY2xhc3MgZm9yIGFzeW5jaHJvbm91cyBQcm9taXNlcy5cXHJcXG4gKiBAZXh0ZXJuYWwgUHJvbWlzZVxcclxcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZVxcclxcbiAqL1xcblxcbi8qKlxcclxcbiAqIEEgUHJvbWlzZSBvYmplY3QgdGhhdCBjYW4gYmUgcmVzb2x2ZWQsIHJlamVjdGVkIG9yIGNhbmNlbGVkIGF0IGFueSB0aW1lIGJ5IHRoZVxcclxcbiAqIHVzZXIuXFxyXFxuICpcXHJcXG4gKiBAZXh0ZW5kcyBleHRlcm5hbDpQcm9taXNlXFxyXFxuICovXFxudmFyIERlZmVycmVkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHJvbWlzZSkge1xcbiAgX2luaGVyaXRzKERlZmVycmVkLCBfUHJvbWlzZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKERlZmVycmVkKTtcXG5cXG4gIC8qKlxcclxcbiAgICogQGNvbnN0cnVjdG9yXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2V4ZWN1dGFibGU9KCkgPT4ge31dIC0gVGhlIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIGJ5IHRoZVxcclxcbiAgICogY29uc3RydWN0b3IsIGR1cmluZyB0aGUgcHJvY2VzcyBvZiBjb25zdHJ1Y3RpbmcgdGhlIHByb21pc2UuIFRoZSBzaWduYXR1cmVcXHJcXG4gICAqIG9mIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmU6IGV4ZWN1dGFibGUoICByZXNvbHV0aW9uRnVuYywgcmVqZWN0aW9uRnVuYywgY2FuY2VsbGF0aW9uRnVuYyApLlxcclxcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uUmVzb2x2ZSAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb25jZSB0aGUgcHJvbWlzZVxcclxcbiAgICogaXMgcmVzb2x2ZWQuXFxyXFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25SZWplY3QgLSBPcHRpb25hbCBmdW5jdGlvbiB0byBleGVjdXRlIG9uY2UgdGhlIHByb21pc2VcXHJcXG4gICAqIGlzIHJlamVjdGVkLlxcclxcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uQ2FuY2VsIC0gT3B0aW9uYWwgZnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiB0aGUgdXNlciBjYW5jZWxzXFxyXFxuICAgKiB0aGUgcHJvbWlzZS4gQ2FuY2VsaW5nIHJlc3VsdHMgaW4gdGhlIHByb21pc2UgaGF2aW5nIGEgc3RhdHVzIG9mIFxcJ3Jlc29sdmVkXFwnLlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcXG4gICAgdmFyIF90aGlzO1xcblxcbiAgICB2YXIgZXhlY3V0YWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZnVuY3Rpb24gKCkge307XFxuICAgIHZhciBvblJlc29sdmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcXG4gICAgdmFyIG9uUmVqZWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XFxuICAgIHZhciBvbkNhbmNlbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xcblxcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGVmZXJyZWQpO1xcblxcbiAgICBpZiAodHlwZW9mIGV4ZWN1dGFibGUgIT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNyZWF0ZSBuZXcgRGVmZXJyZWQuIEV4ZWN1dGFibGUgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTtcXG4gICAgfVxcblxcbiAgICBpZiAodHlwZW9mIG9uUmVzb2x2ZSAhPT0gXFwndW5kZWZpbmVkXFwnICYmIHR5cGVvZiBvblJlc29sdmUgIT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNyZWF0ZSBuZXcgRGVmZXJyZWQuIE9uUmVzb2x2ZSBtdXN0IGJlIGEgZnVuY3Rpb24uXCIpO1xcbiAgICB9XFxuXFxuICAgIGlmICh0eXBlb2Ygb25SZWplY3QgIT09IFxcJ3VuZGVmaW5lZFxcJyAmJiB0eXBlb2Ygb25SZWplY3QgIT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNyZWF0ZSBuZXcgRGVmZXJyZWQuIE9uUmVqZWN0IG11c3QgYmUgYSBmdW5jdGlvbi5cIik7XFxuICAgIH1cXG5cXG4gICAgaWYgKHR5cGVvZiBvbkNhbmNlbCAhPT0gXFwndW5kZWZpbmVkXFwnICYmIHR5cGVvZiBvbkNhbmNlbCAhPT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY3JlYXRlIG5ldyBEZWZlcnJlZC4gT25DYW5jZWwgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTtcXG4gICAgfVxcblxcbiAgICB2YXIgcmVzO1xcbiAgICB2YXIgcmVqO1xcbiAgICB2YXIgY2FuY2VsO1xcbiAgICB2YXIgc3RhdHVzID0ge1xcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcXG4gICAgICByZWplY3RlZDogZmFsc2UsXFxuICAgICAgY2FuY2VsZWQ6IGZhbHNlLFxcbiAgICAgIHBlbmRpbmc6IHRydWVcXG4gICAgfTtcXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XFxuICAgICAgLy8gU3RvcmUgdGhlIHJlc29sdmVyXFxuICAgICAgcmVzID0gZnVuY3Rpb24gcmVzKHZhbHVlKSB7XFxuICAgICAgICBpZiAoc3RhdHVzLnBlbmRpbmcpIHtcXG4gICAgICAgICAgc3RhdHVzLnJlc29sdmVkID0gdHJ1ZTtcXG4gICAgICAgICAgc3RhdHVzLnBlbmRpbmcgPSBmYWxzZTtcXG5cXG4gICAgICAgICAgaWYgKHR5cGVvZiBvblJlc29sdmUgPT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICAgICAgdmFsdWUgPSBvblJlc29sdmUodmFsdWUpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHJldHVybiByZXNvbHZlKHZhbHVlKTtcXG4gICAgICAgIH1cXG4gICAgICB9OyAvLyBTdG9yZSB0aGUgcmVqZWN0ZXJcXG5cXG5cXG4gICAgICByZWogPSBmdW5jdGlvbiByZWoodmFsdWUpIHtcXG4gICAgICAgIGlmIChzdGF0dXMucGVuZGluZykge1xcbiAgICAgICAgICBzdGF0dXMucmVqZWN0ZWQgPSB0cnVlO1xcbiAgICAgICAgICBzdGF0dXMucGVuZGluZyA9IGZhbHNlO1xcblxcbiAgICAgICAgICBpZiAodHlwZW9mIG9uUmVqZWN0ID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICAgIHZhbHVlID0gb25SZWplY3QodmFsdWUpO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIHJldHVybiByZWplY3QodmFsdWUpO1xcbiAgICAgICAgfVxcbiAgICAgIH07IC8vIFN0b3JlIHRoZSBjYW5jZWxlclxcblxcblxcbiAgICAgIGNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCh2YWx1ZSkge1xcbiAgICAgICAgaWYgKHN0YXR1cy5wZW5kaW5nKSB7XFxuICAgICAgICAgIHN0YXR1cy5jYW5jZWxlZCA9IHRydWU7XFxuICAgICAgICAgIHN0YXR1cy5wZW5kaW5nID0gZmFsc2U7XFxuXFxuICAgICAgICAgIGlmICh0eXBlb2Ygb25DYW5jZWwgPT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICAgICAgdmFsdWUgPSBvbkNhbmNlbCh2YWx1ZSk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUodmFsdWUpO1xcbiAgICAgICAgfVxcbiAgICAgIH07IC8vIFJ1biB0aGUgZXhlY3V0YWJsZSB3aXRoIGN1c3RvbSByZXNvbHZlciBhbmQgcmVqZWN0ZXJcXG5cXG5cXG4gICAgICBleGVjdXRhYmxlKHJlcywgcmVqLCBjYW5jZWwpO1xcbiAgICB9KTtcXG4gICAgX3RoaXMuX3N0YXR1cyA9IHN0YXR1cztcXG4gICAgX3RoaXMuX3Jlc29sdmUgPSByZXM7XFxuICAgIF90aGlzLl9yZWplY3QgPSByZWo7XFxuICAgIF90aGlzLl9jYW5jZWwgPSBjYW5jZWw7XFxuICAgIF90aGlzLl9leGVjdXRhYmxlID0gZXhlY3V0YWJsZTtcXG4gICAgcmV0dXJuIF90aGlzO1xcbiAgfVxcbiAgLyoqXFxyXFxuICAgKiBHZXRzIHRoZSByZXNvbHZlZCBzdGF0ZSBvZiB0aGUgcHJvbWlzZS5cXHJcXG4gICAqXFxyXFxuICAgKiBAcmVhZG9ubHlcXHJcXG4gICAqL1xcblxcblxcbiAgX2NyZWF0ZUNsYXNzKERlZmVycmVkLCBbe1xcbiAgICBrZXk6IFwicmVzb2x2ZWRcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cy5yZXNvbHZlZDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB0aGUgcmVqZWN0ZWQgc3RhdGUgb2YgdGhlIHByb21pc2UuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZWFkb25seVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlamVjdGVkXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0dXMucmVqZWN0ZWQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIGNhbmNlbGVkIHN0YXRlIG9mIHRoZSBwcm9taXNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjYW5jZWxlZFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fc3RhdHVzLmNhbmNlbGVkO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSBwZW5kaW5nIHN0YXRlIG9mIHRoZSBwcm9taXNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwZW5kaW5nXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0dXMucGVuZGluZztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRm9yY2UgdGhlIHByb21pc2UgdG8gcmVzb2x2ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHthbnk9fSB2YWx1ZSAtIFZhbHVlIHRvIHBhc3MgdG8gdGhlIHJlc29sdmVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7YW55fSAtIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHJlc29sdmVyIGZ1bmN0aW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc29sdmVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZSh2YWx1ZSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEZvcmNlIHRoZSBwcm9taXNlIHRvIHJlamVjdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHthbnk9fSB2YWx1ZSAtIFZhbHVlIHRvIHBhc3MgdG8gdGhlIHJlamVjdGVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7YW55fSAtIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHJlamVjdGVyIGZ1bmN0aW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlamVjdFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdCh2YWx1ZSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEZvcmNlIHRoZSBwcm9taXNlIHRvIHJlc29sdmUgYW5kIHNldCB0aGUgY2FuY2VsZWQgc3RhdGUgdG8gdHJ1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHthbnk9fSB2YWx1ZSAtIFZhbHVlIHRvIHBhc3MgdG8gdGhlIGNhbmNlbGxlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2FueX0gLSBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBjYW5jZWxsZXIgZnVuY3Rpb24uXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY2FuY2VsXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwodmFsdWUpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fY2FuY2VsKHZhbHVlKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUnVuIHRoZSBwcm9taXNlIGZ1bmN0aW9uIHRvIHRyeSB0byByZXNvbHZlIHRoZSBwcm9taXNlLiBQcm9taXNlIG11c3QgYmVcXHJcXG4gICAgICogcGVuZGluZy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3MgLSBPcHRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyBhZnRlciByZXNvbHZlIGFuZCByZWplY3QuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZXhlY3V0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZSgpIHtcXG4gICAgICBpZiAodGhpcy5wZW5kaW5nKSB7XFxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcXG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHRoaXMuX2V4ZWN1dGFibGUuYXBwbHkodGhpcywgW3RoaXMuX3Jlc29sdmUsIHRoaXMuX3JlamVjdCwgdGhpcy5fY2FuY2VsXS5jb25jYXQoYXJncykpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIGEgY2FuY2VsZWQgZGVmZXJyZWQgcHJvbWlzZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHthbnk9fSB2YWx1ZSAtIFZhbHVlIHRvIGNhbmNlbCB0aGUgcHJvbWlzZSB3aXRoLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfV0sIFt7XFxuICAgIGtleTogXCJjYW5jZWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCh2YWx1ZSkge1xcbiAgICAgIHJldHVybiBuZXcgRGVmZXJyZWQoZnVuY3Rpb24gKF9yZXNvbHZlLCBfcmVqZWN0LCBjYW5jZWwpIHtcXG4gICAgICAgIGNhbmNlbCh2YWx1ZSk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIG5ldyBEZWZlcnJlZCBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9yIHJlamVjdCBvbmNlIGFsbCBwcm9taXNlc1xcclxcbiAgICAgKiBpbiB0aGUgaW5wdXQgYXJyYXkgaGF2ZSBiZWVuIHJlc29sdmVkIG9yIG9uZSBwcm9taXNlIGlzIGNhbmNlbGVkIG9yIHJlamVjdGVkLlxcclxcbiAgICAgKiBQcm9taXNlcyBpbiB0aGUgYXJyYXkgdGhhdCBhcmUgRGVmZXJyZWQgcHJvbWlzZXMgd2lsbCBiZSBtYW51YWxseSByZXNvbHZlZCxcXHJcXG4gICAgICogcmVqZWN0ZWQgb3IgY2FuY2VsZWQgd2hlbiBjYWxsaW5nIHJlc29sdmUsIHJlamVjdCBvciBjYW5jZWwgb24gdGhlIHJldHVybiBwcm9taXNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5Ljxhbnk+fSBpdGVyYWJsZSAtIEFuIGl0ZXJhYmxlIHN1Y2ggYXMgYW4gYXJyYXkuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvblJlc29sdmUgLSBPcHRpb25hbCBmdW5jdGlvbiB0byBleGVjdXRlIG9uY2UgdGhlIHByb21pc2VcXHJcXG4gICAgICogaXMgcmVzb2x2ZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvblJlamVjdCAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb25jZSB0aGUgcHJvbWlzZVxcclxcbiAgICAgKiBpcyByZWplY3RlZC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uQ2FuY2VsIC0gT3B0aW9uYWwgZnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiB0aGUgdXNlciBjYW5jZWxzXFxyXFxuICAgICAqIHRoZSBwcm9taXNlLiBDYW5jZWxpbmcgcmVzdWx0cyBpbiB0aGUgcHJvbWlzZSBoYXZpbmcgYSBzdGF0dXMgb2YgXFwnY2FuY2VsZWRcXCcuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIERlZmVycmVkXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiYWxsXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUsIG9uUmVzb2x2ZSwgb25SZWplY3QsIG9uQ2FuY2VsKSB7XFxuICAgICAgaWYgKGl0ZXJhYmxlID09IG51bGwgfHwgdHlwZW9mIGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0gIT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICB2YXIgZSA9IFwiQ2Fubm90IGV4ZWN1dGUgRGVmZXJyZWQuYWxsLiBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGl0ZXJhYmxlLlwiO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBvblJlamVjdCA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgZSA9IG9uUmVqZWN0KGUpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIERlZmVycmVkLnJlamVjdChlKTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGFycmF5ID0gX3RvQ29uc3VtYWJsZUFycmF5KGl0ZXJhYmxlKTtcXG5cXG4gICAgICB2YXIgZGVmZXJyZWQgPSBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICAgIHJldHVybiBpdGVtIGluc3RhbmNlb2YgRGVmZXJyZWQ7XFxuICAgICAgfSk7XFxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCh1bmRlZmluZWQsIGZ1bmN0aW9uIChyZXNvbHZlVmFsdWUpIHtcXG4gICAgICAgIGRlZmVycmVkLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICAgICAgaXRlbS5yZXNvbHZlKHJlc29sdmVWYWx1ZSk7XFxuICAgICAgICB9KTtcXG4gICAgICAgIGRlZmVycmVkLmxlbmd0aCA9IDA7XFxuXFxuICAgICAgICBpZiAodHlwZW9mIG9uUmVzb2x2ZSA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgcmV0dXJuIG9uUmVzb2x2ZShyZXNvbHZlVmFsdWUpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmVWYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcXG4gICAgICAgIGRlZmVycmVkLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICAgICAgaXRlbS5yZWplY3QoZXJyb3IpO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBkZWZlcnJlZC5sZW5ndGggPSAwO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBvblJlamVjdCA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgcmV0dXJuIG9uUmVqZWN0KGVycm9yKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHJldHVybiBlcnJvcjtcXG4gICAgICAgIH1cXG4gICAgICB9LCBmdW5jdGlvbiAoY2FuY2VsVmFsdWUpIHtcXG4gICAgICAgIGRlZmVycmVkLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICAgICAgaXRlbS5jYW5jZWwoY2FuY2VsVmFsdWUpO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBkZWZlcnJlZC5sZW5ndGggPSAwO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNhbmNlbCA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgcmV0dXJuIG9uQ2FuY2VsKGNhbmNlbFZhbHVlKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHJldHVybiBjYW5jZWxWYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICB2YXIgbnVtSXRlbXMgPSBhcnJheS5sZW5ndGg7XFxuICAgICAgdmFyIGl0ZW1UcmFja2VyID0ge1xcbiAgICAgICAgZmFpbGVkOiBmYWxzZSxcXG4gICAgICAgIG51bVJlc29sdmVkOiAwLFxcbiAgICAgICAgcmVzb2x1dGlvbnM6IFtdXFxuICAgICAgfTtcXG4gICAgICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xcbiAgICAgICAgaWYgKGl0ZW1UcmFja2VyLmZhaWxlZCkge1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9IGVsc2UgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XFxuICAgICAgICAgIGl0ZW1UcmFja2VyLnJlc29sdXRpb25zW2luZGV4XSA9IGl0ZW07XFxuICAgICAgICAgIGl0ZW1UcmFja2VyLm51bVJlc29sdmVkICs9IDE7XFxuXFxuICAgICAgICAgIGlmIChpdGVtVHJhY2tlci5udW1SZXNvbHZlZCA9PT0gbnVtSXRlbXMpIHtcXG4gICAgICAgICAgICByZXN1bHQucmVzb2x2ZShpdGVtVHJhY2tlci5yZXNvbHV0aW9ucyk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaXRlbS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xcbiAgICAgICAgICBpZiAoIWl0ZW1UcmFja2VyLmZhaWxlZCAmJiAhaXRlbS5jYW5jZWxlZCkge1xcbiAgICAgICAgICAgIGl0ZW1UcmFja2VyLnJlc29sdXRpb25zW2luZGV4XSA9IHZhbHVlO1xcbiAgICAgICAgICAgIGl0ZW1UcmFja2VyLm51bVJlc29sdmVkICs9IDE7XFxuXFxuICAgICAgICAgICAgaWYgKGl0ZW1UcmFja2VyLm51bVJlc29sdmVkID09PSBudW1JdGVtcykge1xcbiAgICAgICAgICAgICAgcmVzdWx0LnJlc29sdmUoaXRlbVRyYWNrZXIucmVzb2x1dGlvbnMpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfSBlbHNlIGlmICghaXRlbVRyYWNrZXIuZmFpbGVkKSB7XFxuICAgICAgICAgICAgaXRlbVRyYWNrZXIuZmFpbGVkID0gdHJ1ZTtcXG4gICAgICAgICAgICByZXN1bHQuY2FuY2VsKHZhbHVlKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XFxuICAgICAgICAgIGlmICghaXRlbVRyYWNrZXIuZmFpbGVkKSB7XFxuICAgICAgICAgICAgaXRlbVRyYWNrZXIuZmFpbGVkID0gdHJ1ZTtcXG4gICAgICAgICAgICByZXN1bHQucmVqZWN0KGVycm9yKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIERlZmVycmVkO1xcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKFByb21pc2UpKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGNvcmVfRGVmZXJyZWQgPSAoRGVmZXJyZWQpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL1V0aWxzLmpzXFxuZnVuY3Rpb24gVXRpbHNfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFV0aWxzX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIFV0aWxzX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgVXRpbHNfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFV0aWxzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuLyoqXFxyXFxuICogQSBjb2xsZWN0aW9uIG9mIHVzZWZ1bCBnZW5lcmljIGZ1bmN0aW9ucy5cXHJcXG4gKlxcclxcbiAqIEBoaWRlY29uc3RydWN0b3JcXHJcXG4gKi9cXG5cXG52YXIgVXRpbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gVXRpbHMoKSB7XFxuICAgIFV0aWxzX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFV0aWxzKTtcXG4gIH1cXG5cXG4gIFV0aWxzX2NyZWF0ZUNsYXNzKFV0aWxzLCBudWxsLCBbe1xcbiAgICBrZXk6IFwiY3JlYXRlSWRcIixcXG4gICAgdmFsdWU6XFxuICAgIC8qKlxcclxcbiAgICAgKiBAc3RhdGljXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEdlbmVyYXRlIGEgdW5pcXVlIGlkXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XFxyXFxuICAgICAqL1xcbiAgICBmdW5jdGlvbiBjcmVhdGVJZCgpIHtcXG4gICAgICByZXR1cm4gXFwneHh4eHh4eHh4eHh4NHh4eHl4eHh4eHh4eHh4eHh4eHhcXCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xcbiAgICAgICAgdmFyIHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYpO1xcblxcbiAgICAgICAgaWYgKGMgPT09IFxcJ3hcXCcpIHtcXG4gICAgICAgICAgcmV0dXJuIHJhbmRvbU51bWJlci50b1N0cmluZygxNik7XFxuICAgICAgICB9IC8vIFNldCBiaXQgNiBhbmQgNyB0byAwIGFuZCAxXFxuXFxuXFxuICAgICAgICByZXR1cm4gKHJhbmRvbU51bWJlciAmIDB4MyB8IDB4OCkudG9TdHJpbmcoMTYpO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBAc3RhdGljXFxyXFxuICAgICAqXFxyXFxuICAgICAqIENoZWNrIGEgbmFtZSBzdHJpbmcgYWdhaW5zdCBhbiBhcnJheSBvZiBzdHJpbmdzIHRvIGRldGVybWluZSBpZiBpdCBpcyB1bmlxdWUuXFxyXFxuICAgICAqIElmIGl0IGlzblxcJ3QsIGFwcGVuZCBpbmNyZW1lbnRlZCB0cmFpbGluZyBpbnRlZ2VycyB0byB0aGUgZW5kIG9mIHRoZSBuYW1lXFxyXFxuICAgICAqIHVudGlsIGl0IGlzIHVuaXF1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBTdHJpbmcgbmFtZSB0byBtYWtlIHVuaXF1ZS5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPj19IG5hbWVBcnJheSAtIEFycmF5IG9mIHN0cmluZyBuYW1lcyB0byBjaGVjayBhZ2FpbnMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0VW5pcXVlTmFtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VW5pcXVlTmFtZShuYW1lKSB7XFxuICAgICAgdmFyIG5hbWVBcnJheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XFxuXFxuICAgICAgLy8gSWYgdGhlIG5hbWUgaXNuXFwndCBpbiB0aGUgYXJyYXkgcmV0dXJuIGl0IHJpZ2h0IGF3YXlcXG4gICAgICBpZiAoIW5hbWVBcnJheS5pbmNsdWRlcyhuYW1lKSkge1xcbiAgICAgICAgcmV0dXJuIG5hbWU7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBuYW1lU2V0ID0gbmV3IFNldChuYW1lQXJyYXkpOyAvLyBTZXBhcmF0ZSB0aGUgbmFtZSBpbnRvIHN0cmluZyBhbmQgdHJhaWxpbmcgbnVtYmVyc1xcblxcbiAgICAgIHZhciBtYXRjaEdyb3VwID0gbmFtZS5tYXRjaCgvXFxcXGQqJC8pO1xcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoR3JvdXAuaW5kZXg7XFxuICAgICAgdmFyIGJhc2VOYW1lID0gbmFtZS5zbGljZSgwLCBpbmRleCk7XFxuICAgICAgdmFyIGluY3JlbWVudCA9IE51bWJlcihtYXRjaEdyb3VwWzBdKTsgLy8gRmluZCB0aGUgaGlnaGVzdCB0cmFpbGluZyBudW1iZXIgdmFsdWUgZm9yIHRoZSBiYXNlIG9mIHRoZSBuYW1lXFxuXFxuICAgICAgbmFtZVNldC5mb3JFYWNoKGZ1bmN0aW9uIChzZXROYW1lKSB7XFxuICAgICAgICB2YXIgc2V0TWF0Y2hHcm91cCA9IHNldE5hbWUubWF0Y2goL1xcXFxkKiQvKTtcXG5cXG4gICAgICAgIGlmIChzZXROYW1lLnNsaWNlKDAsIHNldE1hdGNoR3JvdXAuaW5kZXgpID09PSBiYXNlTmFtZSkge1xcbiAgICAgICAgICB2YXIgc2V0SW5jcmVtZW50ID0gTnVtYmVyKHNldE1hdGNoR3JvdXBbMF0pO1xcblxcbiAgICAgICAgICBpZiAoc2V0SW5jcmVtZW50ID4gaW5jcmVtZW50KSB7XFxuICAgICAgICAgICAgaW5jcmVtZW50ID0gc2V0SW5jcmVtZW50O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSk7IC8vIEluY3JlbWVudCB0aGUgaGlnaGVzdCB0cmFpbGluZyBudW1iZXIgYW5kIGFwcGVuZCB0byB0aGUgbmFtZVxcblxcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChiYXNlTmFtZSkuY29uY2F0KGluY3JlbWVudCArIDEpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gYSBkZWZlcnJlZCBwcm9taXNlIHRoYXQgd2lsbCB3YWl0IGEgZ2l2ZW4gbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlXFxyXFxuICAgICAqIHJlc29sdmluZy4gUGFzcyBkZWx0YSB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byB0aGUgZGVmZXJyZWQgcHJvbWlzZVxcJ3MgZXhlY3V0ZVxcclxcbiAgICAgKiBtZXRob2QgaW4gYW4gdXBkYXRlIGxvb3AgdG8gcHJvZ3Jlc3MgdGltZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmRzPTBdIC0gTnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBiZWZvcmUgcmVzb2x2aW5nLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25hbCBvcHRpb25zIG9iamVjdFxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5vbkZpbmlzaF0gLSBDYWxsYmFjayB0byBleGVjdXRlIG9uY2UgdGhlIHdhaXQgdGltZVxcclxcbiAgICAgKiBpcyBtZXQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvcHRpb25zLm9uUHJvZ3Jlc3MgLSBDYWxsYmFjayB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUgd2FpdFxcclxcbiAgICAgKiB0aW1lIHByb2dyZXNzZXMgdG93YXJkcyB0aGUgdGFyZ2V0IG51bWJlciBvZiBzZWNvbmRzLiBUaGUgYW1vdW50IG9mIHByb2dyZXNzXFxyXFxuICAgICAqIGFzIGEgMC0xIHBlcmNlbnRhZ2UgaXMgcGFzc2VkIGFzIGFuIGFyZ3VtZW50LlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0aW9ucy5vbkNhbmNlbCAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgaWYgdGhlIHVzZXIgY2FuY2Vsc1xcclxcbiAgICAgKiB0aGUgd2FpdCBiZWZvcmUgY29tcGxldGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMub25FcnJvciAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgaWYgdGhlIHdhaXQgc3RvcHNcXHJcXG4gICAgICogYmVjYXVzZSBhbiBlcnJvciBpcyBlbmNvdW50ZXJlZC4gVGhlIGVycm9yIG1lc3NhZ2UgaXMgcGFzc2VkIGFzIGEgcGFyYW1ldGVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwid2FpdFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gd2FpdCgpIHtcXG4gICAgICB2YXIgc2Vjb25kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcXG5cXG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXFxuICAgICAgICAgIG9uRmluaXNoID0gX3JlZi5vbkZpbmlzaCxcXG4gICAgICAgICAgb25Qcm9ncmVzcyA9IF9yZWYub25Qcm9ncmVzcyxcXG4gICAgICAgICAgb25DYW5jZWwgPSBfcmVmLm9uQ2FuY2VsLFxcbiAgICAgICAgICBvbkVycm9yID0gX3JlZi5vbkVycm9yO1xcblxcbiAgICAgIC8vIE1ha2Ugc3VyZSBzZWNvbmRzIGlzIG51bWVyaWNcXG4gICAgICBpZiAodHlwZW9mIHNlY29uZHMgIT09IFxcJ251bWJlclxcJykge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiSW52YWxpZCBzZWNvbmRzIHZhbHVlIFwiLmNvbmNhdChzZWNvbmRzLCBcIiBmb3Igd2FpdC4gRGVmYXVsdGluZyB0byAwLlwiKSk7XFxuICAgICAgICBzZWNvbmRzID0gMDtcXG4gICAgICB9IC8vIFJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhlIHdhaXQgdGltZSBpcyBub3QgZ3JlYXRlciB0aGFuIDBcXG5cXG5cXG4gICAgICBpZiAoc2Vjb25kcyA8PSAwKSB7XFxuICAgICAgICBpZiAodHlwZW9mIG9uRmluaXNoID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBvbkZpbmlzaCgpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQucmVzb2x2ZSgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSAwO1xcbiAgICAgIHZhciB0b3RhbFRpbWUgPSBzZWNvbmRzICogMTAwMDsgLy8gY29udmVydCB0byBtaWxsaXNlY29uZHNcXG4gICAgICAvLyBFeGVjdXRhYmxlIHRvIHBhc3MgdG8gRGVmZXJyZWQsIG1lYW50IHRvIGJlIHJ1biBpbiBhbiB1cGRhdGUgbG9vcFxcblxcbiAgICAgIHZhciBvblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKHJlc29sdmUsIHJlamVjdCwgX2NhbmNlbCkge1xcbiAgICAgICAgdmFyIGRlbHRhVGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcXG5cXG4gICAgICAgIGlmICh0eXBlb2YgZGVsdGFUaW1lICE9PSBcXCdudW1iZXJcXCcpIHtcXG4gICAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3BlcnR5IHdhaXQgZGVsdGFUaW1lLiBEZWx0YVRpbWUgbXVzdCBiZSBhIG51bWJlci5cIik7XFxuICAgICAgICAgIHJlamVjdChlKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfSAvLyBNYWtlIHN1cmUgdGltZSBoYXMgcGFzc2VkXFxuXFxuXFxuICAgICAgICBpZiAoZGVsdGFUaW1lID09PSAwKSB7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH0gLy8gU2lnbmFsIHByb2dyZXNzXFxuXFxuXFxuICAgICAgICBjdXJyZW50VGltZSArPSBkZWx0YVRpbWU7XFxuXFxuICAgICAgICBpZiAoY3VycmVudFRpbWUgPCAwKSB7XFxuICAgICAgICAgIGN1cnJlbnRUaW1lID0gMDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmICh0eXBlb2Ygb25Qcm9ncmVzcyA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgb25Qcm9ncmVzcyhNYXRoLm1pbihjdXJyZW50VGltZSAvIHRvdGFsVGltZSwgMSkpO1xcbiAgICAgICAgfSAvLyBTaWduYWwgY29tcGxldGlvbiBvbmNlIHRpbWUgaXMgdXBcXG5cXG5cXG4gICAgICAgIGlmIChjdXJyZW50VGltZSA+PSB0b3RhbFRpbWUpIHtcXG4gICAgICAgICAgcmVzb2x2ZSgpO1xcbiAgICAgICAgfVxcbiAgICAgIH07XFxuXFxuICAgICAgcmV0dXJuIG5ldyBjb3JlX0RlZmVycmVkKG9uVXBkYXRlLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgICogR2V0IGEgcmFuZG9tIGZsb2F0IG51bWJlciBiZXR3ZWVuIGEgbWluIChpbmNsdXNpdmUpIGFuZCBtYXggKGV4Y2x1c2l2ZSkgdmFsdWVcXHJcXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gbWluaW11bSB2YWx1ZVxcclxcbiAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1heCBtYXhpbXVtIHZhbHVlXFxyXFxuICAgICAgKiBAcmV0dXJucyB7ZmxvYXR9XFxyXFxuICAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldFJhbmRvbUZsb2F0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5kb21GbG9hdChtaW4sIG1heCkge1xcbiAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAgKiBHZXQgYSByYW5kb20gaW50ZWdlciBudW1iZXIgYmV0d2VlbiBhIG1pbiAoaW5jbHVzaXZlKSBhbmQgbWF4IChleGNsdXNpdmUpIHZhbHVlXFxyXFxuICAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluIG1pbmltdW0gdmFsdWVcXHJcXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXggbWF4aW11bSB2YWx1ZVxcclxcbiAgICAgICogQHJldHVybnMge2ludGVnZXJ9XFxyXFxuICAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldFJhbmRvbUludFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XFxuICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XFxuICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBVdGlscztcXG59KCk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBjb3JlX1V0aWxzID0gKFV0aWxzKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9NYXRoVXRpbHMuanNcXG5mdW5jdGlvbiBNYXRoVXRpbHNfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBNYXRoVXRpbHNfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBNYXRoVXRpbHNfaXRlcmFibGVUb0FycmF5KGFycikgfHwgTWF0aFV0aWxzX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgTWF0aFV0aWxzX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBNYXRoVXRpbHNfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBNYXRoVXRpbHNfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBNYXRoVXRpbHNfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIE1hdGhVdGlsc19hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBNYXRoVXRpbHNfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cXG5cXG5mdW5jdGlvbiBNYXRoVXRpbHNfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBNYXRoVXRpbHNfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gTWF0aFV0aWxzX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XFxuXFxuZnVuY3Rpb24gTWF0aFV0aWxzX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBNYXRoVXRpbHNfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gTWF0aFV0aWxzX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgTWF0aFV0aWxzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBNYXRoVXRpbHNfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG52YXIgUmFkaWFuVG9EZWdyZWUgPSAxODAgLyBNYXRoLlBJO1xcbnZhciBEZWdyZWVUb1JhZGlhbiA9IE1hdGguUEkgLyAxODA7XFxuLyoqXFxyXFxuICogQSBjb2xsZWN0aW9uIG9mIHVzZWZ1bCBtYXRoIGZ1bmN0aW9ucy5cXHJcXG4gKlxcclxcbiAqIEBoaWRlY29uc3RydWN0b3JcXHJcXG4gKi9cXG5cXG52YXIgTWF0aFV0aWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIE1hdGhVdGlscygpIHtcXG4gICAgTWF0aFV0aWxzX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hdGhVdGlscyk7XFxuICB9XFxuXFxuICBNYXRoVXRpbHNfY3JlYXRlQ2xhc3MoTWF0aFV0aWxzLCBudWxsLCBbe1xcbiAgICBrZXk6IFwidG9EZWdyZWVzXCIsXFxuICAgIHZhbHVlOlxcbiAgICAvKipcXHJcXG4gICAgICogQ29udmVydCB0aGUgZ2l2ZW4gYW5nbGUgZnJvbSByYWRpYW5zIHRvIGRlZ3JlZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpYW5zIC0gQW5nbGUgaW4gcmFkaWFucy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge251bWJlcn0gLSBBbmdsZSBpbiBkZWdyZWVzLlxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gdG9EZWdyZWVzKHJhZGlhbnMpIHtcXG4gICAgICByZXR1cm4gcmFkaWFucyAqIFJhZGlhblRvRGVncmVlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDb252ZXJ0IHRoZSBnaXZlbiBhbmdsZSBmcm9tIGRlZ3JlZXMgdG8gcmFkaWFucy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZXMgLSBBbmdsZSBpbiBkZWdyZWVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIEFuZ2xlIGluIHJhZGlhbnMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidG9SYWRpYW5zXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xcbiAgICAgIHJldHVybiBkZWdyZWVzICogRGVncmVlVG9SYWRpYW47XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIExpbmVhcmx5IGludGVycG9sYXRlIGJldHdlZW4gdHdvIHZhbHVlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZyb20gLSBTdGFydCB2YWx1ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvIC0gVGFyZ2V0IHZhbHVlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmFjdG9yIC0gMC0xIGFtb3VudCB0byBpbnRlcnBvbGF0ZSBiZXR3ZWVuIGZyb20gYW5kIHRvLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImxlcnBcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlcnAoZnJvbSwgdG8sIGZhY3Rvcikge1xcbiAgICAgIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiBmYWN0b3I7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENsYW1wIGEgbnVtYmVyIGJldHdlZW4gMiB2YWx1ZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFZhbHVlIHRvIGNsYW1wLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21pbj0wXSAtIE1pbnVtdW0gdmFsdWUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4PTFdIC0gTWF4aW11bSB2YWx1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjbGFtcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcXG4gICAgICB2YXIgbWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xcbiAgICAgIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XFxuICAgICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsdWUsIG1heCkpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBjbG9zZXN0IHBvaW50IG9uIGEgZ2l2ZW4gMkQgbGluZSBzZWdlbWVudFxcclxcbiAgICAgKiBmcm9tIGEgZ2l2ZW4gMkQgcG9pbnQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGEgLSBGaXJzdCBwb2ludCBvbiBsaW5lIHNlZ21lbnQuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGIgLSBTZWNvbmQgcG9pbnQgb24gbGluZSBzZWdtZW50LlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBwIC0gMkQgcG9pbnQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjbG9zZXN0UG9pbnRPbkxpbmVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3Nlc3RQb2ludE9uTGluZShhLCBiLCBwKSB7XFxuICAgICAgdmFyIGRpc3RTcXIgPSBNYXRoVXRpbHMuZGlzdGFuY2VTcXVhcmVkKGEsIGIpOyAvLyBMaW5lIHNlZ21lbnQgaXMgYSBzaW5nbGUgcG9pbnRcXG5cXG4gICAgICBpZiAoZGlzdFNxciA9PT0gMCkge1xcbiAgICAgICAgcmV0dXJuIGE7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciB0ID0gKChwWzBdIC0gYVswXSkgKiAoYlswXSAtIGFbMF0pICsgKHBbMV0gLSBhWzFdKSAqIChiWzFdIC0gYVsxXSkpIC8gZGlzdFNxcjtcXG5cXG4gICAgICB2YXIgcG9pbnQgPSBNYXRoVXRpbHNfdG9Db25zdW1hYmxlQXJyYXkoYSk7XFxuXFxuICAgICAgaWYgKHQgPiAxKSB7XFxuICAgICAgICBwb2ludCA9IE1hdGhVdGlsc190b0NvbnN1bWFibGVBcnJheShiKTtcXG4gICAgICB9IGVsc2UgaWYgKHQgPiAwKSB7XFxuICAgICAgICBwb2ludCA9IFthWzBdICsgdCAqIChiWzBdIC0gYVswXSksIGFbMV0gKyB0ICogKGJbMV0gLSBhWzFdKV07XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBwb2ludDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB0aGUgZGlzdGFuY2Ugc3F1YXJlZCBmb3IgdHdvIDJEIHBvaW50cy5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYSAtIDJEIHBvaW50LlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBiIC0gMkQgcG9pbnQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzdGFuY2VTcXVhcmVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXN0YW5jZVNxdWFyZWQoYSwgYikge1xcbiAgICAgIHJldHVybiAoYVswXSAtIGJbMF0pICogKGFbMF0gLSBiWzBdKSArIChhWzFdIC0gYlsxXSkgKiAoYVsxXSAtIGJbMV0pO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBUcmlhbmd1bGF0ZXMgYSBzZXQgb2YgMkQgcG9pbnRzIHVzaW5nIGFuIGltcGxlbWVudGF0aW9uXFxyXFxuICAgICAqIG9mIHRoZSBCb3d5ZXItV2F0c29uIGluY3JlbWVudGFsIERlbGF1bmF5IHRyaWFuZ3VsYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEFycmF5LjxudW1iZXI+Pn0gdmVydGljZXMgLSBBcnJheSBvZiAyRCBwb2ludHMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48QXJyYXk8bnVtYmVyPj59IC0gQXJyYXkgb2YgdHJpYW5nbGUgaW5kaWNlcy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXREZWxhdW5heVRyaWFuZ3VsYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlbGF1bmF5VHJpYW5ndWxhdGlvbih2ZXJ0aWNlcykge1xcbiAgICAgIGlmICghdmVydGljZXMgfHwgdmVydGljZXMubGVuZ3RoIDwgMykge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBkZWxhdW5heSB0cmlhbmd1bGF0aW9uIGZvciBwb2ludHMgXCIuY29uY2F0KHZlcnRpY2VzLCBcIi4gSW5wdXQgbXVzdCBjb250YWluIGF0IGxlYXN0IHRocmVlIHBvaW50cy5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcXG4gICAgICB2YXIgbWluWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcXG4gICAgICB2YXIgbWF4WCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcXG4gICAgICB2YXIgbWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcXG4gICAgICB2ZXJ0aWNlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XFxuICAgICAgICBtaW5YID0gdlswXSA8IG1pblggPyB2WzBdIDogbWluWDtcXG4gICAgICAgIG1pblkgPSB2WzFdIDwgbWluWSA/IHZbMV0gOiBtaW5ZO1xcbiAgICAgICAgbWF4WCA9IHZbMF0gPiBtYXhYID8gdlswXSA6IG1heFg7XFxuICAgICAgICBtYXhZID0gdlsxXSA+IG1heFkgPyB2WzFdIDogbWF4WTtcXG4gICAgICB9KTtcXG4gICAgICB2YXIgZFggPSBtYXhYIC0gbWluWDtcXG4gICAgICB2YXIgZFkgPSBtYXhZIC0gbWluWTtcXG4gICAgICB2YXIgbWlkWCA9IChtaW5YICsgbWF4WCkgLyAyO1xcbiAgICAgIHZhciBtaWRZID0gKG1pblkgKyBtYXhZKSAvIDI7XFxuICAgICAgdmFyIGRNYXggPSBkWCA+IGRZID8gZFggOiBkWTtcXG4gICAgICB2YXIgc3VwZXJJbmRpY2VzID0gW3ZlcnRpY2VzLmxlbmd0aCwgdmVydGljZXMubGVuZ3RoICsgMSwgdmVydGljZXMubGVuZ3RoICsgMl07XFxuICAgICAgdmFyIHZlcnRzV2l0aFN1cGVyID0gW10uY29uY2F0KE1hdGhVdGlsc190b0NvbnN1bWFibGVBcnJheSh2ZXJ0aWNlcyksIFtbbWlkWCAtIDIwICogZE1heCwgbWlkWSAtIGRNYXhdLCBbbWlkWCwgbWlkWSArIDIwICogZE1heF0sIFttaWRYICsgMjAgKiBkTWF4LCBtaWRZIC0gZE1heF1dKTtcXG4gICAgICB2YXIgc3VwZXJTb3J0ZWRJbmRpY2VzID0gTWF0aFV0aWxzLnNvcnRQb2ludHNDQ1coc3VwZXJJbmRpY2VzLCB2ZXJ0c1dpdGhTdXBlcik7XFxuICAgICAgdmFyIHN1cGVyVHJpYW5nbGUgPSB7XFxuICAgICAgICBpbmRpY2VzOiBzdXBlclNvcnRlZEluZGljZXMsXFxuICAgICAgICBlZGdlczogW1tzdXBlclNvcnRlZEluZGljZXNbMF0sIHN1cGVyU29ydGVkSW5kaWNlc1sxXV0sIFtzdXBlclNvcnRlZEluZGljZXNbMV0sIHN1cGVyU29ydGVkSW5kaWNlc1syXV0sIFtzdXBlclNvcnRlZEluZGljZXNbMl0sIHN1cGVyU29ydGVkSW5kaWNlc1swXV1dXFxuICAgICAgfTtcXG4gICAgICB2YXIgdHJpYW5nbGVzID0gW3N1cGVyVHJpYW5nbGVdO1xcbiAgICAgIHZlcnRzV2l0aFN1cGVyLmZvckVhY2goZnVuY3Rpb24gKG5ld1ZlcnQsIG5ld0luZGV4KSB7XFxuICAgICAgICB2YXIgaW52YWxpZFRyaWFuZ2xlcyA9IFtdO1xcbiAgICAgICAgdHJpYW5nbGVzLmZvckVhY2goZnVuY3Rpb24gKHRyaWFuZ2xlKSB7XFxuICAgICAgICAgIGlmIChNYXRoVXRpbHMuaXNQb2ludEluQ2lyY3VtQ2lyY2xlKHZlcnRzV2l0aFN1cGVyW3RyaWFuZ2xlLmluZGljZXNbMF1dLCB2ZXJ0c1dpdGhTdXBlclt0cmlhbmdsZS5pbmRpY2VzWzFdXSwgdmVydHNXaXRoU3VwZXJbdHJpYW5nbGUuaW5kaWNlc1syXV0sIG5ld1ZlcnQpKSB7XFxuICAgICAgICAgICAgaW52YWxpZFRyaWFuZ2xlcy5wdXNoKHRyaWFuZ2xlKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICB2YXIgYm91bmRpbmdQb2x5ID0gW107XFxuICAgICAgICBpbnZhbGlkVHJpYW5nbGVzLmZvckVhY2goZnVuY3Rpb24gKHRyaWFuZ2xlKSB7XFxuICAgICAgICAgIHRyaWFuZ2xlLmVkZ2VzLmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHtcXG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xcbiAgICAgICAgICAgIGludmFsaWRUcmlhbmdsZXMuZm9yRWFjaChmdW5jdGlvbiAob3RoZXJUcmlhbmdsZSkge1xcbiAgICAgICAgICAgICAgaWYgKHRyaWFuZ2xlICE9PSBvdGhlclRyaWFuZ2xlKSB7XFxuICAgICAgICAgICAgICAgIG90aGVyVHJpYW5nbGUuZWRnZXMuZm9yRWFjaChmdW5jdGlvbiAob3RoZXJFZGdlKSB7XFxuICAgICAgICAgICAgICAgICAgaWYgKGVkZ2VbMF0gPT09IG90aGVyRWRnZVswXSAmJiBlZGdlWzFdID09PSBvdGhlckVkZ2VbMV0gfHwgZWRnZVsxXSA9PT0gb3RoZXJFZGdlWzBdICYmIGVkZ2VbMF0gPT09IG90aGVyRWRnZVsxXSkge1xcbiAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gMTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkgYm91bmRpbmdQb2x5LnB1c2goZWRnZSk7XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBpbnZhbGlkVHJpYW5nbGVzLmZvckVhY2goZnVuY3Rpb24gKHRyaWFuZ2xlKSB7XFxuICAgICAgICAgIHRyaWFuZ2xlcy5zcGxpY2UodHJpYW5nbGVzLmluZGV4T2YodHJpYW5nbGUpLCAxKTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgYm91bmRpbmdQb2x5LmZvckVhY2goZnVuY3Rpb24gKGVkZ2UpIHtcXG4gICAgICAgICAgdmFyIHNvcnRlZEluZGljZXMgPSBNYXRoVXRpbHMuc29ydFBvaW50c0NDVyhbZWRnZVswXSwgZWRnZVsxXSwgbmV3SW5kZXhdLCB2ZXJ0c1dpdGhTdXBlcik7XFxuICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHtcXG4gICAgICAgICAgICBpbmRpY2VzOiBzb3J0ZWRJbmRpY2VzLFxcbiAgICAgICAgICAgIGVkZ2VzOiBbW3NvcnRlZEluZGljZXNbMF0sIHNvcnRlZEluZGljZXNbMV1dLCBbc29ydGVkSW5kaWNlc1sxXSwgc29ydGVkSW5kaWNlc1syXV0sIFtzb3J0ZWRJbmRpY2VzWzJdLCBzb3J0ZWRJbmRpY2VzWzBdXV1cXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG4gICAgICB2YXIgdHJpYW5nbGVzVG9SZW1vdmUgPSBbXTtcXG4gICAgICB0cmlhbmdsZXMuZm9yRWFjaChmdW5jdGlvbiAodHJpYW5nbGUpIHtcXG4gICAgICAgIHRyaWFuZ2xlLmluZGljZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcXG4gICAgICAgICAgaWYgKHN1cGVySW5kaWNlcy5pbmNsdWRlcyhpbmRleCkpIHtcXG4gICAgICAgICAgICB0cmlhbmdsZXNUb1JlbW92ZS5wdXNoKHRyaWFuZ2xlKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgICAgdHJpYW5nbGVzVG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAodHJpYW5nbGUpIHtcXG4gICAgICAgIHZhciBpbmRleCA9IHRyaWFuZ2xlcy5pbmRleE9mKHRyaWFuZ2xlKTtcXG5cXG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcXG4gICAgICAgICAgdHJpYW5nbGVzLnNwbGljZShpbmRleCwgMSk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIHRyaWFuZ2xlcy5tYXAoZnVuY3Rpb24gKHRyaWFuZ2xlKSB7XFxuICAgICAgICByZXR1cm4gdHJpYW5nbGUuaW5kaWNlcztcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIDJEIHBvaW50IGlzIHdpdGhpbiB0aGUgY2ljcnVtY2lyY2xlXFxyXFxuICAgICAqIGRlZmluZWQgYnkgdGhyZWUgMkQgcG9pbnRzLiBUaGUgdHJpYW5nbGUgcG9pbnRzIG11c3QgYmUgaW5cXHJcXG4gICAgICogY291bnRlci1jbG9ja3dpc2Ugb3JkZXIgYSAtPiBiIC0+IGMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGEgLSBGaXJzdCB0cmlhbmdsZSBwb2ludC5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYiAtIFNlY29uZCB0cmlhbmdsZSBwb2ludC5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYyAtIFRoaXJkIHRyaWFuZ2xlIHBvaW50LlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBwIC0gMkQgcG9pbnQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImlzUG9pbnRJbkNpcmN1bUNpcmNsZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQb2ludEluQ2lyY3VtQ2lyY2xlKGEsIGIsIGMsIHApIHtcXG4gICAgICB2YXIgYXggPSBhWzBdIC0gcFswXTtcXG4gICAgICB2YXIgYXkgPSBhWzFdIC0gcFsxXTtcXG4gICAgICB2YXIgYnggPSBiWzBdIC0gcFswXTtcXG4gICAgICB2YXIgYnkgPSBiWzFdIC0gcFsxXTtcXG4gICAgICB2YXIgY3ggPSBjWzBdIC0gcFswXTtcXG4gICAgICB2YXIgY3kgPSBjWzFdIC0gcFsxXTtcXG4gICAgICByZXR1cm4gKGF4ICogYXggKyBheSAqIGF5KSAqIChieCAqIGN5IC0gY3ggKiBieSkgLSAoYnggKiBieCArIGJ5ICogYnkpICogKGF4ICogY3kgLSBjeCAqIGF5KSArIChjeCAqIGN4ICsgY3kgKiBjeSkgKiAoYXggKiBieSAtIGJ4ICogYXkpID4gMDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIDJEIHBvaW50IGlzIHdpdGhpbiBhIGdpdmVuIHRyaWFuZ2xlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBhIC0gRmlyc3QgdHJpYW5nbGUgcG9pbnQuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGIgLSBTZWNvbmQgdHJpYW5nbGUgcG9pbnQuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGMgLSBUaGlyZCB0cmlhbmdsZSBwb2ludC5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gcCAtIDJEIHBvaW50LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJpc1BvaW50SW5UcmlhbmdsZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNQb2ludEluVHJpYW5nbGUoYSwgYiwgYywgcCkge1xcbiAgICAgIHZhciBkZW5vbSA9IChiWzFdIC0gY1sxXSkgKiAoYVswXSAtIGNbMF0pICsgKGNbMF0gLSBiWzBdKSAqIChhWzFdIC0gY1sxXSk7XFxuICAgICAgdmFyIGFWYWwgPSAoKGJbMV0gLSBjWzFdKSAqIChwWzBdIC0gY1swXSkgKyAoY1swXSAtIGJbMF0pICogKHBbMV0gLSBjWzFdKSkgLyBkZW5vbTtcXG4gICAgICB2YXIgYlZhbCA9ICgoY1sxXSAtIGFbMV0pICogKHBbMF0gLSBjWzBdKSArIChhWzBdIC0gY1swXSkgKiAocFsxXSAtIGNbMV0pKSAvIGRlbm9tO1xcbiAgICAgIHZhciBjVmFsID0gMSAtIGFWYWwgLSBiVmFsO1xcbiAgICAgIHJldHVybiBhVmFsID49IDAgJiYgYVZhbCA8PSAxICYmIGJWYWwgPj0gMCAmJiBiVmFsIDw9IDEgJiYgY1ZhbCA+PSAwICYmIGNWYWwgPD0gMTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB0aGUgc29ydGVkIGluZGljZXMgb2YgYSBnaXZlbiBzZXQgb2YgMkQgcG9pbnRzIGluXFxyXFxuICAgICAqIGNvdW50ZXItY2xvY2t3aXNlIG9yZGVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBpbmRpY2VzIC0gTGlzdCBvZiBpbmRpY2VzLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxBcnJheS48bnVtYmVyPj59IHZlcnRpY2VzIC0gTGlzdCBvZiAyRCBwb2ludHMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48QXJyYXkuPG51bWJlcj4+fSAtIExpc3Qgb2Ygc29ydGVkIGluZGljZXMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic29ydFBvaW50c0NDV1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc29ydFBvaW50c0NDVyhpbmRpY2VzLCB2ZXJ0aWNlcykge1xcbiAgICAgIHZhciBjZW50cm9pZCA9IFswLCAwXTtcXG4gICAgICBpbmRpY2VzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XFxuICAgICAgICBjZW50cm9pZFswXSArPSB2ZXJ0aWNlc1tpbmRleF1bMF07XFxuICAgICAgICBjZW50cm9pZFsxXSArPSB2ZXJ0aWNlc1tpbmRleF1bMV07XFxuICAgICAgfSk7XFxuICAgICAgY2VudHJvaWRbMF0gLz0gaW5kaWNlcy5sZW5ndGg7XFxuICAgICAgY2VudHJvaWRbMV0gLz0gaW5kaWNlcy5sZW5ndGg7XFxuICAgICAgaW5kaWNlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XFxuICAgICAgICB2YXIgYlZhbCA9IE1hdGguYXRhbjIodmVydGljZXNbYl1bMV0gLSBjZW50cm9pZFsxXSwgdmVydGljZXNbYl1bMF0gLSBjZW50cm9pZFswXSk7XFxuICAgICAgICB2YXIgYVZhbCA9IE1hdGguYXRhbjIodmVydGljZXNbYV1bMV0gLSBjZW50cm9pZFsxXSwgdmVydGljZXNbYV1bMF0gLSBjZW50cm9pZFswXSk7XFxuICAgICAgICByZXR1cm4gYVZhbCAtIGJWYWw7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIGluZGljZXM7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENhY2x1YXRlcyB0aGUgYXJlYSBvZiBhIHRyaWFuZ2xlXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IGEgLSBGaXJzdCB0cmlhbmdsZSBwb2ludC5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYiAtIFNlY29uZCB0cmlhbmdsZSBwb2ludC5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gYyAtIFRoaXJkIHRyaWFuZ2xlIHBvaW50LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInRyaWFuZ2xlQXJlYVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcXG4gICAgICByZXR1cm4gTWF0aC5hYnMoKGFbMF0gKiAoYlsxXSAtIGNbMV0pICsgYlswXSAqIChjWzFdIC0gYVsxXSkgKyBjWzBdICogKGFbMV0gLSBiWzFdKSkgKiAwLjUpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gdGhlIG1hZ25pdHVkZSBvZiBhIGdpdmVuIHZlY3RvciBhcnJheS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdmVjdG9yIC0gQXJyYXkgY29uc2lzdGluZyBvZiBudW1iZXJzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldFZlY3Rvck1hZ25pdHVkZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmVjdG9yTWFnbml0dWRlKHZlY3Rvcikge1xcbiAgICAgIGlmICghKHZlY3RvciBpbnN0YW5jZW9mIEFycmF5KSkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBtYWduaXR1ZGUgZm9yIHZlY3RvciBcIi5jb25jYXQodmVjdG9yLCBcIi4gSW5wdXQgbXVzdCBiZSBhbiBBcnJheSBudW1iZXJzLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciByZWR1Y2VyID0gZnVuY3Rpb24gcmVkdWNlcihhY2N1bXVsYXRvciwgY3VycmVudFZhbHVlKSB7XFxuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRWYWx1ZSAhPT0gXFwnbnVtYmVyXFwnKSB7XFxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZXQgbWFnbml0dWRlIGZvciB2ZWN0b3IgXCIuY29uY2F0KHZlY3RvciwgXCIuIEFsbCBpdGVtcyBpbiB0aGUgaW5wdXQgQXJyYXkgbXVzdCBiZSBudW1iZXJzLlwiKSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3IgKyBNYXRoLnBvdyhjdXJyZW50VmFsdWUsIDIpO1xcbiAgICAgIH07XFxuXFxuICAgICAgcmV0dXJuIE1hdGguc3FydCh2ZWN0b3IucmVkdWNlKHJlZHVjZXIsIDApKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIHRoZSBkb3QgcHJvZHVjdCBiZXR3ZWVuIHR3byB2ZWN0b3JzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSB2ZWN0b3JBIC0gQXJyYXkgY29uc2lzdGluZyBvZiBudW1iZXJzLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSB2ZWN0b3JCIC0gQXJyYXkgY29uc2lzdGluZyBvZiBudW1iZXJzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldERvdFByb2R1Y3RcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERvdFByb2R1Y3QodmVjdG9yQSwgdmVjdG9yQikge1xcbiAgICAgIGlmICghKHZlY3RvckEgaW5zdGFuY2VvZiBBcnJheSkgfHwgISh2ZWN0b3JCIGluc3RhbmNlb2YgQXJyYXkpIHx8IHZlY3RvckEubGVuZ3RoICE9PSB2ZWN0b3JCLmxlbmd0aCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBkb3QgcHJvZHVjdCBiZXR3ZWVuIFwiLmNvbmNhdCh2ZWN0b3JBLCBcIiBhbmQgXCIpLmNvbmNhdCh2ZWN0b3JCLCBcIi4gSW5wdXRzIG11c3QgYmUgdmVjdG9ycyBvZiB0aGUgc2FtZSBsZW5ndGguXCIpKTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIHJlc3VsdCA9IDA7XFxuICAgICAgdmVjdG9yQS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZUEsIGluZGV4KSB7XFxuICAgICAgICB2YXIgdmFsdWVCID0gdmVjdG9yQltpbmRleF07XFxuXFxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlQSAhPT0gXFwnbnVtYmVyXFwnIHx8IHR5cGVvZiB2YWx1ZUIgIT09IFxcJ251bWJlclxcJykge1xcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IGRvdCBwcm9kdWN0IGJldHdlZW4gXCIuY29uY2F0KHZlY3RvckEsIFwiIGFuZCBcIikuY29uY2F0KHZlY3RvckIsIFwiLiBWZWN0b3JzIG11c3Qgb25seSBjb25zaXN0IG9mIG51bWVyaWMgdmFsdWVzLlwiKSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXN1bHQgKz0gdmFsdWVBICogdmFsdWVCO1xcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiB0aGUgYW5nbGUgaW4gcmFkaWFucyBiZXR3ZWVuIHZlY3RvckEgYW5kIHZlY3RvckIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHZlY3RvckEgLSBBcnJheSBjb25zaXN0aW5nIG9mIG51bWJlcnMuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHZlY3RvckIgLSBBcnJheSBjb25zaXN0aW5nIG9mIG51bWJlcnMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0QW5nbGVCZXR3ZWVuXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmdsZUJldHdlZW4odmVjdG9yQSwgdmVjdG9yQikge1xcbiAgICAgIHZhciBub3JtYWxBID0gdGhpcy5ub3JtYWxpemVWZWN0b3IoTWF0aFV0aWxzX3RvQ29uc3VtYWJsZUFycmF5KHZlY3RvckEpKTtcXG4gICAgICB2YXIgbm9ybWFsQiA9IHRoaXMubm9ybWFsaXplVmVjdG9yKE1hdGhVdGlsc190b0NvbnN1bWFibGVBcnJheSh2ZWN0b3JCKSk7XFxuICAgICAgdmFyIGRvdCA9IHRoaXMuZ2V0RG90UHJvZHVjdChub3JtYWxBLCBub3JtYWxCKTtcXG4gICAgICByZXR1cm4gTWF0aC5hY29zKHRoaXMuY2xhbXAoZG90LCAtMSwgMSkpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBNdWx0aXBseSBhIDN4MyByb3RhdGlvbiBtYXRyaXggd2l0aCBhIHZlY3RvcjMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHZlY3RvcjMgLSBBcnJheSBjb25zaXN0aW5nIG9mIDMgbnVtYmVycyByZXByZXNlbnRpbmdcXHJcXG4gICAgICogYSBkaXJlY3Rpb24gdmVjdG9yLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBtYXRyaXgzIC0gQW4gYXJyYXkgb2YgOSBudW1iZXJzIHJlcHJlc2VudGluZyBhIHJvd1xcclxcbiAgICAgKiBtYWpvciByb3RhdGlvbiBtYXRyaXguXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn0gLSBBbiBhcnJheSBvZiAzIG51bWJlcnMgcmVwcmVzZW50aW5nIHRoZSBuZXcgZGlyZWN0aW9uXFxyXFxuICAgICAqIG9mIHRoZSB2ZWN0b3IuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicm90YXRlVmVjdG9yXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByb3RhdGVWZWN0b3IodmVjdG9yMywgbWF0cml4Mykge1xcbiAgICAgIGlmICghKHZlY3RvcjMgaW5zdGFuY2VvZiBBcnJheSkgfHwgdmVjdG9yMy5sZW5ndGggIT09IDMgfHwgIXZlY3RvcjMuZXZlcnkoZnVuY3Rpb24gKHYpIHtcXG4gICAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXFwnbnVtYmVyXFwnO1xcbiAgICAgIH0pKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgcm90YXRlIHZlY3RvciBcIi5jb25jYXQodmVjdG9yMywgXCIgYnkgcm90YXRpb24gbWF0cml4IFwiKS5jb25jYXQobWF0cml4MywgXCIuIElucHV0IHZlY3RvciBtdXN0IGJlIGFuIGFycmF5IG9mIDMgbnVtYmVycy5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoIShtYXRyaXgzIGluc3RhbmNlb2YgQXJyYXkpIHx8IG1hdHJpeDMubGVuZ3RoICE9PSA5IHx8ICFtYXRyaXgzLmV2ZXJ5KGZ1bmN0aW9uICh2KSB7XFxuICAgICAgICByZXR1cm4gdHlwZW9mIHYgPT09IFxcJ251bWJlclxcJztcXG4gICAgICB9KSkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJvdGF0ZSB2ZWN0b3IgXCIuY29uY2F0KHZlY3RvcjMsIFwiIGJ5IHJvdGF0aW9uIG1hdHJpeCBcIikuY29uY2F0KG1hdHJpeDMsIFwiLiBJbnB1dCBtYXRyaXgzIG11c3QgYmUgYW4gYXJyYXkgb2YgOSBudW1iZXJzLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciB4ID0gbWF0cml4M1swXSAqIHZlY3RvcjNbMF0gKyBtYXRyaXgzWzNdICogdmVjdG9yM1sxXSArIG1hdHJpeDNbNl0gKiB2ZWN0b3IzWzJdO1xcbiAgICAgIHZhciB5ID0gbWF0cml4M1sxXSAqIHZlY3RvcjNbMF0gKyBtYXRyaXgzWzRdICogdmVjdG9yM1sxXSArIG1hdHJpeDNbN10gKiB2ZWN0b3IzWzJdO1xcbiAgICAgIHZhciB6ID0gbWF0cml4M1syXSAqIHZlY3RvcjNbMF0gKyBtYXRyaXgzWzVdICogdmVjdG9yM1sxXSArIG1hdHJpeDNbOF0gKiB2ZWN0b3IzWzJdO1xcbiAgICAgIHJldHVybiBbeCwgeSwgel07XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIE5vcm1hbGl6ZSBhIGdpdmVuIHZlY3RvciBhcnJheS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gdmVjdG9yIC0gQXJyYXkgY29uc2lzdGluZyBvZiBudW1iZXJzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPG51bWJlcj59IFRoZSBvcmlnaW5hbCB2ZWN0b3Igd2l0aCBub3JtYWxpemVkIHZhbHVlcywgZm9yIGNoYWluaW5nLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIm5vcm1hbGl6ZVZlY3RvclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9ybWFsaXplVmVjdG9yKHZlY3Rvcikge1xcbiAgICAgIHZhciBtYWduaXR1ZGUgPSB0aGlzLmdldFZlY3Rvck1hZ25pdHVkZSh2ZWN0b3IpO1xcblxcbiAgICAgIGlmIChtYWduaXR1ZGUgPT09IDApIHtcXG4gICAgICAgIHZlY3Rvci5maWxsKDApO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICB2ZWN0b3IuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XFxuICAgICAgICAgIHZlY3RvcltpbmRleF0gPSB2YWx1ZSAvIG1hZ25pdHVkZTtcXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gdmVjdG9yO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeHRyYWN0IHRoZSAzeDMgcm90YXRpb24gbWF0cml4IGZyb20gYSBnaXZlbiA0eDQgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBtYXRyaXg0IC0gQW4gYXJyYXkgb2YgMTYgbnVtYmVycyByZXByZXNlbnRpbmcgYSByb3dcXHJcXG4gICAgICogbWFqb3IgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPG51bWJlcj59IC0gQW4gYXJyYXkgb2YgOSBudW1iZXJzIHJlcHJlc2VudGluZyBhIHJvdyBtYWpvclxcclxcbiAgICAgKiByb3RhdGlvbiBtYXRyaXguXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0Um90YXRpb25NYXRyaXhcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJvdGF0aW9uTWF0cml4KG1hdHJpeDQpIHtcXG4gICAgICBpZiAoIShtYXRyaXg0IGluc3RhbmNlb2YgQXJyYXkpIHx8IG1hdHJpeDQubGVuZ3RoICE9PSAxNiB8fCAhbWF0cml4NC5ldmVyeShmdW5jdGlvbiAodikge1xcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcXCdudW1iZXJcXCc7XFxuICAgICAgfSkpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IG1hdHJpeCBcIi5jb25jYXQobWF0cml4NCwgXCIgdG8gYSByb3RhdGlvbiBtYXRyaXguIElucHV0IG1hdHJpeCBtdXN0IGJlIGFuIGFycmF5IG9mIDE2IG51bWJlcnMuXCIpKTtcXG4gICAgICB9IC8vIEV4dHJhY3Qgc2NhbGVcXG5cXG5cXG4gICAgICB2YXIgc2NhbGVYID0gMSAvICh0aGlzLmdldFZlY3Rvck1hZ25pdHVkZShtYXRyaXg0LnNsaWNlKDAsIDQpKSB8fCAxKTtcXG4gICAgICB2YXIgc2NhbGVZID0gMSAvICh0aGlzLmdldFZlY3Rvck1hZ25pdHVkZShtYXRyaXg0LnNsaWNlKDQsIDgpKSB8fCAxKTtcXG4gICAgICB2YXIgc2NhbGVaID0gMSAvICh0aGlzLmdldFZlY3Rvck1hZ25pdHVkZShtYXRyaXg0LnNsaWNlKDgsIDEyKSkgfHwgMSk7XFxuICAgICAgcmV0dXJuIFttYXRyaXg0WzBdICogc2NhbGVYLCBtYXRyaXg0WzFdICogc2NhbGVYLCBtYXRyaXg0WzJdICogc2NhbGVYLCBtYXRyaXg0WzRdICogc2NhbGVZLCBtYXRyaXg0WzVdICogc2NhbGVZLCBtYXRyaXg0WzZdICogc2NhbGVZLCBtYXRyaXg0WzhdICogc2NhbGVaLCBtYXRyaXg0WzldICogc2NhbGVaLCBtYXRyaXg0WzEwXSAqIHNjYWxlWl07XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhbiBhcnJheSBjb250YWluaW5nIHRoZSBzcGhlcmljYWwgY29vcmRpbmF0ZXMgb2YgdGhlIGdpdmVuIGNhcnRlc2lhblxcclxcbiAgICAgKiB4eXogY29vcmRpbmF0ZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gUG9zaXRpb24gYWxvbmcgdGhlIHggYXhpcy5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSBQb3NpdGlvbiBhbG9uZyB0aGUgeSBheGlzLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geiAtIFBvc2l0aW9uIGFsb25nIHRoZSB6IGF4aXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn0gLSBBbiBhcnJheSBjb25zaXN0aW5nIG9mIHRocmVlIG51bWJlcmVzIHdoZXJlIGluZGV4XFxyXFxuICAgICAqIDAgcmVwcmVzZW50cyB0aGUgcmFkaXVzLCBpbmRleCAxIHJlcHJlc2VudHMgdGhlIHZlcnRpY2FsL3BvbGFyIGFuZ2xlIGluIHJhZGlhbnNcXHJcXG4gICAgICogYW5kIGluZGV4IDIgcmVwcmVzZW50cyB0aGUgaG9yaXpvbnRhbC9hemltdXRoYWwgYW5nbGUgaW4gcmFkaWFucy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjYXJ0ZXNpYW5Ub1NwaGVyaWNhbFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FydGVzaWFuVG9TcGhlcmljYWwoeCwgeSwgeikge1xcbiAgICAgIHZhciByID0gdGhpcy5nZXRWZWN0b3JNYWduaXR1ZGUoW3gsIHksIHpdKTsgLy8gUmV0dXJuIGlkZW50aXR5IGlmIHRoZSB2ZWN0b3IgaGFzIG5vIGxlbmd0aFxcblxcbiAgICAgIGlmIChyID09PSAwKSB7XFxuICAgICAgICByZXR1cm4gWzAsIDAsIDBdO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gW3IsIE1hdGguYWNvcyh0aGlzLmNsYW1wKHkgLyByLCAtMSwgMSkpLCBNYXRoLmF0YW4yKHgsIHopXTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR3JhZHVhbGx5IGNoYW5nZSBhIHZhbHVlIG9mIGEgbnVtZXJpYyBwcm9wZXJ0eSB0b3dhcmRzIGEgZ29hbCBvdmVyIHRpbWUgdXNpbmdcXHJcXG4gICAgICogYSBjcml0aWNhbGx5IGRhbXBlZCBzcHJpbmcgZnVuY3Rpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VmFsdWUgLSBUaGUgc3RhcnRpbmcgdmFsdWUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXRWYWx1ZS0gVGhlIGdvYWwgdmFsdWUuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IFt2YWx1ZVN0b3JlID0gWzAsIDBdXSAtIEFuIEFycmF5IGNvbnNpc3Rpbmcgb2YgdHdvXFxyXFxuICAgICAqIG51bWJlcnMgd2hlcmUgdGhlIGZpcnN0IG51bWJlciBob2xkcyB0aGUgcmVzdWx0IHZhbHVlIGFuZCB0aGUgc2Vjb25kIGhvbGRzXFxyXFxuICAgICAqIHRoZSB2ZWxvY2l0eSB0aGF0IHJlc3VsdGVkIGluIHRoYXQgdmFsdWUuIFRoZSBzYW1lIGFycmF5IHNob3VsZCBiZSBwcm92aWRlZFxcclxcbiAgICAgKiB3aXRoIGVhY2ggY2FsbCB0byB0aGlzIGZ1bmN0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlbHRhVGltZSA9IDFlLTddIC0gVGhlIHRpbWUgc2luY2UgdGhlIGxhc3QgY2FsbCB0byB0aGlzIGZ1bmN0aW9uXFxyXFxuICAgICAqIGluIHNlY29uZHMuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc21vb3RoVGltZSA9IDAuM10gLSBUaGUgYXBwcm94aW1hdGUgYW1vdW50IG9mIHRpbWUgaW4gc2Vjb25kc1xcclxcbiAgICAgKiBpdCBzaG91bGQgdGFrZSB0byByZWFjaCB0aGUgdGFyZ2V0IHZhbHVlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFNwZWVkID0gMWU3XSAtIEEgY2xhbXBpbmcgdmFsdWUgZm9yIHRoZSBtYXhpbXVtIHNwZWVkIHRoZVxcclxcbiAgICAgKiB2YWx1ZSBjYW4gY2hhbmdlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPG51bWJlcj59IC0gVGhlIHZhbHVlU3RvcmUgYXJyYXkuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGFtcFZhbHVlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkYW1wVmFsdWUoY3VycmVudFZhbHVlLCB0YXJnZXRWYWx1ZSkge1xcbiAgICAgIHZhciB2YWx1ZVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbMCwgMF07XFxuICAgICAgdmFyIGRlbHRhVGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMWUtNztcXG4gICAgICB2YXIgc21vb3RoVGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMC4zO1xcbiAgICAgIHZhciBtYXhTcGVlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMWU3O1xcbiAgICAgIHNtb290aFRpbWUgPSBNYXRoLm1heCgwLjAwMDEsIHNtb290aFRpbWUpO1xcbiAgICAgIGRlbHRhVGltZSA9IE1hdGgubWF4KDFlLTcsIGRlbHRhVGltZSk7IC8vIEZpbmQgdGhlIGRlbHRhIGJldHdlZW4gdmFsdWVzIGFuZCB1c2UgaXQgdG8gZXN0aW1hdGUgdGhlIHByZXZpb3VzIHZhbHVlXFxuXFxuICAgICAgdmFyIGNsYW1wVGltZSA9IG1heFNwZWVkICogc21vb3RoVGltZTtcXG4gICAgICB2YXIgZGVsdGFWYWx1ZSA9IGN1cnJlbnRWYWx1ZSAtIHRhcmdldFZhbHVlO1xcbiAgICAgIHZhciBjbGFtcERlbHRhVmFsdWUgPSB0aGlzLmNsYW1wKGRlbHRhVmFsdWUsIC1jbGFtcFRpbWUsIGNsYW1wVGltZSk7XFxuICAgICAgdmFyIGxhc3RWYWx1ZSA9IGN1cnJlbnRWYWx1ZSAtIGNsYW1wRGVsdGFWYWx1ZTsgLy8gQ2FsY3VsYXRlIGRhbXBpbmcgZmFjdG9yc1xcblxcbiAgICAgIHZhciBkMSA9IDIgLyBzbW9vdGhUaW1lO1xcbiAgICAgIHZhciBkMiA9IGQxICogZGVsdGFUaW1lO1xcbiAgICAgIHZhciBkMyA9IDEgLyAoMSArIGQyICsgMC41ICogTWF0aC5wb3coZDIsIDIpICsgMC4yNSAqIE1hdGgucG93KGQyLCAzKSk7XFxuICAgICAgdmFyIGQ0ID0gKHZhbHVlU3RvcmVbMV0gKyBkMSAqIGNsYW1wRGVsdGFWYWx1ZSkgKiBkZWx0YVRpbWU7IC8vIERhbXAgdGhlIHRhcmdldCB2YWx1ZSBhbmQgdXBkYXRlIHRoZSB2ZWxvY2l0eVxcblxcbiAgICAgIHZhbHVlU3RvcmVbMF0gPSBsYXN0VmFsdWUgKyAoY2xhbXBEZWx0YVZhbHVlICsgZDQpICogZDM7XFxuICAgICAgdmFsdWVTdG9yZVsxXSA9ICh2YWx1ZVN0b3JlWzFdIC0gZDEgKiBkNCkgKiBkMzsgLy8gUHJldmVudCBvdmVyc2hvb3RpbmdcXG5cXG4gICAgICBpZiAodGFyZ2V0VmFsdWUgLSBjdXJyZW50VmFsdWUgPiAwID09PSB2YWx1ZVN0b3JlWzBdID4gdGFyZ2V0VmFsdWUpIHtcXG4gICAgICAgIHZhbHVlU3RvcmVbMF0gPSB0YXJnZXRWYWx1ZTtcXG4gICAgICAgIHZhbHVlU3RvcmVbMV0gPSAodmFsdWVTdG9yZVswXSAtIHRhcmdldFZhbHVlKSAvIGRlbHRhVGltZTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHZhbHVlU3RvcmU7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBNYXRoVXRpbHM7XFxufSgpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgY29yZV9NYXRoVXRpbHMgPSAoTWF0aFV0aWxzKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9Ib3N0RW52aXJvbm1lbnQuanNcXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXFxuXFxuLyoqXFxyXFxuICogSW5kaWNhdGVzIHRoZSB0eXBlIG9mIGhvc3QgYnVpbGQuXFxyXFxuICpcXHJcXG4gKiBAdHlwZSB7c3RyaW5nfVxcclxcbiAqL1xcbnZhciBlbnYgPSBcXCdjb3JlXFwnO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL01lc3Nlbmdlci5qc1xcbmZ1bmN0aW9uIE1lc3Nlbmdlcl9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gTWVzc2VuZ2VyX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIE1lc3Nlbmdlcl9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIE1lc3Nlbmdlcl9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgTWVzc2VuZ2VyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cXG5cXG4vKipcXHJcXG4gKiBDbGFzcyB0aGF0IGNhbiBleGVjdXRlIGZ1bmN0aW9ucyB3aGVuIGxvY2FsIG1lc3NhZ2VzIGFyZSByZWNlaXZlZC4gTG9jYWwgbWVzc2FnZXNcXHJcXG4gKiBhcmUgcHJlZml4ZWQgd2l0aCB0aGUgaW5zdGFuY2VcXCdzIGlkLlxcclxcbiAqXFxyXFxuICogQGFsaWFzIGNvcmUvTWVzc2VuZ2VyXFxyXFxuICpcXHJcXG4gKiBAcHJvcGVydHkge2NvcmUvTWVzc2VuZ2VyfSBHbG9iYWxNZXNzZW5nZXIgLSBBIG1lc3NlbmdlciB0aGF0IGNhbiBiZSB1c2VkIGZvclxcclxcbiAqIGdsb2JhbCBtZXNzYWdpbmcuIFdoZW4gdXNpbmcgc3RhdGljIGxpc3RlbiBhbmQgZW1pdCBtZXRob2RzIHRoZXkgYXJlIGV4ZWN1dGVkXFxyXFxuICogb24gdGhpcyBtZXNzZW5nZXIuXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IEVWRU5UUyAtIEJ1aWx0LWluIGV2ZW50cyB0aGF0IHRoZSBNZXNzZW5nZXIgZW1pdHMuXFxyXFxuICovXFxuXFxudmFyIE1lc3NlbmdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7YW55PX0gaWQgLSBJZCBmb3IgdGhlIG9iamVjdC4gSWYgbm9uZSBpcyBwcm92aWRlZCBhIG5ldyBpZCB3aWxsXFxyXFxuICAgKiBiZSBjcmVhdGVkLiBJZCBzaG91bGQgYmUgYWJsZSB0byBiZSByZXByZXNlbnRlZCBhcyBhIHN0cmluZy5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gTWVzc2VuZ2VyKGlkKSB7XFxuICAgIE1lc3Nlbmdlcl9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZXNzZW5nZXIpO1xcblxcbiAgICB0aGlzLl9pZCA9IGlkICE9PSB1bmRlZmluZWQgPyBpZCA6IGNvcmVfVXRpbHMuY3JlYXRlSWQoKTtcXG4gICAgdGhpcy5fZGlzcGF0Y2hlciA9IHdpbmRvdztcXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XFxuICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJzID0ge307XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgdGhlIHN0cmluZyBpZCBvZiB0aGUgb2JqZWN0LlxcclxcbiAgICpcXHJcXG4gICAqIEByZWFkb25seVxcclxcbiAgICogQHR5cGUge3N0cmluZ31cXHJcXG4gICAqL1xcblxcblxcbiAgTWVzc2VuZ2VyX2NyZWF0ZUNsYXNzKE1lc3NlbmdlciwgW3tcXG4gICAga2V5OiBcImlkXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9pZDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUHJlZml4IGEgbWVzc2FnZSB3aXRoIHRoZSBpbnN0YW5jZSBpZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ31cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfY3JlYXRlTG9jYWxNZXNzYWdlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlTG9jYWxNZXNzYWdlKG1lc3NhZ2UpIHtcXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5pZCwgXCIuXCIpLmNvbmNhdChtZXNzYWdlKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNhbGwgYSBjYWxsYmFjayBmdW5jdGlvbiBhbmQgc3VwcGx5IHRoZSBldmVudFxcJ3NcXHJcXG4gICAgICogZGV0YWlsIHByb3BlcnR5IGFzIGFuIGFyZ3VtZW50LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NyZWF0ZUxpc3RlbmVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlTGlzdGVuZXIoY2FsbGJhY2spIHtcXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgIHZhciB2YWx1ZTtcXG5cXG4gICAgICAgIGlmIChlLmRldGFpbCAhPT0gbnVsbCkge1xcbiAgICAgICAgICB2YWx1ZSA9IGUuZGV0YWlsO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgY2FsbGJhY2sodmFsdWUpO1xcbiAgICAgIH07XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENyZWF0ZSBhbiBldmVudCBvYmplY3QgYW5kIHNlbmQgaXQgdG8gbGlzdGVuZXJzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIEV2ZW50IHR5cGUgbmFtZS5cXHJcXG4gICAgICogQHBhcmFtIHthbnk9fSB2YWx1ZSAtIFZhbHVlIHRvIHNlbmQgdG8gbGlzdGVuZXJzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Q3VzdG9tRXZlbnR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NyZWF0ZUV2ZW50XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlRXZlbnQobWVzc2FnZSwgdmFsdWUpIHtcXG4gICAgICByZXR1cm4gbmV3IEN1c3RvbUV2ZW50KG1lc3NhZ2UsIHtcXG4gICAgICAgIGRldGFpbDogdmFsdWVcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVnaXN0ZXIgYW4gZXZlbnQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gRXZlbnQgdHlwZSBuYW1lLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIEEgbGlzdGVuZXIgZnVuY3Rpb24gZ2VuZXJhdGVkIHVzaW5nIF9jcmVhdGVMaXN0ZW5lci5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfYWRkTGlzdGVuZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcihtZXNzYWdlLCBsaXN0ZW5lcikge1xcbiAgICAgIHRoaXMuX2Rpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9jcmVhdGVMb2NhbE1lc3NhZ2UobWVzc2FnZSksIGxpc3RlbmVyKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVW5yZWdpc3RlciBhbiBldmVudC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBFdmVudCB0eXBlIG5hbWUuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gQSBsaXN0ZW5lciBmdW5jdGlvbiBnZW5lcmF0ZWQgdXNpbmcgX2NyZWF0ZUxpc3RlbmVyLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9yZW1vdmVMaXN0ZW5lclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZUxpc3RlbmVyKG1lc3NhZ2UsIGxpc3RlbmVyKSB7XFxuICAgICAgdGhpcy5fZGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX2NyZWF0ZUxvY2FsTWVzc2FnZShtZXNzYWdlKSwgbGlzdGVuZXIpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlIGEgZnVuY3Rpb24gd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZm9yIHRoaXMgb2JqZWN0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGxpc3RlbiBmb3IuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbmNlIHRoZSBtZXNzYWdlIGlzIHJlY2VpdmVkLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImxpc3RlblRvXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5UbyhtZXNzYWdlLCBjYWxsYmFjaykge1xcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIGxpc3RlbmVyIGZvciBcIi5jb25jYXQobWVzc2FnZSwgXCIgb24gXCIpLmNvbmNhdCh0aGlzLmlkLCBcIi4gQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmICh0aGlzLl9jYWxsYmFja3NbbWVzc2FnZV0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzW21lc3NhZ2VdID0gW107XFxuICAgICAgICB0aGlzLl9ldmVudExpc3RlbmVyc1ttZXNzYWdlXSA9IFtdO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgbGlzdGVuZXIgPSB0aGlzLl9jcmVhdGVMaXN0ZW5lcihjYWxsYmFjayk7XFxuXFxuICAgICAgdGhpcy5fY2FsbGJhY2tzW21lc3NhZ2VdLnB1c2goY2FsbGJhY2spO1xcblxcbiAgICAgIHRoaXMuX2V2ZW50TGlzdGVuZXJzW21lc3NhZ2VdLnB1c2gobGlzdGVuZXIpO1xcblxcbiAgICAgIHRoaXMuX2FkZExpc3RlbmVyKG1lc3NhZ2UsIGxpc3RlbmVyKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUHJldmVudCBhIGZ1bmN0aW9uIGZyb20gYmVpbmcgZXhlY3V0ZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZm9yIHRoaXNcXHJcXG4gICAgICogb2JqZWN0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHN0b3AgbGlzdGVuaW5nIGZvci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gcmVtb3ZlLiBJZiBub25lIGlzIGRlZmluZWQsXFxyXFxuICAgICAqIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciB0aGUgbWVzc2FnZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XFxuICAgICAgaWYgKHRoaXMuX2NhbGxiYWNrc1ttZXNzYWdlXSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgZGVmaW5lZCwgY2FsbCBzdG9wTGlzdGVuaW5nIG9uIGFsbCBjYWxsYmFja3MgZm9yIHRoZSBtZXNzYWdlXFxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fY2FsbGJhY2tzW21lc3NhZ2VdLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XFxuICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZyhtZXNzYWdlLCB0aGlzLl9jYWxsYmFja3NbbWVzc2FnZV1baV0pO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gSWYgYSBjYWxsYmFjayB3YXMgZGVmaW5lZCwgbWFrZSBzdXJlIGl0XFwncyBhIGxpc3RlbmVyXFxuXFxuXFxuICAgICAgdmFyIGluZGV4ID0gdGhpcy5fY2FsbGJhY2tzW21lc3NhZ2VdLmluZGV4T2YoY2FsbGJhY2spO1xcblxcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGxpc3RlbmVyID0gdGhpcy5fZXZlbnRMaXN0ZW5lcnNbbWVzc2FnZV1baW5kZXhdO1xcblxcbiAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVyKG1lc3NhZ2UsIGxpc3RlbmVyKTtcXG5cXG4gICAgICB0aGlzLl9jYWxsYmFja3NbbWVzc2FnZV0uc3BsaWNlKGluZGV4LCAxKTtcXG5cXG4gICAgICB0aGlzLl9ldmVudExpc3RlbmVyc1ttZXNzYWdlXS5zcGxpY2UoaW5kZXgsIDEpO1xcblxcbiAgICAgIGlmICh0aGlzLl9jYWxsYmFja3NbbWVzc2FnZV0ubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzW21lc3NhZ2VdO1xcbiAgICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50TGlzdGVuZXJzW21lc3NhZ2VdO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRGUtcmVnaXN0ZXIgY2FsbGJhY2socykgZnJvbSBiZWluZyBleGVjdXRlZCB3aGVuIG1lc3NhZ2VzIG1hdGNoaW5nIHRoZSBnaXZlblxcclxcbiAgICAgKiByZWd1bGFyIGV4cHJlc3Npb24gYXJlIHJlY2VpdmVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge1JlZ2V4cH0gcmVnZXhwIC0gcmVnZXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBmaWx0ZXIgbWVzc2FnZXMgd2l0aC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gcmVtb3ZlLiBJZiBub25lIGlzIGRlZmluZWQsXFxyXFxuICAgICAqIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciBtZXNzYWdlcyBtYXRjaGluZyB0aGUgcmVndWxhciBleHByZXNzaW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdCeVJlZ2V4cFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ0J5UmVnZXhwKHJlZ2V4cCwgY2FsbGJhY2spIHtcXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgICAgIHZhciBtZXNzYWdlcyA9IE9iamVjdC5rZXlzKHRoaXMuX2NhbGxiYWNrcykuZmlsdGVyKGZ1bmN0aW9uIChtZXNzYWdlKSB7XFxuICAgICAgICByZXR1cm4gcmVnZXhwLnRlc3QobWVzc2FnZSk7XFxuICAgICAgfSk7XFxuICAgICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xcbiAgICAgICAgX3RoaXMuc3RvcExpc3RlbmluZyhtZXNzYWdlLCBjYWxsYmFjayk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFByZXZlbnQgYW55IGZ1bmN0aW9ucyBmcm9tIGJlaW5nIGV4ZWN1dGVkIHdoZW4gYW55IG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZm9yXFxyXFxuICAgICAqIHRoaXMgb2JqZWN0LlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdUb0FsbFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ1RvQWxsKCkge1xcbiAgICAgIHZhciBtZXNzYWdlcyA9IE9iamVjdC5rZXlzKHRoaXMuX2NhbGxiYWNrcyk7XFxuXFxuICAgICAgZm9yICh2YXIgaSA9IG1lc3NhZ2VzLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XFxuICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcobWVzc2FnZXNbaV0pO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU2VuZCBhIG1lc3NhZ2UsIGNhdXNpbmcgbGlzdGVuZXIgZnVuY3Rpb25zIGZvciB0aGUgbWVzc2FnZSBvbiB0aGlzIG9iamVjdFxcclxcbiAgICAgKiB0byBiZSBleGVjdXRlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBlbWl0LlxcclxcbiAgICAgKiBAcGFyYW0ge2FueT19IHZhbHVlIC0gT3B0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBsaXN0ZW5lciBjYWxsYmFja3MuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZW1pdFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChtZXNzYWdlLCB2YWx1ZSkge1xcbiAgICAgIGlmICh0aGlzLl9jYWxsYmFja3NbbWVzc2FnZV0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICBtZXNzYWdlID0gdGhpcy5fY3JlYXRlTG9jYWxNZXNzYWdlKG1lc3NhZ2UpO1xcblxcbiAgICAgIHZhciBldmVudCA9IHRoaXMuX2NyZWF0ZUV2ZW50KG1lc3NhZ2UsIHZhbHVlKTtcXG5cXG4gICAgICB0aGlzLl9kaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlIGEgZnVuY3Rpb24gd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZm9yIHRoZSBnbG9iYWwgTWVzc2VuZ2VyIGluc3RhbmNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAc3RhdGljXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gbGlzdGVuIGZvci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIG9uY2UgdGhlIG1lc3NhZ2UgaXMgcmVjZWl2ZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfV0sIFt7XFxuICAgIGtleTogXCJsaXN0ZW5Ub1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuVG8obWVzc2FnZSwgY2FsbGJhY2ssIG1lc3Nlbmdlcikge1xcbiAgICAgIHRoaXMuR2xvYmFsTWVzc2VuZ2VyLmxpc3RlblRvKG1lc3NhZ2UsIGNhbGxiYWNrLCBtZXNzZW5nZXIpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQcmV2ZW50IGEgZnVuY3Rpb24gZnJvbSBiZWluZyBleGVjdXRlZCB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBmb3IgdGhlXFxyXFxuICAgICAqIGdsb2JhbCBNZXNzZW5nZXIgaW5zdGFuY2UuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBzdGF0aWNcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBzdG9wIGxpc3RlbmluZyBmb3IuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFjayAtIE9wdGlvbmFsIGNhbGxiYWNrIHRvIHJlbW92ZS4gSWYgbm9uZSBpcyBkZWZpbmVkLFxcclxcbiAgICAgKiByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgdGhlIG1lc3NhZ2UuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZyhtZXNzYWdlLCBjYWxsYmFjaykge1xcbiAgICAgIHRoaXMuR2xvYmFsTWVzc2VuZ2VyLnN0b3BMaXN0ZW5pbmcobWVzc2FnZSwgY2FsbGJhY2spO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBEZS1yZWdpc3RlciBjYWxsYmFjayhzKSBmcm9tIGJlaW5nIGV4ZWN1dGVkIG9uIHRoZSBnbG9iYWwgbWVzc2VuZ2VyciBpbnN0YW5jZVxcclxcbiAgICAgKiB3aGVuIG1lc3NhZ2VzIG1hdGNoaW5nIHRoZSBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24gYXJlIHJlY2VpdmVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge1JlZ2V4cH0gcmVnZXhwIC0gcmVnZXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBmaWx0ZXIgbWVzc2FnZXMgd2l0aC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gcmVtb3ZlLiBJZiBub25lIGlzIGRlZmluZWQsXFxyXFxuICAgICAqIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciBtZXNzYWdlcyBtYXRjaGluZyB0aGUgcmVndWxhciBleHByZXNzaW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdCeVJlZ2V4cFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ0J5UmVnZXhwKHJlZ2V4cCwgY2FsbGJhY2spIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICB2YXIgbWVzc2FnZXMgPSBPYmplY3Qua2V5cyh0aGlzLkdsb2JhbE1lc3Nlbmdlci5fY2FsbGJhY2tzKS5maWx0ZXIoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcXG4gICAgICAgIHJldHVybiByZWdleHAudGVzdChtZXNzYWdlKTtcXG4gICAgICB9KTtcXG4gICAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XFxuICAgICAgICBfdGhpczIuc3RvcExpc3RlbmluZyhtZXNzYWdlLCBjYWxsYmFjayk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFByZXZlbnQgYW55IGZ1bmN0aW9ucyBmcm9tIGJlaW5nIGV4ZWN1dGVkIHdoZW4gYW55IG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZm9yXFxyXFxuICAgICAqIHRoZSBnbG9iYWwgTWVzc2VuZ2VyIGluc3RhbmNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAc3RhdGljXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1RvQWxsXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nVG9BbGwoKSB7XFxuICAgICAgdGhpcy5HbG9iYWxNZXNzZW5nZXIuc3RvcExpc3RlbmluZ1RvQWxsKCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFNlbmQgYSBtZXNzYWdlLCBjYXVzaW5nIGxpc3RlbmVyIGZ1bmN0aW9ucyBmb3IgdGhlIG1lc3NhZ2Ugb24gdGhlIGdsb2JhbCBNZXNzZW5nZXJcXHJcXG4gICAgICogaW5zdGFuY2UgdG8gYmUgZXhlY3V0ZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBzdGF0aWNcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBlbWl0LlxcclxcbiAgICAgKiBAcGFyYW0ge2FueT19IHZhbHVlIC0gT3B0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBsaXN0ZW5lciBjYWxsYmFja3MuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZW1pdFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChtZXNzYWdlLCB2YWx1ZSkge1xcbiAgICAgIHRoaXMuR2xvYmFsTWVzc2VuZ2VyLmVtaXQobWVzc2FnZSwgdmFsdWUpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gTWVzc2VuZ2VyO1xcbn0oKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhNZXNzZW5nZXIsIHtcXG4gIEdsb2JhbE1lc3Nlbmdlcjoge1xcbiAgICB2YWx1ZTogbmV3IE1lc3NlbmdlcigpLFxcbiAgICB3cml0YWJsZTogZmFsc2VcXG4gIH0sXFxuICBFVkVOVFM6IHtcXG4gICAgdmFsdWU6IHt9LFxcbiAgICB3cml0YWJsZTogZmFsc2VcXG4gIH1cXG59KTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGNvcmVfTWVzc2VuZ2VyID0gKE1lc3Nlbmdlcik7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvQWJzdHJhY3RIb3N0RmVhdHVyZS5qc1xcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgQWJzdHJhY3RIb3N0RmVhdHVyZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0SG9zdEZlYXR1cmVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBBYnN0cmFjdEhvc3RGZWF0dXJlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBBYnN0cmFjdEhvc3RGZWF0dXJlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0SG9zdEZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxcblxcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0SG9zdEZlYXR1cmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0SG9zdEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RIb3N0RmVhdHVyZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIEFic3RyYWN0SG9zdEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEFic3RyYWN0SG9zdEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKipcXHJcXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgaG9zdCBmZWF0dXJlcy4gS2VlcHMgYSByZWZlcmVuY2UgdG8gdGhlIGhvc3Qgb2JqZWN0IG1hbmFnaW5nXFxyXFxuICogdGhlIGZlYXR1cmUuXFxyXFxuICpcXHJcXG4gKiBAYWJzdHJhY3RcXHJcXG4gKlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBFVkVOVFMgLSBCdWlsdC1pbiBtZXNzYWdlcyB0aGF0IHRoZSBmZWF0dXJlIGVtaXRzLiBXaGVuIHRoZVxcclxcbiAqIGZlYXR1cmUgaXMgYWRkZWQgdG8gYSB7QGxpbmsgY29yZS9Ib3N0T2JqZWN0fSwgZXZlbnQgbmFtZXMgd2lsbCBiZSBwcmVmaXhlZCBieSB0aGVcXHJcXG4gKiBuYW1lIG9mIHRoZSBmZWF0dXJlIGNsYXNzICsgXFwnLlxcJy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy51cGRhdGU9b25VcGRhdGVdIC0gTWVzc2FnZSB0aGF0IGlzIGVtaXR0ZWQgYWZ0ZXJcXHJcXG4gKiBlYWNoIGNhbGwgdG8gW3VwZGF0ZV17QGxpbmsgQWJzdHJhY3RIb3N0RmVhdHVyZSN1cGRhdGV9LlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBTRVJWSUNFUyAtIEFueSBBV1Mgc2VydmljZXMgdGhhdCBhcmUgbmVjZXNzYXJ5IGZvciB0aGVcXHJcXG4gKiBmZWF0dXJlIHRvIGZ1bmN0aW9uLlxcclxcbiAqL1xcblxcbnZhciBBYnN0cmFjdEhvc3RGZWF0dXJlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIC8qKlxcclxcbiAgICogQGNvbnN0cnVjdG9yXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtjb3JlL0hvc3RPYmplY3R9IGhvc3QgLSBUaGUgSG9zdE9iamVjdCBtYW5hZ2luZyB0aGUgZmVhdHVyZS5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gQWJzdHJhY3RIb3N0RmVhdHVyZShob3N0KSB7XFxuICAgIEFic3RyYWN0SG9zdEZlYXR1cmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJzdHJhY3RIb3N0RmVhdHVyZSk7XFxuXFxuICAgIHRoaXMuX2hvc3QgPSBob3N0O1xcbiAgfVxcbiAgLyoqXFxyXFxuICAgKiBBZGRzIGEgbmFtZXNwYWNlIHRvIHRoZSBob3N0IHdpdGggdGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUgdG8gY29udGFpbiBwcm9wZXJ0aWVzXFxyXFxuICAgKiBhbmQgbWV0aG9kcyBmcm9tIHRoZSBmZWF0dXJlIHRoYXQgdXNlcnMgb2YgdGhlIGhvc3QgbmVlZCBhY2Nlc3MgdG8uXFxyXFxuICAgKi9cXG5cXG5cXG4gIEFic3RyYWN0SG9zdEZlYXR1cmVfY3JlYXRlQ2xhc3MoQWJzdHJhY3RIb3N0RmVhdHVyZSwgW3tcXG4gICAga2V5OiBcImluc3RhbGxBcGlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxBcGkoKSB7XFxuICAgICAgdmFyIF90aGlzID0gdGhpcztcXG5cXG4gICAgICB2YXIgZXZlbnRzID0ge307XFxuICAgICAgdmFyIGFwaSA9IHtcXG4gICAgICAgIEVWRU5UUzogZXZlbnRzXFxuICAgICAgfTsgLy8gQWRkIHRoZSBjbGFzcyBuYW1lIHRvIGV2ZW50IG5hbWVzXFxuXFxuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5jb25zdHJ1Y3Rvci5FVkVOVFMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcXG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxcbiAgICAgICAgICAgIG5hbWUgPSBfcmVmMlswXSxcXG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWYyWzFdO1xcblxcbiAgICAgICAgZXZlbnRzW25hbWVdID0gXCJcIi5jb25jYXQoX3RoaXMuY29uc3RydWN0b3IubmFtZSwgXCIuXCIpLmNvbmNhdCh2YWx1ZSk7XFxuICAgICAgfSk7XFxuICAgICAgdGhpcy5faG9zdFt0aGlzLmNvbnN0cnVjdG9yLm5hbWVdID0gYXBpO1xcbiAgICAgIHJldHVybiBhcGk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIGhvc3QgdGhhdCBtYW5hZ2VzIHRoZSBmZWF0dXJlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJob3N0XCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9ob3N0O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSBlbmdpbmUgb3duZXIgb2JqZWN0IG9mIHRoZSBob3N0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJvd25lclwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5faG9zdC5vd25lcjtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogTGlzdGVuIHRvIGEgZmVhdHVyZSBtZXNzYWdlIGZyb20gdGhlIGhvc3Qgb2JqZWN0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIE1lc3NhZ2UgdG8gbGlzdGVuIGZvci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdG8gZXhlY3V0ZSB3aGVuIHRoZSBtZXNzYWdlIGlzIHJlY2VpdmVkLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImxpc3RlblRvXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5UbyhtZXNzYWdlLCBjYWxsYmFjaykge1xcbiAgICAgIHRoaXMuX2hvc3QubGlzdGVuVG8obWVzc2FnZSwgY2FsbGJhY2spO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBMaXN0ZW4gdG8gYSBmZWF0dXJlIG1lc3NhZ2UgZnJvbSB0aGUgZ2xvYmFsIG1lc3Nlbmdlci4gRmVhdHVyZSBtZXNzYWdlcyB3aWxsXFxyXFxuICAgICAqIGJlIHByZWZpeGVkIHdpdGggdGhlIGNsYXNzIG5hbWUgb2YgdGhlIGZlYXR1cmUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gTWVzc2FnZSB0byBsaXN0ZW4gZm9yLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0byBleGVjdXRlIHdoZW4gdGhlIG1lc3NhZ2UgaXMgcmVjZWl2ZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcExpc3RlbmluZ1wiLFxcbiAgICB2YWx1ZTpcXG4gICAgLyoqXFxyXFxuICAgICAqIFN0b3AgbGlzdGVuaW5nIHRvIGEgbWVzc2FnZSBmcm9tIHRoZSBob3N0IG9iamVjdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZXNzYWdlIHRvIHN0b3AgbGlzdGVuaW5nIGZvci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gcmVtb3ZlLiBJZiBub25lIGlzIGRlZmluZWQsXFxyXFxuICAgICAqIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciB0aGUgbWVzc2FnZS5cXHJcXG4gICAgICovXFxuICAgIGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmcobWVzc2FnZSwgY2FsbGJhY2spIHtcXG4gICAgICB0aGlzLl9ob3N0LnN0b3BMaXN0ZW5pbmcobWVzc2FnZSwgY2FsbGJhY2spO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdG9wIGxpc3RlbmluZyB0byBhIG1lc3NhZ2UgZnJvbSB0aGUgZ2xvYmFsIG1lc3Nlbmdlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBNZXNzYWdlIHRvIHN0b3AgbGlzdGVuaW5nIGZvci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIC0gT3B0aW9uYWwgY2FsbGJhY2sgdG8gcmVtb3ZlLiBJZiBub25lIGlzIGRlZmluZWQsXFxyXFxuICAgICAqIHJlbW92ZSBhbGwgY2FsbGJhY2tzIGZvciB0aGUgbWVzc2FnZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nQnlSZWdleHBcIixcXG4gICAgdmFsdWU6XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdG9wIGxpc3RlbmluZyB0byBhIG1lc3NhZ2UgbWF0Y2hpbmcgdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBmcm9tIHRoZVxcclxcbiAgICAgKiBob3N0IG9iamVjdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtSZWdleHB9IHJlZ2V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gc3RvcCBsaXN0ZW5pbmcgZm9yLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB0byByZW1vdmUuIElmIG5vbmUgaXMgZGVmaW5lZCxcXHJcXG4gICAgICogcmVtb3ZlIGFsbCBjYWxsYmFja3MgZm9yIHRoZSBtZXNzYWdlLlxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gc3RvcExpc3RlbmluZ0J5UmVnZXhwKHJlZ2V4cCwgY2FsbGJhY2spIHtcXG4gICAgICB0aGlzLl9ob3N0LnN0b3BMaXN0ZW5pbmdCeVJlZ2V4cChyZWdleHAsIGNhbGxiYWNrKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCBsaXN0ZW5pbmcgdG8gYSBtZXNzYWdlIG1hdGNoaW5nIHRoZSBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSB0aGVcXHJcXG4gICAgICogZ2xvYmFsIG1lc3Nlbmdlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtSZWdleHB9IHJlZ2V4cCAtIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gc3RvcCBsaXN0ZW5pbmcgZm9yLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB0byByZW1vdmUuIElmIG5vbmUgaXMgZGVmaW5lZCxcXHJcXG4gICAgICogcmVtb3ZlIGFsbCBjYWxsYmFja3MgZm9yIHRoZSBtZXNzYWdlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdUb0FsbFwiLFxcbiAgICB2YWx1ZTpcXG4gICAgLyoqXFxyXFxuICAgICAqIFN0b3AgbGlzdGVuaW5nIHRvIGFsbCBtZXNzYWdlcy5cXHJcXG4gICAgICovXFxuICAgIGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdUb0FsbCgpIHtcXG4gICAgICB0aGlzLl9ob3N0LnN0b3BMaXN0ZW5pbmdUb0FsbCgpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdG9wIGxpc3RlbmluZyB0byBhbGwgZmVhdHVyZSBtZXNzYWdlcy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJlbWl0XCIsXFxuICAgIHZhbHVlOlxcbiAgICAvKipcXHJcXG4gICAgICogRW1pdCBmZWF0dXJlIG1lc3NhZ2VzIGZyb20gdGhlIGhvc3QuIEZlYXR1cmUgbWVzc2FnZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoXFxyXFxuICAgICAqIHRoZSBjbGFzcyBuYW1lIG9mIHRoZSBmZWF0dXJlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGVtaXQuXFxyXFxuICAgICAqIEBwYXJhbSB7YW55PX0gdmFsdWUgLSBPcHRpb25hbCBwYXJhbWV0ZXIgdG8gcGFzcyB0byBsaXN0ZW5lciBjYWxsYmFja3MuXFxyXFxuICAgICAqL1xcbiAgICBmdW5jdGlvbiBlbWl0KG1lc3NhZ2UsIHZhbHVlKSB7XFxuICAgICAgbWVzc2FnZSA9IFwiXCIuY29uY2F0KHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCIuXCIpLmNvbmNhdChtZXNzYWdlKTtcXG5cXG4gICAgICB0aGlzLl9ob3N0LmVtaXQobWVzc2FnZSwgdmFsdWUpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFbWl0IGZlYXR1cmUgbWVzc2FnZXMgZnJvbSB0aGUgZ2xvYmFsIG1lc3Nlbmdlci4gRmVhdHVyZSBtZXNzYWdlcyB3aWxsIGJlIHByZWZpeGVkXFxyXFxuICAgICAqIHdpdGggdGhlIGNsYXNzIG5hbWUgb2YgdGhlIGZlYXR1cmUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gZW1pdC5cXHJcXG4gICAgICogQHBhcmFtIHthbnk9fSB2YWx1ZSAtIE9wdGlvbmFsIHBhcmFtZXRlciB0byBwYXNzIHRvIGxpc3RlbmVyIGNhbGxiYWNrcy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlcyBlYWNoIHRpbWUgdGhlIGhvc3QgaXMgdXBkYXRlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSAtIEFtb3VudCBvZiB0aW1lIHNpbmNlIHRoZSBsYXN0IGhvc3QgdXBkYXRlIHdhc1xcclxcbiAgICAgKiBjYWxsZWQuXFxyXFxuICAgICAqL1xcbiAgICBmdW5jdGlvbiB1cGRhdGUoZGVsdGFUaW1lKSB7XFxuICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLnVwZGF0ZSwgZGVsdGFUaW1lKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ2xlYW4gdXAgb25jZSB0aGUgZmVhdHVyZSBpcyBubyBsb25nZXIgaW4gdXNlLiBSZW1vdmUgdGhlIGZlYXR1cmUgbmFtZXNwYWNlXFxyXFxuICAgICAqIGZyb20gdGhlIGhvc3QgYW5kIHJlbW92ZSByZWZlcmVuY2UgdG8gdGhlIGhvc3QuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzY2FyZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZCgpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLl9ob3N0W3RoaXMuY29uc3RydWN0b3IubmFtZV0pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcXG4gICAgICAgIGRlbGV0ZSBfdGhpczIuX2hvc3RbX3RoaXMyLmNvbnN0cnVjdG9yLm5hbWVdW25hbWVdO1xcbiAgICAgIH0pO1xcbiAgICAgIGRlbGV0ZSB0aGlzLl9ob3N0W3RoaXMuY29uc3RydWN0b3IubmFtZV07XFxuICAgICAgZGVsZXRlIHRoaXMuX2hvc3Q7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGxpZXMgYSBzZXF1ZW5jZSBvZiBtaXhpbiBjbGFzcyBmYWN0b3J5IGZ1bmN0aW9ucyB0byB0aGlzIGNsYXNzIGFuZFxcclxcbiAgICAgKiByZXR1cm5zIHRoZSByZXN1bHQuIEVhY2ggZnVuY3Rpb24gaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgY2xhc3MgdGhhdFxcclxcbiAgICAgKiBleHRlbmRzIHRoZSBjbGFzcyBpdCB3YXMgZ2l2ZW4uIFRoZSBmdW5jdGlvbnMgYXJlIGFwcGxpZWQgaW4gdGhlIG9yZGVyXFxyXFxuICAgICAqIHRoYXQgcGFyYW1ldGVycyBhcmUgZ2l2ZW4sIG1lYW5pbmcgdGhhdCB0aGUgZmlyc3QgZmFjdG9yeSB3aWxsXFxyXFxuICAgICAqIGV4dGVuZCB0aGlzIGJhc2UgY2xhc3MuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1peGluQ2xhc3NGYWN0b3JpZXMgQ2xhc3MgZmFjdG9yeSBmdW5jdGlvbnMgdGhhdCB3aWxsXFxyXFxuICAgICAqIGJlIGFwcGxpZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtDbGFzc30gQSBjbGFzcyB0aGF0IGlzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIGZhY3RvcnkgZnVuY3Rpb25zLlxcclxcbiAgICAgKiBUaGUgcmVzdWx0aW5nIGNsYXNzIHdpbGwgYWx3YXlzIGluaGVyaXQgZnJvbSBBYnN0cmFjdEhvc3RGZWF0dXJlLlxcclxcbiAgICAgKi9cXG5cXG4gIH1dLCBbe1xcbiAgICBrZXk6IFwibGlzdGVuVG9cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlblRvKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XFxuICAgICAgbWVzc2FnZSA9IFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIuXCIpLmNvbmNhdChtZXNzYWdlKTtcXG4gICAgICBjb3JlX01lc3Nlbmdlci5saXN0ZW5UbyhtZXNzYWdlLCBjYWxsYmFjayk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BMaXN0ZW5pbmdcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmcobWVzc2FnZSwgY2FsbGJhY2spIHtcXG4gICAgICBtZXNzYWdlID0gXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIi5cIikuY29uY2F0KG1lc3NhZ2UpO1xcbiAgICAgIGNvcmVfTWVzc2VuZ2VyLnN0b3BMaXN0ZW5pbmcobWVzc2FnZSwgY2FsbGJhY2spO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nQnlSZWdleHBcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdCeVJlZ2V4cChyZWdleHAsIGNhbGxiYWNrKSB7XFxuICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChcIl5cIi5jb25jYXQodGhpcy5uYW1lLCBcIi5cIikuY29uY2F0KHJlZ2V4cC5zb3VyY2UucmVwbGFjZSgvXFxcXF4vLCBcXCdcXCcpKSk7XFxuICAgICAgY29yZV9NZXNzZW5nZXIuc3RvcExpc3RlbmluZ0J5UmVnZXhwKHJlZ2V4cCwgY2FsbGJhY2spO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJzdG9wTGlzdGVuaW5nVG9BbGxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdUb0FsbCgpIHtcXG4gICAgICBjb3JlX01lc3Nlbmdlci5zdG9wTGlzdGVuaW5nQnlSZWdleHAobmV3IFJlZ0V4cChcIl5cIi5jb25jYXQodGhpcy5uYW1lLCBcIi5cIikpKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiZW1pdFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW1pdChtZXNzYWdlLCB2YWx1ZSkge1xcbiAgICAgIG1lc3NhZ2UgPSBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLlwiKS5jb25jYXQobWVzc2FnZSk7XFxuICAgICAgY29yZV9NZXNzZW5nZXIuZW1pdChtZXNzYWdlLCB2YWx1ZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcIm1peFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWl4KCkge1xcbiAgICAgIHZhciBSZXN1bHRDbGFzcyA9IHRoaXM7XFxuXFxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1peGluQ2xhc3NGYWN0b3JpZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XFxuICAgICAgICBtaXhpbkNsYXNzRmFjdG9yaWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xcbiAgICAgIH1cXG5cXG4gICAgICBtaXhpbkNsYXNzRmFjdG9yaWVzLmZvckVhY2goZnVuY3Rpb24gKG1peGluQ2xhc3NGYWN0b3J5KSB7XFxuICAgICAgICBSZXN1bHRDbGFzcyA9IG1peGluQ2xhc3NGYWN0b3J5KFJlc3VsdENsYXNzKTtcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gUmVzdWx0Q2xhc3M7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBYnN0cmFjdEhvc3RGZWF0dXJlO1xcbn0oKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBYnN0cmFjdEhvc3RGZWF0dXJlLCB7XFxuICBFVkVOVFM6IHtcXG4gICAgdmFsdWU6IHtcXG4gICAgICB1cGRhdGU6IFxcJ29uVXBkYXRlXFwnXFxuICAgIH0sXFxuICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgfSxcXG4gIFNFUlZJQ0VTOiB7XFxuICAgIHZhbHVlOiB7fSxcXG4gICAgd3JpdGFibGU6IGZhbHNlXFxuICB9XFxufSk7XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBjb3JlX0Fic3RyYWN0SG9zdEZlYXR1cmUgPSAoQWJzdHJhY3RIb3N0RmVhdHVyZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvSG9zdE9iamVjdC5qc1xcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cXG5cXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxcblxcbmZ1bmN0aW9uIEhvc3RPYmplY3RfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgaWYgKEhvc3RPYmplY3RfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHsgSG9zdE9iamVjdF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDsgfSBlbHNlIHsgSG9zdE9iamVjdF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBIb3N0T2JqZWN0X3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpOyByZXR1cm4gaW5zdGFuY2U7IH07IH0gcmV0dXJuIEhvc3RPYmplY3RfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBIb3N0T2JqZWN0X3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gSG9zdE9iamVjdF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBIb3N0T2JqZWN0X3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gSG9zdE9iamVjdF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gSG9zdE9iamVjdF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBIb3N0T2JqZWN0X2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgSG9zdE9iamVjdF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgSG9zdE9iamVjdF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIEhvc3RPYmplY3RfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgSG9zdE9iamVjdF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBIb3N0T2JqZWN0X3NldFByb3RvdHlwZU9mKG8sIHApIHsgSG9zdE9iamVjdF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gSG9zdE9iamVjdF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIEhvc3RPYmplY3RfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IEhvc3RPYmplY3RfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gSG9zdE9iamVjdF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gSG9zdE9iamVjdF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gSG9zdE9iamVjdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBIb3N0T2JqZWN0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoSG9zdE9iamVjdF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gSG9zdE9iamVjdF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBIb3N0T2JqZWN0X2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIEhvc3RPYmplY3RfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5mdW5jdGlvbiBIb3N0T2JqZWN0X2dldFByb3RvdHlwZU9mKG8pIHsgSG9zdE9iamVjdF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBIb3N0T2JqZWN0X2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuXFxuXFxuLyoqXFxyXFxuICogT2JqZWN0IHRoYXQgbWFuYWdlcyBhY2Nlc3MgdG8gYWxsIEhvc3QgZmVhdHVyZXMuIENvbnRhaW5zIGEgcmVmZXJlbmNlIHRvXFxyXFxuICogZW5naW5lLXNwZWNpZmljIHZpc3VhbHMgaWYgYXBwbGljYWJsZS5cXHJcXG4gKlxcclxcbiAqIEBleHRlbmRzIGNvcmUvTWVzc2VuZ2VyXFxyXFxuICogQGFsaWFzIGNvcmUvSG9zdE9iamVjdFxcclxcbiAqXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IEVWRU5UUyAtIEJ1aWx0LWluIG1lc3NhZ2VzIHRoYXQgdGhlIE1lc3NlbmdlciBlbWl0cy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy51cGRhdGU9XFwnb25VcGRhdGVcXCddIC0gTWVzc2FnZSB0aGF0IGlzIGVtaXR0ZWQgYWZ0ZXJcXHJcXG4gKiBlYWNoIGNhbGwgdG8gW3VwZGF0ZV17QGxpbmsgY29yZS9Ib3N0T2JqZWN0I3VwZGF0ZX0uXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuYWRkRmVhdHVyZT1cXCdvbkFkZEZlYXR1cmVcXCddIC0gTWVzc2FnZSB0aGF0IGlzIGVtaXR0ZWRcXHJcXG4gKiBhZnRlciBlYWNoIGNhbGwgdG8gW2FkZEZlYXR1cmVde0BsaW5rIGNvcmUvSG9zdE9iamVjdCNhZGRGZWF0dXJlfS5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy5yZW1vdmVGZWF0dXJlPVxcJ29uUmVtb3ZlRmVhdHVyZVxcJ10gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZFxcclxcbiAqIGFmdGVyIGVhY2ggY2FsbCB0byBbcmVtb3ZlRmVhdHVyZV17QGxpbmsgY29yZS9Ib3N0T2JqZWN0I3JlbW92ZUZlYXR1cmV9LlxcclxcbiAqL1xcblxcbnZhciBIb3N0T2JqZWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfTWVzc2VuZ2VyKSB7XFxuICBIb3N0T2JqZWN0X2luaGVyaXRzKEhvc3RPYmplY3QsIF9NZXNzZW5nZXIpO1xcblxcbiAgdmFyIF9zdXBlciA9IEhvc3RPYmplY3RfY3JlYXRlU3VwZXIoSG9zdE9iamVjdCk7XFxuXFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBob3N0LlxcclxcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zLm93bmVyIC0gT3B0aW9uYWwgZW5naW5lLXNwZWNpZmljIG93bmVyIG9mIHRoZSBob3N0LlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBIb3N0T2JqZWN0KCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcXG4gICAgICAgIF9yZWYkb3duZXIgPSBfcmVmLm93bmVyLFxcbiAgICAgICAgb3duZXIgPSBfcmVmJG93bmVyID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkb3duZXI7XFxuXFxuICAgIEhvc3RPYmplY3RfY2xhc3NDYWxsQ2hlY2sodGhpcywgSG9zdE9iamVjdCk7XFxuXFxuICAgIC8vIElmIGFuIG93bmVyIGlzIHNwZWNpZmllZCwgdXNlIGl0cyBpZCBmb3IgbWVzc2FnaW5nXFxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3duZXIuaWQpO1xcbiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjtcXG4gICAgX3RoaXMuX2ZlYXR1cmVzID0ge307XFxuICAgIF90aGlzLl93YWl0cyA9IFtdO1xcbiAgICBfdGhpcy5fbGFzdFVwZGF0ZSA9IF90aGlzLm5vdztcXG4gICAgcmV0dXJuIF90aGlzO1xcbiAgfVxcbiAgLyoqXFxyXFxuICAgKiBHZXRzIHRoZSBlbmdpbmUgb3duZXIgb2JqZWN0IG9mIHRoZSBob3N0LlxcclxcbiAgICpcXHJcXG4gICAqIEByZWFkb25seVxcclxcbiAgICogQHR5cGUge09iamVjdH1cXHJcXG4gICAqL1xcblxcblxcbiAgSG9zdE9iamVjdF9jcmVhdGVDbGFzcyhIb3N0T2JqZWN0LCBbe1xcbiAgICBrZXk6IFwib3duZXJcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX293bmVyO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJub3dcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIERhdGUubm93KCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIGFtb3VudCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB1cGRhdGUgd2FzIGxhc3QgY2FsbGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJkZWx0YVRpbWVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMubm93IC0gdGhpcy5fbGFzdFVwZGF0ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGluIHRoZSBlbmdpbmVcXCdzIHJlbmRlciBsb29wLiBFeGVjdXRlcyB1cGRhdGVcXHJcXG4gICAgICogbG9vcHMgZm9yIGFsbCBmZWF0dXJlcy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLm5vdztcXG4gICAgICB2YXIgZHQgPSB0aGlzLmRlbHRhVGltZTsgLy8gUHJvZ3Jlc3Mgc3RvcmVkIHdhaXRzXFxuXFxuICAgICAgdGhpcy5fd2FpdHMuZm9yRWFjaChmdW5jdGlvbiAod2FpdCkge1xcbiAgICAgICAgd2FpdC5leGVjdXRlKGR0KTtcXG4gICAgICB9KTsgLy8gVXBkYXRlIGFsbCBmZWF0dXJlc1xcblxcblxcbiAgICAgIE9iamVjdC52YWx1ZXModGhpcy5fZmVhdHVyZXMpLmZvckVhY2goZnVuY3Rpb24gKGZlYXR1cmUpIHtcXG4gICAgICAgIGZlYXR1cmUudXBkYXRlKGR0KTtcXG4gICAgICB9KTsgLy8gTm90aWZ5IGxpc3RlbmVycyBhbiB1cGRhdGUgb2NjdXJlZFxcblxcbiAgICAgIHRoaXMuZW1pdCh0aGlzLmNvbnN0cnVjdG9yLkVWRU5UUy51cGRhdGUsIGR0KTtcXG4gICAgICB0aGlzLl9sYXN0VXBkYXRlID0gY3VycmVudFRpbWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIGRlZmVycmVkIHByb21pc2UgdGhhdCB3aWxsIHdhaXQgYSBnaXZlbiBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmVcXHJcXG4gICAgICogcmVzb2x2aW5nLiBUaGUgaG9zdCB3aWxsIGNvbnRpbnVvdXNseSB1cGRhdGUgdGhlIHdhaXQgcHJvbWlzZSBkdXJpbmcgdGhlXFxyXFxuICAgICAqIHVwZGF0ZSBsb29wIHVudGlsIGl0IHJlc29sdmVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NlY29uZHM9MF0gLSBOdW1iZXIgb2Ygc2Vjb25kcyB0byB3YWl0IGJlZm9yZSByZXNvbHZpbmcuXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyAtIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0XFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLm9uRmluaXNoXSAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgb25jZSB0aGUgd2FpdCB0aW1lXFxyXFxuICAgICAqIGlzIG1ldC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMub25Qcm9ncmVzcyAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSB3YWl0XFxyXFxuICAgICAqIHRpbWUgcHJvZ3Jlc3NlcyB0b3dhcmRzIHRoZSB0YXJnZXQgbnVtYmVyIG9mIHNlY29uZHMuIFRoZSBhbW91bnQgb2YgcHJvZ3Jlc3NcXHJcXG4gICAgICogYXMgYSAwLTEgcGVyY2VudGFnZSBpcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvcHRpb25zLm9uQ2FuY2VsIC0gQ2FsbGJhY2sgdG8gZXhlY3V0ZSBpZiB0aGUgdXNlciBjYW5jZWxzXFxyXFxuICAgICAqIHRoZSB3YWl0IGJlZm9yZSBjb21wbGV0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0aW9ucy5vbkVycm9yIC0gQ2FsbGJhY2sgdG8gZXhlY3V0ZSBpZiB0aGUgd2FpdCBzdG9wc1xcclxcbiAgICAgKiBiZWNhdXNlIGFuIGVycm9yIGlzIGVuY291bnRlcmVkLiBUaGUgZXJyb3IgbWVzc2FnZSBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ3YWl0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB3YWl0KHNlY29uZHMpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxcbiAgICAgICAgICBvbkZpbmlzaCA9IF9yZWYyLm9uRmluaXNoLFxcbiAgICAgICAgICBvblByb2dyZXNzID0gX3JlZjIub25Qcm9ncmVzcyxcXG4gICAgICAgICAgb25DYW5jZWwgPSBfcmVmMi5vbkNhbmNlbCxcXG4gICAgICAgICAgb25FcnJvciA9IF9yZWYyLm9uRXJyb3I7XFxuXFxuICAgICAgdmFyIHdhaXQgPSBjb3JlX1V0aWxzLndhaXQoc2Vjb25kcywge1xcbiAgICAgICAgb25GaW5pc2g6IG9uRmluaXNoLFxcbiAgICAgICAgb25Qcm9ncmVzczogb25Qcm9ncmVzcyxcXG4gICAgICAgIG9uQ2FuY2VsOiBvbkNhbmNlbCxcXG4gICAgICAgIG9uRXJyb3I6IG9uRXJyb3JcXG4gICAgICB9KTtcXG5cXG4gICAgICB0aGlzLl93YWl0cy5wdXNoKHdhaXQpOyAvLyBPbmNlIHRoZSB3YWl0IHByb21pc2UgaXMgbm8gbG9uZ2VyIHBlbmRpbmcgcmVtb3ZlIGl0IGZyb20gdGhlIHdhaXRzIGFycmF5XFxuXFxuXFxuICAgICAgdmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xcbiAgICAgICAgX3RoaXMyLl93YWl0cy5zcGxpY2UoX3RoaXMyLl93YWl0cy5pbmRleE9mKHdhaXQpLCAxKTtcXG4gICAgICB9O1xcblxcbiAgICAgIHdhaXQudGhlbihvbkNvbXBsZXRlLCBvbkNvbXBsZXRlKTtcXG4gICAgICByZXR1cm4gd2FpdDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogSW5zdGFudGlhdGUgYSBuZXcgSG9zdCBmZWF0dXJlIGFuZCBzdG9yZSBpdC4gRmVhdHVyZXMgbXVzdCBpbmhlcml0IGZyb21cXHJcXG4gICAgICogQWJzdHJhY3RIb3N0RmVhdHVyZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtDbGFzc30gRmVhdHVyZUNsYXNzIC0gQ2xhc3MgdGhhdCB3aWxsIGluc3RhbnRpYXRlIHRoZSBmZWF0dXJlLiBNdXN0XFxyXFxuICAgICAqIGV4dGVuZCB7QGxpbmsgQWJzdHJhY3RIb3N0RmVhdHVyZX0uXFxyXFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlPWZhbHNlXSAtIFdoZXRoZXIgb3Igbm90IHRvIG92ZXJ3cml0ZSBhbiBleGlzdGluZ1xcclxcbiAgICAgKiBmZWF0dXJlIGlmIG9uZSBvZiB0aGlzIHR5cGUgYWxyZWFkeSBleGlzdHMgb24gdGhlIG9iamVjdC5cXHJcXG4gICAgICogQHBhcmFtICB7Li4uYW55fSBhcmdzIC0gQWRkaXRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgRmVhdHVyZUNsYXNzXFxyXFxuICAgICAqIGNvbnN0cnVjdG9yLiBUaGUgSG9zdE9iamVjdCB3aWxsIGFsd2F5cyBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBXaGV0aGVyIG9yIG5vdCBhIGZlYXR1cmUgd2FzIHN1Y2Nlc3NmdWxseSBhZGRlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJhZGRGZWF0dXJlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGZWF0dXJlKEZlYXR1cmVDbGFzcykge1xcbiAgICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XFxuXFxuICAgICAgdmFyIGlucHV0VHlwZSA9IEhvc3RPYmplY3RfdHlwZW9mKEZlYXR1cmVDbGFzcyk7IC8vIE1ha2Ugc3VyZSB0aGUgRmVhdHVyZUNsYXNzIGNhbiBiZSBleGVjdXRlZFxcblxcblxcbiAgICAgIGlmIChpbnB1dFR5cGUgIT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIGZlYXR1cmUgdG8gaG9zdCBcIi5jb25jYXQodGhpcy5pZCwgXCIuIEZlYXR1cmVDbGFzcyBtdXN0IGJlIGEgY2xhc3MuXCIpKTtcXG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgZmVhdHVyZSBpcyBhIGhvc3QgZmVhdHVyZVxcbiAgICAgIGVsc2UgaWYgKCEoRmVhdHVyZUNsYXNzLnByb3RvdHlwZSBpbnN0YW5jZW9mIGNvcmVfQWJzdHJhY3RIb3N0RmVhdHVyZSkpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhZGQgZmVhdHVyZSBcIi5jb25jYXQoRmVhdHVyZUNsYXNzLm5hbWUsIFwiIHRvIGhvc3QgXCIpLmNvbmNhdCh0aGlzLmlkLCBcIi4gRmVhdHVyZUNsYXNzIG11c3QgZXh0ZW5kIEFic3RyYWN0SG9zdEZlYXR1cmUuXCIpKTtcXG4gICAgICB9IC8vIENoZWNrIGlmIHRoZSBGZWF0dXJlQ2xhc3MgYWxyZWFkeSBleGlzdHMgb24gdGhpcyBvYmplY3RcXG5cXG5cXG4gICAgICBpZiAodGhpcy5fZmVhdHVyZXNbRmVhdHVyZUNsYXNzLm5hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIGlmIChmb3JjZSkge1xcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJGZWF0dXJlIFwiLmNvbmNhdChGZWF0dXJlQ2xhc3MubmFtZSwgXCIgYWxyZWFkeSBleGlzdHMgb24gaG9zdCBcIikuY29uY2F0KHRoaXMuaWQsIFwiLiBFeGlzdGluZyBmZWF0dXJlIHdpbGwgYmUgb3ZlcndyaXR0ZW4uXCIpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZlYXR1cmUgXCIuY29uY2F0KEZlYXR1cmVDbGFzcy5uYW1lLCBcIiBhbHJlYWR5IGV4aXN0cyBvbiBob3N0IFwiKS5jb25jYXQodGhpcy5pZCwgXCIuIFVzZSBcXCdmb3JjZVxcJyBhcmd1bWVudCB0byBvdmVyd3JpdGUgdGhlIGZlYXR1cmUuXCIpKTtcXG4gICAgICAgIH1cXG4gICAgICB9IC8vIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcXG5cXG5cXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XFxuICAgICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGZlYXR1cmUgPSBIb3N0T2JqZWN0X2NvbnN0cnVjdChGZWF0dXJlQ2xhc3MsIFt0aGlzXS5jb25jYXQoYXJncykpO1xcblxcbiAgICAgIGZlYXR1cmUuaW5zdGFsbEFwaSgpO1xcbiAgICAgIHRoaXMuX2ZlYXR1cmVzW0ZlYXR1cmVDbGFzcy5uYW1lXSA9IGZlYXR1cmU7XFxuICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLmFkZEZlYXR1cmUsIEZlYXR1cmVDbGFzcy5uYW1lKTtcXG4gICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVtb3ZlIGEgZmVhdHVyZSBmcm9tIHRoZSBvYmplY3QuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlTmFtZSAtIE5hbWUgb2YgdGhlIHR5cGUgb2YgZmVhdHVyZSB0byByZW1vdmUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSAtIFdoZXRoZXIgb3Igbm90IGEgZmVhdHVyZSB3YXMgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVtb3ZlRmVhdHVyZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRmVhdHVyZSh0eXBlTmFtZSkge1xcbiAgICAgIGlmICh0aGlzLl9mZWF0dXJlc1t0eXBlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiRmVhdHVyZSBvZiB0eXBlIFwiLmNvbmNhdCh0eXBlTmFtZSwgXCIgZG9lcyBub3QgZXhpc3Qgb24gaG9zdCBcIikuY29uY2F0KHRoaXMuaWQsIFwiLiBObyBmZWF0dXJlIHdpbGwgYmUgcmVtb3ZlZC5cIikpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICAvLyBSZW1vdmUgdGhlIGZlYXR1cmVcXG4gICAgICAgIHRoaXMuZW1pdCh0aGlzLmNvbnN0cnVjdG9yLkVWRU5UUy5yZW1vdmVGZWF0dXJlLCB0eXBlTmFtZSk7XFxuXFxuICAgICAgICB0aGlzLl9mZWF0dXJlc1t0eXBlTmFtZV0uZGlzY2FyZCgpO1xcblxcbiAgICAgICAgZGVsZXRlIHRoaXMuX2ZlYXR1cmVzW3R5cGVOYW1lXTtcXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogSW5kaWNhdGUgd2hldGhlciBhIHNwZWNpZmllZCBmZWF0dXJlIGlzIGluc3RhbGxlZCBvbiB0aGUgaG9zdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVOYW1lIC0gTmFtZSBvZiB0aGUgdHlwZSBvZiBmZWF0dXJlIHRvIGxvb2sgZm9yLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJoYXNGZWF0dXJlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNGZWF0dXJlKHR5cGVOYW1lKSB7XFxuICAgICAgcmV0dXJuICEhdGhpcy5fZmVhdHVyZXNbdHlwZU5hbWVdO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBMaXN0IHRoZSBuYW1lcyBvZiB0aGUgZmVhdHVyZXMgaW5zdGFsbGVkIG9uIHRoZSBob3N0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwibGlzdEZlYXR1cmVzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0RmVhdHVyZXMoKSB7XFxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2ZlYXR1cmVzKTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIEhvc3RPYmplY3Q7XFxufShjb3JlX01lc3Nlbmdlcik7XFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEhvc3RPYmplY3QsIFxcJ0VWRU5UU1xcJywge1xcbiAgdmFsdWU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEhvc3RPYmplY3QpLkVWRU5UUyksIHt9LCB7XFxuICAgIHVwZGF0ZTogXFwnb25VcGRhdGVcXCcsXFxuICAgIGFkZEZlYXR1cmU6IFxcJ29uQWRkRmVhdHVyZVxcJyxcXG4gICAgcmVtb3ZlRmVhdHVyZTogXFwnb25SZW1vdmVGZWF0dXJlXFwnXFxuICB9KSxcXG4gIHdyaXRhYmxlOiBmYWxzZVxcbn0pO1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgY29yZV9Ib3N0T2JqZWN0ID0gKEhvc3RPYmplY3QpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2FuaW1wYWNrL0Vhc2luZy5qc1xcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qKlxcclxcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEVhc2luZ09iamVjdCBPYmplY3QgY29udGFpbmluZyBlYXNpbmcgZnVuY3Rpb25zXFxyXFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gSW4gLSBFYXNpbmcgXFwnSW5cXCcgZnVuY3Rpb24uIFNob3VsZCB1c2UgdGhlIHNpZ25hdHVyZSAoazpudW1iZXIpOm51bWJlci5cXHJcXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBPdXQgLSBFYXNpbmcgXFwnT3V0XFwnIGZ1bmN0aW9uLiBTaG91bGQgdXNlIHRoZSBzaWduYXR1cmUgKGs6bnVtYmVyKTpudW1iZXIuXFxyXFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gSW5PdXQgLSBFYXNpbmcgXFwnSW5PdXRcXCcgZnVuY3Rpb24uIFNob3VsZCB1c2UgdGhlIHNpZ25hdHVyZSAoazpudW1iZXIpOm51bWJlci5cXHJcXG4gKi9cXG5cXG4vKipcXHJcXG4gKiBMaW5lYXIgRWFzaW5nXFxyXFxuICogQHR5cGUge0Vhc2luZ09iamVjdH1cXHJcXG4gKi9cXG52YXIgTGluZWFyID0ge1xcbiAgTm9uZTogZnVuY3Rpb24gTm9uZShrKSB7XFxuICAgIHJldHVybiBrO1xcbiAgfSxcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHJldHVybiBrO1xcbiAgfSxcXG4gIE91dDogZnVuY3Rpb24gT3V0KGspIHtcXG4gICAgcmV0dXJuIGs7XFxuICB9LFxcbiAgSW5PdXQ6IGZ1bmN0aW9uIEluT3V0KGspIHtcXG4gICAgcmV0dXJuIGs7XFxuICB9XFxufTtcXG4vKipcXHJcXG4gKiBRdWFkcmF0aWMgRWFzaW5nXFxyXFxuICogQHR5cGUge0Vhc2luZ09iamVjdH1cXHJcXG4gKi9cXG5cXG52YXIgUXVhZHJhdGljID0ge1xcbiAgSW46IGZ1bmN0aW9uIEluKGspIHtcXG4gICAgcmV0dXJuIGsgKiBrO1xcbiAgfSxcXG4gIE91dDogZnVuY3Rpb24gT3V0KGspIHtcXG4gICAgcmV0dXJuIGsgKiAoMiAtIGspO1xcbiAgfSxcXG4gIEluT3V0OiBmdW5jdGlvbiBJbk91dChrKSB7XFxuICAgIGsgKj0gMjtcXG5cXG4gICAgaWYgKGsgPCAxKSB7XFxuICAgICAgcmV0dXJuIDAuNSAqIGsgKiBrO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiAtMC41ICogKC0tayAqIChrIC0gMikgLSAxKTtcXG4gIH1cXG59O1xcbi8qKlxcclxcbiAqIEN1YmljIEVhc2luZ1xcclxcbiAqIEB0eXBlIHtFYXNpbmdPYmplY3R9XFxyXFxuICovXFxuXFxudmFyIEN1YmljID0ge1xcbiAgSW46IGZ1bmN0aW9uIEluKGspIHtcXG4gICAgcmV0dXJuIGsgKiBrICogaztcXG4gIH0sXFxuICBPdXQ6IGZ1bmN0aW9uIE91dChrKSB7XFxuICAgIHJldHVybiAtLWsgKiBrICogayArIDE7XFxuICB9LFxcbiAgSW5PdXQ6IGZ1bmN0aW9uIEluT3V0KGspIHtcXG4gICAgayAqPSAyO1xcblxcbiAgICBpZiAoayA8IDEpIHtcXG4gICAgICByZXR1cm4gMC41ICogayAqIGsgKiBrO1xcbiAgICB9XFxuXFxuICAgIGsgLT0gMjtcXG4gICAgcmV0dXJuIDAuNSAqIChrICogayAqIGsgKyAyKTtcXG4gIH1cXG59O1xcbi8qKlxcclxcbiAqIFF1YXJ0aWMgRWFzaW5nXFxyXFxuICogQHR5cGUge0Vhc2luZ09iamVjdH1cXHJcXG4gKi9cXG5cXG52YXIgUXVhcnRpYyA9IHtcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHJldHVybiBrICogayAqIGsgKiBrO1xcbiAgfSxcXG4gIE91dDogZnVuY3Rpb24gT3V0KGspIHtcXG4gICAgcmV0dXJuIDEgLSAtLWsgKiBrICogayAqIGs7XFxuICB9LFxcbiAgSW5PdXQ6IGZ1bmN0aW9uIEluT3V0KGspIHtcXG4gICAgayAqPSAyO1xcblxcbiAgICBpZiAoayA8IDEpIHtcXG4gICAgICByZXR1cm4gMC41ICogayAqIGsgKiBrICogaztcXG4gICAgfVxcblxcbiAgICBrIC09IDI7XFxuICAgIHJldHVybiAtMC41ICogKGsgKiBrICogayAqIGsgLSAyKTtcXG4gIH1cXG59O1xcbi8qKlxcclxcbiAqIFF1aW50aWMgRWFzaW5nXFxyXFxuICogQHR5cGUge0Vhc2luZ09iamVjdH1cXHJcXG4gKi9cXG5cXG52YXIgUXVpbnRpYyA9IHtcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHJldHVybiBrICogayAqIGsgKiBrICogaztcXG4gIH0sXFxuICBPdXQ6IGZ1bmN0aW9uIE91dChrKSB7XFxuICAgIHJldHVybiAtLWsgKiBrICogayAqIGsgKiBrICsgMTtcXG4gIH0sXFxuICBJbk91dDogZnVuY3Rpb24gSW5PdXQoaykge1xcbiAgICBrICo9IDI7XFxuXFxuICAgIGlmIChrIDwgMSkge1xcbiAgICAgIHJldHVybiAwLjUgKiBrICogayAqIGsgKiBrICogaztcXG4gICAgfVxcblxcbiAgICBrIC09IDI7XFxuICAgIHJldHVybiAwLjUgKiAoayAqIGsgKiBrICogayAqIGsgKyAyKTtcXG4gIH1cXG59O1xcbi8qKlxcclxcbiAqIFNpbnVzb2lkYWwgRWFzaW5nXFxyXFxuICogQHR5cGUge0Vhc2luZ09iamVjdH1cXHJcXG4gKi9cXG5cXG52YXIgU2ludXNvaWRhbCA9IHtcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHJldHVybiAxIC0gTWF0aC5jb3MoayAqIE1hdGguUEkgLyAyKTtcXG4gIH0sXFxuICBPdXQ6IGZ1bmN0aW9uIE91dChrKSB7XFxuICAgIHJldHVybiBNYXRoLnNpbihrICogTWF0aC5QSSAvIDIpO1xcbiAgfSxcXG4gIEluT3V0OiBmdW5jdGlvbiBJbk91dChrKSB7XFxuICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XFxuICB9XFxufTtcXG4vKipcXHJcXG4gKiBFeHBvbmVudGlhbCBFYXNpbmdcXHJcXG4gKiBAdHlwZSB7RWFzaW5nT2JqZWN0fVxcclxcbiAqL1xcblxcbnZhciBFeHBvbmVudGlhbCA9IHtcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHJldHVybiBrID09PSAwID8gMCA6IE1hdGgucG93KDEwMjQsIGsgLSAxKTtcXG4gIH0sXFxuICBPdXQ6IGZ1bmN0aW9uIE91dChrKSB7XFxuICAgIHJldHVybiBrID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtMTAgKiBrKTtcXG4gIH0sXFxuICBJbk91dDogZnVuY3Rpb24gSW5PdXQoaykge1xcbiAgICBpZiAoayA9PT0gMCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuXFxuICAgIGlmIChrID09PSAxKSB7XFxuICAgICAgcmV0dXJuIDE7XFxuICAgIH1cXG5cXG4gICAgayAqPSAyO1xcblxcbiAgICBpZiAoayA8IDEpIHtcXG4gICAgICByZXR1cm4gMC41ICogTWF0aC5wb3coMTAyNCwgayAtIDEpO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqIChrIC0gMSkpICsgMik7XFxuICB9XFxufTtcXG4vKipcXHJcXG4gKiBDaXJjdWxhciBFYXNpbmdcXHJcXG4gKiBAdHlwZSB7RWFzaW5nT2JqZWN0fVxcclxcbiAqL1xcblxcbnZhciBDaXJjdWxhciA9IHtcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSBrICogayk7XFxuICB9LFxcbiAgT3V0OiBmdW5jdGlvbiBPdXQoaykge1xcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSAtLWsgKiBrKTtcXG4gIH0sXFxuICBJbk91dDogZnVuY3Rpb24gSW5PdXQoaykge1xcbiAgICBrICo9IDI7XFxuXFxuICAgIGlmIChrIDwgMSkge1xcbiAgICAgIHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gayAqIGspIC0gMSk7XFxuICAgIH1cXG5cXG4gICAgayAtPSAyO1xcbiAgICByZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gayAqIGspICsgMSk7XFxuICB9XFxufTtcXG4vKipcXHJcXG4gKiBFbGFzdGljIEVhc2luZ1xcclxcbiAqIEB0eXBlIHtFYXNpbmdPYmplY3R9XFxyXFxuICovXFxuXFxudmFyIEVsYXN0aWMgPSB7XFxuICBJbjogZnVuY3Rpb24gSW4oaykge1xcbiAgICB2YXIgcztcXG4gICAgdmFyIGEgPSAwLjE7XFxuICAgIHZhciBwID0gMC40O1xcblxcbiAgICBpZiAoayA9PT0gMCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuXFxuICAgIGlmIChrID09PSAxKSB7XFxuICAgICAgcmV0dXJuIDE7XFxuICAgIH1cXG5cXG4gICAgaWYgKCFhIHx8IGEgPCAxKSB7XFxuICAgICAgYSA9IDE7XFxuICAgICAgcyA9IHAgLyA0O1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHMgPSBwICogTWF0aC5hc2luKDEgLyBhKSAvICgyICogTWF0aC5QSSk7XFxuICAgIH1cXG5cXG4gICAgayAtPSAxO1xcbiAgICByZXR1cm4gLShhICogTWF0aC5wb3coMiwgMTAgKiBrKSAqIE1hdGguc2luKChrIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO1xcbiAgfSxcXG4gIE91dDogZnVuY3Rpb24gT3V0KGspIHtcXG4gICAgdmFyIHM7XFxuICAgIHZhciBhID0gMC4xO1xcbiAgICB2YXIgcCA9IDAuNDtcXG5cXG4gICAgaWYgKGsgPT09IDApIHtcXG4gICAgICByZXR1cm4gMDtcXG4gICAgfVxcblxcbiAgICBpZiAoayA9PT0gMSkge1xcbiAgICAgIHJldHVybiAxO1xcbiAgICB9XFxuXFxuICAgIGlmICghYSB8fCBhIDwgMSkge1xcbiAgICAgIGEgPSAxO1xcbiAgICAgIHMgPSBwIC8gNDtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBzID0gcCAqIE1hdGguYXNpbigxIC8gYSkgLyAoMiAqIE1hdGguUEkpO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogaykgKiBNYXRoLnNpbigoayAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICsgMTtcXG4gIH0sXFxuICBJbk91dDogZnVuY3Rpb24gSW5PdXQoaykge1xcbiAgICB2YXIgcztcXG4gICAgdmFyIGEgPSAwLjE7XFxuICAgIHZhciBwID0gMC40O1xcblxcbiAgICBpZiAoayA9PT0gMCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuXFxuICAgIGlmIChrID09PSAxKSB7XFxuICAgICAgcmV0dXJuIDE7XFxuICAgIH1cXG5cXG4gICAgaWYgKCFhIHx8IGEgPCAxKSB7XFxuICAgICAgYSA9IDE7XFxuICAgICAgcyA9IHAgLyA0O1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHMgPSBwICogTWF0aC5hc2luKDEgLyBhKSAvICgyICogTWF0aC5QSSk7XFxuICAgIH1cXG5cXG4gICAgayAqPSAyO1xcblxcbiAgICBpZiAoayA8IDEpIHtcXG4gICAgICBrIC09IDE7XFxuICAgICAgcmV0dXJuIC0wLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogaykgKiBNYXRoLnNpbigoayAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKTtcXG4gICAgfVxcblxcbiAgICBrIC09IDE7XFxuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogaykgKiBNYXRoLnNpbigoayAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICogMC41ICsgMTtcXG4gIH1cXG59O1xcbi8qKlxcclxcbiAqIEJhY2sgRWFzaW5nXFxyXFxuICogQHR5cGUge0Vhc2luZ09iamVjdH1cXHJcXG4gKi9cXG5cXG52YXIgQmFjayA9IHtcXG4gIEluOiBmdW5jdGlvbiBJbihrKSB7XFxuICAgIHZhciBzID0gMS43MDE1ODtcXG4gICAgcmV0dXJuIGsgKiBrICogKChzICsgMSkgKiBrIC0gcyk7XFxuICB9LFxcbiAgT3V0OiBmdW5jdGlvbiBPdXQoaykge1xcbiAgICB2YXIgcyA9IDEuNzAxNTg7XFxuICAgIHJldHVybiAtLWsgKiBrICogKChzICsgMSkgKiBrICsgcykgKyAxO1xcbiAgfSxcXG4gIEluT3V0OiBmdW5jdGlvbiBJbk91dChrKSB7XFxuICAgIHZhciBzID0gMS43MDE1OCAqIDEuNTI1O1xcbiAgICBrICo9IDI7XFxuXFxuICAgIGlmIChrIDwgMSkge1xcbiAgICAgIHJldHVybiAwLjUgKiAoayAqIGsgKiAoKHMgKyAxKSAqIGsgLSBzKSk7XFxuICAgIH1cXG5cXG4gICAgayAtPSAyO1xcbiAgICByZXR1cm4gMC41ICogKGsgKiBrICogKChzICsgMSkgKiBrICsgcykgKyAyKTtcXG4gIH1cXG59O1xcbi8qKlxcclxcbiAqIEJvdW5jZSBFYXNpbmdcXHJcXG4gKiBAdHlwZSB7RWFzaW5nT2JqZWN0fVxcclxcbiAqL1xcblxcbnZhciBCb3VuY2UgPSB7XFxuICBJbjogZnVuY3Rpb24gSW4oaykge1xcbiAgICByZXR1cm4gMSAtIEJvdW5jZS5PdXQoMSAtIGspO1xcbiAgfSxcXG4gIE91dDogZnVuY3Rpb24gT3V0KGspIHtcXG4gICAgaWYgKGsgPCAxIC8gMi43NSkge1xcbiAgICAgIHJldHVybiA3LjU2MjUgKiBrICogaztcXG4gICAgfSBlbHNlIGlmIChrIDwgMiAvIDIuNzUpIHtcXG4gICAgICBrIC09IDEuNTtcXG4gICAgICByZXR1cm4gNy41NjI1ICogKGsgLyAyLjc1KSAqIGsgKyAwLjc1O1xcbiAgICB9IGVsc2UgaWYgKGsgPCAyLjUgLyAyLjc1KSB7XFxuICAgICAgayAtPSAyLjI1O1xcbiAgICAgIHJldHVybiA3LjU2MjUgKiAoayAvIDIuNzUpICogayArIDAuOTM3NTtcXG4gICAgfVxcblxcbiAgICBrIC09IDIuNjI1O1xcbiAgICByZXR1cm4gNy41NjI1ICogKGsgLyAyLjc1KSAqIGsgKyAwLjk4NDM3NTtcXG4gIH0sXFxuICBJbk91dDogZnVuY3Rpb24gSW5PdXQoaykge1xcbiAgICBpZiAoayA8IDAuNSkge1xcbiAgICAgIHJldHVybiBCb3VuY2UuSW4oayAqIDIpICogMC41O1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBCb3VuY2UuT3V0KGsgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XFxuICB9XFxufTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLmpzXFxuZnVuY3Rpb24gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9vd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfbm9uSXRlcmFibGVSZXN0KCk7IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XFxuXFxuZnVuY3Rpb24gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XFxuXFxuZnVuY3Rpb24gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cXG5cXG5mdW5jdGlvbiBfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3NldFByb3RvdHlwZU9mKG8sIHApIHsgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKG8pIHsgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuZnVuY3Rpb24gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXFxuXFxuLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cXG5cXG4vKipcXHJcXG4gKiBDbGFzcyBmYWN0b3J5IGludGVyZmFjZSBmb3IgZmVhdHVyZXMgdGhhdCBhcmUgZGVwZW5kZW50IG9uIG90aGVyIGZlYXR1cmVzIGJlaW5nXFxyXFxuICogcHJlc2VudCBvbiB0aGUgaG9zdC4gRXZlbnQgZGVwZW5kZW5jaWVzIHdpbGwgYmUgbGlzdGVuZWQgZm9yIHdoZW4gYSBmZWF0dXJlIG9mXFxyXFxuICogbWF0Y2hpbmcgdHlwZSBpcyBhZGRlZCB0byB0aGUgaG9zdCBhbmQgd2lsbCBzdG9wIGJlaW5nIGxpc3RlbmVkIGZvciB3aGVuIG9uZVxcclxcbiAqIGlzIHJlbW92ZWQuIElmIHRoZSBmZWF0dXJlIGlzIGFscmVhZHkgcHJlc2VudCB3aGVuIGNvbnN0cnVjdGVkLCBldmVudHMgd2lsbFxcclxcbiAqIGJlIGxpc3RlbmVkIGZvciByaWdodCBhd2F5LlxcclxcbiAqXFxyXFxuICogQGludGVyZmFjZVxcclxcbiAqXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IEVWRU5UX0RFUEVOREVOQ0lFUyAtIEV2ZW50cyB0aGF0IHRoZSBmZWF0dXJlIHNob3VsZCBzdGFydC9zdG9wXFxyXFxuICogbGlzdGVuaW5nIGZvciB3aGVuIGEgZmVhdHVyZSBvZiB0eXBlIEZlYXR1cmVOYW1lIGlzIGFkZGVkL3JlbW92ZWQgZnJvbSB0aGUgaG9zdC5cXHJcXG4gKiBFdmVudCBkZXBlbmRlbmNpZXMgc2hvdWxkIGZvbGxvdyB0aGUgc2lnbmF0dXJlOlxcclxcbiAqICB7IEZlYXR1cmVOYW1lOiB7IGV2ZW50TmFtZTogY2FsbGJhY2tOYW1lLCAuLi4gfSwgLi4uIH1cXHJcXG4gKi9cXG5cXG52YXIgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlKCkge1xcbiAgICBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UpO1xcbiAgfVxcblxcbiAgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jcmVhdGVDbGFzcyhGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLCBbe1xcbiAgICBrZXk6IFwiX29uRmVhdHVyZUFkZGVkXCIsXFxuICAgIHZhbHVlOlxcbiAgICAvKipcXHJcXG4gICAgICogU3RhcnQgbGlzdGVuaW5nIGZvciBldmVudCBkZXBlbmRlbmNpZXMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gZmVhdHVyZSB0eXBlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZU5hbWUgLSB0eXBlIG9mIGZlYXR1cmUgdG8gbGlzdGVuIGZvci5cXHJcXG4gICAgICovXFxuICAgIGZ1bmN0aW9uIF9vbkZlYXR1cmVBZGRlZCh0eXBlTmFtZSkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0b3AgbGlzdGVuaW5nIGZvciBldmVudCBkZXBlbmRlbmNpZXMgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4gZmVhdHVyZSB0eXBlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZU5hbWUgLSB0eXBlIG9mIGZlYXR1cmUgdG8gc3RvcCBsaXN0ZW5pbmcgZm9yLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vbkZlYXR1cmVSZW1vdmVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25GZWF0dXJlUmVtb3ZlZCh0eXBlTmFtZSkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIEBhdWdtZW50cyB7QGxpbmsgQWJzdHJhY3RIb3N0RmVhdHVyZSNkaXNjYXJkfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImRpc2NhcmRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NhcmQoKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogQ3JlYXRlcyBhIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB7QGxpbmsgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZX0gYW5kIGV4dGVuZHNcXHJcXG4gICAgICogYSBzcGVjaWZpZWQgYmFzZSBjbGFzcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtDbGFzc30gQmFzZUNsYXNzIC0gVGhlIGNsYXNzIHRvIGV4dGVuZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybiB7Q2xhc3N9IEEgY2xhc3MgdGhhdCBleHRlbmRzIGBCYXNlQ2xhc3NgIGFuZCBpbXBsZW1lbnRzIHtAbGluayBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlfS5cXHJcXG4gICAgICovXFxuXFxuICB9XSwgW3tcXG4gICAga2V5OiBcIk1peGluXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBNaXhpbihCYXNlQ2xhc3MpIHtcXG4gICAgICB2YXIgRmVhdHVyZURlcGVuZGVudE1peGluID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNsYXNzKSB7XFxuICAgICAgICBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2luaGVyaXRzKEZlYXR1cmVEZXBlbmRlbnRNaXhpbiwgX0Jhc2VDbGFzcyk7XFxuXFxuICAgICAgICB2YXIgX3N1cGVyID0gRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jcmVhdGVTdXBlcihGZWF0dXJlRGVwZW5kZW50TWl4aW4pO1xcblxcbiAgICAgICAgZnVuY3Rpb24gRmVhdHVyZURlcGVuZGVudE1peGluKGhvc3QpIHtcXG4gICAgICAgICAgdmFyIF90aGlzO1xcblxcbiAgICAgICAgICBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZlYXR1cmVEZXBlbmRlbnRNaXhpbik7XFxuXFxuICAgICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaG9zdCk7XFxuICAgICAgICAgIF90aGlzLl9ob3N0ID0gaG9zdDsgLy8gTm8gbmVlZCB0byBsaXN0ZW4gZm9yIGV2ZW50cyBpZiB0aGUgbWl4aW4gaXMgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBtdWx0aXBsZSB0aW1lc1xcblxcbiAgICAgICAgICBpZiAoIV90aGlzLl9pbml0aWFsaXplZCkge1xcbiAgICAgICAgICAgIF90aGlzLl9pbml0aWFsaXplZCA9IHRydWU7IC8vIFN0YXJ0IGxpc3RlbmluZyBmb3IgZmVhdHVyZSBldmVudHNcXG5cXG4gICAgICAgICAgICBfdGhpcy5fb25GZWF0dXJlQWRkZWQgPSBfdGhpcy5fb25GZWF0dXJlQWRkZWQuYmluZChGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcbiAgICAgICAgICAgIF90aGlzLl9vbkZlYXR1cmVSZW1vdmVkID0gX3RoaXMuX29uRmVhdHVyZVJlbW92ZWQuYmluZChGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xcblxcbiAgICAgICAgICAgIF90aGlzLl9ob3N0Lmxpc3RlblRvKGNvcmVfSG9zdE9iamVjdC5FVkVOVFMuYWRkRmVhdHVyZSwgX3RoaXMuX29uRmVhdHVyZUFkZGVkKTtcXG5cXG4gICAgICAgICAgICBfdGhpcy5faG9zdC5saXN0ZW5Ubyhjb3JlX0hvc3RPYmplY3QuRVZFTlRTLnJlbW92ZUZlYXR1cmUsIF90aGlzLl9vbkZlYXR1cmVSZW1vdmVkKTsgLy8gUmVnaXN0ZXIgZmVhdHVyZXMgdGhhdCBhbHJlYWR5IGV4aXN0XFxuXFxuXFxuICAgICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMuY29uc3RydWN0b3IuRVZFTlRfREVQRU5ERU5DSUVTKS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlTmFtZSkge1xcbiAgICAgICAgICAgICAgaWYgKF90aGlzLl9ob3N0W3R5cGVOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICAgIF90aGlzLl9vbkZlYXR1cmVBZGRlZCh0eXBlTmFtZSk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgcmV0dXJuIF90aGlzO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jcmVhdGVDbGFzcyhGZWF0dXJlRGVwZW5kZW50TWl4aW4sIFt7XFxuICAgICAgICAgIGtleTogXCJfb25GZWF0dXJlQWRkZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkZlYXR1cmVBZGRlZCh0eXBlTmFtZSkge1xcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0RFUEVOREVOQ0lFU1t0eXBlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuY29uc3RydWN0b3IuRVZFTlRfREVQRU5ERU5DSUVTW3R5cGVOYW1lXTtcXG4gICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGV2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xcbiAgICAgICAgICAgICAgICB2YXIgX3JlZjIgPSBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBfcmVmMlswXSxcXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gX3JlZjJbMV07XFxuXFxuICAgICAgICAgICAgICAgIF90aGlzMltjYWxsYmFja10gPSBfdGhpczJbY2FsbGJhY2tdLmJpbmQoX3RoaXMyKTtcXG5cXG4gICAgICAgICAgICAgICAgX3RoaXMyLl9ob3N0Lmxpc3RlblRvKF90aGlzMi5faG9zdFt0eXBlTmFtZV0uRVZFTlRTW2V2ZW50TmFtZV0sIF90aGlzMltjYWxsYmFja10pO1xcbiAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJfb25GZWF0dXJlUmVtb3ZlZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uRmVhdHVyZVJlbW92ZWQodHlwZU5hbWUpIHtcXG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gICAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9ERVBFTkRFTkNJRVNbdHlwZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgIHZhciBldmVudHMgPSB0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0RFUEVOREVOQ0lFU1t0eXBlTmFtZV07XFxuICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhldmVudHMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XFxuICAgICAgICAgICAgICAgIHZhciBfcmVmNCA9IEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfc2xpY2VkVG9BcnJheShfcmVmMywgMiksXFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUgPSBfcmVmNFswXSxcXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gX3JlZjRbMV07XFxuXFxuICAgICAgICAgICAgICAgIF90aGlzMy5faG9zdC5zdG9wTGlzdGVuaW5nKF90aGlzMy5faG9zdFt0eXBlTmFtZV0uRVZFTlRTW2V2ZW50TmFtZV0sIF90aGlzM1tjYWxsYmFja10pO1xcbiAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJkaXNjYXJkXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjYXJkKCkge1xcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgICAgICAgICAgIC8vIFN0b3AgbGlzdGVuaW5nIGZvciBmZWF0dXJlIGV2ZW50c1xcbiAgICAgICAgICAgIHRoaXMuX2hvc3Quc3RvcExpc3RlbmluZyhjb3JlX0hvc3RPYmplY3QuRVZFTlRTLmFkZEZlYXR1cmUsIHRoaXMuX29uRmVhdHVyZUFkZGVkKTtcXG5cXG4gICAgICAgICAgICB0aGlzLl9ob3N0LnN0b3BMaXN0ZW5pbmcoY29yZV9Ib3N0T2JqZWN0LkVWRU5UUy5yZW1vdmVGZWF0dXJlLCB0aGlzLl9vbkZlYXR1cmVSZW1vdmVkKTsgLy8gU3RvcCBsaXN0ZW5pbmcgdG8gZmVhdHVyZS1zcGVjaWZpYyBldmVudHNcXG5cXG5cXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0RFUEVOREVOQ0lFUykuZm9yRWFjaChmdW5jdGlvbiAodHlwZU5hbWUpIHtcXG4gICAgICAgICAgICAgIGlmIChfdGhpczQuX2hvc3RbdHlwZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgICAgX3RoaXM0Ll9vbkZlYXR1cmVSZW1vdmVkKHR5cGVOYW1lKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICBfZ2V0KEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YoRmVhdHVyZURlcGVuZGVudE1peGluLnByb3RvdHlwZSksIFwiZGlzY2FyZFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XSk7XFxuXFxuICAgICAgICByZXR1cm4gRmVhdHVyZURlcGVuZGVudE1peGluO1xcbiAgICAgIH0oQmFzZUNsYXNzKTtcXG5cXG4gICAgICB2YXIgRVZFTlRfREVQRU5ERU5DSUVTID0gQmFzZUNsYXNzLkVWRU5UX0RFUEVOREVOQ0lFUyB8fCB7fTtcXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhGZWF0dXJlRGVwZW5kZW50TWl4aW4sIHtcXG4gICAgICAgIEVWRU5UX0RFUEVOREVOQ0lFUzoge1xcbiAgICAgICAgICB2YWx1ZTogRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9vYmplY3RTcHJlYWQoe30sIEVWRU5UX0RFUEVOREVOQ0lFUyksXFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBGZWF0dXJlRGVwZW5kZW50TWl4aW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlO1xcbn0oKTtcXG4vKipcXHJcXG4gKiBFdmVudCBkZXBlbmRlbmNpZXMgc2hvdWxkIGZvbGxvdyB0aGUgc2lnbmF0dXJlOlxcclxcbiAqIHtcXHJcXG4gKiAgRmVhdHVyZU5hbWU6IHtcXHJcXG4gKiAgICAvLyBFdmVudHMgdGhhdCB0aGUgZmVhdHVyZSBzaG91bGQgc3RhcnQvc3RvcCBsaXN0ZW5pbmcgZm9yIHdoZW4gYSBmZWF0dXJlXFxyXFxuICogICAgLy8gb2YgdHlwZSBGZWF0dXJlTmFtZSBpcyBhZGRlZC9yZW1vdmVkIGZyb20gdGhlIGhvc3RcXHJcXG4gKiAgICB7XFxyXFxuICogICAgICBldmVudE5hbWU6IGNhbGxiYWNrTmFtZSxcXHJcXG4gKiAgICAgIC4uLlxcclxcbiAqICAgIH0sXFxyXFxuICogIH1cXHJcXG4gKiB9XFxyXFxuICovXFxuXFxuXFxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSwge1xcbiAgRVZFTlRfREVQRU5ERU5DSUVTOiB7XFxuICAgIHZhbHVlOiB7fSxcXG4gICAgd3JpdGFibGU6IGZhbHNlXFxuICB9XFxufSk7XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBjb3JlX0ZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UgPSAoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZS5qc1xcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9vd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YobywgcCkgeyBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YobykgeyBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xcblxcbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZmFjdG9yeSBpbnRlcmZhY2UgZm9yIGZlYXR1cmVzIHRoYXQgYXJlIGRlcGVuZGVudCBvbiB0aGUgQW5pbWF0aW9uRmVhdHVyZVxcclxcbiAqIGJlaW5nIHByZXNlbnQgb24gdGhlIGhvc3QuIExheWVyIGFuZCBhbmltYXRpb24gZXZlbnRzIHdpbGwgYXV0b21hdGljYWxseSBiZVxcclxcbiAqIGxpc3RlbmVkIGZvciBvbmNlIGEgQW5pbWF0aW9uRmVhdHVyZSBpcyBhZGRlZCB0byB0aGUgaG9zdCBhbmQgc3RvcHBlZCBvbmNlIGl0XFxyXFxuICogaXMgcmVtb3ZlZC5cXHJcXG4gKlxcclxcbiAqIEBpbnRlcmZhY2VcXHJcXG4gKiBAZXh0ZW5kcyBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlXFxyXFxuICpcXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gRVZFTlRfREVQRU5ERU5DSUVTIC0gRXZlbnRzIHRoYXQgdGhlIGZlYXR1cmUgc2hvdWxkIHN0YXJ0L3N0b3BcXHJcXG4gKiBsaXN0ZW5pbmcgZm9yIHdoZW4gYSBmZWF0dXJlIG9mIHR5cGUgRmVhdHVyZU5hbWUgaXMgYWRkZWQvcmVtb3ZlZCBmcm9tIHRoZSBob3N0LlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBFVkVOVF9ERVBFTkRFTkNJRVMuQW5pbWF0aW9uRmVhdHVyZSAtIEV2ZW50cyB0aGF0IGFyZVxcclxcbiAqIHNwZWNpZmljIHRvIHRoZSBBbmltYXRpb25GZWF0dXJlLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRfREVQRU5ERU5DSUVTLkFuaW1hdGlvbkZlYXR1cmUuYWRkTGF5ZXI9XFwnX29uTGF5ZXJBZGRlZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gQW5pbWF0aW9uRmVhdHVyZSBhZGRMYXllclxcclxcbiAqIGV2ZW50cyBhcmUgZW1pdHRlZC5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UX0RFUEVOREVOQ0lFUy5BbmltYXRpb25GZWF0dXJlLnJlbW92ZUxheWVyPVxcJ19vbkxheWVyUmVtb3ZlZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gQW5pbWF0aW9uRmVhdHVyZSByZW1vdmVMYXllclxcclxcbiAqIGV2ZW50cyBhcmUgZW1pdHRlZC5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UX0RFUEVOREVOQ0lFUy5BbmltYXRpb25GZWF0dXJlLnJlbmFtZUxheWVyPVxcJ19vbkxheWVyUmVuYW1lZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gQW5pbWF0aW9uRmVhdHVyZSByZW5hbWVMYXllclxcclxcbiAqIGV2ZW50cyBhcmUgZW1pdHRlZC5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UX0RFUEVOREVOQ0lFUy5BbmltYXRpb25GZWF0dXJlLmFkZEFuaW1hdGlvbj1cXCdfb25BbmltYXRpb25BZGRlZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gQW5pbWF0aW9uRmVhdHVyZSBhZGRBbmltYXRpb25cXHJcXG4gKiBldmVudHMgYXJlIGVtaXR0ZWQuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVF9ERVBFTkRFTkNJRVMuQW5pbWF0aW9uRmVhdHVyZS5yZW1vdmVBbmltYXRpb249XFwnX29uQW5pbWF0aW9uUmVtb3ZlZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gQW5pbWF0aW9uRmVhdHVyZSByZW1vdmVBbmltYXRpb25cXHJcXG4gKiBldmVudHMgYXJlIGVtaXR0ZWQuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVF9ERVBFTkRFTkNJRVMuQW5pbWF0aW9uRmVhdHVyZS5yZW5hbWVBbmltYXRpb249XFwnX29uQW5pbWF0aW9uUmVuYW1lZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gQW5pbWF0aW9uRmVhdHVyZSByZW5hbWVBbmltYXRpb25cXHJcXG4gKiBldmVudHMgYXJlIGVtaXR0ZWQuXFxyXFxuICovXFxuXFxudmFyIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9GZWF0dXJlRGVwZW5kZW50SW50ZSkge1xcbiAgQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9pbmhlcml0cyhBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLCBfRmVhdHVyZURlcGVuZGVudEludGUpO1xcblxcbiAgdmFyIF9zdXBlciA9IEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY3JlYXRlU3VwZXIoQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSk7XFxuXFxuICBmdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlKCkge1xcbiAgICBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UpO1xcblxcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICB9XFxuXFxuICBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NyZWF0ZUNsYXNzKEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UsIFt7XFxuICAgIGtleTogXCJfb25MYXllckFkZGVkXCIsXFxuICAgIHZhbHVlOlxcbiAgICAvKipcXHJcXG4gICAgICogRXhlY3V0ZWQgd2hlbiBhbmltYXRpb24gbGF5ZXIgYWRkZWQgZXZlbnRzIGFyZSBjYXVnaHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCB3YXMgYWRkZWQuXFxyXFxuICAgICAqL1xcbiAgICBmdW5jdGlvbiBfb25MYXllckFkZGVkKF9yZWYpIHtcXG4gICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRXhlY3V0ZWQgd2hlbiBhbmltYXRpb24gbGF5ZXIgcmVtb3ZlZCBldmVudHMgYXJlIGNhdWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IHdhcyByZW1vdmVkLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vbkxheWVyUmVtb3ZlZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uTGF5ZXJSZW1vdmVkKF9yZWYyKSB7XFxuICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlZCB3aGVuIGFuaW1hdGlvbiBsYXllciByZW5hbWVkIGV2ZW50cyBhcmUgY2F1Z2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRoYXQgd2FzIHJlbmFtZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdOYW1lIC0gTmV3IG5hbWUgb2YgdGhlIGxheWVyLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vbkxheWVyUmVuYW1lZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uTGF5ZXJSZW5hbWVkKF9yZWYzKSB7XFxuICAgICAgdmFyIG9sZE5hbWUgPSBfcmVmMy5vbGROYW1lLFxcbiAgICAgICAgICBuZXdOYW1lID0gX3JlZjMubmV3TmFtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRXhlY3V0ZWQgd2hlbiBhbmltYXRpb24gYWRkZWQgZXZlbnRzIGFyZSBjYXVnaHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IGFuIGFuaW1hdGlvbiB3YXMgYWRkZWQgdG8uXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIGFkZGVkLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vbkFuaW1hdGlvbkFkZGVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25BbmltYXRpb25BZGRlZChfcmVmNCkge1xcbiAgICAgIHZhciBsYXllck5hbWUgPSBfcmVmNC5sYXllck5hbWUsXFxuICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBfcmVmNC5hbmltYXRpb25OYW1lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlZCB3aGVuIGFuaW1hdGlvbiByZW1vdmVkIGV2ZW50cyBhcmUgY2F1Z2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBhbiBhbmltYXRpb24gd2FzIHJlbW92ZWQgZnJvbS5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gdGhhdCB3YXMgcmVtb3ZlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb25BbmltYXRpb25SZW1vdmVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25BbmltYXRpb25SZW1vdmVkKF9yZWY1KSB7XFxuICAgICAgdmFyIGxheWVyTmFtZSA9IF9yZWY1LmxheWVyTmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IF9yZWY1LmFuaW1hdGlvbk5hbWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEV4ZWN1dGVkIHdoZW4gYW5pbWF0aW9uIHJlbmFtZWQgZXZlbnRzIGFyZSBjYXVnaHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IGFuIGFuaW1hdGlvbiBiZWxvbmdzIHRvLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkTmFtZSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbiB0aGF0IHdhcyByZW5hbWVkLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3TmFtZSAtIE5ldyBuYW1lIG9mIHRoZSBhbmltYXRpb24uXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uQW5pbWF0aW9uUmVuYW1lZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uQW5pbWF0aW9uUmVuYW1lZChfcmVmNikge1xcbiAgICAgIHZhciBsYXllck5hbWUgPSBfcmVmNi5sYXllck5hbWUsXFxuICAgICAgICAgIG9sZE5hbWUgPSBfcmVmNi5vbGROYW1lLFxcbiAgICAgICAgICBuZXdOYW1lID0gX3JlZjYubmV3TmFtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ3JlYXRlcyBhIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB7QGxpbmsgQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZX1cXHJcXG4gICAgICogYW5kIGV4dGVuZHMgYSBzcGVjaWZpZWQgYmFzZSBjbGFzcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtDbGFzc30gQmFzZUNsYXNzIC0gVGhlIGNsYXNzIHRvIGV4dGVuZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybiB7Q2xhc3N9IEEgY2xhc3MgdGhhdCBleHRlbmRzIGBCYXNlQ2xhc3NgIGFuZCBpbXBsZW1lbnRzIHtAbGluayBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlfS5cXHJcXG4gICAgICovXFxuXFxuICB9XSwgW3tcXG4gICAga2V5OiBcIk1peGluXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBNaXhpbihCYXNlQ2xhc3MpIHtcXG4gICAgICB2YXIgUGFyZW50Q2xhc3MgPSBjb3JlX0ZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UuTWl4aW4oQmFzZUNsYXNzKTtcXG5cXG4gICAgICB2YXIgQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudE1peGluID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyZW50Q2xhc3MpIHtcXG4gICAgICAgIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfaW5oZXJpdHMoQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudE1peGluLCBfUGFyZW50Q2xhc3MpO1xcblxcbiAgICAgICAgdmFyIF9zdXBlcjIgPSBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NyZWF0ZVN1cGVyKEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRNaXhpbik7XFxuXFxuICAgICAgICBmdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50TWl4aW4oKSB7XFxuICAgICAgICAgIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudE1peGluKTtcXG5cXG4gICAgICAgICAgcmV0dXJuIF9zdXBlcjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudE1peGluLCBbe1xcbiAgICAgICAgICBrZXk6IFwiX29uTGF5ZXJBZGRlZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uTGF5ZXJBZGRlZChfcmVmNykge1xcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjcubmFtZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uTGF5ZXJSZW1vdmVkXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25MYXllclJlbW92ZWQoX3JlZjgpIHtcXG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWY4Lm5hbWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcIl9vbkxheWVyUmVuYW1lZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uTGF5ZXJSZW5hbWVkKF9yZWY5KSB7XFxuICAgICAgICAgICAgdmFyIG9sZE5hbWUgPSBfcmVmOS5vbGROYW1lLFxcbiAgICAgICAgICAgICAgICBuZXdOYW1lID0gX3JlZjkubmV3TmFtZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uQW5pbWF0aW9uQWRkZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkFuaW1hdGlvbkFkZGVkKF9yZWYxMCkge1xcbiAgICAgICAgICAgIHZhciBsYXllck5hbWUgPSBfcmVmMTAubGF5ZXJOYW1lLFxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gX3JlZjEwLmFuaW1hdGlvbk5hbWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcIl9vbkFuaW1hdGlvblJlbW92ZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkFuaW1hdGlvblJlbW92ZWQoX3JlZjExKSB7XFxuICAgICAgICAgICAgdmFyIGxheWVyTmFtZSA9IF9yZWYxMS5sYXllck5hbWUsXFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBfcmVmMTEuYW5pbWF0aW9uTmFtZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uQW5pbWF0aW9uUmVuYW1lZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQW5pbWF0aW9uUmVuYW1lZChfcmVmMTIpIHtcXG4gICAgICAgICAgICB2YXIgbGF5ZXJOYW1lID0gX3JlZjEyLmxheWVyTmFtZSxcXG4gICAgICAgICAgICAgICAgb2xkTmFtZSA9IF9yZWYxMi5vbGROYW1lLFxcbiAgICAgICAgICAgICAgICBuZXdOYW1lID0gX3JlZjEyLm5ld05hbWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1dKTtcXG5cXG4gICAgICAgIHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50TWl4aW47XFxuICAgICAgfShQYXJlbnRDbGFzcyk7XFxuXFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudE1peGluLCB7XFxuICAgICAgICBFVkVOVF9ERVBFTkRFTkNJRVM6IHtcXG4gICAgICAgICAgdmFsdWU6IEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb2JqZWN0U3ByZWFkKEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb2JqZWN0U3ByZWFkKHt9LCBQYXJlbnRDbGFzcy5FVkVOVF9ERVBFTkRFTkNJRVMpLCBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLkVWRU5UX0RFUEVOREVOQ0lFUyksXFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50TWl4aW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlO1xcbn0oY29yZV9GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLCB7XFxuICBFVkVOVF9ERVBFTkRFTkNJRVM6IHtcXG4gICAgdmFsdWU6IHtcXG4gICAgICBBbmltYXRpb25GZWF0dXJlOiB7XFxuICAgICAgICBhZGRMYXllcjogXFwnX29uTGF5ZXJBZGRlZFxcJyxcXG4gICAgICAgIHJlbW92ZUxheWVyOiBcXCdfb25MYXllclJlbW92ZWRcXCcsXFxuICAgICAgICByZW5hbWVMYXllcjogXFwnX29uTGF5ZXJSZW5hbWVkXFwnLFxcbiAgICAgICAgYWRkQW5pbWF0aW9uOiBcXCdfb25BbmltYXRpb25BZGRlZFxcJyxcXG4gICAgICAgIHJlbW92ZUFuaW1hdGlvbjogXFwnX29uQW5pbWF0aW9uUmVtb3ZlZFxcJyxcXG4gICAgICAgIHJlbmFtZUFuaW1hdGlvbjogXFwnX29uQW5pbWF0aW9uUmVuYW1lZFxcJ1xcbiAgICAgIH1cXG4gICAgfSxcXG4gICAgd3JpdGFibGU6IGZhbHNlXFxuICB9XFxufSk7XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhbmltcGFja19BbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlID0gKEFuaW1hdGlvbkZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2FuaW1wYWNrL01hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZS5qc1xcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2Vfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX293bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2Vfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YobywgcCkgeyBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvKSB7IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xcblxcbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZmFjdG9yeSBpbnRlcmZhY2UgZm9yIHRoYXQga2VlcHMgdHJhY2sgb2YgbGF5ZXJzIGFuZCBhbmltYXRpb25zIG9uIGEgaG9zdC5cXHJcXG4gKiBUcmFja2VkIGFzc2V0cyBhcmUgbWFya2VkIGFzIGluYWN0aXZlIHVudGlsIGxheWVycyBhbmQgYW5pbWF0aW9ucyB3aXRoIG1hdGNoaW5nXFxyXFxuICogbmFtZXMgYXJlIGRldGVjdGVkIGFzIHByZXNlbnQgb24gdGhlIGhvc3QuXFxyXFxuICpcXHJcXG4gKiBAaW50ZXJmYWNlXFxyXFxuICogQGV4dGVuZHMgQW5pbWF0aW9uRmVhdHVyZURlcGVuZGVudEludGVyZmFjZVxcclxcbiAqXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IERFRkFVTFRfTEFZRVJfT1BUSU9OUyAtIERlZmF1bHQgb3B0aW9ucyB0byB1c2Ugd2hlbiBleGVjdXRpbmdcXHJcXG4gKiB7QGxpbmsgQW5pbWF0aW9uTGF5ZXJ9IG1ldGhvZHMuXFxyXFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtERUZBVUxUX0xBWUVSX09QVElPTlMuYmxlbmRUaW1lPTAuNV0gLSBEZWZhdWx0IHRpbWUgaW4gc2Vjb25kc1xcclxcbiAqIHRvIHVzZSB3aGVuIGV4ZWN1dGluZyB7QGxpbmsgQW5pbWF0aW9uTGF5ZXIuc2V0QmxlbmRXZWlnaHR9LlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbREVGQVVMVF9MQVlFUl9PUFRJT05TLmFuaW1hdGlvbnM9e31dIC0gTWFwcyBhbmltYXRpb24gbmFtZXNcXHJcXG4gKiB0byBkZWZhdWx0IG9wdGlvbnMgb2JqZWN0cyB0byB1c2UgZm9yIG1hbmFnZWQgYW5pbWF0aW9ucy5cXHJcXG4gKi9cXG5cXG52YXIgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uRmVhdHVyZURlcGUpIHtcXG4gIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9pbmhlcml0cyhNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UsIF9BbmltYXRpb25GZWF0dXJlRGVwZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2NyZWF0ZVN1cGVyKE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZSk7XFxuXFxuICBmdW5jdGlvbiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UoKSB7XFxuICAgIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UpO1xcblxcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICB9XFxuXFxuICBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlLCBbe1xcbiAgICBrZXk6IFwicmVnaXN0ZXJMYXllclwiLFxcbiAgICB2YWx1ZTpcXG4gICAgLyoqXFxyXFxuICAgICAqIFN0YXJ0IHRyYWNraW5nIGtlZXBpbmcgdHJhY2sgb2Ygd2hldGhlciBhIGxheWVyIHdpdGggdGhlIGdpdmVuIG5hbWUgaXMgcHJlc2VudFxcclxcbiAgICAgKiBvbiB0aGUgaG9zdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0byBrZWVwIHRyYWNrIG9mLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgbGF5ZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0aW9ucy5ibGVuZFRpbWUgLSBEZWZhdWx0IGFtb3VudCBvZiB0aW1lIHRvIHVzZSB3aGVuXFxyXFxuICAgICAqIG1hbmlwdWxhdGluZyBsYXllciB3ZWlnaHRzIG9uIHRoaXMgbGF5ZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvcHRpb25zLmVhc2luZ0ZuIC0gRGVmYXVsdCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIHdoZW5cXHJcXG4gICAgICogbWFuaXB1bGF0aW5nIGxheWVyIHdlaWdodHMgb24gdGhpcyBsYXllci5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zLmFuaW1hdGlvbnMgLSBBbmltYXRpb25zIHRvIGtlZXAgdHJhY2sgb2Ygb24gdGhlIGxheWVyLlxcclxcbiAgICAgKiBBbmltYXRpb25zIGFyZSByZXByZXNlbnRlZCBhcyBrZXkvdmFsdWUgcGFpcnMgb2YgYW5pbWF0aW9uIG5hbWVzIGFuZCB0aGVpclxcclxcbiAgICAgKiBvcHRpb25zLlxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJMYXllcihuYW1lKSB7XFxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdGFydCB0cmFja2luZyBrZWVwaW5nIHRyYWNrIG9mIHdoZXRoZXIgYW4gYW5pbWF0aW9uIHdpdGggdGhlIGdpdmVuIG5hbWUgaXNcXHJcXG4gICAgICogcHJlc2VudCBvbiB0aGUgaG9zdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRoYXQgd2lsbCBvd24gdGhlIGFuaW1hdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gdG8ga2VlcCB0cmFjayBvZi5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGFuaW1hdGlvbi5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZWdpc3RlckFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXQgbGF5ZXIgd2VpZ2h0cyBvbiB0cmFja2VkIGxheWVycy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG5hbWVGaWx0ZXIgLSBQcmVkaWNhdGUgZnVuY3Rpb24gdG8gdGVzdCBlYWNoIHRyYWNrZWQgbGF5ZXJcXHJcXG4gICAgICogd2l0aC4gQnkgZGVmYXVsdCBhbGwgbGF5ZXJzIHdpbGwgcGFzcy5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdlaWdodCAtIFdlaWdodCB2YWx1ZSB0byBzZXQgb24gbGF5ZXJzLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHNlY29uZHMgLSBOdW1iZXIgb2Ygc2Vjb25kcyBpdCB3aWxsIHRha2UgdG8gcmVhY2ggdGhlIHdlaWdodFxcclxcbiAgICAgKiBvbiBlYWNoIGxheWVyLiBJZiB1bmRlZmluZWQsIGVhY2ggbGF5ZXJzXFwnIGJsZW5kVGltZSBvcHRpb24gaXMgdXNlZC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gRWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIHNldHRpbmcgd2VpZ2h0XFxyXFxuICAgICAqIG9uIGVhY2ggbGF5ZXIuIElmIHVuZGVmaW5lZCwgZWFjaCBsYXllcnNcXCcgZWFzaW5nRm4gb3B0aW9uIGlzIHVzZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0TGF5ZXJXZWlnaHRzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMYXllcldlaWdodHMoKSB7XFxuICAgICAgdmFyIG5hbWVGaWx0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgIH07XFxuICAgICAgdmFyIHdlaWdodCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xcbiAgICAgIHZhciBzZWNvbmRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFNldCBhbGwgdHJhY2tlZCBsYXllcnNcXCcgd2VpZ2h0cyB0byAxLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHNlY29uZHMgLSBOdW1iZXIgb2Ygc2Vjb25kcyBpdCB3aWxsIHRha2UgdG8gcmVhY2ggdGhlIHdlaWdodFxcclxcbiAgICAgKiBvbiBlYWNoIGxheWVyLiBJZiB1bmRlZmluZWQsIGVhY2ggbGF5ZXJzXFwnIGJsZW5kVGltZSBvcHRpb24gaXMgdXNlZC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gRWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIHNldHRpbmcgd2VpZ2h0XFxyXFxuICAgICAqIG9uIGVhY2ggbGF5ZXIuIElmIHVuZGVmaW5lZCwgZWFjaCBsYXllcnNcXCcgZWFzaW5nRm4gb3B0aW9uIGlzIHVzZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZW5hYmxlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGUoc2Vjb25kcywgZWFzaW5nRm4pIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXQgYWxsIHRyYWNrZWQgbGF5ZXJzXFwnIHdlaWdodHMgdG8gMC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzZWNvbmRzIC0gTnVtYmVyIG9mIHNlY29uZHMgaXQgd2lsbCB0YWtlIHRvIHJlYWNoIHRoZSB3ZWlnaHRcXHJcXG4gICAgICogb24gZWFjaCBsYXllci4gSWYgdW5kZWZpbmVkLCBlYWNoIGxheWVyc1xcJyBibGVuZFRpbWUgb3B0aW9uIGlzIHVzZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hlbiBzZXR0aW5nIHdlaWdodFxcclxcbiAgICAgKiBvbiBlYWNoIGxheWVyLiBJZiB1bmRlZmluZWQsIGVhY2ggbGF5ZXJzXFwnIGVhc2luZ0ZuIG9wdGlvbiBpcyB1c2VkLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImRpc2FibGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGUoc2Vjb25kcywgZWFzaW5nRm4pIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDcmVhdGVzIGEgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIHtAbGluayBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2V9XFxyXFxuICAgICAqIGFuZCBleHRlbmRzIGEgc3BlY2lmaWVkIGJhc2UgY2xhc3MuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7Q2xhc3N9IEJhc2VDbGFzcyAtIFRoZSBjbGFzcyB0byBleHRlbmQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm4ge0NsYXNzfSBBIGNsYXNzIHRoYXQgZXh0ZW5kcyBgQmFzZUNsYXNzYCBhbmQgaW1wbGVtZW50cyB7QGxpbmsgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlfS5cXHJcXG4gICAgICovXFxuXFxuICB9XSwgW3tcXG4gICAga2V5OiBcIk1peGluXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBNaXhpbihCYXNlQ2xhc3MpIHtcXG4gICAgICB2YXIgUGFyZW50Q2xhc3MgPSBhbmltcGFja19BbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLk1peGluKEJhc2VDbGFzcyk7XFxuXFxuICAgICAgdmFyIE1hbmFnZWRBbmltYXRpb25MYXllck1peGluID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyZW50Q2xhc3MpIHtcXG4gICAgICAgIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9pbmhlcml0cyhNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJNaXhpbiwgX1BhcmVudENsYXNzKTtcXG5cXG4gICAgICAgIHZhciBfc3VwZXIyID0gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2NyZWF0ZVN1cGVyKE1hbmFnZWRBbmltYXRpb25MYXllck1peGluKTtcXG5cXG4gICAgICAgIGZ1bmN0aW9uIE1hbmFnZWRBbmltYXRpb25MYXllck1peGluKCkge1xcbiAgICAgICAgICB2YXIgX3RoaXM7XFxuXFxuICAgICAgICAgIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJNaXhpbik7XFxuXFxuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgX3RoaXMgPSBfc3VwZXIyLmNhbGwuYXBwbHkoX3N1cGVyMiwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XFxuICAgICAgICAgIF90aGlzLl9tYW5hZ2VkTGF5ZXJzID0ge307XFxuICAgICAgICAgIHJldHVybiBfdGhpcztcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9jcmVhdGVDbGFzcyhNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJNaXhpbiwgW3tcXG4gICAgICAgICAga2V5OiBcIl9vbkZlYXR1cmVBZGRlZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uRmVhdHVyZUFkZGVkKHR5cGVOYW1lKSB7XFxuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgICAgICAgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldChNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YoTWFuYWdlZEFuaW1hdGlvbkxheWVyTWl4aW4ucHJvdG90eXBlKSwgXCJfb25GZWF0dXJlQWRkZWRcIiwgdGhpcykuY2FsbCh0aGlzLCB0eXBlTmFtZSk7XFxuXFxuICAgICAgICAgICAgaWYgKHR5cGVOYW1lICE9PSBcXCdBbmltYXRpb25GZWF0dXJlXFwnKSB7XFxuICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWRMYXllcnMgPSB0aGlzLl9tYW5hZ2VkTGF5ZXJzIHx8IHt9OyAvLyBEZXRlY3QgbmV3IGxheWVyc1xcblxcbiAgICAgICAgICAgIHRoaXMuX2hvc3QuQW5pbWF0aW9uRmVhdHVyZS5sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xcbiAgICAgICAgICAgICAgX3RoaXMyLl9vbkxheWVyQWRkZWQoe1xcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uRmVhdHVyZVJlbW92ZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkZlYXR1cmVSZW1vdmVkKHR5cGVOYW1lKSB7XFxuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgICAgICAgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldChNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YoTWFuYWdlZEFuaW1hdGlvbkxheWVyTWl4aW4ucHJvdG90eXBlKSwgXCJfb25GZWF0dXJlUmVtb3ZlZFwiLCB0aGlzKS5jYWxsKHRoaXMsIHR5cGVOYW1lKTtcXG5cXG4gICAgICAgICAgICBpZiAodHlwZU5hbWUgIT09IFxcJ0FuaW1hdGlvbkZlYXR1cmVcXCcpIHtcXG4gICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdGhpcy5fbWFuYWdlZExheWVycyA9IHRoaXMuX21hbmFnZWRMYXllcnMgfHwge307IC8vIERlYWN0aXZhdGUgdGhlIGxheWVyc1xcblxcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX21hbmFnZWRMYXllcnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcXG4gICAgICAgICAgICAgIF90aGlzMy5fb25MYXllclJlbW92ZWQoe1xcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXFxuICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uTGF5ZXJBZGRlZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uTGF5ZXJBZGRlZChfcmVmKSB7XFxuICAgICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XFxuXFxuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XFxuXFxuICAgICAgICAgICAgLy8gTWFyayB0aGUgbGF5ZXIgYXMgYWN0aXZlIGlmIGl0IGlzIG1hbmFnZWRcXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFuYWdlZExheWVyc1tuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VkTGF5ZXJzW25hbWVdLmlzQWN0aXZlID0gdHJ1ZTsgLy8gRGV0ZWN0IG5ldyBhbmltYXRpb25zXFxuXFxuICAgICAgICAgICAgICB0aGlzLl9ob3N0LkFuaW1hdGlvbkZlYXR1cmUuZ2V0QW5pbWF0aW9ucyhuYW1lKS5mb3JFYWNoKGZ1bmN0aW9uIChhbmltTmFtZSkge1xcbiAgICAgICAgICAgICAgICBfdGhpczQuX29uQW5pbWF0aW9uQWRkZWQoe1xcbiAgICAgICAgICAgICAgICAgIGxheWVyTmFtZTogbmFtZSxcXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lOiBhbmltTmFtZVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uTGF5ZXJSZW1vdmVkXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25MYXllclJlbW92ZWQoX3JlZjIpIHtcXG4gICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcXG5cXG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XFxuXFxuICAgICAgICAgICAgLy8gRGVhY3RpdmF0ZSB0aGUgbGF5ZXIgaWYgaXQgaXMgbWFuYWdlZFxcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYW5hZ2VkTGF5ZXJzW25hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgIHRoaXMuX21hbmFnZWRMYXllcnNbbmFtZV0uaXNBY3RpdmUgPSBmYWxzZTsgLy8gRGVhY3RpdmF0ZSB0aGUgYW5pbWF0aW9uc1xcblxcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fbWFuYWdlZExheWVyc1tuYW1lXS5hbmltYXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChhbmltTmFtZSkge1xcbiAgICAgICAgICAgICAgICBfdGhpczUuX29uQW5pbWF0aW9uUmVtb3ZlZCh7XFxuICAgICAgICAgICAgICAgICAgbGF5ZXJOYW1lOiBuYW1lLFxcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWU6IGFuaW1OYW1lXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJfb25MYXllclJlbmFtZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkxheWVyUmVuYW1lZChfcmVmMykge1xcbiAgICAgICAgICAgIHZhciBvbGROYW1lID0gX3JlZjMub2xkTmFtZSxcXG4gICAgICAgICAgICAgICAgbmV3TmFtZSA9IF9yZWYzLm5ld05hbWU7XFxuICAgICAgICAgICAgdmFyIGxheWVyT3B0aW9ucyA9IHRoaXMuX21hbmFnZWRMYXllcnNbb2xkTmFtZV07IC8vIFJlcGxhY2UgdGhlIGxheWVyIGtleSB3aXRoIHRoZSBuZXcgbmFtZVxcblxcbiAgICAgICAgICAgIGlmIChsYXllck9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX21hbmFnZWRMYXllcnNbb2xkTmFtZV07XFxuICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VkTGF5ZXJzW25ld05hbWVdID0gbGF5ZXJPcHRpb25zO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uQW5pbWF0aW9uQWRkZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkFuaW1hdGlvbkFkZGVkKF9yZWY0KSB7XFxuICAgICAgICAgICAgdmFyIGxheWVyTmFtZSA9IF9yZWY0LmxheWVyTmFtZSxcXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IF9yZWY0LmFuaW1hdGlvbk5hbWU7XFxuXFxuICAgICAgICAgICAgLy8gTWFyayB0aGUgYW5pbWF0aW9uIGFzIGFjdGl2ZSBpZiBpdCBpcyBtYW5hZ2VkXFxuICAgICAgICAgICAgaWYgKHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgIHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdLmlzQWN0aXZlID0gdHJ1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcIl9vbkFuaW1hdGlvblJlbW92ZWRcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkFuaW1hdGlvblJlbW92ZWQoX3JlZjUpIHtcXG4gICAgICAgICAgICB2YXIgbGF5ZXJOYW1lID0gX3JlZjUubGF5ZXJOYW1lLFxcbiAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gX3JlZjUuYW5pbWF0aW9uTmFtZTtcXG5cXG4gICAgICAgICAgICAvLyBEZWFjdGl2YXRlIHRoZSBhbmltYXRpb24gaWYgaXQgaXMgbWFuYWdlZFxcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0uYW5pbWF0aW9uc1thbmltYXRpb25OYW1lXSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0uYW5pbWF0aW9uc1thbmltYXRpb25OYW1lXS5pc0FjdGl2ZSA9IGZhbHNlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uQW5pbWF0aW9uUmVuYW1lZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uQW5pbWF0aW9uUmVuYW1lZChfcmVmNikge1xcbiAgICAgICAgICAgIHZhciBsYXllck5hbWUgPSBfcmVmNi5sYXllck5hbWUsXFxuICAgICAgICAgICAgICAgIG9sZE5hbWUgPSBfcmVmNi5vbGROYW1lLFxcbiAgICAgICAgICAgICAgICBuZXdOYW1lID0gX3JlZjYubmV3TmFtZTtcXG5cXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbb2xkTmFtZV0gIT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgYW5pbWF0aW9uIGtleSB3aXRoIHRoZSBuZXcgbmFtZVxcbiAgICAgICAgICAgICAgdmFyIGFuaW1PcHRpb25zID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbb2xkTmFtZV07XFxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbb2xkTmFtZV07XFxuICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0uYW5pbWF0aW9uc1tuZXdOYW1lXSA9IGFuaW1PcHRpb25zO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwicmVnaXN0ZXJMYXllclwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJMYXllcihuYW1lKSB7XFxuICAgICAgICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XFxuXFxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xcblxcbiAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggZGVmYXVsdCBvcHRpb25zIGZvciBlYWNoIG5ldyBsYXllclxcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYW5hZ2VkTGF5ZXJzW25hbWVdID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgICAgIHRoaXMuX21hbmFnZWRMYXllcnNbbmFtZV0gPSBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2Vfb2JqZWN0U3ByZWFkKE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uc3RydWN0b3IuREVGQVVMVF9MQVlFUl9PUFRJT05TKSwge30sIHtcXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uczoge31cXG4gICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gLy8gVXBkYXRlIGFsbCBvcHRpb25zIGV4Y2VwdCBhbmltYXRpb25zXFxuXFxuXFxuICAgICAgICAgICAgdmFyIGxheWVyT3B0aW9ucyA9IHRoaXMuX21hbmFnZWRMYXllcnNbbmFtZV07XFxuICAgICAgICAgICAgb3B0aW9ucyA9IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpO1xcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25PcHRpb25zID0gb3B0aW9ucy5hbmltYXRpb25zIHx8IHt9O1xcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmFuaW1hdGlvbnM7XFxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihsYXllck9wdGlvbnMsIG9wdGlvbnMpOyAvLyBDaGVjayB3aGV0aGVyIHRoZSBsYXllciBjYW4gYmUgbWFuaXB1bGF0ZWQgbm93XFxuXFxuICAgICAgICAgICAgbGF5ZXJPcHRpb25zLmlzQWN0aXZlID0gdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLmxheWVycy5pbmNsdWRlcyhuYW1lKTsgLy8gUmVnaXN0ZXIgdGhlIGFuaW1hdGlvbnNcXG5cXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhhbmltYXRpb25PcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNykge1xcbiAgICAgICAgICAgICAgdmFyIF9yZWY4ID0gTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX3NsaWNlZFRvQXJyYXkoX3JlZjcsIDIpLFxcbiAgICAgICAgICAgICAgICAgIGFuaW1OYW1lID0gX3JlZjhbMF0sXFxuICAgICAgICAgICAgICAgICAgYW5pbU9wdGlvbnMgPSBfcmVmOFsxXTtcXG5cXG4gICAgICAgICAgICAgIF90aGlzNi5yZWdpc3RlckFuaW1hdGlvbihuYW1lLCBhbmltTmFtZSwgYW5pbU9wdGlvbnMpO1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJyZWdpc3RlckFuaW1hdGlvblwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xcblxcbiAgICAgICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBsYXllciBpZiBpdCBoYXNuXFwndCBiZWVuIHJlZ2lzdGVyZWQgeWV0XFxuICAgICAgICAgICAgaWYgKHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyTGF5ZXIobGF5ZXJOYW1lKTtcXG4gICAgICAgICAgICB9IC8vIFVwZGF0ZSBhbmltYXRpb24gb3B0aW9uc1xcblxcblxcbiAgICAgICAgICAgIHZhciBhbmltT3B0aW9ucyA9IHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdIHx8IHt9O1xcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYW5pbU9wdGlvbnMsIG9wdGlvbnMpO1xcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdID0gYW5pbU9wdGlvbnM7IC8vIENoZWNrIHdoZXRoZXIgdGhlIGFuaW1hdGlvbiBjYW4gYmUgbWFuaXB1bGF0ZWQgbm93XFxuXFxuICAgICAgICAgICAgdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0uaXNBY3RpdmUgPSB0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0uaXNBY3RpdmUgJiYgdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLmdldEFuaW1hdGlvbnMobGF5ZXJOYW1lKS5pbmNsdWRlcyhhbmltYXRpb25OYW1lKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwic2V0TGF5ZXJXZWlnaHRzXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMYXllcldlaWdodHMoKSB7XFxuICAgICAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XFxuXFxuICAgICAgICAgICAgdmFyIG5hbWVGaWx0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgdmFyIHdlaWdodCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xcbiAgICAgICAgICAgIHZhciBzZWNvbmRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XFxuICAgICAgICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XFxuICAgICAgICAgICAgdmFyIGxheWVyTmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLl9tYW5hZ2VkTGF5ZXJzKS5maWx0ZXIobmFtZUZpbHRlcik7XFxuICAgICAgICAgICAgbGF5ZXJOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICAgICAgICB2YXIgbGF5ZXJPcHRpb25zID0gX3RoaXM3Ll9tYW5hZ2VkTGF5ZXJzW25hbWVdO1xcblxcbiAgICAgICAgICAgICAgaWYgKGxheWVyT3B0aW9ucy5pc0FjdGl2ZSkge1xcbiAgICAgICAgICAgICAgICBfdGhpczcuX2hvc3QuQW5pbWF0aW9uRmVhdHVyZS5zZXRMYXllcldlaWdodChuYW1lLCB3ZWlnaHQsIHNlY29uZHMgIT09IHVuZGVmaW5lZCA/IHNlY29uZHMgOiBsYXllck9wdGlvbnMuYmxlbmRUaW1lLCBlYXNpbmdGbiB8fCBsYXllck9wdGlvbnMuZWFzaW5nRm4pO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJlbmFibGVcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZShzZWNvbmRzLCBlYXNpbmdGbikge1xcbiAgICAgICAgICAgIHRoaXMuc2V0TGF5ZXJXZWlnaHRzKHVuZGVmaW5lZCwgMSwgc2Vjb25kcywgZWFzaW5nRm4pO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJkaXNhYmxlXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlKHNlY29uZHMsIGVhc2luZ0ZuKSB7XFxuICAgICAgICAgICAgdGhpcy5zZXRMYXllcldlaWdodHModW5kZWZpbmVkLCAwLCBzZWNvbmRzLCBlYXNpbmdGbik7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcImluc3RhbGxBcGlcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxBcGkoKSB7XFxuICAgICAgICAgICAgdmFyIGFwaSA9IE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZV9nZXQoTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKE1hbmFnZWRBbmltYXRpb25MYXllck1peGluLnByb3RvdHlwZSksIFwiaW5zdGFsbEFwaVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcblxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYXBpLCB7XFxuICAgICAgICAgICAgICByZWdpc3RlckxheWVyOiB0aGlzLnJlZ2lzdGVyTGF5ZXIuYmluZCh0aGlzKSxcXG4gICAgICAgICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uOiB0aGlzLnJlZ2lzdGVyQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuICAgICAgICAgICAgICBzZXRMYXllcldlaWdodHM6IHRoaXMuc2V0TGF5ZXJXZWlnaHRzLmJpbmQodGhpcyksXFxuICAgICAgICAgICAgICBlbmFibGU6IHRoaXMuZW5hYmxlLmJpbmQodGhpcyksXFxuICAgICAgICAgICAgICBkaXNhYmxlOiB0aGlzLmRpc2FibGUuYmluZCh0aGlzKVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJldHVybiBhcGk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1dKTtcXG5cXG4gICAgICAgIHJldHVybiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJNaXhpbjtcXG4gICAgICB9KFBhcmVudENsYXNzKTtcXG5cXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJNaXhpbiwge1xcbiAgICAgICAgREVGQVVMVF9MQVlFUl9PUFRJT05TOiB7XFxuICAgICAgICAgIHZhbHVlOiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UuREVGQVVMVF9MQVlFUl9PUFRJT05TLFxcbiAgICAgICAgICB3cml0YWJsZTogZmFsc2VcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gTWFuYWdlZEFuaW1hdGlvbkxheWVyTWl4aW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2U7XFxufShhbmltcGFja19BbmltYXRpb25GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UsIHtcXG4gIERFRkFVTFRfTEFZRVJfT1BUSU9OUzoge1xcbiAgICB2YWx1ZToge1xcbiAgICAgIGJsZW5kVGltZTogMC41LFxcbiAgICAgIGFuaW1hdGlvbnM6IHt9XFxuICAgIH0sXFxuICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgfVxcbn0pO1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgYW5pbXBhY2tfTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlID0gKE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYXdzcGFjay9UZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLmpzXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9vd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvKSB7IFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZmFjdG9yeSBpbnRlcmZhY2UgZm9yIGZlYXR1cmVzIHRoYXQgYXJlIGRlcGVuZGVudCBvbiB0aGUgVGV4dFRvU3BlZWNoRmVhdHVyZVxcclxcbiAqIGJlaW5nIHByZXNlbnQgb24gdGhlIGhvc3QuIFNwZWVjaCBldmVudHMgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIGxpc3RlbmVkIGZvciBvbmNlIGFcXHJcXG4gKiBUZXh0VG9TcGVlY2hGZWF0dXJlIGlzIGFkZGVkIHRvIHRoZSBob3N0IGFuZCBzdG9wcGVkIG9uY2UgaXQgaXMgcmVtb3ZlZC5cXHJcXG4gKlxcclxcbiAqIEBpbnRlcmZhY2VcXHJcXG4gKiBAZXh0ZW5kcyBGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlXFxyXFxuICpcXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gRVZFTlRfREVQRU5ERU5DSUVTIC0gRXZlbnRzIHRoYXQgdGhlIGZlYXR1cmUgc2hvdWxkIHN0YXJ0L3N0b3BcXHJcXG4gKiBsaXN0ZW5pbmcgZm9yIHdoZW4gYSBmZWF0dXJlIG9mIHR5cGUgRmVhdHVyZU5hbWUgaXMgYWRkZWQvcmVtb3ZlZCBmcm9tIHRoZSBob3N0LlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBFVkVOVF9ERVBFTkRFTkNJRVMuVGV4dFRvU3BlZWNoRmVhdHVyZSAtIEV2ZW50cyB0aGF0IGFyZVxcclxcbiAqIHNwZWNpZmljIHRvIHRoZSBUZXh0VG9TcGVlY2hGZWF0dXJlLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRfREVQRU5ERU5DSUVTLlRleHRUb1NwZWVjaEZlYXR1cmUucGxheT1cXCdfb25QbGF5XFwnXSAtXFxyXFxuICogVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiBUZXh0VG9TcGVlY2hGZWF0dXJlIHBsYXlcXHJcXG4gKiBldmVudHMgYXJlIGVtaXR0ZWQuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVF9ERVBFTkRFTkNJRVMuVGV4dFRvU3BlZWNoRmVhdHVyZS5wYXVzZT1cXCdfb25QYXVzZVxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gVGV4dFRvU3BlZWNoRmVhdHVyZSBwYXVzZVxcclxcbiAqIGV2ZW50cyBhcmUgZW1pdHRlZC5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UX0RFUEVOREVOQ0lFUy5UZXh0VG9TcGVlY2hGZWF0dXJlLnJlc3VtZT1cXCdfb25SZXN1bWVcXCddIC1cXHJcXG4gKiBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIFRleHRUb1NwZWVjaEZlYXR1cmUgcmVzdW1lXFxyXFxuICogZXZlbnRzIGFyZSBlbWl0dGVkLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRfREVQRU5ERU5DSUVTLlRleHRUb1NwZWVjaEZlYXR1cmUuc3RvcD1cXCdfb25TdG9wXFwnXSAtXFxyXFxuICogVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiBUZXh0VG9TcGVlY2hGZWF0dXJlIHN0b3BcXHJcXG4gKiBldmVudHMgYXJlIGVtaXR0ZWQuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVF9ERVBFTkRFTkNJRVMuVGV4dFRvU3BlZWNoRmVhdHVyZS5zZW50ZW5jZT1cXCdfb25TZW50ZW5jZVxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gVGV4dFRvU3BlZWNoRmVhdHVyZSBzZW50ZW5jZVxcclxcbiAqIGV2ZW50cyBhcmUgZW1pdHRlZC5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UX0RFUEVOREVOQ0lFUy5UZXh0VG9TcGVlY2hGZWF0dXJlLndvcmQ9XFwnX29uV29yZFxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gVGV4dFRvU3BlZWNoRmVhdHVyZSB3b3JkXFxyXFxuICogZXZlbnRzIGFyZSBlbWl0dGVkLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRfREVQRU5ERU5DSUVTLlRleHRUb1NwZWVjaEZlYXR1cmUudmlzZW1lPVxcJ19vblZpc2VtZVxcJ10gLVxcclxcbiAqIFRoZSBuYW1lIG9mIHRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gVGV4dFRvU3BlZWNoRmVhdHVyZSB2aXNlbWVcXHJcXG4gKiBldmVudHMgYXJlIGVtaXR0ZWQuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVF9ERVBFTkRFTkNJRVMuVGV4dFRvU3BlZWNoRmVhdHVyZS5zc21sPVxcJ19vblNzbWxcXCddIC1cXHJcXG4gKiBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIFRleHRUb1NwZWVjaEZlYXR1cmUgc3NtbFxcclxcbiAqIGV2ZW50cyBhcmUgZW1pdHRlZC5cXHJcXG4gKi9cXG5cXG52YXIgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0ZlYXR1cmVEZXBlbmRlbnRJbnRlKSB7XFxuICBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2luaGVyaXRzKFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UsIF9GZWF0dXJlRGVwZW5kZW50SW50ZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZV9jcmVhdGVTdXBlcihUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlKTtcXG5cXG4gIGZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UoKSB7XFxuICAgIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSk7XFxuXFxuICAgIHJldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gIH1cXG5cXG4gIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSwgW3tcXG4gICAga2V5OiBcIl9vblBsYXlcIixcXG4gICAgdmFsdWU6XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHNwZWVjaCBwbGF5IGV2ZW50cyBhcmUgY2F1Z2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gX29uUGxheSgpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHNwZWVjaCBwYXVzZSBldmVudHMgYXJlIGNhdWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb25QYXVzZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUGF1c2UoKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogRXhlY3V0ZWQgd2hlbiBzcGVlY2ggcmVzdW1lIGV2ZW50cyBhcmUgY2F1Z2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vblJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVzdW1lKCkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIEV4ZWN1dGVkIHdoZW4gc3BlZWNoIHN0b3AgZXZlbnRzIGFyZSBjYXVnaHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uU3RvcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uU3RvcCgpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHNwZWVjaCBzZW50ZW5jZSBldmVudHMgYXJlIGNhdWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb25TZW50ZW5jZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uU2VudGVuY2UoKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogRXhlY3V0ZWQgd2hlbiBzcGVlY2ggd29yZCBldmVudHMgYXJlIGNhdWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb25Xb3JkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Xb3JkKCkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIEV4ZWN1dGVkIHdoZW4gc3BlZWNoIHZpc2VtZSBldmVudHMgYXJlIGNhdWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb25WaXNlbWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblZpc2VtZSgpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBFeGVjdXRlZCB3aGVuIHNwZWVjaCBzc21sIGV2ZW50cyBhcmUgY2F1Z2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vblNzbWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblNzbWwoKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogQ3JlYXRlcyBhIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB7QGxpbmsgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZX1cXHJcXG4gICAgICogYW5kIGV4dGVuZHMgYSBzcGVjaWZpZWQgYmFzZSBjbGFzcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtDbGFzc30gQmFzZUNsYXNzIC0gVGhlIGNsYXNzIHRvIGV4dGVuZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybiB7Q2xhc3N9IEEgY2xhc3MgdGhhdCBleHRlbmRzIGBCYXNlQ2xhc3NgIGFuZCBpbXBsZW1lbnRzIHtAbGluayBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlfS5cXHJcXG4gICAgICovXFxuXFxuICB9XSwgW3tcXG4gICAga2V5OiBcIk1peGluXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBNaXhpbihCYXNlQ2xhc3MpIHtcXG4gICAgICB2YXIgUGFyZW50Q2xhc3MgPSBjb3JlX0ZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UuTWl4aW4oQmFzZUNsYXNzKTtcXG5cXG4gICAgICB2YXIgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudE1peGluID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUGFyZW50Q2xhc3MpIHtcXG4gICAgICAgIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfaW5oZXJpdHMoVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudE1peGluLCBfUGFyZW50Q2xhc3MpO1xcblxcbiAgICAgICAgdmFyIF9zdXBlcjIgPSBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlX2NyZWF0ZVN1cGVyKFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRNaXhpbik7XFxuXFxuICAgICAgICBmdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50TWl4aW4oKSB7XFxuICAgICAgICAgIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudE1peGluKTtcXG5cXG4gICAgICAgICAgcmV0dXJuIF9zdXBlcjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudE1peGluLCBbe1xcbiAgICAgICAgICBrZXk6IFwiX29uUGxheVwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uUGxheSgpIHt9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJfb25QYXVzZVwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uUGF1c2UoKSB7fVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uUmVzdW1lXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZXN1bWUoKSB7fVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uU3RvcFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uU3RvcCgpIHt9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJfb25TZW50ZW5jZVwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uU2VudGVuY2UoKSB7fVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX29uV29yZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uV29yZCgpIHt9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJfb25WaXNlbWVcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblZpc2VtZSgpIHt9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJfb25Tc21sXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Tc21sKCkge31cXG4gICAgICAgIH1dKTtcXG5cXG4gICAgICAgIHJldHVybiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50TWl4aW47XFxuICAgICAgfShQYXJlbnRDbGFzcyk7XFxuXFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudE1peGluLCB7XFxuICAgICAgICBFVkVOVF9ERVBFTkRFTkNJRVM6IHtcXG4gICAgICAgICAgdmFsdWU6IFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb2JqZWN0U3ByZWFkKFRleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2Vfb2JqZWN0U3ByZWFkKHt9LCBQYXJlbnRDbGFzcy5FVkVOVF9ERVBFTkRFTkNJRVMpLCBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLkVWRU5UX0RFUEVOREVOQ0lFUyksXFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50TWl4aW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlO1xcbn0oY29yZV9GZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhUZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLCB7XFxuICBFVkVOVF9ERVBFTkRFTkNJRVM6IHtcXG4gICAgdmFsdWU6IHtcXG4gICAgICBUZXh0VG9TcGVlY2hGZWF0dXJlOiB7XFxuICAgICAgICBwbGF5OiBcXCdfb25QbGF5XFwnLFxcbiAgICAgICAgcGF1c2U6IFxcJ19vblBhdXNlXFwnLFxcbiAgICAgICAgcmVzdW1lOiBcXCdfb25SZXN1bWVcXCcsXFxuICAgICAgICBzdG9wOiBcXCdfb25TdG9wXFwnLFxcbiAgICAgICAgc2VudGVuY2U6IFxcJ19vblNlbnRlbmNlXFwnLFxcbiAgICAgICAgd29yZDogXFwnX29uV29yZFxcJyxcXG4gICAgICAgIHZpc2VtZTogXFwnX29uVmlzZW1lXFwnLFxcbiAgICAgICAgc3NtbDogXFwnX29uU3NtbFxcJ1xcbiAgICAgIH1cXG4gICAgfSxcXG4gICAgd3JpdGFibGU6IGZhbHNlXFxuICB9XFxufSk7XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhd3NwYWNrX1RleHRUb1NwZWVjaEZlYXR1cmVEZXBlbmRlbnRJbnRlcmZhY2UgPSAoVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvTGlwc3luY0ZlYXR1cmUuanNcXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIExpcHN5bmNGZWF0dXJlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIExpcHN5bmNGZWF0dXJlX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IExpcHN5bmNGZWF0dXJlX293bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgTGlwc3luY0ZlYXR1cmVfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBMaXBzeW5jRmVhdHVyZV9vd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfVxcblxcbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfVxcblxcbmZ1bmN0aW9uIExpcHN5bmNGZWF0dXJlX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBMaXBzeW5jRmVhdHVyZV9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IExpcHN5bmNGZWF0dXJlX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgTGlwc3luY0ZlYXR1cmVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBMaXBzeW5jRmVhdHVyZV9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIExpcHN5bmNGZWF0dXJlX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBMaXBzeW5jRmVhdHVyZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gTGlwc3luY0ZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBMaXBzeW5jRmVhdHVyZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgTGlwc3luY0ZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBMaXBzeW5jRmVhdHVyZV9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgTGlwc3luY0ZlYXR1cmVfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IExpcHN5bmNGZWF0dXJlX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIExpcHN5bmNGZWF0dXJlX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IExpcHN5bmNGZWF0dXJlX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBMaXBzeW5jRmVhdHVyZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBMaXBzeW5jRmVhdHVyZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IExpcHN5bmNGZWF0dXJlX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBMaXBzeW5jRmVhdHVyZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIExpcHN5bmNGZWF0dXJlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBMaXBzeW5jRmVhdHVyZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBMaXBzeW5jRmVhdHVyZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gTGlwc3luY0ZlYXR1cmVfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIExpcHN5bmNGZWF0dXJlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIExpcHN5bmNGZWF0dXJlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoTGlwc3luY0ZlYXR1cmVfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIExpcHN5bmNGZWF0dXJlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIExpcHN5bmNGZWF0dXJlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIExpcHN5bmNGZWF0dXJlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gTGlwc3luY0ZlYXR1cmVfZ2V0UHJvdG90eXBlT2YobykgeyBMaXBzeW5jRmVhdHVyZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBMaXBzeW5jRmVhdHVyZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcblxcblxcblxcblxcbi8qKlxcclxcbiAqIERlZmF1bHQgbWFwcGluZyBvZiBQb2xseSB2aXNlbWUgbmFtZXMgdG8gYW5pbWF0aW9uIG9wdGlvbnMgb2JqZWN0cy5cXHJcXG4gKlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbc2lsPXtuYW1lOiBcXCdzaWxcXCd9XVxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbcD17bmFtZTogXFwncFxcJywgb3ZlcnJpZGVXZWlnaHQ6IDAuOX1dXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IFt0PXtuYW1lOiBcXCd0XFwnLCBibGVuZFRpbWU6IDAuMn1dXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IFtTPXtuYW1lOiBcXCdTXFwnfV1cXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gW1Q9e25hbWU6IFxcJ1RcXCd9XVxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbZj17bmFtZTogXFwnZlxcJywgb3ZlcnJpZGVXZWlnaHQ6IDAuNzV9XVxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbaz17bmFtZTogXFwna1xcJ31dXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IFtpPXtuYW1lOiBcXCdpXFwnfV1cXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3I9e25hbWU6IFxcJ3JcXCd9XVxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbcz17bmFtZTogXFwnc1xcJywgYmxlbmRUaW1lOiAwLjI1fV1cXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3U9e25hbWU6IFxcJ3VcXCd9XVxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbQD17bmFtZTogXFwnQFxcJ31dXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IFthPXtuYW1lOiBcXCdhXFwnfV1cXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gW2U9e25hbWU6IFxcJ2VcXCcsIGJsZW5kVGltZTogMC4yfV1cXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gW0U9e25hbWU6IFxcJ0VcXCd9XVxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbbz17bmFtZTogXFwnb1xcJ31dXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IFtPPXtuYW1lOiBcXCdPXFwnfV1cXHJcXG4gKi9cXG5cXG52YXIgRGVmYXVsdFZpc2VtZU1hcCA9IHtcXG4gIHNpbDoge1xcbiAgICBuYW1lOiBcXCdzaWxcXCdcXG4gIH0sXFxuICBwOiB7XFxuICAgIG5hbWU6IFxcJ3BcXCcsXFxuICAgIG92ZXJyaWRlV2VpZ2h0OiAwLjlcXG4gIH0sXFxuICB0OiB7XFxuICAgIG5hbWU6IFxcJ3RcXCcsXFxuICAgIGJsZW5kVGltZTogMC4yXFxuICB9LFxcbiAgUzoge1xcbiAgICBuYW1lOiBcXCdTXFwnXFxuICB9LFxcbiAgVDoge1xcbiAgICBuYW1lOiBcXCdUXFwnXFxuICB9LFxcbiAgZjoge1xcbiAgICBuYW1lOiBcXCdmXFwnLFxcbiAgICBvdmVycmlkZVdlaWdodDogMC43NVxcbiAgfSxcXG4gIGs6IHtcXG4gICAgbmFtZTogXFwna1xcJ1xcbiAgfSxcXG4gIGk6IHtcXG4gICAgbmFtZTogXFwnaVxcJ1xcbiAgfSxcXG4gIHI6IHtcXG4gICAgbmFtZTogXFwnclxcJ1xcbiAgfSxcXG4gIHM6IHtcXG4gICAgbmFtZTogXFwnc1xcJyxcXG4gICAgYmxlbmRUaW1lOiAwLjI1XFxuICB9LFxcbiAgdToge1xcbiAgICBuYW1lOiBcXCd1XFwnXFxuICB9LFxcbiAgXFwnQFxcJzoge1xcbiAgICBuYW1lOiBcXCdAXFwnXFxuICB9LFxcbiAgYToge1xcbiAgICBuYW1lOiBcXCdhXFwnXFxuICB9LFxcbiAgZToge1xcbiAgICBuYW1lOiBcXCdlXFwnLFxcbiAgICBibGVuZFRpbWU6IDAuMlxcbiAgfSxcXG4gIEU6IHtcXG4gICAgbmFtZTogXFwnRVxcJ1xcbiAgfSxcXG4gIG86IHtcXG4gICAgbmFtZTogXFwnb1xcJ1xcbiAgfSxcXG4gIE86IHtcXG4gICAgbmFtZTogXFwnT1xcJ1xcbiAgfVxcbn07XFxuLyoqXFxyXFxuICogTGlwc3luYyBjb250cm9scyB0d28gdHlwZXMgb2YgbW92ZW1lbnQ6IGlkbGUgYW5pbWF0aW9uIHRoYXQgc2hvdWxkIHBsYXkgd2hpbGVcXHJcXG4gKiBzcGVlY2ggaXMgcGxheWluZyBhbmQgdmlzZW1lIGFuaW1hdGlvbnMgY29ycmVzcG9uZGluZyB0byBQb2xseSB2aXNlbWVzIHdob3NlXFxyXFxuICogd2VpZ2h0cyBzaG91bGQgYmUgdHVybmVkIG9uIGFuZCBvZmYgYXMgdGhleSBhcmUgZW5jb3VudGVyZWQgaW4gdGhlIFBvbGx5IFNTTUxcXHJcXG4gKiB0cmFuc2NyaXB0LiBMYXllcnMgb3duZWQgYnkgdGhpcyBmZWF0dXJlIHdpbGwgYmUgZW5hYmxlZCB3aGlsZSBzcGVlY2ggaXMgcGxheWluZ1xcclxcbiAqIGFuZCBkaXNhYmxlZCBvbmNlIGl0IHN0b3BzLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RIb3N0RmVhdHVyZVxcclxcbiAqIEBhbGlhcyBjb3JlL0xpcHN5bmNGZWF0dXJlXFxyXFxuICogQGltcGxlbWVudHMgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZVxcclxcbiAqIEBpbXBsZW1lbnRzIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZVxcclxcbiAqL1xcblxcbnZhciBMaXBzeW5jRmVhdHVyZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0SG9zdEZlYXR1cmUkKSB7XFxuICBMaXBzeW5jRmVhdHVyZV9pbmhlcml0cyhMaXBzeW5jRmVhdHVyZSwgX0Fic3RyYWN0SG9zdEZlYXR1cmUkKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBMaXBzeW5jRmVhdHVyZV9jcmVhdGVTdXBlcihMaXBzeW5jRmVhdHVyZSk7XFxuXFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7Y29yZS9Ib3N0T2JqZWN0fSBob3N0IC0gSG9zdCB0aGF0IG93bnMgdGhlIGZlYXR1cmUuXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdD19IHZpc2VtZU9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgdmlzZW1lIGxheWVycy5cXHJcXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdmlzZW1lT3B0aW9ucy5ibGVuZFRpbWU9MC4xNV0gLSBEZWZhdWx0IGFtb3VudCBvZiB0aW1lIGl0XFxyXFxuICAgKiB3aWxsIHRha2UgdG8gbWFuaXB1bGF0ZSBlYWNoIGZyZWVCbGVuZCB3ZWlnaHQgb24gdGhlIHZpc2VtZSBzdGF0ZXMuXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdH0gW3Zpc2VtZU9wdGlvbnMuZGVjYXlSYXRlPXthbW91bnQ6IC41LCBzZWNvbmRzOiAuNX1dIC0gQW4gb2JqZWN0XFxyXFxuICAgKiBkZXNjcmliaW5nIHRoZSAwLTEgZmFjdG9yIHZpc2VtZSB3ZWlnaHQgd2lsbCBkZWNheSBpZiB0aGUgdmlzZW1lIGR1cmF0aW9uIGlzXFxyXFxuICAgKiBsb25nZXIgdGhhbiB0aGUgYmxlbmRUaW1lIGFuZCB0aGUgbnVtYmVyIG9mIHNlY29uZHMgaXQgd291bGQgdGFrZSB0byBkZWNheVxcclxcbiAgICogYnkgdGhhdCBmYWN0b3IuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3Zpc2VtZU9wdGlvbnMuZWFzaW5nRm49UXVhZHJhdGljLkluT3V0XSAtIERlZmF1bHQgZWFzaW5nIGZ1bmN0aW9uXFxyXFxuICAgKiB0byB1c2Ugd2hlbiBtYW5pcHVsYXRpbmcgdmlzZW1lIGZyZWVCbGVuZCB3ZWlnaHRzLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gW3Zpc2VtZU9wdGlvbnMuLmxheWVycz1bXV0gLSBBbiBhcnJheSBvZiBsYXllciBvcHRpb25zXFxyXFxuICAgKiBvYmplY3RzIHRvIHJlZ2lzdGVyIGFzIHZpc2VtZSBsYXllcnMuXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdD19IHRhbGtpbmdPcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIHRhbGtpbmcgbGF5ZXJzLlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0YWxraW5nT3B0aW9ucy5ibGVuZFRpbWU9MC43NV0gLSBEZWZhdWx0IGFtb3VudCBvZiB0aW1lIHRvXFxyXFxuICAgKiBlbmFibGUgYW5kIGRpc2FibGUgdGhlIHRhbGtpbmcgaWRsZSBsYXllcnNcXHJcXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGFsa2luZ09wdGlvbnMuZWFzaW5nRm49UXVhZHJhdGljLkluT3V0XSAtIERlZmF1bHQgZWFzaW5nXFxyXFxuICAgKiBmdW5jdGlvbiB0byB1c2Ugd2hlbiBtYW5pcHVsYXRpbmcgd2VpZ2h0cyBvbiB0aGUgdGFsa2luZyBpZGxlIGxheWVycy5cXHJcXG4gICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IFt0YWxraW5nT3B0aW9ucy5sYXllcnM9W11dIC0gQW4gYXJyYXkgb2YgbGF5ZXIgb3B0aW9uc1xcclxcbiAgICogb2JqZWN0cyB0byByZWdpc3RlciBhcyB0YWxraW5nIGxheWVycy5cXHJcXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdmlzZW1lTGVhZFRpbWU9LjA2N10gLSBUaGUgYW1vdW50IG9mIHRpbWUgdG8gaW5zdHJ1Y3QgdGhlXFxyXFxuICAgKiBUZXh0VG9TcGVlY2hGZWF0dXJlIHRvIGVtaXQgc3BlZWNobWFya3MgYmVmb3JlIGVhY2ggb25lXFwncyBhY3R1YWwgdGltZXN0YW1wXFxyXFxuICAgKiBpcyByZWFjaGVkLiBUaGlzIHdpbGwgc2V0IHRoZSBcXCdzcGVlY2hNYXJrT2Zmc2V0XFwnIHZhcmlhYmxlIG9uIHRoZSBUZXh0VG9TcGVlY2hGZWF0dXJlLlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBMaXBzeW5jRmVhdHVyZShob3N0KSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxcbiAgICAgICAgX3JlZiRibGVuZFRpbWUgPSBfcmVmLmJsZW5kVGltZSxcXG4gICAgICAgIHZpc2VtZUJsZW5kVGltZSA9IF9yZWYkYmxlbmRUaW1lID09PSB2b2lkIDAgPyAwLjE1IDogX3JlZiRibGVuZFRpbWUsXFxuICAgICAgICBfcmVmJGRlY2F5UmF0ZSA9IF9yZWYuZGVjYXlSYXRlO1xcblxcbiAgICBfcmVmJGRlY2F5UmF0ZSA9IF9yZWYkZGVjYXlSYXRlID09PSB2b2lkIDAgPyB7fSA6IF9yZWYkZGVjYXlSYXRlO1xcbiAgICB2YXIgX3JlZiRkZWNheVJhdGUkYW1vdW50ID0gX3JlZiRkZWNheVJhdGUuYW1vdW50LFxcbiAgICAgICAgYW1vdW50ID0gX3JlZiRkZWNheVJhdGUkYW1vdW50ID09PSB2b2lkIDAgPyAwLjUgOiBfcmVmJGRlY2F5UmF0ZSRhbW91bnQsXFxuICAgICAgICBfcmVmJGRlY2F5UmF0ZSRzZWNvbmQgPSBfcmVmJGRlY2F5UmF0ZS5zZWNvbmRzLFxcbiAgICAgICAgc2Vjb25kcyA9IF9yZWYkZGVjYXlSYXRlJHNlY29uZCA9PT0gdm9pZCAwID8gMC41IDogX3JlZiRkZWNheVJhdGUkc2Vjb25kLFxcbiAgICAgICAgX3JlZiRlYXNpbmdGbiA9IF9yZWYuZWFzaW5nRm4sXFxuICAgICAgICB2aXNlbWVFYXNpbmdGbiA9IF9yZWYkZWFzaW5nRm4gPT09IHZvaWQgMCA/IFF1YWRyYXRpYy5Jbk91dCA6IF9yZWYkZWFzaW5nRm4sXFxuICAgICAgICBfcmVmJGxheWVycyA9IF9yZWYubGF5ZXJzLFxcbiAgICAgICAgdmlzZW1lTGF5ZXJzID0gX3JlZiRsYXllcnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRsYXllcnM7XFxuXFxuICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXFxuICAgICAgICBfcmVmMiRibGVuZFRpbWUgPSBfcmVmMi5ibGVuZFRpbWUsXFxuICAgICAgICB0YWxraW5nQmxlbmRUaW1lID0gX3JlZjIkYmxlbmRUaW1lID09PSB2b2lkIDAgPyAwLjc1IDogX3JlZjIkYmxlbmRUaW1lLFxcbiAgICAgICAgX3JlZjIkZWFzaW5nRm4gPSBfcmVmMi5lYXNpbmdGbixcXG4gICAgICAgIHRhbGtpbmdFYXNpbmdGbiA9IF9yZWYyJGVhc2luZ0ZuID09PSB2b2lkIDAgPyBRdWFkcmF0aWMuSW5PdXQgOiBfcmVmMiRlYXNpbmdGbixcXG4gICAgICAgIF9yZWYyJGxheWVycyA9IF9yZWYyLmxheWVycyxcXG4gICAgICAgIHRhbGtpbmdMYXllcnMgPSBfcmVmMiRsYXllcnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZjIkbGF5ZXJzO1xcblxcbiAgICB2YXIgdmlzZW1lTGVhZFRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDAuMDY3O1xcblxcbiAgICBMaXBzeW5jRmVhdHVyZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaXBzeW5jRmVhdHVyZSk7XFxuXFxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaG9zdCk7XFxuICAgIF90aGlzLl92aXNlbWVMYXllcnMgPSB7fTtcXG4gICAgX3RoaXMuX3RhbGtpbmdMYXllcnMgPSB7fTtcXG4gICAgX3RoaXMudmlzZW1lTGVhZFRpbWUgPSB2aXNlbWVMZWFkVGltZTsgLy8gUmVnaXN0ZXIgdGhlIHZpc2VtZSBsYXllcnNcXG5cXG4gICAgdmlzZW1lTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XFxuICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxcbiAgICAgICAgICBhbmltYXRpb24gPSBfcmVmMy5hbmltYXRpb24sXFxuICAgICAgICAgIF9yZWYzJHZpc2VtZU1hcCA9IF9yZWYzLnZpc2VtZU1hcCxcXG4gICAgICAgICAgdmlzZW1lTWFwID0gX3JlZjMkdmlzZW1lTWFwID09PSB2b2lkIDAgPyBEZWZhdWx0VmlzZW1lTWFwIDogX3JlZjMkdmlzZW1lTWFwO1xcblxcbiAgICAgIF90aGlzLnJlZ2lzdGVyVmlzZW1lTGF5ZXIobmFtZSwge1xcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXFxuICAgICAgICB2aXNlbWVNYXA6IHZpc2VtZU1hcCxcXG4gICAgICAgIGRlY2F5UmF0ZToge1xcbiAgICAgICAgICBhbW91bnQ6IGFtb3VudCxcXG4gICAgICAgICAgc2Vjb25kczogc2Vjb25kc1xcbiAgICAgICAgfSxcXG4gICAgICAgIGJsZW5kVGltZTogdmlzZW1lQmxlbmRUaW1lLFxcbiAgICAgICAgZWFzaW5nRm46IHZpc2VtZUVhc2luZ0ZuXFxuICAgICAgfSk7XFxuICAgIH0pOyAvLyBSZWdpc3RlciB0aGUgdGFsa2luZyBsYXllcnNcXG5cXG4gICAgdGFsa2luZ0xheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNCkge1xcbiAgICAgIHZhciBuYW1lID0gX3JlZjQubmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3JlZjQuYW5pbWF0aW9uO1xcblxcbiAgICAgIF90aGlzLnJlZ2lzdGVyVGFsa2luZ0xheWVyKG5hbWUsIHtcXG4gICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxcbiAgICAgICAgYmxlbmRUaW1lOiB0YWxraW5nQmxlbmRUaW1lLFxcbiAgICAgICAgZWFzaW5nRm46IHRhbGtpbmdFYXNpbmdGblxcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gICAgcmV0dXJuIF90aGlzO1xcbiAgfVxcbiAgLyoqXFxyXFxuICAgKiBFbnN1cmUgdGhhdCByZWdpc3RlcmVkIHZpc2VtZSBhbmltYXRpb25zIGFyZSBGcmVlQmxlbmRTdGF0ZXMuXFxyXFxuICAgKlxcclxcbiAgICogQHByaXZhdGVcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBjb250YWlucyB0aGUgdmlzZW1lIGFuaW1hdGlvbi5cXHJcXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICovXFxuXFxuXFxuICBMaXBzeW5jRmVhdHVyZV9jcmVhdGVDbGFzcyhMaXBzeW5jRmVhdHVyZSwgW3tcXG4gICAga2V5OiBcIl9yZWdpc3RlclZpc2VtZUFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZ2lzdGVyVmlzZW1lQW5pbWF0aW9uKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSkge1xcbiAgICAgIGlmICh0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0uYW5pbWF0aW9uc1thbmltYXRpb25OYW1lXS5pc0FjdGl2ZSkge1xcbiAgICAgICAgaWYgKHRoaXMuX2hvc3QuQW5pbWF0aW9uRmVhdHVyZS5nZXRBbmltYXRpb25UeXBlKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSkgIT09IFxcJ2ZyZWVCbGVuZFxcJykge1xcbiAgICAgICAgICAvLyBXYXJuIGFuZCBkZWFjdGl2YXRlIGlmIHRoZSByZWdpc3RlcmVkIHN0YXRlIGlzIG5vdCBmcmVlQmxlbmRcXG4gICAgICAgICAgY29uc29sZS53YXJuKFwiQ2Fubm90IHJlZ2lzdGVyIExpcHN5bmMgdmlzZW1lIGFuaW1hdGlvbiBcIi5jb25jYXQoYW5pbWF0aW9uTmFtZSwgXCIgb24gbGF5ZXIgXCIpLmNvbmNhdChsYXllck5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIFZpc2VtZSBhbmltYXRpb25zIG11c3QgYmUgb2YgdHlwZSBcXCdmcmVlQmxlbmRcXCcuXCIpKTtcXG4gICAgICAgICAgdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0uaXNBY3RpdmUgPSBmYWxzZTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBibGVuZFdlaWdodHMgY2FuIGJlIG1hbmlwdWxhdGVkIG5vd1xcbiAgICAgICAgICB2YXIgd2VpZ2h0TmFtZXMgPSB0aGlzLl9ob3N0LkFuaW1hdGlvbkZlYXR1cmUuZ2V0QW5pbWF0aW9uQmxlbmROYW1lcyhsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUpO1xcblxcbiAgICAgICAgICB2YXIgdmlzZW1lTWFwID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0udmlzZW1lTWFwO1xcbiAgICAgICAgICBPYmplY3QudmFsdWVzKHZpc2VtZU1hcCkuZm9yRWFjaChmdW5jdGlvbiAodmlzZW1lT3B0aW9ucykge1xcbiAgICAgICAgICAgIHZpc2VtZU9wdGlvbnMuaXNBY3RpdmUgPSB3ZWlnaHROYW1lcy5pbmNsdWRlcyh2aXNlbWVPcHRpb25zLm5hbWUpO1xcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIElmIHRoZSBhZGRlZCBmZWF0dXJlIGlzIFRleHRUb1NwZWVjaCwgdXBkYXRlIGl0cyBzcGVlY2hNYXJrT2Zmc2V0IHZhcmlhYmxlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZU5hbWUgLSBOYW1lIG9mIHRoZSB0eXBlIG9mIGZlYXR1cmUgdGhhdCB3YXMgYWRkZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uRmVhdHVyZUFkZGVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25GZWF0dXJlQWRkZWQodHlwZU5hbWUpIHtcXG4gICAgICB0aGlzLl92aXNlbWVMYXllcnMgPSB0aGlzLl92aXNlbWVMYXllcnMgfHwge307XFxuICAgICAgdGhpcy5fdGFsa2luZ0xheWVycyA9IHRoaXMuX3RhbGtpbmdMYXllcnMgfHwge307XFxuXFxuICAgICAgTGlwc3luY0ZlYXR1cmVfZ2V0KExpcHN5bmNGZWF0dXJlX2dldFByb3RvdHlwZU9mKExpcHN5bmNGZWF0dXJlLnByb3RvdHlwZSksIFwiX29uRmVhdHVyZUFkZGVkXCIsIHRoaXMpLmNhbGwodGhpcywgdHlwZU5hbWUpO1xcblxcbiAgICAgIGlmICh0eXBlTmFtZSA9PT0gXFwnVGV4dFRvU3BlZWNoRmVhdHVyZVxcJykge1xcbiAgICAgICAgdGhpcy5faG9zdC5UZXh0VG9TcGVlY2hGZWF0dXJlLnNwZWVjaG1hcmtPZmZzZXQgPSAtdGhpcy5fdmlzZW1lTGVhZFRpbWUgfHwgMDtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vbkxheWVyQWRkZWRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkxheWVyQWRkZWQoX3JlZjUpIHtcXG4gICAgICB2YXIgbmFtZSA9IF9yZWY1Lm5hbWU7XFxuXFxuICAgICAgTGlwc3luY0ZlYXR1cmVfZ2V0KExpcHN5bmNGZWF0dXJlX2dldFByb3RvdHlwZU9mKExpcHN5bmNGZWF0dXJlLnByb3RvdHlwZSksIFwiX29uTGF5ZXJBZGRlZFwiLCB0aGlzKS5jYWxsKHRoaXMsIHtcXG4gICAgICAgIG5hbWU6IG5hbWVcXG4gICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHZpc2VtZSBhbmltYXRpb25cXG5cXG5cXG4gICAgICBpZiAodGhpcy5fdmlzZW1lTGF5ZXJzW25hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyVmlzZW1lQW5pbWF0aW9uKG5hbWUsIHRoaXMuX3Zpc2VtZUxheWVyc1tuYW1lXSk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJfb25BbmltYXRpb25BZGRlZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uQW5pbWF0aW9uQWRkZWQoX3JlZjYpIHtcXG4gICAgICB2YXIgbGF5ZXJOYW1lID0gX3JlZjYubGF5ZXJOYW1lLFxcbiAgICAgICAgICBhbmltYXRpb25OYW1lID0gX3JlZjYuYW5pbWF0aW9uTmFtZTtcXG5cXG4gICAgICBMaXBzeW5jRmVhdHVyZV9nZXQoTGlwc3luY0ZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoTGlwc3luY0ZlYXR1cmUucHJvdG90eXBlKSwgXCJfb25BbmltYXRpb25BZGRlZFwiLCB0aGlzKS5jYWxsKHRoaXMsIHtcXG4gICAgICAgIGxheWVyTmFtZTogbGF5ZXJOYW1lXFxuICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSB2aXNlbWUgYW5pbWF0aW9uXFxuXFxuXFxuICAgICAgaWYgKHRoaXMuX3Zpc2VtZUxheWVyc1tsYXllck5hbWVdID09PSBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgICB0aGlzLl9yZWdpc3RlclZpc2VtZUFuaW1hdGlvbihsYXllck5hbWUsIHRoaXMuX3Zpc2VtZUxheWVyc1tsYXllck5hbWVdKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vblBsYXlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblBsYXkoKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgLy8gVHVybiBvbiB0aGUgbGF5ZXIgd2VpZ2h0c1xcbiAgICAgIHRoaXMuZW5hYmxlKCk7IC8vIFNldCB0aGUgY3VycmVudCBhbmltYXRpb25zXFxuXFxuICAgICAgW3RoaXMuX3Zpc2VtZUxheWVycywgdGhpcy5fdGFsa2luZ0xheWVyc10uZm9yRWFjaChmdW5jdGlvbiAobGF5ZXJzKSB7XFxuICAgICAgICBPYmplY3QuZW50cmllcyhsYXllcnMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY3KSB7XFxuICAgICAgICAgIHZhciBfcmVmOCA9IExpcHN5bmNGZWF0dXJlX3NsaWNlZFRvQXJyYXkoX3JlZjcsIDIpLFxcbiAgICAgICAgICAgICAgbGF5ZXJOYW1lID0gX3JlZjhbMF0sXFxuICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gX3JlZjhbMV07XFxuXFxuICAgICAgICAgIGlmIChfdGhpczIuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdLmlzQWN0aXZlKSB7XFxuICAgICAgICAgICAgX3RoaXMyLl9ob3N0LkFuaW1hdGlvbkZlYXR1cmUucmVzdW1lQW5pbWF0aW9uKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJfb25QYXVzZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUGF1c2UoKSB7XFxuICAgICAgdGhpcy5fb25TdG9wKCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vblJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVzdW1lKCkge1xcbiAgICAgIHRoaXMuX29uUGxheSgpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJfb25TdG9wXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TdG9wKCkge1xcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICAgIC8vIFR1cm4gb2ZmIHRoZSBsYXllciB3ZWlnaHRzXFxuICAgICAgdGhpcy5kaXNhYmxlKCk7IC8vIFBhdXNlIHRoZSBjdXJyZW50IGFuaW1hdGlvbnNcXG5cXG4gICAgICBbdGhpcy5fdmlzZW1lTGF5ZXJzLCB0aGlzLl90YWxraW5nTGF5ZXJzXS5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcnMpIHtcXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGxheWVycykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjkpIHtcXG4gICAgICAgICAgdmFyIF9yZWYxMCA9IExpcHN5bmNGZWF0dXJlX3NsaWNlZFRvQXJyYXkoX3JlZjksIDIpLFxcbiAgICAgICAgICAgICAgbGF5ZXJOYW1lID0gX3JlZjEwWzBdLFxcbiAgICAgICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IF9yZWYxMFsxXTtcXG5cXG4gICAgICAgICAgaWYgKF90aGlzMy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0uaXNBY3RpdmUpIHtcXG4gICAgICAgICAgICBfdGhpczMuX2hvc3QuQW5pbWF0aW9uRmVhdHVyZS5wYXVzZUFuaW1hdGlvbihsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogV2hlbiB2aXNlbWUgZXZlbnRzIGFyZSBjYXVnaHQsIHR1cm4gb24gd2VpZ2h0IG9mIHRoZSBuZXcgdmlzZW1lIGZvciB0aGUgZHVyYXRpb25cXHJcXG4gICAgICogb2YgdGhlIHNwZWVjaCBtYXJrLCB0aGVuIHR1cm4gd2VpZ2h0IGJhY2sgb2ZmLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBFdmVudCBkYXRhIHBhc3NlZCBmcm9tIHRoZSBzcGVlY2guXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5tYXJrIC0gU3BlZWNobWFyayBvYmplY3QuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uVmlzZW1lXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyIF9vblZpc2VtZTIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZjExKSB7XFxuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICAgIHZhciBtYXJrO1xcbiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XFxuICAgICAgICAgIHdoaWxlICgxKSB7XFxuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICBtYXJrID0gX3JlZjExLm1hcms7XFxuICAgICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX3Zpc2VtZUxheWVycykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjEyKSB7XFxuICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxMyA9IExpcHN5bmNGZWF0dXJlX3NsaWNlZFRvQXJyYXkoX3JlZjEyLCAyKSxcXG4gICAgICAgICAgICAgICAgICAgICAgbGF5ZXJOYW1lID0gX3JlZjEzWzBdLFxcbiAgICAgICAgICAgICAgICAgICAgICBhbmltTmFtZSA9IF9yZWYxM1sxXTtcXG5cXG4gICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGxheWVyIGNhbiBiZSBtYW5pcHVsYXRlZFxcbiAgICAgICAgICAgICAgICAgIHZhciBfdGhpczQkX21hbmFnZWRMYXllcnMgPSBfdGhpczQuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1OYW1lXSxcXG4gICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgPSBfdGhpczQkX21hbmFnZWRMYXllcnMuaXNBY3RpdmUsXFxuICAgICAgICAgICAgICAgICAgICAgIHZpc2VtZU1hcCA9IF90aGlzNCRfbWFuYWdlZExheWVycy52aXNlbWVNYXA7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgIH0gLy8gVGFrZSB2YXJpYWJsZXMgZnJvbSB0aGUgdmlzZW1lIGlmIHRoZXkgZXhpc3QgYW5kIGRlZmF1bHQgdG8gdGhlIGxheWVyXFxuXFxuXFxuICAgICAgICAgICAgICAgICAgdmFyIF90aGlzNCRfbWFuYWdlZExheWVyczIgPSBMaXBzeW5jRmVhdHVyZV9vYmplY3RTcHJlYWQoTGlwc3luY0ZlYXR1cmVfb2JqZWN0U3ByZWFkKHt9LCBfdGhpczQuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXSksIHZpc2VtZU1hcFttYXJrLnZhbHVlXSksXFxuICAgICAgICAgICAgICAgICAgICAgIHZpc2VtZSA9IF90aGlzNCRfbWFuYWdlZExheWVyczIubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgaXNWaXNlbWVBY3RpdmUgPSBfdGhpczQkX21hbmFnZWRMYXllcnMyLmlzQWN0aXZlLFxcbiAgICAgICAgICAgICAgICAgICAgICBkZWNheVJhdGUgPSBfdGhpczQkX21hbmFnZWRMYXllcnMyLmRlY2F5UmF0ZSxcXG4gICAgICAgICAgICAgICAgICAgICAgYmxlbmRUaW1lID0gX3RoaXM0JF9tYW5hZ2VkTGF5ZXJzMi5ibGVuZFRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgIGVhc2luZ0ZuID0gX3RoaXM0JF9tYW5hZ2VkTGF5ZXJzMi5lYXNpbmdGbixcXG4gICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVXZWlnaHQgPSBfdGhpczQkX21hbmFnZWRMYXllcnMyLm92ZXJyaWRlV2VpZ2h0O1xcblxcbiAgICAgICAgICAgICAgICAgIHZhciB2aXNlbWVOYW1lcyA9IF90aGlzNC5faG9zdC5BbmltYXRpb25GZWF0dXJlLmdldEFuaW1hdGlvbkJsZW5kTmFtZXMobGF5ZXJOYW1lLCBhbmltTmFtZSk7IC8vIE1ha2Ugc3VyZSB0aGUgbmV3IHZpc2VtZSBoYXMgYW4gYWN0aXZlIGZyZWVCbGVuZCB3ZWlnaHRcXG5cXG5cXG4gICAgICAgICAgICAgICAgICBpZiAoIWlzVmlzZW1lQWN0aXZlIHx8ICF2aXNlbWVOYW1lcy5pbmNsdWRlcyh2aXNlbWUpKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgfSAvLyBGaW5kIHRoZSBwZWFrIHdlaWdodCBmb3IgdGhlIHZpc2VtZSBhbmQgdGhlIGFtb3VudCBvZiB0aW1lIGl0IHNob3VsZFxcbiAgICAgICAgICAgICAgICAgIC8vIHRha2UgdG8gcmVhY2ggaXRcXG5cXG5cXG4gICAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0ID0gMTtcXG4gICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBtYXJrLmR1cmF0aW9uIC8gMTAwMDtcXG5cXG4gICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24gPCBibGVuZFRpbWUpIHtcXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZXJwRmFjdG9yID0gYmxlbmRUaW1lID4gMCA/IGR1cmF0aW9uIC8gYmxlbmRUaW1lIDogMTtcXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodCA9IG92ZXJyaWRlV2VpZ2h0ICE9PSB1bmRlZmluZWQgPyBvdmVycmlkZVdlaWdodCA6IGNvcmVfTWF0aFV0aWxzLmxlcnAoMCwgMSwgbGVycEZhY3Rvcik7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIHZhciBibGVuZEluVGltZSA9IE1hdGgubWluKGR1cmF0aW9uLCBibGVuZFRpbWUpOyAvLyBGaW5kIHRoZSBhbW91bnQgYW5kIHRpbWUgdmlzZW1lIHdpbGwgYmUgaGVsZCBmb3JcXG5cXG4gICAgICAgICAgICAgICAgICB2YXIgaG9sZFRpbWUgPSBkdXJhdGlvbiAtIGJsZW5kVGltZTtcXG5cXG4gICAgICAgICAgICAgICAgICBpZiAoaG9sZFRpbWUgPCAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIGluIC0+IG91dCBhbmltYXRpb25cXG4gICAgICAgICAgICAgICAgICAgIF90aGlzNC5fYW5pbWF0ZVNpbXBsZVZpc2VtZShsYXllck5hbWUsIGFuaW1OYW1lLCB2aXNlbWUsIHdlaWdodCwgYmxlbmRJblRpbWUsIGJsZW5kVGltZSwgZWFzaW5nRm4pO1xcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgX2xlcnBGYWN0b3IgPSBkZWNheVJhdGUuc2Vjb25kcyA+IDAgPyBob2xkVGltZSAvIGRlY2F5UmF0ZS5zZWNvbmRzIDogMTsgLy8gUGVyZm9ybSBpbiAtPiBob2xkIC0+IG91dCBhbmltYXRpb25cXG5cXG5cXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWNheVdlaWdodCA9IGNvcmVfTWF0aFV0aWxzLmxlcnAod2VpZ2h0LCB3ZWlnaHQgKiBkZWNheVJhdGUuYW1vdW50LCBNYXRoLm1pbigxLCBfbGVycEZhY3RvcikpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0Ll9hbmltYXRlSGVsZFZpc2VtZShsYXllck5hbWUsIGFuaW1OYW1lLCB2aXNlbWUsIHdlaWdodCwgZGVjYXlXZWlnaHQsIGJsZW5kSW5UaW1lLCBob2xkVGltZSwgYmxlbmRUaW1lLCBlYXNpbmdGbik7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBfb25WaXNlbWUoX3gpIHtcXG4gICAgICAgIHJldHVybiBfb25WaXNlbWUyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBfb25WaXNlbWU7XFxuICAgIH0oKVxcbiAgICAvKipcXHJcXG4gICAgICogQW5pbWF0ZSBhIHZpc2VtZSBibGVuZCB3ZWlnaHQgdG93YXJkcyBhIHZhbHVlIGFuZCB0aGVuIGJhY2sgdG8gemVyby5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRoYXQgY29udGFpbnMgdGhlIHZpc2VtZS5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1OYW1lIC0gTmFtZSBvZiB0aGUgZnJlZWJsZW5kIGFuaW1hdGlvbiB0aGF0IGNvbnRhaW5zXFxyXFxuICAgICAqIHRoZSB2aXNlbWUuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2aXNlbWVOYW1lIC0gTmFtZSBvZiB0aGUgYmxlbmQgd2VpZ2h0IHRvIG1hbmlwdWxhdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBQZWFrIHdlaWdodCB0byBhbmltYXRlIHRvd2FyZHMuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBibGVuZEluVGltZSAtIEFtb3VudCBvZiB0aW1lIGl0IHNob3VsZCB0YWtlIHRvIHJlYWNoIHRoZVxcclxcbiAgICAgKiBwZWFrIHdlaWdodC5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJsZW5kT3V0VGltZSAtIEFtb3VudCBvZiB0aW1lIGl0IHNob3VsZCB0YWtlIHRvIGFuaW1hdGUgYmFja1xcclxcbiAgICAgKiB0byB6ZXJvIGFmdGVyIHJlYWNoaW5nIHRoZSBwZWFrIHdlaWdodC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFzaW5nRm4gLSBFYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGR1cmluZyBhbmltYXRpb24uXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2FuaW1hdGVTaW1wbGVWaXNlbWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hbmltYXRlU2ltcGxlVmlzZW1lKGxheWVyTmFtZSwgYW5pbU5hbWUsIHZpc2VtZU5hbWUsIHBlYWtXZWlnaHQsIGJsZW5kSW5UaW1lLCBibGVuZE91dFRpbWUsIGVhc2luZ0ZuKSB7XFxuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XFxuXFxuICAgICAgLy8gQW5pbWF0ZSB0b3dhcmRzIHRoZSBwZWFrIHZhbHVlXFxuICAgICAgdmFyIHdlaWdodFByb21pc2UgPSB0aGlzLl9ob3N0LkFuaW1hdGlvbkZlYXR1cmUuc2V0QW5pbWF0aW9uQmxlbmRXZWlnaHQobGF5ZXJOYW1lLCBhbmltTmFtZSwgdmlzZW1lTmFtZSwgcGVha1dlaWdodCwgYmxlbmRJblRpbWUsIGVhc2luZ0ZuKTsgLy8gQW5pbWF0ZSBiYWNrIHRvIHplcm8gaWYgdGhlcmUgd2FzIG5vIHdlaWdodCBpbnRlcnJ1cHRpb25cXG5cXG5cXG4gICAgICB3ZWlnaHRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xcbiAgICAgICAgaWYgKCF3ZWlnaHRQcm9taXNlLmNhbmNlbGVkKSB7XFxuICAgICAgICAgIF90aGlzNS5faG9zdC5BbmltYXRpb25GZWF0dXJlLnNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbU5hbWUsIHZpc2VtZU5hbWUsIDAsIGJsZW5kT3V0VGltZSwgZWFzaW5nRm4pO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBBbmltYXRlIGEgdmlzZW1lIGJsZW5kIHdlaWdodCB0b3dhcmRzIGEgdmFsdWUgYW5kIHRoZW4gYmFjayB0byB6ZXJvLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBjb250YWlucyB0aGUgdmlzZW1lLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW5pbU5hbWUgLSBOYW1lIG9mIHRoZSBmcmVlYmxlbmQgYW5pbWF0aW9uIHRoYXQgY29udGFpbnNcXHJcXG4gICAgICogdGhlIHZpc2VtZS5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZpc2VtZU5hbWUgLSBOYW1lIG9mIHRoZSBibGVuZCB3ZWlnaHQgdG8gbWFuaXB1bGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBlYWtXZWlnaHQgLSBQZWFrIHdlaWdodCB0byBhbmltYXRlIHRvd2FyZHMuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWNheVdlaWdodCAtIFdlaWdodCB0byBhbmltYXRlIHRvd2FyZHMgYWZ0ZXIgcmVhY2hpbmcgdGhlXFxyXFxuICAgICAqIHBlYWsgd2VpZ2h0LlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmxlbmRJblRpbWUgLSBBbW91bnQgb2YgdGltZSBpdCBzaG91bGQgdGFrZSB0byByZWFjaCB0aGVcXHJcXG4gICAgICogcGVhayB3ZWlnaHQuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBob2xkVGltZSAtIEFtb3VudCBvZiB0aW1lIGl0IHNob3VsZCB0YWtlIHRvIHJlYWNoIHRoZSBkZWNheVxcclxcbiAgICAgKiB3ZWlnaHQgYWZ0ZXIgdGhlIHBlYWsgd2VpZ2h0IGhhcyBiZWVuIHJlYWNoZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBibGVuZE91dFRpbWUgLSBBbW91bnQgb2YgdGltZSBpdCBzaG91bGQgdGFrZSB0byBhbmltYXRlIGJhY2tcXHJcXG4gICAgICogdG8gemVybyBhZnRlciByZWFjaGluZyB0aGUgZGVjYXkgd2VpZ2h0LlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2UgZHVyaW5nIGFuaW1hdGlvbi5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfYW5pbWF0ZUhlbGRWaXNlbWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgX2FuaW1hdGVIZWxkVmlzZW1lMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobGF5ZXJOYW1lLCBhbmltTmFtZSwgdmlzZW1lTmFtZSwgcGVha1dlaWdodCwgZGVjYXlXZWlnaHQsIGJsZW5kSW5UaW1lLCBob2xkVGltZSwgYmxlbmRPdXRUaW1lLCBlYXNpbmdGbikge1xcbiAgICAgICAgdmFyIHN0YXJ0UHJvbWlzZSwgaG9sZFByb21pc2U7XFxuICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0Mikge1xcbiAgICAgICAgICB3aGlsZSAoMSkge1xcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xcbiAgICAgICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICAgICAgICAvLyBBbmltYXRlIHRvd2FyZHMgdGhlIHBlYWsgdmFsdWVcXG4gICAgICAgICAgICAgICAgc3RhcnRQcm9taXNlID0gdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLnNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbU5hbWUsIHZpc2VtZU5hbWUsIHBlYWtXZWlnaHQsIGJsZW5kSW5UaW1lLCBlYXNpbmdGbik7XFxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMztcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0UHJvbWlzZTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgMzpcXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0UHJvbWlzZS5jYW5jZWxlZCkge1xcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODtcXG4gICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAvLyBBbmltYXRlIHRvd2FyZHMgdGhlIGRlY2F5IHZhbHVlIGlmIHRoZXJlIHdhcyBubyB3ZWlnaHQgaW50ZXJydXB0aW9uXFxuICAgICAgICAgICAgICAgIGhvbGRQcm9taXNlID0gdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLnNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbU5hbWUsIHZpc2VtZU5hbWUsIGRlY2F5V2VpZ2h0LCBob2xkVGltZSwgZWFzaW5nRm4pO1xcbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7XFxuICAgICAgICAgICAgICAgIHJldHVybiBob2xkUHJvbWlzZTtcXG5cXG4gICAgICAgICAgICAgIGNhc2UgNzpcXG4gICAgICAgICAgICAgICAgaWYgKCFob2xkUHJvbWlzZS5jYW5jZWxlZCkge1xcbiAgICAgICAgICAgICAgICAgIC8vIEFuaW1hdGUgYmFjayB0byB6ZXJvIGlmIHRoZXJlIHdhcyBubyB3ZWlnaHQgaW50ZXJydXB0aW9uXFxuICAgICAgICAgICAgICAgICAgdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLnNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbU5hbWUsIHZpc2VtZU5hbWUsIDAsIGJsZW5kT3V0VGltZSwgZWFzaW5nRm4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBjYXNlIDg6XFxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XFxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpO1xcbiAgICAgIH0pKTtcXG5cXG4gICAgICBmdW5jdGlvbiBfYW5pbWF0ZUhlbGRWaXNlbWUoX3gyLCBfeDMsIF94NCwgX3g1LCBfeDYsIF94NywgX3g4LCBfeDksIF94MTApIHtcXG4gICAgICAgIHJldHVybiBfYW5pbWF0ZUhlbGRWaXNlbWUyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBfYW5pbWF0ZUhlbGRWaXNlbWU7XFxuICAgIH0oKVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyBhbmQgc2V0cyB0aGUgYW1vdW50IG9mIHRpbWUgaW4gc2Vjb25kcyB0byBuZWdhdGl2ZWx5IG9mZnNldCBzcGVlY2htYXJrXFxyXFxuICAgICAqIGVtaXNzaW9uIGJ5LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInZpc2VtZUxlYWRUaW1lXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl92aXNlbWVMZWFkVGltZTtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2Vjb25kcykge1xcbiAgICAgIHRoaXMuX3Zpc2VtZUxlYWRUaW1lID0gc2Vjb25kcztcXG5cXG4gICAgICBpZiAodGhpcy5faG9zdC5UZXh0VG9TcGVlY2hGZWF0dXJlKSB7XFxuICAgICAgICB0aGlzLl9ob3N0LlRleHRUb1NwZWVjaEZlYXR1cmUuc3BlZWNobWFya09mZnNldCA9IC1zZWNvbmRzO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RhcnQga2VlcGluZyB0cmFjayBvZiBhbiBhbmltYXRpb24gbGF5ZXIgdGhhdCBvd25zIGEgZnJlZUJsZW5kIGFuaW1hdGlvblxcclxcbiAgICAgKiB3aXRoIGJsZW5kV2VpZ2h0cyBjb3JyZXNwb25kaW5nIHRvIHZpc2VtZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0byBrZWVwIHRyYWNrIG9mLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgbGF5ZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hbmltYXRpb249XFwndmlzZW1lc1xcJ10gLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gb24gdGhlXFxyXFxuICAgICAqIGxheWVyIHRoYXQgd2lsbCBiZSBwbGF5ZWQgZHVyaW5nIHNwZWVjaC4gVGhpcyBhbmltYXRpb24gbXVzdCBiZSBvZiB0eXBlXFxyXFxuICAgICAqIGZyZWVCbGVuZC5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBkZWNheVJhdGVcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWNheVJhdGUuYW1vdW50PTAuNV0gLSBUaGUgcGVyY2VudGFnZSB0byBkZWNyZWFzZSB0aGUgdmlzZW1lXFwnc1xcclxcbiAgICAgKiBwZWFrIHZhbHVlIGJ5IG92ZXIgdGltZSBvbmNlIHRoZSBwZWFrIHZhbHVlIGhhcyBiZWVuIHJlYWNoZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVjYXlSYXRlLnNlY29uZHM9MC41XSAtIFRoZSBhbW91bnQgb2YgdGltZSBpbiBzZWNvbmRzIHRvXFxyXFxuICAgICAqIGRlY3JlYXNlIHRoZSB2aXNlbWVcXCdzIHdlaWdodCBvbmNlIGl0IGhhcyByZWFjaGVkIGl0cyBwZWFrIHZhbHVlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IFtvcHRpb25zLmJsZW5kVGltZT1bTGlwc3luY0ZlYXR1cmUuREVGQVVMVF9MQVlFUl9PUFRJT05TLmJsZW5kVGltZV17QGxpbmsgTGlwc3luY0ZlYXR1cmUjREVGQVVMVF9MQVlFUl9PUFRJT05TI2JsZW5kVGltZX1dIC1cXHJcXG4gICAgICogRGVmYXVsdCBhbW91bnQgb2YgdGltZSB0byB1c2Ugd2hlbiBtYW5pcHVsYXRpbmcgYW5pbWF0aW9uIGJsZW5kV2VpZ2h0cy5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMuZWFzaW5nRm4gLSBEZWZhdWx0IGVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hlblxcclxcbiAgICAgKiBtYW5pcHVsYXRpbmcgYW5pbWF0aW9uIGJsZW5kV2VpZ2h0cy5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnZpc2VtZU1hcD1EZWZhdWx0VmlzZW1lTWFwXSAtIE9iamVjdCBjb250YWluaW5nIGtleS92YWx1ZSBwYWlycyBvZlxcclxcbiAgICAgKiBQb2xseSB2aXNlbWUgbmFtZXMgbWFwcGVkIHRvIG9iamVjdHMgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgY29ycmVzcG9uZGluZ1xcclxcbiAgICAgKiBhbmltYXRpb24gYmxlbmRXZWlnaHQgYW5kIGFueSBvdGhlciBhbmltYXRpb24gb3B0aW9ucyB0byB1c2Ugc3VjaCBhcyB2aXNlbWVcXHJcXG4gICAgICogc3BlY2lmaWMgYmxlbmQgdGltZXMgYW5kIGVhc2luZyBmdW5jdGlvbnMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVnaXN0ZXJWaXNlbWVMYXllclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJWaXNlbWVMYXllcihsYXllck5hbWUpIHtcXG4gICAgICB2YXIgX3JlZjE0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcXG4gICAgICAgICAgX3JlZjE0JGFuaW1hdGlvbiA9IF9yZWYxNC5hbmltYXRpb24sXFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9yZWYxNCRhbmltYXRpb24gPT09IHZvaWQgMCA/IFxcJ3Zpc2VtZXNcXCcgOiBfcmVmMTQkYW5pbWF0aW9uLFxcbiAgICAgICAgICBfcmVmMTQkZGVjYXlSYXRlID0gX3JlZjE0LmRlY2F5UmF0ZSxcXG4gICAgICAgICAgZGVjYXlSYXRlID0gX3JlZjE0JGRlY2F5UmF0ZSA9PT0gdm9pZCAwID8ge1xcbiAgICAgICAgYW1vdW50OiAwLjUsXFxuICAgICAgICBzZWNvbmRzOiAwLjVcXG4gICAgICB9IDogX3JlZjE0JGRlY2F5UmF0ZSxcXG4gICAgICAgICAgX3JlZjE0JGJsZW5kVGltZSA9IF9yZWYxNC5ibGVuZFRpbWUsXFxuICAgICAgICAgIGJsZW5kVGltZSA9IF9yZWYxNCRibGVuZFRpbWUgPT09IHZvaWQgMCA/IExpcHN5bmNGZWF0dXJlLkRFRkFVTFRfTEFZRVJfT1BUSU9OUy5ibGVuZFRpbWUgOiBfcmVmMTQkYmxlbmRUaW1lLFxcbiAgICAgICAgICBlYXNpbmdGbiA9IF9yZWYxNC5lYXNpbmdGbixcXG4gICAgICAgICAgX3JlZjE0JHZpc2VtZU1hcCA9IF9yZWYxNC52aXNlbWVNYXAsXFxuICAgICAgICAgIHZpc2VtZU1hcCA9IF9yZWYxNCR2aXNlbWVNYXAgPT09IHZvaWQgMCA/IERlZmF1bHRWaXNlbWVNYXAgOiBfcmVmMTQkdmlzZW1lTWFwO1xcblxcbiAgICAgIC8vIFJlZ2lzdGVyIHRoZSBsYXllciBhbmQgYW5pbWF0aW9uXFxuICAgICAgdGhpcy5yZWdpc3RlckxheWVyKGxheWVyTmFtZSwge1xcbiAgICAgICAgZGVjYXlSYXRlOiBkZWNheVJhdGUsXFxuICAgICAgICBibGVuZFRpbWU6IGJsZW5kVGltZSxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGbixcXG4gICAgICAgIGFuaW1hdGlvbnM6IExpcHN5bmNGZWF0dXJlX2RlZmluZVByb3BlcnR5KHt9LCBhbmltYXRpb24sIHtcXG4gICAgICAgICAgdmlzZW1lTWFwOiB2aXNlbWVNYXBcXG4gICAgICAgIH0pXFxuICAgICAgfSk7XFxuICAgICAgdGhpcy5fdmlzZW1lTGF5ZXJzW2xheWVyTmFtZV0gPSBhbmltYXRpb247IC8vIFZhbGlkYXRlIHRoZSB2aXNlbWUgYW5pbWF0aW9uXFxuXFxuICAgICAgdGhpcy5fcmVnaXN0ZXJWaXNlbWVBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb24pO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdGFydCBrZWVwaW5nIHRyYWNrIG9mIGFuIGFuaW1hdGlvbiBsYXllciB0aGF0IGNvbnRhaW5zIGEgbG9vcGluZyBhbmltYXRpb25cXHJcXG4gICAgICogdG8gYmUgcGxheWVkIGR1cmluZyBzcGVlY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0byBrZWVwIHRyYWNrIG9mLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgbGF5ZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hbmltYXRpb249XFwnc3RhbmRfdGFsa1xcJ10gLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gb24gdGhlXFxyXFxuICAgICAqIGxheWVyIHRoYXQgd2lsbCBiZSBwbGF5ZWQgZHVyaW5nIHNwZWVjaC5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJsZW5kVGltZT1bTGlwc3luY0ZlYXR1cmUuREVGQVVMVF9MQVlFUl9PUFRJT05TLmJsZW5kVGltZV17QGxpbmsgTGlwc3luY0ZlYXR1cmUjREVGQVVMVF9MQVlFUl9PUFRJT05TI2JsZW5kVGltZX1dIC1cXHJcXG4gICAgICogRGVmYXVsdCBhbW91bnQgb2YgdGltZSB0byB1c2Ugd2hlbiBtYW5pcHVsYXRpbmcgdGhlIGxheWVyXFwncyB3ZWlnaHRzLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0aW9ucy5lYXNpbmdGbiAtIERlZmF1bHQgZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSB3aGVuXFxyXFxuICAgICAqIG1hbmlwdWxhdGluZyB0aGUgbGF5ZXJcXCdzIHdlaWdodHMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVnaXN0ZXJUYWxraW5nTGF5ZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyVGFsa2luZ0xheWVyKGxheWVyTmFtZSkge1xcbiAgICAgIHZhciBfcmVmMTUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxcbiAgICAgICAgICBfcmVmMTUkYW5pbWF0aW9uID0gX3JlZjE1LmFuaW1hdGlvbixcXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3JlZjE1JGFuaW1hdGlvbiA9PT0gdm9pZCAwID8gXFwnc3RhbmRfdGFsa1xcJyA6IF9yZWYxNSRhbmltYXRpb24sXFxuICAgICAgICAgIF9yZWYxNSRibGVuZFRpbWUgPSBfcmVmMTUuYmxlbmRUaW1lLFxcbiAgICAgICAgICBibGVuZFRpbWUgPSBfcmVmMTUkYmxlbmRUaW1lID09PSB2b2lkIDAgPyBMaXBzeW5jRmVhdHVyZS5ERUZBVUxUX0xBWUVSX09QVElPTlMuYmxlbmRUaW1lIDogX3JlZjE1JGJsZW5kVGltZSxcXG4gICAgICAgICAgZWFzaW5nRm4gPSBfcmVmMTUuZWFzaW5nRm47XFxuXFxuICAgICAgLy8gUmVnaXN0ZXIgdGhlIGxheWVyIGFuZCBhbmltYXRpb25cXG4gICAgICB0aGlzLnJlZ2lzdGVyTGF5ZXIobGF5ZXJOYW1lLCB7XFxuICAgICAgICBibGVuZFRpbWU6IGJsZW5kVGltZSxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGbixcXG4gICAgICAgIGFuaW1hdGlvbnM6IExpcHN5bmNGZWF0dXJlX2RlZmluZVByb3BlcnR5KHt9LCBhbmltYXRpb24sIHt9KVxcbiAgICAgIH0pO1xcbiAgICAgIHRoaXMuX3RhbGtpbmdMYXllcnNbbGF5ZXJOYW1lXSA9IGFuaW1hdGlvbjtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQWRkcyBhIG5hbWVzcGFjZSB0byB0aGUgaG9zdCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBmZWF0dXJlIHRvIGNvbnRhaW4gcHJvcGVydGllc1xcclxcbiAgICAgKiBhbmQgbWV0aG9kcyBmcm9tIHRoZSBmZWF0dXJlIHRoYXQgdXNlcnMgb2YgdGhlIGhvc3QgbmVlZCBhY2Nlc3MgdG8uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBzZWUgTGlwc3luY0ZlYXR1cmVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJpbnN0YWxsQXBpXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsQXBpKCkge1xcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xcblxcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBpbm5lclxcclxcbiAgICAgICAqIEBuYW1lc3BhY2UgTGlwc3luY0ZlYXR1cmVcXHJcXG4gICAgICAgKi9cXG4gICAgICB2YXIgYXBpID0gTGlwc3luY0ZlYXR1cmVfZ2V0KExpcHN5bmNGZWF0dXJlX2dldFByb3RvdHlwZU9mKExpcHN5bmNGZWF0dXJlLnByb3RvdHlwZSksIFwiaW5zdGFsbEFwaVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBtZW1iZXJvZiBMaXBzeW5jRmVhdHVyZVxcclxcbiAgICAgICAqIEBuYW1lIHJlZ2lzdGVyTGF5ZXJcXHJcXG4gICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgKiBAbWV0aG9kXFxyXFxuICAgICAgICogQHNlZSBNYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UjcmVnaXN0ZXJMYXllclxcclxcbiAgICAgICAqL1xcblxcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBtZW1iZXJvZiBMaXBzeW5jRmVhdHVyZVxcclxcbiAgICAgICAqIEBuYW1lIHJlZ2lzdGVyQW5pbWF0aW9uXFxyXFxuICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICogQG1ldGhvZFxcclxcbiAgICAgICAqIEBzZWUgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlI3JlZ2lzdGVyQW5pbWF0aW9uXFxyXFxuICAgICAgICovXFxuXFxuICAgICAgLyoqXFxyXFxuICAgICAgICogQG1lbWJlcm9mIExpcHN5bmNGZWF0dXJlXFxyXFxuICAgICAgICogQG5hbWUgc2V0TGF5ZXJXZWlnaHRzXFxyXFxuICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICogQG1ldGhvZFxcclxcbiAgICAgICAqIEBzZWUgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlI3NldExheWVyV2VpZ2h0c1xcclxcbiAgICAgICAqL1xcblxcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBtZW1iZXJvZiBMaXBzeW5jRmVhdHVyZVxcclxcbiAgICAgICAqIEBuYW1lIGVuYWJsZVxcclxcbiAgICAgICAqIEBpbnN0YW5jZVxcclxcbiAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgKiBAc2VlIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZSNlbmFibGVcXHJcXG4gICAgICAgKi9cXG5cXG4gICAgICAvKipcXHJcXG4gICAgICAgKiBAbWVtYmVyb2YgTGlwc3luY0ZlYXR1cmVcXHJcXG4gICAgICAgKiBAbmFtZSBkaXNhYmxlXFxyXFxuICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICogQG1ldGhvZFxcclxcbiAgICAgICAqIEBzZWUgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlI2Rpc2FibGVcXHJcXG4gICAgICAgKi9cXG5cXG5cXG4gICAgICBPYmplY3QuYXNzaWduKGFwaSwge1xcbiAgICAgICAgLyoqXFxyXFxuICAgICAgICAgKiBAbWVtYmVyb2YgTGlwc3luY0ZlYXR1cmVcXHJcXG4gICAgICAgICAqIEBpbnN0YW5jZVxcclxcbiAgICAgICAgICogQG1ldGhvZFxcclxcbiAgICAgICAgICogQHNlZSBjb3JlL0xpcHN5bmNGZWF0dXJlI3JlZ2lzdGVyVmlzZW1lTGF5ZXJcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgcmVnaXN0ZXJWaXNlbWVMYXllcjogdGhpcy5yZWdpc3RlclZpc2VtZUxheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBMaXBzeW5jRmVhdHVyZVxcclxcbiAgICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICAgKiBAbWV0aG9kXFxyXFxuICAgICAgICAgKiBAc2VlIGNvcmUvTGlwc3luY0ZlYXR1cmUjcmVnaXN0ZXJUYWxraW5nTGF5ZXJcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgcmVnaXN0ZXJUYWxraW5nTGF5ZXI6IHRoaXMucmVnaXN0ZXJUYWxraW5nTGF5ZXIuYmluZCh0aGlzKVxcbiAgICAgIH0pO1xcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBtZW1iZXJvZiBMaXBzeW5jRmVhdHVyZVxcclxcbiAgICAgICAqIEBpbnN0YW5jZVxcclxcbiAgICAgICAqIEBuYW1lIHZpc2VtZUxlYWRUaW1lXFxyXFxuICAgICAgICogQHNlZSBjb3JlL0xpcHN5bmNGZWF0dXJlI3Zpc2VtZUxlYWRUaW1lXFxyXFxuICAgICAgICovXFxuXFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwaSwgXFwndmlzZW1lTGVhZFRpbWVcXCcsIHtcXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICByZXR1cm4gX3RoaXM2LnZpc2VtZUxlYWRUaW1lO1xcbiAgICAgICAgfSxcXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHNlY29uZHMpIHtcXG4gICAgICAgICAgX3RoaXM2LnZpc2VtZUxlYWRUaW1lID0gc2Vjb25kcztcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gYXBpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gTGlwc3luY0ZlYXR1cmU7XFxufShjb3JlX0Fic3RyYWN0SG9zdEZlYXR1cmUubWl4KGF3c3BhY2tfVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZS5NaXhpbiwgYW5pbXBhY2tfTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlLk1peGluKSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBjb3JlX0xpcHN5bmNGZWF0dXJlID0gKExpcHN5bmNGZWF0dXJlKTtcXG5cXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hd3NwYWNrL1NTTUxTcGVlY2htYXJrSW50ZXJmYWNlLmpzXFxuZnVuY3Rpb24gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBTU01MU3BlZWNobWFya0ludGVyZmFjZV90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBTU01MU3BlZWNobWFya0ludGVyZmFjZV90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBTU01MU3BlZWNobWFya0ludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBTU01MU3BlZWNobWFya0ludGVyZmFjZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBTU01MU3BlZWNobWFya0ludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX3NldFByb3RvdHlwZU9mKG8sIHApIHsgU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuZnVuY3Rpb24gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBTU01MU3BlZWNobWFya0ludGVyZmFjZV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChTU01MU3BlZWNobWFya0ludGVyZmFjZV90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5mdW5jdGlvbiBTU01MU3BlZWNobWFya0ludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvKSB7IFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xcblxcbi8qIGVzbGludC1kaXNhYmxlIG5vLWVtcHR5ICovXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZmFjdG9yeSBpbnRlcmZhY2UgZm9yIHRoYXQgcmVnaXN0ZXJzIGNhbGxiYWNrIG1ldGhvZCB3aGVuIGEgc3NtbCBzcGVlY2htYXJrIGV2ZW50IGlzIGVtaXR0ZWQuXFxyXFxuICpcXHJcXG4gKiBAaW50ZXJmYWNlXFxyXFxuICogQGV4dGVuZHMgVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZVxcclxcbiAqL1xcblxcbnZhciBTU01MU3BlZWNobWFya0ludGVyZmFjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RleHRUb1NwZWVjaEZlYXR1cmVEKSB7XFxuICBTU01MU3BlZWNobWFya0ludGVyZmFjZV9pbmhlcml0cyhTU01MU3BlZWNobWFya0ludGVyZmFjZSwgX1RleHRUb1NwZWVjaEZlYXR1cmVEKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBTU01MU3BlZWNobWFya0ludGVyZmFjZV9jcmVhdGVTdXBlcihTU01MU3BlZWNobWFya0ludGVyZmFjZSk7XFxuXFxuICBmdW5jdGlvbiBTU01MU3BlZWNobWFya0ludGVyZmFjZSgpIHtcXG4gICAgU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2UpO1xcblxcbiAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICB9XFxuXFxuICBTU01MU3BlZWNobWFya0ludGVyZmFjZV9jcmVhdGVDbGFzcyhTU01MU3BlZWNobWFya0ludGVyZmFjZSwgW3tcXG4gICAga2V5OiBcIl9vblNzbWxcIixcXG4gICAgdmFsdWU6XFxuICAgIC8qKlxcclxcbiAgICAgKiBXaGVuIHNzbWwgZXZlbnRzIGFyZSBjYXVnaHQsIHRoaXMgd2lsbCB0cnkgdG8gcGFyc2UgdGhlIHNwZWVjaCBtYXJrIHZhbHVlIGFuZCBleGVjdXRlIGFueSBmdW5jdGlvbiB3aGljaCBtZWV0cyBjcml0ZXJpYSBkZWZpbmVkIGluIHRoZSB2YWx1ZS5cXHJcXG4gICAgICogU3BlZWNoIG1hcmsgdmFsdWUgd2lsbCBiZSB0cmVhdGVkIGFzIHN0cmluZ2lmaWVkIGpzb24gZm9ybWF0IGNvbnRhaW5pbmcgcmVxdWlyZWQgZmVhdHVyZSBuYW1lLCBmdW5jdGlvbiBuYW1lIGFuZCBhcmd1bWVudCBhcnJheSB0byBwYXNzIGluLlxcclxcbiAgICAgKiBFeGFtcGxlIHNwZWVjaCBtYXJrIHZhbHVlIG1pZ2h0IGxvb2sgbGlrZTogXFwne1wiZmVhdHVyZVwiOlwiR2VzdHVyZUZlYXR1cmVcIiwgXCJtZXRob2RcIjpcInN3aXRjaFRvR2VzdHVyZVwiLCBcImFyZ3NcIjpbXCJnZW5yaWNBXCIsIDAuNV19XFwnXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IGRhdGEgcGFzc2VkIGZyb20gdGhlIHNwZWVjaC5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50Lm1hcmsgLSBTcGVlY2htYXJrIG9iamVjdC5cXHJcXG4gICAgICovXFxuICAgIGZ1bmN0aW9uIF9vblNzbWwoX3JlZikge1xcbiAgICAgIHZhciBtYXJrID0gX3JlZi5tYXJrO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDcmVhdGVzIGEgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIHtAbGluayBTU01MU3BlZWNobWFya0ludGVyZmFjZX1cXHJcXG4gICAgICogYW5kIGV4dGVuZHMgYSBzcGVjaWZpZWQgYmFzZSBjbGFzcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtDbGFzc30gQmFzZUNsYXNzIC0gVGhlIGNsYXNzIHRvIGV4dGVuZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybiB7Q2xhc3N9IEEgY2xhc3MgdGhhdCBleHRlbmRzIGBCYXNlQ2xhc3NgIGFuZCBpbXBsZW1lbnRzIHtAbGluayBTU01MU3BlZWNobWFya0ludGVyZmFjZX0uXFxyXFxuICAgICAqL1xcblxcbiAgfV0sIFt7XFxuICAgIGtleTogXCJNaXhpblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gTWl4aW4oQmFzZUNsYXNzKSB7XFxuICAgICAgdmFyIFBhcmVudENsYXNzID0gYXdzcGFja19UZXh0VG9TcGVlY2hGZWF0dXJlRGVwZW5kZW50SW50ZXJmYWNlLk1peGluKEJhc2VDbGFzcyk7XFxuXFxuICAgICAgdmFyIFNTTUxTcGVlY2hNYXJrTWl4aW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9QYXJlbnRDbGFzcykge1xcbiAgICAgICAgU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfaW5oZXJpdHMoU1NNTFNwZWVjaE1hcmtNaXhpbiwgX1BhcmVudENsYXNzKTtcXG5cXG4gICAgICAgIHZhciBfc3VwZXIyID0gU1NNTFNwZWVjaG1hcmtJbnRlcmZhY2VfY3JlYXRlU3VwZXIoU1NNTFNwZWVjaE1hcmtNaXhpbik7XFxuXFxuICAgICAgICBmdW5jdGlvbiBTU01MU3BlZWNoTWFya01peGluKCkge1xcbiAgICAgICAgICBTU01MU3BlZWNobWFya0ludGVyZmFjZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBTU01MU3BlZWNoTWFya01peGluKTtcXG5cXG4gICAgICAgICAgcmV0dXJuIF9zdXBlcjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlX2NyZWF0ZUNsYXNzKFNTTUxTcGVlY2hNYXJrTWl4aW4sIFt7XFxuICAgICAgICAgIGtleTogXCJfb25Tc21sXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Tc21sKF9yZWYyKSB7XFxuICAgICAgICAgICAgdmFyIG1hcmsgPSBfcmVmMi5tYXJrO1xcblxcbiAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICB2YXIgX0pTT04kcGFyc2UgPSBKU09OLnBhcnNlKG1hcmsudmFsdWUpLFxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBfSlNPTiRwYXJzZS5mZWF0dXJlLFxcbiAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IF9KU09OJHBhcnNlLm1ldGhvZCxcXG4gICAgICAgICAgICAgICAgICBhcmdzID0gX0pTT04kcGFyc2UuYXJncztcXG5cXG4gICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLm5hbWUgPT09IGZlYXR1cmUpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpc1ttZXRob2RdO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkZ1bmN0aW9uIFwiLmNvbmNhdChtZXRob2QsIFwiIGRvZXMgbm90IGV4aXN0IHdpdGhpbiBmZWF0dXJlIFwiKS5jb25jYXQoZmVhdHVyZSkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cXG4gICAgICAgICAgfVxcbiAgICAgICAgfV0pO1xcblxcbiAgICAgICAgcmV0dXJuIFNTTUxTcGVlY2hNYXJrTWl4aW47XFxuICAgICAgfShQYXJlbnRDbGFzcyk7XFxuXFxuICAgICAgcmV0dXJuIFNTTUxTcGVlY2hNYXJrTWl4aW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBTU01MU3BlZWNobWFya0ludGVyZmFjZTtcXG59KGF3c3BhY2tfVGV4dFRvU3BlZWNoRmVhdHVyZURlcGVuZGVudEludGVyZmFjZSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhd3NwYWNrX1NTTUxTcGVlY2htYXJrSW50ZXJmYWNlID0gKFNTTUxTcGVlY2htYXJrSW50ZXJmYWNlKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9HZXN0dXJlRmVhdHVyZS5qc1xcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gR2VzdHVyZUZlYXR1cmVfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgR2VzdHVyZUZlYXR1cmVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9vd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gR2VzdHVyZUZlYXR1cmVfb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBHZXN0dXJlRmVhdHVyZV9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IEdlc3R1cmVGZWF0dXJlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gR2VzdHVyZUZlYXR1cmVfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBHZXN0dXJlRmVhdHVyZV9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IEdlc3R1cmVGZWF0dXJlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgR2VzdHVyZUZlYXR1cmVfbm9uSXRlcmFibGVSZXN0KCk7IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gR2VzdHVyZUZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIEdlc3R1cmVGZWF0dXJlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XFxuXFxuZnVuY3Rpb24gR2VzdHVyZUZlYXR1cmVfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XFxuXFxuZnVuY3Rpb24gR2VzdHVyZUZlYXR1cmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgR2VzdHVyZUZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEdlc3R1cmVGZWF0dXJlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gR2VzdHVyZUZlYXR1cmVfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgR2VzdHVyZUZlYXR1cmVfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IEdlc3R1cmVGZWF0dXJlX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBHZXN0dXJlRmVhdHVyZV9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBHZXN0dXJlRmVhdHVyZV9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBHZXN0dXJlRmVhdHVyZV9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XFxuXFxuZnVuY3Rpb24gR2VzdHVyZUZlYXR1cmVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgR2VzdHVyZUZlYXR1cmVfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gR2VzdHVyZUZlYXR1cmVfc2V0UHJvdG90eXBlT2YobywgcCkgeyBHZXN0dXJlRmVhdHVyZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gR2VzdHVyZUZlYXR1cmVfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gR2VzdHVyZUZlYXR1cmVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gR2VzdHVyZUZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IEdlc3R1cmVGZWF0dXJlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBHZXN0dXJlRmVhdHVyZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKEdlc3R1cmVGZWF0dXJlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBHZXN0dXJlRmVhdHVyZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBHZXN0dXJlRmVhdHVyZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlX2dldFByb3RvdHlwZU9mKG8pIHsgR2VzdHVyZUZlYXR1cmVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gR2VzdHVyZUZlYXR1cmVfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG5cXG5cXG5cXG5cXG52YXIgRGVmYXVsdEdlc3R1cmVXb3JkcyA9IHtcXG4gIGJpZzogW1xcJ2FkZFxcJywgXFwnYWJvdmVcXCcsIFxcJ2F1dGhvcml0eVxcJywgXFwnYmlnXFwnLCBcXCdjb3ZlclxcJywgXFwnZnVsbFxcJywgXFwnZmx5XFwnLCBcXCdncm93XFwnLCBcXCdncm93dGhcXCcsIFxcJ2hpZ2hcXCcsIFxcJ2h1Z2VcXCcsIFxcJ2luY3JlYXNlXFwnLCBcXCdtYWpvclxcJywgXFwnbWFqb3JpdHlcXCcsIFxcJ2xhcmdlXFwnLCBcXCdsZWFkZXJcXCcsIFxcJ2xvdFxcJywgXFwncmFpc2VcXCcsIFxcJ3Jpc2VcXCcsIFxcJ3RhbGxcXCddLFxcbiAgaGVhcnQ6IFtcXCdhY2NlcHRcXCcsIFxcJ2FkbWl0XFwnLCBcXCdiZWxpZXZlXFwnLCBcXCdjYXJlXFwnLCBcXCdmZWVsaW5nXFwnLCBcXCdmZWVsXFwnLCBcXCdmcmllbmRcXCcsIFxcJ2dyYXRlZnVsXFwnLCBcXCdoYXBweVxcJywgXFwnaGVhcnRcXCcsIFxcJ2h1bWFuXFwnLCBcXCdwYWluXFwnLCBcXCdzYXZlXFwnLCBcXCdzYWZlXFwnLCBcXCdraW5kXFwnLCBcXCdsb3ZlXFwnXSxcXG4gIFwiaW5cIjogW1xcJ2luY2x1ZGVcXCcsIFxcJ2luY2x1ZGluZ1xcJywgXFwnaW5zaWRlXFwnLCBcXCdpbnRvXFwnLCBcXCdub3dcXCcsIFxcJ25lYXJcXCcsIFxcJ25lYXJlc3RcXCcsIFxcJ2Nsb3Nlc3RcXCcsIFxcJ3RoZXJlaW5cXCcsIFxcJ3dpdGhpblxcJ10sXFxuICBtYW55OiBbXFwnYWxsXFwnLCBcXCdhbHdheXNcXCcsIFxcJ2FueVxcJywgXFwnYW55b25lXFwnLCBcXCdhbW9uZ1xcJywgXFwnYXJlYVxcJywgXFwnYXJvdW5kXFwnLCBcXCdiZWF1dGlmdWxcXCcsIFxcJ2VudGlyZVxcJywgXFwnZW52aXJvbm1lbnRcXCcsIFxcJ2Vudmlyb25tZW50c1xcJywgXFwnZW52aXJvbm1lbnRhbFxcJywgXFwnZXZlcnlib2R5XFwnLCBcXCdldmVyeW9uZVxcJywgXFwnZXZlcnl0aGluZ1xcJywgXFwnYXVkaWVuY2VcXCcsIFxcJ3RvdGFsXFwnLCBcXCdncm91cFxcJywgXFwnZ3JvdXBzXFwnLCBcXCdtaWxsaW9uXFwnLCBcXCdtaWxsaW9uc1xcJywgXFwnb3RoZXJzXFwnLCBcXCdiaWxsaW9uXFwnLCBcXCdiaWxsaW9uc1xcJywgXFwnaHVuZHJlZFxcJywgXFwnaHVuZHJlZHNcXCcsIFxcJ21hbnlcXCcsIFxcJ3Rob3VzYW5kXFwnLCBcXCd0aG91c2FuZHNcXCcsIFxcJ3dvcmxkXFwnLCBcXCd3b3JsZHNcXCcsIFxcJ291dHNpZGVcXCcsIFxcJ3JldmVhbFxcJ10sXFxuICBtb3ZlbWVudDogW1xcJ2F3YXlcXCcsIFxcJ2Fjcm9zc1xcJywgXFwnYWhlYWRcXCcsIFxcJ2Fsb25nXFwnLCBcXCdmYXJcXCcsIFxcJ2Zhc3RcXCcsIFxcJ2ZvbGxvd1xcJywgXFwnZ29cXCcsIFxcJ2xlYXZlXFwnLCBcXCdtb3ZlXFwnLCBcXCdtb3ZlbWVudFxcJywgXFwndGhyb3VnaFxcJywgXFwndGhyb3VnaG91dFxcJywgXFwndG93YXJkXFwnLCBcXCd0cmF2ZWxcXCcsIFxcJ3R1cm5lZFxcJywgXFwncGFzc2VkXFwnXSxcXG4gIG9uZTogW1xcJ3NpbmdsZVxcJywgXFwnb25lXFwnLCBcXCdvbmNlXFwnLCBcXCdmaXJzdFxcJywgXFwnZmlyc3RseVxcJywgXFwnb25seVxcJywgXFwnc29sb1xcJywgXFwnd2FybmVkXFwnLCBcXCd0cnVseVxcJywgXFwndXBcXCcsIFxcJ2Fsb25lXFwnXSxcXG4gIGFnZ3Jlc3NpdmU6IFtcXCdwb3dlclxcJywgXFwncG93ZXJzXFwnLCBcXCdwb3dlcmZ1bFxcJywgXFwnYXNzZXJ0XFwnLCBcXCdhc3NlcnRpdmVcXCcsIFxcJ3N0cm9uZ1xcJywgXFwnc3Ryb25nZXJcXCcsIFxcJ3N0cm9uZ2VzdFxcJywgXFwnc3RyZW5ndGhcXCcsIFxcJ2ZsZXhcXCcsIFxcJ2RhbmdcXCcsIFxcJ2RhbW5cXCcsIFxcJ2RhbW5pdFxcJywgXFwnZGFyblxcJywgXFwnc2h1Y2tzXFwnLCBcXCdkb2hcXCcsIFxcJ2RyYXRcXCcsIFxcJ2FuZ3J5XFwnLCBcXCdhbmdyaWVyXFwnLCBcXCdhbmdyaWVzdFxcJywgXFwnYWdncmVzc2l2ZVxcJywgXFwnYW5ub3llZFxcJywgXFwnYW5ub3lpbmdcXCcsIFxcJ2F0dGFja1xcJywgXFwnYXR0YWNraW5nXFwnLCBcXCdvZmZlbnNlXFwnLCBcXCdvZmZlbnNpdmVcXCcsIFxcJ2JhdHRsZVxcJ10sXFxuICB5b3U6IFtcXCd5b3VcXCcsIFxcJ3lhbGxcXCcsIFwieVxcJ2FsbFwiLCBcXCd5b3VyXFwnLCBcXCd5b3Vyc1xcJywgXFwndGhvdVxcJywgXFwndGh5XFwnXSxcXG4gIGRlZmVuc2U6IFtcXCdkZWZlbnNlXFwnLCBcXCdmZWFyXFwnLCBcXCdyZXB1bHNlZFxcJywgXFwnc2NhcmVkXFwnLCBcXCdzY2FyeVxcJywgXFwnc2NhcmllclxcJywgXFwnc2Nhcmllc3RcXCcsIFxcJ2ZlYXJmdWxcXCcsIFxcJ2FmcmFpZFxcJywgXFwnY293ZXJcXCcsIFxcJ2Nvd2Vyc1xcJywgXFwnY293ZXJpbmdcXCcsIFxcJ2hpZGVvdXNcXCcsIFxcJ2Rvb21lZFxcJywgXFwndGVycmlmaWVkXFwnLCBcXCd0ZXJyaWZ5XFwnLCBcXCd0ZXJyaWZ5aW5nXFwnLCBcXCd0ZXJyaWZpZXNcXCcsIFxcJ3Nwb29reVxcJywgXFwnc3Bvb2tpZXJcXCcsIFxcJ3Nwb29raWVzdFxcJ10sXFxuICB3YXZlOiBbXFwnaGVsbG9cXCcsIFxcJ2hpXFwnLCBcXCdoaXlhXFwnLCBcXCdob3dkeVxcJywgXFwnd2VsY29tZVxcJywgXFwnYWxvaGFcXCcsIFxcJ2hleWFcXCcsIFxcJ2hleVxcJywgXFwnYnllXFwnLCBcXCdnb29kYnllXFwnLCBcXCdob2xhXFwnLCBcXCdhZGlvc1xcJywgXFwnY2hhb1xcJ10sXFxuICBzZWxmOiBbXFwnbXlcXCcsIFxcJ0lcXCcsIFxcJ215c2VsZlxcJywgXFwnc2VsZlxcJywgXCJJXFwndmVcIiwgXFwnSXZlXFwnLCBcXCdtZVxcJywgXFwnbWluZVxcJywgXFwnb3duXFwnXVxcbn07XFxuLyoqXFxyXFxuICogR2VzdHVyZSBhbGxvd3MgeW91IHRvIHBsYXkgYW5pbWF0aW9ucyBvbiBkZW1hbmQgb24gb25lIG9yIG1vcmUgbGF5ZXJzIGZyb20gc2NyaXB0XFxyXFxuICogb3Igc3NtbC4gSWYgZ2VzdHVyZSBpcyBwbGF5ZWQgdGhhdCBpcyBhIFF1ZXVlU3RhdGUsIHRoZSBxdWV1ZSB3aWxsIGF1dG9tYXRpY2FsbHlcXHJcXG4gKiBiZSBwcm9ncmVzc2VkIGFmdGVyIGEgZ2l2ZW4gaG9sZCB0aW1lIGlmIGEgbG9vcGluZyBxdWV1ZWQgc3RhdGUgaXMgcmVhY2hlZC4gR2VzdHVyZVxcclxcbiAqIGxheWVycyBjYW4gb3B0aW9uYWxseSBiZSBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIHdoZW4gbm8gZ2VzdHVyZSBhbmltYXRpb24gaXNcXHJcXG4gKiBpbiBwcm9ncmVzcy5cXHJcXG4gKlxcclxcbiAqIEBleHRlbmRzIEFic3RyYWN0SG9zdEZlYXR1cmVcXHJcXG4gKiBAaW1wbGVtZW50cyBTU01MU3BlZWNobWFya0ludGVyZmFjZVxcclxcbiAqIEBpbXBsZW1lbnRzIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZVxcclxcbiAqL1xcblxcbnZhciBHZXN0dXJlRmVhdHVyZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0SG9zdEZlYXR1cmUkKSB7XFxuICBHZXN0dXJlRmVhdHVyZV9pbmhlcml0cyhHZXN0dXJlRmVhdHVyZSwgX0Fic3RyYWN0SG9zdEZlYXR1cmUkKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBHZXN0dXJlRmVhdHVyZV9jcmVhdGVTdXBlcihHZXN0dXJlRmVhdHVyZSk7XFxuXFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7Y29yZS9Ib3N0T2JqZWN0fSBob3N0IC0gSG9zdCBvYmplY3QgdGhhdCBvd25zIHRoZSBmZWF0dXJlLlxcclxcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGZlYXR1cmUuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaG9sZFRpbWUgPSAzXSAtIEFtb3VudCBvZiB0aW1lIGluIHNlY29uZHMgdGhhdCBtdXN0XFxyXFxuICAgKiBlbGFwc2UgYmVmb3JlIGFkdmFuY2luZyBhIGdlc3R1cmUgdGhhdFxcJ3MgYSB7QGxpbmsgUXVldWVTdGF0ZX0gd2hlbiB0aGUgY3VycmVudFxcclxcbiAgICogc3RhdGUgaW4gdGhlIHF1ZXVlIGlzIHNldCB0byBsb29wIGluZmluaXRlbHkuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluaW11bUludGVydmFsID0gMC4yNV0gLSBUaGUgbWluaW11bSBhbW91bnQgb2YgdGltZVxcclxcbiAgICogaW4gc2Vjb25kcyB0aGF0IG11c3QgZWxhcHNlIGJlZm9yZSBhbm90aGVyIGdlc3R1cmUgY2FuIGJlIHBsYXllZC5cXHJcXG4gICAqIEBwYXJhbSAge09iamVjdH0gbGF5ZXJzIC0gQW4gb2JqZWN0IHRoYXQgbWFwcyBsYXllciBuYW1lcyB0byBsYXllciBvcHRpb25zLlxcclxcbiAgICogVGhlc2UgYXJlIHRoZSBsYXllcnMgdGhhdCB3aWxsIGJlIHJlZ2lzdGVyZWQgYXMgdHJhY2tlZCBnZXN0dXJlIGxheWVycy4gU2VlXFxyXFxuICAgKiB7QGxpbmsgTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlI3JlZ2lzdGVyTGF5ZXJ9IGZvciBtb3JlIGluZm9ybWF0aW9uXFxyXFxuICAgKiBvbiBleHBlY3RlZCBmb3JtYXQgZm9yIGVhY2ggbGF5ZXIgb3B0aW9ucyBvYmplY3QuXFxyXFxuICAgKi9cXG4gIGZ1bmN0aW9uIEdlc3R1cmVGZWF0dXJlKGhvc3QpIHtcXG4gICAgdmFyIF90aGlzO1xcblxcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXFxuICAgICAgICBfcmVmJGhvbGRUaW1lID0gX3JlZi5ob2xkVGltZSxcXG4gICAgICAgIGhvbGRUaW1lID0gX3JlZiRob2xkVGltZSA9PT0gdm9pZCAwID8gMyA6IF9yZWYkaG9sZFRpbWUsXFxuICAgICAgICBfcmVmJG1pbmltdW1JbnRlcnZhbCA9IF9yZWYubWluaW11bUludGVydmFsLFxcbiAgICAgICAgbWluaW11bUludGVydmFsID0gX3JlZiRtaW5pbXVtSW50ZXJ2YWwgPT09IHZvaWQgMCA/IDEgOiBfcmVmJG1pbmltdW1JbnRlcnZhbCxcXG4gICAgICAgIF9yZWYkbGF5ZXJzID0gX3JlZi5sYXllcnMsXFxuICAgICAgICBsYXllcnMgPSBfcmVmJGxheWVycyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJGxheWVycztcXG5cXG4gICAgR2VzdHVyZUZlYXR1cmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2VzdHVyZUZlYXR1cmUpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3QpO1xcbiAgICBfdGhpcy5ob2xkVGltZSA9IGhvbGRUaW1lO1xcbiAgICBfdGhpcy5taW5pbXVtSW50ZXJ2YWwgPSBtaW5pbXVtSW50ZXJ2YWw7IC8vIFJlZ2lzdGVyIHRoZSBnZXN0dXJlIGxheWVyc1xcblxcbiAgICBPYmplY3QuZW50cmllcyhsYXllcnMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYyKSB7XFxuICAgICAgdmFyIF9yZWYzID0gR2VzdHVyZUZlYXR1cmVfc2xpY2VkVG9BcnJheShfcmVmMiwgMiksXFxuICAgICAgICAgIG5hbWUgPSBfcmVmM1swXSxcXG4gICAgICAgICAgX3JlZjMkID0gX3JlZjNbMV0sXFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyQgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkO1xcblxcbiAgICAgIF90aGlzLnJlZ2lzdGVyTGF5ZXIobmFtZSwgb3B0aW9ucyk7XFxuICAgIH0pO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIFJldHVybiBhIHZhbGlkIGhvbGQgdGltZSB2YWx1ZS4gSWYgaG9sZCB0aW1lIGlzblxcJ3QgZGVmaW5lZCBmb3IgdGhlIGFuaW1hdGlvbixcXHJcXG4gICAqIHRyeSB0byB1c2UgdGhlIGhvbGQgdGltZSBmb3IgdGhlIGxheWVyLiBJZiB0aGF0XFwncyBub3QgZGVmaW5lZCwgZmFsbCBiYWNrIHRvXFxyXFxuICAgKiB0aGUgaG9sZCB0aW1lIGZvciB0aGUgZmVhdHVyZS5cXHJcXG4gICAqXFxyXFxuICAgKiBAcHJpdmF0ZVxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBsYXllciAtIE1hbmFnZWQgbGF5ZXIgb3B0aW9ucyBvYmplY3QuXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5pbWF0aW9uIC0gTWFuYWdlZCBhbmltYXRpb24gb3B0aW9ucyBvYmplY3QuXFxyXFxuICAgKlxcclxcbiAgICogQHJldHVybnMge251bWJlcn1cXHJcXG4gICAqL1xcblxcblxcbiAgR2VzdHVyZUZlYXR1cmVfY3JlYXRlQ2xhc3MoR2VzdHVyZUZlYXR1cmUsIFt7XFxuICAgIGtleTogXCJfZ2V0SG9sZFRpbWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRIb2xkVGltZShsYXllciwgYW5pbWF0aW9uKSB7XFxuICAgICAgdmFyIGxheWVySG9sZFRpbWUgPSBsYXllci5ob2xkVGltZSAhPT0gdW5kZWZpbmVkID8gbGF5ZXIuaG9sZFRpbWUgOiB0aGlzLmhvbGRUaW1lO1xcbiAgICAgIHJldHVybiBhbmltYXRpb24uaG9sZFRpbWUgIT09IHVuZGVmaW5lZCA/IGFuaW1hdGlvbi5ob2xkVGltZSA6IGxheWVySG9sZFRpbWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIHZhbGlkIG1pbmltdW0gaW50ZXJ2YWwgdmFsdWUuIElmIG1pbmltdW0gaW50ZXJ2YWwgaXNuXFwndCBkZWZpbmVkIGZvclxcclxcbiAgICAgKiB0aGUgYW5pbWF0aW9uLCB0cnkgdG8gdXNlIHRoZSBtaW5pbXVtIGludGVydmFsIGZvciB0aGUgbGF5ZXIuIElmIHRoYXRcXCdzIG5vdFxcclxcbiAgICAgKiBkZWZpbmVkLCBmYWxsIGJhY2sgdG8gdGhlIG1pbmltdW0gaW50ZXJ2YWwgZm9yIHRoZSBmZWF0dXJlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbGF5ZXIgLSBNYW5hZ2VkIGxheWVyIG9wdGlvbnMgb2JqZWN0LlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYW5pbWF0aW9uIC0gTWFuYWdlZCBhbmltYXRpb24gb3B0aW9ucyBvYmplY3QuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2dldE1pbmltdW1JbnRlcnZhbFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE1pbmltdW1JbnRlcnZhbChsYXllciwgYW5pbWF0aW9uKSB7XFxuICAgICAgdmFyIGxheWVyTWluaW11bUludGVydmFsID0gbGF5ZXIubWluaW11bUludGVydmFsICE9PSB1bmRlZmluZWQgPyBsYXllci5taW5pbXVtSW50ZXJ2YWwgOiB0aGlzLm1pbmltdW1JbnRlcnZhbDtcXG4gICAgICByZXR1cm4gYW5pbWF0aW9uLm1pbmltdW1JbnRlcnZhbCAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uLm1pbmltdW1JbnRlcnZhbCA6IGxheWVyTWluaW11bUludGVydmFsO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDYWxsYmFjayBmb3Ige0BsaW5rIGNvcmUvQW5pbWF0aW9uRmVhdHVyZSNwbGF5TmV4dEFuaW1hdGlvbn0gZXZlbnQuIElmIHRoZVxcclxcbiAgICAgKiBldmVudCBpcyBlbWl0dGVkIGZvciBhIG1hbmFnZWQgYW5pbWF0aW9uIGFuZCB0aGUgbmV3IHF1ZXVlZCBzdGF0ZSBjYW5ub3RcXHJcXG4gICAgICogYWR2YW5jZSBvbiBpdHMgb3duLCBzdGFydCBhIG5ldyB0aW1lciBwcm9taXNlIHRoYXQgd2lsbCBhZHZhbmNlIHRoZSBxdWV1ZVxcclxcbiAgICAgKiBvbmNlIGl0IHJlc29sdmVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgb2JqZWN0IHBhc3NlZCBmcm9tIHBsYXlOZXh0QW5pbWF0aW9uIGV2ZW50LlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBvd25zIHRoZSBxdWV1ZSBzdGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBxdWV1ZSBzdGF0ZSBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FuQWR2YW5jZSAtIFdoZXRoZXIgb3Igbm90IHRoZSBjdXJyZW50IHN0YXRlIGluIHRoZSBxdWV1ZVxcclxcbiAgICAgKiBjYW4gYWR2YW5jZSBvbiBpdHMgb3duLlxcclxcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUXVldWVFbmQgLSBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGluIHRoZSBxdWV1ZSBpcyB0aGUgbGFzdFxcclxcbiAgICAgKiBzdGF0ZSBpbiB0aGUgcXVldWUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uTmV4dFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uTmV4dChfcmVmNCkge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIHZhciBsYXllck5hbWUgPSBfcmVmNC5sYXllck5hbWUsXFxuICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBfcmVmNC5hbmltYXRpb25OYW1lLFxcbiAgICAgICAgICBjYW5BZHZhbmNlID0gX3JlZjQuY2FuQWR2YW5jZSxcXG4gICAgICAgICAgaXNRdWV1ZUVuZCA9IF9yZWY0LmlzUXVldWVFbmQ7XFxuICAgICAgLy8gRXhpdCBpZiB0aGlzIGlzblxcJ3QgYSBtYW5hZ2VkIGxheWVyXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfSAvLyBFeGl0IGlmIGl0IGlzblxcJ3QgYSBtYW5hZ2VkIGFuaW1hdGlvblxcblxcblxcbiAgICAgIHZhciBhbmltYXRpb24gPSBsYXllci5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdO1xcblxcbiAgICAgIGlmIChhbmltYXRpb24gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gU3RhcnQgYSBuZXcgdGltZXIgZm9yIGxvb3Bpbmcgc3RhdGVzIHRoYXQgYXJlblxcJ3QgdGhlIGVuZCBvZiB0aGUgcXVldWVcXG5cXG5cXG4gICAgICBpZiAoIWNhbkFkdmFuY2UgJiYgIWlzUXVldWVFbmQgJiYgbGF5ZXIuY3VycmVudEdlc3R1cmUgPT09IGFuaW1hdGlvbk5hbWUpIHtcXG4gICAgICAgIHZhciBob2xkVGltZSA9IHRoaXMuX2dldEhvbGRUaW1lKGxheWVyLCBhbmltYXRpb24pO1xcblxcbiAgICAgICAgbGF5ZXIuaG9sZFRpbWVyLmNhbmNlbCgpOyAvLyBTa2lwIHRvIHRoZSBuZXh0IGFuaW1hdGlvbiByaWdodCBhd2F5IGlmIGhvbGQgdGltZSBpcyB6ZXJvXFxuXFxuICAgICAgICBpZiAoaG9sZFRpbWUgPD0gMCkge1xcbiAgICAgICAgICB0aGlzLl9ob3N0LkFuaW1hdGlvbkZlYXR1cmUucGxheU5leHRBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKTtcXG4gICAgICAgIH0gLy8gV2FpdCBmb3IgdGhlIGdpdmVuIGhvbGQgdGltZSBiZWZvcmUgcHJvZ3Jlc3NpbmdcXG4gICAgICAgIGVsc2Uge1xcbiAgICAgICAgICBsYXllci5ob2xkVGltZXIgPSBjb3JlX1V0aWxzLndhaXQoaG9sZFRpbWUsIHtcXG4gICAgICAgICAgICBvbkZpbmlzaDogZnVuY3Rpb24gb25GaW5pc2goKSB7XFxuICAgICAgICAgICAgICAvLyBBZHZhbmNlIHRoZSBxdWV1ZSB0byB0aGUgbmV4dCBzdGF0ZVxcbiAgICAgICAgICAgICAgaWYgKGxheWVyLmN1cnJlbnRHZXN0dXJlID09PSBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgICAgICAgICAgIF90aGlzMi5faG9zdC5BbmltYXRpb25GZWF0dXJlLnBsYXlOZXh0QW5pbWF0aW9uKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENhbGxiYWNrIGZvciB7QGxpbmsgY29yZS9BbmltYXRpb25GZWF0dXJlI3N0b3BBbmltYXRpb259IGV2ZW50LiBJZiB0aGVcXHJcXG4gICAgICogZXZlbnQgaXMgZW1pdHRlZCBmb3IgYSBtYW5hZ2VkIGFuaW1hdGlvbiBjYW5jZWwgdGhlIGxheWVyXFwncyBzdG9yZWQgdGltZXJzLlxcclxcbiAgICAgKiBJZiB0aGUgbGF5ZXIgaXMgc2V0IHRvIGF1dG8tZGlzYWJsZSBzZXQgaXRzIHdlaWdodCB0byAwLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgb2JqZWN0IHBhc3NlZCBmcm9tIHBsYXlOZXh0QW5pbWF0aW9uIGV2ZW50LlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBvd25zIHRoZSBzdG9wcGVkIGFuaW1hdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gdGhhdCB3YXMgc3RvcHBlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb25TdG9wXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TdG9wKF9yZWY1KSB7XFxuICAgICAgdmFyIGxheWVyTmFtZSA9IF9yZWY1LmxheWVyTmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IF9yZWY1LmFuaW1hdGlvbk5hbWU7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBsYXllciBpcyBtYW5hZ2VkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIGFuaW1hdGlvbiBpcyBtYW5hZ2VkXFxuXFxuXFxuICAgICAgdmFyIGFuaW1hdGlvbiA9IGxheWVyLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV07XFxuXFxuICAgICAgaWYgKGFuaW1hdGlvbiAhPT0gdW5kZWZpbmVkICYmIGFuaW1hdGlvbk5hbWUgPT09IGxheWVyLmN1cnJlbnRHZXN0dXJlKSB7XFxuICAgICAgICBsYXllci5jdXJyZW50R2VzdHVyZSA9IG51bGw7XFxuICAgICAgICBsYXllci5wbGF5VGltZXIgPSBudWxsO1xcbiAgICAgICAgbGF5ZXIuaG9sZFRpbWVyLmNhbmNlbCgpOyAvLyBUdXJuIG9mZiBsYXllciB3ZWlnaHRcXG5cXG4gICAgICAgIGlmIChsYXllci5hdXRvRGlzYWJsZSkge1xcbiAgICAgICAgICB0aGlzLnNldExheWVyV2VpZ2h0cyhmdW5jdGlvbiAobmFtZSkge1xcbiAgICAgICAgICAgIHJldHVybiBuYW1lID09PSBsYXllck5hbWU7XFxuICAgICAgICAgIH0sIDApO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uQW5pbWF0aW9uQWRkZWRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkFuaW1hdGlvbkFkZGVkKF9yZWY2KSB7XFxuICAgICAgdmFyIGxheWVyTmFtZSA9IF9yZWY2LmxheWVyTmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IF9yZWY2LmFuaW1hdGlvbk5hbWU7XFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gbGF5ZXIuYW5pbWF0aW9uc1thbmltYXRpb25OYW1lXTsgLy8gUmVnaXN0ZXIgdGhlIGFuaW1hdGlvbiBhcyBhY3RpdmUgaWYgaXQgaXMgdW5tYW5hZ2VkXFxuXFxuICAgICAgICBpZiAoYW5pbWF0aW9uID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgICAgdGhpcy5yZWdpc3RlckFuaW1hdGlvbihsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUpO1xcbiAgICAgICAgfSAvLyBNYXJrIHRoZSBhbmltYXRpb24gYXMgYWN0aXZlIGlmIGl0IGlzIG1hbmFnZWRcXG4gICAgICAgIGVsc2Uge1xcbiAgICAgICAgICBhbmltYXRpb24uaXNBY3RpdmUgPSB0cnVlO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVnaXN0ZXJMYXllclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJMYXllcihuYW1lKSB7XFxuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xcblxcbiAgICAgIEdlc3R1cmVGZWF0dXJlX2dldChHZXN0dXJlRmVhdHVyZV9nZXRQcm90b3R5cGVPZihHZXN0dXJlRmVhdHVyZS5wcm90b3R5cGUpLCBcInJlZ2lzdGVyTGF5ZXJcIiwgdGhpcykuY2FsbCh0aGlzLCBuYW1lLCBHZXN0dXJlRmVhdHVyZV9vYmplY3RTcHJlYWQoR2VzdHVyZUZlYXR1cmVfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zKSwge30sIHtcXG4gICAgICAgIGhvbGRUaW1lcjogY29yZV9EZWZlcnJlZC5yZXNvbHZlKCksXFxuICAgICAgICBwbGF5VGltZXI6IG51bGwsXFxuICAgICAgICBjdXJyZW50R2VzdHVyZTogbnVsbFxcbiAgICAgIH0pKTtcXG5cXG4gICAgICBpZiAodGhpcy5fbWFuYWdlZExheWVyc1tuYW1lXS5pc0FjdGl2ZSkge1xcbiAgICAgICAgdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLmdldEFuaW1hdGlvbnMobmFtZSkuZm9yRWFjaChmdW5jdGlvbiAoYW5pbSkge1xcbiAgICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IHJlZ2lzdGVyIGFsbCBhbmltYXRpb25zIG9uIHRoZSBsYXllclxcbiAgICAgICAgICBpZiAoX3RoaXMzLl9tYW5hZ2VkTGF5ZXJzW25hbWVdLmFuaW1hdGlvbnNbYW5pbV0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgIF90aGlzMy5yZWdpc3RlckFuaW1hdGlvbihuYW1lLCBhbmltLCBfdGhpczMuX21hbmFnZWRMYXllcnNbbmFtZV0uYW5pbWF0aW9uc1thbmltXSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVnaXN0ZXJBbmltYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyQW5pbWF0aW9uKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSkge1xcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcXG5cXG4gICAgICAvLyBUcnkgdG8gZmFsbCBiYWNrIHRvIGEgZGVmYXVsdCB3b3JkIGFycmF5XFxuICAgICAgaWYgKCEob3B0aW9ucy53b3JkcyBpbnN0YW5jZW9mIEFycmF5KSAmJiAhKG9wdGlvbnMud29yZHMgaW5zdGFuY2VvZiBTZXQpKSB7XFxuICAgICAgICBvcHRpb25zLndvcmRzID0gRGVmYXVsdEdlc3R1cmVXb3Jkc1thbmltYXRpb25OYW1lXSB8fCBbXTtcXG4gICAgICB9XFxuXFxuICAgICAgR2VzdHVyZUZlYXR1cmVfZ2V0KEdlc3R1cmVGZWF0dXJlX2dldFByb3RvdHlwZU9mKEdlc3R1cmVGZWF0dXJlLnByb3RvdHlwZSksIFwicmVnaXN0ZXJBbmltYXRpb25cIiwgdGhpcykuY2FsbCh0aGlzLCBsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUsIG9wdGlvbnMpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDcmVhdGUgYW4gb2JqZWN0IHRoYXQgbWFwcyBzc21sIG1hcmsgc3ludGF4IHJlcXVpcmVkIHRvIHBsYXkgZWFjaCBnZXN0dXJlIHRvXFxyXFxuICAgICAqIHRoZSB3b3JkcyBhcnJheSBhc3NvY2lhdGVkIHdpdGggZWFjaCBnZXN0dXJlLiBXb3JkcyBhcnJheXMgYXJlIGRlZmluZWQgYXQgd2hlblxcclxcbiAgICAgKiB0aGUgZ2VzdHVyZSBhbmltYXRpb24gaXMgcmVnaXN0ZXJlZC4gR2VzdHVyZXMgd2l0aG91dCBhc3NvY2lhdGVkIHdvcmRzIHdpbGxcXHJcXG4gICAgICogYmUgZXhjbHVkZWQgZnJvbSB0aGUgcmVzdWx0LiBUaGUgcmVzdWx0aW5nIG9iamVjdCBjYW4gYmUgdXNlZCBhcyBhbiBpbnB1dFxcclxcbiAgICAgKiBmb3Ige0BsaW5rIFRleHRUb1NwZWVjaFV0aWxzLmF1dG9HZW5lcmF0ZVNTTUxNYXJrc30gdG8gdXBkYXRlIGEgc3BlZWNoIHN0cmluZ1xcclxcbiAgICAgKiB3aXRoIHRoZSBtYXJrdXAgcmVxdWlyZWQgdG8gcGxheSBnZXN0dXJlcyB0aW1lZCB3aXRoIHRoZWlyIGFzc29jaWF0ZWQgd29yZHMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY3JlYXRlR2VzdHVyZU1hcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlR2VzdHVyZU1hcCgpIHtcXG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICB2YXIgZ2VzdHVyZU1hcCA9IHt9O1xcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX21hbmFnZWRMYXllcnMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY3KSB7XFxuICAgICAgICB2YXIgX3JlZjggPSBHZXN0dXJlRmVhdHVyZV9zbGljZWRUb0FycmF5KF9yZWY3LCAyKSxcXG4gICAgICAgICAgICBsYXllck5hbWUgPSBfcmVmOFswXSxcXG4gICAgICAgICAgICBhbmltYXRpb25zID0gX3JlZjhbMV0uYW5pbWF0aW9ucztcXG5cXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGFuaW1hdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY5KSB7XFxuICAgICAgICAgIHZhciBfcmVmMTAgPSBHZXN0dXJlRmVhdHVyZV9zbGljZWRUb0FycmF5KF9yZWY5LCAyKSxcXG4gICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBfcmVmMTBbMF0sXFxuICAgICAgICAgICAgICBfcmVmMTAkID0gX3JlZjEwWzFdLFxcbiAgICAgICAgICAgICAgaG9sZFRpbWUgPSBfcmVmMTAkLmhvbGRUaW1lLFxcbiAgICAgICAgICAgICAgbWluaW11bUludGVydmFsID0gX3JlZjEwJC5taW5pbXVtSW50ZXJ2YWwsXFxuICAgICAgICAgICAgICB3b3JkcyA9IF9yZWYxMCQud29yZHMsXFxuICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZSA9IF9yZWYxMCQudHJhbnNpdGlvblRpbWU7XFxuXFxuICAgICAgICAgIC8vIE9ubHkgc3RvcmUgZ2VzdHVyZXMgdGhhdCBoYXZlIGFueSBhc3NvY2lhdGVkIHdvcmRzXFxuICAgICAgICAgIGlmICh3b3Jkcy5sZW5ndGgpIHtcXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IEdlc3R1cmVGZWF0dXJlX29iamVjdFNwcmVhZChHZXN0dXJlRmVhdHVyZV9vYmplY3RTcHJlYWQoR2VzdHVyZUZlYXR1cmVfb2JqZWN0U3ByZWFkKHt9LCBob2xkVGltZSAmJiB7XFxuICAgICAgICAgICAgICBob2xkVGltZTogaG9sZFRpbWVcXG4gICAgICAgICAgICB9KSwgbWluaW11bUludGVydmFsICYmIHtcXG4gICAgICAgICAgICAgIG1pbmltdW1JbnRlcnZhbDogbWluaW11bUludGVydmFsXFxuICAgICAgICAgICAgfSksIHRyYW5zaXRpb25UaW1lICYmIHtcXG4gICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lOiB0cmFuc2l0aW9uVGltZVxcbiAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgIHZhciBrZXkgPSB7XFxuICAgICAgICAgICAgICBmZWF0dXJlOiBfdGhpczQuY29uc3RydWN0b3IubmFtZSxcXG4gICAgICAgICAgICAgIG1ldGhvZDogXFwncGxheUdlc3R1cmVcXCcsXFxuICAgICAgICAgICAgICBhcmdzOiBbbGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lLCBvcHRpb25zXVxcbiAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgZ2VzdHVyZU1hcFtKU09OLnN0cmluZ2lmeShrZXkpXSA9IHdvcmRzO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gZ2VzdHVyZU1hcDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ3JlYXRlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgc3NtbCBtYXJrIHN5bnRheCByZXF1aXJlZCB0byBwbGF5IGVhY2ggZ2VzdHVyZVxcclxcbiAgICAgKiB0aGF0IGRvZXMgbm90IGhhdmUgYW55IGFzc29jaWF0ZWQgd29yZHMuIFRoZSByZXN1bHRpbmcgYXJyYXkgY2FuIGJlIHVzZWQgYXNcXHJcXG4gICAgICogYW4gaW5wdXQgZm9yIHtAbGluayBUZXh0VG9TcGVlY2hVdGlscy5hdXRvR2VuZXJhdGVTU01MTWFya3N9IG9yXFxyXFxuICAgICAqIHtAbGluayBUZXh0VG9TcGVlY2hVdGlscy5hZGRNYXJrc1RvVW5tYXJrZWRTZW50ZW5jZXN9IHRvIHVwZGF0ZSBhIHNwZWVjaFxcclxcbiAgICAgKiBzdHJpbmcgd2l0aCB0aGUgbWFya3VwIHJlcXVpcmVkIHRvIHBsYXkgcmFuZG9tIGdlc3R1cmVzIGF0IGVhY2ggdW5tYXJrZWRcXHJcXG4gICAgICogc2VudGVuY2UgaW4gdGhlIHN0cmluZy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPj19IGxheWVycyAtIEFuIGFycmF5IG9mIG5hbWVzIG9mIG1hbmFnZWQgbGF5ZXJzIHRvIGdlbmVyYXRlXFxyXFxuICAgICAqIG1hcmtzIGZvci4gSWYgdW5kZWZpbmVkLCB1c2UgYWxsIG1hbmFnZWQgbGF5ZXJzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPHN0cmluZz59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY3JlYXRlR2VuZXJpY0dlc3R1cmVBcnJheVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlR2VuZXJpY0dlc3R1cmVBcnJheShsYXllcnMpIHtcXG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcXG5cXG4gICAgICB2YXIgZ2VuZXJpY0dlc3R1cmVzID0gW107XFxuICAgICAgbGF5ZXJzID0gbGF5ZXJzIHx8IE9iamVjdC5rZXlzKHRoaXMuX21hbmFnZWRMYXllcnMpO1xcbiAgICAgIGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllck5hbWUpIHtcXG4gICAgICAgIHZhciBsYXllciA9IF90aGlzNS5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdOyAvLyBNYWtlIHN1cmUgdGhlIGxheWVyIGlzIG1hbmFnZWRcXG5cXG4gICAgICAgIGlmICghbGF5ZXIpIHtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobGF5ZXIuYW5pbWF0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjExKSB7XFxuICAgICAgICAgIHZhciBfcmVmMTIgPSBHZXN0dXJlRmVhdHVyZV9zbGljZWRUb0FycmF5KF9yZWYxMSwgMiksXFxuICAgICAgICAgICAgICBhbmltYXRpb25OYW1lID0gX3JlZjEyWzBdLFxcbiAgICAgICAgICAgICAgX3JlZjEyJCA9IF9yZWYxMlsxXSxcXG4gICAgICAgICAgICAgIGhvbGRUaW1lID0gX3JlZjEyJC5ob2xkVGltZSxcXG4gICAgICAgICAgICAgIG1pbmltdW1JbnRlcnZhbCA9IF9yZWYxMiQubWluaW11bUludGVydmFsLFxcbiAgICAgICAgICAgICAgd29yZHMgPSBfcmVmMTIkLndvcmRzLFxcbiAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWUgPSBfcmVmMTIkLnRyYW5zaXRpb25UaW1lO1xcblxcbiAgICAgICAgICAvLyBPbmx5IHN0b3JlIGdlc3R1cmVzIHRoYXQgZG9uXFwndCBoYXZlIGFueSBhc3NvY2lhdGVkIHdvcmRzXFxuICAgICAgICAgIGlmICghd29yZHMubGVuZ3RoKSB7XFxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBHZXN0dXJlRmVhdHVyZV9vYmplY3RTcHJlYWQoR2VzdHVyZUZlYXR1cmVfb2JqZWN0U3ByZWFkKEdlc3R1cmVGZWF0dXJlX29iamVjdFNwcmVhZCh7fSwgaG9sZFRpbWUgJiYge1xcbiAgICAgICAgICAgICAgaG9sZFRpbWU6IGhvbGRUaW1lXFxuICAgICAgICAgICAgfSksIG1pbmltdW1JbnRlcnZhbCAmJiB7XFxuICAgICAgICAgICAgICBtaW5pbXVtSW50ZXJ2YWw6IG1pbmltdW1JbnRlcnZhbFxcbiAgICAgICAgICAgIH0pLCB0cmFuc2l0aW9uVGltZSAmJiB7XFxuICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltZTogdHJhbnNpdGlvblRpbWVcXG4gICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICB2YXIga2V5ID0gSlNPTi5zdHJpbmdpZnkoe1xcbiAgICAgICAgICAgICAgZmVhdHVyZTogX3RoaXM1LmNvbnN0cnVjdG9yLm5hbWUsXFxuICAgICAgICAgICAgICBtZXRob2Q6IFxcJ3BsYXlHZXN0dXJlXFwnLFxcbiAgICAgICAgICAgICAgYXJnczogW2xheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSwgb3B0aW9uc11cXG4gICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICBpZiAoIWdlbmVyaWNHZXN0dXJlcy5pbmNsdWRlcyhrZXkpKSB7XFxuICAgICAgICAgICAgICBnZW5lcmljR2VzdHVyZXMucHVzaChrZXkpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIGdlbmVyaWNHZXN0dXJlcztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGxheSBhIG1hbmFnZWQgZ2VzdHVyZSBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBjb250YWlucyB0aGUgZ2VzdHVyZVxcclxcbiAgICAgKiBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGdlc3R1cmUgYW5pbWF0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25hbCBnZXN0dXJlIG9wdGlvbnMuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0aW9ucy5ob2xkVGltZSAtIFRoaXMgb3B0aW9uIG9ubHkgYXBwbGllcyB0byB7QGxpbmsgUXVldWVTdGF0ZX1cXHJcXG4gICAgICogZ2VzdHVyZXMuIFdoZW4gYSBRdWV1ZVN0YXRlIGdlc3R1cmUgcHJvZ3Jlc3NlcyB0byBhIGxvb3Bpbmcgc3RhdGUsIHRoaXMgb3B0aW9uXFxyXFxuICAgICAqIGRlZmluZXMgaG93IG1hbnkgc2Vjb25kcyBzaG91bGQgZWxhcHNlIGJlZm9yZSBtb3ZpbmcgdGhlIHF1ZXVlIGZvcndhcmQuIElmXFxyXFxuICAgICAqIHVuZGVmaW5lZCwgaXQgd2lsbCBmYWxsIGJhY2sgZmlyc3QgdG8gdGhlIGhvbGRUaW1lIGRlZmluZWQgaW4gdGhlIG9wdGlvbnMgd2hlblxcclxcbiAgICAgKiB0aGUgZ2VzdHVyZSBhbmltYXRpb24gd2FzIHJlZ2lzdGVyZWQgYW5kIHRoZW4gdG8gdGhlIGhvbGRUaW1lIGRlZmluZWQgb24gdGhlXFxyXFxuICAgICAqIGZlYXR1cmUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0aW9ucy5taW5pbXVtSW50ZXJ2YWwgLSBUaGUgbWluaW11bSBhbW91bnQgb2YgdGltZSB0aGF0XFxyXFxuICAgICAqIG11c3QgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgYSBnZXN0dXJlIHdhcyBwbGF5ZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGxheUdlc3R1cmVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXlHZXN0dXJlKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSkge1xcbiAgICAgIHZhciBfcmVmMTMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxcbiAgICAgICAgICBob2xkVGltZSA9IF9yZWYxMy5ob2xkVGltZSxcXG4gICAgICAgICAgbWluaW11bUludGVydmFsID0gX3JlZjEzLm1pbmltdW1JbnRlcnZhbCxcXG4gICAgICAgICAgdHJhbnNpdGlvblRpbWUgPSBfcmVmMTMudHJhbnNpdGlvblRpbWUsXFxuICAgICAgICAgIF9yZWYxMyRmb3JjZSA9IF9yZWYxMy5mb3JjZSxcXG4gICAgICAgICAgZm9yY2UgPSBfcmVmMTMkZm9yY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEzJGZvcmNlO1xcblxcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgYW5pbWF0aW9uIGlzIHJlZ2lzdGVyZWRcXG4gICAgICBpZiAodGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdID09PSB1bmRlZmluZWQgfHwgdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhpcy5yZWdpc3RlckFuaW1hdGlvbihsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUsIHtcXG4gICAgICAgICAgaG9sZFRpbWU6IGhvbGRUaW1lLFxcbiAgICAgICAgICBtaW5pbXVtSW50ZXJ2YWw6IG1pbmltdW1JbnRlcnZhbCxcXG4gICAgICAgICAgdHJhbnNpdGlvblRpbWU6IHRyYW5zaXRpb25UaW1lXFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdO1xcbiAgICAgIHZhciBhbmltYXRpb24gPSBsYXllci5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdOyAvLyBNYWtlIHN1cmUgdGhlIGFuaW1hdGlvbiBpcyBhY3RpdmVcXG5cXG4gICAgICBpZiAoIWFuaW1hdGlvbi5pc0FjdGl2ZSkge1xcbiAgICAgICAgLy8gQ3JlYXRlIHdhcm5pbmcgbWVzc2FnZSBiYXNlZCBvbiB3aGljaCBvYmplY3QgZG9lc25cXCd0IGV4aXN0IHlldFxcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gbGF5ZXIuaXNBY3RpdmUgPyBcXCdhbmltYXRpb25cXCcgOiBcXCdsYXllclxcJztcXG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJTa2lwcGluZyBnZXN0dXJlIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KGxheWVyTmFtZSwgXCIgZm9yIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gXCIpLmNvbmNhdCh0eXBlTmFtZSwgXCIgZXhpc3RzIHdpdGggdGhpcyBuYW1lIHlldC5cIik7XFxuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5jYW5jZWwoe1xcbiAgICAgICAgICByZWFzb246IFxcJ2luYWN0aXZlXFwnLFxcbiAgICAgICAgICB2YWx1ZTogdHlwZU5hbWVcXG4gICAgICAgIH0pO1xcbiAgICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGdlc3R1cmUgaXMgYWxyZWFkeSBwbGF5aW5nXFxuXFxuXFxuICAgICAgdmFyIGN1cnJlbnRHZXN0dXJlID0gbGF5ZXIuY3VycmVudEdlc3R1cmU7XFxuXFxuICAgICAgaWYgKGN1cnJlbnRHZXN0dXJlID09PSBhbmltYXRpb25OYW1lICYmICFmb3JjZSkge1xcbiAgICAgICAgdmFyIF9tZXNzYWdlID0gXCJTa2lwcGluZyBnZXN0dXJlIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KGxheWVyTmFtZSwgXCIgZm9yIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gVGhlIGdlc3R1cmUgaXMgYWxyZWFkeSBwbGF5aW5nLiBVc2Ugb3B0aW9ucy5mb3JjZSB0byBmb3JjZSB0aGUgZ2VzdHVyZSByZXBsYXksIHdoaWNoIG1heSByZXN1bHQgaW4gYSBoYXJkIHRyYW5zaXRpb24uXCIpO1xcblxcbiAgICAgICAgY29uc29sZS53YXJuKF9tZXNzYWdlKTtcXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLmNhbmNlbCh7XFxuICAgICAgICAgIHJlYXNvbjogXFwncGxheWluZ1xcJyxcXG4gICAgICAgICAgdmFsdWU6IGFuaW1hdGlvbk5hbWVcXG4gICAgICAgIH0pO1xcbiAgICAgIH0gLy8gVXBkYXRlIGFuaW1hdGlvbiBvcHRpb25zXFxuXFxuXFxuICAgICAgaWYgKGhvbGRUaW1lICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIGFuaW1hdGlvbi5ob2xkVGltZSA9IGhvbGRUaW1lO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAobWluaW11bUludGVydmFsICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIGFuaW1hdGlvbi5taW5pbXVtSW50ZXJ2YWwgPSBtaW5pbXVtSW50ZXJ2YWw7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG1pbmltdW1JbnRlcnZhbCA9IHRoaXMuX2dldE1pbmltdW1JbnRlcnZhbChsYXllciwgYW5pbWF0aW9uKTtcXG4gICAgICB9IC8vIENoZWNrIHRoZSBpbnRlcnZhbFxcblxcblxcbiAgICAgIGlmICghZm9yY2UgJiYgbGF5ZXIucGxheVRpbWVyICE9PSBudWxsICYmIGxheWVyLnBsYXlUaW1lciA8IG1pbmltdW1JbnRlcnZhbCkge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiU2tpcHBpbmcgZ2VzdHVyZSBcIi5jb25jYXQoYW5pbWF0aW9uTmFtZSwgXCIgb24gbGF5ZXIgXCIpLmNvbmNhdChsYXllck5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE1pbmltdW0gaW50ZXJ2YWwgXCIpLmNvbmNhdChtaW5pbXVtSW50ZXJ2YWwsIFwiIGhhcyBub3QgYmVlbiBtZXQuXCIpKTtcXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLmNhbmNlbCh7XFxuICAgICAgICAgIHJlYXNvbjogXFwnbWluaW11bUludGVydmFsXFwnLFxcbiAgICAgICAgICB2YWx1ZTogbWluaW11bUludGVydmFsIC0gbGF5ZXIucGxheVRpbWVyXFxuICAgICAgICB9KTtcXG4gICAgICB9IC8vIFBsYXkgdGhlIGFuaW1hdGlvblxcblxcblxcbiAgICAgIGxheWVyLmN1cnJlbnRHZXN0dXJlID0gYW5pbWF0aW9uTmFtZTtcXG4gICAgICBsYXllci5wbGF5VGltZXIgPSAwO1xcbiAgICAgIGxheWVyLmhvbGRUaW1lci5jYW5jZWwoKTtcXG5cXG4gICAgICBpZiAobGF5ZXIuYXV0b0Rpc2FibGUpIHtcXG4gICAgICAgIHRoaXMuc2V0TGF5ZXJXZWlnaHRzKGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICAgIHJldHVybiBuYW1lID09PSBsYXllck5hbWU7XFxuICAgICAgICB9LCAxKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHRoaXMuX2hvc3QuQW5pbWF0aW9uRmVhdHVyZS5wbGF5QW5pbWF0aW9uKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSwgdHJhbnNpdGlvblRpbWUpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkZWx0YVRpbWUpIHtcXG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcXG5cXG4gICAgICBHZXN0dXJlRmVhdHVyZV9nZXQoR2VzdHVyZUZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoR2VzdHVyZUZlYXR1cmUucHJvdG90eXBlKSwgXCJ1cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBkZWx0YVRpbWUpOyAvLyBJbmNyZW1lbnQgdGhlIHRpbWVyc1xcblxcblxcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX21hbmFnZWRMYXllcnMpLmZvckVhY2goZnVuY3Rpb24gKF9yZWYxNCkge1xcbiAgICAgICAgdmFyIF9yZWYxNSA9IEdlc3R1cmVGZWF0dXJlX3NsaWNlZFRvQXJyYXkoX3JlZjE0LCAyKSxcXG4gICAgICAgICAgICBuYW1lID0gX3JlZjE1WzBdLFxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMTVbMV07XFxuXFxuICAgICAgICBpZiAob3B0aW9ucy5pc0FjdGl2ZSAmJiAhX3RoaXM2Ll9ob3N0LkFuaW1hdGlvbkZlYXR1cmUuZ2V0UGF1c2VkKG5hbWUpKSB7XFxuICAgICAgICAgIG9wdGlvbnMuaG9sZFRpbWVyLmV4ZWN1dGUoZGVsdGFUaW1lKTtcXG5cXG4gICAgICAgICAgaWYgKG9wdGlvbnMucGxheVRpbWVyICE9PSBudWxsKSB7XFxuICAgICAgICAgICAgb3B0aW9ucy5wbGF5VGltZXIgKz0gZGVsdGFUaW1lIC8gMTAwMDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJpbnN0YWxsQXBpXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnN0YWxsQXBpKCkge1xcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBpbm5lclxcclxcbiAgICAgICAqIEBuYW1lc3BhY2UgR2VzdHVyZUZlYXR1cmVcXHJcXG4gICAgICAgKi9cXG4gICAgICB2YXIgYXBpID0gR2VzdHVyZUZlYXR1cmVfZ2V0KEdlc3R1cmVGZWF0dXJlX2dldFByb3RvdHlwZU9mKEdlc3R1cmVGZWF0dXJlLnByb3RvdHlwZSksIFwiaW5zdGFsbEFwaVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcblxcbiAgICAgIE9iamVjdC5hc3NpZ24oYXBpLCB7XFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBHZXN0dXJlRmVhdHVyZVxcclxcbiAgICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICAgKiBAbWV0aG9kXFxyXFxuICAgICAgICAgKiBAc2VlIEdlc3R1cmVGZWF0dXJlI2NyZWF0ZUdlc3R1cmVNYXBcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgY3JlYXRlR2VzdHVyZU1hcDogdGhpcy5jcmVhdGVHZXN0dXJlTWFwLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBHZXN0dXJlRmVhdHVyZVxcclxcbiAgICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICAgKiBAbWV0aG9kXFxyXFxuICAgICAgICAgKiBAc2VlIEdlc3R1cmVGZWF0dXJlI2NyZWF0ZUdlbmVyaWNHZXN0dXJlQXJyYXlcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgY3JlYXRlR2VuZXJpY0dlc3R1cmVBcnJheTogdGhpcy5jcmVhdGVHZW5lcmljR2VzdHVyZUFycmF5LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBHZXN0dXJlRmVhdHVyZVxcclxcbiAgICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICAgKiBAbWV0aG9kXFxyXFxuICAgICAgICAgKiBAc2VlIEdlc3R1cmVGZWF0dXJlI3BsYXlHZXN0dXJlXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHBsYXlHZXN0dXJlOiB0aGlzLnBsYXlHZXN0dXJlLmJpbmQodGhpcylcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIEdlc3R1cmVGZWF0dXJlO1xcbn0oY29yZV9BYnN0cmFjdEhvc3RGZWF0dXJlLm1peChhd3NwYWNrX1NTTUxTcGVlY2htYXJrSW50ZXJmYWNlLk1peGluLCBhbmltcGFja19NYW5hZ2VkQW5pbWF0aW9uTGF5ZXJJbnRlcmZhY2UuTWl4aW4pKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhHZXN0dXJlRmVhdHVyZSwge1xcbiAgREVGQVVMVF9MQVlFUl9PUFRJT05TOiB7XFxuICAgIHZhbHVlOiBHZXN0dXJlRmVhdHVyZV9vYmplY3RTcHJlYWQoR2VzdHVyZUZlYXR1cmVfb2JqZWN0U3ByZWFkKHt9LCBHZXN0dXJlRmVhdHVyZS5ERUZBVUxUX0xBWUVSX09QVElPTlMpLCB7fSwge1xcbiAgICAgIGF1dG9EaXNhYmxlOiB0cnVlXFxuICAgIH0pLFxcbiAgICB3cml0YWJsZTogZmFsc2VcXG4gIH0sXFxuICBFVkVOVF9ERVBFTkRFTkNJRVM6IHtcXG4gICAgdmFsdWU6IEdlc3R1cmVGZWF0dXJlX29iamVjdFNwcmVhZChHZXN0dXJlRmVhdHVyZV9vYmplY3RTcHJlYWQoe30sIEdlc3R1cmVGZWF0dXJlLkVWRU5UX0RFUEVOREVOQ0lFUyksIHt9LCB7XFxuICAgICAgQW5pbWF0aW9uRmVhdHVyZTogR2VzdHVyZUZlYXR1cmVfb2JqZWN0U3ByZWFkKEdlc3R1cmVGZWF0dXJlX29iamVjdFNwcmVhZCh7fSwgR2VzdHVyZUZlYXR1cmUuRVZFTlRfREVQRU5ERU5DSUVTLkFuaW1hdGlvbkZlYXR1cmUpLCB7fSwge1xcbiAgICAgICAgcGxheU5leHRBbmltYXRpb246IFxcJ19vbk5leHRcXCcsXFxuICAgICAgICBzdG9wQW5pbWF0aW9uOiBcXCdfb25TdG9wXFwnLFxcbiAgICAgICAgaW50ZXJydXB0QW5pbWF0aW9uOiBcXCdfb25TdG9wXFwnXFxuICAgICAgfSlcXG4gICAgfSlcXG4gIH1cXG59KTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGNvcmVfR2VzdHVyZUZlYXR1cmUgPSAoR2VzdHVyZUZlYXR1cmUpO1xcblxcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2FuaW1wYWNrL0FuaW1hdGlvblV0aWxzLmpzXFxuZnVuY3Rpb24gQW5pbWF0aW9uVXRpbHNfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblV0aWxzX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblV0aWxzX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgQW5pbWF0aW9uVXRpbHNfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEFuaW1hdGlvblV0aWxzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuXFxuXFxuXFxuLyoqXFxyXFxuICogQSBjb2xsZWN0aW9uIG9mIHVzZWZ1bCBhbmltYXRpb24gZnVuY3Rpb25zLlxcclxcbiAqXFxyXFxuICogQGhpZGVjb25zdHJ1Y3RvclxcclxcbiAqL1xcblxcbnZhciBBbmltYXRpb25VdGlscyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBBbmltYXRpb25VdGlscygpIHtcXG4gICAgQW5pbWF0aW9uVXRpbHNfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0aW9uVXRpbHMpO1xcbiAgfVxcblxcbiAgQW5pbWF0aW9uVXRpbHNfY3JlYXRlQ2xhc3MoQW5pbWF0aW9uVXRpbHMsIG51bGwsIFt7XFxuICAgIGtleTogXCJsZXJwXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZXJwKGZyb20sIHRvLCBmYWN0b3IpIHtcXG4gICAgICBjb25zb2xlLndhcm4oXCJBbmltYXRpb25VdGlscy5sZXJwIGlzIGJlaW5nIGRlcHJlY2F0ZWQuIFVzZSBNYXRoVXRpbHMubGVycCBpbnN0ZWFkLlwiKTtcXG4gICAgICByZXR1cm4gY29yZV9NYXRoVXRpbHMubGVycChmcm9tLCB0bywgZmFjdG9yKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ2xhbXAgYSBudW1iZXIgYmV0d2VlbiAyIHZhbHVlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVmFsdWUgdG8gY2xhbXAuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWluPTBdIC0gTWludW11bSB2YWx1ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttYXg9MV0gLSBNYXhpbXVtIHZhbHVlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImNsYW1wXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xcbiAgICAgIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XFxuICAgICAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcXG4gICAgICBjb25zb2xlLndhcm4oXCJBbmltYXRpb25VdGlscy5jbGFtcCBpcyBiZWluZyBkZXByZWNhdGVkLiBVc2UgTWF0aFV0aWxzLmNsYW1wIGluc3RlYWQuXCIpO1xcbiAgICAgIHJldHVybiBjb3JlX01hdGhVdGlscy5jbGFtcCh2YWx1ZSwgbWluLCBtYXgpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gYSBkZWZlcnJlZCBwcm9taXNlIHRoYXQgY2FuIGJlIHVzZWQgdG8gdXBkYXRlIHRoZSB2YWx1ZSBvZiBhIG51bWVyaWNcXHJcXG4gICAgICogcHJvcGVydHkgb2YgdGhpcyBvYmplY3Qgb3ZlciB0aW1lLiBQYXNzIGRlbHRhIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIHRoZVxcclxcbiAgICAgKiBkZWZlcnJlZCBwcm9taXNlXFwncyBleGVjdXRlIG1ldGhvZCBpbiBhbiB1cGRhdGUgbG9vcCB0byBhbmltYXRlIHRoZSBwcm9wZXJ0eVxcclxcbiAgICAgKiB0b3dhcmRzIHRoZSB0YXJnZXQgdmFsdWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0eU93bmVyIC0gT2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHByb3BlcnR5IHRvIGFuaW1hdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5TmFtZSAtIE5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGFuaW1hdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXRWYWx1ZSAtIFRhcmdldCB2YWx1ZSB0byByZWFjaC5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIC0gT3B0aW9uYWwgb3B0aW9ucyBvYmplY3RcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNlY29uZHM9MF0gLSBOdW1iZXIgb2Ygc2Vjb25kcyBpdCB3aWxsIHRha2UgdG8gcmVhY2hcXHJcXG4gICAgICogdGhlIHRhcmdldCB2YWx1ZS5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZWFzaW5nRm49TGluZWFyLkluT3V0XSAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIGFuaW1hdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMub25GaW5pc2hdIC0gQ2FsbGJhY2sgdG8gZXhlY3V0ZSBvbmNlIHRoZSBhbmltYXRpb24gY29tcGxldGVzLlxcclxcbiAgICAgKiBUaGUgdGFyZ2V0IHZhbHVlIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMub25Qcm9ncmVzcyAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSBhbmltYXRpb25cXHJcXG4gICAgICogcHJvcGVydHkgaXMgdXBkYXRlZCBkdXJpbmcgdGhlIGFuaW1hdGlvbi4gVGhlIHByb3BlcnR5XFwncyB2YWx1ZSBhdCB0aGUgdGltZSBvZlxcclxcbiAgICAgKiB0aGUgdXBkYXRlIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMub25DYW5jZWwgLSBDYWxsYmFjayB0byBleGVjdXRlIGlmIHRoZSB1c2VyIGNhbmNlbHMgdGhlXFxyXFxuICAgICAqIGFuaW1hdGlvbiBiZWZvcmUgY29tcGxldGlvbi4gVGhlIGFuaW1hdGlvbiBwcm9wZXJ0eVxcJ3MgdmFsdWUgYXQgdGhlIHRpbWUgb2ZcXHJcXG4gICAgICogY2FuY2VsIGlzIHBhc3NlZCBhcyBhIHBhcmFtZXRlci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMub25FcnJvciAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgaWYgdGhlIGFuaW1hdGlvbiBzdG9wc1xcclxcbiAgICAgKiBiZWNhdXNlIGFuIGVycm9yIGlzIGVuY291bnRlcmVkLiBUaGUgZXJyb3IgbWVzc2FnZSBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmVzb2x2ZXMgd2l0aCB0aGUgcHJvcGVydHlcXCdzIHZhbHVlIG9uY2UgaXQgcmVhY2hlcyB0aGVcXHJcXG4gICAgICogdGFyZ2V0IHZhbHVlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImludGVycG9sYXRlUHJvcGVydHlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGludGVycG9sYXRlUHJvcGVydHkocHJvcGVydHlPd25lciwgcHJvcGVydHlOYW1lLCB0YXJnZXRWYWx1ZSkge1xcbiAgICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fSxcXG4gICAgICAgICAgX3JlZiRzZWNvbmRzID0gX3JlZi5zZWNvbmRzLFxcbiAgICAgICAgICBzZWNvbmRzID0gX3JlZiRzZWNvbmRzID09PSB2b2lkIDAgPyAwIDogX3JlZiRzZWNvbmRzLFxcbiAgICAgICAgICBlYXNpbmdGbiA9IF9yZWYuZWFzaW5nRm4sXFxuICAgICAgICAgIF9vbkZpbmlzaCA9IF9yZWYub25GaW5pc2gsXFxuICAgICAgICAgIF9vblByb2dyZXNzID0gX3JlZi5vblByb2dyZXNzLFxcbiAgICAgICAgICBfb25DYW5jZWwgPSBfcmVmLm9uQ2FuY2VsLFxcbiAgICAgICAgICBvbkVycm9yID0gX3JlZi5vbkVycm9yO1xcblxcbiAgICAgIC8vIE1ha2Ugc3VyZSBwcm9wZXJ0eSBpcyBhbiBvYmplY3RcXG4gICAgICBpZiAoIShwcm9wZXJ0eU93bmVyIGluc3RhbmNlb2YgT2JqZWN0KSkge1xcbiAgICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgaW50ZXJwb2xhdGUgcHJvcGVydHkgXCIuY29uY2F0KHByb3BlcnR5TmFtZSwgXCIuIFByb3BlcnR5IG93bmVyIG11c3QgYmUgYW4gb2JqZWN0LlwiKSk7XFxuXFxuICAgICAgICBpZiAodHlwZW9mIG9uRXJyb3IgPT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICAgIG9uRXJyb3IoZSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoZSk7XFxuICAgICAgfSAvLyBNYWtlIHN1cmUgcHJvcGVydHkgaXMgbnVtZXJpY1xcblxcblxcbiAgICAgIGlmIChOdW1iZXIuaXNOYU4oTnVtYmVyKHByb3BlcnR5T3duZXJbcHJvcGVydHlOYW1lXSkpKSB7XFxuICAgICAgICB2YXIgX2UgPSBuZXcgRXJyb3IoXCJDYW5ub3QgaW50ZXJwb2xhdGUgcHJvcGVydHkgXCIuY29uY2F0KHByb3BlcnR5TmFtZSwgXCIuIFByb3BlcnR5IG11c3QgYmUgbnVtZXJpYy5cIikpO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBvbkVycm9yID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBvbkVycm9yKF9lKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLnJlamVjdChfZSk7XFxuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIHRhcmdldCB2YWx1ZSBpcyBudW1lcmljXFxuXFxuXFxuICAgICAgaWYgKE51bWJlci5pc05hTihOdW1iZXIodGFyZ2V0VmFsdWUpKSkge1xcbiAgICAgICAgdmFyIF9lMiA9IG5ldyBFcnJvcihcIkNhbm5vdCBpbnRlcnBvbGF0ZSBwcm9wZXJ0eSBcIi5jb25jYXQocHJvcGVydHlOYW1lLCBcIiB0byB2YWx1ZSBcIikuY29uY2F0KHRhcmdldFZhbHVlLCBcIi4gVGFyZ2V0IHZhbHVlIG11c3QgYmUgbnVtZXJpYy5cIikpO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBvbkVycm9yID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBvbkVycm9yKF9lMik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoX2UyKTtcXG4gICAgICB9IC8vIFJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhlIHRhcmdldCBoYXMgYWxyZWFkeSBiZWVuIHJlYWNoZWRcXG5cXG5cXG4gICAgICB2YXIgc3RhcnRWYWx1ZSA9IHByb3BlcnR5T3duZXJbcHJvcGVydHlOYW1lXTtcXG5cXG4gICAgICBpZiAoc3RhcnRWYWx1ZSA9PT0gdGFyZ2V0VmFsdWUpIHtcXG4gICAgICAgIGlmICh0eXBlb2YgX29uRmluaXNoID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBfb25GaW5pc2godGFyZ2V0VmFsdWUpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQucmVzb2x2ZSh0YXJnZXRWYWx1ZSk7XFxuICAgICAgfSAvLyBEZWZhdWx0IHRvIGxpbmVhciBpbnRlcnBvbGF0aW9uXFxuXFxuXFxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmdGbiAhPT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgIGlmIChlYXNpbmdGbiAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHkgaW50ZXJwb2xhdGlvbiBlYXNpbmdGbi4gRGVmYXVsdGluZyB0byBsaW5lYXIgaW50ZXJwb2xhdGlvbi5cIik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBlYXNpbmdGbiA9IExpbmVhci5Jbk91dDtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGludGVycG9sYXRvciA9IGNvcmVfVXRpbHMud2FpdChzZWNvbmRzLCB7XFxuICAgICAgICBvbkZpbmlzaDogZnVuY3Rpb24gb25GaW5pc2goKSB7XFxuICAgICAgICAgIHByb3BlcnR5T3duZXJbcHJvcGVydHlOYW1lXSA9IHRhcmdldFZhbHVlO1xcblxcbiAgICAgICAgICBpZiAodHlwZW9mIF9vbkZpbmlzaCA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgICBfb25GaW5pc2godGFyZ2V0VmFsdWUpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgb25DYW5jZWw6IGZ1bmN0aW9uIG9uQ2FuY2VsKCkge1xcbiAgICAgICAgICBpZiAodHlwZW9mIF9vbkNhbmNlbCA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgICBfb25DYW5jZWwocHJvcGVydHlPd25lcltwcm9wZXJ0eU5hbWVdKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIG9uUHJvZ3Jlc3M6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MocHJvZ3Jlc3MpIHtcXG4gICAgICAgICAgaWYgKHByb3BlcnR5T3duZXJbcHJvcGVydHlOYW1lXSAhPT0gdGFyZ2V0VmFsdWUpIHtcXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGxlcnAgZmFjdG9yXFxuICAgICAgICAgICAgdmFyIGVhc2VGYWN0b3IgPSBlYXNpbmdGbihwcm9ncmVzcyk7XFxuXFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlYXNlRmFjdG9yICE9PSBcXCdudW1iZXJcXCcpIHtcXG4gICAgICAgICAgICAgIHZhciBfZTMgPSBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3BlcnR5IGludGVycG9sYXRpb24gZWFzaW5nRm4uIEVhc2luZ0ZuIG11c3QgcmV0dXJuIGEgbnVtYmVyLlwiKTtcXG5cXG4gICAgICAgICAgICAgIGludGVycG9sYXRvci5yZWplY3QoX2UzKTtcXG4gICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICB9IC8vIFVwZGF0ZSB0aGUgdmFsdWVcXG5cXG5cXG4gICAgICAgICAgICBwcm9wZXJ0eU93bmVyW3Byb3BlcnR5TmFtZV0gPSBjb3JlX01hdGhVdGlscy5sZXJwKHN0YXJ0VmFsdWUsIHRhcmdldFZhbHVlLCBlYXNlRmFjdG9yKTtcXG4gICAgICAgICAgfSAvLyBTaWduYWwgcHJvZ3Jlc3NcXG5cXG5cXG4gICAgICAgICAgaWYgKHR5cGVvZiBfb25Qcm9ncmVzcyA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgICBfb25Qcm9ncmVzcyhwcm9wZXJ0eU93bmVyW3Byb3BlcnR5TmFtZV0pO1xcbiAgICAgICAgICB9IC8vIFNpZ25hbCBjb21wbGV0aW9uIG9uY2UgdGltZSBpcyB1cFxcblxcblxcbiAgICAgICAgICBpZiAocHJvZ3Jlc3MgPT09IDEpIHtcXG4gICAgICAgICAgICBwcm9wZXJ0eU93bmVyW3Byb3BlcnR5TmFtZV0gPSB0YXJnZXRWYWx1ZTtcXG4gICAgICAgICAgICBpbnRlcnBvbGF0b3IucmVzb2x2ZSh0YXJnZXRWYWx1ZSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBvbkVycm9yOiBvbkVycm9yXFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIGludGVycG9sYXRvcjtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIEFuaW1hdGlvblV0aWxzO1xcbn0oKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGFuaW1wYWNrX0FuaW1hdGlvblV0aWxzID0gKEFuaW1hdGlvblV0aWxzKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hbmltcGFjay9zdGF0ZS9BYnN0cmFjdFN0YXRlLmpzXFxuZnVuY3Rpb24gQWJzdHJhY3RTdGF0ZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RTdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFN0YXRlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgQWJzdHJhY3RTdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgQWJzdHJhY3RTdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcblxcblxcbi8qKlxcclxcbiAqIEJhc2UgY2xhc3MgZm9yIGEgc3RhdGUgaW4gb3VyIGFuaW1hdGlvbiBzeXN0ZW0uXFxyXFxuICpcXHJcXG4gKiBAYWJzdHJhY3RcXHJcXG4gKi9cXG5cXG52YXIgQWJzdHJhY3RTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBhbmltYXRpb24gc3RhdGUuXFxyXFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMubmFtZSAtIE5hbWUgZm9yIHRoZSBhbmltYXRpb24gc3RhdGUuIE5hbWVzIG11c3QgYmVcXHJcXG4gICAqIHVuaXF1ZSBmb3IgdGhlIGNvbnRhaW5lciB0aGUgc3RhdGUgaXMgYXBwbGllZCB0byBhbmQgc2hvdWxkIGJlIHZhbGlkYXRlZCBhdFxcclxcbiAgICogdGhlIGNvbnRhaW5lciBsZXZlbC4gSWYgbm8gbmFtZSBpcyBnaXZlbiBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIGNvbnN0cnVjdG9yXFxyXFxuICAgKiBuYW1lLlxcclxcbiAgICogQHBhcmFtIHt3ZWlnaHR9IFtvcHRpb25zLndlaWdodD0wXSAtIFRoZSAwLTEgYW1vdW50IG9mIGluZmx1ZW5jZSB0aGUgc3RhdGUgd2lsbCBoYXZlLlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBBYnN0cmFjdFN0YXRlKCkge1xcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XFxuXFxuICAgIEFic3RyYWN0U3RhdGVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJzdHJhY3RTdGF0ZSk7XFxuXFxuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5uYW1lIDogdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xcbiAgICB0aGlzLl93ZWlnaHQgPSBvcHRpb25zLndlaWdodCAhPT0gdW5kZWZpbmVkID8gY29yZV9NYXRoVXRpbHMuY2xhbXAob3B0aW9ucy53ZWlnaHQsIDAsIDEpIDogMDtcXG4gICAgdGhpcy5faW50ZXJuYWxXZWlnaHQgPSB0aGlzLl93ZWlnaHQ7XFxuICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xcbiAgICB0aGlzLl9wcm9taXNlcyA9IHtcXG4gICAgICBmaW5pc2g6IGNvcmVfRGVmZXJyZWQucmVzb2x2ZSgpLFxcbiAgICAgIHdlaWdodDogY29yZV9EZWZlcnJlZC5yZXNvbHZlKCksXFxuICAgICAgcGxheTogY29yZV9EZWZlcnJlZC5yZXNvbHZlKClcXG4gICAgfTtcXG4gICAgdGhpcy5fcGxheUNhbGxiYWNrcyA9IHtcXG4gICAgICBvbkZpbmlzaDogdW5kZWZpbmVkLFxcbiAgICAgIG9uRXJyb3I6IHVuZGVmaW5lZCxcXG4gICAgICBvbkNhbmNlbDogdW5kZWZpbmVkXFxuICAgIH07XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgd2hldGhlciBvciBub3QgdGhlIHN0YXRlIGlzIGN1cnJlbnRseSBwYXVzZWQuXFxyXFxuICAgKlxcclxcbiAgICogQHR5cGUge251bWJlcn1cXHJcXG4gICAqL1xcblxcblxcbiAgQWJzdHJhY3RTdGF0ZV9jcmVhdGVDbGFzcyhBYnN0cmFjdFN0YXRlLCBbe1xcbiAgICBrZXk6IFwicGF1c2VkXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wYXVzZWQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIHVzZXIgZGVmaW5lZCB3ZWlnaHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwid2VpZ2h0XCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl93ZWlnaHQ7XFxuICAgIH0sXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHdlaWdodCkge1xcbiAgICAgIHRoaXMuX3dlaWdodCA9IGNvcmVfTWF0aFV0aWxzLmNsYW1wKHdlaWdodCwgMCwgMSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgd2hldGhlciBvciBub3QgdGhlIHdlaWdodCBpcyBjdXJyZW50bHkgYmVpbmcgYW5pbWF0ZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZWFkb25seVxcclxcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ3ZWlnaHRQZW5kaW5nXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy53ZWlnaHQgJiYgdGhpcy5fcHJvbWlzZXMud2VpZ2h0LnBlbmRpbmc7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZXMgdGhlIHVzZXIgZGVmaW5lZCB3ZWlnaHQgb3ZlciB0aW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2VpZ2h0IC0gVGhlIHRhcmdldCB3ZWlnaHQgdmFsdWUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kcz0wXSAtIFRoZSBhbW91bnQgb2YgdGltZSBpdCB3aWxsIHRha2UgdG8gcmVhY2ggdGhlXFxyXFxuICAgICAqIHRhcmdldCB3ZWlnaHQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIFRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciBpbnRlcnBvbGF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0V2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXZWlnaHQod2VpZ2h0KSB7XFxuICAgICAgdmFyIHNlY29uZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XFxuXFxuICAgICAgdGhpcy5fcHJvbWlzZXMud2VpZ2h0LmNhbmNlbCgpO1xcblxcbiAgICAgIHdlaWdodCA9IGNvcmVfTWF0aFV0aWxzLmNsYW1wKHdlaWdodCk7XFxuICAgICAgdGhpcy5fcHJvbWlzZXMud2VpZ2h0ID0gYW5pbXBhY2tfQW5pbWF0aW9uVXRpbHMuaW50ZXJwb2xhdGVQcm9wZXJ0eSh0aGlzLCBcXCd3ZWlnaHRcXCcsIHdlaWdodCwge1xcbiAgICAgICAgc2Vjb25kczogc2Vjb25kcyxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGblxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy53ZWlnaHQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIGludGVybmFsIHdlaWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiaW50ZXJuYWxXZWlnaHRcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2ludGVybmFsV2VpZ2h0O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSB1c2VyIHdlaWdodCBieSBhIGZhY3RvciB0byBkZXRlcm1pbmUgdGhlIGludGVybmFsIHdlaWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZhY3RvciAtIDAtMSBtdWx0aXBsaWVyIHRvIGFwcGx5IHRvIHRoZSB1c2VyIHdlaWdodC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSW50ZXJuYWxXZWlnaHQoZmFjdG9yKSB7XFxuICAgICAgdGhpcy5faW50ZXJuYWxXZWlnaHQgPSB0aGlzLl93ZWlnaHQgKiBmYWN0b3I7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZSBhbnkgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSBldmFsdWF0ZWQgZXZlcnkgZnJhbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVRpbWUgLSBUaW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgbGFzdCB1cGRhdGUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidXBkYXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZGVsdGFUaW1lKSB7XFxuICAgICAgaWYgKCF0aGlzLl9wYXVzZWQpIHtcXG4gICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5fcHJvbWlzZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb21pc2UpIHtcXG4gICAgICAgICAgcHJvbWlzZS5leGVjdXRlKGRlbHRhVGltZSk7XFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0YXJ0IHBsYXliYWNrIG9mIHRoZSBzdGF0ZSBmcm9tIHRoZSBiZWdpbm5pbmcuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkZpbmlzaCAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgc3RhdGUgZmluaXNoZXMuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkVycm9yIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiB0aGUgc3RhdGUgZW5jb3VudGVyc1xcclxcbiAgICAgKiBhbiBlcnJvciBkdXJpbmcgcGxheWJhY2suXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkNhbmNlbCAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgcGxheWJhY2sgaXMgY2FuY2VsZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwbGF5XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCkge1xcbiAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xcbiAgICAgIHRoaXMuX3BsYXlDYWxsYmFja3Mub25GaW5pc2ggPSBvbkZpbmlzaDtcXG4gICAgICB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRXJyb3IgPSBvbkVycm9yO1xcbiAgICAgIHRoaXMuX3BsYXlDYWxsYmFja3Mub25DYW5jZWwgPSBvbkNhbmNlbDtcXG4gICAgICB0aGlzLl9wcm9taXNlcy5wbGF5ID0gbmV3IGNvcmVfRGVmZXJyZWQodW5kZWZpbmVkLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpO1xcbiAgICAgIHRoaXMuX3Byb21pc2VzLmZpbmlzaCA9IGNvcmVfRGVmZXJyZWQuYWxsKFt0aGlzLl9wcm9taXNlcy5wbGF5LCB0aGlzLl9wcm9taXNlcy53ZWlnaHRdKTtcXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZXMuZmluaXNoO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQYXVzZSBwbGF5YmFjayBvZiB0aGUgc3RhdGUuIFRoaXMgcHJldmVudHMgcGVuZGluZyBwcm9taXNlcyBmcm9tIGJlaW5nIGV4ZWN1dGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XFxuICAgICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcXG4gICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzdW1lIHBsYXliYWNrIG9mIHRoZSBzdGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uRmluaXNoIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBzdGF0ZSBmaW5pc2hlcy5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uRXJyb3IgLSBGdW5jdGlvbiB0byBleGVjdXRlIGlmIHRoZSBzdGF0ZSBlbmNvdW50ZXJzXFxyXFxuICAgICAqIGFuIGVycm9yIGR1cmluZyBwbGF5YmFjay5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uQ2FuY2VsIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiBwbGF5YmFjayBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCkge1xcbiAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xcblxcbiAgICAgIGlmICghdGhpcy5fcHJvbWlzZXMucGxheS5wZW5kaW5nKSB7XFxuICAgICAgICB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRmluaXNoID0gb25GaW5pc2ggfHwgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkZpbmlzaDtcXG4gICAgICAgIHRoaXMuX3BsYXlDYWxsYmFja3Mub25FcnJvciA9IG9uRXJyb3IgfHwgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkVycm9yO1xcbiAgICAgICAgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkNhbmNlbCA9IG9uQ2FuY2VsIHx8IHRoaXMuX3BsYXlDYWxsYmFja3Mub25DYW5jZWw7XFxuICAgICAgICB0aGlzLl9wcm9taXNlcy5wbGF5ID0gbmV3IGNvcmVfRGVmZXJyZWQodW5kZWZpbmVkLCB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRmluaXNoLCB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRXJyb3IsIHRoaXMuX3BsYXlDYWxsYmFja3Mub25DYW5jZWwpO1xcbiAgICAgICAgdGhpcy5fcHJvbWlzZXMuZmluaXNoID0gY29yZV9EZWZlcnJlZC5hbGwoW3RoaXMuX3Byb21pc2VzLnBsYXksIHRoaXMuX3Byb21pc2VzLndlaWdodF0pO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZXMuZmluaXNoO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDYW5jZWwgcGxheWJhY2sgb2YgdGhlIHN0YXRlIGFuZCBjYW5jZWwgYW55IHBlbmRpbmcgcHJvbWlzZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImNhbmNlbFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKCkge1xcbiAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XFxuICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLl9wcm9taXNlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvbWlzZSkge1xcbiAgICAgICAgcHJvbWlzZS5jYW5jZWwoKTtcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCBwbGF5YmFjayBvZiB0aGUgc3RhdGUgYW5kIHJlc29sdmUgYW55IHBlbmRpbmcgcHJvbWlzZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XFxuICAgICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcXG4gICAgICBPYmplY3QudmFsdWVzKHRoaXMuX3Byb21pc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9taXNlKSB7XFxuICAgICAgICBwcm9taXNlLnJlc29sdmUoKTtcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ2FuY2VsIGFueSBwZW5kaW5nIHByb21pc2VzIGFuZCByZW1vdmUgcmVmZXJlbmNlIHRvIHRoZW0uXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzY2FyZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZCgpIHtcXG4gICAgICB0aGlzLmNhbmNlbCgpO1xcbiAgICAgIGRlbGV0ZSB0aGlzLl9wcm9taXNlcztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRm9yY2UgdGhlIGludGVybmFsIHdlaWdodCB0byAwLiBTaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBzd2l0Y2hpbmcgb3IgdHJhbnNpdGlvbmluZ1xcclxcbiAgICAgKiB0byBhIG5ldyBzdGF0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJkZWFjdGl2YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xcbiAgICAgIHRoaXMudXBkYXRlSW50ZXJuYWxXZWlnaHQoMCk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBYnN0cmFjdFN0YXRlO1xcbn0oKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IHN0YXRlX0Fic3RyYWN0U3RhdGUgPSAoQWJzdHJhY3RTdGF0ZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svc3RhdGUvVHJhbnNpdGlvblN0YXRlLmpzXFxuZnVuY3Rpb24gVHJhbnNpdGlvblN0YXRlX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gVHJhbnNpdGlvblN0YXRlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIFRyYW5zaXRpb25TdGF0ZV90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIFRyYW5zaXRpb25TdGF0ZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gVHJhbnNpdGlvblN0YXRlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIFRyYW5zaXRpb25TdGF0ZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIFRyYW5zaXRpb25TdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgVHJhbnNpdGlvblN0YXRlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gVHJhbnNpdGlvblN0YXRlX2dldCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7IFRyYW5zaXRpb25TdGF0ZV9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgVHJhbnNpdGlvblN0YXRlX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBUcmFuc2l0aW9uU3RhdGVfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gVHJhbnNpdGlvblN0YXRlX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XFxuXFxuZnVuY3Rpb24gVHJhbnNpdGlvblN0YXRlX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBUcmFuc2l0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxcblxcbmZ1bmN0aW9uIFRyYW5zaXRpb25TdGF0ZV9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBUcmFuc2l0aW9uU3RhdGVfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gVHJhbnNpdGlvblN0YXRlX3NldFByb3RvdHlwZU9mKG8sIHApIHsgVHJhbnNpdGlvblN0YXRlX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBUcmFuc2l0aW9uU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBUcmFuc2l0aW9uU3RhdGVfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IFRyYW5zaXRpb25TdGF0ZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBUcmFuc2l0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IFRyYW5zaXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gVHJhbnNpdGlvblN0YXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIFRyYW5zaXRpb25TdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKFRyYW5zaXRpb25TdGF0ZV90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gVHJhbnNpdGlvblN0YXRlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIFRyYW5zaXRpb25TdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBUcmFuc2l0aW9uU3RhdGVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5mdW5jdGlvbiBUcmFuc2l0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YobykgeyBUcmFuc2l0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gVHJhbnNpdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZm9yIHNtb290aCB0cmFuc2l0aW9uaW5nIGJldHdlZW4gc3RhdGVzIG9uIGFuIGFuaW1hdGlvbiBsYXllci5cXHJcXG4gKlxcclxcbiAqIEBleHRlbmRzIEFic3RyYWN0U3RhdGVcXHJcXG4gKi9cXG5cXG52YXIgVHJhbnNpdGlvblN0YXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQWJzdHJhY3RTdGF0ZSkge1xcbiAgVHJhbnNpdGlvblN0YXRlX2luaGVyaXRzKFRyYW5zaXRpb25TdGF0ZSwgX0Fic3RyYWN0U3RhdGUpO1xcblxcbiAgdmFyIF9zdXBlciA9IFRyYW5zaXRpb25TdGF0ZV9jcmVhdGVTdXBlcihUcmFuc2l0aW9uU3RhdGUpO1xcblxcbiAgZnVuY3Rpb24gVHJhbnNpdGlvblN0YXRlKCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcXG5cXG4gICAgVHJhbnNpdGlvblN0YXRlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb25TdGF0ZSk7XFxuXFxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XFxuICAgIF90aGlzLl90byA9IG51bGw7XFxuICAgIF90aGlzLl9mcm9tID0gW107XFxuICAgIF90aGlzLl93ZWlnaHRQcm9taXNlID0gY29yZV9EZWZlcnJlZC5yZXNvbHZlKCk7XFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIFRyYW5zaXRpb25TdGF0ZV9jcmVhdGVDbGFzcyhUcmFuc2l0aW9uU3RhdGUsIFt7XFxuICAgIGtleTogXCJpbnRlcm5hbFdlaWdodFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICAvLyBGaW5kIHRoZSBjb21iaW5lZCB3ZWlnaHQgb2YgYWxsIHN1Yi1zdGF0ZXNcXG4gICAgICB2YXIgdG90YWxXZWlnaHQgPSAwO1xcblxcbiAgICAgIGlmICh0aGlzLl90bykge1xcbiAgICAgICAgdG90YWxXZWlnaHQgKz0gdGhpcy5fdG8ud2VpZ2h0O1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl9mcm9tLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICB0b3RhbFdlaWdodCArPSBzdGF0ZS53ZWlnaHQ7XFxuICAgICAgfSk7XFxuXFxuICAgICAgcmV0dXJuIHRvdGFsV2VpZ2h0ICogdGhpcy5faW50ZXJuYWxXZWlnaHQ7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZUludGVybmFsV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFdlaWdodChmYWN0b3IpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICBUcmFuc2l0aW9uU3RhdGVfZ2V0KFRyYW5zaXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihUcmFuc2l0aW9uU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZhY3Rvcik7XFxuXFxuICAgICAgdGhpcy5fZnJvbS5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xcbiAgICAgICAgc3RhdGUudXBkYXRlSW50ZXJuYWxXZWlnaHQoX3RoaXMyLl9pbnRlcm5hbFdlaWdodCk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgaWYgKHRoaXMuX3RvKSB7XFxuICAgICAgICB0aGlzLl90by51cGRhdGVJbnRlcm5hbFdlaWdodCh0aGlzLl9pbnRlcm5hbFdlaWdodCk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGUgc3ViLXN0YXRlcyB0aGUgdHJhbnNpdGlvbiBpcyBjb250cm9sbGluZyBhbmQgc3RhcnQgbmV3IHdlaWdodFxcclxcbiAgICAgKiBhbmltYXRpb25zIG9uIGVhY2ggb25lLiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgZWFjaCB0aW1lIHRoZSBjdXJyZW50IHN0YXRlIG9mXFxyXFxuICAgICAqIGFuIGFuaW1hdGlvbiBsYXllciBnZXRzIHVwZGF0ZWQgdG8gYSBuZXcgdmFsdWUgYW5kIGEgdHJhbnNpdGlvbiB0aW1lIGdyZWF0ZXJcXHJcXG4gICAgICogdGhhdCB6ZXJvIGlzIHNwZWNpZmllZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48QWJzdHJhY3RTdGF0ZT59IFtjdXJyZW50U3RhdGVzPVtdXSAtIFN0YXRlcyB3aG9zZSB3ZWlnaHQgdmFsdWVzXFxyXFxuICAgICAqIHdpbGwgYmUgYW5pbWF0ZWQgdG8gMC5cXHJcXG4gICAgICogQHBhcmFtIHtBYnN0cmFjdFN0YXRlPX0gdGFyZ2V0U3RhdGUgLSBTdGF0ZSB3aG9zZSB3ZWlnaHQgd2lsbCBiZSBhbmltYXRlZFxcclxcbiAgICAgKiB0byAxLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHJhbnNpdGlvblRpbWUgLSBBbW91bnQgb2YgdGltZSBpdCB3aWxsIGluIHNlY29uZHMgdGFrZSBmb3JcXHJcXG4gICAgICogd2VpZ2h0IGFuaW1hdGlvbnMgdG8gY29tcGxldGUuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHdlaWdodCBhbmltYXRpb25zLlxcclxcbiAgICAgKiBEZWZhdWx0IGlzIEVhc2luZy5MaW5lYXIuSW5PdXQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkNvbXBsZXRlIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbmNlIGFsbCB3ZWlnaHQgYW5pbWF0aW9uc1xcclxcbiAgICAgKiBjb21wbGV0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjb25maWd1cmVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmZpZ3VyZSgpIHtcXG4gICAgICB2YXIgY3VycmVudFN0YXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XFxuICAgICAgdmFyIHRhcmdldFN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XFxuICAgICAgdmFyIHRyYW5zaXRpb25UaW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XFxuICAgICAgdmFyIG9uQ29tcGxldGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IHVuZGVmaW5lZDtcXG5cXG4gICAgICAvLyBEZWFjdGl2YXRlIGFueSBzdGF0ZXMgdGhhdCBhcmVuXFwndCBpbiB0aGUgbmV3IGNvbmZpZ3VyYXRpb25cXG4gICAgICBpZiAodGhpcy5fdG8gPT09IHRhcmdldFN0YXRlIHx8IGN1cnJlbnRTdGF0ZXMuaW5jbHVkZXModGhpcy5fdG8pKSB7XFxuICAgICAgICB0aGlzLl90byA9IG51bGw7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX2Zyb20gPSB0aGlzLl9mcm9tLmZpbHRlcihmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHJldHVybiBzdGF0ZSAhPT0gdGFyZ2V0U3RhdGUgJiYgIWN1cnJlbnRTdGF0ZXMuaW5jbHVkZXMoc3RhdGUpO1xcbiAgICAgIH0pO1xcbiAgICAgIHRoaXMuZGVhY3RpdmF0ZSgpO1xcbiAgICAgIHRoaXMuX2Zyb20gPSBjdXJyZW50U3RhdGVzO1xcbiAgICAgIHRoaXMuX3RvID0gdGFyZ2V0U3RhdGU7XFxuICAgICAgdGhpcy5yZXNldCh0cmFuc2l0aW9uVGltZSwgZWFzaW5nRm4sIG9uQ29tcGxldGUpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdGFydCBuZXcgd2VpZ2h0IGFuaW1hdGlvbnMgc3RhdGUgdGhlIHRyYW5zaXRpb24gY29udHJvbHMuIFRoaXMgc2hvdWxkIGJlIGNhbGxlZFxcclxcbiAgICAgKiBpZiBhbiBhbmltYXRpb24gaXMgcGxheWVkIHdpdGggYSB0cmFuc2l0aW9uIHRpbWUgZ3JlYXRlciB0aGFuIHplcm8gYW5kIGEgdHJhbnN0aW9uXFxyXFxuICAgICAqIHRvIHRoYXQgYW5pbWF0aW9uIHdhcyBhbHJlYWR5IGluIHByb2dyZXNzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHJhbnNpdGlvblRpbWUgLSBBbW91bnQgb2YgdGltZSBpdCB3aWxsIGluIHNlY29uZHMgdGFrZSBmb3JcXHJcXG4gICAgICogd2VpZ2h0IGFuaW1hdGlvbnMgdG8gY29tcGxldGUuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIHdlaWdodCBhbmltYXRpb25zLlxcclxcbiAgICAgKiBEZWZhdWx0IGlzIEVhc2luZy5MaW5lYXIuSW5PdXQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkNvbXBsZXRlIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBvbmNlIGFsbCB3ZWlnaHQgYW5pbWF0aW9uc1xcclxcbiAgICAgKiBjb21wbGV0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZXNldFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQodHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuLCBvbkNvbXBsZXRlKSB7XFxuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgLy8gU3RvcCBhbnkgcGVuZGluZyBwcm9taXNlc1xcbiAgICAgIHRoaXMuX3dlaWdodFByb21pc2UuY2FuY2VsKCk7IC8vIFN0YXJ0IHR3ZWVuaW5nIHdlaWdodCB0byAwIGZvciB0aGUgY3VycmVudCBzdGF0ZXNcXG5cXG5cXG4gICAgICB2YXIgd2VpZ2h0UHJvbWlzZXMgPSB0aGlzLl9mcm9tLm1hcChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHJldHVybiBzdGF0ZS5zZXRXZWlnaHQoMCwgdHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuKTtcXG4gICAgICB9KTsgLy8gU3RhcnQgdHdlZW5pbmcgd2VpZ2h0IHRvIDEgZm9yIHRoZSB0YXJnZXQgc3RhdGVcXG5cXG5cXG4gICAgICBpZiAodGhpcy5fdG8pIHtcXG4gICAgICAgIHdlaWdodFByb21pc2VzLnB1c2godGhpcy5fdG8uc2V0V2VpZ2h0KDEsIHRyYW5zaXRpb25UaW1lLCBlYXNpbmdGbikpO1xcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5fdG8ubmFtZTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5fd2VpZ2h0UHJvbWlzZSA9IGNvcmVfRGVmZXJyZWQuYWxsKHdlaWdodFByb21pc2VzLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICBfdGhpczMuX2Zyb20uZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgICAgc3RhdGUuY2FuY2VsKCk7XFxuICAgICAgICAgIHN0YXRlLmRlYWN0aXZhdGUoKTtcXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgaWYgKHR5cGVvZiBvbkNvbXBsZXRlID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBvbkNvbXBsZXRlKCk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInBsYXlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkob25GaW5pc2gsIG9uRXJyb3IsIG9uQ2FuY2VsLCBvbk5leHQpIHtcXG4gICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcXG4gICAgICB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRmluaXNoID0gb25GaW5pc2g7XFxuICAgICAgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkVycm9yID0gb25FcnJvcjtcXG4gICAgICB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uQ2FuY2VsID0gb25DYW5jZWw7XFxuICAgICAgdmFyIHByb21pc2VzID0gW3RoaXMuX3dlaWdodFByb21pc2VdO1xcblxcbiAgICAgIHRoaXMuX2Zyb20uZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLnJlc3VtZSgpO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICh0aGlzLl90bykge1xcbiAgICAgICAgdGhpcy5fcHJvbWlzZXMucGxheSA9IHRoaXMuX3RvLnBsYXkodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb25OZXh0KTtcXG4gICAgICAgIHByb21pc2VzLnB1c2godGhpcy5fcHJvbWlzZXMucGxheSk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX3Byb21pc2VzLmZpbmlzaCA9IGNvcmVfRGVmZXJyZWQuYWxsKHByb21pc2VzLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpO1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5maW5pc2g7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInBhdXNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcXG4gICAgICB0aGlzLl9mcm9tLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICBzdGF0ZS5wYXVzZSgpO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICh0aGlzLl90bykge1xcbiAgICAgICAgdGhpcy5fdG8ucGF1c2UoKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIFRyYW5zaXRpb25TdGF0ZV9nZXQoVHJhbnNpdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKFRyYW5zaXRpb25TdGF0ZS5wcm90b3R5cGUpLCBcInBhdXNlXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCwgb25OZXh0KSB7XFxuICAgICAgdGhpcy5fcGF1c2VkID0gZmFsc2U7XFxuXFxuICAgICAgaWYgKCF0aGlzLl9wcm9taXNlcy5wbGF5LnBlbmRpbmcpIHtcXG4gICAgICAgIHRoaXMuX3BsYXlDYWxsYmFja3Mub25GaW5pc2ggPSBvbkZpbmlzaCB8fCB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRmluaXNoO1xcbiAgICAgICAgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkVycm9yID0gb25FcnJvciB8fCB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRXJyb3I7XFxuICAgICAgICB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uQ2FuY2VsID0gb25DYW5jZWwgfHwgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkNhbmNlbDtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIHByb21pc2VzID0gW3RoaXMuX3dlaWdodFByb21pc2VdO1xcblxcbiAgICAgIHRoaXMuX2Zyb20uZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLnJlc3VtZSgpO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICh0aGlzLl90bykge1xcbiAgICAgICAgdGhpcy5fcHJvbWlzZXMucGxheSA9IHRoaXMuX3RvLnJlc3VtZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbk5leHQpO1xcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLl9wcm9taXNlcy5wbGF5KTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5fcHJvbWlzZXMuZmluaXNoID0gY29yZV9EZWZlcnJlZC5hbGwocHJvbWlzZXMsIHRoaXMuX3BsYXlDYWxsYmFja3Mub25GaW5pc2gsIHRoaXMuX3BsYXlDYWxsYmFja3Mub25FcnJvciwgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkNhbmNlbCk7XFxuICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2VzLmZpbmlzaDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiY2FuY2VsXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwoKSB7XFxuICAgICAgdGhpcy5fZnJvbS5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xcbiAgICAgICAgc3RhdGUucGF1c2UoKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBpZiAodGhpcy5fdG8pIHtcXG4gICAgICAgIHRoaXMuX3RvLmNhbmNlbCgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl93ZWlnaHRQcm9taXNlLmNhbmNlbCgpO1xcblxcbiAgICAgIHJldHVybiBUcmFuc2l0aW9uU3RhdGVfZ2V0KFRyYW5zaXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihUcmFuc2l0aW9uU3RhdGUucHJvdG90eXBlKSwgXCJjYW5jZWxcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcXG4gICAgICB0aGlzLl9mcm9tLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICBzdGF0ZS5wYXVzZSgpO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICh0aGlzLl90bykge1xcbiAgICAgICAgdGhpcy5fdG8uc3RvcCgpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gVHJhbnNpdGlvblN0YXRlX2dldChUcmFuc2l0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YoVHJhbnNpdGlvblN0YXRlLnByb3RvdHlwZSksIFwic3RvcFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkZWx0YVRpbWUpIHtcXG4gICAgICBUcmFuc2l0aW9uU3RhdGVfZ2V0KFRyYW5zaXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihUcmFuc2l0aW9uU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBkZWx0YVRpbWUpO1xcblxcbiAgICAgIHRoaXMuX2Zyb20uZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLnVwZGF0ZShkZWx0YVRpbWUpO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICh0aGlzLl90bykge1xcbiAgICAgICAgdGhpcy5fdG8udXBkYXRlKGRlbHRhVGltZSk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJkaXNjYXJkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjYXJkKCkge1xcbiAgICAgIFRyYW5zaXRpb25TdGF0ZV9nZXQoVHJhbnNpdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKFRyYW5zaXRpb25TdGF0ZS5wcm90b3R5cGUpLCBcImRpc2NhcmRcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICB0aGlzLl93ZWlnaHRQcm9taXNlLmNhbmNlbCgpO1xcblxcbiAgICAgIGRlbGV0ZSB0aGlzLl93ZWlnaHRQcm9taXNlO1xcbiAgICAgIHRoaXMuX3RvID0gbnVsbDtcXG4gICAgICB0aGlzLl9mcm9tLmxlbmd0aCA9IDA7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImRlYWN0aXZhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XFxuICAgICAgaWYgKHRoaXMuX3RvKSB7XFxuICAgICAgICB0aGlzLl90by5kZWFjdGl2YXRlKCk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX2Zyb20uZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLmRlYWN0aXZhdGUoKTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIFRyYW5zaXRpb25TdGF0ZTtcXG59KHN0YXRlX0Fic3RyYWN0U3RhdGUpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3Qgc3RhdGVfVHJhbnNpdGlvblN0YXRlID0gKFRyYW5zaXRpb25TdGF0ZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlLmpzXFxuZnVuY3Rpb24gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIEFuaW1hdGlvblBsYXllckludGVyZmFjZV90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IEFuaW1hdGlvblBsYXllckludGVyZmFjZV9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2Vfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IEFuaW1hdGlvblBsYXllckludGVyZmFjZV9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2Vfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IEFuaW1hdGlvblBsYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YobywgcCkgeyBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2Vfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IEFuaW1hdGlvblBsYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvKSB7IEFuaW1hdGlvblBsYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXFxuXFxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eS1mdW5jdGlvbiAqL1xcblxcbi8qIGVzbGludC1kaXNhYmxlIGdldHRlci1yZXR1cm4gKi9cXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2VsZXNzLWNvbnN0cnVjdG9yICovXFxuXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZmFjdG9yeSBpbnRlcmZhY2UgZm9yIGNvbnRyb2xsaW5nIHBsYXliYWNrIG9mIGEgY29sbGVjdGlvbiBvZiBhbmltYXRpb25zLlxcclxcbiAqIE9uZSBhbmltYXRpb24gY2FuIGJlIHBsYXllZCBhdCBhbnkgZ2l2ZW4gdGltZSwgY3Jvc3NmYWRpbmcgYmV0d2VlbiBhbmltYXRpb25zXFxyXFxuICogd2lsbCByZXN1bHQgaW4gcGxheWluZyBhIHtAbGluayBUcmFuc2l0aW9uU3RhdGV9LlxcclxcbiAqXFxyXFxuICogQGludGVyZmFjZVxcclxcbiAqL1xcblxcbnZhciBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlKCkge1xcbiAgICBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlKTtcXG4gIH1cXG5cXG4gIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9jcmVhdGVDbGFzcyhBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2UsIFt7XFxuICAgIGtleTogXCJwYXVzZWRcIixcXG4gICAgZ2V0OlxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgcGxheWVyIGlzIHVwZGF0aW5nIHN0YXRlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtib29sZWFufVxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wYXVzZWQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIGRlZmF1bHQgbnVtYmVyIG9mIHNlY29uZHMgaXQgdGFrZXMgdG8gdHJhbnNpdGlvbiB0byBhIG5ld1xcclxcbiAgICAgKiBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidHJhbnNpdGlvblRpbWVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7fSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2Vjb25kcykge31cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIGRlZmF1bHQgZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIHRyYW5zaXRpb25pbmcgYW5kXFxyXFxuICAgICAqIHNldHRpbmcgd2VpZ2h0cy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImVhc2luZ0ZuXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge30sXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGZuKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB0aGUgc3RhdGUgdGhlIGxheWVyIGlzIGN1cnJlbnRseSBpbiBjb250cm9sIG9mLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge0Fic3RyYWN0U3RhdGV9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY3VycmVudFN0YXRlXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgdGhlIHN0YXRlIHRoZSBsYXllciBpcyBjdXJyZW50bHkgaW4gY29udHJvbCBvZi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY3VycmVudEFuaW1hdGlvblwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBsYXllciBpcyBjdXJyZW50bHkgdHJhbnNpdGlvbmluZyB0byBhIG5ldyBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZWFkb25seVxcclxcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJpc1RyYW5zaXRpb25pbmdcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlIHRoZSBsYXllclxcJ3MgY3VycmVudCBzdGF0ZSB0byBhIG5ldyB2YWx1ZS4gSWYgdHJhbnNpdGlvblRpbWUgaXMgZGVmaW5lZFxcclxcbiAgICAgKiBhbmQgZ3JlYXRlciB0aGFuIHplcm8sIHBlcmZvcm0gYSBzbW9vdGggYmxlbmQgYmV0d2VlbiBhbnkgc3RhdGVzIHRoYXQgY3VycmVudGx5XFxyXFxuICAgICAqIGhhdmUgbm9uLXplcm8gd2VpZ2h0IHZhbHVlcyBhbmQgdGhlIG5ldyBzdGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bGwpfSBuYW1lIC0gTmFtZSBvZiB0aGUgc3RhdGUgdG8gdHJhbnNpdGlvbiB0by5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBsYXlNZXRob2QgLSBOYW1lIG9mIHRoZSBvcGVyYXRpb24gYmVpbmcgcHJlcGFyZWQgZm9yLCB0byBiZVxcclxcbiAgICAgKiB1c2VkIGluIGVycm9yIG1lc3NhZ2luZy5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSB0cmFuc2l0aW9uVGltZSAtIEFtb3VudCBvZiB0aW1lIGluIHNlY29uZHMgaXQgd2lsbCB0YWtlIHRvXFxyXFxuICAgICAqIHN3aXRjaCB0byB0aGUgbmV3IHN0YXRlLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZWFzaW5nRm4gLSBFYXNpbmcgZnVuY3Rpb24gdG8gdXNlIHdoZW4gdHJhbnNpdGlvbmluZyB0byBhXFxyXFxuICAgICAqIG5ldyBzdGF0ZSBvdmVyIHRpbWUuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkVycm9yIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiBhbiBlcnJvciBpcyBlbmNvdW50ZXJlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfcHJlcGFyZUN1cnJlbnRTdGF0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVDdXJyZW50U3RhdGUobmFtZSwgcGxheU1ldGhvZCwgdHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuLCBvbkVycm9yKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogU3RhcnQgcGxheWJhY2sgYW4gYW5pbWF0aW9uIGZyb20gdGhlIGJlZ2lubmluZy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gdG8gcGxheS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSB0cmFuc2l0aW9uVGltZSAtIEFtb3VudCBvZiB0aW1lIGl0IHdpbGwgdGFrZSBiZWZvcmUgdGhlXFxyXFxuICAgICAqIG5ldyBzdGF0ZSBoYXMgZnVsbCBpbmZsdWVuY2UgZm9yIHRoZSBsYXllci5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gRWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSBmb3IgYmxlbmRpbmcgaWYgdHJhbnNpdGlvblRpbWVcXHJcXG4gICAgICogaXMgZ3JlYXRlciB0aGFuIHplcm8uXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkZpbmlzaCAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVzLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25FcnJvciAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIGFuaW1hdGlvbiBlbmNvdW50ZXJzXFxyXFxuICAgICAqIGFuIGVycm9yIGR1cmluZyBwbGF5YmFjay5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uQ2FuY2VsIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiBwbGF5YmFjayBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uTmV4dCAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgYW4gYW5pbWF0aW9uIHF1ZXVlIGlzXFxyXFxuICAgICAqIHBsYXllZCBhbmQgaXQgYWR2YW5jZXMgdG8gdGhlIG5leHQgYW5pbWF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGxheUFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheUFuaW1hdGlvbihuYW1lLCB0cmFuc2l0aW9uVGltZSwgZWFzaW5nRm4sIG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCwgb25OZXh0KSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogQ2FuY2VsIHBsYXliYWNrIG9mIHRoZSBjdXJyZW50IGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiY2FuY2VsQW5pbWF0aW9uXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWxBbmltYXRpb24oKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogUGF1c2UgcGxheWJhY2sgb2YgdGhlIGN1cnJlbnQgYW5pbWF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZUFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2VBbmltYXRpb24oKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzdW1lIHBsYXliYWNrIG9mIGFuIGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIHRvIHJlc3VtZSBwbGF5YmFjayBmb3IuIERlZmF1bHRcXHJcXG4gICAgICogaXMgdGhlIGxheWVyXFwncyBjdXJyZW50IGFuaW1hdGlvbiBuYW1lLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHRyYW5zaXRpb25UaW1lIC0gQW1vdW50IG9mIHRpbWUgaXQgd2lsbCB0YWtlIGJlZm9yZSB0aGVcXHJcXG4gICAgICogbmV3IHN0YXRlIGhhcyBmdWxsIGluZmx1ZW5jZSBmb3IgdGhlIGxheWVyLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25GaW5pc2ggLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIHN0YXRlIGZpbmlzaGVzLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25FcnJvciAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIHN0YXRlIGVuY291bnRlcnNcXHJcXG4gICAgICogYW4gZXJyb3IgZHVyaW5nIHBsYXliYWNrLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25DYW5jZWwgLSBGdW5jdGlvbiB0byBleGVjdXRlIGlmIHBsYXliYWNrIGlzIGNhbmNlbGVkLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25OZXh0IC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiBhbiBhbmltYXRpb24gcXVldWUgaXNcXHJcXG4gICAgICogcGxheWVkIGFuZCBpdCBhZHZhbmNlcyB0byB0aGUgbmV4dCBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZXN1bWVBbmltYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUFuaW1hdGlvbihuYW1lLCB0cmFuc2l0aW9uVGltZSwgZWFzaW5nRm4sIG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCwgb25OZXh0KSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCBwbGF5YmFjayBvZiB0aGUgY3VycmVudCBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BBbmltYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BBbmltYXRpb24oKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlIHRoZSBjdXJyZW50IGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSAtIFRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkZWx0YVRpbWUpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBEaXNjYXJkIHRoZSB0cmFuc2l0aW9uIHN0YXRlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImRpc2NhcmRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NhcmQoKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogQ3JlYXRlcyBhIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB7QGxpbmsgQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlfSBhbmQgZXh0ZW5kc1xcclxcbiAgICAgKiBhIHNwZWNpZmllZCBiYXNlIGNsYXNzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0NsYXNzfSBbQmFzZUNsYXNzID0gY2xhc3N7fV0gLSBUaGUgY2xhc3MgdG8gZXh0ZW5kLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJuIHtDbGFzc30gQSBjbGFzcyB0aGF0IGV4dGVuZHMgYEJhc2VDbGFzc2AgYW5kIGltcGxlbWVudHMge0BsaW5rIEFuaW1hdGlvblBsYXllckludGVyZmFjZX0uXFxyXFxuICAgICAqL1xcblxcbiAgfV0sIFt7XFxuICAgIGtleTogXCJNaXhpblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gTWl4aW4oKSB7XFxuICAgICAgdmFyIEJhc2VDbGFzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gICAgICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcXG4gICAgICAgICAgQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIF9jbGFzcyk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2NyZWF0ZUNsYXNzKF9jbGFzcyk7XFxuICAgICAgfSgpO1xcblxcbiAgICAgIHZhciBBbmltYXRpb25QbGF5ZXJNaXhpbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDbGFzcykge1xcbiAgICAgICAgQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2luaGVyaXRzKEFuaW1hdGlvblBsYXllck1peGluLCBfQmFzZUNsYXNzKTtcXG5cXG4gICAgICAgIHZhciBfc3VwZXIgPSBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfY3JlYXRlU3VwZXIoQW5pbWF0aW9uUGxheWVyTWl4aW4pO1xcblxcbiAgICAgICAgZnVuY3Rpb24gQW5pbWF0aW9uUGxheWVyTWl4aW4oKSB7XFxuICAgICAgICAgIHZhciBfdGhpcztcXG5cXG4gICAgICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xcblxcbiAgICAgICAgICBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgQW5pbWF0aW9uUGxheWVyTWl4aW4pO1xcblxcbiAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XFxuICAgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzLCBvcHRpb25zXS5jb25jYXQoYXJncykpO1xcbiAgICAgICAgICBfdGhpcy5fdHJhbnNpdGlvblN0YXRlID0gbmV3IHN0YXRlX1RyYW5zaXRpb25TdGF0ZSgpO1xcbiAgICAgICAgICBfdGhpcy5fc3RhdGVzID0gX3RoaXMuX3N0YXRlcyAhPT0gdW5kZWZpbmVkID8gX3RoaXMuX3N0YXRlcyA6IG5ldyBNYXAoKTtcXG4gICAgICAgICAgX3RoaXMuX2N1cnJlbnRTdGF0ZSA9IG51bGw7XFxuICAgICAgICAgIF90aGlzLl9wYXVzZWQgPSBmYWxzZTtcXG4gICAgICAgICAgX3RoaXMuX3RyYW5zaXRpb25UaW1lID0gTnVtYmVyKG9wdGlvbnMudHJhbnNpdGlvblRpbWUpID49IDAgPyBOdW1iZXIob3B0aW9ucy50cmFuc2l0aW9uVGltZSkgOiAwO1xcbiAgICAgICAgICBfdGhpcy5fZWFzaW5nRm4gPSB0eXBlb2Ygb3B0aW9ucy5lYXNpbmdGbiA9PT0gXFwnZnVuY3Rpb25cXCcgPyBvcHRpb25zLmVhc2luZ0ZuIDogdW5kZWZpbmVkO1xcbiAgICAgICAgICByZXR1cm4gX3RoaXM7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfY3JlYXRlQ2xhc3MoQW5pbWF0aW9uUGxheWVyTWl4aW4sIFt7XFxuICAgICAgICAgIGtleTogXCJwYXVzZWRcIixcXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhdXNlZDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwidHJhbnNpdGlvblRpbWVcIixcXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25UaW1lO1xcbiAgICAgICAgICB9LFxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWNvbmRzKSB7XFxuICAgICAgICAgICAgc2Vjb25kcyA9IE51bWJlcihzZWNvbmRzKTtcXG5cXG4gICAgICAgICAgICBpZiAoIShzZWNvbmRzID49IDApKSB7XFxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IHRyYW5zaXRpb24gdGltZSBmb3IgXCIuY29uY2F0KHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCIgdG8gXCIpLmNvbmNhdChzZWNvbmRzLCBcIi4gU2Vjb25kcyBtdXN0IGJlIGEgbnVtZXJpYyB2YWx1ZSBncmVhdGhlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8uXCIpKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvblRpbWUgPSBzZWNvbmRzO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJlYXNpbmdGblwiLFxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZWFzaW5nRm47XFxuICAgICAgICAgIH0sXFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KGZuKSB7XFxuICAgICAgICAgICAgdGhpcy5fZWFzaW5nRm4gPSBmbjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiY3VycmVudFN0YXRlXCIsXFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50U3RhdGU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcImN1cnJlbnRBbmltYXRpb25cIixcXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSkge1xcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGF0ZS5uYW1lO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiaXNUcmFuc2l0aW9uaW5nXCIsXFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50U3RhdGUgPT09IHRoaXMuX3RyYW5zaXRpb25TdGF0ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiX3ByZXBhcmVDdXJyZW50U3RhdGVcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcmVwYXJlQ3VycmVudFN0YXRlKG5hbWUsIHBsYXlNZXRob2QsIHRyYW5zaXRpb25UaW1lLCBlYXNpbmdGbiwgb25FcnJvcikge1xcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgICAgICAgIGlmIChuYW1lICE9PSBudWxsICYmICF0aGlzLl9zdGF0ZXMuaGFzKG5hbWUpKSB7XFxuICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBcIi5jb25jYXQocGxheU1ldGhvZCwgXCIgYW5pbWF0aW9uIFwiKS5jb25jYXQobmFtZSwgXCIuIE5vIGFuaW1hdGlvbiBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpKTtcXG5cXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb25FcnJvciA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgICAgICAgb25FcnJvcihlKTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIHRocm93IGU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHZhciB0YXJnZXRTdGF0ZSA9IG5hbWUgIT09IG51bGwgPyB0aGlzLl9zdGF0ZXMuZ2V0KG5hbWUpIDogbnVsbDsgLy8gTWFrZSBzdXJlIHRoZSBuZXcgc3RhdGUgaXNuXFwndCBhbHJlYWR5IHBsYXlpbmdcXG5cXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50QW5pbWF0aW9uICE9PSBuYW1lKSB7XFxuICAgICAgICAgICAgICAvLyBTd2l0Y2ggdG8gdGhlIG5ldyBzdGF0ZSBpbW1lZGlhdGVseVxcbiAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25UaW1lIDw9IDApIHtcXG4gICAgICAgICAgICAgICAgLy8gQ2FuY2VsIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBzZXQgaXRzIHdlaWdodCB0byAwXFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RhdGUpIHtcXG4gICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50U3RhdGUuY2FuY2VsKCk7XFxuXFxuICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlLndlaWdodCA9IDA7XFxuXFxuICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlLmRlYWN0aXZhdGUoKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50U3RhdGUgPSB0YXJnZXRTdGF0ZTtcXG4gICAgICAgICAgICAgIH0gLy8gQmxlbmQgdG8gdGhlIG5ldyBzdGF0ZSBvdmVyIHRpbWVcXG4gICAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdG8gdHJhbnNpdGlvbiBvdXQgb2YgYW55IHN0YXRlcyB3aXRoIG5vbi16ZXJvIHdlaWdodFxcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlcyA9IEFuaW1hdGlvblBsYXllckludGVyZmFjZV90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9zdGF0ZXMudmFsdWVzKCkpLmZpbHRlcihmdW5jdGlvbiAocykge1xcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzICE9PSB0YXJnZXRTdGF0ZSAmJiAocy53ZWlnaHQgfHwgcy53ZWlnaHRQZW5kaW5nKTtcXG4gICAgICAgICAgICAgICAgfSk7IC8vIFVwZGF0ZSB0aGUgdHJhbnNpdGlvbiBzdGF0ZSB3aXRoIG5ldyBpbnB1dHNcXG5cXG5cXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvblN0YXRlLmNvbmZpZ3VyZShjdXJyZW50U3RhdGVzLCB0YXJnZXRTdGF0ZSwgdHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgICAgX3RoaXMyLl9jdXJyZW50U3RhdGUgPSB0YXJnZXRTdGF0ZTtcXG4gICAgICAgICAgICAgICAgICBfdGhpczIuX3RyYW5zaXRpb25TdGF0ZS53ZWlnaHQgPSAwO1xcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlID0gdGhpcy5fdHJhbnNpdGlvblN0YXRlO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGxheU1ldGhvZCA9PT0gXFwncGxheVxcJykge1xcbiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlLmNhbmNlbCgpO1xcblxcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSA9PT0gdGhpcy5fdHJhbnNpdGlvblN0YXRlKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25TdGF0ZS5yZXNldCh0cmFuc2l0aW9uVGltZSwgZWFzaW5nRm4sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAgICAgICBfdGhpczIuX2N1cnJlbnRTdGF0ZSA9IHRhcmdldFN0YXRlO1xcbiAgICAgICAgICAgICAgICAgIF90aGlzMi5fdHJhbnNpdGlvblN0YXRlLndlaWdodCA9IDA7XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gLy8gVXBkYXRlIHdlaWdodCBmb3IgdGhlIG5ldyBjdXJyZW50IHN0YXRlIHNvIGl0IGhhcyBmdWxsIGluZmx1ZW5jZSBmb3IgdGhlIHBsYXllclxcblxcblxcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZS53ZWlnaHQgPSAxO1xcblxcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZS51cGRhdGVJbnRlcm5hbFdlaWdodCh0aGlzLl9pbnRlcm5hbFdlaWdodCk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcInBsYXlBbmltYXRpb25cIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXlBbmltYXRpb24obmFtZSwgdHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwsIG9uTmV4dCkge1xcbiAgICAgICAgICAgIHZhciBlcnJvcjtcXG4gICAgICAgICAgICB2YXIgcmVqZWN0ID0gZmFsc2U7XFxuXFxuICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVDdXJyZW50U3RhdGUobmFtZSwgXFwncGxheVxcJywgdHJhbnNpdGlvblRpbWUgIT09IHVuZGVmaW5lZCA/IHRyYW5zaXRpb25UaW1lIDogdGhpcy5fdHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuICE9PSB1bmRlZmluZWQgPyBlYXNpbmdGbiA6IHRoaXMuX2Vhc2luZ0ZuLCBvbkVycm9yKTtcXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICBlcnJvciA9IGU7XFxuICAgICAgICAgICAgICByZWplY3QgPSB0cnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAocmVqZWN0KSB7XFxuICAgICAgICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFN0YXRlLnBsYXkob25GaW5pc2gsIG9uRXJyb3IsIG9uQ2FuY2VsLCBvbk5leHQpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJwYXVzZUFuaW1hdGlvblwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2VBbmltYXRpb24oKSB7XFxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSkge1xcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGF0ZS5wYXVzZSgpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJyZXN1bWVBbmltYXRpb25cIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUFuaW1hdGlvbihuYW1lLCB0cmFuc2l0aW9uVGltZSwgZWFzaW5nRm4sIG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCwgb25OZXh0KSB7XFxuICAgICAgICAgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jdXJyZW50U3RhdGUpIHtcXG4gICAgICAgICAgICAgIG5hbWUgPSB0aGlzLl9jdXJyZW50U3RhdGUubmFtZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdmFyIGVycm9yO1xcbiAgICAgICAgICAgIHZhciByZWplY3QgPSBmYWxzZTtcXG5cXG4gICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZUN1cnJlbnRTdGF0ZShuYW1lLCBcXCdyZXN1bWVcXCcsIHRyYW5zaXRpb25UaW1lICE9PSB1bmRlZmluZWQgPyB0cmFuc2l0aW9uVGltZSA6IHRoaXMuX3RyYW5zaXRpb25UaW1lLCBlYXNpbmdGbiAhPT0gdW5kZWZpbmVkID8gZWFzaW5nRm4gOiB0aGlzLl9lYXNpbmdGbiwgb25FcnJvcik7XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgZXJyb3IgPSBlO1xcbiAgICAgICAgICAgICAgcmVqZWN0ID0gdHJ1ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKHJlamVjdCkge1xcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQucmVqZWN0KGVycm9yKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGF0ZS5yZXN1bWUob25GaW5pc2gsIG9uRXJyb3IsIG9uQ2FuY2VsLCBvbk5leHQpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJjYW5jZWxBbmltYXRpb25cIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEFuaW1hdGlvbigpIHtcXG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFN0YXRlKSB7XFxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudFN0YXRlLmNhbmNlbCgpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJzdG9wQW5pbWF0aW9uXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wQW5pbWF0aW9uKCkge1xcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RhdGUpIHtcXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50U3RhdGUuc3RvcCgpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkZWx0YVRpbWUpIHtcXG4gICAgICAgICAgICBpZiAoQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2dldChBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YoQW5pbWF0aW9uUGxheWVyTWl4aW4ucHJvdG90eXBlKSwgXCJ1cGRhdGVcIiwgdGhpcykpIHtcXG4gICAgICAgICAgICAgIEFuaW1hdGlvblBsYXllckludGVyZmFjZV9nZXQoQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2dldFByb3RvdHlwZU9mKEFuaW1hdGlvblBsYXllck1peGluLnByb3RvdHlwZSksIFwidXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgZGVsdGFUaW1lKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSkge1xcbiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlLnVwZGF0ZShkZWx0YVRpbWUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiZGlzY2FyZFwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZCgpIHtcXG4gICAgICAgICAgICBpZiAoQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlX2dldChBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YoQW5pbWF0aW9uUGxheWVyTWl4aW4ucHJvdG90eXBlKSwgXCJkaXNjYXJkXCIsIHRoaXMpKSB7XFxuICAgICAgICAgICAgICBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VfZ2V0KEFuaW1hdGlvblBsYXllckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihBbmltYXRpb25QbGF5ZXJNaXhpbi5wcm90b3R5cGUpLCBcImRpc2NhcmRcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvblN0YXRlLmRpc2NhcmQoKTtcXG5cXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdHJhbnNpdGlvblN0YXRlO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XSk7XFxuXFxuICAgICAgICByZXR1cm4gQW5pbWF0aW9uUGxheWVyTWl4aW47XFxuICAgICAgfShCYXNlQ2xhc3MpO1xcblxcbiAgICAgIHJldHVybiBBbmltYXRpb25QbGF5ZXJNaXhpbjtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIEFuaW1hdGlvblBsYXllckludGVyZmFjZTtcXG59KCk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhbmltcGFja19BbmltYXRpb25QbGF5ZXJJbnRlcmZhY2UgPSAoQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hbmltcGFjay9zdGF0ZS9TdGF0ZUNvbnRhaW5lckludGVyZmFjZS5qc1xcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfaXRlcmFibGVUb0FycmF5KGFycikgfHwgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XFxuXFxuZnVuY3Rpb24gU3RhdGVDb250YWluZXJJbnRlcmZhY2Vfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxcblxcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfZ2V0UHJvdG90eXBlT2YobykgeyBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbmZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXFxuXFxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eS1mdW5jdGlvbiAqL1xcblxcbi8qIGVzbGludC1kaXNhYmxlIGdldHRlci1yZXR1cm4gKi9cXG5cXG4vKipcXHJcXG4gKiBDbGFzcyBmYWN0b3J5IGludGVyZmFjZSBmb3IgbWFuaXB1bGF0aW5nIGEgY29sbGVjdGlvbiBvZiB7QGxpbmsgQWJzdHJhY3RTdGF0ZX0uXFxyXFxuICpcXHJcXG4gKiBAaW50ZXJmYWNlXFxyXFxuICovXFxuXFxudmFyIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlKCkge1xcbiAgICBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0ZUNvbnRhaW5lckludGVyZmFjZSk7XFxuICB9XFxuXFxuICBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9jcmVhdGVDbGFzcyhTdGF0ZUNvbnRhaW5lckludGVyZmFjZSwgW3tcXG4gICAga2V5OiBcImdldFN0YXRlXCIsXFxuICAgIHZhbHVlOlxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIHRoZSBzdGF0ZSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIHN0YXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QWJzdHJhY3RTdGF0ZX1cXHJcXG4gICAgICovXFxuICAgIGZ1bmN0aW9uIGdldFN0YXRlKG5hbWUpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiBhbGwgc3RhdGVzIGluIHRoZSBjb250YWluZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRTdGF0ZU5hbWVzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdGF0ZU5hbWVzKCkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIEFkZCBhIG5ldyBzdGF0ZSB0byBiZSBjb250cm9sbGVkIGJ5IHRoZSBjb250YWluZXIuIFN0YXRlcyBhcmUgc3RvcmVkIGtleWVkXFxyXFxuICAgICAqIGJ5IHRoZWlyIG5hbWUgcHJvcGVydHksIHdoaWNoIG11c3QgYmUgdW5pcXVlLiBJZiBpdCBpc25cXCd0LCBhIG51bWJlciB3aWxsXFxyXFxuICAgICAqIGJlIGFkZGVkIG9yIGluY3JlbWVudGVkIHVudGlsIGEgdW5pcXVlIGtleSBpcyBnZW5lcmF0ZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QWJzdHJhY3RTdGF0ZX0gc3RhdGUgLSBTdGF0ZSB0byBhZGQgdG8gdGhlIGNvbnRhaW5lci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSBVbmlxdWUgbmFtZSBvZiB0aGUgc3RhdGUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiYWRkU3RhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFN0YXRlKHN0YXRlKSB7fVxcbiAgICAvKipcXHJcXG4gICAgICogUmVtb3ZlcyBhIHN0YXRlIHdpdGggdGhlIGdpdmVuIG5hbWUgZnJvbSB0aGUgY29udGFpbmVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIHN0YXRlIHRvIHJlbW92ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgYSBzdGF0ZSB3YXMgcmVtb3ZlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZW1vdmVTdGF0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU3RhdGUobmFtZSkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlbmFtZXMgYSBzdGF0ZSB3aXRoIHRoZSBnaXZlbiBuYW1lIGluIHRoZSBjb250YWluZXIuIE5hbWUgbXVzdCBiZSB1bmlxdWVcXHJcXG4gICAgICogdG8gdGhlIGNvbnRhaW5lciwgaWYgaXQgaXNuXFwndCB0aGUgbmFtZSB3aWxsIGJlIGluY3JlbWVudGVkIHVudGlsIGl0IGlzIHVuaXF1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnROYW1lIC0gTmFtZSBvZiB0aGUgc3RhdGUgdG8gcmVuYW1lLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3TmFtZSAtIE5hbWUgdG8gdXBkYXRlIHRoZSBzdGF0ZSB3aXRoLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAtIFVwZGF0ZWQgbmFtZSBmb3IgdGhlIHN0YXRlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlbmFtZVN0YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5hbWVTdGF0ZShjdXJyZW50TmFtZSwgbmV3TmFtZSkge31cXG4gICAgLyoqXFxyXFxuICAgICAqIERpc2NhcmRzIGFsbCBzdGF0ZXMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzY2FyZFN0YXRlc1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZFN0YXRlcygpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDcmVhdGVzIGEgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIHtAbGluayBTdGF0ZUNvbnRhaW5lckludGVyZmFjZX0gYW5kIGV4dGVuZHNcXHJcXG4gICAgICogYSBzcGVjaWZpZWQgYmFzZSBjbGFzcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtDbGFzc30gW0Jhc2VDbGFzcyA9IGNsYXNze31dIC0gVGhlIGNsYXNzIHRvIGV4dGVuZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybiB7Q2xhc3N9IEEgY2xhc3MgdGhhdCBleHRlbmRzIGBCYXNlQ2xhc3NgIGFuZCBpbXBsZW1lbnRzIHtAbGluayBTdGF0ZUNvbnRhaW5lckludGVyZmFjZX0uXFxyXFxuICAgICAqL1xcblxcbiAgfV0sIFt7XFxuICAgIGtleTogXCJNaXhpblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gTWl4aW4oKSB7XFxuICAgICAgdmFyIEJhc2VDbGFzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gICAgICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcXG4gICAgICAgICAgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgX2NsYXNzKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9jcmVhdGVDbGFzcyhfY2xhc3MpO1xcbiAgICAgIH0oKTtcXG5cXG4gICAgICAvKipcXHJcXG4gICAgICAgKiBUaGlzIG1peGluIGFkZHMgZnVuY3Rpb25hbGl0eSBmb3IgbWFuaXB1bGF0aW5nIHVuaXF1ZWx5LW5hbWVkIGFuaW1hdGlvbiBzdGF0ZXMgaW5cXHJcXG4gICAgICAgKiBhIG1hcC5cXHJcXG4gICAgICAgKi9cXG4gICAgICB2YXIgU3RhdGVDb250YWluZXJNaXhpbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDbGFzcykge1xcbiAgICAgICAgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfaW5oZXJpdHMoU3RhdGVDb250YWluZXJNaXhpbiwgX0Jhc2VDbGFzcyk7XFxuXFxuICAgICAgICB2YXIgX3N1cGVyID0gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfY3JlYXRlU3VwZXIoU3RhdGVDb250YWluZXJNaXhpbik7XFxuXFxuICAgICAgICBmdW5jdGlvbiBTdGF0ZUNvbnRhaW5lck1peGluKCkge1xcbiAgICAgICAgICB2YXIgX3RoaXM7XFxuXFxuICAgICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcXG5cXG4gICAgICAgICAgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGVDb250YWluZXJNaXhpbik7XFxuXFxuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcXG4gICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXMsIG9wdGlvbnNdLmNvbmNhdChhcmdzKSk7XFxuICAgICAgICAgIF90aGlzLl9zdGF0ZXMgPSBfdGhpcy5fc3RhdGVzICE9PSB1bmRlZmluZWQgPyBfdGhpcy5fc3RhdGVzIDogbmV3IE1hcCgpO1xcbiAgICAgICAgICByZXR1cm4gX3RoaXM7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBTdGF0ZUNvbnRhaW5lckludGVyZmFjZV9jcmVhdGVDbGFzcyhTdGF0ZUNvbnRhaW5lck1peGluLCBbe1xcbiAgICAgICAgICBrZXk6IFwiZ2V0U3RhdGVcIixcXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0YXRlKG5hbWUpIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVzLmdldChuYW1lKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiZ2V0U3RhdGVOYW1lc1wiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3RhdGVOYW1lcygpIHtcXG4gICAgICAgICAgICByZXR1cm4gU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fc3RhdGVzLmtleXMoKSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcImFkZFN0YXRlXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRTdGF0ZShzdGF0ZSkge1xcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc3RhdGUgaXMgbm90IGFscmVhZHkgaW4gdGhpcyBjb250YWluZXJcXG4gICAgICAgICAgICBpZiAoU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fc3RhdGVzLnZhbHVlcygpKS5pbmNsdWRlcyhzdGF0ZSkpIHtcXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNhbm5vdCBhZGQgYW5pbWF0aW9uIHRvIHN0YXRlIFwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiLiBBbmltYXRpb24gd2FzIGFscmVhZHkgYWRkZWQuXCIpKTtcXG4gICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5uYW1lO1xcbiAgICAgICAgICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBzdGF0ZSBuYW1lIGlzIHVuaXF1ZVxcblxcblxcbiAgICAgICAgICAgIHZhciB1bmlxdWVOYW1lID0gY29yZV9VdGlscy5nZXRVbmlxdWVOYW1lKHN0YXRlLm5hbWUsIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuX3N0YXRlcy5rZXlzKCkpKTtcXG5cXG4gICAgICAgICAgICBpZiAoc3RhdGUubmFtZSAhPT0gdW5pcXVlTmFtZSkge1xcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQW5pbWF0aW9uIG5hbWUgXCIuY29uY2F0KHN0YXRlLm5hbWUsIFwiIGlzIG5vdCB1bmlxdWUgZm9yIHN0YXRlIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi4gTmV3IGFuaW1hdGlvbiB3aWxsIGJlIGFkZGVkIHdpdGggbmFtZSBcIikuY29uY2F0KHVuaXF1ZU5hbWUsIFwiLlwiKSk7XFxuICAgICAgICAgICAgICBzdGF0ZS5uYW1lID0gdW5pcXVlTmFtZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdGhpcy5fc3RhdGVzLnNldChzdGF0ZS5uYW1lLCBzdGF0ZSk7XFxuXFxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLm5hbWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAga2V5OiBcInJlbW92ZVN0YXRlXCIsXFxuICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTdGF0ZShuYW1lKSB7XFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHN0YXRlIGlzIGluIHRoaXMgY29udGFpbmVyXFxuICAgICAgICAgICAgaWYgKCF0aGlzLl9zdGF0ZXMgfHwgIXRoaXMuX3N0YXRlcy5oYXMobmFtZSkpIHtcXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRpZCBub3QgcmVtb3ZlIGFuaW1hdGlvbiBcIi5jb25jYXQobmFtZSwgXCIgZnJvbSBzdGF0ZSBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIE5vIGFuaW1hdGlvbiBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpKTtcXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgdGhpcy5fc3RhdGVzLmdldChuYW1lKS5kaXNjYXJkKCk7XFxuXFxuICAgICAgICAgICAgdGhpcy5fc3RhdGVzW1wiZGVsZXRlXCJdKG5hbWUpO1xcblxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgIGtleTogXCJyZW5hbWVTdGF0ZVwiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuYW1lU3RhdGUoY3VycmVudE5hbWUsIG5ld05hbWUpIHtcXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHN0YXRlIGlzIGluIHRoaXMgY29udGFpbmVyXFxuICAgICAgICAgICAgaWYgKCF0aGlzLl9zdGF0ZXMgfHwgIXRoaXMuX3N0YXRlcy5oYXMoY3VycmVudE5hbWUpKSB7XFxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVuYW1lIGFuaW1hdGlvbiBcIi5jb25jYXQoY3VycmVudE5hbWUsIFwiIGluIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi4gTm8gYW5pbWF0aW9uIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZXMuZ2V0KGN1cnJlbnROYW1lKTsgLy8gRXhpdCBpZiB0aGUgbmFtZXMgYXJlIHRoZSBzYW1lXFxuXFxuXFxuICAgICAgICAgICAgaWYgKGN1cnJlbnROYW1lID09PSBuZXdOYW1lKSB7XFxuICAgICAgICAgICAgICByZXR1cm4gY3VycmVudE5hbWU7XFxuICAgICAgICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIG5hbWUgaXMgdW5pcXVlXFxuXFxuXFxuICAgICAgICAgICAgdmFyIHVuaXF1ZU5hbWUgPSBjb3JlX1V0aWxzLmdldFVuaXF1ZU5hbWUobmV3TmFtZSwgU3RhdGVDb250YWluZXJJbnRlcmZhY2VfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fc3RhdGVzLmtleXMoKSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XFxuICAgICAgICAgICAgICByZXR1cm4gcy5uYW1lICE9PSBjdXJyZW50TmFtZTtcXG4gICAgICAgICAgICB9KSk7XFxuXFxuICAgICAgICAgICAgaWYgKG5ld05hbWUgIT09IHVuaXF1ZU5hbWUpIHtcXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkFuaW1hdGlvbiBuYW1lIFwiLmNvbmNhdChuZXdOYW1lLCBcIiBpcyBub3QgdW5pcXVlIGluIHN0YXRlIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi4gQW5pbWF0aW9uIHdpbGwgYmUgcmVuYW1lZCB0byBcIikuY29uY2F0KHVuaXF1ZU5hbWUsIFwiLlwiKSk7XFxuICAgICAgICAgICAgICBuZXdOYW1lID0gdW5pcXVlTmFtZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgc3RhdGUubmFtZSA9IG5ld05hbWU7XFxuXFxuICAgICAgICAgICAgdGhpcy5fc3RhdGVzW1wiZGVsZXRlXCJdKGN1cnJlbnROYW1lKTtcXG5cXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZXMuc2V0KHN0YXRlLm5hbWUsIHN0YXRlKTtcXG5cXG4gICAgICAgICAgICByZXR1cm4gc3RhdGUubmFtZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICBrZXk6IFwiZGlzY2FyZFN0YXRlc1wiLFxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZFN0YXRlcygpIHtcXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgICAgICAgIHN0YXRlLmRpc2NhcmQoKTtcXG4gICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc3RhdGVzO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XSk7XFxuXFxuICAgICAgICByZXR1cm4gU3RhdGVDb250YWluZXJNaXhpbjtcXG4gICAgICB9KEJhc2VDbGFzcyk7XFxuXFxuICAgICAgcmV0dXJuIFN0YXRlQ29udGFpbmVyTWl4aW47XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBTdGF0ZUNvbnRhaW5lckludGVyZmFjZTtcXG59KCk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBzdGF0ZV9TdGF0ZUNvbnRhaW5lckludGVyZmFjZSA9IChTdGF0ZUNvbnRhaW5lckludGVyZmFjZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svc3RhdGUvUXVldWVTdGF0ZS5qc1xcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBRdWV1ZVN0YXRlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIFF1ZXVlU3RhdGVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gUXVldWVTdGF0ZV9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IFF1ZXVlU3RhdGVfaXRlcmFibGVUb0FycmF5KGFycikgfHwgUXVldWVTdGF0ZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IFF1ZXVlU3RhdGVfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gUXVldWVTdGF0ZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gUXVldWVTdGF0ZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XFxuXFxuZnVuY3Rpb24gUXVldWVTdGF0ZV9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIFF1ZXVlU3RhdGVfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gUXVldWVTdGF0ZV9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gUXVldWVTdGF0ZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIFF1ZXVlU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFF1ZXVlU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX2dldCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7IFF1ZXVlU3RhdGVfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IFF1ZXVlU3RhdGVfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IFF1ZXVlU3RhdGVfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gUXVldWVTdGF0ZV9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IFF1ZXVlU3RhdGVfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgUXVldWVTdGF0ZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX3NldFByb3RvdHlwZU9mKG8sIHApIHsgUXVldWVTdGF0ZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gUXVldWVTdGF0ZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IFF1ZXVlU3RhdGVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gUXVldWVTdGF0ZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gUXVldWVTdGF0ZV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gUXVldWVTdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoUXVldWVTdGF0ZV90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gUXVldWVTdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIFF1ZXVlU3RhdGVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5mdW5jdGlvbiBRdWV1ZVN0YXRlX2dldFByb3RvdHlwZU9mKG8pIHsgUXVldWVTdGF0ZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBRdWV1ZVN0YXRlX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuXFxuXFxuLyoqXFxyXFxuICogQ2xhc3MgZm9yIHBsYXlpbmcgYW4gb3JkZXJlZCBhcnJheSBvZiBhbmltYXRpb24gc3RhdGVzIGluIHNlcXVlbmNlLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RTdGF0ZVxcclxcbiAqIEBpbXBsZW1lbnRzIEBBbmltYXRpb25QbGF5ZXJJbnRlcmZhY2VcXHJcXG4gKi9cXG5cXG52YXIgUXVldWVTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvblBsYXllckludGVyKSB7XFxuICBRdWV1ZVN0YXRlX2luaGVyaXRzKFF1ZXVlU3RhdGUsIF9BbmltYXRpb25QbGF5ZXJJbnRlcik7XFxuXFxuICB2YXIgX3N1cGVyID0gUXVldWVTdGF0ZV9jcmVhdGVTdXBlcihRdWV1ZVN0YXRlKTtcXG5cXG4gIC8qKlxcclxcbiAgICogQGNvbnN0cnVjdG9yXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoZSBzdGF0ZS5cXHJcXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXV0b0FkdmFuY2U9dHJ1ZV0gLSBXaGV0aGVyIHRvIGF1dG1hdGljYWxseSBhZHZhbmNlXFxyXFxuICAgKiB0byB0aGUgbmV4dCBzdGF0ZSBpbiB0aGUgcXVldWUgYXMgZWFjaCBzdGF0ZSBjb21wbGV0ZXMuXFxyXFxuICAgKiBAcGFyYW0ge0FycmF5LjxBYnN0cmFjdFN0YXRlPn0gW3F1ZXVlU3RhdGVzPVtdXSAtIEFycmF5IG9mIHN0YXRlcyB0byBiZSBwbGF5ZWRcXHJcXG4gICAqIGluIG9yZGVyLlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBRdWV1ZVN0YXRlKCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcXG4gICAgdmFyIHF1ZXVlU3RhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcXG5cXG4gICAgUXVldWVTdGF0ZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWV1ZVN0YXRlKTtcXG5cXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcXG4gICAgcXVldWVTdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICBfdGhpcy5hZGRTdGF0ZShzdGF0ZSk7XFxuICAgIH0pO1xcbiAgICBfdGhpcy5fcXVldWUgPSBfdGhpcy5fc3RhdGVzLmtleXMoKTtcXG4gICAgX3RoaXMuX2RvbmUgPSB0cnVlO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgd2hldGhlciB0aGUgYW5pbWF0aW9uIHF1ZXVlIGhhcyByZWFjaGVkIHRoZSBlbmQuXFxyXFxuICAgKi9cXG5cXG5cXG4gIFF1ZXVlU3RhdGVfY3JlYXRlQ2xhc3MoUXVldWVTdGF0ZSwgW3tcXG4gICAga2V5OiBcImRvbmVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2RvbmU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIGludGVybmFsIHdlaWdodC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiaW50ZXJuYWxXZWlnaHRcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGF0ZSA/IHRoaXMuX2N1cnJlbnRTdGF0ZS5pbnRlcm5hbFdlaWdodCAqIHRoaXMuX2ludGVybmFsV2VpZ2h0IDogMDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzdGFydCB0aGUgcXVldWUgaXRlcmF0b3IuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3Jlc2V0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzZXQoKSB7XFxuICAgICAgdGhpcy5fcXVldWUgPSB0aGlzLl9zdGF0ZXMua2V5cygpO1xcblxcbiAgICAgIHZhciBfdGhpcyRfcXVldWUkbmV4dCA9IHRoaXMuX3F1ZXVlLm5leHQoKSxcXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRfcXVldWUkbmV4dC52YWx1ZSxcXG4gICAgICAgICAgZG9uZSA9IF90aGlzJF9xdWV1ZSRuZXh0LmRvbmU7XFxuXFxuICAgICAgdGhpcy5fZG9uZSA9IGRvbmU7XFxuICAgICAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIE11bHRpcGxpZXMgdGhlIHVzZXIgd2VpZ2h0IGJ5IGEgZmFjdG9yIHRvIGRldGVybWluZSB0aGUgaW50ZXJuYWwgd2VpZ2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmFjdG9yIC0gMC0xIG11bHRpcGxpZXIgdG8gYXBwbHkgdG8gdGhlIHVzZXIgd2VpZ2h0LlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZUludGVybmFsV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFdlaWdodChmYWN0b3IpIHtcXG4gICAgICBRdWV1ZVN0YXRlX2dldChRdWV1ZVN0YXRlX2dldFByb3RvdHlwZU9mKFF1ZXVlU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZhY3Rvcik7XFxuXFxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSkge1xcbiAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlLnVwZGF0ZUludGVybmFsV2VpZ2h0KHRoaXMuX2ludGVybmFsV2VpZ2h0KTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0YXJ0IHRoZSBuZXh0IGFuaW1hdGlvbiBpbiB0aGUgcXVldWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbk5leHQgLSBGdW5jdGlvbiB0byBleGVjdXRlIGVhY2ggdGltZSBhbiBhbmltYXRpb24gY29tcGxldGVzXFxyXFxuICAgICAqIGFuZCB0aGUgcXVldWUgbW92ZXMgdG8gdGhlIG5leHQgYW5pbWF0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt3cmFwPWZhbHNlXSAtIFdoZXRoZXIgb3Igbm90IHRvIHN0YXJ0IHRoZSBxdWV1ZSBmcm9tIHRoZVxcclxcbiAgICAgKiBiZWdpbm5pbmcgYWdhaW4gaWYgdGhlIGVuZCBoYXMgYmVlbiByZWFjaGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwibmV4dFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dChvbk5leHQpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICB2YXIgd3JhcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XFxuXFxuICAgICAgLy8gTW92ZSB0aGUgcXVldWUgZm9yd2FyZFxcbiAgICAgIHZhciBfdGhpcyRfcXVldWUkbmV4dDIgPSB0aGlzLl9xdWV1ZS5uZXh0KCksXFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRfcXVldWUkbmV4dDIudmFsdWUsXFxuICAgICAgICAgIGRvbmUgPSBfdGhpcyRfcXVldWUkbmV4dDIuZG9uZTtcXG5cXG4gICAgICB0aGlzLl9kb25lID0gZG9uZTtcXG4gICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTsgLy8gVGhlIHF1ZXVlIGhhcyByZWFjaGVkIHRoZSBlbmRcXG5cXG4gICAgICBpZiAoZG9uZSkge1xcbiAgICAgICAgLy8gU3RhcnQgdGhlIHF1ZXVlIG92ZXJcXG4gICAgICAgIGlmICh3cmFwKSB7XFxuICAgICAgICAgIHJldHVybiB0aGlzLnBsYXkodGhpcy5fcGxheUNhbGxiYWNrcy5vbkZpbmlzaCwgdGhpcy5fcGxheUNhbGxiYWNrcy5vbkVycm9yLCB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uQ2FuY2VsLCBvbk5leHQpO1xcbiAgICAgICAgfSAvLyBTdG9wIHRoZSBxdWV1ZVxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgIHRoaXMuX3Byb21pc2VzLmZpbmlzaC5yZXNvbHZlKCk7XFxuXFxuICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5maW5pc2g7XFxuICAgICAgICB9XFxuICAgICAgfSAvLyBTaWduYWwgdGhlIG5leHQgYW5pbWF0aW9uIGlzIHN0YXJ0aW5nXFxuXFxuXFxuICAgICAgaWYgKHR5cGVvZiBvbk5leHQgPT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICB2YXIgbGFzdE5hbWUgPSBRdWV1ZVN0YXRlX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuX3N0YXRlcy5rZXlzKCkpW3RoaXMuX3N0YXRlcy5zaXplIC0gMV07XFxuXFxuICAgICAgICB2YXIgaXNRdWV1ZUVuZCA9IG5hbWUgPT09IGxhc3ROYW1lO1xcbiAgICAgICAgb25OZXh0KHtcXG4gICAgICAgICAgbmFtZTogbmFtZSxcXG4gICAgICAgICAgY2FuQWR2YW5jZTogdGhpcy5nZXRTdGF0ZShuYW1lKS5sb29wQ291bnQgIT09IEluZmluaXR5ICYmICFpc1F1ZXVlRW5kLFxcbiAgICAgICAgICBpc1F1ZXVlRW5kOiBpc1F1ZXVlRW5kXFxuICAgICAgICB9KTtcXG4gICAgICB9IC8vIFN0YXJ0IHRoZSBuZXh0IGFuaW1hdGlvblxcblxcblxcbiAgICAgIHRoaXMucGxheUFuaW1hdGlvbihuYW1lLCB0aGlzLl90cmFuc2l0aW9uVGltZSwgdGhpcy5fZWFzaW5nRm4sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmICghX3RoaXMyLl9wYXVzZWQgJiYgIV90aGlzMi5pc1RyYW5zaXRpb25pbmcpIHtcXG4gICAgICAgICAgX3RoaXMyLm5leHQob25OZXh0KTtcXG4gICAgICAgIH1cXG4gICAgICB9LCB0aGlzLl9wbGF5Q2FsbGJhY2tzLm9uRXJyb3IpO1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5maW5pc2g7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInBsYXlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkob25GaW5pc2gsIG9uRXJyb3IsIG9uQ2FuY2VsLCBvbk5leHQpIHtcXG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gICAgICB2YXIgbmFtZSA9IHRoaXMuX3Jlc2V0KCk7XFxuXFxuICAgICAgUXVldWVTdGF0ZV9nZXQoUXVldWVTdGF0ZV9nZXRQcm90b3R5cGVPZihRdWV1ZVN0YXRlLnByb3RvdHlwZSksIFwicGxheVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCk7XFxuXFxuICAgICAgaWYgKHRoaXMuX2RvbmUpIHtcXG4gICAgICAgIHRoaXMuX3Byb21pc2VzLmZpbmlzaC5yZXNvbHZlKCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIC8vIFNpZ25hbCB0aGUgbmV4dCBhbmltYXRpb24gaXMgc3RhcnRpbmdcXG4gICAgICAgIGlmIChuYW1lICE9PSB0aGlzLmN1cnJlbnRBbmltYXRpb24gJiYgdHlwZW9mIG9uTmV4dCA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgdmFyIGxhc3ROYW1lID0gUXVldWVTdGF0ZV90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9zdGF0ZXMua2V5cygpKVt0aGlzLl9zdGF0ZXMuc2l6ZSAtIDFdO1xcblxcbiAgICAgICAgICB2YXIgaXNRdWV1ZUVuZCA9IG5hbWUgPT09IGxhc3ROYW1lO1xcbiAgICAgICAgICBvbk5leHQoe1xcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXFxuICAgICAgICAgICAgY2FuQWR2YW5jZTogbmFtZSA/IHRoaXMuZ2V0U3RhdGUobmFtZSkubG9vcENvdW50ICE9PSBJbmZpbml0eSAmJiAhaXNRdWV1ZUVuZCA6IHRydWUsXFxuICAgICAgICAgICAgaXNRdWV1ZUVuZDogIW5hbWUgfHwgaXNRdWV1ZUVuZFxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH0gLy8gU3RhcnQgdGhlIG5leHQgYW5pbWF0aW9uXFxuXFxuXFxuICAgICAgICB0aGlzLnBsYXlBbmltYXRpb24obmFtZSwgdGhpcy5fY3VycmVudFN0YXRlID8gdGhpcy5fdHJhbnNpdGlvblRpbWUgOiAwLCB0aGlzLl9lYXNpbmdGbiwgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICBpZiAoIV90aGlzMy5fcGF1c2VkICYmICFfdGhpczMuaXNUcmFuc2l0aW9uaW5nKSB7XFxuICAgICAgICAgICAgX3RoaXMzLm5leHQob25OZXh0KTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSwgb25FcnJvcik7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5maW5pc2g7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInBhdXNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcXG4gICAgICB2YXIgcGF1c2VkID0gUXVldWVTdGF0ZV9nZXQoUXVldWVTdGF0ZV9nZXRQcm90b3R5cGVPZihRdWV1ZVN0YXRlLnByb3RvdHlwZSksIFwicGF1c2VcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICB0aGlzLnBhdXNlQW5pbWF0aW9uKCk7XFxuICAgICAgcmV0dXJuIHBhdXNlZDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVzdW1lXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWUob25GaW5pc2gsIG9uRXJyb3IsIG9uQ2FuY2VsLCBvbk5leHQpIHtcXG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICBpZiAodGhpcy5fZG9uZSkge1xcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheShvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwsIG9uTmV4dCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIFF1ZXVlU3RhdGVfZ2V0KFF1ZXVlU3RhdGVfZ2V0UHJvdG90eXBlT2YoUXVldWVTdGF0ZS5wcm90b3R5cGUpLCBcInJlc3VtZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCk7XFxuXFxuICAgICAgICB0aGlzLnJlc3VtZUFuaW1hdGlvbih0aGlzLl9jdXJyZW50U3RhdGUubmFtZSwgdGhpcy5fdHJhbnNpdGlvblRpbWUsIHRoaXMuX2Vhc2luZ0ZuLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIGlmICghX3RoaXM0Ll9wYXVzZWQgJiYgIV90aGlzNC5pc1RyYW5zaXRpb25pbmcpIHtcXG4gICAgICAgICAgICBfdGhpczQubmV4dChvbk5leHQpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LCBvbkVycm9yKTtcXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5maW5pc2g7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJjYW5jZWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcXG4gICAgICB2YXIgY2FuY2VsZWQgPSBRdWV1ZVN0YXRlX2dldChRdWV1ZVN0YXRlX2dldFByb3RvdHlwZU9mKFF1ZXVlU3RhdGUucHJvdG90eXBlKSwgXCJjYW5jZWxcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICBpZiAodGhpcy5fY3VycmVudFN0YXRlKSB7XFxuICAgICAgICB0aGlzLl9jdXJyZW50U3RhdGUuY2FuY2VsKCk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBjYW5jZWxlZDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcXG4gICAgICB2YXIgc3RvcHBlZCA9IFF1ZXVlU3RhdGVfZ2V0KFF1ZXVlU3RhdGVfZ2V0UHJvdG90eXBlT2YoUXVldWVTdGF0ZS5wcm90b3R5cGUpLCBcInN0b3BcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcXG4gICAgICB0aGlzLl9kb25lID0gdHJ1ZTtcXG4gICAgICByZXR1cm4gc3RvcHBlZDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzY2FyZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZCgpIHtcXG4gICAgICBRdWV1ZVN0YXRlX2dldChRdWV1ZVN0YXRlX2dldFByb3RvdHlwZU9mKFF1ZXVlU3RhdGUucHJvdG90eXBlKSwgXCJkaXNjYXJkXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuXFxuICAgICAgdGhpcy5kaXNjYXJkU3RhdGVzKCk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBRdWV1ZVN0YXRlO1xcbn0oYW5pbXBhY2tfQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlLk1peGluKHN0YXRlX1N0YXRlQ29udGFpbmVySW50ZXJmYWNlLk1peGluKHN0YXRlX0Fic3RyYWN0U3RhdGUpKSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBzdGF0ZV9RdWV1ZVN0YXRlID0gKFF1ZXVlU3RhdGUpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2FuaW1wYWNrL3N0YXRlL0Fic3RyYWN0QmxlbmRTdGF0ZS5qc1xcbmZ1bmN0aW9uIEFic3RyYWN0QmxlbmRTdGF0ZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIEFic3RyYWN0QmxlbmRTdGF0ZV90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBBYnN0cmFjdEJsZW5kU3RhdGVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdEJsZW5kU3RhdGVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0QmxlbmRTdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdEJsZW5kU3RhdGVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBBYnN0cmFjdEJsZW5kU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEFic3RyYWN0QmxlbmRTdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0QmxlbmRTdGF0ZV9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IEFic3RyYWN0QmxlbmRTdGF0ZV9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gQWJzdHJhY3RCbGVuZFN0YXRlX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIEFic3RyYWN0QmxlbmRTdGF0ZV9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0QmxlbmRTdGF0ZV9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gQWJzdHJhY3RCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdEJsZW5kU3RhdGVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgQWJzdHJhY3RCbGVuZFN0YXRlX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0QmxlbmRTdGF0ZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IEFic3RyYWN0QmxlbmRTdGF0ZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gQWJzdHJhY3RCbGVuZFN0YXRlX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RCbGVuZFN0YXRlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBBYnN0cmFjdEJsZW5kU3RhdGVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gQWJzdHJhY3RCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIEFic3RyYWN0QmxlbmRTdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdEJsZW5kU3RhdGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChBYnN0cmFjdEJsZW5kU3RhdGVfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIEFic3RyYWN0QmxlbmRTdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdEJsZW5kU3RhdGVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RCbGVuZFN0YXRlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKG8pIHsgQWJzdHJhY3RCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIEFic3RyYWN0QmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcblxcblxcblxcbi8qKlxcclxcbiAqIEJhc2UgY2xhc3MgZm9yIGEgc3RhdGUgdGhhdCBibGVuZHMgYSBjb2xsZWN0aW9uIG9mIHtAbGluayBBYnN0cmFjdFN0YXRlfS5cXHJcXG4gKlxcclxcbiAqIEBhYnN0cmFjdFxcclxcbiAqIEBpbXBsZW1lbnRzIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlXFxyXFxuICovXFxuXFxudmFyIEFic3RyYWN0QmxlbmRTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N0YXRlQ29udGFpbmVySW50ZXJmKSB7XFxuICBBYnN0cmFjdEJsZW5kU3RhdGVfaW5oZXJpdHMoQWJzdHJhY3RCbGVuZFN0YXRlLCBfU3RhdGVDb250YWluZXJJbnRlcmYpO1xcblxcbiAgdmFyIF9zdXBlciA9IEFic3RyYWN0QmxlbmRTdGF0ZV9jcmVhdGVTdXBlcihBYnN0cmFjdEJsZW5kU3RhdGUpO1xcblxcbiAgZnVuY3Rpb24gQWJzdHJhY3RCbGVuZFN0YXRlKCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcXG4gICAgdmFyIGJsZW5kU3RhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcXG5cXG4gICAgQWJzdHJhY3RCbGVuZFN0YXRlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFic3RyYWN0QmxlbmRTdGF0ZSk7XFxuXFxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcXG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcXG4gICAgfVxcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXMsIG9wdGlvbnNdLmNvbmNhdChhcmdzKSk7XFxuICAgIGJsZW5kU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgX3RoaXMuYWRkU3RhdGUoc3RhdGUpO1xcbiAgICB9KTtcXG4gICAgcmV0dXJuIF90aGlzO1xcbiAgfVxcbiAgLyoqXFxyXFxuICAgKiBHZXRzIHRoZSBzdW0gb2YgaW50ZXJuYWwgd2VpZ2h0cyBvZiB0aGUgc3ViLXN0YXRlcy5cXHJcXG4gICAqXFxyXFxuICAgKiBAcmVhZG9ubHlcXHJcXG4gICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgKi9cXG5cXG5cXG4gIEFic3RyYWN0QmxlbmRTdGF0ZV9jcmVhdGVDbGFzcyhBYnN0cmFjdEJsZW5kU3RhdGUsIFt7XFxuICAgIGtleTogXCJpbnRlcm5hbFdlaWdodFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICB2YXIgYmxlbmRXZWlnaHRzID0gMDtcXG5cXG4gICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIGJsZW5kV2VpZ2h0cyArPSBzdGF0ZS5pbnRlcm5hbFdlaWdodDtcXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm4gYmxlbmRXZWlnaHRzO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm5zIHRoZSB3ZWlnaHQgb2YgYSBzdGF0ZSBjb250cm9sbGVkIGJ5IHRoZSBjb250YWluZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgc3RhdGUgdG8gcmV0dXJuIHRoZSB3ZWlnaHQgZnJvbS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge251bWJlcn0gLSBXZWlnaHQgb2YgdGhlIHN0YXRlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldEJsZW5kV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCbGVuZFdlaWdodChuYW1lKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRTdGF0ZShuYW1lKTtcXG5cXG4gICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCB3ZWlnaHQgb2Ygc3RhdGUgXCIuY29uY2F0KG5hbWUsIFwiIGZyb20gQmxlbmRTdGF0ZSBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIE5vIHN0YXRlIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gc3RhdGUud2VpZ2h0O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXRzIHRoZSB3ZWlnaHQgb2YgYSBzdGF0ZSBjb250cm9sbGVkIGJ5IHRoZSBjb250YWluZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgc3RhdGUgdG8gc2V0IHRoZSB3ZWlnaHQgb2YuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBXZWlnaHQgdmFsdWUgdG8gc2V0IG9uIHRoZSBzdGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNldEJsZW5kV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCbGVuZFdlaWdodChuYW1lLCB3ZWlnaHQpIHtcXG4gICAgICB2YXIgc2Vjb25kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcXG4gICAgICB2YXIgZWFzaW5nRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIG5hbWUgaXMgdmFsaWRcXG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldFN0YXRlKG5hbWUpO1xcblxcbiAgICAgIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IHdlaWdodCBvZiBzdGF0ZSBcIi5jb25jYXQobmFtZSwgXCIgZnJvbSBCbGVuZFN0YXRlIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi4gTm8gc3RhdGUgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHdlaWdodCA9IGNvcmVfTWF0aFV0aWxzLmNsYW1wKHdlaWdodCk7XFxuICAgICAgcmV0dXJuIHN0YXRlLnNldFdlaWdodCh3ZWlnaHQsIHNlY29uZHMsIGVhc2luZ0ZuKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogTXVsdGlwbGllcyB0aGUgd2VpZ2h0IG9mIGVhY2ggc3ViLXN0YXRlIGJ5IGEgZmFjdG9yIHRvIGRldGVybWluZSB0aGUgaW50ZXJuYWwgd2VpZ2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmFjdG9yIC0gMC0xIG11bHRpcGxpZXIgdG8gYXBwbHkgdG8gdGhlIHVzZXIgd2VpZ2h0LlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZUludGVybmFsV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFdlaWdodChmYWN0b3IpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICBBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0KEFic3RyYWN0QmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdEJsZW5kU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZhY3Rvcik7XFxuXFxuICAgICAgdGhpcy5fc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICBzdGF0ZS51cGRhdGVJbnRlcm5hbFdlaWdodChfdGhpczIuX2ludGVybmFsV2VpZ2h0KTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlIGFueSB2YWx1ZXMgb2YgdGhlIHN1Yi1zdGF0ZXMgdGhhdCBuZWVkIHRvIGJlIGV2YWx1YXRlZCBldmVyeSBmcmFtZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSAtIFRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkZWx0YVRpbWUpIHtcXG4gICAgICBBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0KEFic3RyYWN0QmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdEJsZW5kU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBkZWx0YVRpbWUpO1xcblxcbiAgICAgIHRoaXMuX3N0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xcbiAgICAgICAgc3RhdGUudXBkYXRlKGRlbHRhVGltZSk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0YXJ0IHBsYXliYWNrIG9mIHRoZSBzdWItc3RhdGVzIGZyb20gdGhlIGJlZ2lubmluZy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uRmluaXNoIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBzdGF0ZSBmaW5pc2hlcy5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uRXJyb3IgLSBGdW5jdGlvbiB0byBleGVjdXRlIGlmIHRoZSBzdGF0ZSBlbmNvdW50ZXJzXFxyXFxuICAgICAqIGFuIGVycm9yIGR1cmluZyBwbGF5YmFjay5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uQ2FuY2VsIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiBwbGF5YmFjayBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInBsYXlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkob25GaW5pc2gsIG9uRXJyb3IsIG9uQ2FuY2VsKSB7XFxuICAgICAgdmFyIHByb21pc2VzID0gW0Fic3RyYWN0QmxlbmRTdGF0ZV9nZXQoQWJzdHJhY3RCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKEFic3RyYWN0QmxlbmRTdGF0ZS5wcm90b3R5cGUpLCBcInBsYXlcIiwgdGhpcykuY2FsbCh0aGlzKV07XFxuXFxuICAgICAgdGhpcy5fc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICBwcm9taXNlcy5wdXNoKHN0YXRlLnBsYXkoKSk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQuYWxsKHByb21pc2VzLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQYXVzZSBwbGF5YmFjayBvZiB0aGUgc3ViLXN0YXRlcy4gVGhpcyBwcmV2ZW50cyBwZW5kaW5nIHByb21pc2VzIGZyb20gYmVpbmcgZXhlY3V0ZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInBhdXNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcXG4gICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLnBhdXNlKCk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgcmV0dXJuIEFic3RyYWN0QmxlbmRTdGF0ZV9nZXQoQWJzdHJhY3RCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKEFic3RyYWN0QmxlbmRTdGF0ZS5wcm90b3R5cGUpLCBcInBhdXNlXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlc3VtZSBwbGF5YmFjayBvZiB0aGUgc3ViLXN0YXRlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uRmluaXNoIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSBzdGF0ZSBmaW5pc2hlcy5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uRXJyb3IgLSBGdW5jdGlvbiB0byBleGVjdXRlIGlmIHRoZSBzdGF0ZSBlbmNvdW50ZXJzXFxyXFxuICAgICAqIGFuIGVycm9yIGR1cmluZyBwbGF5YmFjay5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9uQ2FuY2VsIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiBwbGF5YmFjayBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCkge1xcbiAgICAgIHZhciBwcm9taXNlcyA9IFtBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0KEFic3RyYWN0QmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdEJsZW5kU3RhdGUucHJvdG90eXBlKSwgXCJyZXN1bWVcIiwgdGhpcykuY2FsbCh0aGlzKV07XFxuXFxuICAgICAgdGhpcy5fc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICBwcm9taXNlcy5wdXNoKHN0YXRlLnJlc3VtZSgpKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5hbGwocHJvbWlzZXMsIG9uRmluaXNoLCBvbkVycm9yLCBvbkNhbmNlbCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENhbmNlbCBwbGF5YmFjayBvZiB0aGUgc3ViLXN0YXRlcyBhbmQgY2FuY2VsIGFueSBwZW5kaW5nIHByb21pc2VzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjYW5jZWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcXG4gICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLmNhbmNlbCgpO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIHJldHVybiBBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0KEFic3RyYWN0QmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdEJsZW5kU3RhdGUucHJvdG90eXBlKSwgXCJjYW5jZWxcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCBwbGF5YmFjayBvZiB0aGUgc3ViLXN0YXRlcyBhbmQgcmVzb2x2ZSBhbnkgcGVuZGluZyBwcm9taXNlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcXG4gICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLnN0b3AoKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm4gQWJzdHJhY3RCbGVuZFN0YXRlX2dldChBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0UHJvdG90eXBlT2YoQWJzdHJhY3RCbGVuZFN0YXRlLnByb3RvdHlwZSksIFwic3RvcFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBEaXNjYXJkcyBhbGwgc3ViLXN0YXRlIHJlc291cmNlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzY2FyZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZCgpIHtcXG4gICAgICBBYnN0cmFjdEJsZW5kU3RhdGVfZ2V0KEFic3RyYWN0QmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdEJsZW5kU3RhdGUucHJvdG90eXBlKSwgXCJkaXNjYXJkXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuXFxuICAgICAgdGhpcy5kaXNjYXJkU3RhdGVzKCk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBYnN0cmFjdEJsZW5kU3RhdGU7XFxufShzdGF0ZV9TdGF0ZUNvbnRhaW5lckludGVyZmFjZS5NaXhpbihzdGF0ZV9BYnN0cmFjdFN0YXRlKSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBzdGF0ZV9BYnN0cmFjdEJsZW5kU3RhdGUgPSAoQWJzdHJhY3RCbGVuZFN0YXRlKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hbmltcGFjay9zdGF0ZS9GcmVlQmxlbmRTdGF0ZS5qc1xcbmZ1bmN0aW9uIEZyZWVCbGVuZFN0YXRlX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gRnJlZUJsZW5kU3RhdGVfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgRnJlZUJsZW5kU3RhdGVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBGcmVlQmxlbmRTdGF0ZV9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gRnJlZUJsZW5kU3RhdGVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gRnJlZUJsZW5kU3RhdGVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBGcmVlQmxlbmRTdGF0ZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgRnJlZUJsZW5kU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBGcmVlQmxlbmRTdGF0ZV9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBGcmVlQmxlbmRTdGF0ZV9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgRnJlZUJsZW5kU3RhdGVfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IEZyZWVCbGVuZFN0YXRlX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIEZyZWVCbGVuZFN0YXRlX2dldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XFxuXFxuZnVuY3Rpb24gRnJlZUJsZW5kU3RhdGVfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IEZyZWVCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBGcmVlQmxlbmRTdGF0ZV9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBGcmVlQmxlbmRTdGF0ZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBGcmVlQmxlbmRTdGF0ZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IEZyZWVCbGVuZFN0YXRlX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBGcmVlQmxlbmRTdGF0ZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIEZyZWVCbGVuZFN0YXRlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBGcmVlQmxlbmRTdGF0ZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBGcmVlQmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gRnJlZUJsZW5kU3RhdGVfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIEZyZWVCbGVuZFN0YXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxcblxcbmZ1bmN0aW9uIEZyZWVCbGVuZFN0YXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoRnJlZUJsZW5kU3RhdGVfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIEZyZWVCbGVuZFN0YXRlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIEZyZWVCbGVuZFN0YXRlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIEZyZWVCbGVuZFN0YXRlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gRnJlZUJsZW5kU3RhdGVfZ2V0UHJvdG90eXBlT2YobykgeyBGcmVlQmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBGcmVlQmxlbmRTdGF0ZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qKlxcclxcbiAqIENsYXNzIGZvciBibGVuZGluZyBOIG51bWJlciBvZiBibGVuZCBzdGF0ZXMuXFxyXFxuICpcXHJcXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdEJsZW5kU3RhdGVcXHJcXG4gKi9cXG5cXG52YXIgRnJlZUJsZW5kU3RhdGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BYnN0cmFjdEJsZW5kU3RhdGUpIHtcXG4gIEZyZWVCbGVuZFN0YXRlX2luaGVyaXRzKEZyZWVCbGVuZFN0YXRlLCBfQWJzdHJhY3RCbGVuZFN0YXRlKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBGcmVlQmxlbmRTdGF0ZV9jcmVhdGVTdXBlcihGcmVlQmxlbmRTdGF0ZSk7XFxuXFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIGZvciB0aGUgY29udGFpbmVyIHN0YXRlLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48QWJzdHJhY3RTdGF0ZT59IFtibGVuZFN0YXRlcz1bXV0gLSBCbGVuZCBzdGF0ZXMgdG8gYmUgY29udHJvbGxlZCBieVxcclxcbiAgICogdGhpcyBjb250YWluZXIuXFxyXFxuICAgKi9cXG4gIGZ1bmN0aW9uIEZyZWVCbGVuZFN0YXRlKCkge1xcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XFxuICAgIHZhciBibGVuZFN0YXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XFxuXFxuICAgIEZyZWVCbGVuZFN0YXRlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZyZWVCbGVuZFN0YXRlKTtcXG5cXG4gICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMsIGJsZW5kU3RhdGVzKTtcXG4gIH1cXG5cXG4gIEZyZWVCbGVuZFN0YXRlX2NyZWF0ZUNsYXNzKEZyZWVCbGVuZFN0YXRlLCBbe1xcbiAgICBrZXk6IFwidXBkYXRlSW50ZXJuYWxXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUludGVybmFsV2VpZ2h0KGZhY3Rvcikge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgRnJlZUJsZW5kU3RhdGVfZ2V0KEZyZWVCbGVuZFN0YXRlX2dldFByb3RvdHlwZU9mKEZyZWVCbGVuZFN0YXRlLnByb3RvdHlwZSksIFwidXBkYXRlSW50ZXJuYWxXZWlnaHRcIiwgdGhpcykuY2FsbCh0aGlzLCBmYWN0b3IpOyAvLyBEZXRlcm1pbmUgdGhlIHRvdGFsIGFjdGl2ZSB3ZWlnaHQgb2YgYmxlbmQgc3RhdGVzXFxuXFxuXFxuICAgICAgdmFyIHN1bVdlaWdodHMgPSAwO1xcblxcbiAgICAgIHRoaXMuX3N0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xcbiAgICAgICAgc3VtV2VpZ2h0cyArPSBzdGF0ZS53ZWlnaHQ7XFxuICAgICAgfSk7IC8vIEVuc3VyZSB0aGUgc3VtIG9mIGJsZW5kIHN0YXRlIGludGVybmFsIHdlaWdodHMgZG9lcyBub3QgZXhjZWVkIGNvbnRhaW5lciBpbnRlcm5hbCB3ZWlnaHRcXG5cXG5cXG4gICAgICBmYWN0b3IgLz0gTWF0aC5tYXgoc3VtV2VpZ2h0cywgMSk7IC8vIFN1bSBvZiBibGVuZCBzdGF0ZSBpbnRlcm5hbCB3ZWlnaHRzIHNob3VsZCBub3QgZXhjZWVkIGNvbnRhaW5lciBpbnRlcm5hbCB3ZWlnaHRcXG5cXG4gICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgIHN0YXRlLnVwZGF0ZUludGVybmFsV2VpZ2h0KGZhY3RvciAqIF90aGlzLl93ZWlnaHQpO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gRnJlZUJsZW5kU3RhdGU7XFxufShzdGF0ZV9BYnN0cmFjdEJsZW5kU3RhdGUpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3Qgc3RhdGVfRnJlZUJsZW5kU3RhdGUgPSAoRnJlZUJsZW5kU3RhdGUpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2FuaW1wYWNrL3N0YXRlL0JsZW5kMWRTdGF0ZS5qc1xcbmZ1bmN0aW9uIEJsZW5kMWRTdGF0ZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIEJsZW5kMWRTdGF0ZV90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBCbGVuZDFkU3RhdGVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBCbGVuZDFkU3RhdGVfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBCbGVuZDFkU3RhdGVfaXRlcmFibGVUb0FycmF5KGFycikgfHwgQmxlbmQxZFN0YXRlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgQmxlbmQxZFN0YXRlX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBCbGVuZDFkU3RhdGVfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIEJsZW5kMWRTdGF0ZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBCbGVuZDFkU3RhdGVfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gQmxlbmQxZFN0YXRlX293bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgQmxlbmQxZFN0YXRlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogQmxlbmQxZFN0YXRlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIEJsZW5kMWRTdGF0ZV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgQmxlbmQxZFN0YXRlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBCbGVuZDFkU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgQmxlbmQxZFN0YXRlX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBCbGVuZDFkU3RhdGVfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IEJsZW5kMWRTdGF0ZV9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBCbGVuZDFkU3RhdGVfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IEJsZW5kMWRTdGF0ZV9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIEJsZW5kMWRTdGF0ZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDFkU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCkgeyBCbGVuZDFkU3RhdGVfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIEJsZW5kMWRTdGF0ZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIEJsZW5kMWRTdGF0ZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gQmxlbmQxZFN0YXRlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IEJsZW5kMWRTdGF0ZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gQmxlbmQxZFN0YXRlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBCbGVuZDFkU3RhdGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoQmxlbmQxZFN0YXRlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBCbGVuZDFkU3RhdGVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQxZFN0YXRlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIEJsZW5kMWRTdGF0ZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIEJsZW5kMWRTdGF0ZV9nZXRQcm90b3R5cGVPZihvKSB7IEJsZW5kMWRTdGF0ZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBCbGVuZDFkU3RhdGVfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG5cXG5cXG4vKipcXHJcXG4gKiBDbGFzcyBmb3IgYmxlbmRpbmcgTiBudW1iZXIgb2YgYmxlbmQgc3RhdGVzIGJhc2VkIG9uIGEgc2luZ2xlXFxyXFxuICogcGFyYW1ldGVyLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RCbGVuZFN0YXRlXFxyXFxuICovXFxuXFxudmFyIEJsZW5kMWRTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0QmxlbmRTdGF0ZSkge1xcbiAgQmxlbmQxZFN0YXRlX2luaGVyaXRzKEJsZW5kMWRTdGF0ZSwgX0Fic3RyYWN0QmxlbmRTdGF0ZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gQmxlbmQxZFN0YXRlX2NyZWF0ZVN1cGVyKEJsZW5kMWRTdGF0ZSk7XFxuXFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgY29udGFpbmVyIHN0YXRlXFxyXFxuICAgKiBAcGFyYW0ge0FycmF5LjxBYnN0cmFjdEJsZW5kU3RhdGU+fSBbYmxlbmRTdGF0ZXM9W11dIC0gQmxlbmQgc3RhdGVzIHRvIGJlXFxyXFxuICAgKiBjb250cm9sbGVkIGJ5IHRoaXMgY29udGFpbmVyLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gW2JsZW5kVGhyZXNob2xkcz1bXV0gLSBUaHJlc2hvbGQgdmFsdWVzIGZvciBhY3RpdmF0aW5nXFxyXFxuICAgKiBlYWNoIGJsZW5kIHN0YXRlLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48Ym9vbGVhbj59IFtwaGFzZU1hdGNoZXM9W11dIC0gQm9vbGVhbnMgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdFxcclxcbiAgICogZWFjaCBibGVuZCBzdGF0ZSBzaG91bGQgYmUgcGhhc2UgbWF0Y2hlZC5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gQmxlbmQxZFN0YXRlKCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcXG4gICAgdmFyIGJsZW5kU3RhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcXG4gICAgdmFyIGJsZW5kVGhyZXNob2xkcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XFxuICAgIHZhciBwaGFzZU1hdGNoZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xcblxcbiAgICBCbGVuZDFkU3RhdGVfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmxlbmQxZFN0YXRlKTtcXG5cXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zLCBibGVuZFN0YXRlcyk7XFxuICAgIF90aGlzLl9ibGVuZFZhbHVlID0gMDtcXG4gICAgX3RoaXMuX3Byb21pc2VzID0gQmxlbmQxZFN0YXRlX29iamVjdFNwcmVhZChCbGVuZDFkU3RhdGVfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5fcHJvbWlzZXMpLCB7fSwge1xcbiAgICAgIGJsZW5kVmFsdWU6IGNvcmVfRGVmZXJyZWQucmVzb2x2ZSgpXFxuICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGVyZSBhcmUgbm8gZHVwbGljYXRlIHRocmVzaG9sZHNcXG5cXG4gICAgdmFyIG5vblplcm9EaWZmZXJlbnRTaXplID0gYmxlbmRTdGF0ZXMubGVuZ3RoICE9PSAwICYmIGJsZW5kU3RhdGVzLmxlbmd0aCAhPT0gYmxlbmRUaHJlc2hvbGRzLmxlbmd0aDtcXG5cXG4gICAgaWYgKG5vblplcm9EaWZmZXJlbnRTaXplKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNyZWF0ZSBCbGVuZDFkU3RhdGUgd2l0aCBibGVuZFRocmVzaG9sZHMgXCIuY29uY2F0KGJsZW5kVGhyZXNob2xkcywgXCIuIEJsZW5kVGhyZXNob2xkcyBjb3VudCBkb2VzIG5vdCBtYXRjaCBibGVuZFN0YXRlcyBjb3VudC5cIikpO1xcbiAgICB9XFxuXFxuICAgIHZhciBjb250YWluc0R1cGxpY2F0ZXMgPSBuZXcgU2V0KGJsZW5kVGhyZXNob2xkcykuc2l6ZSAhPT0gYmxlbmRUaHJlc2hvbGRzLmxlbmd0aDtcXG5cXG4gICAgaWYgKGNvbnRhaW5zRHVwbGljYXRlcykge1xcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgQmxlbmQxZFN0YXRlIHdpdGggYmxlbmRUaHJlc2hvbGRzIFwiLmNvbmNhdChibGVuZFRocmVzaG9sZHMsIFwiLiBCbGVuZFRocmVzaG9sZHMgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlc1wiKSk7XFxuICAgIH0gLy8gSW5pdGlhbGl6ZSB0aGUgdGhyZXNob2xkcyBtYXBcXG5cXG5cXG4gICAgX3RoaXMuX3RocmVzaG9sZHMgPSBbXTtcXG5cXG4gICAgQmxlbmQxZFN0YXRlX3RvQ29uc3VtYWJsZUFycmF5KF90aGlzLl9zdGF0ZXMudmFsdWVzKCkpLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlLCBpbmRleCkge1xcbiAgICAgIF90aGlzLl90aHJlc2hvbGRzLnB1c2goe1xcbiAgICAgICAgdmFsdWU6IGJsZW5kVGhyZXNob2xkc1tpbmRleF0sXFxuICAgICAgICBuYW1lOiBzdGF0ZS5uYW1lLFxcbiAgICAgICAgcGhhc2VNYXRjaDogcGhhc2VNYXRjaGVzW2luZGV4XSB8fCBmYWxzZVxcbiAgICAgIH0pO1xcbiAgICB9KTtcXG5cXG4gICAgX3RoaXMuX3NvcnRUaHJlc2hvbGRzKCk7XFxuXFxuICAgIF90aGlzLl9mb3JjZU5vVGhyZXNob2xkRHVwZXMgPSB0cnVlO1xcbiAgICBfdGhpcy5fcGhhc2VMZWFkU3RhdGUgPSBudWxsO1xcblxcbiAgICBfdGhpcy5fdXBkYXRlQmxlbmRXZWlnaHRzKCk7XFxuXFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG4gIC8qKlxcclxcbiAgICogR2V0cyBhbmQgc2V0cyB0aGUgYmxlbmQgcGFyYW1ldGVyIHZhbHVlLlxcclxcbiAgICovXFxuXFxuXFxuICBCbGVuZDFkU3RhdGVfY3JlYXRlQ2xhc3MoQmxlbmQxZFN0YXRlLCBbe1xcbiAgICBrZXk6IFwiYmxlbmRWYWx1ZVwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fYmxlbmRWYWx1ZTtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcXG4gICAgICB0aGlzLl9ibGVuZFZhbHVlID0gdmFsdWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgd2hldGhlciBvciBub3QgdGhlIGJsZW5kIHZhbHVlIGlzIGN1cnJlbnRseSBiZWluZyBhbmltYXRlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJibGVuZFZhbHVlUGVuZGluZ1wiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZXMuYmxlbmRWYWx1ZSAmJiB0aGlzLl9wcm9taXNlcy5ibGVuZFZhbHVlLnBlbmRpbmc7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZXMgdGhlIHVzZXIgZGVmaW5lZCB3ZWlnaHQgb3ZlciB0aW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bGx9IG5hbWUgLSBVbnVzZWQgcGFyYW1ldGVyLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2VpZ2h0IC0gVGhlIHRhcmdldCB3ZWlnaHQgdmFsdWUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2Vjb25kcz0wXSAtIFRoZSBhbW91bnQgb2YgdGltZSBpdCB3aWxsIHRha2UgdG8gcmVhY2ggdGhlXFxyXFxuICAgICAqIHRhcmdldCB3ZWlnaHQuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIFRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIGZvciBpbnRlcnBvbGF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0QmxlbmRXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJsZW5kV2VpZ2h0KG5hbWUsIHZhbHVlKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgdmFyIHNlY29uZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XFxuXFxuICAgICAgdGhpcy5fcHJvbWlzZXMuYmxlbmRWYWx1ZS5jYW5jZWwoKTtcXG5cXG4gICAgICB0aGlzLl9wcm9taXNlcy5ibGVuZFZhbHVlID0gYW5pbXBhY2tfQW5pbWF0aW9uVXRpbHMuaW50ZXJwb2xhdGVQcm9wZXJ0eSh0aGlzLCBcXCdibGVuZFZhbHVlXFwnLCB2YWx1ZSwge1xcbiAgICAgICAgc2Vjb25kczogc2Vjb25kcyxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGbixcXG4gICAgICAgIG9uUHJvZ3Jlc3M6IGZ1bmN0aW9uIG9uUHJvZ3Jlc3MoKSB7XFxuICAgICAgICAgIF90aGlzMi5fdXBkYXRlQmxlbmRXZWlnaHRzKCk7XFxuICAgICAgICB9LFxcbiAgICAgICAgb25GaW5pc2g6IGZ1bmN0aW9uIG9uRmluaXNoKCkge1xcbiAgICAgICAgICBfdGhpczIuX3VwZGF0ZUJsZW5kV2VpZ2h0cygpO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5ibGVuZFZhbHVlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSB1c2VyIGRlZmluZWQgd2VpZ2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldEJsZW5kV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCbGVuZFdlaWdodCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5ibGVuZFZhbHVlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJhZGRTdGF0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3RhdGUoc3RhdGUpIHtcXG4gICAgICB2YXIgdGhyZXNob2xkVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XFxuICAgICAgdmFyIHBoYXNlTWF0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xcbiAgICAgIHRoaXMuX3RocmVzaG9sZHMgPSB0aGlzLl90aHJlc2hvbGRzIHx8IFtdOyAvLyBNYWtlIHN1cmUgdGhlcmUgaXMgbm90IGFscmVhZHkgYSBzdGF0ZSB3aXRoIHRoaXMgdGhyZXNob2xkXFxuXFxuICAgICAgdmFyIHNhbWVWYWx1ZSA9IHRoaXMuX3RocmVzaG9sZHMuZmluZChmdW5jdGlvbiAodGhyZXNob2xkKSB7XFxuICAgICAgICByZXR1cm4gdGhyZXNob2xkLnZhbHVlID09PSB0aHJlc2hvbGRWYWx1ZTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBpZiAodGhpcy5fZm9yY2VOb1RocmVzaG9sZER1cGVzICYmIHNhbWVWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IGJsZW5kIHRocmVzaG9sZCBvZiBcIi5jb25jYXQodGhyZXNob2xkVmFsdWUsIFwiIGZvciBzdGF0ZSBcIikuY29uY2F0KHN0YXRlLm5hbWUsIFwiIG9uIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi4gQSBzdGF0ZSBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoYXQgdGhyZXNob2xkLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIEJsZW5kMWRTdGF0ZV9nZXQoQmxlbmQxZFN0YXRlX2dldFByb3RvdHlwZU9mKEJsZW5kMWRTdGF0ZS5wcm90b3R5cGUpLCBcImFkZFN0YXRlXCIsIHRoaXMpLmNhbGwodGhpcywgc3RhdGUpO1xcblxcbiAgICAgIHRoaXMuX3RocmVzaG9sZHMucHVzaCh7XFxuICAgICAgICB2YWx1ZTogdGhyZXNob2xkVmFsdWUsXFxuICAgICAgICBuYW1lOiBzdGF0ZS5uYW1lLFxcbiAgICAgICAgcGhhc2VNYXRjaDogcGhhc2VNYXRjaCB8fCBmYWxzZVxcbiAgICAgIH0pO1xcblxcbiAgICAgIHRoaXMuX3NvcnRUaHJlc2hvbGRzKCk7XFxuXFxuICAgICAgcmV0dXJuIHN0YXRlLm5hbWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlbW92ZVN0YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTdGF0ZShuYW1lKSB7XFxuICAgICAgdmFyIHJlbW92ZWQgPSBCbGVuZDFkU3RhdGVfZ2V0KEJsZW5kMWRTdGF0ZV9nZXRQcm90b3R5cGVPZihCbGVuZDFkU3RhdGUucHJvdG90eXBlKSwgXCJyZW1vdmVTdGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUpO1xcblxcbiAgICAgIGlmIChyZW1vdmVkKSB7XFxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl90aHJlc2hvbGRzLmZpbmRJbmRleChmdW5jdGlvbiAodGhyZXNob2xkKSB7XFxuICAgICAgICAgIHJldHVybiB0aHJlc2hvbGQubmFtZSA9PT0gbmFtZTtcXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgdGhpcy5fdGhyZXNob2xkcy5zcGxpY2UoaW5kZXgsIDEpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gcmVtb3ZlZDtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVuYW1lU3RhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmFtZVN0YXRlKGN1cnJlbnROYW1lLCBuZXdOYW1lKSB7XFxuICAgICAgbmV3TmFtZSA9IEJsZW5kMWRTdGF0ZV9nZXQoQmxlbmQxZFN0YXRlX2dldFByb3RvdHlwZU9mKEJsZW5kMWRTdGF0ZS5wcm90b3R5cGUpLCBcInJlbmFtZVN0YXRlXCIsIHRoaXMpLmNhbGwodGhpcywgY3VycmVudE5hbWUsIG5ld05hbWUpO1xcblxcbiAgICAgIHZhciB0aHJlc2hvbGQgPSB0aGlzLl90aHJlc2hvbGRzLmZpbmQoZnVuY3Rpb24gKHRocmVzaG9sZCkge1xcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZC5uYW1lID09PSBjdXJyZW50TmFtZTtcXG4gICAgICB9KTtcXG5cXG4gICAgICB0aHJlc2hvbGQubmFtZSA9IG5ld05hbWU7XFxuICAgICAgcmV0dXJuIG5ld05hbWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIHRocmVzaG9sZCB2YWx1ZSBvZiBhIGJsZW5kIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbmFtZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBibGVuZCB0byBnZXQgdGhlIHRocmVzaG9sZCBvZi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhyZWhvbGQgdmFsdWUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0QmxlbmRUaHJlc2hvbGRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJsZW5kVGhyZXNob2xkKG5hbWUpIHtcXG4gICAgICB2YXIgdGhyZXNob2xkID0gdGhpcy5fdGhyZXNob2xkcy5maW5kKGZ1bmN0aW9uICh0aHJlc2hvbGQpIHtcXG4gICAgICAgIHJldHVybiB0aHJlc2hvbGQubmFtZSA9PT0gbmFtZTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBpZiAodGhyZXNob2xkID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZXQgYmxlbmQgdGhyZXNob2xkIG9mIHN0YXRlIFwiLmNvbmNhdChuYW1lLCBcIiBvbiBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIE5vIHN0YXRlIGV4aXN0cyB3aXRoIHRoYXQgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gdGhyZXNob2xkLnZhbHVlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXRzIHRoZSB0aHJlc2hvbGQgdmFsdWUgb2YgYSBibGVuZCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIG5hbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgYmxlbmQgdG8gc2V0IHRoZSB0aHJlc2hvbGQuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFZhbHVlIG9mIHRoZSB0aHJlc2hvbGQgdG8gc2V0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBTZXQgdGhyZXNob2xkIHZhbHVlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNldEJsZW5kVGhyZXNob2xkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRCbGVuZFRocmVzaG9sZChuYW1lLCB2YWx1ZSkge1xcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSBpcyBub3QgYWxyZWFkeSBhIHN0YXRlIHdpdGggdGhpcyB0aHJlc2hvbGRcXG4gICAgICB2YXIgc2FtZVZhbHVlID0gdGhpcy5fdGhyZXNob2xkcy5maW5kKGZ1bmN0aW9uICh0aHJlc2hvbGQpIHtcXG4gICAgICAgIHJldHVybiB0aHJlc2hvbGQudmFsdWUgPT09IHZhbHVlO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmIChzYW1lVmFsdWUgIT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBibGVuZCB0aHJlc2hvbGQgb2YgXCIuY29uY2F0KHZhbHVlLCBcIiBmb3Igc3RhdGUgXCIpLmNvbmNhdChuYW1lLCBcIiBvbiBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIEEgc3RhdGUgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGF0IHRocmVzaG9sZC5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgdGhyZXNob2xkID0gdGhpcy5fdGhyZXNob2xkcy5maW5kKGZ1bmN0aW9uICh0aHJlc2hvbGQpIHtcXG4gICAgICAgIHJldHVybiB0aHJlc2hvbGQubmFtZSA9PT0gbmFtZTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBpZiAodGhyZXNob2xkID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgYmxlbmQgdGhyZXNob2xkIG9mIHN0YXRlIFwiLmNvbmNhdChuYW1lLCBcIiBvbiBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIE5vIHN0YXRlIGV4aXN0cyB3aXRoIHRoYXQgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aHJlc2hvbGQudmFsdWUgPSB2YWx1ZTtcXG5cXG4gICAgICB0aGlzLl9zb3J0VGhyZXNob2xkcygpO1xcblxcbiAgICAgIHJldHVybiB0aHJlc2hvbGQudmFsdWU7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZUludGVybmFsV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFdlaWdodChmYWN0b3IpIHtcXG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gICAgICBCbGVuZDFkU3RhdGVfZ2V0KEJsZW5kMWRTdGF0ZV9nZXRQcm90b3R5cGVPZihCbGVuZDFkU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZhY3Rvcik7XFxuXFxuICAgICAgaWYgKHRoaXMuX3BoYXNlTGVhZFN0YXRlKSB7XFxuICAgICAgICB0aGlzLl9zdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICAgICAgaWYgKHN0YXRlLndlaWdodCAhPT0gMCkge1xcbiAgICAgICAgICAgIHN0YXRlLm5vcm1hbGl6ZWRUaW1lID0gX3RoaXMzLl9waGFzZUxlYWRTdGF0ZS5ub3JtYWxpemVkVGltZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGVzIHRoZSBibGVuZCB3ZWlnaHRzIGJhc2VkIG9uIHRoZWlyIGNvcnJlc3BvbmRpbmcgdGhyZXNob2xkIHZhbHVlc1xcclxcbiAgICAgKiBhbmQgdGhlIGN1cnJlbnQgYmxlbmRWYWx1ZS4gQWRkaXRpb25hbGx5LCBzZXRzIGEgbGVhZCBwaGFzZSBzdGF0ZSBpZiB0aGVcXHJcXG4gICAgICogY29uZGl0aW9ucyBmb3IgcGhhc2UtbWF0Y2hpbmcgaGF2ZSBiZWVuIHNhdGlzZmllZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfdXBkYXRlQmxlbmRXZWlnaHRzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlQmxlbmRXZWlnaHRzKCkge1xcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgICAgIGlmICh0aGlzLl90aHJlc2hvbGRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xcblxcbiAgICAgIGlmICh0aGlzLl90aHJlc2hvbGRzLmxlbmd0aCA9PT0gMSkge1xcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGVzLmdldCh0aGlzLl90aHJlc2hvbGRzWzBdLm5hbWUpO1xcblxcbiAgICAgICAgc3RhdGUuc2V0V2VpZ2h0KDEpO1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gSW5pdGlhbGx5IHNldCBhbGwgc3ViLXN0YXRlIHdlaWdodHMgdG8gemVyb1xcblxcblxcbiAgICAgIHRoaXMuX3N0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xcbiAgICAgICAgc3RhdGUuc2V0V2VpZ2h0KDApO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIHRoaXMuX3BoYXNlTGVhZFN0YXRlID0gbnVsbDsgLy8gRmluZCB0aGUgZmlyc3QgdGhyZXNob2xkIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwYXJhbWV0ZXIgdmFsdWVcXG5cXG4gICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLl90aHJlc2hvbGRzLmZpbmRJbmRleChmdW5jdGlvbiAodGhyZXNob2xkKSB7XFxuICAgICAgICByZXR1cm4gdGhyZXNob2xkLnZhbHVlID49IF90aGlzNC5fYmxlbmRWYWx1ZTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBpZiAodGFyZ2V0SW5kZXggPT09IDAgfHwgdGFyZ2V0SW5kZXggPT09IC0xKSB7XFxuICAgICAgICAvLyBHaXZlIG9uZSBzdGF0ZSBmdWxsIGluZmx1ZW5jZVxcbiAgICAgICAgdGFyZ2V0SW5kZXggPSB0YXJnZXRJbmRleCA9PT0gLTEgPyB0aGlzLl90aHJlc2hvbGRzLmxlbmd0aCAtIDEgOiAwO1xcblxcbiAgICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuX3N0YXRlcy5nZXQodGhpcy5fdGhyZXNob2xkc1t0YXJnZXRJbmRleF0ubmFtZSk7XFxuXFxuICAgICAgICBfc3RhdGUuc2V0V2VpZ2h0KDEpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICAvLyBMaW5lYXIgaW50ZXJwb2xhdGUgaW5mbHVlbmNlIGJldHdlZW4gdHdvIHN0YXRlc1xcbiAgICAgICAgdmFyIHRocmVzaG9sZEEgPSB0aGlzLl90aHJlc2hvbGRzW3RhcmdldEluZGV4IC0gMV07XFxuICAgICAgICB2YXIgdGhyZXNob2xkQiA9IHRoaXMuX3RocmVzaG9sZHNbdGFyZ2V0SW5kZXhdO1xcbiAgICAgICAgdmFyIGZhY3RvckIgPSAodGhpcy5ibGVuZFZhbHVlIC0gdGhyZXNob2xkQS52YWx1ZSkgLyAodGhyZXNob2xkQi52YWx1ZSAtIHRocmVzaG9sZEEudmFsdWUpO1xcbiAgICAgICAgdmFyIGZhY3RvckEgPSAxIC0gZmFjdG9yQjtcXG5cXG4gICAgICAgIHZhciBzdGF0ZUEgPSB0aGlzLl9zdGF0ZXMuZ2V0KHRocmVzaG9sZEEubmFtZSk7XFxuXFxuICAgICAgICB2YXIgc3RhdGVCID0gdGhpcy5fc3RhdGVzLmdldCh0aHJlc2hvbGRCLm5hbWUpO1xcblxcbiAgICAgICAgc3RhdGVBLnNldFdlaWdodChmYWN0b3JBKTtcXG4gICAgICAgIHN0YXRlQi5zZXRXZWlnaHQoZmFjdG9yQik7IC8vIFNldCBwaGFzZS1tYXRjaGluZyBpZiBuZWVkZWRcXG5cXG4gICAgICAgIGlmICh0aHJlc2hvbGRBLnBoYXNlTWF0Y2ggJiYgdGhyZXNob2xkQi5waGFzZU1hdGNoKSB7XFxuICAgICAgICAgIHRoaXMuX3BoYXNlTGVhZFN0YXRlID0gZmFjdG9yQSA+IGZhY3RvckIgPyBzdGF0ZUEgOiBzdGF0ZUI7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTb3J0cyB0aGUgdGhyZXNob2xkcyBmcm9tIGxvdyB0byBoaWdoIGJhc2VkIG9uIHZhbHVlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zb3J0VGhyZXNob2xkc1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NvcnRUaHJlc2hvbGRzKCkge1xcbiAgICAgIHRoaXMuX3RocmVzaG9sZHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xcbiAgICAgICAgcmV0dXJuIGEudmFsdWUgLSBiLnZhbHVlO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gQmxlbmQxZFN0YXRlO1xcbn0oc3RhdGVfQWJzdHJhY3RCbGVuZFN0YXRlKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IHN0YXRlX0JsZW5kMWRTdGF0ZSA9IChCbGVuZDFkU3RhdGUpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2FuaW1wYWNrL3N0YXRlL0JsZW5kMmRTdGF0ZS5qc1xcbmZ1bmN0aW9uIEJsZW5kMmRTdGF0ZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIEJsZW5kMmRTdGF0ZV90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBCbGVuZDJkU3RhdGVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBCbGVuZDJkU3RhdGVfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBCbGVuZDJkU3RhdGVfaXRlcmFibGVUb0FycmF5KGFycikgfHwgQmxlbmQyZFN0YXRlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgQmxlbmQyZFN0YXRlX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBCbGVuZDJkU3RhdGVfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIEJsZW5kMmRTdGF0ZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBCbGVuZDJkU3RhdGVfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gQmxlbmQyZFN0YXRlX293bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgQmxlbmQyZFN0YXRlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogQmxlbmQyZFN0YXRlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIEJsZW5kMmRTdGF0ZV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgQmxlbmQyZFN0YXRlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBCbGVuZDJkU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgQmxlbmQyZFN0YXRlX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBCbGVuZDJkU3RhdGVfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IEJsZW5kMmRTdGF0ZV9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBCbGVuZDJkU3RhdGVfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IEJsZW5kMmRTdGF0ZV9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIEJsZW5kMmRTdGF0ZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBCbGVuZDJkU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCkgeyBCbGVuZDJkU3RhdGVfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIEJsZW5kMmRTdGF0ZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIEJsZW5kMmRTdGF0ZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gQmxlbmQyZFN0YXRlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IEJsZW5kMmRTdGF0ZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gQmxlbmQyZFN0YXRlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBCbGVuZDJkU3RhdGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoQmxlbmQyZFN0YXRlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBCbGVuZDJkU3RhdGVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gQmxlbmQyZFN0YXRlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIEJsZW5kMmRTdGF0ZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIEJsZW5kMmRTdGF0ZV9nZXRQcm90b3R5cGVPZihvKSB7IEJsZW5kMmRTdGF0ZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBCbGVuZDJkU3RhdGVfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xcblxcblxcblxcblxcbi8qKlxcclxcbiAqIENsYXNzIGZvciBibGVuZGluZyBOIG51bWJlciBvZiBibGVuZCBzdGF0ZXMgYmFzZWQgb24gdHdvXFxyXFxuICogcGFyYW10ZXJzLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RCbGVuZFN0YXRlXFxyXFxuICovXFxuXFxudmFyIEJsZW5kMmRTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0QmxlbmRTdGF0ZSkge1xcbiAgQmxlbmQyZFN0YXRlX2luaGVyaXRzKEJsZW5kMmRTdGF0ZSwgX0Fic3RyYWN0QmxlbmRTdGF0ZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gQmxlbmQyZFN0YXRlX2NyZWF0ZVN1cGVyKEJsZW5kMmRTdGF0ZSk7XFxuXFxuICAvKipcXHJcXG4gICAqIEBjb25zdHJ1Y3RvclxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25zIGZvciB0aGUgY29udGFpbmVyIHN0YXRlXFxyXFxuICAgKiBAcGFyYW0ge0FycmF5LjxBYnN0cmFjdEJsZW5kU3RhdGU+fSBbYmxlbmRTdGF0ZXM9W11dIC0gQmxlbmQgc3RhdGVzIHRvIGJlXFxyXFxuICAgKiBjb250cm9sbGVkIGJ5IHRoaXMgY29udGFpbmVyLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48QXJyYXkuPG51bWJlcj4+fSBbYmxlbmRUaHJlc2hvbGRzPVtdXSAtIFRocmVzaG9sZCB2YWx1ZXMgZm9yIGFjdGl2YXRpbmdcXHJcXG4gICAqIGVhY2ggYmxlbmQgc3RhdGUuXFxyXFxuICAgKiBAcGFyYW0ge0FycmF5Ljxib29sZWFuPn0gW3BoYXNlTWF0Y2hlcz1bXV0gLSBCb29sZWFucyBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90XFxyXFxuICAgKiBlYWNoIGJsZW5kIHN0YXRlIHNob3VsZCBiZSBwaGFzZSBtYXRjaGVkLlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBCbGVuZDJkU3RhdGUoKSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xcbiAgICB2YXIgYmxlbmRTdGF0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xcbiAgICB2YXIgYmxlbmRUaHJlc2hvbGRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcXG4gICAgdmFyIHBoYXNlTWF0Y2hlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogW107XFxuXFxuICAgIEJsZW5kMmRTdGF0ZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBCbGVuZDJkU3RhdGUpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMsIGJsZW5kU3RhdGVzKTtcXG5cXG4gICAgaWYgKGJsZW5kU3RhdGVzLmxlbmd0aCAhPT0gYmxlbmRUaHJlc2hvbGRzLmxlbmd0aCkge1xcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgQmxlbmQyZFN0YXRlIHdpdGggYmxlbmRTdGF0ZXMgXCIuY29uY2F0KGJsZW5kU3RhdGVzLCBcIiBhbmQgYmxlbmRUaHJlc2hvbGRzIFwiKS5jb25jYXQoYmxlbmRUaHJlc2hvbGRzLCBcIi4gQ291bnQgb2YgYmxlbmRTdGF0ZXMgbXVzdCBtYXRjaCBjb3VudCBvZiBibGVuZFRocmVzaG9sZHMuXCIpKTtcXG4gICAgfVxcblxcbiAgICBibGVuZFRocmVzaG9sZHMuc2xpY2UoMCwgYmxlbmRUaHJlc2hvbGRzLmxlbmd0aCAtIDEpLmZvckVhY2goZnVuY3Rpb24gKHRocmVzaG9sZCwgaW5kZXgpIHtcXG4gICAgICBibGVuZFRocmVzaG9sZHMuc2xpY2UoaW5kZXggKyAxKS5mb3JFYWNoKGZ1bmN0aW9uIChvdGhlclRocmVzaG9sZCkge1xcbiAgICAgICAgaWYgKHRocmVzaG9sZFswXSA9PT0gb3RoZXJUaHJlc2hvbGRbMF0gJiYgdGhyZXNob2xkWzFdID09PSBvdGhlclRocmVzaG9sZFsxXSkge1xcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY3JlYXRlIEJsZW5kMmRTdGF0ZSB3aXRoIGJsZW5kVGhyZXNob2xkcyBcIi5jb25jYXQoYmxlbmRUaHJlc2hvbGRzLCBcIi4gTm8gZHVwbGljYXRlIHZhbHVlcyBhbGxvd2VkIGluIGJsZW5kVGhyZXNob2xkcy5cIikpO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9KTtcXG4gICAgX3RoaXMuX2JsZW5kVmFsdWVYID0gMDtcXG4gICAgX3RoaXMuX2JsZW5kVmFsdWVZID0gMDtcXG4gICAgX3RoaXMuX3Byb21pc2VzID0gQmxlbmQyZFN0YXRlX29iamVjdFNwcmVhZChCbGVuZDJkU3RhdGVfb2JqZWN0U3ByZWFkKHt9LCBfdGhpcy5fcHJvbWlzZXMpLCB7fSwge1xcbiAgICAgIGJsZW5kVmFsdWVYOiBjb3JlX0RlZmVycmVkLnJlc29sdmUoKSxcXG4gICAgICBibGVuZFZhbHVlWTogY29yZV9EZWZlcnJlZC5yZXNvbHZlKClcXG4gICAgfSk7XFxuICAgIF90aGlzLl90aHJlc2hvbGRzID0gW107XFxuXFxuICAgIEJsZW5kMmRTdGF0ZV90b0NvbnN1bWFibGVBcnJheShfdGhpcy5fc3RhdGVzLnZhbHVlcygpKS5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSwgaW5kZXgpIHtcXG4gICAgICBfdGhpcy5fdGhyZXNob2xkcy5wdXNoKHtcXG4gICAgICAgIG5hbWU6IHN0YXRlLm5hbWUsXFxuICAgICAgICBwaGFzZU1hdGNoOiBwaGFzZU1hdGNoZXNbaW5kZXhdIHx8IGZhbHNlXFxuICAgICAgfSk7XFxuICAgIH0pO1xcblxcbiAgICBfdGhpcy5fdmVydGljZXMgPSBibGVuZFRocmVzaG9sZHM7XFxuXFxuICAgIGlmIChfdGhpcy5fdmVydGljZXMubGVuZ3RoID49IDMpIHtcXG4gICAgICBfdGhpcy5fdHJpYW5nbGVzID0gY29yZV9NYXRoVXRpbHMuZ2V0RGVsYXVuYXlUcmlhbmd1bGF0aW9uKF90aGlzLl92ZXJ0aWNlcyk7XFxuICAgIH1cXG5cXG4gICAgX3RoaXMuX3BoYXNlTGVhZFN0YXRlID0gbnVsbDtcXG5cXG4gICAgX3RoaXMuX3VwZGF0ZUJsZW5kV2VpZ2h0cygpO1xcblxcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIFVwZGF0ZXMgdGhlIHVzZXIgZGVmaW5lZCB3ZWlnaHQgb3ZlciB0aW1lLlxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiBibGVuZCB3ZWlnaHQgdG8gdXBkYXRlLlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdlaWdodCAtIFRhcmdldCB3ZWlnaHQgdmFsdWUuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NlY29uZHM9MF0gLSBUaGUgYW1vdW50IG9mIHRpbWUgaXQgd2lsbCB0YWtlIHRvIHJlYWNoIHRoZVxcclxcbiAgICogdGFyZ2V0IHZhbHVlLlxcclxcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gVGhlIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIGludGVycG9sYXRpb24uXFxyXFxuICAgKlxcclxcbiAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICovXFxuXFxuXFxuICBCbGVuZDJkU3RhdGVfY3JlYXRlQ2xhc3MoQmxlbmQyZFN0YXRlLCBbe1xcbiAgICBrZXk6IFwic2V0QmxlbmRXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJsZW5kV2VpZ2h0KG5hbWUsIHZhbHVlKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgdmFyIHNlY29uZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XFxuICAgICAgdmFyIHByb3BlcnR5ID0gXCJibGVuZFZhbHVlXCIuY29uY2F0KG5hbWUudG9VcHBlckNhc2UoKSk7XFxuXFxuICAgICAgaWYgKHByb3BlcnR5ICE9PSBcXCdibGVuZFZhbHVlWFxcJyAmJiBwcm9wZXJ0eSAhPT0gXFwnYmxlbmRWYWx1ZVlcXCcpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgYmxlbmQgd2VpZ2h0IGZvciBcIi5jb25jYXQobmFtZSwgXCIgb24gXCIpLmNvbmNhdCh0aGlzLm5hbWUsIFwiLiBCbGVuZDJkU3RhdGUgb25seSBhY2NlcHRzIFxcJ1hcXCcgb3IgXFwnWVxcJyBmb3Igc2V0QmxlbmRXZWlnaHRcIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl9wcm9taXNlc1twcm9wZXJ0eV0uY2FuY2VsKCk7XFxuXFxuICAgICAgdGhpcy5fcHJvbWlzZXNbcHJvcGVydHldID0gYW5pbXBhY2tfQW5pbWF0aW9uVXRpbHMuaW50ZXJwb2xhdGVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eSwgdmFsdWUsIHtcXG4gICAgICAgIHNlY29uZHM6IHNlY29uZHMsXFxuICAgICAgICBlYXNpbmdGbjogZWFzaW5nRm4sXFxuICAgICAgICBvblByb2dyZXNzOiBmdW5jdGlvbiBvblByb2dyZXNzKCkge1xcbiAgICAgICAgICBfdGhpczIuX3VwZGF0ZUJsZW5kV2VpZ2h0cygpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIG9uRmluaXNoOiBmdW5jdGlvbiBvbkZpbmlzaCgpIHtcXG4gICAgICAgICAgX3RoaXMyLl91cGRhdGVCbGVuZFdlaWdodHMoKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZXNbcHJvcGVydHldO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSB1c2VyIGRlZmluZWQgd2VpZ2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgYmxlbmQgd2VpZ2h0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldEJsZW5kV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCbGVuZFdlaWdodChuYW1lKSB7XFxuICAgICAgdmFyIHByb3BlcnR5ID0gbmFtZS50b1VwcGVyQ2FzZSgpO1xcblxcbiAgICAgIGlmIChwcm9wZXJ0eSAhPT0gXFwnWFxcJyAmJiBwcm9wZXJ0eSAhPT0gXFwnWVxcJykge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBibGVuZCB3ZWlnaHQgZm9yIFwiLmNvbmNhdChuYW1lLCBcIiBvbiBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIEJsZW5kMmRTdGF0ZSBvbmx5IGFjY2VwdHMgXFwnWFxcJyBvciBcXCdZXFwnIGZvciBnZXRCbGVuZFdlaWdodFwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBwcm9wZXJ0eSA9PT0gXFwnWFxcJyA/IHRoaXMuX2JsZW5kVmFsdWVYIDogdGhpcy5fYmxlbmRWYWx1ZVk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIHggYmxlbmQgd2VpZ2h0LlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImJsZW5kVmFsdWVYXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9ibGVuZFZhbHVlWDtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcXG4gICAgICB0aGlzLl9ibGVuZFZhbHVlWCA9IHZhbHVlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSB5IGJsZW5kIHdlaWdodC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJibGVuZFZhbHVlWVwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fYmxlbmRWYWx1ZVk7XFxuICAgIH0sXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XFxuICAgICAgdGhpcy5fYmxlbmRWYWx1ZVkgPSB2YWx1ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgeCBibGVuZCB2YWx1ZSBpcyBjdXJyZW50bHkgYmVpbmcgYW5pbWF0ZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiYmxlbmRWYWx1ZVhQZW5kaW5nXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy5ibGVuZFZhbHVlWCAmJiB0aGlzLl9wcm9taXNlcy5ibGVuZFZhbHVlWC5wZW5kaW5nO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSB5IGJsZW5kIHZhbHVlIGlzIGN1cnJlbnRseSBiZWluZyBhbmltYXRlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJibGVuZFZhbHVlWVBlbmRpbmdcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2VzLmJsZW5kVmFsdWVZICYmIHRoaXMuX3Byb21pc2VzLmJsZW5kVmFsdWVZLnBlbmRpbmc7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZUludGVybmFsV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFdlaWdodChmYWN0b3IpIHtcXG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gICAgICBCbGVuZDJkU3RhdGVfZ2V0KEJsZW5kMmRTdGF0ZV9nZXRQcm90b3R5cGVPZihCbGVuZDJkU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZhY3Rvcik7XFxuXFxuICAgICAgaWYgKHRoaXMuX3BoYXNlTGVhZFN0YXRlKSB7XFxuICAgICAgICBCbGVuZDJkU3RhdGVfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fc3RhdGVzLnZhbHVlcygpKS5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSwgaW5kZXgpIHtcXG4gICAgICAgICAgaWYgKHN0YXRlLndlaWdodCAhPT0gMCAmJiBfdGhpczMuX3RocmVzaG9sZHNbaW5kZXhdLnBoYXNlTWF0Y2gpIHtcXG4gICAgICAgICAgICBzdGF0ZS5ub3JtYWxpemVkVGltZSA9IF90aGlzMy5fcGhhc2VMZWFkU3RhdGUubm9ybWFsaXplZFRpbWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlcyB0aGUgYmxlbmQgd2VpZ2h0cyBiYXNlZCBvbiB0aGVpciBjb3JyZXNwb25kaW5nIHRocmVzaG9sZCB2YWx1ZXNcXHJcXG4gICAgICogYW5kIHRoZSBjdXJyZW50IFt4LHldIGJsZW5kVmFsdWUuIEFkZGl0aW9uYWxseSwgc2V0cyBhIGxlYWQgcGhhc2Ugc3RhdGUgaWYgdGhlXFxyXFxuICAgICAqIGNvbmRpdGlvbnMgZm9yIHBoYXNlLW1hdGNoaW5nIGhhdmUgYmVlbiBzYXRpc2ZpZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3VwZGF0ZUJsZW5kV2VpZ2h0c1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZUJsZW5kV2VpZ2h0cygpIHtcXG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICBpZiAoIXRoaXMuX3ZlcnRpY2VzIHx8IHRoaXMuX3ZlcnRpY2VzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xcblxcbiAgICAgIGlmICh0aGlzLl92ZXJ0aWNlcy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgIEJsZW5kMmRTdGF0ZV90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9zdGF0ZXMudmFsdWVzKCkpWzBdLndlaWdodCA9IDE7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfSAvLyBJbml0aWFsbHkgc2V0IGFsbCBzdWItc3RhdGUgd2VpZ2h0cyB0byB6ZXJvXFxuXFxuXFxuICAgICAgdGhpcy5fc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICBzdGF0ZS5zZXRXZWlnaHQoMCk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgdGhpcy5fcGhhc2VMZWFkU3RhdGUgPSBudWxsO1xcbiAgICAgIHZhciBwID0gW3RoaXMuX2JsZW5kVmFsdWVYLCB0aGlzLl9ibGVuZFZhbHVlWV07XFxuXFxuICAgICAgaWYgKHRoaXMuX3ZlcnRpY2VzLmxlbmd0aCA9PT0gMikge1xcbiAgICAgICAgdGhpcy5fc2V0SW5mbHVlbmNlQ2xvc2VzdFBvaW50T25MaW5lKHApO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICB2YXIgdHJpYW5nbGUgPSB0aGlzLl90cmlhbmdsZXMuZmluZChmdW5jdGlvbiAodHJpYW5nbGUpIHtcXG4gICAgICAgICAgcmV0dXJuIGNvcmVfTWF0aFV0aWxzLmlzUG9pbnRJblRyaWFuZ2xlKF90aGlzNC5fdmVydGljZXNbdHJpYW5nbGVbMF1dLCBfdGhpczQuX3ZlcnRpY2VzW3RyaWFuZ2xlWzFdXSwgX3RoaXM0Ll92ZXJ0aWNlc1t0cmlhbmdsZVsyXV0sIHApO1xcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICBpZiAodHJpYW5nbGUpIHtcXG4gICAgICAgICAgdGhpcy5fc2V0SW5mbHVlbmNlVHJpYW5nbGUodHJpYW5nbGUsIHApO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgdGhpcy5fc2V0SW5mbHVlbmNlQ2xvc2VzdFBvaW50SW5UcmlhbmdsZXMocCk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXRzIGJsZW5kIHdlaWdodHMgZm9yIHN0YXRlcyBjb3JyZXNwb25kaW5nIHRvIGFcXHJcXG4gICAgICogdHJpYW5nbGUgb2YgdGhyZXNob2xkcyBhbmQgYSBnaXZlbiBbeCx5XSBibGVuZFZhbHVlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48QXJyYXkuPG51bWJlcj4+fSB0cmlhbmdsZSAtIFNldCBvZiB0cmlhbmdsdWF0ZWQgaW5kaWNlc1xcclxcbiAgICAgKiB0aGF0IGNvcnJlc3BvbmQgdG8gYmxlbmQgdGhyZXNob2xkcy5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gcCAtIEdpdmVuIFt4LHldIGJsZW5kVmFsdWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3NldEluZmx1ZW5jZVRyaWFuZ2xlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SW5mbHVlbmNlVHJpYW5nbGUodHJpYW5nbGUsIHApIHtcXG4gICAgICB2YXIgYXJlYUEgPSBjb3JlX01hdGhVdGlscy50cmlhbmdsZUFyZWEodGhpcy5fdmVydGljZXNbdHJpYW5nbGVbMV1dLCB0aGlzLl92ZXJ0aWNlc1t0cmlhbmdsZVsyXV0sIHApO1xcbiAgICAgIHZhciBhcmVhQiA9IGNvcmVfTWF0aFV0aWxzLnRyaWFuZ2xlQXJlYSh0aGlzLl92ZXJ0aWNlc1t0cmlhbmdsZVswXV0sIHRoaXMuX3ZlcnRpY2VzW3RyaWFuZ2xlWzJdXSwgcCk7XFxuICAgICAgdmFyIGFyZWFDID0gY29yZV9NYXRoVXRpbHMudHJpYW5nbGVBcmVhKHRoaXMuX3ZlcnRpY2VzW3RyaWFuZ2xlWzBdXSwgdGhpcy5fdmVydGljZXNbdHJpYW5nbGVbMV1dLCBwKTtcXG4gICAgICB2YXIgdG90YWxBcmVhID0gYXJlYUEgKyBhcmVhQiArIGFyZWFDO1xcbiAgICAgIHZhciB3ZWlnaHRBID0gYXJlYUEgLyB0b3RhbEFyZWE7XFxuICAgICAgdmFyIHdlaWdodEIgPSBhcmVhQiAvIHRvdGFsQXJlYTtcXG4gICAgICB2YXIgd2VpZ2h0QyA9IGFyZWFDIC8gdG90YWxBcmVhO1xcbiAgICAgIHZhciB0aHJlc2hvbGRBID0gdGhpcy5fdGhyZXNob2xkc1t0cmlhbmdsZVswXV07XFxuICAgICAgdmFyIHRocmVzaG9sZEIgPSB0aGlzLl90aHJlc2hvbGRzW3RyaWFuZ2xlWzFdXTtcXG4gICAgICB2YXIgdGhyZXNob2xkQyA9IHRoaXMuX3RocmVzaG9sZHNbdHJpYW5nbGVbMl1dO1xcblxcbiAgICAgIHZhciBzdGF0ZUEgPSB0aGlzLl9zdGF0ZXMuZ2V0KHRocmVzaG9sZEEubmFtZSk7XFxuXFxuICAgICAgdmFyIHN0YXRlQiA9IHRoaXMuX3N0YXRlcy5nZXQodGhyZXNob2xkQi5uYW1lKTtcXG5cXG4gICAgICB2YXIgc3RhdGVDID0gdGhpcy5fc3RhdGVzLmdldCh0aHJlc2hvbGRDLm5hbWUpO1xcblxcbiAgICAgIHN0YXRlQS5zZXRXZWlnaHQod2VpZ2h0QSk7XFxuICAgICAgc3RhdGVCLnNldFdlaWdodCh3ZWlnaHRCKTtcXG4gICAgICBzdGF0ZUMuc2V0V2VpZ2h0KHdlaWdodEMpO1xcblxcbiAgICAgIHRoaXMuX3NldFBoYXNlTGVhZFN0YXRlKFtzdGF0ZUEsIHN0YXRlQiwgc3RhdGVDXSwgW3RocmVzaG9sZEEucGhhc2VNYXRjaCwgdGhyZXNob2xkQi5waGFzZU1hdGNoLCB0aHJlc2hvbGRDLnBoYXNlTWF0Y2hdKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgY2xvc2VzdCBwb2ludCB3aXRoaW4gYSB0cmlhbmdsZSBvZlxcclxcbiAgICAgKiB0aHJlc2hvbGRzIGJhc2VkIG9uIHRoZSBjdXJyZW50IFt4LHldIGJsZW5kVmFsdWVzIGFuZFxcclxcbiAgICAgKiB0aGVuIHNldHMgYmxlbmQgd2VpZ2h0cyBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBwIC0gR2l2ZW4gW3gseV0gYmxlbmRWYWx1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfc2V0SW5mbHVlbmNlQ2xvc2VzdFBvaW50SW5UcmlhbmdsZXNcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRJbmZsdWVuY2VDbG9zZXN0UG9pbnRJblRyaWFuZ2xlcyhwKSB7XFxuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XFxuXFxuICAgICAgdmFyIGdsb2JhbENsb3Nlc3RQb2ludCA9IG51bGw7XFxuICAgICAgdmFyIGdsb2JhbE1pbkRpc3QgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XFxuICAgICAgdmFyIGNsb3Nlc3RUcmlhbmdsZSA9IC0xO1xcblxcbiAgICAgIHRoaXMuX3RyaWFuZ2xlcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlhbmdsZSwgaW5kZXgpIHtcXG4gICAgICAgIHZhciBwb2ludEEgPSBjb3JlX01hdGhVdGlscy5jbG9zZXN0UG9pbnRPbkxpbmUoX3RoaXM1Ll92ZXJ0aWNlc1t0cmlhbmdsZVswXV0sIF90aGlzNS5fdmVydGljZXNbdHJpYW5nbGVbMV1dLCBwKTtcXG4gICAgICAgIHZhciBwb2ludEIgPSBjb3JlX01hdGhVdGlscy5jbG9zZXN0UG9pbnRPbkxpbmUoX3RoaXM1Ll92ZXJ0aWNlc1t0cmlhbmdsZVsxXV0sIF90aGlzNS5fdmVydGljZXNbdHJpYW5nbGVbMl1dLCBwKTtcXG4gICAgICAgIHZhciBwb2ludEMgPSBjb3JlX01hdGhVdGlscy5jbG9zZXN0UG9pbnRPbkxpbmUoX3RoaXM1Ll92ZXJ0aWNlc1t0cmlhbmdsZVsyXV0sIF90aGlzNS5fdmVydGljZXNbdHJpYW5nbGVbMF1dLCBwKTtcXG4gICAgICAgIHZhciBkaXN0QSA9IGNvcmVfTWF0aFV0aWxzLmRpc3RhbmNlU3F1YXJlZChwb2ludEEsIHApO1xcbiAgICAgICAgdmFyIGRpc3RCID0gY29yZV9NYXRoVXRpbHMuZGlzdGFuY2VTcXVhcmVkKHBvaW50QiwgcCk7XFxuICAgICAgICB2YXIgZGlzdEMgPSBjb3JlX01hdGhVdGlscy5kaXN0YW5jZVNxdWFyZWQocG9pbnRDLCBwKTtcXG4gICAgICAgIHZhciBsb2NhbENsb3Nlc3RQb2ludCA9IHBvaW50QztcXG4gICAgICAgIHZhciBsb2NhbE1pbkRpc3QgPSBkaXN0QztcXG5cXG4gICAgICAgIGlmIChkaXN0QSA8IGxvY2FsTWluRGlzdCkge1xcbiAgICAgICAgICBsb2NhbENsb3Nlc3RQb2ludCA9IHBvaW50QTtcXG4gICAgICAgICAgbG9jYWxNaW5EaXN0ID0gZGlzdEE7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoZGlzdEIgPCBsb2NhbE1pbkRpc3QpIHtcXG4gICAgICAgICAgbG9jYWxDbG9zZXN0UG9pbnQgPSBwb2ludEI7XFxuICAgICAgICAgIGxvY2FsTWluRGlzdCA9IGRpc3RCO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKGxvY2FsTWluRGlzdCA8IGdsb2JhbE1pbkRpc3QpIHtcXG4gICAgICAgICAgZ2xvYmFsTWluRGlzdCA9IGxvY2FsTWluRGlzdDtcXG4gICAgICAgICAgZ2xvYmFsQ2xvc2VzdFBvaW50ID0gQmxlbmQyZFN0YXRlX3RvQ29uc3VtYWJsZUFycmF5KGxvY2FsQ2xvc2VzdFBvaW50KTtcXG4gICAgICAgICAgY2xvc2VzdFRyaWFuZ2xlID0gaW5kZXg7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuXFxuICAgICAgdGhpcy5fc2V0SW5mbHVlbmNlVHJpYW5nbGUodGhpcy5fdHJpYW5nbGVzW2Nsb3Nlc3RUcmlhbmdsZV0sIGdsb2JhbENsb3Nlc3RQb2ludCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIERldGVybWluZXMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIGxpbmUgZm9ybWVkIGJldHdlZW4gdGhlXFxyXFxuICAgICAqIHR3byBibGVuZCB0aHJlc2hvbGRzIGJhc2VkIG9uIHRoZSBjdXJyZW50IFt4LHldIGJsZW5kVmFsdWVzIGFuZFxcclxcbiAgICAgKiB0aGVuIHNldHMgYmxlbmQgd2VpZ2h0cyBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBwIC0gR2l2ZW4gW3gseV0gYmxlbmRWYWx1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfc2V0SW5mbHVlbmNlQ2xvc2VzdFBvaW50T25MaW5lXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SW5mbHVlbmNlQ2xvc2VzdFBvaW50T25MaW5lKHApIHtcXG4gICAgICB2YXIgY2xvc2VzdFBvaW50ID0gY29yZV9NYXRoVXRpbHMuY2xvc2VzdFBvaW50T25MaW5lKHRoaXMuX3ZlcnRpY2VzW1swXV0sIHRoaXMuX3ZlcnRpY2VzW1sxXV0sIHApO1xcbiAgICAgIHZhciBkaXN0QSA9IGNvcmVfTWF0aFV0aWxzLmRpc3RhbmNlU3F1YXJlZCh0aGlzLl92ZXJ0aWNlc1swXSwgY2xvc2VzdFBvaW50KTtcXG4gICAgICB2YXIgZGlzdEIgPSBjb3JlX01hdGhVdGlscy5kaXN0YW5jZVNxdWFyZWQodGhpcy5fdmVydGljZXNbMV0sIGNsb3Nlc3RQb2ludCk7XFxuICAgICAgdmFyIHdlaWdodEEgPSBkaXN0QiAvIChkaXN0QSArIGRpc3RCKTtcXG4gICAgICB2YXIgd2VpZ2h0QiA9IGRpc3RBIC8gKGRpc3RBICsgZGlzdEIpO1xcbiAgICAgIHZhciB0aHJlc2hvbGRBID0gdGhpcy5fdGhyZXNob2xkc1swXTtcXG4gICAgICB2YXIgdGhyZXNob2xkQiA9IHRoaXMuX3RocmVzaG9sZHNbMV07XFxuXFxuICAgICAgdmFyIHN0YXRlQSA9IHRoaXMuX3N0YXRlcy5nZXQodGhyZXNob2xkQS5uYW1lKTtcXG5cXG4gICAgICB2YXIgc3RhdGVCID0gdGhpcy5fc3RhdGVzLmdldCh0aHJlc2hvbGRCLm5hbWUpO1xcblxcbiAgICAgIHN0YXRlQS5zZXRXZWlnaHQod2VpZ2h0QSk7XFxuICAgICAgc3RhdGVCLnNldFdlaWdodCh3ZWlnaHRCKTtcXG5cXG4gICAgICB0aGlzLl9zZXRQaGFzZUxlYWRTdGF0ZShbc3RhdGVBLCBzdGF0ZUJdLCBbdGhyZXNob2xkQS5waGFzZU1hdGNoLCB0aHJlc2hvbGRCLnBoYXNlTWF0Y2hdKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU2V0cyBhIGxlYWQgcGhhc2Ugc3RhdGUgaWYgdGhlIGNvbmRpdGlvbnNcXHJcXG4gICAgICogZm9yIHBoYXNlLW1hdGNoaW5nIGFyZSBzYXRpc2ZpZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEFic3RyYWN0QmxlbmRTdGF0ZT59IHN0YXRlcyAtIFN0YXRlcyB0b1xcclxcbiAgICAgKiBjaGVjayBwaGFzZS1tYXRjaGluZyBjcml0ZXJpYS5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48Ym9vbGVhbj59IHBoYXNlTWF0Y2hlZCAtIExpc3Qgb2YgcGhhc2UtbWF0Y2ggYm9vbGVhbnMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3NldFBoYXNlTGVhZFN0YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UGhhc2VMZWFkU3RhdGUoc3RhdGVzLCBwaGFzZU1hdGNoZWQpIHtcXG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcXG5cXG4gICAgICB2YXIgbWF4ID0gMDtcXG4gICAgICBzdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUsIGluZGV4KSB7XFxuICAgICAgICBpZiAocGhhc2VNYXRjaGVkW2luZGV4XSAmJiBzdGF0ZS53ZWlnaHQgPiBtYXgpIHtcXG4gICAgICAgICAgX3RoaXM2Ll9waGFzZUxlYWRTdGF0ZSA9IHN0YXRlO1xcbiAgICAgICAgICBtYXggPSBzdGF0ZS53ZWlnaHQ7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBCbGVuZDJkU3RhdGU7XFxufShzdGF0ZV9BYnN0cmFjdEJsZW5kU3RhdGUpO1xcblxcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3Qgc3RhdGVfQmxlbmQyZFN0YXRlID0gKEJsZW5kMmRTdGF0ZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svQW5pbWF0aW9uTGF5ZXIuanNcXG5mdW5jdGlvbiBBbmltYXRpb25MYXllcl90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIEFuaW1hdGlvbkxheWVyX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIEFuaW1hdGlvbkxheWVyX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uTGF5ZXJfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkxheWVyX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkxheWVyX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgQW5pbWF0aW9uTGF5ZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEFuaW1hdGlvbkxheWVyX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uTGF5ZXJfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgQW5pbWF0aW9uTGF5ZXJfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IEFuaW1hdGlvbkxheWVyX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBBbmltYXRpb25MYXllcl9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBBbmltYXRpb25MYXllcl9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkxheWVyX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBBbmltYXRpb25MYXllcl9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uTGF5ZXJfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgQW5pbWF0aW9uTGF5ZXJfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uTGF5ZXJfc2V0UHJvdG90eXBlT2YobywgcCkgeyBBbmltYXRpb25MYXllcl9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gQW5pbWF0aW9uTGF5ZXJfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25MYXllcl9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gQW5pbWF0aW9uTGF5ZXJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gQW5pbWF0aW9uTGF5ZXJfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IEFuaW1hdGlvbkxheWVyX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBBbmltYXRpb25MYXllcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25MYXllcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKEFuaW1hdGlvbkxheWVyX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBBbmltYXRpb25MYXllcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25MYXllcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25MYXllcl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkxheWVyX2dldFByb3RvdHlwZU9mKG8pIHsgQW5pbWF0aW9uTGF5ZXJfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gQW5pbWF0aW9uTGF5ZXJfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG5cXG5cXG5cXG5cXG5cXG4vKipcXHJcXG4gKiBFbnVtIGZvciB0eXBlcyBvZiB7QGxpbmsgQW5pbWF0aW9uTGF5ZXJ9IGJsZW5kaW5nLlxcclxcbiAqXFxyXFxuICogQHJlYWRvbmx5XFxyXFxuICogQGVudW0ge3N0cmluZ31cXHJcXG4gKi9cXG5cXG52YXIgTGF5ZXJCbGVuZE1vZGVzID0ge1xcbiAgT3ZlcnJpZGU6IFxcJ092ZXJyaWRlXFwnLFxcbiAgQWRkaXRpdmU6IFxcJ0FkZGl0aXZlXFwnXFxufTtcXG4vKipcXHJcXG4gKiBUaGUgZGVmYXVsdCBibGVuZGluZyBtb2RlIHtAbGluayBBbmltYXRpb25MYXllcn0uXFxyXFxuICpcXHJcXG4gKiBAcmVhZG9ubHlcXHJcXG4gKiBAdHlwZSB7c3RyaW5nfVxcclxcbiAqL1xcblxcbnZhciBEZWZhdWx0TGF5ZXJCbGVuZE1vZGUgPSBcXCdPdmVycmlkZVxcJztcXG4vKipcXHJcXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBibGVuZE1vZGUgaXMgcHJlc2VudCBpbiB0aGUgdmFsdWVzIG9mIHtAbGluayBMYXllckJsZW5kTW9kZXN9LlxcclxcbiAqIElmIGl0IGlzLCByZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlLCBvdGhlcndpc2UgcmV0dXJuIHtAbGluayBEZWZhdWx0TGF5ZXJCbGVuZE1vZGV9LlxcclxcbiAqXFxyXFxuICogQHBhcmFtIHtzdHJpbmd9IGJsZW5kTW9kZSAtIFRoZSBuYW1lIG9mIHRoZSB0eXBlIG9mIGJsZW5kaW5nLlxcclxcbiAqXFxyXFxuICogQHJldHVybnMgeyhzdHJpbmd8RGVmYXVsdExheWVyQmxlbmRNb2RlKX1cXHJcXG4gKi9cXG5cXG5mdW5jdGlvbiB2YWxpZGF0ZUJsZW5kTW9kZShibGVuZE1vZGUpIHtcXG4gIGlmIChBcnJheS5mcm9tKE9iamVjdC52YWx1ZXMoTGF5ZXJCbGVuZE1vZGVzKSkuaW5jbHVkZXMoYmxlbmRNb2RlKSkge1xcbiAgICByZXR1cm4gYmxlbmRNb2RlO1xcbiAgfSBlbHNlIHtcXG4gICAgcmV0dXJuIERlZmF1bHRMYXllckJsZW5kTW9kZTtcXG4gIH1cXG59XFxuLyoqXFxyXFxuICogQ2xhc3MgZm9yIG1hbmFnaW5nIGEgc2V0IG9mIGFuaW1hdGlvbnMgd2hlcmUgb25seSBvbmUgc3RhdGUgY2FuIGJlIGFjdGl2ZSBhdFxcclxcbiAqIGFueSBnaXZlbiB0aW1lLlxcclxcbiAqXFxyXFxuICogQGltcGxlbWVudHMgQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlXFxyXFxuICogQGltcGxlbWVudHMgU3RhdGVDb250YWluZXJJbnRlcmZhY2VcXHJcXG4gKi9cXG5cXG52YXIgQW5pbWF0aW9uTGF5ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BbmltYXRpb25QbGF5ZXJJbnRlcikge1xcbiAgQW5pbWF0aW9uTGF5ZXJfaW5oZXJpdHMoQW5pbWF0aW9uTGF5ZXIsIF9BbmltYXRpb25QbGF5ZXJJbnRlcik7XFxuXFxuICB2YXIgX3N1cGVyID0gQW5pbWF0aW9uTGF5ZXJfY3JlYXRlU3VwZXIoQW5pbWF0aW9uTGF5ZXIpO1xcblxcbiAgLyoqXFxyXFxuICAgKiBAY29uc3RydWN0b3JcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSAgT3B0aW9ucyBmb3IgdGhlIGFuaW1hdGlvbiBsYXllci5cXHJcXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm5hbWUgLSBOYW1lIG9mIHRoZSBsYXllci4gTmFtZXMgbXVzdCBiZSB1bmlxdWUgdG8gdGhlXFxyXFxuICAgKiBhbmltYXRpb24gZmVhdHVyZSB0aGF0IGNvbnRhaW5zIHRoZSBsYXllci5cXHJcXG4gICAqIEBwYXJhbSB7TGF5ZXJCbGVuZE1vZGVzfSBbb3B0aW9ucy5ibGVuZE1vZGU9RGVmYXVsdExheWVyQmxlbmRNb2RlXSAtXFxyXFxuICAgKiBUeXBlIG9mIGJsZW5kaW5nIHRvIHVzZSBmb3IgYWxsIHN0YXRlcyBjb250cm9sbGVkIGJ5IHRoZSBsYXllci5cXHJcXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53ZWlnaHQ9MV0gLSBUaGUgYW1vdW50IG9mIGluZmx1ZW5jZSB0aGUgbGF5ZXJcXCdzIGN1cnJlbnRcXHJcXG4gICAqIGFuaW1hdGlvbiBoYXMgb3ZlciB0aGUgcmVzdWx0IGZvciB0aGUgaG9zdC5cXHJcXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy50cmFuc2l0aW9uVGltZT0wXSAtIFRoZSBkZWZhdWx0IGFtb3VudCBvZiB0aW1lIHRvIHVzZSB3aGVuXFxyXFxuICAgKiBwbGF5aW5nIGFuZCByZXN1bWluZyBhbmltYXRpb25zLlxcclxcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMuZWFzaW5nRm4gLSBUaGUgZGVmYXVsdCBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIHdoZW5cXHJcXG4gICAqIHRyYW5zaXRpb25pbmcgYmV0d2VlbiBhbmltYXRpb25zIGFuZCBzZXR0aW5nIGxheWVyIHdlaWdodC5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gQW5pbWF0aW9uTGF5ZXIoKSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xcblxcbiAgICBBbmltYXRpb25MYXllcl9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbmltYXRpb25MYXllcik7XFxuXFxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XFxuICAgIF90aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgPT09IHVuZGVmaW5lZCA/IFxcJ0FuaW1hdGlvbkxheWVyXFwnIDogb3B0aW9ucy5uYW1lO1xcbiAgICBfdGhpcy5fYmxlbmRNb2RlID0gQXJyYXkuZnJvbShPYmplY3QudmFsdWVzKExheWVyQmxlbmRNb2RlcykpLmluY2x1ZGVzKG9wdGlvbnMuYmxlbmRNb2RlKSA/IG9wdGlvbnMuYmxlbmRNb2RlIDogRGVmYXVsdExheWVyQmxlbmRNb2RlO1xcbiAgICBfdGhpcy5fcHJvbWlzZXMgPSB7XFxuICAgICAgd2VpZ2h0OiBjb3JlX0RlZmVycmVkLnJlc29sdmUoKVxcbiAgICB9O1xcbiAgICBfdGhpcy5fd2VpZ2h0UGF1c2VkID0gZmFsc2U7XFxuICAgIF90aGlzLndlaWdodCA9IHR5cGVvZiBvcHRpb25zLndlaWdodCA9PT0gXFwnbnVtYmVyXFwnID8gb3B0aW9ucy53ZWlnaHQgOiAxO1xcbiAgICBfdGhpcy5faW50ZXJuYWxXZWlnaHQgPSBfdGhpcy5fd2VpZ2h0O1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgdGhlIHR5cGUgb2YgYmxlbmRpbmcgdXNlZCBmb3Igc3RhdGVzIGNvbnRyb2xsZWQgYnkgdGhlIGxheWVyLlxcclxcbiAgICpcXHJcXG4gICAqIEByZWFkb25seVxcclxcbiAgICogQHR5cGUge3N0cmluZ31cXHJcXG4gICAqL1xcblxcblxcbiAgQW5pbWF0aW9uTGF5ZXJfY3JlYXRlQ2xhc3MoQW5pbWF0aW9uTGF5ZXIsIFt7XFxuICAgIGtleTogXCJibGVuZE1vZGVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2JsZW5kTW9kZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyBhbmQgc2V0cyB0aGUgYW1vdW50IG9mIGluZmx1ZW5jZSB0aGUgbGF5ZXJcXCdzIGN1cnJlbnQgYW5pbWF0aW9uIGhhcyBvdmVyXFxyXFxuICAgICAqIHRoZSByZXN1bHQgZm9yIHRoZSBob3N0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIndlaWdodFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fd2VpZ2h0O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBsYXllclxcJ3Mgd2VpZ2h0IHZhbHVlIGlzIGN1cnJlbnRseSBiZWluZyBhbmltYXRlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtib29sZWFufVxcclxcbiAgICAgKi9cXG4gICAgLFxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh3ZWlnaHQpIHtcXG4gICAgICB0aGlzLl93ZWlnaHQgPSBjb3JlX01hdGhVdGlscy5jbGFtcCh3ZWlnaHQsIDAsIDEpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJ3ZWlnaHRQZW5kaW5nXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy53ZWlnaHQgJiYgdGhpcy5fcHJvbWlzZXMud2VpZ2h0LnBlbmRpbmc7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBhdXNlIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzdGF0ZSBhbmQgYW55IGludGVycG9sYXRpb24gaGFwcGVuaW5nIG9uIHRoZSBsYXllclxcJ3NcXHJcXG4gICAgICogd2VpZ2h0IHByb3BlcnR5LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XFxuICAgICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcXG4gICAgICB0aGlzLl93ZWlnaHRQYXVzZWQgPSB0cnVlO1xcbiAgICAgIHJldHVybiB0aGlzLnBhdXNlQW5pbWF0aW9uKCkgfHwgdGhpcy53ZWlnaHRQZW5kaW5nO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXN1bWUgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlIGFuZCBhbnkgaW50ZXJwb2xhdGlvbiBoYXBwZW5pbmcgb24gdGhlIGxheWVyXFwnc1xcclxcbiAgICAgKiB3ZWlnaHQgcHJvcGVydHkuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKCkge1xcbiAgICAgIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xcbiAgICAgIHRoaXMuX3dlaWdodFBhdXNlZCA9IGZhbHNlO1xcbiAgICAgIHZhciBpc1dlaWdodEFjdGl2ZSA9IHRoaXMud2VpZ2h0UGVuZGluZztcXG5cXG4gICAgICBpZiAodGhpcy5fY3VycmVudFN0YXRlKSB7XFxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bWVBbmltYXRpb24oKSB8fCBpc1dlaWdodEFjdGl2ZTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgcmV0dXJuIGlzV2VpZ2h0QWN0aXZlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlcyB0aGUgdXNlciBkZWZpbmVkIHdlaWdodCBvdmVyIHRpbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBUaGUgdGFyZ2V0IHdlaWdodCB2YWx1ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmRzPTBdIC0gVGhlIGFtb3VudCBvZiB0aW1lIGl0IHdpbGwgdGFrZSB0byByZWFjaCB0aGVcXHJcXG4gICAgICogdGFyZ2V0IHdlaWdodC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gVGhlIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIGludGVycG9sYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJzZXRXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFdlaWdodCh3ZWlnaHQpIHtcXG4gICAgICB2YXIgc2Vjb25kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcXG4gICAgICB2YXIgZWFzaW5nRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcXG5cXG4gICAgICBpZiAodGhpcy53ZWlnaHRQZW5kaW5nKSB7XFxuICAgICAgICB0aGlzLl9wcm9taXNlcy53ZWlnaHQuY2FuY2VsKCk7XFxuICAgICAgfVxcblxcbiAgICAgIHdlaWdodCA9IGNvcmVfTWF0aFV0aWxzLmNsYW1wKHdlaWdodCk7XFxuICAgICAgdGhpcy5fcHJvbWlzZXMud2VpZ2h0ID0gYW5pbXBhY2tfQW5pbWF0aW9uVXRpbHMuaW50ZXJwb2xhdGVQcm9wZXJ0eSh0aGlzLCBcXCd3ZWlnaHRcXCcsIHdlaWdodCwge1xcbiAgICAgICAgc2Vjb25kczogc2Vjb25kcyxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGbiAhPT0gdW5kZWZpbmVkID8gZWFzaW5nRm4gOiB0aGlzLl9lYXNpbmdGblxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy53ZWlnaHQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBhdXNlIGFueSBpbnRlcnBvbGF0aW9uIGhhcHBlbmluZyBvbiB0aGUgbGF5ZXJcXCdzIHdlaWdodCBwcm9wZXJ0eS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGF1c2VXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlV2VpZ2h0KCkge1xcbiAgICAgIHRoaXMuX3dlaWdodFBhdXNlZCA9IHRydWU7XFxuICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0UGVuZGluZztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzdW1lIGFueSBpbnRlcnBvbGF0aW9uIGhhcHBlbmluZyBvbiB0aGUgbGF5ZXJcXCdzIHdlaWdodCBwcm9wZXJ0eS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVzdW1lV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVXZWlnaHQoKSB7XFxuICAgICAgdGhpcy5fd2VpZ2h0UGF1c2VkID0gZmFsc2U7XFxuICAgICAgcmV0dXJuIHRoaXMud2VpZ2h0UGVuZGluZztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogTXVsdGlwbGllcyB0aGUgdXNlciB3ZWlnaHQgYnkgYSBmYWN0b3IgdG8gZGV0ZXJtaW5lIHRoZSBpbnRlcm5hbCB3ZWlnaHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmYWN0b3IgLSAwLTEgbXVsdGlwbGllciB0byBhcHBseSB0byB0aGUgdXNlciB3ZWlnaHQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidXBkYXRlSW50ZXJuYWxXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUludGVybmFsV2VpZ2h0KGZhY3Rvcikge1xcbiAgICAgIHRoaXMuX2ludGVybmFsV2VpZ2h0ID0gdGhpcy5fd2VpZ2h0ICogZmFjdG9yO1xcblxcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RhdGUpIHtcXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0ZS51cGRhdGVJbnRlcm5hbFdlaWdodCh0aGlzLl9pbnRlcm5hbFdlaWdodCk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lcyBvZiBibGVuZCBzdGF0ZXMgaW4gYW4gYW5pbWF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW5pbWF0aW9uTmFtZSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSAtIE5hbWVzIG9mIGJsZW5kIHN0YXRlcy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRBbmltYXRpb25CbGVuZE5hbWVzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmltYXRpb25CbGVuZE5hbWVzKGFuaW1hdGlvbk5hbWUpIHtcXG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldFN0YXRlKGFuaW1hdGlvbk5hbWUpO1xcblxcbiAgICAgIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IGJsZW5kIG5hbWVzIG9mIGFuaW1hdGlvbiBcIi5jb25jYXQoYW5pbWF0aW9uTmFtZSwgXCIgb24gbGF5ZXIgXCIpLmNvbmNhdCh0aGlzLm5hbWUsIFwiLiBObyBhbmltYXRpb24gZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIHN0YXRlX0Fic3RyYWN0QmxlbmRTdGF0ZSkge1xcbiAgICAgICAgcmV0dXJuIHN0YXRlLmdldFN0YXRlTmFtZXMoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBibGVuZCBuYW1lcyBvZiBhbmltYXRpb24gXCIuY29uY2F0KGFuaW1hdGlvbk5hbWUsIFwiIG9uIGxheWVyIFwiKS5jb25jYXQodGhpcy5uYW1lLCBcIi4gQW5pbWF0aW9uIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBBYnN0cmFjdEJsZW5kU3RhdGUuXCIpKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlIHRoZSB3ZWlnaHQgZm9yIGEgYmxlbmQgc3RhdGUgb2YgYW4gYW5pbWF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW5pbWF0aW9uTmFtZSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbiBjb250YWluaW5nIHRoZSBibGVuZCBzdGF0ZVxcclxcbiAgICAgKiB0byB1cGRhdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBibGVuZE5hbWUgLSBOYW1lIG9mIHRoZSBibGVuZCBzdGF0ZSB0byB1cGRhdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBXZWlnaHQgdmFsdWUgdG8gc2V0IG9uIHRoZSBhbmltYXRpb24uIFRoaXMgbnVtYmVyIHNob3VkbGQgYmVcXHJcXG4gICAgICogaW4gdGhlIDAtMSByYW5nZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzZWNvbmRzIC0gTnVtYmVyIG9mIHNlY29uZHMgaXQgc2hvdWxkIHRha2UgdG8gcmVhY2ggdGhlIG5ldyB3ZWlnaHQuXFxyXFxuICAgICAqIERlZmF1bHQgaXMgemVybyBhbmQgd2lsbCBzZXQgaW1tZWRpYXRlbHkuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hpbGUgaW50ZXJwb2xhdGluZyB0aGUgbmV3XFxyXFxuICAgICAqIHdlaWdodC4gRGVmYXVsdCBpcyBFYXNpbmcuTGluZWFyLkluT3V0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IC0gUHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbmNlIHRoZSBhbmltYXRpb25cXCdzIHdlaWdodCByZWFjaGVzXFxyXFxuICAgICAqIHRoZSB0YXJnZXQgdmFsdWUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0QW5pbWF0aW9uQmxlbmRXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGFuaW1hdGlvbk5hbWUsIGJsZW5kTmFtZSwgd2VpZ2h0KSB7XFxuICAgICAgdmFyIHNlY29uZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XFxuICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRTdGF0ZShhbmltYXRpb25OYW1lKTtcXG5cXG4gICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBibGVuZCB3ZWlnaHQgb2YgYW5pbWF0aW9uIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIE5vIGFuaW1hdGlvbiBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKHN0YXRlIGluc3RhbmNlb2Ygc3RhdGVfQWJzdHJhY3RCbGVuZFN0YXRlKSB7XFxuICAgICAgICByZXR1cm4gc3RhdGUuc2V0QmxlbmRXZWlnaHQoYmxlbmROYW1lLCB3ZWlnaHQsIHNlY29uZHMsIGVhc2luZ0ZuKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBibGVuZCB3ZWlnaHQgb2YgYW5pbWF0aW9uIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIEFuaW1hdGlvbiBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQWJzdHJhY3RCbGVuZFN0YXRlLlwiKSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybnMgdGhlIHdlaWdodCBmb3IgYSBibGVuZCBzdGF0ZSBvZiBhbiBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIGNvbnRhaW5pbmcgdGhlIGJsZW5kIHN0YXRlXFxyXFxuICAgICAqIHRvIHVwZGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJsZW5kTmFtZSAtIE5hbWUgb2YgdGhlIGJsZW5kIHN0YXRlIHRvIHJldHJpZXZlIHRoZSB3ZWlnaHQgb2YuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IC0gV2VpZ2h0IG9mIHRoZSBibGVuZCBzdGF0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRBbmltYXRpb25CbGVuZFdlaWdodFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5pbWF0aW9uQmxlbmRXZWlnaHQoYW5pbWF0aW9uTmFtZSwgYmxlbmROYW1lKSB7XFxuICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRTdGF0ZShhbmltYXRpb25OYW1lKTtcXG5cXG4gICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBibGVuZCB3ZWlnaHQgb2YgYW5pbWF0aW9uIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIE5vIGFuaW1hdGlvbiBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKHN0YXRlIGluc3RhbmNlb2Ygc3RhdGVfQWJzdHJhY3RCbGVuZFN0YXRlKSB7XFxuICAgICAgICByZXR1cm4gc3RhdGUuZ2V0QmxlbmRXZWlnaHQoYmxlbmROYW1lKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBibGVuZCB3ZWlnaHQgb2YgYW5pbWF0aW9uIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KHRoaXMubmFtZSwgXCIuIEFuaW1hdGlvbiBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQWJzdHJhY3RCbGVuZFN0YXRlLlwiKSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZSBhbnkgd2VpZ2h0IGludGVycG9sYXRvcnMgYW5kIHRoZSBjdXJyZW50IGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSAtIFRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBsYXN0IHVwZGF0ZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShkZWx0YVRpbWUpIHtcXG4gICAgICBBbmltYXRpb25MYXllcl9nZXQoQW5pbWF0aW9uTGF5ZXJfZ2V0UHJvdG90eXBlT2YoQW5pbWF0aW9uTGF5ZXIucHJvdG90eXBlKSwgXCJ1cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBkZWx0YVRpbWUpO1xcblxcbiAgICAgIGlmICghdGhpcy5fcGF1c2VkICYmICF0aGlzLl93ZWlnaHRQYXVzZWQpIHtcXG4gICAgICAgIHRoaXMuX3Byb21pc2VzLndlaWdodC5leGVjdXRlKGRlbHRhVGltZSk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDYW5jZWwgYW55IHBlbmRpbmcgcHJvbWlzZXMgYW5kIGRpc2NhcmQgc3RhdGVzIGNvbnRyb2xsZWQgYnkgdGhlIGxheWVyLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImRpc2NhcmRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NhcmQoKSB7XFxuICAgICAgQW5pbWF0aW9uTGF5ZXJfZ2V0KEFuaW1hdGlvbkxheWVyX2dldFByb3RvdHlwZU9mKEFuaW1hdGlvbkxheWVyLnByb3RvdHlwZSksIFwiZGlzY2FyZFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcblxcbiAgICAgIHRoaXMuZGlzY2FyZFN0YXRlcygpO1xcblxcbiAgICAgIHRoaXMuX3Byb21pc2VzLndlaWdodC5jYW5jZWwoKTtcXG5cXG4gICAgICBkZWxldGUgdGhpcy5fcHJvbWlzZXM7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBbmltYXRpb25MYXllcjtcXG59KGFuaW1wYWNrX0FuaW1hdGlvblBsYXllckludGVyZmFjZS5NaXhpbihzdGF0ZV9TdGF0ZUNvbnRhaW5lckludGVyZmFjZS5NaXhpbigpKSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhbmltcGFja19BbmltYXRpb25MYXllciA9IChBbmltYXRpb25MYXllcik7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svc3RhdGUvU2luZ2xlU3RhdGUuanNcXG5mdW5jdGlvbiBTaW5nbGVTdGF0ZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIFNpbmdsZVN0YXRlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIFNpbmdsZVN0YXRlX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gU2luZ2xlU3RhdGVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFNpbmdsZVN0YXRlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIFNpbmdsZVN0YXRlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgU2luZ2xlU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFNpbmdsZVN0YXRlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gU2luZ2xlU3RhdGVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgU2luZ2xlU3RhdGVfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gU2luZ2xlU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCkgeyBTaW5nbGVTdGF0ZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gU2luZ2xlU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBTaW5nbGVTdGF0ZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gU2luZ2xlU3RhdGVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gU2luZ2xlU3RhdGVfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IFNpbmdsZVN0YXRlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBTaW5nbGVTdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBTaW5nbGVTdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKFNpbmdsZVN0YXRlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBTaW5nbGVTdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBTaW5nbGVTdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBTaW5nbGVTdGF0ZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIFNpbmdsZVN0YXRlX2dldFByb3RvdHlwZU9mKG8pIHsgU2luZ2xlU3RhdGVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gU2luZ2xlU3RhdGVfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG5cXG5cXG5cXG4vKipcXHJcXG4gKiBDbGFzcyBmb3IgcGxheWluZyBhIHNpbmdsZSBhbmltYXRpb24gY2xpcC5cXHJcXG4gKlxcclxcbiAqIEBleHRlbmRzIEFic3RyYWN0U3RhdGVcXHJcXG4gKiBAYWxpYXMgY29yZS9TaW5nbGVTdGF0ZVxcclxcbiAqL1xcblxcbnZhciBTaW5nbGVTdGF0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fic3RyYWN0U3RhdGUpIHtcXG4gIFNpbmdsZVN0YXRlX2luaGVyaXRzKFNpbmdsZVN0YXRlLCBfQWJzdHJhY3RTdGF0ZSk7XFxuXFxuICB2YXIgX3N1cGVyID0gU2luZ2xlU3RhdGVfY3JlYXRlU3VwZXIoU2luZ2xlU3RhdGUpO1xcblxcbiAgLyoqXFxyXFxuICAgKiBAY29uc3RydWN0b3JcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgYW5pbWF0aW9uIHN0YXRlLlxcclxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLm5hbWUgLSBOYW1lIGZvciB0aGUgYW5pbWF0aW9uIHN0YXRlLiBOYW1lcyBtdXN0IGJlXFxyXFxuICAgKiB1bmlxdWUgZm9yIHRoZSBsYXllciB0aGUgc3RhdGUgaXMgYXBwbGllZCB0by5cXHJcXG4gICAqIEBwYXJhbSB7d2VpZ2h0fSBbb3B0aW9ucy53ZWlnaHQ9MF0gLSBUaGUgMC0xIGFtb3VudCBvZiBpbmZsdWVuY2UgdGhlIHN0YXRlIHdpbGwgaGF2ZS5cXHJcXG4gICAqIEBwYXJhbSB7dGltZVNjYWxlfSBbb3B0aW9ucy50aW1lU2NhbGU9MV0gLSBGYWN0b3IgdG8gc2NhbGUgdGhlIHBsYXliYWNrIHNwZWVkIG9mIHRoZVxcclxcbiAgICogYW5pbWF0aW9uLlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxvb3BDb3VudD1JbmZpbml0eV0gLSBOdW1iZXIgb2YgdGltZXMgdGhlIGFuaW1hdGlvbiBzaG91bGRcXHJcXG4gICAqIHJlcGVhdCBiZWZvcmUgZmluaXNoaW5nLlxcclxcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJsZW5kTW9kZT1EZWZhdWx0TGF5ZXJCbGVuZE1vZGVdIC0gVHlwZSBvZlxcclxcbiAgICogYmxlbmRpbmcgdGhlIGFuaW1hdGlvbiBzaG91bGQgdXNlLlxcclxcbiAgICovXFxuICBmdW5jdGlvbiBTaW5nbGVTdGF0ZSgpIHtcXG4gICAgdmFyIF90aGlzO1xcblxcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XFxuXFxuICAgIFNpbmdsZVN0YXRlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbmdsZVN0YXRlKTtcXG5cXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcXG4gICAgX3RoaXMuX3RpbWVTY2FsZSA9IG9wdGlvbnMudGltZVNjYWxlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLnRpbWVTY2FsZSA6IDE7XFxuICAgIF90aGlzLl9wcm9taXNlcy50aW1lU2NhbGUgPSBjb3JlX0RlZmVycmVkLnJlc29sdmUoKTtcXG4gICAgX3RoaXMuX2xvb3BDb3VudCA9IG9wdGlvbnMubG9vcENvdW50ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmxvb3BDb3VudCA6IEluZmluaXR5O1xcbiAgICBfdGhpcy5fYmxlbmRNb2RlID0gdmFsaWRhdGVCbGVuZE1vZGUob3B0aW9ucy5ibGVuZE1vZGUpO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgYW5kIHNldHMgdGhlIG5vcm1hbGl6ZWQgcGxheWluZyB0aW1lIG9mIHRoZSBjdXJyZW50IGFuaW1hdGlvblxcclxcbiAgICpcXHJcXG4gICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgKi9cXG5cXG5cXG4gIFNpbmdsZVN0YXRlX2NyZWF0ZUNsYXNzKFNpbmdsZVN0YXRlLCBbe1xcbiAgICBrZXk6IFwibm9ybWFsaXplZFRpbWVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIDA7XFxuICAgIH0sXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHRpbWUpIHt9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSBhIGZhY3RvciB0byBzY2FsZSBhbmltYXRpb24gcGxheWJhY2sgc3BlZWQgd2l0aC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHR5cGUge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ0aW1lU2NhbGVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3RpbWVTY2FsZTtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodGltZVNjYWxlKSB7XFxuICAgICAgdGhpcy5fdGltZVNjYWxlID0gdGltZVNjYWxlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSB0aW1lU2NhbGUgaXMgY3VycmVudGx5IGJlaW5nIGFuaW1hdGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidGltZVNjYWxlUGVuZGluZ1wiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZXMudGltZVNjYWxlLnBlbmRpbmc7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZXMgdGhlIHRpbWVTY2FsZSB2YWx1ZSBvdmVyIHRpbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBUaGUgdGFyZ2V0IHRpbWVTY2FsZSB2YWx1ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmRzPTBdIC0gVGhlIGFtb3VudCBvZiB0aW1lIGl0IHdpbGwgdGFrZSB0byByZWFjaCB0aGVcXHJcXG4gICAgICogdGFyZ2V0IHRpbWVTY2FsZS5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gVGhlIGVhc2luZyBmdW5jdGlvbiB0byB1c2UgZm9yIGludGVycG9sYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJzZXRUaW1lU2NhbGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRpbWVTY2FsZSh0aW1lU2NhbGUpIHtcXG4gICAgICB2YXIgc2Vjb25kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcXG4gICAgICB2YXIgZWFzaW5nRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcXG5cXG4gICAgICB0aGlzLl9wcm9taXNlcy50aW1lU2NhbGUuY2FuY2VsKCk7XFxuXFxuICAgICAgdGhpcy5fcHJvbWlzZXMudGltZVNjYWxlID0gYW5pbXBhY2tfQW5pbWF0aW9uVXRpbHMuaW50ZXJwb2xhdGVQcm9wZXJ0eSh0aGlzLCBcXCd0aW1lU2NhbGVcXCcsIHRpbWVTY2FsZSwge1xcbiAgICAgICAgc2Vjb25kczogc2Vjb25kcyxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGblxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlcy50aW1lU2NhbGU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgYW5pbWF0aW9uIHdpbGwgcmVwZWF0IGJlZm9yZSBmaW5pc2hpbmcuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwibG9vcENvdW50XCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9sb29wQ291bnQ7XFxuICAgIH0sXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGxvb3BDb3VudCkge1xcbiAgICAgIHRoaXMuX2xvb3BDb3VudCA9IGxvb3BDb3VudDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB0aGUgdHlwZSBvZiBibGVuZGluZyB1c2VkIGZvciB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge3N0cmluZ31cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJibGVuZE1vZGVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2JsZW5kTW9kZTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIFNpbmdsZVN0YXRlO1xcbn0oc3RhdGVfQWJzdHJhY3RTdGF0ZSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBzdGF0ZV9TaW5nbGVTdGF0ZSA9IChTaW5nbGVTdGF0ZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svc3RhdGUvUmFuZG9tQW5pbWF0aW9uU3RhdGUuanNcXG5mdW5jdGlvbiBSYW5kb21BbmltYXRpb25TdGF0ZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIFJhbmRvbUFuaW1hdGlvblN0YXRlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIFJhbmRvbUFuaW1hdGlvblN0YXRlX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gUmFuZG9tQW5pbWF0aW9uU3RhdGVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFJhbmRvbUFuaW1hdGlvblN0YXRlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIFJhbmRvbUFuaW1hdGlvblN0YXRlX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgUmFuZG9tQW5pbWF0aW9uU3RhdGVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFJhbmRvbUFuaW1hdGlvblN0YXRlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHsgUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBSYW5kb21BbmltYXRpb25TdGF0ZV9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBSYW5kb21BbmltYXRpb25TdGF0ZV9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIFJhbmRvbUFuaW1hdGlvblN0YXRlX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBSYW5kb21BbmltYXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XFxuXFxuZnVuY3Rpb24gUmFuZG9tQW5pbWF0aW9uU3RhdGVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgUmFuZG9tQW5pbWF0aW9uU3RhdGVfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gUmFuZG9tQW5pbWF0aW9uU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCkgeyBSYW5kb21BbmltYXRpb25TdGF0ZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gUmFuZG9tQW5pbWF0aW9uU3RhdGVfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBSYW5kb21BbmltYXRpb25TdGF0ZV9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gUmFuZG9tQW5pbWF0aW9uU3RhdGVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBSYW5kb21BbmltYXRpb25TdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBSYW5kb21BbmltYXRpb25TdGF0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKFJhbmRvbUFuaW1hdGlvblN0YXRlX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpOyB9IHJldHVybiBSYW5kb21BbmltYXRpb25TdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBSYW5kb21BbmltYXRpb25TdGF0ZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBSYW5kb21BbmltYXRpb25TdGF0ZV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxcblxcbmZ1bmN0aW9uIFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKG8pIHsgUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2Yobyk7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG5cXG5cXG5cXG4vKipcXHJcXG4gKiBDbGFzcyBmb3IgcGxheWluZyByYW5kb20gYW5pbWF0aW9ucyBhdCByYW5kb20gaW50ZXJ2YWxzIHdpdGhpbiB0aGlzIHN0YXRlLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RTdGF0ZVxcclxcbiAqIEBpbXBsZW1lbnRzIEFuaW1hdGlvblBsYXllckludGVyZmFjZVxcclxcbiAqIEBpbXBsZW1lbnRzIFN0YXRlQ29udGFpbmVySW50ZXJmYWNlXFxyXFxuICovXFxuXFxudmFyIFJhbmRvbUFuaW1hdGlvblN0YXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uUGxheWVySW50ZXIpIHtcXG4gIFJhbmRvbUFuaW1hdGlvblN0YXRlX2luaGVyaXRzKFJhbmRvbUFuaW1hdGlvblN0YXRlLCBfQW5pbWF0aW9uUGxheWVySW50ZXIpO1xcblxcbiAgdmFyIF9zdXBlciA9IFJhbmRvbUFuaW1hdGlvblN0YXRlX2NyZWF0ZVN1cGVyKFJhbmRvbUFuaW1hdGlvblN0YXRlKTtcXG5cXG4gIC8qKlxcclxcbiAgICogQGNvbnN0cnVjdG9yXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIE9wdGlvbnMgZm9yIHRoZSBjb250YWluZXIgc3RhdGUuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucGxheUludGVydmFsPTNdIC0gVGhlIGJhc2UgYW5pbWF0aW9uIHBsYXliYWNrIGludGVydmFsLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48QWJzdHJhY3RTdGF0ZT59IFtzdWJTdGF0ZXM9W11dIC0gc3RhdGVzIHRvIGJlIHJhbmRvbWx5IHBpY2tlZCB0byBwbGF5XFxyXFxuICAgKi9cXG4gIGZ1bmN0aW9uIFJhbmRvbUFuaW1hdGlvblN0YXRlKCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcXG4gICAgdmFyIHN1YlN0YXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XFxuXFxuICAgIFJhbmRvbUFuaW1hdGlvblN0YXRlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhbmRvbUFuaW1hdGlvblN0YXRlKTtcXG5cXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcXG4gICAgX3RoaXMuX3BsYXlJbnRlcnZhbCA9IG9wdGlvbnMucGxheUludGVydmFsID8gb3B0aW9ucy5wbGF5SW50ZXJ2YWwgOiAzO1xcbiAgICBzdWJTdGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RhdGUpIHtcXG4gICAgICBfdGhpcy5hZGRTdGF0ZShzdGF0ZSk7XFxuICAgIH0pO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgYW5kIHNldHMgdGhlIGJhc2UgYW5pbWF0aW9uIHBsYXkgaW50ZXJ2YWxcXHJcXG4gICAqXFxyXFxuICAgKiBAdHlwZSB7ZmxvYXR9XFxyXFxuICAgKi9cXG5cXG5cXG4gIFJhbmRvbUFuaW1hdGlvblN0YXRlX2NyZWF0ZUNsYXNzKFJhbmRvbUFuaW1hdGlvblN0YXRlLCBbe1xcbiAgICBrZXk6IFwicGxheUludGVydmFsXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wbGF5SW50ZXJ2YWw7XFxuICAgIH0sXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHBsYXlJbnRlcnZhbCkge1xcbiAgICAgIHRoaXMuX3BsYXlJbnRlcnZhbCA9IHBsYXlJbnRlcnZhbDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzZXQgdGhlIGludGVybmFsIHRpbWVyIGZvciBhbmltYXRpb24gcGxheSBpbnRlcnZhbFxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9yZXNldFRpbWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzZXRUaW1lcigpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICB2YXIgcGxheVRpbWVyID0gY29yZV9VdGlscy5nZXRSYW5kb21GbG9hdCh0aGlzLl9wbGF5SW50ZXJ2YWwgLyA0LCB0aGlzLl9wbGF5SW50ZXJ2YWwgKiAyKTtcXG5cXG4gICAgICB2YXIgb25GaW5pc2ggPSBmdW5jdGlvbiBvbkZpbmlzaCgpIHtcXG4gICAgICAgIF90aGlzMi5wbGF5UmFuZG9tQW5pbWF0aW9uKF90aGlzMi5fcGxheUNhbGxiYWNrcy5vbkVycm9yKTtcXG4gICAgICB9O1xcblxcbiAgICAgIHRoaXMuX3Byb21pc2VzLnRpbWVyID0gY29yZV9VdGlscy53YWl0KHBsYXlUaW1lciwge1xcbiAgICAgICAgb25GaW5pc2g6IG9uRmluaXNoXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZUludGVybmFsV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVJbnRlcm5hbFdlaWdodChmYWN0b3IpIHtcXG4gICAgICBSYW5kb21BbmltYXRpb25TdGF0ZV9nZXQoUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YoUmFuZG9tQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlKSwgXCJ1cGRhdGVJbnRlcm5hbFdlaWdodFwiLCB0aGlzKS5jYWxsKHRoaXMsIGZhY3Rvcik7XFxuXFxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSkge1xcbiAgICAgICAgdGhpcy5fY3VycmVudFN0YXRlLnVwZGF0ZUludGVybmFsV2VpZ2h0KHRoaXMuX2ludGVybmFsV2VpZ2h0KTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBpY2sgYSByYW5kb20gYW5pbWF0aW9uIGFuZCB1dGlsaXplIEFuaW1hdGlvblBsYXllckludGVyZmFjZSB0byBwbGF5IHRoYXQgYW5pbWF0aW9uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkVycm9yIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiB0aGUgc3RhdGUgZW5jb3VudGVyc1xcclxcbiAgICAgKiBhbiBlcnJvciBkdXJpbmcgcGxheWJhY2suXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGxheVJhbmRvbUFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheVJhbmRvbUFuaW1hdGlvbihvbkVycm9yKSB7XFxuICAgICAgdGhpcy5fcmVzZXRUaW1lcigpO1xcblxcbiAgICAgIHZhciBzdGF0ZXMgPSB0aGlzLmdldFN0YXRlTmFtZXMoKTtcXG5cXG4gICAgICBpZiAodGhpcy5fY3VycmVudFN0YXRlKSB7XFxuICAgICAgICBzdGF0ZXMuc3BsaWNlKHN0YXRlcy5pbmRleE9mKHRoaXMuX2N1cnJlbnRTdGF0ZS5uYW1lKSwgMSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciByYW5kb21TdGF0ZSA9IHN0YXRlc1tjb3JlX1V0aWxzLmdldFJhbmRvbUludCgwLCBzdGF0ZXMubGVuZ3RoKV07XFxuICAgICAgdGhpcy5wbGF5QW5pbWF0aW9uKHJhbmRvbVN0YXRlLCB0aGlzLl90cmFuc2l0aW9uVGltZSwgdGhpcy5fZWFzaW5nRm4sIHVuZGVmaW5lZCwgb25FcnJvciwgdW5kZWZpbmVkKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicGxheVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpIHtcXG4gICAgICB0aGlzLnBsYXlSYW5kb21BbmltYXRpb24ob25FcnJvcik7XFxuICAgICAgcmV0dXJuIFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldChSYW5kb21BbmltYXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihSYW5kb21BbmltYXRpb25TdGF0ZS5wcm90b3R5cGUpLCBcInBsYXlcIiwgdGhpcykuY2FsbCh0aGlzLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XFxuICAgICAgcmV0dXJuIFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldChSYW5kb21BbmltYXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihSYW5kb21BbmltYXRpb25TdGF0ZS5wcm90b3R5cGUpLCBcInBhdXNlXCIsIHRoaXMpLmNhbGwodGhpcykgJiYgdGhpcy5wYXVzZUFuaW1hdGlvbigpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJyZXN1bWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZShvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpIHtcXG4gICAgICBpZiAodGhpcy5fY3VycmVudFN0YXRlKSB7XFxuICAgICAgICB0aGlzLnJlc3VtZUFuaW1hdGlvbih0aGlzLl9jdXJyZW50U3RhdGUubmFtZSwgdGhpcy5fdHJhbnNpdGlvblRpbWUsIHRoaXMuX2Vhc2luZ0ZuLCB1bmRlZmluZWQsIG9uRXJyb3IsIHVuZGVmaW5lZCk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBSYW5kb21BbmltYXRpb25TdGF0ZV9nZXQoUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0UHJvdG90eXBlT2YoUmFuZG9tQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlKSwgXCJyZXN1bWVcIiwgdGhpcykuY2FsbCh0aGlzLCBvbkZpbmlzaCwgb25FcnJvciwgb25DYW5jZWwpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJjYW5jZWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcXG4gICAgICByZXR1cm4gUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0KFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKFJhbmRvbUFuaW1hdGlvblN0YXRlLnByb3RvdHlwZSksIFwiY2FuY2VsXCIsIHRoaXMpLmNhbGwodGhpcykgJiYgdGhpcy5jYW5jZWxBbmltYXRpb24oKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcXG4gICAgICByZXR1cm4gUmFuZG9tQW5pbWF0aW9uU3RhdGVfZ2V0KFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldFByb3RvdHlwZU9mKFJhbmRvbUFuaW1hdGlvblN0YXRlLnByb3RvdHlwZSksIFwic3RvcFwiLCB0aGlzKS5jYWxsKHRoaXMpICYmIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJkaXNjYXJkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjYXJkKCkge1xcbiAgICAgIFJhbmRvbUFuaW1hdGlvblN0YXRlX2dldChSYW5kb21BbmltYXRpb25TdGF0ZV9nZXRQcm90b3R5cGVPZihSYW5kb21BbmltYXRpb25TdGF0ZS5wcm90b3R5cGUpLCBcImRpc2NhcmRcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICB0aGlzLmRpc2NhcmRTdGF0ZXMoKTtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIFJhbmRvbUFuaW1hdGlvblN0YXRlO1xcbn0oYW5pbXBhY2tfQW5pbWF0aW9uUGxheWVySW50ZXJmYWNlLk1peGluKHN0YXRlX1N0YXRlQ29udGFpbmVySW50ZXJmYWNlLk1peGluKHN0YXRlX0Fic3RyYWN0U3RhdGUpKSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBzdGF0ZV9SYW5kb21BbmltYXRpb25TdGF0ZSA9IChSYW5kb21BbmltYXRpb25TdGF0ZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svQW5pbWF0aW9uRmVhdHVyZS5qc1xcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBBbmltYXRpb25GZWF0dXJlX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIEFuaW1hdGlvbkZlYXR1cmVfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IEFuaW1hdGlvbkZlYXR1cmVfb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBBbmltYXRpb25GZWF0dXJlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogQW5pbWF0aW9uRmVhdHVyZV9vd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIEFuaW1hdGlvbkZlYXR1cmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBBbmltYXRpb25GZWF0dXJlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBBbmltYXRpb25GZWF0dXJlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZV9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBBbmltYXRpb25GZWF0dXJlX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBBbmltYXRpb25GZWF0dXJlX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBBbmltYXRpb25GZWF0dXJlX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIEFuaW1hdGlvbkZlYXR1cmVfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBBbmltYXRpb25GZWF0dXJlX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIEFuaW1hdGlvbkZlYXR1cmVfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IEFuaW1hdGlvbkZlYXR1cmVfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIEFuaW1hdGlvbkZlYXR1cmVfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBBbmltYXRpb25GZWF0dXJlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IEFuaW1hdGlvbkZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IEFuaW1hdGlvbkZlYXR1cmVfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIEFuaW1hdGlvbkZlYXR1cmVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKEFuaW1hdGlvbkZlYXR1cmVfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIEFuaW1hdGlvbkZlYXR1cmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBBbmltYXRpb25GZWF0dXJlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZV9nZXRQcm90b3R5cGVPZihvKSB7IEFuaW1hdGlvbkZlYXR1cmVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gQW5pbWF0aW9uRmVhdHVyZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbi8qKlxcclxcbiAqIEVudW0gZm9yIGFuaW1hdGlvbiBzdGF0ZSBjbGFzc2VzLlxcclxcbiAqXFxyXFxuICogQHJlYWRvbmx5XFxyXFxuICogQGVudW0ge0NsYXNzfVxcclxcbiAqL1xcblxcbnZhciBBbmltYXRpb25UeXBlcyA9IHtcXG4gIHNpbmdsZTogc3RhdGVfU2luZ2xlU3RhdGUsXFxuICBmcmVlQmxlbmQ6IHN0YXRlX0ZyZWVCbGVuZFN0YXRlLFxcbiAgcXVldWU6IHN0YXRlX1F1ZXVlU3RhdGUsXFxuICByYW5kb21BbmltYXRpb246IHN0YXRlX1JhbmRvbUFuaW1hdGlvblN0YXRlLFxcbiAgYmxlbmQxZDogc3RhdGVfQmxlbmQxZFN0YXRlLFxcbiAgYmxlbmQyZDogc3RhdGVfQmxlbmQyZFN0YXRlXFxufTtcXG4vKipcXHJcXG4gKiBGZWF0dXJlIGZvciBtYW5hZ2luZyBhbmltYXRpb25zIG9uIGFuIG9iamVjdC5cXHJcXG4gKlxcclxcbiAqIEBleHRlbmRzIEFic3RyYWN0SG9zdEZlYXR1cmVcXHJcXG4gKiBAYWxpYXMgY29yZS9BbmltYXRpb25GZWF0dXJlXFxyXFxuICpcXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gRVZFTlRTIC0gQnVpbHQtaW4gbWVzc2FnZXMgdGhhdCB0aGUgZmVhdHVyZSBlbWl0cy4gV2hlbiB0aGVcXHJcXG4gKiBmZWF0dXJlIGlzIGFkZGVkIHRvIGEge0BsaW5rIGNvcmUvSG9zdE9iamVjdH0sIGV2ZW50IG5hbWVzIHdpbGwgYmUgcHJlZml4ZWQgYnkgdGhlXFxyXFxuICogbmFtZSBvZiB0aGUgZmVhdHVyZSBjbGFzcyArIFxcJy5cXCcuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuYWRkTGF5ZXI9b25BZGRMYXllckV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpcyBlbWl0dGVkIGFmdGVyXFxyXFxuICogW2FkZExheWVyXXtAbGluayBjb3JlL0FuaW1hdGlvbkZlYXR1cmUjYWRkTGF5ZXJ9IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC5cXHJcXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBuYW1lIG9mIHRoZSBsYXllciB0aGF0IHdhcyBhZGRlZCBhbmQgaXRzIGluZGV4IGluXFxyXFxuICogdGhlIGxheWVyIHN0YWNrIHdpdGggdGhlIHNpZ25hdHVyZSB7bmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyfSBpcyBzdXBwbGllZFxcclxcbiAqIGFzIGFuIGFyZ3VtZW50IHRvIGxpc3RlbmVyIGZ1bmN0aW9ucy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy5yZW1vdmVMYXllcj1vblJlbW92ZUxheWVyRXZlbnRdIC0gTWVzc2FnZSB0aGF0IGlzXFxyXFxuICogZW1pdHRlZCBhZnRlciBbcmVtb3ZlTGF5ZXJde0BsaW5rIGNvcmUvQW5pbWF0aW9uRmVhdHVyZSNyZW1vdmVMYXllcn0gaGFzIGJlZW5cXHJcXG4gKiBzdWNjZXNzZnVsbHkgZXhlY3V0ZWQuIEFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIG5hbWUgb2YgdGhlIGxheWVyIHRoYXQgd2FzXFxyXFxuICogcmVtb3ZlZCBhbmQgaXRzIGluZGV4IGluIHRoZSBsYXllciBzdGFjayB3aXRoIHRoZSBzaWduYXR1cmUge25hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcn1cXHJcXG4gKiBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMucmVuYW1lTGF5ZXI9b25SZW5hbWVMYXllckV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpc1xcclxcbiAqIGVtaXR0ZWQgYWZ0ZXIgW3JlbmFtZUxheWVyXXtAbGluayBjb3JlL0FuaW1hdGlvbkZlYXR1cmUjcmVuYW1lTGF5ZXJ9IGhhcyBiZWVuXFxyXFxuICogc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkLiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBvcmlnaW5hbCBuYW1lIG9mIHRoZSBsYXllclxcclxcbiAqIHRoYXQgd2FzIHJlbmFtZWQgYW5kIGl0cyB1cGRhdGVkIG5hbWUgd2l0aCB0aGUgc2lnbmF0dXJlIHtvbGROYW1lOiBzdHJpbmcsIG5ld05hbWU6IHN0cmluZ31cXHJcXG4gKiBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuYWRkQW5pbWF0aW9uPW9uQWRkQW5pbWF0aW9uRXZlbnRdIC0gTWVzc2FnZSB0aGF0IGlzXFxyXFxuICogZW1pdHRlZCBhZnRlciBbYWRkQW5pbWF0aW9uXXtAbGluayBjb3JlL0FuaW1hdGlvbkZlYXR1cmUjYWRkQW5pbWF0aW9ufSBoYXMgYmVlblxcclxcbiAqIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC4gQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCB0aGVcXHJcXG4gKiBhbmltYXRpb24gd2FzIGFkZGVkIHRvIGFuZCB0aGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIGFkZGVkIHdpdGggdGhlXFxyXFxuICogc2lnbmF0dXJlIHtsYXllck5hbWU6IHN0cmluZywgYW5pbWF0aW9uTmFtZTogc3RyaW5nfSBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudFxcclxcbiAqIHRvIGxpc3RlbmVyIGZ1bmN0aW9ucy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy5yZW1vdmVBbmltYXRpb249b25SZW1vdmVkQW5pbWF0aW9uRXZlbnRdIC0gTWVzc2FnZVxcclxcbiAqIHRoYXQgaXMgZW1pdHRlZCBhZnRlciBbcmVtb3ZlQW5pbWF0aW9uXXtAbGluayBjb3JlL0FuaW1hdGlvbkZlYXR1cmUjcmVtb3ZlQW5pbWF0aW9ufVxcclxcbiAqIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC4gQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbmFtZSBvZiB0aGUgbGF5ZXJcXHJcXG4gKiB0aGF0IHRoZSBhbmltYXRpb24gd2FzIHJlbW92ZWQgZnJvbSBhbmQgdGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiB0aGF0IHdhcyByZW1vdmVkXFxyXFxuICogd2l0aCB0aGUgc2lnbmF0dXJlIHtsYXllck5hbWU6IHN0cmluZywgYW5pbWF0aW9uTmFtZTogc3RyaW5nfSBpcyBzdXBwbGllZCBhc1xcclxcbiAqIGFuIGFyZ3VtZW50IHRvIGxpc3RlbmVyIGZ1bmN0aW9ucy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy5yZW5hbWVBbmltYXRpb249b25SZW5hbWVBbmltYXRpb25FdmVudF0gLSBNZXNzYWdlXFxyXFxuICogdGhhdCBpcyBlbWl0dGVkIGFmdGVyIFtyZW5hbWVBbmltYXRpb25de0BsaW5rIGNvcmUvQW5pbWF0aW9uRmVhdHVyZSNyZW5hbWVBbmltYXRpb259XFxyXFxuICogaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkLiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBuYW1lIG9mIHRoZSBsYXllclxcclxcbiAqIHRoYXQgY29udGFpbnMgdGhlIGFuaW1hdGlvbiB0aGF0IHdhcyByZW5hbWVkLCB0aGUgb3JpZ2luYWwgbmFtZSBvZiB0aGUgYW5pbWF0aW9uXFxyXFxuICogdGhhdCB3YXMgcmVuYW1lZCBhbmQgaXRzIHVwZGF0ZWQgbmFtZSB3aXRoIHRoZSBzaWduYXR1cmUge2xheWVyTmFtZTogc3RyaW5nLCBvbGROYW1lOiBzdHJpbmcsIG5ld05hbWU6IHN0cmluZ31cXHJcXG4gKiBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMucGxheT1vblBsYXlFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZCBhZnRlclxcclxcbiAqIGVhY2ggY2FsbCB0byBbcGxheV17QGxpbmsgY29yZS9BbmltYXRpb25GZWF0dXJlI3BsYXlBbmltYXRpb259LiBBbiBvYmplY3QgcmVwcmVzZW50aW5nXFxyXFxuICogdGhlIG5hbWUgb2YgdGhlIGxheWVyIGNvbnRhaW5zIHRoZSBhbmltYXRpb24gdGhhdCB3YXMgcGxheWVkIGFuZCB0aGUgbmFtZSBvZlxcclxcbiAqIHRoZSBhbmltYXRpb24gdGhhdCB3YXMgcGxheWVkIHdpdGggdGhlIHNpZ25hdHVyZSB7bGF5ZXJOYW1lOiBzdHJpbmcsIGFuaW1hdGlvbk5hbWU6IHN0cmluZ31cXHJcXG4gKiBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMucGF1c2U9b25QYXVzZUV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpcyBlbWl0dGVkIGFmdGVyXFxyXFxuICogZWFjaCBjYWxsIHRvIFtwYXVzZV17QGxpbmsgY29yZS9BbmltYXRpb25GZWF0dXJlI3BhdXNlQW5pbWF0aW9ufS4gQW4gb2JqZWN0IHJlcHJlc2VudGluZ1xcclxcbiAqIHRoZSBuYW1lIG9mIHRoZSBsYXllciBjb250YWlucyB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIHBhdXNlZCBhbmQgdGhlIG5hbWUgb2ZcXHJcXG4gKiB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIHBhdXNlZCB3aXRoIHRoZSBzaWduYXR1cmUge2xheWVyTmFtZTogc3RyaW5nLCBhbmltYXRpb25OYW1lOiBzdHJpbmd9XFxyXFxuICogaXMgc3VwcGxpZWQgYXMgYW4gYXJndW1lbnQgdG8gbGlzdGVuZXIgZnVuY3Rpb25zLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRTLnJlc3VtZT1vblJlc3VtZUV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpcyBlbWl0dGVkIGFmdGVyXFxyXFxuICogZWFjaCBjYWxsIHRvIFtyZXN1bWVde0BsaW5rIGNvcmUvQW5pbWF0aW9uRmVhdHVyZSNyZXN1bWVBbmltYXRpb259LiBBbiBvYmplY3QgcmVwcmVzZW50aW5nXFxyXFxuICogdGhlIG5hbWUgb2YgdGhlIGxheWVyIGNvbnRhaW5zIHRoZSBhbmltYXRpb24gdGhhdCB3YXMgcmVzdW1lZCBhbmQgdGhlIG5hbWUgb2ZcXHJcXG4gKiB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIHJlc3VtZWQgd2l0aCB0aGUgc2lnbmF0dXJlIHtsYXllck5hbWU6IHN0cmluZywgYW5pbWF0aW9uTmFtZTogc3RyaW5nfVxcclxcbiAqIGlzIHN1cHBsaWVkIGFzIGFuIGFyZ3VtZW50IHRvIGxpc3RlbmVyIGZ1bmN0aW9ucy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy5pbnRlcnJ1cHQ9b25JbnRlcnJ1cHRFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZFxcclxcbiAqIGlmIHRoZXJlIGlzIGEgY3VycmVudCBzcGVlY2ggaW4gcHJvZ3Jlc3MgYW5kIFtwbGF5XXtAbGluayBjb3JlL0FuaW1hdGlvbkZlYXR1cmUjcGxheUFuaW1hdGlvbn1cXHJcXG4gKiBvciBbcmVzdW1lXXtAbGluayBjb3JlL0FuaW1hdGlvbkZlYXR1cmUjcmVzdW1lQW5pbWF0aW9ufSBhcmUgZXhlY3V0ZWQgZm9yIGEgbmV3IHNwZWVjaC5cXHJcXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBuYW1lIG9mIHRoZSBsYXllciBjb250YWlucyB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzXFxyXFxuICogaW50ZXJydXB0ZWQgYW5kIHRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24gdGhhdCB3YXMgaW50ZXJydXB0ZWQgd2l0aCB0aGUgc2lnbmF0dXJlXFxyXFxuICoge2xheWVyTmFtZTogc3RyaW5nLCBhbmltYXRpb25OYW1lOiBzdHJpbmd9IGlzIHN1cHBsaWVkIGFzIGFuIGFyZ3VtZW50IHRvIGxpc3RlbmVyXFxyXFxuICogZnVuY3Rpb25zLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRTLnN0b3A9b25TdG9wRXZlbnRdIC0gTWVzc2FnZSB0aGF0IGlzIGVtaXR0ZWQgYWZ0ZXJcXHJcXG4gKiBlYWNoIGNhbGwgdG8gW3N0b3Bde0BsaW5rIGNvcmUvQW5pbWF0aW9uRmVhdHVyZSNzdG9wQW5pbWF0aW9ufSBhbmQgd2hlbiBhIHNwZWVjaCByZWFjaGVzXFxyXFxuICogdGhlIGVuZCBvZiBwbGF5YmFjay4gQW4gb2JqZWN0IHJlcHJlc2VudGluZ1xcclxcbiAqIHRoZSBuYW1lIG9mIHRoZSBsYXllciBjb250YWlucyB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIHN0b3BwZWQgYW5kIHRoZSBuYW1lIG9mXFxyXFxuICogdGhlIGFuaW1hdGlvbiB0aGF0IHdhcyBzdG9wcGVkIHdpdGggdGhlIHNpZ25hdHVyZSB7bGF5ZXJOYW1lOiBzdHJpbmcsIGFuaW1hdGlvbk5hbWU6IHN0cmluZ31cXHJcXG4gKiBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICovXFxuXFxudmFyIEFuaW1hdGlvbkZlYXR1cmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BYnN0cmFjdEhvc3RGZWF0dXJlKSB7XFxuICBBbmltYXRpb25GZWF0dXJlX2luaGVyaXRzKEFuaW1hdGlvbkZlYXR1cmUsIF9BYnN0cmFjdEhvc3RGZWF0dXJlKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBBbmltYXRpb25GZWF0dXJlX2NyZWF0ZVN1cGVyKEFuaW1hdGlvbkZlYXR1cmUpO1xcblxcbiAgLyoqXFxyXFxuICAgKiBAY29uc3RydWN0b3JcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge2NvcmUvSG9zdE9iamVjdH0gaG9zdCAtIEhvc3Qgb2JqZWN0IHRoYXQgb3ducyB0aGUgZmVhdHVyZS5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gQW5pbWF0aW9uRmVhdHVyZShob3N0KSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgQW5pbWF0aW9uRmVhdHVyZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbmltYXRpb25GZWF0dXJlKTtcXG5cXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0KTtcXG4gICAgX3RoaXMuX2xheWVycyA9IFtdO1xcbiAgICBfdGhpcy5fbGF5ZXJNYXAgPSB7fTtcXG4gICAgX3RoaXMuX3BhdXNlZCA9IGZhbHNlO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIE1ha2Ugc3VyZSBhIHN1cHBsaWVkIGxheWVyIGluZGV4IGlzIHdpdGhpbiB0aGUgcmFuZ2Ugb2YgbGF5ZXJzLlxcclxcbiAgICpcXHJcXG4gICAqIEBwcml2YXRlXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XFxyXFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtleGlzdGluZz10cnVlXSAtIFdoZXRoZXIgdGhlIGluZGV4IHJlcHJlc2VudHMgYW5kIGV4aXN0aW5nXFxyXFxuICAgKiBsYXllciBvciBhIG5ldyBsYXllciB0byBiZSBhZGRlZC5cXHJcXG4gICAqXFxyXFxuICAgKiBAcmV0dXJucyB7bnVtYmVyPX1cXHJcXG4gICAqL1xcblxcblxcbiAgQW5pbWF0aW9uRmVhdHVyZV9jcmVhdGVDbGFzcyhBbmltYXRpb25GZWF0dXJlLCBbe1xcbiAgICBrZXk6IFwiX3ZhbGlkYXRlSW5kZXhcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF92YWxpZGF0ZUluZGV4KGluZGV4KSB7XFxuICAgICAgdmFyIGV4aXN0aW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xcblxcbiAgICAgIC8vIEluZGV4IGlzIGludmFsaWQgaWYgdGhlcmUgYXJlIG5vIGxheWVycyBhbmQgd2VcXCdyZSBjaGVja2luZyBmb3IgYW4gZXhpc3RpbmcgbGF5ZXIgaW5kZXhcXG4gICAgICBpZiAodGhpcy5fbGF5ZXJzLmxlbmd0aCA9PT0gMCAmJiBleGlzdGluZykge1xcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGxhc3RJbmRleCA9IGV4aXN0aW5nID8gdGhpcy5fbGF5ZXJzLmxlbmd0aCAtIDEgOiB0aGlzLl9sYXllcnMubGVuZ3RoOyAvLyBDb3VudCBmcm9tIHRoZSBlbmQgb2YgdGhlIGFycmF5IGZvciBuZWdhdGl2ZSBpbmRpY2VzXFxuXFxuICAgICAgaWYgKGluZGV4IDwgMCkge1xcbiAgICAgICAgaW5kZXggPSBsYXN0SW5kZXggKyBpbmRleCArIDE7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBsYXN0SW5kZXgpIHtcXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBpbmRleDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlLWV2YWx1YXRlIGludGVybmFsIHdlaWdodCB2YWx1ZXMgb2YgbGF5ZXJzIHN0YXJ0aW5nIGZyb20gdGhlIHRvcCBvZiB0aGVcXHJcXG4gICAgICogc3RhY2suIE92ZXJyaWRlIGxheWVyc1xcJyB3ZWlnaHRzIGFmZmVjdCB0aGUgdmFsdWVzIG9mIGFsbCBsYXllcnMgbG93ZXIgaW4gdGhlXFxyXFxuICAgICAqIHN0YWNrLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl91cGRhdGVJbnRlcm5hbFdlaWdodHNcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVJbnRlcm5hbFdlaWdodHMoKSB7XFxuICAgICAgdmFyIG51bUxheWVycyA9IHRoaXMuX2xheWVycy5sZW5ndGg7XFxuICAgICAgdmFyIHdlaWdodE11bHRpcGxpZXIgPSAxOyAvLyBVcGRhdGUgaW50ZXJuYWwgd2VpZ2h0IHZhbHVlcyBvbiBsYXllcnMgaW4gcmV2ZXJzZSBvcmRlclxcblxcbiAgICAgIGZvciAodmFyIGkgPSBudW1MYXllcnMgLSAxOyBpID49IDA7IGktLSkge1xcbiAgICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJzW2ldO1xcbiAgICAgICAgbGF5ZXIudXBkYXRlSW50ZXJuYWxXZWlnaHQod2VpZ2h0TXVsdGlwbGllcik7IC8vIElmIHRoZSBsYXllciBpcyBvdmVycmlkZSwgdXBkYXRlIHRoZSBtdWx0aXBsaWVyIHdpdGggdGhlIHJlbWFpbmRlciBvZiB0aGUgZnVsbCB3ZWlnaHRcXG5cXG4gICAgICAgIGlmIChsYXllci5ibGVuZE1vZGUgPT09IExheWVyQmxlbmRNb2Rlcy5PdmVycmlkZSAmJiBsYXllci5jdXJyZW50U3RhdGUpIHtcXG4gICAgICAgICAgd2VpZ2h0TXVsdGlwbGllciAqPSAxIC0gbGF5ZXIuY3VycmVudFN0YXRlLmludGVybmFsV2VpZ2h0O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgU2luZ2xlU3RhdGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBTaW5nbGVTdGF0ZSBjb25zdHJ1Y3Rvci5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLm5hbWUgLSBOYW1lIGZvciB0aGUgYW5pbWF0aW9uIHN0YXRlLiBOYW1lcyBtdXN0IGJlXFxyXFxuICAgICAqIHVuaXF1ZSBmb3IgdGhlIGxheWVyIHRoZSBzdGF0ZSBpcyBhcHBsaWVkIHRvLlxcclxcbiAgICAgKiBAcGFyYW0ge3dlaWdodH0gW29wdGlvbnMud2VpZ2h0PTBdIC0gVGhlIDAtMSBhbW91bnQgb2YgaW5mbHVlbmNlIHRoZSBzdGF0ZSB3aWxsIGhhdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7dGltZVNjYWxlfSBbb3B0aW9ucy50aW1lU2NhbGU9MV0gLSBGYWN0b3IgdG8gc2NhbGUgdGhlIHBsYXliYWNrIHNwZWVkIG9mIHRoZVxcclxcbiAgICAgKiBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sb29wQ291bnQ9SW5maW5pdHldIC0gTnVtYmVyIG9mIHRpbWVzIHRoZSBhbmltYXRpb24gc2hvdWxkXFxyXFxuICAgICAqIHJlcGVhdCBiZWZvcmUgZmluaXNoaW5nLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmxlbmRNb2RlPUxheWVyQmxlbmRNb2Rlc1tEZWZhdWx0TGF5ZXJCbGVuZE1vZGVdXSAtIFR5cGUgb2ZcXHJcXG4gICAgICogYmxlbmRpbmcgdGhlIGFuaW1hdGlvbiBzaG91bGQgdXNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Y29yZS9TaW5nbGVTdGF0ZX1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfY3JlYXRlU2luZ2xlU3RhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVTaW5nbGVTdGF0ZShvcHRpb25zKSB7XFxuICAgICAgcmV0dXJuIG5ldyBzdGF0ZV9TaW5nbGVTdGF0ZShvcHRpb25zKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgRnJlZUJsZW5kU3RhdGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBGcmVlQmxlbmRTdGF0ZSBjb25zdHJ1Y3Rvci5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLm5hbWUgLSBOYW1lIGZvciB0aGUgYW5pbWF0aW9uIHN0YXRlLiBOYW1lcyBtdXN0IGJlXFxyXFxuICAgICAqIHVuaXF1ZSBmb3IgdGhlIGxheWVyIHRoZSBzdGF0ZSBpcyBhcHBsaWVkIHRvLlxcclxcbiAgICAgKiBAcGFyYW0ge3dlaWdodH0gW29wdGlvbnMud2VpZ2h0PTBdIC0gVGhlIDAtMSBhbW91bnQgb2YgaW5mbHVlbmNlIHRoZSBzdGF0ZSB3aWxsIGhhdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7dGltZVNjYWxlfSBbb3B0aW9ucy50aW1lU2NhbGU9MV0gLSBGYWN0b3IgdG8gc2NhbGUgdGhlIHBsYXliYWNrIHNwZWVkIG9mIHRoZVxcclxcbiAgICAgKiBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sb29wQ291bnQ9SW5maW5pdHldIC0gTnVtYmVyIG9mIHRpbWVzIHRoZSBhbmltYXRpb24gc2hvdWxkXFxyXFxuICAgICAqIHJlcGVhdCBiZWZvcmUgZmluaXNoaW5nLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmxlbmRNb2RlPUxheWVyQmxlbmRNb2Rlc1tEZWZhdWx0TGF5ZXJCbGVuZE1vZGVdXSAtIFR5cGUgb2ZcXHJcXG4gICAgICogYmxlbmRpbmcgdGhlIGFuaW1hdGlvbiBzaG91bGQgdXNlLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBbb3B0aW9ucy5ibGVuZFN0YXRlT3B0aW9uc10gLSBBcnJheSBvZiBvcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoZVxcclxcbiAgICAgKiBibGVuZCBzdGF0ZXMgZm9yIHRoaXMgY29udGFpbmVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RnJlZUJsZW5kU3RhdGV9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NyZWF0ZUZyZWVCbGVuZFN0YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlRnJlZUJsZW5kU3RhdGUob3B0aW9ucykge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIHZhciBfb3B0aW9ucyRibGVuZFN0YXRlT3AgPSBvcHRpb25zLmJsZW5kU3RhdGVPcHRpb25zLFxcbiAgICAgICAgICBibGVuZFN0YXRlT3B0aW9ucyA9IF9vcHRpb25zJGJsZW5kU3RhdGVPcCA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRibGVuZFN0YXRlT3A7XFxuICAgICAgdmFyIGJsZW5kU3RhdGVzID0gW107XFxuICAgICAgYmxlbmRTdGF0ZU9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYmxlbmRPcHRpb25zKSB7XFxuICAgICAgICBibGVuZFN0YXRlcy5wdXNoKF90aGlzMi5fY3JlYXRlU2luZ2xlU3RhdGUoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoe30sIGJsZW5kT3B0aW9ucyksIHt9LCB7XFxuICAgICAgICAgIGJsZW5kTW9kZTogb3B0aW9ucy5ibGVuZE1vZGVcXG4gICAgICAgIH0pKSk7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIG5ldyBzdGF0ZV9GcmVlQmxlbmRTdGF0ZShvcHRpb25zLCBibGVuZFN0YXRlcyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIFF1ZXVlU3RhdGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBRdWV1ZVN0YXRlIGNvbnN0cnVjdG9yLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMubmFtZSAtIE5hbWUgZm9yIHRoZSBhbmltYXRpb24gc3RhdGUuIE5hbWVzIG11c3QgYmVcXHJcXG4gICAgICogdW5pcXVlIGZvciB0aGUgbGF5ZXIgdGhlIHN0YXRlIGlzIGFwcGxpZWQgdG8uXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53ZWlnaHQ9MF0gLSBUaGUgMC0xIGFtb3VudCBvZiBpbmZsdWVuY2UgdGhlIHN0YXRlIHdpbGwgaGF2ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRpb25zLnRyYW5zaXRpb25UaW1lIC0gVGhlIGFtb3VudCBvZiB0aW1lIGl0IHRha2VzIHRvIHRyYW5zaXRpb25cXHJcXG4gICAgICogYmV0d2VlbiBxdWV1ZWQgc3RhdGVzLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmxlbmRNb2RlPUxheWVyQmxlbmRNb2Rlc1tEZWZhdWx0TGF5ZXJCbGVuZE1vZGVdXSAtIFR5cGUgb2ZcXHJcXG4gICAgICogYmxlbmRpbmcgdGhlIGFuaW1hdGlvbiBzaG91bGQgdXNlLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBbb3B0aW9ucy5xdWV1ZU9wdGlvbnNdIC0gQXJyYXkgb2Ygb3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGVcXHJcXG4gICAgICogcXVldWUgc3RhdGVzIGZvciB0aGlzIGNvbnRhaW5lci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge1F1ZXVlU3RhdGV9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NyZWF0ZVF1ZXVlU3RhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVRdWV1ZVN0YXRlKG9wdGlvbnMpIHtcXG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcXG5cXG4gICAgICB2YXIgX29wdGlvbnMkcXVldWVPcHRpb25zID0gb3B0aW9ucy5xdWV1ZU9wdGlvbnMsXFxuICAgICAgICAgIHF1ZXVlT3B0aW9ucyA9IF9vcHRpb25zJHF1ZXVlT3B0aW9ucyA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRxdWV1ZU9wdGlvbnM7XFxuICAgICAgdmFyIHF1ZXVlU3RhdGVzID0gcXVldWVPcHRpb25zLm1hcChmdW5jdGlvbiAocXVldWVPcHRpb24pIHtcXG4gICAgICAgIHJldHVybiBfdGhpczMuX2NyZWF0ZVNpbmdsZVN0YXRlKEFuaW1hdGlvbkZlYXR1cmVfb2JqZWN0U3ByZWFkKEFuaW1hdGlvbkZlYXR1cmVfb2JqZWN0U3ByZWFkKHtcXG4gICAgICAgICAgdHJhbnNpdGlvblRpbWU6IG9wdGlvbnMudHJhbnNpdGlvblRpbWVcXG4gICAgICAgIH0sIHF1ZXVlT3B0aW9uKSwge30sIHtcXG4gICAgICAgICAgYmxlbmRNb2RlOiBvcHRpb25zLmJsZW5kTW9kZVxcbiAgICAgICAgfSkpO1xcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBuZXcgc3RhdGVfUXVldWVTdGF0ZShvcHRpb25zLCBxdWV1ZVN0YXRlcyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIEJsZW5kMWRTdGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIEJsZW5kMWRTdGF0ZSBjb25zdHJ1Y3Rvci5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLm5hbWUgLSBOYW1lIGZvciB0aGUgYW5pbWF0aW9uIHN0YXRlLiBOYW1lcyBtdXN0IGJlXFxyXFxuICAgICAqIHVuaXF1ZSBmb3IgdGhlIGxheWVyIHRoZSBzdGF0ZSBpcyBhcHBsaWVkIHRvLlxcclxcbiAgICAgKiBAcGFyYW0ge3dlaWdodH0gW29wdGlvbnMud2VpZ2h0PTBdIC0gVGhlIDAtMSBhbW91bnQgb2YgaW5mbHVlbmNlIHRoZSBzdGF0ZSB3aWxsIGhhdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7dGltZVNjYWxlfSBbb3B0aW9ucy50aW1lU2NhbGU9MV0gLSBGYWN0b3IgdG8gc2NhbGUgdGhlIHBsYXliYWNrIHNwZWVkIG9mIHRoZVxcclxcbiAgICAgKiBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sb29wQ291bnQ9SW5maW5pdHldIC0gTnVtYmVyIG9mIHRpbWVzIHRoZSBhbmltYXRpb24gc2hvdWxkXFxyXFxuICAgICAqIHJlcGVhdCBiZWZvcmUgZmluaXNoaW5nLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYmxlbmRNb2RlPUxheWVyQmxlbmRNb2Rlc1tEZWZhdWx0TGF5ZXJCbGVuZE1vZGVdXSAtIFR5cGUgb2ZcXHJcXG4gICAgICogYmxlbmRpbmcgdGhlIGFuaW1hdGlvbiBzaG91bGQgdXNlLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBbb3B0aW9ucy5ibGVuZFN0YXRlT3B0aW9uc10gLSBBcnJheSBvZiBvcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoZVxcclxcbiAgICAgKiBibGVuZCBzdGF0ZXMgZm9yIHRoaXMgY29udGFpbmVyLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBbb3B0aW9ucy5ibGVuZFRocmVzaG9sZHNdIC0gQXJyYXkgb2YgbnVtYmVycyB1c2VkIHRvIHNldCB0aGVcXHJcXG4gICAgICogdGhyZXNob2xkcyBmb3IgZWFjaCBibGVuZCBzdGF0ZSBpbiB0aGlzIGNvbnRhaW5lci5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48Ym9vbGVhbj59IFtvcHRpb25zLmJsZW5kTWF0Y2hQaGFzZXM9W11dIC0gT3B0aW9uYWwgYXJyYXkgb2YgYm9vbGVhbnMgdXNlZCB0b1xcclxcbiAgICAgKiBzZXQgd2hldGhlciBvciBub3QgZWFjaCBibGVuZCBzdGF0ZSBpbiB0aGlzIGNvbnRhaW5lciB3aWxsIG1hdGNoIHBoYXNlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0JsZW5kMWRTdGF0ZX1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfY3JlYXRlQmxlbmQxZFN0YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlQmxlbmQxZFN0YXRlKG9wdGlvbnMpIHtcXG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICB2YXIgX29wdGlvbnMkYmxlbmRTdGF0ZU9wMiA9IG9wdGlvbnMuYmxlbmRTdGF0ZU9wdGlvbnMsXFxuICAgICAgICAgIGJsZW5kU3RhdGVPcHRpb25zID0gX29wdGlvbnMkYmxlbmRTdGF0ZU9wMiA9PT0gdm9pZCAwID8gW10gOiBfb3B0aW9ucyRibGVuZFN0YXRlT3AyO1xcbiAgICAgIHZhciBfb3B0aW9ucyRibGVuZFRocmVzaG8gPSBvcHRpb25zLmJsZW5kVGhyZXNob2xkcyxcXG4gICAgICAgICAgYmxlbmRUaHJlc2hvbGRzID0gX29wdGlvbnMkYmxlbmRUaHJlc2hvID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGJsZW5kVGhyZXNobztcXG4gICAgICB2YXIgX29wdGlvbnMkYmxlbmRNYXRjaFBoID0gb3B0aW9ucy5ibGVuZE1hdGNoUGhhc2VzLFxcbiAgICAgICAgICBibGVuZE1hdGNoUGhhc2VzID0gX29wdGlvbnMkYmxlbmRNYXRjaFBoID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGJsZW5kTWF0Y2hQaDtcXG4gICAgICB2YXIgYmxlbmRTdGF0ZXMgPSBbXTtcXG4gICAgICBibGVuZFN0YXRlT3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChibGVuZE9wdGlvbnMpIHtcXG4gICAgICAgIGJsZW5kU3RhdGVzLnB1c2goX3RoaXM0Ll9jcmVhdGVTaW5nbGVTdGF0ZShBbmltYXRpb25GZWF0dXJlX29iamVjdFNwcmVhZChBbmltYXRpb25GZWF0dXJlX29iamVjdFNwcmVhZCh7fSwgYmxlbmRPcHRpb25zKSwge30sIHtcXG4gICAgICAgICAgYmxlbmRNb2RlOiBvcHRpb25zLmJsZW5kTW9kZVxcbiAgICAgICAgfSkpKTtcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gbmV3IHN0YXRlX0JsZW5kMWRTdGF0ZShvcHRpb25zLCBibGVuZFN0YXRlcywgYmxlbmRUaHJlc2hvbGRzLCBibGVuZE1hdGNoUGhhc2VzKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgQmxlbmQyZFN0YXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgQmxlbmQxZFN0YXRlIGNvbnN0cnVjdG9yLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMubmFtZSAtIE5hbWUgZm9yIHRoZSBhbmltYXRpb24gc3RhdGUuIE5hbWVzIG11c3QgYmVcXHJcXG4gICAgICogdW5pcXVlIGZvciB0aGUgbGF5ZXIgdGhlIHN0YXRlIGlzIGFwcGxpZWQgdG8uXFxyXFxuICAgICAqIEBwYXJhbSB7d2VpZ2h0fSBbb3B0aW9ucy53ZWlnaHQ9MF0gLSBUaGUgMC0xIGFtb3VudCBvZiBpbmZsdWVuY2UgdGhlIHN0YXRlIHdpbGwgaGF2ZS5cXHJcXG4gICAgICogQHBhcmFtIHt0aW1lU2NhbGV9IFtvcHRpb25zLnRpbWVTY2FsZT0xXSAtIEZhY3RvciB0byBzY2FsZSB0aGUgcGxheWJhY2sgc3BlZWQgb2YgdGhlXFxyXFxuICAgICAqIGFuaW1hdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxvb3BDb3VudD1JbmZpbml0eV0gLSBOdW1iZXIgb2YgdGltZXMgdGhlIGFuaW1hdGlvbiBzaG91bGRcXHJcXG4gICAgICogcmVwZWF0IGJlZm9yZSBmaW5pc2hpbmcuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ibGVuZE1vZGU9TGF5ZXJCbGVuZE1vZGVzW0RlZmF1bHRMYXllckJsZW5kTW9kZV1dIC0gVHlwZSBvZlxcclxcbiAgICAgKiBibGVuZGluZyB0aGUgYW5pbWF0aW9uIHNob3VsZCB1c2UuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IFtvcHRpb25zLmJsZW5kU3RhdGVPcHRpb25zXSAtIEFycmF5IG9mIG9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhlXFxyXFxuICAgICAqIGJsZW5kIHN0YXRlcyBmb3IgdGhpcyBjb250YWluZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEFycmF5LjxudW1iZXI+Pn0gW29wdGlvbnMuYmxlbmRUaHJlc2hvbGRzXSAtIEFycmF5IG9mIEFycmF5IG9mIG51bWJlcnMgdXNlZCB0byBzZXQgdGhlXFxyXFxuICAgICAqIHRocmVzaG9sZHMgZm9yIGVhY2ggYmxlbmQgc3RhdGUgaW4gdGhpcyBjb250YWluZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPGJvb2xlYW4+fSBbb3B0aW9ucy5ibGVuZE1hdGNoUGhhc2VzPVtdXSAtIE9wdGlvbmFsIGFycmF5IG9mIGJvb2xlYW5zIHVzZWQgdG9cXHJcXG4gICAgICogc2V0IHdoZXRoZXIgb3Igbm90IGVhY2ggYmxlbmQgc3RhdGUgaW4gdGhpcyBjb250YWluZXIgd2lsbCBtYXRjaCBwaGFzZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtCbGVuZDFkU3RhdGV9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NyZWF0ZUJsZW5kMmRTdGF0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZUJsZW5kMmRTdGF0ZShvcHRpb25zKSB7XFxuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XFxuXFxuICAgICAgdmFyIF9vcHRpb25zJGJsZW5kU3RhdGVPcDMgPSBvcHRpb25zLmJsZW5kU3RhdGVPcHRpb25zLFxcbiAgICAgICAgICBibGVuZFN0YXRlT3B0aW9ucyA9IF9vcHRpb25zJGJsZW5kU3RhdGVPcDMgPT09IHZvaWQgMCA/IFtdIDogX29wdGlvbnMkYmxlbmRTdGF0ZU9wMztcXG4gICAgICB2YXIgX29wdGlvbnMkYmxlbmRUaHJlc2hvMiA9IG9wdGlvbnMuYmxlbmRUaHJlc2hvbGRzLFxcbiAgICAgICAgICBibGVuZFRocmVzaG9sZHMgPSBfb3B0aW9ucyRibGVuZFRocmVzaG8yID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGJsZW5kVGhyZXNobzI7XFxuICAgICAgdmFyIF9vcHRpb25zJGJsZW5kTWF0Y2hQaDIgPSBvcHRpb25zLmJsZW5kTWF0Y2hQaGFzZXMsXFxuICAgICAgICAgIGJsZW5kTWF0Y2hQaGFzZXMgPSBfb3B0aW9ucyRibGVuZE1hdGNoUGgyID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGJsZW5kTWF0Y2hQaDI7XFxuICAgICAgdmFyIGJsZW5kU3RhdGVzID0gW107XFxuICAgICAgYmxlbmRTdGF0ZU9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYmxlbmRPcHRpb25zKSB7XFxuICAgICAgICBibGVuZFN0YXRlcy5wdXNoKF90aGlzNS5fY3JlYXRlU2luZ2xlU3RhdGUoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoe30sIGJsZW5kT3B0aW9ucyksIHt9LCB7XFxuICAgICAgICAgIGJsZW5kTW9kZTogb3B0aW9ucy5ibGVuZE1vZGVcXG4gICAgICAgIH0pKSk7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIG5ldyBzdGF0ZV9CbGVuZDJkU3RhdGUob3B0aW9ucywgYmxlbmRTdGF0ZXMsIGJsZW5kVGhyZXNob2xkcywgYmxlbmRNYXRjaFBoYXNlcyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiBhIFJhbmRvbUFuaW1hdGlvblN0YXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgUmFuZG9tQW5pbWF0aW9uU3RhdGUgY29uc3RydWN0b3IuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0aW9ucy5uYW1lIC0gTmFtZSBmb3IgdGhlIGFuaW1hdGlvbiBzdGF0ZS4gTmFtZXMgbXVzdCBiZVxcclxcbiAgICAgKiB1bmlxdWUgZm9yIHRoZSBsYXllciB0aGUgc3RhdGUgaXMgYXBwbGllZCB0by5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBsYXlJbnRlcnZhbD0zXSAtIFRoZSBiYXNlIGFuaW1hdGlvbiBwbGF5YmFjayBpbnRlcnZhbC5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gW29wdGlvbnMuc3ViU3RhdGVPcHRpb25zXSAtIEFycmF5IG9mIG9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhlXFxyXFxuICAgICAqIHN1YiBzdGF0ZXMgZm9yIHRoaXMgY29udGFpbmVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7UmFuZG9tQW5pbWF0aW9uU3RhdGV9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NyZWF0ZVJhbmRvbUFuaW1hdGlvblN0YXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlUmFuZG9tQW5pbWF0aW9uU3RhdGUob3B0aW9ucykge1xcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xcblxcbiAgICAgIHZhciBfb3B0aW9ucyRzdWJTdGF0ZU9wdGkgPSBvcHRpb25zLnN1YlN0YXRlT3B0aW9ucyxcXG4gICAgICAgICAgc3ViU3RhdGVPcHRpb25zID0gX29wdGlvbnMkc3ViU3RhdGVPcHRpID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJHN1YlN0YXRlT3B0aTtcXG4gICAgICB2YXIgc3ViU3RhdGVzID0gW107XFxuICAgICAgc3ViU3RhdGVPcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHN1YlN0YXRlT3B0aW9ucykge1xcbiAgICAgICAgc3ViU3RhdGVzLnB1c2goX3RoaXM2Ll9jcmVhdGVTaW5nbGVTdGF0ZShBbmltYXRpb25GZWF0dXJlX29iamVjdFNwcmVhZChBbmltYXRpb25GZWF0dXJlX29iamVjdFNwcmVhZCh7fSwgc3ViU3RhdGVPcHRpb25zKSwge30sIHtcXG4gICAgICAgICAgYmxlbmRNb2RlOiBvcHRpb25zLmJsZW5kTW9kZVxcbiAgICAgICAgfSkpKTtcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gbmV3IHN0YXRlX1JhbmRvbUFuaW1hdGlvblN0YXRlKG9wdGlvbnMsIHN1YlN0YXRlcyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIE1ha2Ugc3VyZSB0aGUgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBleGlzdHMgYW5kIHJldHVybiBhIHVuaXF1ZSB2ZXJzaW9uXFxyXFxuICAgICAqIG9mIHRoZSBhbmltYXRpb24gbmFtZSBzdXBwbGllZCBmb3IgdGhhdCBsYXllci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIGNoZWNrIGFnYWluc3QuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIHRvIHZhbGlkYXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBWYWxpZGF0ZWQgYW5pbWF0aW9uIG5hbWUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3ZhbGlkYXRlTmV3QW5pbWF0aW9uXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdmFsaWRhdGVOZXdBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBsYXllck5hbWUgaXMgdmFsaWRcXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtsYXllck5hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIGFuaW1hdGlvbiB0byBsYXllciBcIi5jb25jYXQobGF5ZXJOYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIGFuaW1hdGlvbk5hbWUgaXMgdW5pcXVlXFxuXFxuXFxuICAgICAgdmFyIG5hbWUgPSBjb3JlX1V0aWxzLmdldFVuaXF1ZU5hbWUoYW5pbWF0aW9uTmFtZSwgbGF5ZXIuZ2V0U3RhdGVOYW1lcygpKTtcXG5cXG4gICAgICBpZiAobmFtZSAhPT0gYW5pbWF0aW9uTmFtZSkge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiQW5pbWF0aW9uIG5hbWUgXCIuY29uY2F0KGFuaW1hdGlvbk5hbWUsIFwiIGlzIG5vdCB1bmlxdWUgZm9yIGxheWVyIFwiKS5jb25jYXQobGF5ZXIubmFtZSwgXCIuIEFuaW1hdGlvbiB3aWxsIGJlIHJlbmFtZWQgdG8gXCIpLmNvbmNhdChuYW1lLCBcIi5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbmFtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB3aGV0aGVyIG9yIG5vdCBhbGwgYW5pbWF0aW9ucyBhcmUgcGF1c2VkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGF1c2VkXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wYXVzZWQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW4gYXJyYXkgb2YgbmFtZXMgb2YgYW5pbWF0aW9uIGxheWVycy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtBcnJheS48c3RyaW5nPn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJsYXllcnNcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2xheWVycy5tYXAoZnVuY3Rpb24gKGxheWVyKSB7XFxuICAgICAgICByZXR1cm4gbGF5ZXIubmFtZTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ3JlYXRlIGFuZCBzdG9yZSBhIG5ldyBhbmltYXRpb24gbGF5ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT1cXCdOZXdMYXllclxcJ10gLSBOYW1lIGZvciB0aGUgbGF5ZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBPcHRpb25zIHRvIHBhc3MgdG8ge0BsaW5rIEFuaW1hdGlvbkxheWVyI2NvbnN0cnVjdG9yfVxcclxcbiAgICAgKiBAcGFyYW0ge2luZGV4PX0gaW5kZXggLSBJbmRleCB0byBpbnNlcnQgdGhlIG5ldyBsYXllciBhdC4gSWYgbm9uZSBpcyBwcm92aWRlZFxcclxcbiAgICAgKiBpdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIHN0YWNrLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBJbmRleCBvZiB0aGUgbmV3IGxheWVyLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImFkZExheWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMYXllcigpIHtcXG4gICAgICB2YXIgbmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXFwnTmV3TGF5ZXJcXCc7XFxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xcbiAgICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xcbiAgICAgIHZhciBudW1MYXllcnMgPSB0aGlzLl9sYXllcnMubGVuZ3RoO1xcbiAgICAgIHZhciBsYXllckluZGV4ID0gaW5kZXg7IC8vIE1ha2Ugc3VyZSB0aGUgZ2l2ZW4gaW5kZXggaXMgd2l0aGluIHRoZSByYW5nZSBvZiBsYXllcnNcXG5cXG4gICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA9PT0gLTEpIHtcXG4gICAgICAgIGxheWVySW5kZXggPSB0aGlzLl9sYXllcnMubGVuZ3RoO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5fdmFsaWRhdGVJbmRleChpbmRleCwgZmFsc2UpO1xcblxcbiAgICAgICAgaWYgKGxheWVySW5kZXggPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgICAvLyBJbnNlcnQgYXQgdGhlIGJlZ2lubmluZyBpZiB0aGUgdXNlciBwYXNzZWQgaW4gYSBuZWdhdGl2ZSBpbmRleFxcbiAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XFxuICAgICAgICAgICAgbGF5ZXJJbmRleCA9IDA7XFxuICAgICAgICAgIH0gLy8gT3RoZXJ3aXNlIGFwcGVuZCB0byB0aGUgZW5kXFxuICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgIGxheWVySW5kZXggPSB0aGlzLl9sYXllcnMubGVuZ3RoO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGNvbnNvbGUud2FybihcIkluZGV4IFwiLmNvbmNhdChpbmRleCwgXCIgaXMgaW52YWxpZCBmb3IgaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBOZXcgbGF5ZXIgd2lsbCBiZSBhZGRlZCBhdCB0aGUgY2xvc2VzdCB2YWxpZCBpbmRleDogXCIpLmNvbmNhdChsYXllckluZGV4LCBcIi5cIikpO1xcbiAgICAgICAgfVxcbiAgICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBsYXllciBuYW1lIGlzIHVuaXF1ZVxcblxcblxcbiAgICAgIHZhciBsYXllck5hbWUgPSBjb3JlX1V0aWxzLmdldFVuaXF1ZU5hbWUobmFtZSwgT2JqZWN0LmtleXModGhpcy5fbGF5ZXJNYXApKTtcXG5cXG4gICAgICBpZiAobmFtZSAhPT0gbGF5ZXJOYW1lKSB7XFxuICAgICAgICBjb25zb2xlLndhcm4oXCJMYXllciBuYW1lIFwiLmNvbmNhdChuYW1lLCBcIiBpcyBub3QgdW5pcXVlLiBOZXcgbGF5ZXIgd2lsbCBiZSBhZGRlZCB3aXRoIHRoZSBuYW1lIFwiKS5jb25jYXQobGF5ZXJOYW1lLCBcIi5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgbGF5ZXIgPSBuZXcgYW5pbXBhY2tfQW5pbWF0aW9uTGF5ZXIoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpLCB7fSwge1xcbiAgICAgICAgbmFtZTogbGF5ZXJOYW1lXFxuICAgICAgfSkpO1xcbiAgICAgIHRoaXMuX2xheWVyTWFwW2xheWVyTmFtZV0gPSBsYXllcjtcXG5cXG4gICAgICBpZiAobGF5ZXJJbmRleCA9PT0gbnVtTGF5ZXJzKSB7XFxuICAgICAgICB0aGlzLl9sYXllcnMucHVzaChsYXllcik7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRoaXMuX2xheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMCwgbGF5ZXIpO1xcbiAgICAgIH0gLy8gTm90aWZ5IHRoYXQgYSBsYXllciBoYXMgYmVlbiBhZGRlZCB0byB0aGUgZmVhdHVyZVxcblxcblxcbiAgICAgIHZhciBldmVudERhdGEgPSB7XFxuICAgICAgICBuYW1lOiBsYXllck5hbWUsXFxuICAgICAgICBpbmRleDogbGF5ZXJJbmRleFxcbiAgICAgIH07XFxuICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLmFkZExheWVyLCBldmVudERhdGEpO1xcbiAgICAgIHJldHVybiBldmVudERhdGE7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlbW92ZSBhbiBhbmltYXRpb24gbGF5ZXIgZnJvbSB0aGUgc3RhY2suIEFuaW1hdGlvbnMgb24gdGhpcyBsYXllciB3aWxsIG5vXFxyXFxuICAgICAqIGxvbmdlciBiZSBldmFsdWF0ZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBmb3IgdGhlIGxheWVyIHRvIHJlbW92ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHJlbW92YWwgd2FzIHN1Y2Nlc3NmdWwuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVtb3ZlTGF5ZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUxheWVyKG5hbWUpIHtcXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtuYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiRGlkIG5vdCByZW1vdmUgbGF5ZXIgXCIuY29uY2F0KG5hbWUsIFwiIGZyb20gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBObyBsYXllciBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpKTtcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICB9XFxuXFxuICAgICAgbGF5ZXIuZGlzY2FyZCgpO1xcblxcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuX2xheWVycy5pbmRleE9mKGxheWVyKTtcXG5cXG4gICAgICB0aGlzLl9sYXllcnMuc3BsaWNlKGluZGV4LCAxKTtcXG5cXG4gICAgICBkZWxldGUgdGhpcy5fbGF5ZXJNYXBbbmFtZV07IC8vIE5vdGlmeSB0aGF0IGEgbGF5ZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBmZWF0dXJlXFxuXFxuICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLnJlbW92ZUxheWVyLCB7XFxuICAgICAgICBuYW1lOiBuYW1lLFxcbiAgICAgICAgaW5kZXg6IGluZGV4XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlLW9yZGVyIHRoZSBsYXllciBzdGFjayBzbyB0aGF0IHRoZSBsYXllciB3aXRoIHRoZSBnaXZlbiBuYW1lIGlzIHBvc2l0aW9uZWRcXHJcXG4gICAgICogYXQgdGhlIGdpdmVuIGluZGV4LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIG1vdmUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIE5ldyBpbmRleCB0byBwb3NpdGlvbiB0aGUgbGF5ZXIgYXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBuZXcgaW5kZXggb2YgdGhlIGxheWVyXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwibW92ZUxheWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3ZlTGF5ZXIobmFtZSwgaW5kZXgpIHtcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIG5hbWUgaXMgdmFsaWRcXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtuYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG1vdmUgbGF5ZXIgXCIuY29uY2F0KG5hbWUsIFwiIGZyb20gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBObyBsYXllciBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpKTtcXG4gICAgICB9IC8vIE1ha2Ugc3VyZSB0aGUgaW5kZXggZmFsbHMgaW4gdGhlIHJhbmdlIG9mIGV4aXN0aW5nIGxheWVyc1xcblxcblxcbiAgICAgIHZhciBsYXllckluZGV4ID0gdGhpcy5fdmFsaWRhdGVJbmRleChpbmRleCwgdHJ1ZSk7XFxuXFxuICAgICAgdmFyIGxhc3RJbmRleCA9IHRoaXMuX2xheWVycy5sZW5ndGggLSAxO1xcblxcbiAgICAgIGlmIChsYXllckluZGV4ID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBtb3ZlIGxheWVyIFwiLmNvbmNhdChuYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIiB0byBpbmRleCBcIikuY29uY2F0KGluZGV4LCBcIi4gSW5kZXggbXVzdCBiZSBpbiB0aGUgMCAtIFwiKS5jb25jYXQobGFzdEluZGV4LCBcIiByYW5nZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5fbGF5ZXJzLmluZGV4T2YobGF5ZXIpO1xcblxcbiAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IGxheWVySW5kZXgpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9IC8vIFJlbW92ZSBmcm9tIHRoZSBjdXJyZW50IHBvc2l0aW9uXFxuXFxuXFxuICAgICAgdGhpcy5fbGF5ZXJzLnNwbGljZShjdXJyZW50SW5kZXgsIDEpOyAvLyBJbnNlcnQgYXQgdGhlIG5ldyBwb3NpdGlvblxcblxcblxcbiAgICAgIGlmIChsYXllckluZGV4ID09PSBsYXN0SW5kZXgpIHtcXG4gICAgICAgIHRoaXMuX2xheWVycy5wdXNoKGxheWVyKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5fbGF5ZXJzLnNwbGljZShsYXllckluZGV4LCAwLCBsYXllcik7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBsYXllckluZGV4O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGUgdGhlIG5hbWUgb2YgYSBsYXllci4gTmFtZXMgbXVzdCBiZSB1bmlxdWUsIGlmIHRoZSBuZXcgbmFtZSBpcyBub3RcXHJcXG4gICAgICogdW5pcXVlIGl0IHdpbGwgaGF2ZSB0cmFpbGluZyBudW1iZXJzIGFwcGVuZGVkIHVudGlsIGl0IGlzIHVuaXF1ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnROYW1lIC0gQ3VycmVudCBuYW1lIG9mIHRoZSBsYXllci5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld05hbWUgLSBOZXcgbmFtZSB0byBzZXQgb24gdGhlIGxheWVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbmV3IG5hbWUgb2YgdGhlIGxheWVyXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVuYW1lTGF5ZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmFtZUxheWVyKGN1cnJlbnROYW1lLCBuZXdOYW1lKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbY3VycmVudE5hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVuYW1lIGxheWVyIFwiLmNvbmNhdChjdXJyZW50TmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBsYXllciBuYW1lIGlzIHVuaXF1ZVxcblxcblxcbiAgICAgIHZhciBuYW1lID0gY29yZV9VdGlscy5nZXRVbmlxdWVOYW1lKG5ld05hbWUsIE9iamVjdC5rZXlzKHRoaXMuX2xheWVyTWFwKSk7XFxuXFxuICAgICAgaWYgKG5hbWUgIT09IG5ld05hbWUpIHtcXG4gICAgICAgIGNvbnNvbGUud2FybihcIkxheWVyIG5hbWUgXCIuY29uY2F0KG5ld05hbWUsIFwiIGlzIG5vdCB1bmlxdWUuIExheWVyIHdpbGwgYmUgcmVuYW1lZCB0byBcIikuY29uY2F0KG5hbWUsIFwiLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIGRlbGV0ZSB0aGlzLl9sYXllck1hcFtjdXJyZW50TmFtZV07XFxuICAgICAgdGhpcy5fbGF5ZXJNYXBbbmFtZV0gPSBsYXllcjtcXG4gICAgICBsYXllci5uYW1lID0gbmFtZTsgLy8gTm90aWZ5IHRoYXQgYSBsYXllciBoYXMgYmVlbiByZW5hbWVkIG9uIHRoZSBmZWF0dXJlXFxuXFxuICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLnJlbmFtZUxheWVyLCB7XFxuICAgICAgICBvbGROYW1lOiBjdXJyZW50TmFtZSxcXG4gICAgICAgIG5ld05hbWU6IG5hbWVcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gbmFtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIHRoZSB3ZWlnaHQgb2YgYW4gYW5pbWF0aW9uIGxheWVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIHJldHVybiB3ZWlnaHQgZnJvbS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRMYXllcldlaWdodFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGF5ZXJXZWlnaHQobmFtZSkge1xcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbmFtZSBpcyB2YWxpZFxcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyTWFwW25hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IHdlaWdodCBvbiBsYXllciBcIi5jb25jYXQobmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIud2VpZ2h0O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGUgdGhlIHdlaWdodCBvZiBhbiBhbmltYXRpb24gbGF5ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGxheWVyIHRvIHVwZGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdlaWdodCAtIFRoZSB3ZWlnaHQgdmFsdWUgdG8gc2V0IG9uIHRoZSBsYXllci4gVGhpcyBudW1iZXJcXHJcXG4gICAgICogc2hvdWxkIGJlIGluIHRoZSAwLTEgcmFuZ2UuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gc2Vjb25kcyAtIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpdCBzaG91bGQgdGFrZSB0byByZWFjaCB0aGVcXHJcXG4gICAgICogbmV3IHdlaWdodC4gRGVmYXVsdCBpcyB6ZXJvIGFuZCB3aWxsIHNldCBpbW1lZGlhdGVseS5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gVGhlIGVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hpbGUgaW50ZXJwb2xhdGluZ1xcclxcbiAgICAgKiB0aGUgd2VpZ2h0LiBEZWZhdWx0IGlzIEVhc2luZy5MaW5lYXIuSW5PdXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gQSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uY2UgdGhlIGxheWVyXFwncyB3ZWlnaHQgcmVhY2hlc1xcclxcbiAgICAgKiB0aGUgdGFyZ2V0IHZhbHVlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNldExheWVyV2VpZ2h0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMYXllcldlaWdodChuYW1lLCB3ZWlnaHQsIHNlY29uZHMsIGVhc2luZ0ZuKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHZhciBlID0gXCJDYW5ub3Qgc2V0IHdlaWdodCBvbiBsYXllciBcIi5jb25jYXQobmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIik7XFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoZSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBsYXllci5zZXRXZWlnaHQod2VpZ2h0LCBzZWNvbmRzLCBlYXNpbmdGbik7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybnMgdGhlIG5hbWVzIG9mIGJsZW5kIHN0YXRlcyBpbiBhbiBhbmltYXRpb24gaW4gYSBsYXllci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIGNvbnRhaW5pbmcgdGhlIGFuaW1hdGlvbiBjb250YWluaW5nXFxyXFxuICAgICAqIHRoZSBibGVuZCBzdGF0ZSB0byB1cGRhdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIGNvbnRhaW5pbmcgdGhlIGJsZW5kIHN0YXRlXFxyXFxuICAgICAqIHRvIHVwZGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSAtIE5hbWVzIG9mIGJsZW5kIHN0YXRlcy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRBbmltYXRpb25CbGVuZE5hbWVzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmltYXRpb25CbGVuZE5hbWVzKGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSkge1xcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyTWFwW2xheWVyTmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZXQgYmxlbmQgbmFtZXMgb24gbGF5ZXIgXCIuY29uY2F0KGxheWVyTmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIuZ2V0QW5pbWF0aW9uQmxlbmROYW1lcyhhbmltYXRpb25OYW1lKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlIHRoZSB3ZWlnaHQgZm9yIGEgYmxlbmQgc3RhdGUgaW4gYW4gYW5pbWF0aW9uIGluIGEgbGF5ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciBjb250YWluaW5nIHRoZSBhbmltYXRpb24gY29udGFpbmluZ1xcclxcbiAgICAgKiB0aGUgYmxlbmQgc3RhdGUgdG8gdXBkYXRlLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW5pbWF0aW9uTmFtZSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbiBjb250YWluaW5nIHRoZSBibGVuZCBzdGF0ZVxcclxcbiAgICAgKiB0byB1cGRhdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBibGVuZE5hbWUgLSBOYW1lIG9mIHRoZSBibGVuZCBzdGF0ZSB0byB1cGRhdGUuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBXZWlnaHQgdmFsdWUgdG8gc2V0IG9uIHRoZSBhbmltYXRpb24uIFRoaXMgbnVtYmVyIHNob3VkbGQgYmVcXHJcXG4gICAgICogaW4gdGhlIDAtMSByYW5nZS5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzZWNvbmRzIC0gTnVtYmVyIG9mIHNlY29uZHMgaXQgc2hvdWxkIHRha2UgdG8gcmVhY2ggdGhlIG5ldyB3ZWlnaHQuXFxyXFxuICAgICAqIERlZmF1bHQgaXMgemVybyBhbmQgd2lsbCBzZXQgaW1tZWRpYXRlbHkuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hpbGUgaW50ZXJwb2xhdGluZyB0aGUgbmV3XFxyXFxuICAgICAqIHdlaWdodC4gRGVmYXVsdCBpcyBFYXNpbmcuTGluZWFyLkluT3V0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IC0gUHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSBvbmNlIHRoZSBhbmltYXRpb25cXCdzIHdlaWdodCByZWFjaGVzXFxyXFxuICAgICAqIHRoZSB0YXJnZXQgdmFsdWUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0QW5pbWF0aW9uQmxlbmRXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSwgYmxlbmROYW1lLCB3ZWlnaHQsIHNlY29uZHMsIGVhc2luZ0ZuKSB7XFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdmFyIGUgPSBcIkNhbm5vdCBzZXQgYmxlbmQgd2VpZ2h0IG9uIGxheWVyIFwiLmNvbmNhdChsYXllck5hbWUsIFwiIGZyb20gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBObyBsYXllciBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpO1xcbiAgICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQucmVqZWN0KGUpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIuc2V0QW5pbWF0aW9uQmxlbmRXZWlnaHQoYW5pbWF0aW9uTmFtZSwgYmxlbmROYW1lLCB3ZWlnaHQsIHNlY29uZHMsIGVhc2luZ0ZuKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJucyB0aGUgd2VpZ2h0IGZvciBhIGJsZW5kIHN0YXRlIGluIGFuIGFuaW1hdGlvbiBpbiBhIGxheWVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgY29udGFpbmluZyB0aGUgYW5pbWF0aW9uIGNvbnRhaW5pbmdcXHJcXG4gICAgICogdGhlIGJsZW5kIHN0YXRlIHRvIHVwZGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gY29udGFpbmluZyB0aGUgYmxlbmQgc3RhdGVcXHJcXG4gICAgICogdG8gdXBkYXRlLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmxlbmROYW1lIC0gTmFtZSBvZiB0aGUgYmxlbmQgc3RhdGUgdG8gdXBkYXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIFdlaWdodCBvZiB0aGUgYmxlbmQgc3RhdGUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0QW5pbWF0aW9uQmxlbmRXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbWF0aW9uTmFtZSwgYmxlbmROYW1lKSB7XFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGdldCBibGVuZCB3ZWlnaHQgb24gbGF5ZXIgXCIuY29uY2F0KGxheWVyTmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIuZ2V0QW5pbWF0aW9uQmxlbmRXZWlnaHQoYW5pbWF0aW9uTmFtZSwgYmxlbmROYW1lKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGF1c2Ugd2VpZ2h0IGludGVycG9sYXRpb24gYW5pbWF0aW9uIG9uIGEgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0byBwYXVzZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgdGhlcmUgd2FzIGFuIGV4aXN0aW5nIGludGVycG9sYXRpb24gdG8gcGF1c2UuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGF1c2VMYXllcldlaWdodFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2VMYXllcldlaWdodChuYW1lKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBwYXVzZSB3ZWlnaHQgaW50ZXJwb2xhdGlvbiBvbiBsYXllciBcIi5jb25jYXQobmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIucGF1c2VXZWlnaHQoKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzdW1lIHdlaWdodCBpbnRlcnBvbGF0aW9uIGFuaW1hdGlvbiBvbiBhIGxheWVyIHdpdGggdGhlIGdpdmVuIG5hbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdG8gcmVzdW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IC0gUmVzb2x2ZXMgb25jZSB0aGUgbGF5ZXJcXCdzIHdlaWdodCByZWFjaGVzIGl0cyB0YXJnZXQgdmFsdWUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVzdW1lTGF5ZXJXZWlnaHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUxheWVyV2VpZ2h0KG5hbWUpIHtcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIG5hbWUgaXMgdmFsaWRcXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtuYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdmFyIGUgPSBcIkNhbm5vdCByZXN1bWUgd2VpZ2h0IGludGVycG9sYXRpb24gb24gbGF5ZXIgXCIuY29uY2F0KG5hbWUsIFwiIGZyb20gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBObyBsYXllciBleGlzdHMgd2l0aCB0aGlzIG5hbWUuXCIpO1xcbiAgICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQucmVqZWN0KGUpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIucmVzdW1lV2VpZ2h0KCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBhdXNlIGN1cnJlbnQgYW5pbWF0aW9uIGFuZCB3ZWlnaHQgaW50ZXJwb2xhdGlvbiBhbmltYXRpb24gb24gYSBsYXllciB3aXRoXFxyXFxuICAgICAqIHRoZSBnaXZlbiBuYW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIHBhdXNlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBXaGV0aGVyIG9yIG5vdCB0aGVyZSB3YXMgYW4gZXhpc3RpbmcgaW50ZXJwb2xhdGlvbiBvclxcclxcbiAgICAgKiBjdXJyZW50IGFuaW1hdGlvbiB0byBwYXVzZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZUxheWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZUxheWVyKG5hbWUpIHtcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIG5hbWUgaXMgdmFsaWRcXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtuYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHBhdXNlIGxheWVyIFwiLmNvbmNhdChuYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBsYXllci5wYXVzZSgpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXN1bWUgY3VycmVudCBhbmltYXRpb24gYW5kIHdlaWdodCBpbnRlcnBvbGF0aW9uIGFuaW1hdGlvbiBvbiBhIGxheWVyIHdpdGhcXHJcXG4gICAgICogdGhlIGdpdmVuIG5hbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdG8gcmVzdW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IC0gUmVzb2x2ZXMgb25jZSB0aGUgbGF5ZXJcXCdzIHdlaWdodCByZWFjaGVzIGl0cyB0YXJnZXQgdmFsdWVcXHJcXG4gICAgICogYW5kIGl0XFwncyBjdXJyZW50IGFuaW1hdGlvbiBmaW5pc2hlcyBwbGF5aW5nLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZUxheWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVMYXllcihuYW1lKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHZhciBlID0gXCJDYW5ub3QgcmVzdW1lIGxheWVyIFwiLmNvbmNhdChuYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKTtcXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLnJlamVjdChlKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGxheWVyLnJlc3VtZSgpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbiBsYXllciB3aXRoIHRoZSBnaXZlbiBuYW1lIGlzIGN1cnJlbnRseVxcclxcbiAgICAgKiB0cmFuc2l0aW9uaW5nIGJldHdlZW4gYW5pbWF0aW9ucy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIGNoZWNrLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRUcmFuc2l0aW9uaW5nXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uaW5nKGxheWVyTmFtZSkge1xcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbGF5ZXJOYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2V0IHRyYW5zaXRpb25pbmcgb24gbGF5ZXIgXCIuY29uY2F0KGxheWVyTmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIuaXNUcmFuc2l0aW9uaW5nO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIGFsbCBzdGF0ZXMgdGhlIGxheWVyIHdpdGggdGhlIGdpdmVuIG5hbWUgY29udHJvbHMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0byBzZWFyY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJnZXRBbmltYXRpb25zXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmltYXRpb25zKGxheWVyTmFtZSkge1xcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbGF5ZXJOYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2V0IGFuaW1hdGlvbnMgb24gbGF5ZXIgXCIuY29uY2F0KGxheWVyTmFtZSwgXCIgZnJvbSBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIuZ2V0U3RhdGVOYW1lcygpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gdGhlIG5hbWUgb2YgdGhlIHN0YXRlIGN1cnJlbnRseSBhY3RpdmUgb24gdGhlIGxheWVyIHdpdGggdGhlIGdpdmVuIG5hbWUuXFxyXFxuICAgICAqIFJldHVybiBudWxsIGlmIHRoZXJlIGlzIG5vIGN1cnJlbnQgYW5pbWF0aW9uIGZvciB0aGUgbGF5ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMgeyhzdHJpbmd8bnVsbCl9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0Q3VycmVudEFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudEFuaW1hdGlvbihsYXllck5hbWUpIHtcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGxheWVyTmFtZSBpcyB2YWxpZFxcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyTWFwW2xheWVyTmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdldCBjdXJyZW50IGFuaW1hdGlvbiBvbiBsYXllciBcIi5jb25jYXQobGF5ZXJOYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBsYXllci5jdXJyZW50QW5pbWF0aW9uO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gd2hldGhlciBvciBub3QgYSBsYXllciB3aXRoIHRoZSBnaXZlbiBuYW1lIGlzIGN1cnJlbnRseSBwbGF5aW5nIGFuXFxyXFxuICAgICAqIGFuaW1hdGlvbiBhbmQgdGhhdCBhbmltYXRpb24gaXMgcGF1c2VkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImdldFBhdXNlZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGF1c2VkKGxheWVyTmFtZSkge1xcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbGF5ZXJOYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2V0IHBhdXNlZCBvbiBsYXllciBcIi5jb25jYXQobGF5ZXJOYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBsYXllci5jdXJyZW50U3RhdGUgJiYgbGF5ZXIuY3VycmVudFN0YXRlLnBhdXNlZDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIHRoZSB0eXBlIG5hbWUgb2YgdGhlIGdpdmVuIGFuaW1hdGlvbi4gQHNlZSBBbmltYXRpb25UeXBlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRoYXQgY29udGFpbnMgdGhlIGFuaW1hdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gdG8gY2hlY2suXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0QW5pbWF0aW9uVHlwZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5pbWF0aW9uVHlwZShsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUpIHtcXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIGxheWVyTmFtZSBpcyB2YWxpZFxcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyTWFwW2xheWVyTmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdldCBhbmltYXRpb24gdHlwZSBvbiBsYXllciBcIi5jb25jYXQobGF5ZXJOYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBzdGF0ZSA9IGxheWVyLmdldFN0YXRlKGFuaW1hdGlvbk5hbWUpO1xcblxcbiAgICAgIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZXQgYW5pbWF0aW9uIHR5cGUgZm9yIGFuaW1hdGlvbiBcIi5jb25jYXQoYW5pbWF0aW9uTmFtZSwgXCIgb24gbGF5ZXIgXCIpLmNvbmNhdChsYXllck5hbWUsIFwiIGZyb20gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBObyBhbmltYXRpb24gZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHN0YXRlLmNvbnN0cnVjdG9yO1xcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhBbmltYXRpb25UeXBlcykuZmluZChmdW5jdGlvbiAodHlwZU5hbWUpIHtcXG4gICAgICAgIHJldHVybiBBbmltYXRpb25UeXBlc1t0eXBlTmFtZV0gPT09IGNvbnN0cnVjdG9yO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBBZGQgYSBuZXcgYW5pbWF0aW9uIHRvIGFuIGFuaW1hdGlvbiBsYXllci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIGFkZCB0aGUgYW5pbWF0aW9uIHRvLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYW5pbWF0aW9uTmFtZSAtIE5hbWUgdG8gdXNlIHdoZW4gY2FsbGluZyB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgbmV3XFxyXFxuICAgICAqIFNpbmdsZVN0YXRlIGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uIHRoYXQgd2FzIGFkZGVkXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiYWRkQW5pbWF0aW9uXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgdmFyIGFuaW1hdGlvblR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IEFuaW1hdGlvblR5cGVzLnNpbmdsZTtcXG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XFxuICAgICAgb3B0aW9ucy5uYW1lID0gdGhpcy5fdmFsaWRhdGVOZXdBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKTsgLy8gTWFrZSBzdXJlIHRoZSBhbmltYXRpb24gdHlwZSBpcyB2YWxpZFxcblxcbiAgICAgIGlmICghT2JqZWN0LnZhbHVlcyhBbmltYXRpb25UeXBlcykuaW5jbHVkZXMoYW5pbWF0aW9uVHlwZSkpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhZGQgYW5pbWF0aW9uIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiB0byBsYXllciBcIikuY29uY2F0KGxheWVyTmFtZSwgXCIgb24gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBJbnZhbGlkIGFuaW1hdGlvbiB0eXBlLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyTWFwW2xheWVyTmFtZV07XFxuICAgICAgb3B0aW9ucy5ibGVuZE1vZGUgPSBsYXllci5ibGVuZE1vZGU7XFxuICAgICAgb3B0aW9ucy50cmFuc2l0aW9uVGltZSA9IGxheWVyLnRyYW5zaXRpb25UaW1lO1xcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXNbXCJfY3JlYXRlXCIuY29uY2F0KGFuaW1hdGlvblR5cGUubmFtZSldKG9wdGlvbnMpO1xcbiAgICAgIHZhciBuYW1lID0gbGF5ZXIuYWRkU3RhdGUoc3RhdGUpOyAvLyBOb3RpZnkgdGhhdCBhbiBhbmltYXRpb24gaGFzIGJlZW4gYWRkZWQgdG8gdGhlIGZlYXR1cmVcXG5cXG4gICAgICB0aGlzLmVtaXQodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVFMuYWRkQW5pbWF0aW9uLCB7XFxuICAgICAgICBsYXllck5hbWU6IGxheWVyTmFtZSxcXG4gICAgICAgIGFuaW1hdGlvbk5hbWU6IG5hbWVcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gbmFtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVtb3ZlIGFuIGFuaW1hdGlvbiBmcm9tIGFuIGFuaW1hdGlvbiBsYXllci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIHJlbW92ZSB0aGUgYW5pbWF0aW9uIGZyb20uXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIHRvIHJlbW92ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVtb3ZlQW5pbWF0aW9uXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBuYW1lIGlzIHZhbGlkXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlbW92ZSBhbmltYXRpb24gZnJvbSBsYXllciBcIi5jb25jYXQobGF5ZXJOYW1lLCBcIiBmcm9tIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciByZW1vdmVkID0gbGF5ZXIucmVtb3ZlU3RhdGUoYW5pbWF0aW9uTmFtZSk7IC8vIE5vdGlmeSB0aGF0IGFuIGFuaW1hdGlvbiBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIGZlYXR1cmVcXG5cXG4gICAgICBpZiAocmVtb3ZlZCA9PT0gdHJ1ZSkge1xcbiAgICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLnJlbW92ZUFuaW1hdGlvbiwge1xcbiAgICAgICAgICBsYXllck5hbWU6IGxheWVyTmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZVxcbiAgICAgICAgfSk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiByZW1vdmVkO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGUgdGhlIG5hbWUgb2YgYW4gYW5pbWF0aW9uLiBOYW1lcyBtdXN0IGJlIHVuaXF1ZSBvbiBlYWNoIGxheWVyLCBpZiB0aGUgbmV3XFxyXFxuICAgICAqIG5hbWUgaXMgbm90IHVuaXF1ZSBpdCB3aWxsIGhhdmUgdHJhaWxpbmcgbnVtYmVycyBhcHBlbmRlZCB1bnRpbCBpdCBpcyB1bmlxdWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IGNvbnRhaW5zIHRoZSBhbmltYXRpb24gdGhhdFxcclxcbiAgICAgKiB3aWxsIGJlIHJlbmFtZWQsXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50QW5pbWF0aW9uTmFtZSAtIEN1cnJlbnQgbmFtZSBvZiB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3QW5pbWF0aW9uTmFtZSAtIE5ldyBuYW1lIHRvIHNldCBvbiB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSBuZXcgbmFtZSBvZiB0aGUgYW5pbWF0aW9uXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVuYW1lQW5pbWF0aW9uXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5hbWVBbmltYXRpb24obGF5ZXJOYW1lLCBjdXJyZW50QW5pbWF0aW9uTmFtZSwgbmV3QW5pbWF0aW9uTmFtZSkge1xcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX2xheWVyTWFwW2xheWVyTmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZW5hbWUgYW5pbWF0aW9uIFwiLmNvbmNhdChjdXJyZW50QW5pbWF0aW9uTmFtZSwgXCIgb24gbGF5ZXIgXCIpLmNvbmNhdChsYXllck5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgbmFtZSA9IGxheWVyLnJlbmFtZVN0YXRlKGN1cnJlbnRBbmltYXRpb25OYW1lLCBuZXdBbmltYXRpb25OYW1lKTsgLy8gTm90aWZ5IHRoYXQgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHJlbmFtZWQgb24gdGhlIGZlYXR1cmVcXG5cXG4gICAgICB0aGlzLmVtaXQodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVFMucmVuYW1lQW5pbWF0aW9uLCB7XFxuICAgICAgICBsYXllck5hbWU6IGxheWVyTmFtZSxcXG4gICAgICAgIG9sZE5hbWU6IGN1cnJlbnRBbmltYXRpb25OYW1lLFxcbiAgICAgICAgbmV3TmFtZTogbmFtZVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBuYW1lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQYXVzZSB0aGUgY3VycmVudGx5IHBsYXlpbmcgYW5pbWF0aW9uIGFuZCBwbGF5IGEgbmV3IGFuaW1hdGlvbiBmcm9tIHRoZSBiZWdpbm5pbmcuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IGNvbnRhaW5zIHRoZSBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uIHN0YXRlIHRvIHBsYXkuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gc2Vjb25kcyAtIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBpdCBzaG91bGQgdGFrZSB0byB0cmFuc2l0aW9uXFxyXFxuICAgICAqIHRvIHRoZSBuZXcgYW5pbWF0aW9uLiBEZWZhdWx0IGlzIHplcm8gYW5kIHdpbGwgc2V0IGltbWVkaWF0ZWx5LlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZWFzaW5nRm4gLSBUaGUgZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSB3aGlsZSB0cmFuc2l0aW9uaW5nXFxyXFxuICAgICAqIGJldHdlZW4gYW5pbWF0aW9ucy4gRGVmYXVsdCBpcyBFYXNpbmcuTGluZWFyLkluT3V0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IC0gUmVzb2x2ZXMgb25jZSB0aGUgYW5pbWF0aW9uIHJlYWNoZXMgdGhlIGVuZCBvZiBpdHNcXHJcXG4gICAgICogdGltZWxpbmUuIExvb3BpbmcgYW5pbWF0aW9ucyBjYW4gb25seSByZXNvbHZlIGlmIHRoZXkgYXJlIGludGVycnVwdGVkIG9yXFxyXFxuICAgICAqIG1hbnVhbGx5IHN0b3BwZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGxheUFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheUFuaW1hdGlvbihsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUsIHNlY29uZHMsIGVhc2luZ0ZuKSB7XFxuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdmFyIGUgPSBcIkNhbm5vdCBwbGF5IGFuaW1hdGlvbiBcIi5jb25jYXQoYW5pbWF0aW9uTmFtZSwgXCIgb24gbGF5ZXIgXCIpLmNvbmNhdChsYXllck5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIik7XFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoZSk7XFxuICAgICAgfSAvLyBOb3RpZnkgdGhhdCBhIG5ldyBhbmltYXRpb24gaGFzIGJlZ3VuXFxuXFxuXFxuICAgICAgdGhpcy5lbWl0KHRoaXMuY29uc3RydWN0b3IuRVZFTlRTLnBsYXlBbmltYXRpb24sIHtcXG4gICAgICAgIGxheWVyTmFtZTogbGF5ZXJOYW1lLFxcbiAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBsYXllci5wbGF5QW5pbWF0aW9uKGFuaW1hdGlvbk5hbWUsIHNlY29uZHMsIGVhc2luZ0ZuLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAvLyBOb3RpZnkgdGhhdCBhbiBhbmltYXRpb24gaGFzIHN0b3BwZWRcXG4gICAgICAgIF90aGlzNy5lbWl0KF90aGlzNy5jb25zdHJ1Y3Rvci5FVkVOVFMuc3RvcEFuaW1hdGlvbiwge1xcbiAgICAgICAgICBsYXllck5hbWU6IGxheWVyTmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZVxcbiAgICAgICAgfSk7XFxuICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAvLyBOb3RpZnkgdGhhdCBhbiBhbmltYXRpb24gaGFzIGJlZW4gaW50ZXJydXB0ZWRcXG4gICAgICAgIF90aGlzNy5lbWl0KF90aGlzNy5jb25zdHJ1Y3Rvci5FVkVOVFMuaW50ZXJydXB0QW5pbWF0aW9uLCB7XFxuICAgICAgICAgIGxheWVyTmFtZTogbGF5ZXJOYW1lLFxcbiAgICAgICAgICBhbmltYXRpb25OYW1lOiBhbmltYXRpb25OYW1lXFxuICAgICAgICB9KTtcXG4gICAgICB9LCBmdW5jdGlvbiAoX3JlZikge1xcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXFxuICAgICAgICAgICAgY2FuQWR2YW5jZSA9IF9yZWYuY2FuQWR2YW5jZSxcXG4gICAgICAgICAgICBpc1F1ZXVlRW5kID0gX3JlZi5pc1F1ZXVlRW5kO1xcblxcbiAgICAgICAgaWYgKGxheWVyLmN1cnJlbnRBbmltYXRpb24gPT09IGFuaW1hdGlvbk5hbWUpIHtcXG4gICAgICAgICAgLy8gTm90aWZ5IHRoYXQgYSBuZXcgYW5pbWF0aW9uIGhhcyBiZWd1blxcbiAgICAgICAgICBfdGhpczcuZW1pdChfdGhpczcuY29uc3RydWN0b3IuRVZFTlRTLnBsYXlOZXh0QW5pbWF0aW9uLCB7XFxuICAgICAgICAgICAgbGF5ZXJOYW1lOiBsYXllck5hbWUsXFxuICAgICAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZSxcXG4gICAgICAgICAgICBuZXh0UXVldWVkQW5pbWF0aW9uOiBuYW1lLFxcbiAgICAgICAgICAgIGNhbkFkdmFuY2U6IGNhbkFkdmFuY2UsXFxuICAgICAgICAgICAgaXNRdWV1ZUVuZDogaXNRdWV1ZUVuZFxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGxheSB0aGUgbmV4dCBhbmltYXRpb24gaW4gdGhlIHF1ZXVlIG9mIGEgUXVldWVTdGF0ZSBhbmltYXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IGNvbnRhaW5zIHRoZSBxdWV1ZSBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYW5pbWF0aW9uTmFtZSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbiBxdWV1ZSBhbmltYXRpb24uIERlZmF1bHRzXFxyXFxuICAgICAqIHRvIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBmb3IgdGhlIGxheWVyLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IHNlY29uZHMgLSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgaXQgc2hvdWxkIHRha2UgdG8gdHJhbnNpdGlvblxcclxcbiAgICAgKiB0byB0aGUgcXVldWUgYW5pbWF0aW9uIGlmIGl0XFwncyBub3QgYWxyZWFkeSBjdXJyZW50bHkgcGxheWluZy4gRGVmYXVsdCBpcyB6ZXJvXFxyXFxuICAgICAqIGFuZCB3aWxsIHNldCBpbW1lZGlhdGVseS5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGVhc2luZ0ZuIC0gVGhlIGVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hpbGUgdHJhbnNpdGlvbmluZ1xcclxcbiAgICAgKiB0byB0aGUgcXVldWUgYW5pbWF0aW9uIGlmIGl0IGlzblxcJ3QgYWxyZWFkeSBwbGF5aW5nLiBEZWZhdWx0IGlzIEVhc2luZy5MaW5lYXIuSW5PdXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gLSBSZXNvbHZlcyBvbmNlIHRoZSBsYXN0IGFuaW1hdGlvbiBpbiB0aGUgcXVldWUgZmluaXNoZXNcXHJcXG4gICAgICogcGxheWluZy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwbGF5TmV4dEFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheU5leHRBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lLCB0cmFuc2l0aW9uVGltZSwgZWFzaW5nRm4pIHtcXG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcXG5cXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtsYXllck5hbWVdO1xcblxcbiAgICAgIGlmIChsYXllciA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB2YXIgZSA9IFwiQ2Fubm90IHBsYXkgbmV4dCBhbmltYXRpb24gb24gbGF5ZXIgXCIuY29uY2F0KGxheWVyTmFtZSwgXCIgZm9yIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKTtcXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLnJlamVjdChlKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKGFuaW1hdGlvbk5hbWUgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgYW5pbWF0aW9uTmFtZSA9IGxheWVyLmN1cnJlbnRBbmltYXRpb247XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBhbmltYXRpb24gPSBsYXllci5nZXRTdGF0ZShsYXllci5jdXJyZW50QW5pbWF0aW9uKTtcXG5cXG4gICAgICBpZiAoYW5pbWF0aW9uID09PSBudWxsKSB7XFxuICAgICAgICB2YXIgX2UgPSBcIkNhbm5vdCBwbGF5IG5leHQgYW5pbWF0aW9uIG9uIGxheWVyIFwiLmNvbmNhdChsYXllck5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGFuaW1hdGlvbiBleGlzdHMgd2l0aCBuYW1lIFwiKS5jb25jYXQoYW5pbWF0aW9uTmFtZSwgXCIuXCIpO1xcblxcbiAgICAgICAgcmV0dXJuIGNvcmVfRGVmZXJyZWQucmVqZWN0KF9lKTtcXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0QW5pbWF0aW9uVHlwZShsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUpICE9PSBcXCdxdWV1ZVxcJykge1xcbiAgICAgICAgdmFyIF9lMiA9IFwiQ2Fubm90IHBsYXkgbmV4dCBhbmltYXRpb24gb24gbGF5ZXIgXCIuY29uY2F0KGxheWVyTmFtZSwgXCIgZm9yIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gXCIpLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBpcyBub3QgYSBxdWV1ZSBzdGF0ZS5cIik7XFxuXFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoX2UyKTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIG9uTmV4dCA9IGZ1bmN0aW9uIG9uTmV4dChfcmVmMikge1xcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lLFxcbiAgICAgICAgICAgIGNhbkFkdmFuY2UgPSBfcmVmMi5jYW5BZHZhbmNlLFxcbiAgICAgICAgICAgIGlzUXVldWVFbmQgPSBfcmVmMi5pc1F1ZXVlRW5kO1xcblxcbiAgICAgICAgaWYgKGxheWVyLmN1cnJlbnRBbmltYXRpb24gPT09IGFuaW1hdGlvbk5hbWUpIHtcXG4gICAgICAgICAgLy8gTm90aWZ5IHRoYXQgYSBuZXcgYW5pbWF0aW9uIGhhcyBiZWd1blxcbiAgICAgICAgICBfdGhpczguZW1pdChfdGhpczguY29uc3RydWN0b3IuRVZFTlRTLnBsYXlOZXh0QW5pbWF0aW9uLCB7XFxuICAgICAgICAgICAgbGF5ZXJOYW1lOiBsYXllck5hbWUsXFxuICAgICAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZSxcXG4gICAgICAgICAgICBuZXh0UXVldWVkQW5pbWF0aW9uOiBuYW1lLFxcbiAgICAgICAgICAgIGNhbkFkdmFuY2U6IGNhbkFkdmFuY2UsXFxuICAgICAgICAgICAgaXNRdWV1ZUVuZDogaXNRdWV1ZUVuZFxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9OyAvLyBNYWtlIHRoZSBxdWV1ZSBhbmltYXRpb24gY3VycmVudCBpZiBpdCB3YXNuXFwndCBhbHJlYWR5XFxuXFxuXFxuICAgICAgaWYgKGxheWVyLmN1cnJlbnRBbmltYXRpb24gPT09IG51bGwpIHtcXG4gICAgICAgIGxheWVyLnJlc3VtZUFuaW1hdGlvbihhbmltYXRpb24ubmFtZSwgdHJhbnNpdGlvblRpbWUsIGVhc2luZ0ZuLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbk5leHQpO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gYW5pbWF0aW9uLm5leHQob25OZXh0LCB0cnVlKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGF1c2UgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIG9uIGEgbGF5ZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdG8gcGF1c2UuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCBhbiBhbmltYXRpb24gd2FzIHN1Y2Nlc3NmdWxseSBwYXVzZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGF1c2VBbmltYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlQW5pbWF0aW9uKG5hbWUpIHtcXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9sYXllck1hcFtuYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiRGlkIG5vdCBwYXVzZSBhbmltYXRpb24gb24gbGF5ZXIgXCIuY29uY2F0KG5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgcGF1c2VkID0gbGF5ZXIucGF1c2VBbmltYXRpb24oKTsgLy8gTm90aWZ5IHRoYXQgYW4gYW5pbWF0aW9uIHdhcyBwYXVzZWRcXG5cXG4gICAgICBpZiAocGF1c2VkKSB7XFxuICAgICAgICB2YXIgYW5pbWF0aW9uTmFtZSA9IGxheWVyLmN1cnJlbnRBbmltYXRpb247XFxuICAgICAgICB0aGlzLmVtaXQodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVFMucGF1c2VBbmltYXRpb24sIHtcXG4gICAgICAgICAgbGF5ZXJOYW1lOiBuYW1lLFxcbiAgICAgICAgICBhbmltYXRpb25OYW1lOiBhbmltYXRpb25OYW1lXFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHBhdXNlZDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGF1c2UgdGhlIGN1cnJlbnRseSBwbGF5aW5nIGFuaW1hdGlvbiBhbmQgcGxheSBhIG5ldyBhbmltYXRpb24gZnJvbSB3aGVyZSBpdFxcclxcbiAgICAgKiBsYXN0IGxlZnQgb2ZmLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBjb250YWlucyB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IGFuaW1hdGlvbk5hbWUgLSBOYW1lIG9mIHRoZSBhbmltYXRpb24gc3RhdGUgdG8gcmVzdW1lLiBEZWZhdWx0c1xcclxcbiAgICAgKiB0byB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBhbmltYXRpb24gZm9yIHRoZSBsYXllci5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBzZWNvbmRzIC0gVGhlIG51bWJlciBvZiBzZWNvbmRzIGl0IHNob3VsZCB0YWtlIHRvIHRyYW5zaXRpb25cXHJcXG4gICAgICogdG8gdGhlIG5ldyBhbmltYXRpb24uIERlZmF1bHQgaXMgemVybyBhbmQgd2lsbCBzZXQgaW1tZWRpYXRlbHkuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIFRoZSBlYXNpbmcgZnVuY3Rpb24gdG8gdXNlIHdoaWxlIHRyYW5zaXRpb25pbmdcXHJcXG4gICAgICogYmV0d2VlbiBhbmltYXRpb25zLiBEZWZhdWx0IGlzIEVhc2luZy5MaW5lYXIuSW5PdXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gLSBSZXNvbHZlcyBvbmNlIHRoZSBhbmltYXRpb24gcmVhY2hlcyB0aGUgZW5kIG9mIGl0c1xcclxcbiAgICAgKiB0aW1lbGluZS4gTG9vcGluZyBhbmltYXRpb25zIGNhbiBvbmx5IHJlc29sdmUgaWYgdGhleSBhcmUgaW50ZXJydXB0ZWQgb3JcXHJcXG4gICAgICogbWFudWFsbHkgc3RvcHBlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZXN1bWVBbmltYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUFuaW1hdGlvbihsYXllck5hbWUsIGFuaW1hdGlvbk5hbWUsIHNlY29uZHMsIGVhc2luZ0ZuKSB7XFxuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XFxuXFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbGF5ZXJOYW1lXTtcXG5cXG4gICAgICBpZiAobGF5ZXIgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdmFyIGUgPSBcIkNhbm5vdCByZXN1bWUgYW5pbWF0aW9uIFwiLmNvbmNhdChhbmltYXRpb25OYW1lLCBcIiBvbiBsYXllciBcIikuY29uY2F0KGxheWVyTmFtZSwgXCIgZm9yIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gTm8gbGF5ZXIgZXhpc3RzIHdpdGggdGhpcyBuYW1lLlwiKTtcXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLnJlamVjdChlKTtcXG4gICAgICB9IC8vIE5vdGlmeSB0aGF0IGFuIGFuaW1hdGlvbiB3YXMgcmVzdW1lZFxcblxcblxcbiAgICAgIHRoaXMuZW1pdCh0aGlzLmNvbnN0cnVjdG9yLkVWRU5UUy5yZXN1bWVBbmltYXRpb24sIHtcXG4gICAgICAgIGxheWVyTmFtZTogbGF5ZXJOYW1lLFxcbiAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZVxcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBsYXllci5yZXN1bWVBbmltYXRpb24oYW5pbWF0aW9uTmFtZSwgc2Vjb25kcywgZWFzaW5nRm4sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIC8vIE5vdGlmeSB0aGF0IGFuIGFuaW1hdGlvbiBoYXMgc3RvcHBlZFxcbiAgICAgICAgX3RoaXM5LmVtaXQoX3RoaXM5LmNvbnN0cnVjdG9yLkVWRU5UUy5zdG9wQW5pbWF0aW9uLCB7XFxuICAgICAgICAgIGxheWVyTmFtZTogbGF5ZXJOYW1lLFxcbiAgICAgICAgICBhbmltYXRpb25OYW1lOiBhbmltYXRpb25OYW1lXFxuICAgICAgICB9KTtcXG4gICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIC8vIE5vdGlmeSB0aGF0IGFuIGFuaW1hdGlvbiBoYXMgYmVlbiBpbnRlcnJ1cHRlZFxcbiAgICAgICAgX3RoaXM5LmVtaXQoX3RoaXM5LmNvbnN0cnVjdG9yLkVWRU5UUy5pbnRlcnJ1cHRBbmltYXRpb24sIHtcXG4gICAgICAgICAgbGF5ZXJOYW1lOiBsYXllck5hbWUsXFxuICAgICAgICAgIGFuaW1hdGlvbk5hbWU6IGFuaW1hdGlvbk5hbWVcXG4gICAgICAgIH0pO1xcbiAgICAgIH0sIGZ1bmN0aW9uIChfcmVmMykge1xcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxcbiAgICAgICAgICAgIGNhbkFkdmFuY2UgPSBfcmVmMy5jYW5BZHZhbmNlLFxcbiAgICAgICAgICAgIGlzUXVldWVFbmQgPSBfcmVmMy5pc1F1ZXVlRW5kO1xcblxcbiAgICAgICAgaWYgKGxheWVyLmN1cnJlbnRBbmltYXRpb24gPT09IGFuaW1hdGlvbk5hbWUpIHtcXG4gICAgICAgICAgLy8gTm90aWZ5IHRoYXQgYSBuZXcgYW5pbWF0aW9uIGhhcyBiZWd1blxcbiAgICAgICAgICBfdGhpczkuZW1pdChfdGhpczkuY29uc3RydWN0b3IuRVZFTlRTLnBsYXlOZXh0QW5pbWF0aW9uLCB7XFxuICAgICAgICAgICAgbGF5ZXJOYW1lOiBsYXllck5hbWUsXFxuICAgICAgICAgICAgYW5pbWF0aW9uTmFtZTogYW5pbWF0aW9uTmFtZSxcXG4gICAgICAgICAgICBuZXh0UXVldWVkQW5pbWF0aW9uOiBuYW1lLFxcbiAgICAgICAgICAgIGNhbkFkdmFuY2U6IGNhbkFkdmFuY2UsXFxuICAgICAgICAgICAgaXNRdWV1ZUVuZDogaXNRdWV1ZUVuZFxcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCB0aGUgY3VycmVudCBhbmltYXRpb24gb24gYSBsYXllci4gU3RvcCByZXdpbmRzIHRoZSBhbmltYXRpb24gdG8gdGhlXFxyXFxuICAgICAqIGJlZ2lubmluZyBhbmQgcHJldmVudHMgaXQgZnJvbSBwcm9ncmVzc2luZyBmb3J3YXJkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRoYXQgY29udGFpbnMgdGhlIGFuaW1hdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IGFuIGFuaW1hdGlvbiB3YXMgc3VjY2Vzc2Z1bGx5IHN0b3BwZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic3RvcEFuaW1hdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcEFuaW1hdGlvbihuYW1lKSB7XFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbbmFtZV07XFxuXFxuICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIGNvbnNvbGUud2FybihcIkRpZCBub3Qgc3RvcCBhbmltYXRpb24gb24gbGF5ZXIgXCIuY29uY2F0KG5hbWUsIFwiIGZvciBob3N0IFwiKS5jb25jYXQodGhpcy5faG9zdC5pZCwgXCIuIE5vIGxheWVyIGV4aXN0cyB3aXRoIHRoaXMgbmFtZS5cIikpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbGF5ZXIuc3RvcEFuaW1hdGlvbigpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQYXVzZSBjdXJyZW50IGFuaW1hdGlvbiBhbmQgd2VpZ2h0IGludGVycG9sYXRpb24gYW5pbWF0aW9uIG9uIGFsbCBsYXllcnMuXFxyXFxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgdGhlcmUgd2FzIGFuIGV4aXN0aW5nIGludGVycG9sYXRpb24gb3JcXHJcXG4gICAgICogY3VycmVudCBhbmltYXRpb25zIHRvIHBhdXNlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInBhdXNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcXG4gICAgICB0aGlzLl9wYXVzZWQgPSB0cnVlO1xcbiAgICAgIHZhciBwYXVzZWQgPSBmYWxzZTtcXG5cXG4gICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobCkge1xcbiAgICAgICAgaWYgKGwucGF1c2UoKSkge1xcbiAgICAgICAgICBwYXVzZWQgPSB0cnVlO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcblxcbiAgICAgIHJldHVybiBwYXVzZWQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlc3VtZSBjdXJyZW50IGFuaW1hdGlvbiBhbmQgd2VpZ2h0IGludGVycG9sYXRpb24gYW5pbWF0aW9uIG9uIGFsbCBsYXllcnMuXFxyXFxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgdGhlcmUgd2FzIGFuIGV4aXN0aW5nIGludGVycG9sYXRpb24gb3JcXHJcXG4gICAgICogY3VycmVudCBhbmltYXRpb25zIHRvIHJlc3VtZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZXN1bWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZSgpIHtcXG4gICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcXG4gICAgICB2YXIgcmVzdW1lZCA9IGZhbHNlO1xcblxcbiAgICAgIHRoaXMuX2xheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XFxuICAgICAgICBpZiAobC5yZXN1bWUoKSkge1xcbiAgICAgICAgICByZXN1bWVkID0gdHJ1ZTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm4gcmVzdW1lZDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQWRkcyBhIG5hbWVzcGFjZSB0byB0aGUgaG9zdCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBmZWF0dXJlIHRvIGNvbnRhaW4gcHJvcGVydGllc1xcclxcbiAgICAgKiBhbmQgbWV0aG9kcyBmcm9tIHRoZSBmZWF0dXJlIHRoYXQgdXNlcnMgb2YgdGhlIGhvc3QgbmVlZCBhY2Nlc3MgdG8uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBzZWUgQW5pbWF0aW9uRmVhdHVyZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImluc3RhbGxBcGlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxBcGkoKSB7XFxuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xcblxcbiAgICAgIC8qKlxcclxcbiAgICAgICAqIEBpbm5lclxcclxcbiAgICAgICAqIEBuYW1lc3BhY2UgQW5pbWF0aW9uRmVhdHVyZVxcclxcbiAgICAgICAqL1xcbiAgICAgIHZhciBhcGkgPSBBbmltYXRpb25GZWF0dXJlX2dldChBbmltYXRpb25GZWF0dXJlX2dldFByb3RvdHlwZU9mKEFuaW1hdGlvbkZlYXR1cmUucHJvdG90eXBlKSwgXCJpbnN0YWxsQXBpXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuXFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYXBpLCB7XFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BhdXNlZFxcclxcbiAgICAgICAgICovXFxuICAgICAgICBwYXVzZWQ6IHtcXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIF90aGlzMTAucGF1c2VkO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9LFxcblxcbiAgICAgICAgLyoqXFxyXFxuICAgICAgICAgKiBAbWVtYmVyb2YgQW5pbWF0aW9uRmVhdHVyZVxcclxcbiAgICAgICAgICogQGluc3RhbmNlXFxyXFxuICAgICAgICAgKiBAc2VlIGNvcmUvQW5pbWF0aW9uRmVhdHVyZSNsYXllcnNcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgbGF5ZXJzOiB7XFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICAgIHJldHVybiBfdGhpczEwLmxheWVycztcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICAgIE9iamVjdC5hc3NpZ24oYXBpLCB7XFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2FkZExheWVyXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIGFkZExheWVyOiB0aGlzLmFkZExheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3JlbW92ZUxheWVyXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHJlbW92ZUxheWVyOiB0aGlzLnJlbW92ZUxheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI21vdmVMYXllclxcclxcbiAgICAgICAgICovXFxuICAgICAgICBtb3ZlTGF5ZXI6IHRoaXMubW92ZUxheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3JlbmFtZUxheWVyXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHJlbmFtZUxheWVyOiB0aGlzLnJlbmFtZUxheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldExheWVyV2VpZ2h0XFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIGdldExheWVyV2VpZ2h0OiB0aGlzLmdldExheWVyV2VpZ2h0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3NldExheWVyV2VpZ2h0XFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHNldExheWVyV2VpZ2h0OiB0aGlzLnNldExheWVyV2VpZ2h0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BhdXNlTGF5ZXJXZWlnaHRcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgcGF1c2VMYXllcldlaWdodDogdGhpcy5wYXVzZUxheWVyV2VpZ2h0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3Jlc3VtZUxheWVyV2VpZ2h0XFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHJlc3VtZUxheWVyV2VpZ2h0OiB0aGlzLnJlc3VtZUxheWVyV2VpZ2h0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BhdXNlTGF5ZXJcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgcGF1c2VMYXllcjogdGhpcy5wYXVzZUxheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3Jlc3VtZUxheWVyXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHJlc3VtZUxheWVyOiB0aGlzLnJlc3VtZUxheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldFRyYW5zaXRpb25pbmdcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgZ2V0VHJhbnNpdGlvbmluZzogdGhpcy5nZXRUcmFuc2l0aW9uaW5nLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldEFuaW1hdGlvbnNcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgZ2V0QW5pbWF0aW9uczogdGhpcy5nZXRBbmltYXRpb25zLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldEN1cnJlbnRBbmltYXRpb25cXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgZ2V0Q3VycmVudEFuaW1hdGlvbjogdGhpcy5nZXRDdXJyZW50QW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldFBhdXNlZFxcclxcbiAgICAgICAgICovXFxuICAgICAgICBnZXRQYXVzZWQ6IHRoaXMuZ2V0UGF1c2VkLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldEFuaW1hdGlvblR5cGVcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgZ2V0QW5pbWF0aW9uVHlwZTogdGhpcy5nZXRBbmltYXRpb25UeXBlLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2FkZEFuaW1hdGlvblxcclxcbiAgICAgICAgICovXFxuICAgICAgICBhZGRBbmltYXRpb246IHRoaXMuYWRkQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3JlbW92ZUFuaW1hdGlvblxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZW1vdmVBbmltYXRpb246IHRoaXMucmVtb3ZlQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3JlbmFtZUFuaW1hdGlvblxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZW5hbWVBbmltYXRpb246IHRoaXMucmVuYW1lQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldEFuaW1hdGlvbkJsZW5kTmFtZXNcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgZ2V0QW5pbWF0aW9uQmxlbmROYW1lczogdGhpcy5nZXRBbmltYXRpb25CbGVuZE5hbWVzLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI2dldEFuaW1hdGlvbkJsZW5kV2VpZ2h0XFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIGdldEFuaW1hdGlvbkJsZW5kV2VpZ2h0OiB0aGlzLmdldEFuaW1hdGlvbkJsZW5kV2VpZ2h0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3NldEFuaW1hdGlvbkJsZW5kV2VpZ2h0XFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0OiB0aGlzLnNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BsYXlBbmltYXRpb25cXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgcGxheUFuaW1hdGlvbjogdGhpcy5wbGF5QW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BsYXlOZXh0QW5pbWF0aW9uXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHBsYXlOZXh0QW5pbWF0aW9uOiB0aGlzLnBsYXlOZXh0QW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BhdXNlQW5pbWF0aW9uXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHBhdXNlQW5pbWF0aW9uOiB0aGlzLnBhdXNlQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3Jlc3VtZUFuaW1hdGlvblxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZXN1bWVBbmltYXRpb246IHRoaXMucmVzdW1lQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3N0b3BBbmltYXRpb25cXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgc3RvcEFuaW1hdGlvbjogdGhpcy5zdG9wQW5pbWF0aW9uLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3BhdXNlXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHBhdXNlOiB0aGlzLnBhdXNlLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBBbmltYXRpb25GZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlI3Jlc3VtZVxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZXN1bWU6IHRoaXMucmVzdW1lLmJpbmQodGhpcylcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVXBkYXRlIGVhY2ggYW5pbWF0aW9uIGxheWVyLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lIC0gVGltZSBzaW5jZSB0aGUgbGFzdCB1cGRhdGUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidXBkYXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZGVsdGFUaW1lKSB7XFxuICAgICAgaWYgKCF0aGlzLl9sYXllcnMubGVuZ3RoKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcblxcbiAgICAgIGlmICh0aGlzLl9wYXVzZWQpIHtcXG4gICAgICAgIGRlbHRhVGltZSA9IDA7XFxuICAgICAgfSAvLyBSZS1ldmFsdWF0ZSBpbnRlcm5hbCB3ZWlnaHRzIGZvciBsYXllcnNcXG5cXG5cXG4gICAgICB0aGlzLl91cGRhdGVJbnRlcm5hbFdlaWdodHMoKTsgLy8gVXBkYXRlIGxheWVyc1xcblxcblxcbiAgICAgIHRoaXMuX2xheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikge1xcbiAgICAgICAgbGF5ZXIudXBkYXRlKGRlbHRhVGltZSk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgQW5pbWF0aW9uRmVhdHVyZV9nZXQoQW5pbWF0aW9uRmVhdHVyZV9nZXRQcm90b3R5cGVPZihBbmltYXRpb25GZWF0dXJlLnByb3RvdHlwZSksIFwidXBkYXRlXCIsIHRoaXMpLmNhbGwodGhpcywgZGVsdGFUaW1lKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiZGlzY2FyZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY2FyZCgpIHtcXG4gICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcXG4gICAgICAgIGxheWVyLmRpc2NhcmQoKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICBkZWxldGUgdGhpcy5fbGF5ZXJzO1xcbiAgICAgIGRlbGV0ZSB0aGlzLl9sYXllck1hcDtcXG5cXG4gICAgICBBbmltYXRpb25GZWF0dXJlX2dldChBbmltYXRpb25GZWF0dXJlX2dldFByb3RvdHlwZU9mKEFuaW1hdGlvbkZlYXR1cmUucHJvdG90eXBlKSwgXCJkaXNjYXJkXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBbmltYXRpb25GZWF0dXJlO1xcbn0oY29yZV9BYnN0cmFjdEhvc3RGZWF0dXJlKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uRmVhdHVyZSwgXFwnRVZFTlRTXFwnLCB7XFxuICB2YWx1ZTogQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoQW5pbWF0aW9uRmVhdHVyZV9vYmplY3RTcHJlYWQoe30sIE9iamVjdC5nZXRQcm90b3R5cGVPZihjb3JlX0Fic3RyYWN0SG9zdEZlYXR1cmUpLkVWRU5UUyksIHt9LCB7XFxuICAgIGFkZExheWVyOiBcXCdvbkFkZExheWVyRXZlbnRcXCcsXFxuICAgIHJlbW92ZUxheWVyOiBcXCdvblJlbW92ZUxheWVyRXZlbnRcXCcsXFxuICAgIHJlbmFtZUxheWVyOiBcXCdvblJlbmFtZUxheWVyRXZlbnRcXCcsXFxuICAgIGFkZEFuaW1hdGlvbjogXFwnb25BZGRBbmltYXRpb25FdmVudFxcJyxcXG4gICAgcmVtb3ZlQW5pbWF0aW9uOiBcXCdvblJlbW92ZWRBbmltYXRpb25FdmVudFxcJyxcXG4gICAgcmVuYW1lQW5pbWF0aW9uOiBcXCdvblJlbmFtZUFuaW1hdGlvbkV2ZW50XFwnLFxcbiAgICBwbGF5QW5pbWF0aW9uOiBcXCdvblBsYXlFdmVudFxcJyxcXG4gICAgcGxheU5leHRBbmltYXRpb246IFxcJ29uTmV4dEV2ZW50XFwnLFxcbiAgICBwYXVzZUFuaW1hdGlvbjogXFwnb25QYXVzZUV2ZW50XFwnLFxcbiAgICByZXN1bWVBbmltYXRpb246IFxcJ29uUmVzdW1lRXZlbnRcXCcsXFxuICAgIGludGVycnVwdEFuaW1hdGlvbjogXFwnb25JbnRlcnJ1cHRFdmVudFxcJyxcXG4gICAgc3RvcEFuaW1hdGlvbjogXFwnb25TdG9wRXZlbnRcXCdcXG4gIH0pXFxufSk7XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhbmltcGFja19BbmltYXRpb25GZWF0dXJlID0gKEFuaW1hdGlvbkZlYXR1cmUpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL1BvaW50T2ZJbnRlcmVzdEZlYXR1cmUuanNcXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gUG9pbnRPZkludGVyZXN0RmVhdHVyZV90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgUG9pbnRPZkludGVyZXN0RmVhdHVyZV9ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxcblxcbmZ1bmN0aW9uIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxcblxcbmZ1bmN0aW9uIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9nZXRQcm90b3R5cGVPZihvKSB7IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXFxuXFxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG4vKipcXHJcXG4gKiBFbnVtIGZvciBheGlzIGRpcmVjdGlvbnMuXFxyXFxuICpcXHJcXG4gKiBAcmVhZG9ubHlcXHJcXG4gKiBAZW51bSB7Q2xhc3N9XFxyXFxuICovXFxuXFxudmFyIEF4aXNNYXAgPSB7XFxuICBQb3NpdGl2ZVg6IFsxLCAwLCAwXSxcXG4gIE5lZ2F0aXZlWDogWy0xLCAwLCAwXSxcXG4gIFBvc2l0aXZlWTogWzAsIDEsIDBdLFxcbiAgTmVnYXRpdmVZOiBbMCwgLTEsIDBdLFxcbiAgUG9zaXRpdmVaOiBbMCwgMCwgMV0sXFxuICBOZWdhdGl2ZVo6IFswLCAwLCAtMV1cXG59O1xcbnZhciBGYWNlVGFyZ2V0VHlwZXMgPSB7XFxuICBFeWVDZW50ZXI6IDAsXFxuICBFeWVMZWZ0OiAxLFxcbiAgRXllUmlnaHQ6IDIsXFxuICBNb3V0aDogM1xcbn07IC8vIEF2ZXJhZ2UgZGlzdGFuY2UgYmV0d2VlbiBwdXBpbHMgaXMgLjA2NG0sIGdvbGRlbiByYXRpbyBzYXlzIHRoYXQgdGhlIGRpc3RhbmNlXFxuLy8gZnJvbSBjZW50ZXIgb2YgdGhlIHB1cGlscyB0byB0aGUgY2VudGVyIG9mIHRoZSBtb3V0aCBzaG91bGQgYmUgYWJvdXQgdGhlIHNhbWUuXFxuXFxudmFyIEZhY2VWZWN0b3JzID0gW1swLCAwLCAwXSwgWy0uMDMyLCAwLCAwXSwgWy4wMzIsIDAsIDBdLCBbMCwgLS4wNjQsIDBdXTsgLy8gVGltZSByYW5nZXMgdG8gdXNlIHdoZW4gY2hvb3NpbmcgYSBuZXcgcmFuZG9tIHdhaXQgdGltZSBiZXR3ZWVuIHNhY2NhZGVzXFxuXFxudmFyIE1pY3JvU2FjY2FkZVdhaXRSYW5nZXMgPSB7XFxuICBcImRlZmF1bHRcIjogWzAuOCwgMS43NV0sXFxuICBwb3N0TWFjcm86IFswLjYsIDEuMzEyNV1cXG59O1xcbnZhciBNYWNyb1NhY2NhZGVXYWl0UmFuZ2VzID0ge1xcbiAgXCJkZWZhdWx0XCI6IFs1LjAsIDguMF0sXFxuICBtb3V0aFRhcmdldDogWzAuMiwgMC43NV0sXFxuICAvLyBMb29rIGF3YXkgZnJvbSBhIG1vdXRoIHRhcmdldCB0aGUgZmFzdGVzdFxcbiAgZXllVGFyZ2V0OiBbMS41LCA0LjBdXFxufTsgLy8gTWluaW11bSBhbmdsZSBpbiBkZWdyZWVzIHRoZSBleWUgZGlyZWN0aW9uIG11c3QgY2hhbmdlIHRvIHRyaWdnZXIgYSBibGluayBhbmltYXRpb25cXG5cXG52YXIgQmxpbmtUaHJlc2hvbGQgPSAzNTsgLy8gTWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHVzZSBmb3IgY2FsY3VsYXRpbmcgbG9vayBzcGVlZFxcblxcbnZhciBNYXhEZWx0YSA9IDEwMCAvIDM7XFxuLyoqXFxyXFxuICogUG9pbnRPZkludGVyZXN0IGNvbnRyb2xzIHRoZSBnYXplIGRpcmVjdGlvbiBvZiB0aGUgaG9zdC4gR2l2ZW4gb25lIG9yIG1vcmVcXHJcXG4gKiBhbmltYXRpb25zIG9mIHR5cGUgQmxlbmQyZFN0YXRlLCBpdCBjYWxjdWxhdGVzIHRoZSBhbmdsZXMgYmV0d2VlbiB0aGUgbG9va1RyYWNrZXJcXHJcXG4gKiBvYmplY3QgKGdlbmVyYWxseSBhIGpvaW50IGluIHRoZSBob3N0XFwncyBza2VsZXRvbikgYW5kIHRoZSBsb29rVGFyZ2V0ICh0aGUgb2JqZWN0XFxyXFxuICogdGhlIGhvc3Qgc2hvdWxkIGxvb2sgYXQpIGFuZCBkcml2ZXMgdGhlIG1hbmFnZWQgQmxlbmQyZFN0YXRlc1xcJyBYIGFuZCBZIGJsZW5kXFxyXFxuICogdmFsdWVzIHVzaW5nIHRoZSByZXN1bHQuIFlvdSBjYW4gb3B0aW9uYWxseSBhZGQgc2FjY2FkaWMgbW92ZW1lbnQgdG8gYW55IG1hbmFnZWRcXHJcXG4gKiBhbmltYXRpb24gdG8gaGVscCBtYWtlIHRoZSBob3N0XFwncyBleWVzIGFwcGVhciBhbGl2ZSB3aGVuIGZvY3VzZWQgb24gdGhlIHNhbWVcXHJcXG4gKiBwb2ludCBmb3IgZXh0ZWRlZCBwZXJpb2RzIG9mIHRpbWUuIElmIGJsaW5rIGFuaW1hdGlvbnMgYXJlIHNwZWNpZmllZCwgYSBibGlua1xcclxcbiAqIHdpbGwgYmUgcGxheWVkIGR1cmluZyBsYXJnZSBjaGFuZ2VzIGluIGdhemUgZGlyZWN0aW9uLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RIb3N0RmVhdHVyZVxcclxcbiAqIEBhbGlhcyBjb3JlL1BvaW50T2ZJbnRlcmVzdEZlYXR1cmVcXHJcXG4gKiBAaW1wbGVtZW50cyBTU01MU3BlZWNobWFya0ludGVyZmFjZVxcclxcbiAqIEBpbXBsZW1lbnRzIE1hbmFnZWRBbmltYXRpb25MYXllckludGVyZmFjZVxcclxcbiAqL1xcblxcbnZhciBQb2ludE9mSW50ZXJlc3RGZWF0dXJlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQWJzdHJhY3RIb3N0RmVhdHVyZSQpIHtcXG4gIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfaW5oZXJpdHMoUG9pbnRPZkludGVyZXN0RmVhdHVyZSwgX0Fic3RyYWN0SG9zdEZlYXR1cmUkKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2NyZWF0ZVN1cGVyKFBvaW50T2ZJbnRlcmVzdEZlYXR1cmUpO1xcblxcbiAgLyoqXFxyXFxuICAgKiBAY29uc3RydWN0b3JcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge2NvcmUvSG9zdE9iamVjdH0gaG9zdCAtIEhvc3QgdGhhdCBvd25zIHRoZSBmZWF0dXJlLlxcclxcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGZlYXR1cmUuXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdD19IHRhcmdldCAtIDNEIHRyYW5zZm9ybWF0aW9uIG5vZGUgdGhhdCB0aGUgaG9zdCBzaG91bGQgdHJ5IHRvXFxyXFxuICAgKiBsb29rIGF0LlxcclxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMubG9va1RyYWNrZXIgLSAzRCB0cmFuc2Zvcm1hdGlvbiBub2RlIHRoYXQgcmVwcmVzZW50c1xcclxcbiAgICogdGhlIGRpcmVjdGlvbiB0aGUgaG9zdCBpcyBjdXJyZW50bHkgbG9va2luZyBkdXJpbmcgYW5pbWF0aW9uLlxcclxcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zLnNjZW5lIC0gRW5naW5lLXNwZWNpZmljIHNjZW5lIG9iamVjdCB0aGF0IGNvbnRhaW5zXFxyXFxuICAgKiB0aGUgaG9zdC4gVGhpcyBvYmplY3QgbXVzdCBiZSBkZWZpbmVkIGlmIHVzaW5nIFxcJ3NldFRhcmdldEJ5TmFtZVxcJyBvciBcXCdTZXRUYXJnZXRCeUlkXFwnXFxyXFxuICAgKiBtZXRob2RzLlxcclxcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBsb29rT3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBsb29rIGFuaW1hdGlvbiBsYXllcnMuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2xvb2tPcHRpb25zLmJsZW5kVGltZT0wLjFdIC0gRGVmYXVsdCBhbW91bnQgb2YgdGltZSBpdCB3aWxsXFxyXFxuICAgKiB0YWtlIHRvIG1hbmlwdWxhdGUgdGhlIHdlaWdodHMgb2YgdGhlIGxvb2sgbGF5ZXJzLlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtsb29rT3B0aW9ucy5lYXNpbmdGbj1RdWFkcmF0aWMuSW5PdXRdIC0gRGVmYXVsdCBlYXNpbmcgZnVuY3Rpb25cXHJcXG4gICAqIHRvIHVzZSB3aGVuIG1hbmlwdWxhdGluZyBsb29rIGxheWVyIHdlaWdodHMuXFxyXFxuICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBbbG9va09wdGlvbnMubGF5ZXJzPVtdXSAtIEFuIGFycmF5IG9mIGxheWVyIG9wdGlvbnNcXHJcXG4gICAqIG9iamVjdHMgdG8gcmVnaXN0ZXIgYXMgbG9vayBsYXllcnMuXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdD19IGJsaW5rT3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBibGluayBhbmltYXRpb24gbGF5ZXJzLlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtibGlua09wdGlvbnMuYmxlbmRUaW1lPTAuMDc1XSAtIERlZmF1bHQgYW1vdW50IG9mIHRpbWUgaXRcXHJcXG4gICAqIHdpbGwgdGFrZSB0byBtYW5pcHVsYXRlIHRoZSB3ZWlnaHRzIG9mIHRoZSBibGluayBsYXllcnMuXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2JsaW5rT3B0aW9ucy5lYXNpbmdGbj1RdWFkcmF0aWMuSW5PdXRdIC0gRGVmYXVsdCBlYXNpbmcgZnVuY3Rpb25cXHJcXG4gICAqIHRvIHVzZSB3aGVuIG1hbmlwdWxhdGluZyBibGluayBsYXllciB3ZWlnaHRzLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gW2JsaW5rT3B0aW9ucy5sYXllcnM9W11dIC0gQW4gYXJyYXkgb2YgbGF5ZXIgb3B0aW9uc1xcclxcbiAgICogb2JqZWN0cyB0byByZWdpc3RlciBhcyBibGluayBsYXllcnMuXFxyXFxuICAgKi9cXG4gIGZ1bmN0aW9uIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmUoaG9zdCkge1xcbiAgICB2YXIgX3RoaXM7XFxuXFxuICAgIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcXG4gICAgICAgIHRhcmdldCA9IF9yZWYudGFyZ2V0LFxcbiAgICAgICAgbG9va1RyYWNrZXIgPSBfcmVmLmxvb2tUcmFja2VyLFxcbiAgICAgICAgc2NlbmUgPSBfcmVmLnNjZW5lO1xcblxcbiAgICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxcbiAgICAgICAgX3JlZjIkYmxlbmRUaW1lID0gX3JlZjIuYmxlbmRUaW1lLFxcbiAgICAgICAgbG9va0JsZW5kVGltZSA9IF9yZWYyJGJsZW5kVGltZSA9PT0gdm9pZCAwID8gMC4xIDogX3JlZjIkYmxlbmRUaW1lLFxcbiAgICAgICAgX3JlZjIkZWFzaW5nRm4gPSBfcmVmMi5lYXNpbmdGbixcXG4gICAgICAgIGxvb2tFYXNpbmdGbiA9IF9yZWYyJGVhc2luZ0ZuID09PSB2b2lkIDAgPyBRdWFkcmF0aWMuSW5PdXQgOiBfcmVmMiRlYXNpbmdGbixcXG4gICAgICAgIF9yZWYyJGxheWVycyA9IF9yZWYyLmxheWVycyxcXG4gICAgICAgIGxvb2tMYXllcnMgPSBfcmVmMiRsYXllcnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZjIkbGF5ZXJzO1xcblxcbiAgICB2YXIgX3JlZjMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9LFxcbiAgICAgICAgX3JlZjMkYmxlbmRUaW1lID0gX3JlZjMuYmxlbmRUaW1lLFxcbiAgICAgICAgYmxpbmtCbGVuZFRpbWUgPSBfcmVmMyRibGVuZFRpbWUgPT09IHZvaWQgMCA/IDAuMDc1IDogX3JlZjMkYmxlbmRUaW1lLFxcbiAgICAgICAgX3JlZjMkZWFzaW5nRm4gPSBfcmVmMy5lYXNpbmdGbixcXG4gICAgICAgIGJsaW5rRWFzaW5nRm4gPSBfcmVmMyRlYXNpbmdGbiA9PT0gdm9pZCAwID8gUXVhZHJhdGljLkluT3V0IDogX3JlZjMkZWFzaW5nRm4sXFxuICAgICAgICBfcmVmMyRsYXllcnMgPSBfcmVmMy5sYXllcnMsXFxuICAgICAgICBibGlua0xheWVycyA9IF9yZWYzJGxheWVycyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMyRsYXllcnM7XFxuXFxuICAgIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9pbnRPZkludGVyZXN0RmVhdHVyZSk7XFxuXFxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaG9zdCk7XFxuXFxuICAgIGlmICghX3RoaXMuY29uc3RydWN0b3IuX3ZhbGlkYXRlVHJhbnNmb3JtT2JqZWN0KGxvb2tUcmFja2VyKSkge1xcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbml0aWFsaXplIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmUgb24gaG9zdCBcIi5jb25jYXQoX3RoaXMuX2hvc3QuaWQsIFwiLiBMb29rVHJhY2tlciBtdXN0IGJlIGRlZmluZWQgYXMgYSB2YWxpZCB0cmFuc2Zvcm1hdGlvbiBvYmplY3QuXCIpKTtcXG4gICAgfVxcblxcbiAgICBfdGhpcy5fbG9va1RyYWNrZXIgPSBsb29rVHJhY2tlcjtcXG4gICAgX3RoaXMuX3NjZW5lID0gc2NlbmU7XFxuICAgIF90aGlzLl90YXJnZXQgPSB0YXJnZXQgfHwgbnVsbDtcXG4gICAgX3RoaXMuX3ByZXZUYXJnZXRQb3MgPSBbMCwgMCwgMF07XFxuICAgIF90aGlzLl9pc1RhcmdldE1vdmluZyA9IGZhbHNlO1xcbiAgICBfdGhpcy5fbG9va0xheWVycyA9IF90aGlzLl9sb29rTGF5ZXJzIHx8IHt9O1xcbiAgICBfdGhpcy5fdHJhY2tpbmdDb25maWdzID0gX3RoaXMuX3RyYWNraW5nQ29uZmlncyB8fCBbXTtcXG4gICAgX3RoaXMuX2JsaW5rTGF5ZXJzID0gX3RoaXMuX2JsaW5rTGF5ZXJzIHx8IHt9OyAvLyBSZWdpc3RlciB0aGUgbG9vayBsYXllcnNcXG5cXG4gICAgbG9va0xheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNCkge1xcbiAgICAgIHZhciBuYW1lID0gX3JlZjQubmFtZSxcXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3JlZjQuYW5pbWF0aW9uLFxcbiAgICAgICAgICBtYXhTcGVlZCA9IF9yZWY0Lm1heFNwZWVkLFxcbiAgICAgICAgICByZWZlcmVuY2UgPSBfcmVmNC5yZWZlcmVuY2UsXFxuICAgICAgICAgIGZvcndhcmRBeGlzID0gX3JlZjQuZm9yd2FyZEF4aXMsXFxuICAgICAgICAgIGhhc1NhY2NhZGUgPSBfcmVmNC5oYXNTYWNjYWRlLFxcbiAgICAgICAgICBibGVuZFRpbWUgPSBfcmVmNC5ibGVuZFRpbWUsXFxuICAgICAgICAgIGVhc2luZ0ZuID0gX3JlZjQuZWFzaW5nRm47XFxuXFxuICAgICAgX3RoaXMucmVnaXN0ZXJMb29rTGF5ZXIobmFtZSwge1xcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXFxuICAgICAgICBtYXhTcGVlZDogbWF4U3BlZWQsXFxuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcXG4gICAgICAgIGZvcndhcmRBeGlzOiBmb3J3YXJkQXhpcyxcXG4gICAgICAgIGhhc1NhY2NhZGU6IGhhc1NhY2NhZGUsXFxuICAgICAgICBibGVuZFRpbWU6IGJsZW5kVGltZSAhPT0gdW5kZWZpbmVkID8gYmxlbmRUaW1lIDogbG9va0JsZW5kVGltZSxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGbiAhPT0gdW5kZWZpbmVkID8gZWFzaW5nRm4gOiBsb29rRWFzaW5nRm5cXG4gICAgICB9KTtcXG4gICAgfSk7IC8vIFJlZ2lzdGVyIHRoZSBibGluayBsYXllcnNcXG5cXG4gICAgYmxpbmtMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjUpIHtcXG4gICAgICB2YXIgbmFtZSA9IF9yZWY1Lm5hbWUsXFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9yZWY1LmFuaW1hdGlvbixcXG4gICAgICAgICAgYmxlbmRUaW1lID0gX3JlZjUuYmxlbmRUaW1lLFxcbiAgICAgICAgICBlYXNpbmdGbiA9IF9yZWY1LmVhc2luZ0ZuO1xcblxcbiAgICAgIF90aGlzLnJlZ2lzdGVyQmxpbmtMYXllcihuYW1lLCB7XFxuICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbixcXG4gICAgICAgIGJsZW5kVGltZTogYmxlbmRUaW1lICE9PSB1bmRlZmluZWQgPyBibGVuZFRpbWUgOiBibGlua0JsZW5kVGltZSxcXG4gICAgICAgIGVhc2luZ0ZuOiBlYXNpbmdGbiAhPT0gdW5kZWZpbmVkID8gZWFzaW5nRm4gOiBibGlua0Vhc2luZ0ZuXFxuICAgICAgfSk7XFxuICAgIH0pO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIEdldHMgYW5kIHNldHMgdGhlIHRhcmdldCBvYmplY3QgdGhlIGhvc3Qgc2hvdWxkIGxvb2sgYXQuXFxyXFxuICAgKlxcclxcbiAgICogQHR5cGUge09iamVjdHxudWxsfVxcclxcbiAgICovXFxuXFxuXFxuICBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2NyZWF0ZUNsYXNzKFBvaW50T2ZJbnRlcmVzdEZlYXR1cmUsIFt7XFxuICAgIGtleTogXCJ0YXJnZXRcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldDtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodGFyZ2V0KSB7XFxuICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0IHx8IG51bGw7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiBhIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGdsb2JhbCBwb3NpdGlvbiBvZiBhbiBvYmplY3QuIFNob3VsZCBiZVxcclxcbiAgICAgKiBvdmVybG9hZGVkIGZvciBlYWNoIHJlbmRlcmluZyBlbmdpbmUgaW1wbGVtZW50YXRpb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7YW55fSBfb2JqIC0gRW5naW5lLXNwZWNpZmljIDNEIHRyYW5zZm9ybSBvYmplY3QuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBcnJheS48bnVtYmVyPn0gLSBBbiBhcnJheSBjb25zaXN0aW5nIG9mIHRocmVlIG51bWJlcnMgcmVwcmVzZW50aW5nXFxyXFxuICAgICAqIHgsIHkgYW5kIHogY29vcmRpbmF0ZXMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX29uTGF5ZXJBZGRlZFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uTGF5ZXJBZGRlZChfcmVmNikge1xcbiAgICAgIHZhciBuYW1lID0gX3JlZjYubmFtZTtcXG4gICAgICB0aGlzLl9sb29rTGF5ZXJzID0gdGhpcy5fbG9va0xheWVycyB8fCB7fTtcXG4gICAgICB0aGlzLl9ibGlua0xheWVycyA9IHRoaXMuX2JsaW5rTGF5ZXJzIHx8IHt9O1xcblxcbiAgICAgIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0KFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoUG9pbnRPZkludGVyZXN0RmVhdHVyZS5wcm90b3R5cGUpLCBcIl9vbkxheWVyQWRkZWRcIiwgdGhpcykuY2FsbCh0aGlzLCB7XFxuICAgICAgICBuYW1lOiBuYW1lXFxuICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBsb29rIGFuaW1hdGlvblxcblxcblxcbiAgICAgIGlmICh0aGlzLl9sb29rTGF5ZXJzW25hbWVdICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyTG9va0FuaW1hdGlvbihuYW1lLCB0aGlzLl9sb29rTGF5ZXJzW25hbWVdKTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9vbkFuaW1hdGlvbkFkZGVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25BbmltYXRpb25BZGRlZChfcmVmNykge1xcbiAgICAgIHZhciBsYXllck5hbWUgPSBfcmVmNy5sYXllck5hbWUsXFxuICAgICAgICAgIGFuaW1hdGlvbk5hbWUgPSBfcmVmNy5hbmltYXRpb25OYW1lO1xcbiAgICAgIHRoaXMuX2xvb2tMYXllcnMgPSB0aGlzLl9sb29rTGF5ZXJzIHx8IHt9O1xcbiAgICAgIHRoaXMuX2JsaW5rTGF5ZXJzID0gdGhpcy5fYmxpbmtMYXllcnMgfHwge307XFxuXFxuICAgICAgUG9pbnRPZkludGVyZXN0RmVhdHVyZV9nZXQoUG9pbnRPZkludGVyZXN0RmVhdHVyZV9nZXRQcm90b3R5cGVPZihQb2ludE9mSW50ZXJlc3RGZWF0dXJlLnByb3RvdHlwZSksIFwiX29uQW5pbWF0aW9uQWRkZWRcIiwgdGhpcykuY2FsbCh0aGlzLCB7XFxuICAgICAgICBsYXllck5hbWU6IGxheWVyTmFtZVxcbiAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgbG9vayBhbmltYXRpb25cXG5cXG5cXG4gICAgICBpZiAodGhpcy5fbG9va0xheWVyc1tsYXllck5hbWVdID09PSBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgICB0aGlzLl9yZWdpc3Rlckxvb2tBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEVuc3VyZSB0aGF0IHJlZ2lzdGVyZWQgbG9vayBhbmltYXRpb25zIGFyZSBCbGVuZDJkU3RhdGVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBjb250YWlucyB0aGUgbG9vayBhbmltYXRpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhbmltYXRpb25OYW1lIC0gTmFtZSBvZiB0aGUgYW5pbWF0aW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9yZWdpc3Rlckxvb2tBbmltYXRpb25cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWdpc3Rlckxvb2tBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKSB7XFxuICAgICAgaWYgKHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXS5hbmltYXRpb25zW2FuaW1hdGlvbk5hbWVdLmlzQWN0aXZlKSB7XFxuICAgICAgICBpZiAoQW5pbWF0aW9uVHlwZXNbdGhpcy5faG9zdC5BbmltYXRpb25GZWF0dXJlLmdldEFuaW1hdGlvblR5cGUobGF5ZXJOYW1lLCBhbmltYXRpb25OYW1lKV0gIT09IEFuaW1hdGlvblR5cGVzLmJsZW5kMmQpIHtcXG4gICAgICAgICAgLy8gV2FybiBhbmQgZGVhY3RpdmF0ZSBpZiB0aGUgcmVnaXN0ZXJlZCBzdGF0ZSBpcyBub3QgYmxlbmQyZFxcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJDYW5ub3QgcmVnaXN0ZXIgUG9pbnQgb2YgSW50ZXJlc3QgbG9vayBhbmltYXRpb24gXCIuY29uY2F0KGFuaW1hdGlvbk5hbWUsIFwiIG9uIGxheWVyIFwiKS5jb25jYXQobGF5ZXJOYW1lLCBcIiBmb3IgaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBMb29rIGFuaW1hdGlvbnMgbXVzdCBiZSBvZiB0eXBlIFxcJ2JsZW5kMmRcXCcuXCIpKTtcXG4gICAgICAgICAgdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0uaXNBY3RpdmUgPSBmYWxzZTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENoZWNrIGlmIHRoZSBnaXZlbiBvYmplY3QgaXMgbm90IG9mIGFuIGVuZ2luZS1zcGVjaWZpYyB0eXBlLiBTaG91bGRcXHJcXG4gICAgICogYmUgb3ZlcmxvYWRlZCBmb3IgZWFjaCByZW5kZXJpbmcgZW5naW5lIGltcGxlbWVudGF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge2FueX0gb2JqIC0gT2JqZWN0IHRvIHZhbGlkYXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfYWRkVHJhY2tpbmdDb25maWdcIixcXG4gICAgdmFsdWU6XFxuICAgIC8qKlxcclxcbiAgICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gY29uZmlndXJhdGlvbiBvYmplY3QgaGFzIGFscmVhZHkgYmVlbiBzdG9yZWQgYXMgYSB0cmFja2luZ1xcclxcbiAgICAgKiBjb25maWcuIElmIGl0IGhhcywgcmV0dXJuIHRoZSBzdG9yZWQgY29uZmlndXJhdGlvbi4gT3RoZXJ3aXNlLCBzdG9yZSBhbmRcXHJcXG4gICAgICogcmV0dXJuIGl0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIC0gT2JqZWN0IGNvbnRhaW5pbmcgdHJhY2tlciwgcmVmZXJlbmNlIGFuZCBmb3J3YXJkQXhpc1xcclxcbiAgICAgKiBwcm9wZXJ0aWVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gX2FkZFRyYWNraW5nQ29uZmlnKGNvbmZpZykge1xcbiAgICAgIHZhciB0cmFja2luZ0NvbmZpZyA9IHRoaXMuX3RyYWNraW5nQ29uZmlncy5maW5kKGZ1bmN0aW9uIChjKSB7XFxuICAgICAgICByZXR1cm4gYy5yZWZlcmVuY2UgPT09IGNvbmZpZy5yZWZlcmVuY2UgJiYgYy5mb3J3YXJkQXhpcyA9PT0gY29uZmlnLmZvcndhcmRBeGlzO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICh0cmFja2luZ0NvbmZpZykge1xcbiAgICAgICAgcmV0dXJuIHRyYWNraW5nQ29uZmlnO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBjb25maWcuYW5nbGVzID0ge1xcbiAgICAgICAgICBoOiAwLFxcbiAgICAgICAgICB2OiAwXFxuICAgICAgICB9O1xcbiAgICAgICAgY29uZmlnLnByZXZBbmdsZXMgPSB7XFxuICAgICAgICAgIGg6IDAsXFxuICAgICAgICAgIHY6IDBcXG4gICAgICAgIH07XFxuXFxuICAgICAgICB0aGlzLl90cmFja2luZ0NvbmZpZ3MucHVzaChjb25maWcpO1xcblxcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybiB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgbG9vayB0cmFja2VyIGFuZCB0aGUgbG9vayB0YXJnZXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2dldFRhcmdldERpc3RhbmNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VGFyZ2V0RGlzdGFuY2UoKSB7XFxuICAgICAgLy8gRmluZCB0aGUgdmVjdG9yIGJldHdlZW4gdGhlIGdsb2JhbCBwb3NpdGlvbnMgb2YgdHJhY2tlciBhbmQgdGFyZ2V0XFxuICAgICAgdmFyIHNvdXJjZVBvc2l0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0V29ybGRQb3NpdGlvbih0aGlzLl9sb29rVHJhY2tlcik7XFxuXFxuICAgICAgdmFyIHRhcmdldFBvc2l0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0V29ybGRQb3NpdGlvbih0aGlzLl90YXJnZXQpO1xcblxcbiAgICAgIHZhciBsb29rVmVjdG9yID0gW3RhcmdldFBvc2l0aW9uWzBdIC0gc291cmNlUG9zaXRpb25bMF0sIHRhcmdldFBvc2l0aW9uWzFdIC0gc291cmNlUG9zaXRpb25bMV0sIHRhcmdldFBvc2l0aW9uWzJdIC0gc291cmNlUG9zaXRpb25bMl1dO1xcbiAgICAgIHJldHVybiBjb3JlX01hdGhVdGlscy5nZXRWZWN0b3JNYWduaXR1ZGUobG9va1ZlY3Rvcik7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJlc2V0IGFsbCBzdG9yZWQgdHJhY2tpbmcgYW5nbGVzIHRvIDAuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3Jlc2V0TG9va0FuZ2xlc1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2V0TG9va0FuZ2xlcygpIHtcXG4gICAgICB0aGlzLl90cmFja2luZ0NvbmZpZ3MuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjgpIHtcXG4gICAgICAgIHZhciBhbmdsZXMgPSBfcmVmOC5hbmdsZXM7XFxuICAgICAgICBhbmdsZXMuaCA9IDA7XFxuICAgICAgICBhbmdsZXMudiA9IDA7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0b3JlIHRoZSBkaWZmZXJlbmNlIGluIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHJvdGF0aW9uIGZvciB0aGUgdHJhY2tlclxcJ3NcXHJcXG4gICAgICogcmVmZXJlbmNlIHJvdGF0aW9uIGFuZCB0aGUgZGlyZWN0aW9uIG9mIHRoZSB0YXJnZXQgZnJvbSB0aGUgdHJhY2tlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfc2V0TG9va0FuZ2xlc1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldExvb2tBbmdsZXMoKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHBvc2l0aW9ucyBvZiB0aGUgdHJhY2tlciBhbmQgdGFyZ2V0IG9iamVjdHNcXG4gICAgICB2YXIgdGFyZ2V0UG9zID0gdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0V29ybGRQb3NpdGlvbih0aGlzLl90YXJnZXQpO1xcblxcbiAgICAgIHZhciB0cmFja2VyUG9zID0gdGhpcy5jb25zdHJ1Y3Rvci5fZ2V0V29ybGRQb3NpdGlvbih0aGlzLl9sb29rVHJhY2tlcik7IC8vIENoZWNrIGlmIHRoZSB0YXJnZXQgaGFzIG1vdmVkXFxuXFxuXFxuICAgICAgdGhpcy5faXNUYXJnZXRNb3ZpbmcgPSBjb3JlX01hdGhVdGlscy5nZXRWZWN0b3JNYWduaXR1ZGUoW3RhcmdldFBvc1swXSAtIHRoaXMuX3ByZXZUYXJnZXRQb3NbMF0sIHRhcmdldFBvc1sxXSAtIHRoaXMuX3ByZXZUYXJnZXRQb3NbMV0sIHRhcmdldFBvc1syXSAtIHRoaXMuX3ByZXZUYXJnZXRQb3NbMl1dKSA+IDA7XFxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLl9wcmV2VGFyZ2V0UG9zLCB0YXJnZXRQb3MpOyAvLyBDYWxjdWxhdGUgdGhlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFuZ2xlcyB0byByb3RhdGUgdG8gdGhlIHRhcmdldFxcblxcbiAgICAgIHZhciB0YXJnZXRTcGhlcmljYWwgPSBjb3JlX01hdGhVdGlscy5jYXJ0ZXNpYW5Ub1NwaGVyaWNhbCh0YXJnZXRQb3NbMF0gLSB0cmFja2VyUG9zWzBdLCB0YXJnZXRQb3NbMV0gLSB0cmFja2VyUG9zWzFdLCB0YXJnZXRQb3NbMl0gLSB0cmFja2VyUG9zWzJdKTtcXG5cXG4gICAgICB2YXIgdGFyZ2V0QW5nbGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5fc3BoZXJpY2FsVG9CbGVuZFZhbHVlKHRhcmdldFNwaGVyaWNhbFsxXSwgdGFyZ2V0U3BoZXJpY2FsWzJdKTsgLy8gQ2FsY3VsYXRlIGFuZ2xlcyByZWxhdGl2ZSB0byB0aGUgcmVmZXJlbmNlIG9iamVjdHNcXG5cXG5cXG4gICAgICB0aGlzLl90cmFja2luZ0NvbmZpZ3MuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjkpIHtcXG4gICAgICAgIHZhciByZWZlcmVuY2UgPSBfcmVmOS5yZWZlcmVuY2UsXFxuICAgICAgICAgICAgZm9yd2FyZEF4aXMgPSBfcmVmOS5mb3J3YXJkQXhpcyxcXG4gICAgICAgICAgICBhbmdsZXMgPSBfcmVmOS5hbmdsZXM7XFxuXFxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFuZ2xlcyB0byByb3RhdGUgdG8gdGhlIGRpcmVjdGlvbiBvZiB0aGUgdHJhY2tlclxcbiAgICAgICAgdmFyIHJlZkRpcmVjdGlvbiA9IF90aGlzMi5jb25zdHJ1Y3Rvci5fZ2V0T2JqZWN0RGlyZWN0aW9uKHJlZmVyZW5jZSwgZm9yd2FyZEF4aXMpO1xcblxcbiAgICAgICAgdmFyIHJlZlNwaGVyaWNhbCA9IGNvcmVfTWF0aFV0aWxzLmNhcnRlc2lhblRvU3BoZXJpY2FsLmFwcGx5KGNvcmVfTWF0aFV0aWxzLCBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3RvQ29uc3VtYWJsZUFycmF5KHJlZkRpcmVjdGlvbikpO1xcblxcbiAgICAgICAgdmFyIHJlZkFuZ2xlcyA9IF90aGlzMi5jb25zdHJ1Y3Rvci5fc3BoZXJpY2FsVG9CbGVuZFZhbHVlKHJlZlNwaGVyaWNhbFsxXSwgcmVmU3BoZXJpY2FsWzJdKTsgLy8gU3RvcmUgdGhlIGRpZmZlcmVuY2VcXG5cXG5cXG4gICAgICAgIGFuZ2xlcy5oID0gdGFyZ2V0QW5nbGVzLmggLSByZWZBbmdsZXMuaDtcXG4gICAgICAgIGFuZ2xlcy52ID0gdGFyZ2V0QW5nbGVzLnYgLSByZWZBbmdsZXMudjtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIHRoZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBhbmdsZXMgaXQgd291bGQgcmVxdWlyZSB0byBzaW11bGF0ZSBsb29raW5nXFxyXFxuICAgICAqIGF0IHRoZSBnaXZlbiB0eXBlIG9mIGZhY2UgdGFyZ2V0XFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0YXJnZXRUeXBlIC0gSW50ZWdlciByZXByZXNlbnRpbmcgdGhlIEZhY2VUYXJnZXRUeXBlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fS0gQW4gb2JqZWN0IHdpdGggc2lnbmF0dXJlIHtyOiBudW1iZXIsIGg6IG51bWJlciwgdjogbnVtYmVyfVxcclxcbiAgICAgKiB3aGVyZSBcXCdyXFwnIHJlcHJlc2VudHMgcmFkaXVzLCBoIHJlcHJlc2VudHMgdGhlIGhvcml6b250YWwvYXppbXV0aGFsIGFuZ2xlIGFuZFxcclxcbiAgICAgKiB2IHJlcHJlc2VudHMgdGhlIHZlcnRpY2FsL3BvbGFyIGFuZ2xlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9nZXRGYWNlVGFyZ2V0QW5nbGVzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmFjZVRhcmdldEFuZ2xlcyh0YXJnZXRUeXBlKSB7XFxuICAgICAgLy8gTm8gb2Zmc2V0IHdoZW4gdGhlIHRhcmdldCBpcyB0aGUgY2VudGVyIG9mIHRoZSBleWVzXFxuICAgICAgaWYgKHRhcmdldFR5cGUgPT09IDApIHtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgIGg6IDAsXFxuICAgICAgICAgIHY6IDBcXG4gICAgICAgIH07XFxuICAgICAgfSAvLyBCdWlsZCBhIHZlY3RvciB0byB0aGUgZmFjZSB0YXJnZXQgdHlwZSB1c2luZyB0aGUgY3VycmVudCBkaXN0YW5jZSB0byB0aGUgdGFyZ2V0XFxuXFxuXFxuICAgICAgdmFyIGRpc3RhbmNlID0gdGhpcy5fZ2V0VGFyZ2V0RGlzdGFuY2UodGhpcy5fbG9va1RyYWNrZXIpO1xcblxcbiAgICAgIHZhciBmYWNlVmVjdG9yID0gUG9pbnRPZkludGVyZXN0RmVhdHVyZV90b0NvbnN1bWFibGVBcnJheShGYWNlVmVjdG9yc1t0YXJnZXRUeXBlXSk7XFxuXFxuICAgICAgZmFjZVZlY3RvclsyXSA9IGRpc3RhbmNlO1xcbiAgICAgIHZhciBzcGhlcmljYWwgPSBjb3JlX01hdGhVdGlscy5jYXJ0ZXNpYW5Ub1NwaGVyaWNhbC5hcHBseShjb3JlX01hdGhVdGlscywgUG9pbnRPZkludGVyZXN0RmVhdHVyZV90b0NvbnN1bWFibGVBcnJheShmYWNlVmVjdG9yKSk7IC8vIE1ha2Ugc3VyZSB2YWx1ZXMgYXJlIGNsYW1wZWQgd2l0aGluIHRoZSByYW5nZSBvZiBtb3Rpb24gb2YgdGhlIGh1bWFuIGV5ZSwgaW4gY2FzZSB0aGUgdGFyZ2V0IGlzIHZlcnkgY2xvc2VcXG5cXG4gICAgICB2YXIgYmxlbmRWYWx1ZXMgPSB0aGlzLmNvbnN0cnVjdG9yLl9zcGhlcmljYWxUb0JsZW5kVmFsdWUoc3BoZXJpY2FsWzFdLCBzcGhlcmljYWxbMl0pO1xcblxcbiAgICAgIGJsZW5kVmFsdWVzLmggPSBjb3JlX01hdGhVdGlscy5jbGFtcChibGVuZFZhbHVlcy5oLCAtMzUsIDM1KTtcXG4gICAgICBibGVuZFZhbHVlcy52ID0gY29yZV9NYXRoVXRpbHMuY2xhbXAoYmxlbmRWYWx1ZXMudiwgLTI1LCAzMCk7XFxuICAgICAgcmV0dXJuIGJsZW5kVmFsdWVzO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGVkIHRoZSBzdG9yZWQgc3BlZWQgYW5kIGR1cmF0aW9uIHZhcmlhYmxlcyBmb3IgYSBsYXllciBiYXNlZCBvbiB0aGVcXHJcXG4gICAgICogY2hhbmdlIGluIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIGFuZ2xlcyBvZiB0aGUgdHJhY2tlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRvIHN0b3JlIHZhbHVlcyBvbi5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGggLSBDaGFuZ2UgaW4gaG9yaXpvbnRhbCBhbmdsZSwgaW4gZGVncmVlcy5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHYgLSBDaGFuZ2UgaW4gdmVydGljYWwgYW5nbGUsIGluIGRlZ3JlZXMuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3VwZGF0ZUxheWVyU3BlZWRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVMYXllclNwZWVkKGxheWVyTmFtZSwgaCwgdikge1xcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXTsgLy8gRnJvbSBcIlJlYWxpc3RpYyBBdmF0YXIgYW5kIGhlYWQgQW5pbWF0aW9uIFVzaW5nIGEgTmV1cm9iaW9sb2dpY2FsIE1vZGVsIG9mIFZpc3VhbCBBdHRlbnRpb25cIiwgSXR0aSwgRGhhdmFsZSwgUGlnaGluXFxuXFxuICAgICAgbGF5ZXIubWF4SFNwZWVkID0gNDczICogKDEgLSBNYXRoLmV4cCgtaCAvIDcuOCkpO1xcbiAgICAgIGxheWVyLm1heFZTcGVlZCA9IDQ3MyAqICgxIC0gTWF0aC5leHAoLXYgLyA3LjgpKTsgLy8gRnJvbSBcIkV5ZXMgQWxpdmVcIiwgTGVlLCBCYWRsZXJcXG5cXG4gICAgICB2YXIgRDAgPSAwLjAyNTtcXG4gICAgICB2YXIgZCA9IDAuMDAyMzU7XFxuICAgICAgbGF5ZXIuaER1cmF0aW9uID0gRDAgKyBkICogaDtcXG4gICAgICBsYXllci52RHVyYXRpb24gPSBEMCArIGQgKiB2O1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXQgdGhlIG1pY3JvU2FjY2FkZSBvYmplY3Qgd2l0aCBuZXcgcmFuZG9taXplZCB2YWx1ZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IG93bnMgdGhlIHNhY2NhZGUgbW90aW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zZXRNaWNyb1NhY2NhZGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRNaWNyb1NhY2NhZGUobGF5ZXJOYW1lKSB7XFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdO1xcbiAgICAgIHZhciBtaWNyb1NhY2NhZGUgPSBsYXllci5taWNyb1NhY2NhZGU7XFxuXFxuICAgICAgaWYgKHRoaXMuX3RhcmdldCkge1xcbiAgICAgICAgLy8gTWljcm8gbW92ZW1lbnRzIHNob3VsZCBiZSBzbWFsbGVyIHdoZW4gZm9jdXNlZCBvbiBhIHRhcmdldFxcbiAgICAgICAgbWljcm9TYWNjYWRlLmggPSBjb3JlX1V0aWxzLmdldFJhbmRvbUZsb2F0KC4wMSwgLjE1KTtcXG4gICAgICAgIG1pY3JvU2FjY2FkZS52ID0gY29yZV9VdGlscy5nZXRSYW5kb21GbG9hdCguMDEsIC4xNSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIC8vIE1pY3Jvc2FjY2FkZXMuIEVuY3ljbG9wZWRpYSBvZiBOZXVyb3NjaWVuY2UuICgyMDA5KSBTcHJpbmdlciwgQmVybGluLCBIZWlkZWxiZXJnLiBodHRwczovL2RvaS5vcmcvMTAuMTAwNy85NzgtMy01NDAtMjk2NzgtMl8zNDkyXFxuICAgICAgICBtaWNyb1NhY2NhZGUuaCA9IGNvcmVfVXRpbHMuZ2V0UmFuZG9tRmxvYXQoLjAxLCAuMyk7XFxuICAgICAgICBtaWNyb1NhY2NhZGUudiA9IGNvcmVfVXRpbHMuZ2V0UmFuZG9tRmxvYXQoLjAxLCAuMyk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX3VwZGF0ZUxheWVyU3BlZWQobGF5ZXJOYW1lLCBtaWNyb1NhY2NhZGUuaCwgbWljcm9TYWNjYWRlLnYpOyAvLyBSZXN0YXJ0IHRoZSB0aW1lclxcblxcblxcbiAgICAgIHRoaXMuX2luaXRpYWxpemVNaWNyb1RpbWVyLmFwcGx5KHRoaXMsIFtsYXllck5hbWVdLmNvbmNhdChQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3RvQ29uc3VtYWJsZUFycmF5KE1pY3JvU2FjY2FkZVdhaXRSYW5nZXNbXCJkZWZhdWx0XCJdKSkpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTZXQgdGhlIG1hY3JvU2FjY2FkZSBvYmplY3Qgd2l0aCBuZXcgcmFuZG9taXplZCB2YWx1ZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0aGF0IG93bnMgdGhlIHNhY2NhZGUgbW90aW9uLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zZXRNYWNyb1NhY2NhZGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRNYWNyb1NhY2NhZGUobGF5ZXJOYW1lKSB7XFxuICAgICAgdmFyIGxheWVyID0gdGhpcy5fbWFuYWdlZExheWVyc1tsYXllck5hbWVdO1xcbiAgICAgIHZhciBtYWNyb1NhY2NhZGUgPSBsYXllci5tYWNyb1NhY2NhZGU7XFxuICAgICAgdmFyIG1hY3JvU2FjY2FkZVdhaXRSYW5nZTsgLy8gSW5jcmVhc2UgcmFuZG9tIHZhbHVlIHJhbmdlIHdoZW4gbm90IGZvY3VzZWQgb24gYSB0YXJnZXRcXG5cXG4gICAgICBpZiAoIXRoaXMuX3RhcmdldCkge1xcbiAgICAgICAgbWFjcm9TYWNjYWRlV2FpdFJhbmdlID0gTWFjcm9TYWNjYWRlV2FpdFJhbmdlc1tcImRlZmF1bHRcIl07IC8vIE5vcm1hbCBodW1hbiBob3Jpem9udGFsIGV5ZSByb3RhdGlvbiBsaW1pdCBpcyBhYm91dCAzNSBkZWdyZWVzXFxuXFxuICAgICAgICB2YXIgaExpbWl0ID0gY29yZV9VdGlscy5nZXRSYW5kb21GbG9hdCguMTQzLCAuMjg2KTtcXG4gICAgICAgIHZhciBoRmFjdG9yID0gY29yZV9VdGlscy5nZXRSYW5kb21GbG9hdCgtaExpbWl0LCBoTGltaXQpO1xcbiAgICAgICAgbWFjcm9TYWNjYWRlLmggPSBoRmFjdG9yICogMzU7IC8vIE5vcm1hbCBodW1hbiB2ZXJ0aWNhbCBleWUgcm90YXRpb24gbGltaXQgaXMgYWJvdXQgMjUgZGVncmVlcyB1cHdhcmQgYW5kIDMwIGRlZ3JlZXMgZG93bndhcmRcXG5cXG4gICAgICAgIHZhciB2TGltaXQgPSBjb3JlX1V0aWxzLmdldFJhbmRvbUZsb2F0KC4wOTMsIC4xODYpO1xcbiAgICAgICAgdmFyIHZGYWN0b3IgPSBjb3JlX1V0aWxzLmdldFJhbmRvbUZsb2F0KC12TGltaXQsIHZMaW1pdCk7XFxuICAgICAgICBtYWNyb1NhY2NhZGUudiA9IHZGYWN0b3IgPiAwID8gdkZhY3RvciAqIDI1IDogdkZhY3RvciAqIDMwO1xcbiAgICAgIH0gLy8gUGljayBhIG5ldyBmYWNlIHRhcmdldFxcbiAgICAgIGVsc2Uge1xcbiAgICAgICAgLy8gU29jaWFsIHRyaWFuZ2xlIC0gc2FjY2FkZSBiZXR3ZWVuIGV5ZXMgYW5kIG1vdXRoLCB3ZWlnaHRlZCB0byBsb29rIGF0IGV5ZXMgbW9yZSBvZnRlblxcbiAgICAgICAgc3dpdGNoIChsYXllci5zYWNjYWRlVGFyZ2V0KSB7XFxuICAgICAgICAgIGNhc2UgMTpcXG4gICAgICAgICAgICBtYWNyb1NhY2NhZGVXYWl0UmFuZ2UgPSBNYWNyb1NhY2NhZGVXYWl0UmFuZ2VzLmV5ZVRhcmdldDtcXG4gICAgICAgICAgICBsYXllci5zYWNjYWRlVGFyZ2V0ID0gTWF0aC5yYW5kb20oKSA8IDAuNzUgPyBGYWNlVGFyZ2V0VHlwZXMuRXllUmlnaHQgOiBGYWNlVGFyZ2V0VHlwZXMuTW91dGg7XFxuICAgICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICAgIGNhc2UgMjpcXG4gICAgICAgICAgICBtYWNyb1NhY2NhZGVXYWl0UmFuZ2UgPSBNYWNyb1NhY2NhZGVXYWl0UmFuZ2VzLmV5ZVRhcmdldDtcXG4gICAgICAgICAgICBsYXllci5zYWNjYWRlVGFyZ2V0ID0gTWF0aC5yYW5kb20oKSA8IDAuNzUgPyBGYWNlVGFyZ2V0VHlwZXMuRXllTGVmdCA6IEZhY2VUYXJnZXRUeXBlcy5Nb3V0aDtcXG4gICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgY2FzZSAzOlxcbiAgICAgICAgICAgIG1hY3JvU2FjY2FkZVdhaXRSYW5nZSA9IE1hY3JvU2FjY2FkZVdhaXRSYW5nZXMubW91dGhUYXJnZXQ7XFxuICAgICAgICAgICAgbGF5ZXIuc2FjY2FkZVRhcmdldCA9IE1hdGgucmFuZG9tKCkgPCAwLjUgPyBGYWNlVGFyZ2V0VHlwZXMuRXllTGVmdCA6IEZhY2VUYXJnZXRUeXBlcy5FeWVSaWdodDtcXG4gICAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgICAgY2FzZSAwOlxcbiAgICAgICAgICBkZWZhdWx0OlxcbiAgICAgICAgICAgIG1hY3JvU2FjY2FkZVdhaXRSYW5nZSA9IE1hY3JvU2FjY2FkZVdhaXRSYW5nZXMuZXllVGFyZ2V0O1xcbiAgICAgICAgICAgIGxheWVyLnNhY2NhZGVUYXJnZXQgPSBNYXRoLnJhbmRvbSgpIDwgMC41ID8gRmFjZVRhcmdldFR5cGVzLkV5ZUxlZnQgOiBGYWNlVGFyZ2V0VHlwZXMuRXllUmlnaHQ7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YXIgX3RoaXMkX2dldEZhY2VUYXJnZXRBID0gdGhpcy5fZ2V0RmFjZVRhcmdldEFuZ2xlcyhsYXllci5zYWNjYWRlVGFyZ2V0KSxcXG4gICAgICAgICAgICBoID0gX3RoaXMkX2dldEZhY2VUYXJnZXRBLmgsXFxuICAgICAgICAgICAgdiA9IF90aGlzJF9nZXRGYWNlVGFyZ2V0QS52O1xcblxcbiAgICAgICAgbWFjcm9TYWNjYWRlLmggPSBoO1xcbiAgICAgICAgbWFjcm9TYWNjYWRlLnYgPSB2O1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl91cGRhdGVMYXllclNwZWVkKGxheWVyTmFtZSwgbWFjcm9TYWNjYWRlLmgsIG1hY3JvU2FjY2FkZS52KTsgLy8gUmVzdGFydCB0aGUgdGltZXJzXFxuXFxuXFxuICAgICAgdGhpcy5faW5pdGlhbGl6ZU1pY3JvVGltZXIuYXBwbHkodGhpcywgW2xheWVyTmFtZV0uY29uY2F0KFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfdG9Db25zdW1hYmxlQXJyYXkoTWljcm9TYWNjYWRlV2FpdFJhbmdlcy5wb3N0TWFjcm8pKSk7XFxuXFxuICAgICAgdGhpcy5faW5pdGlhbGl6ZU1hY3JvVGltZXIuYXBwbHkodGhpcywgW2xheWVyTmFtZV0uY29uY2F0KFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfdG9Db25zdW1hYmxlQXJyYXkobWFjcm9TYWNjYWRlV2FpdFJhbmdlKSkpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBTdGFydCBhIG5ldyB3YWl0IHRpbWVyIHRoYXQgd2lsbCBzZXQgYSBuZXcgbWljcm8gc2FjY2FkZSBtb3ZlbWVudCB3aGVuIGl0XFxyXFxuICAgICAqIHJlc29sdmVzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdGhhdCBvd25zIHRoZSBzYWNjYWRlIG1vdGlvbi5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbldhaXRUaW1lIC0gTWluaW11bSBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUgYSBuZXcgc2FjY2FkZVxcclxcbiAgICAgKiB3aWxsIGJlIHRyaWdnZXJlZC5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFdhaXRUaW1lIC0gTWF4aW11bSBudW1iZXIgb2Ygc2Vjb25kcyBiZWZvcmUgYSBuZXcgc2FjY2FkZVxcclxcbiAgICAgKiB3aWxsIGJlIHRyaWdnZXJlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfaW5pdGlhbGl6ZU1pY3JvVGltZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0aWFsaXplTWljcm9UaW1lcihsYXllck5hbWUsIG1pbldhaXRUaW1lLCBtYXhXYWl0VGltZSkge1xcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICAgIHZhciBsYXllciA9IHRoaXMuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXTtcXG4gICAgICB2YXIgd2FpdFRpbWUgPSBjb3JlX1V0aWxzLmdldFJhbmRvbUZsb2F0KG1pbldhaXRUaW1lLCBtYXhXYWl0VGltZSk7XFxuXFxuICAgICAgaWYgKGxheWVyLm1pY3JvU2FjY2FkZVRpbWVyKSB7XFxuICAgICAgICBsYXllci5taWNyb1NhY2NhZGVUaW1lci5jYW5jZWwoKTtcXG4gICAgICB9XFxuXFxuICAgICAgbGF5ZXIubWljcm9TYWNjYWRlVGltZXIgPSBjb3JlX1V0aWxzLndhaXQod2FpdFRpbWUsIHtcXG4gICAgICAgIG9uRmluaXNoOiBmdW5jdGlvbiBvbkZpbmlzaCgpIHtcXG4gICAgICAgICAgX3RoaXMzLl9zZXRNaWNyb1NhY2NhZGUobGF5ZXJOYW1lKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RhcnQgYSBuZXcgd2FpdCB0aW1lciB0aGF0IHdpbGwgc2V0IGEgbmV3IG1hY3JvIHNhY2NhZGUgbW92ZW1lbnQgd2hlbiBpdFxcclxcbiAgICAgKiByZXNvbHZlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyTmFtZSAtIE5hbWUgb2YgdGhlIGxheWVyIHRoYXQgb3ducyB0aGUgc2FjY2FkZSBtb3Rpb24uXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5XYWl0VGltZSAtIE1pbmltdW0gbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIGEgbmV3IHNhY2NhZGVcXHJcXG4gICAgICogd2lsbCBiZSB0cmlnZ2VyZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhXYWl0VGltZSAtIE1heGltdW0gbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIGEgbmV3IHNhY2NhZGVcXHJcXG4gICAgICogd2lsbCBiZSB0cmlnZ2VyZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2luaXRpYWxpemVNYWNyb1RpbWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZU1hY3JvVGltZXIobGF5ZXJOYW1lLCBtaW5XYWl0VGltZSwgbWF4V2FpdFRpbWUpIHtcXG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcXG5cXG4gICAgICB2YXIgbGF5ZXIgPSB0aGlzLl9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV07XFxuICAgICAgdmFyIHdhaXRUaW1lID0gY29yZV9VdGlscy5nZXRSYW5kb21GbG9hdChtaW5XYWl0VGltZSwgbWF4V2FpdFRpbWUpO1xcblxcbiAgICAgIGlmIChsYXllci5tYWNyb1NhY2NhZGVUaW1lcikge1xcbiAgICAgICAgbGF5ZXIubWFjcm9TYWNjYWRlVGltZXIuY2FuY2VsKCk7XFxuICAgICAgfVxcblxcbiAgICAgIGxheWVyLm1hY3JvU2FjY2FkZVRpbWVyID0gY29yZV9VdGlscy53YWl0KHdhaXRUaW1lLCB7XFxuICAgICAgICBvbkZpbmlzaDogZnVuY3Rpb24gb25GaW5pc2goKSB7XFxuICAgICAgICAgIF90aGlzNC5fc2V0TWFjcm9TYWNjYWRlKGxheWVyTmFtZSk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFNldHMgYSBuZXcgdGFyZ2V0IHRvIGxvb2sgYXQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fG51bGx9IHRhcmdldCAtIFRoZSBuZXcgdGFyZ2V0IHRvIGxvb2sgYXQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0VGFyZ2V0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUYXJnZXQodGFyZ2V0KSB7XFxuICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEZpbmRzIGFuIG9iamVjdCBnaXZlbiBpdHMgbmFtZSBhbmQgc2V0cyBpdCBhcyB0aGUgbmV3IHRhcmdldCB0byBsb29rIGF0LlxcclxcbiAgICAgKiBTaG91bGQgYmUgb3ZlcmxvYWRlZCBmb3IgZWFjaCByZW5kZXJpbmcgZW5naW5lIGltcGxlbWVudGF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IC0gTmFtZSB0byBzZWFyY2ggZm9yLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNldFRhcmdldEJ5TmFtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VGFyZ2V0QnlOYW1lKG5hbWUpIHtcXG4gICAgICBpZiAoIW5hbWUpIHtcXG4gICAgICAgIHRoaXMuX3RhcmdldCA9IG51bGw7XFxuICAgICAgfVxcblxcbiAgICAgIGlmICghdGhpcy5fc2NlbmUpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgUG9pbnRPZkludGVyZXN0RmVhdHVyZSB0YXJnZXQgdXNpbmcgbmFtZSBcIi5jb25jYXQobmFtZSwgXCIgb24gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBTY2VuZSBtdXN0IGJlIGRlZmluZWQuXCIpKTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEZpbmRzIGFuIG9iamVjdCBnaXZlbiBpdHMgaWQgYW5kIHNldHMgaXQgYXMgdGhlIG5ldyB0YXJnZXQgdG8gbG9vayBhdC5cXHJcXG4gICAgICogU2hvdWxkIGJlIG92ZXJsb2FkZWQgZm9yIGVhY2ggcmVuZGVyaW5nIGVuZ2luZSBpbXBsZW1lbnRhdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB0YXJnZXQgLSBJZCB0byBzZWFyY2ggZm9yLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNldFRhcmdldEJ5SWRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRhcmdldEJ5SWQoaWQpIHtcXG4gICAgICBpZiAoIWlkKSB7XFxuICAgICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoIXRoaXMuX3NjZW5lKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc2V0IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmUgdGFyZ2V0IHVzaW5nIGlkIFwiLmNvbmNhdChpZCwgXCIgb24gaG9zdCBcIikuY29uY2F0KHRoaXMuX2hvc3QuaWQsIFwiLiBTY2VuZSBtdXN0IGJlIGRlZmluZWQuXCIpKTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0YXJ0IGtlZXBpbmcgdHJhY2sgb2YgYW4gYW5pbWF0aW9uIGxheWVyIHRoYXQgb3ducyBhIGJsZW5kMmQgYW5pbWF0aW9uIHdpdGhcXHJcXG4gICAgICogYmxlbmRXZWlnaHRzIGNvcnJlc3BvbmRpbmcgdG8gaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgbG9vayBhbmdsZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllck5hbWUgLSBOYW1lIG9mIHRoZSBsYXllciB0byBrZWVwIHRyYWNrIG9mLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgbGF5ZXIuXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hbmltYXRpb24gPSBcXCdsb29rXFwnXSAtIE5hbWUgb2YgdGhlIGFuaW1hdGlvbiBvbiB0aGVcXHJcXG4gICAgICogbGF5ZXIgd2hvc2UgYmxlbmRXZWlnaHRzIHdpbGwgYmUgZHJpdmVuIGJhc2VkIG9uIHRoZSBhbmdsZSBiZXR3ZWVuIHRoZSBsb29rVHJhY2tlclxcclxcbiAgICAgKiBhbmQgdGhlIGxvb2tUYXJnZXQuIFRoaXMgYW5pbWF0aW9uIG11c3QgYmUgb2YgdHlwZSBibGVuZDJkLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4U3BlZWQgPSAyNV0gLSBUaGUgbWF4aW11bSBzcGVlZCBhdCB3aGljaCB0aGUgYmxlbmQyZFxcclxcbiAgICAgKiBibGVuZFdlaWdodHMgY2FuIGJlIG1hbmlwdWxhdGVkLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZm9yd2FyZEF4aXMgPSBcXCdQb3NpdGl2ZVpcXCddIC0gQXhpcyBwb2ludGluZyBmcm9tIHRoZVxcclxcbiAgICAgKiBmcm9udCBvZiB0aGUgbG9va1JlZmVyZW5jZSBvYmplY3QuIFZhbGlkIG9wdGlvbnMgYXJlIFxcJ1Bvc2l0aXZlWFxcJywgXFwnTmVnYXRpdmVYXFwnLFxcclxcbiAgICAgKiBcXCdQb3NpdGl2ZVlcXCcsIFxcJ05lZ2F0aXZlWVxcJywgXFwnUG9zaXRpdmVaXFwnLCBcXCdOZWdhdGl2ZVpcXCcuXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucy5sb29rUmVmZXJlbmNlIC0gM0QgdHJhbnNmb3JtYXRpb24gbm9kZSB0aGF0IHRoZSBsb29rVHJhY2tlclxcclxcbiAgICAgKiByb3RhdGlvbiBsaW1pdHMgc2hvdWxkIGJlIGNhbGN1bGF0ZWQgcmVsYXRpdmUgdG8uIERlZmF1bHRzIHRvIHRoZSBob3N0IG93bmVyLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGFzU2FjY2FkZSA9IGZhbHNlXSAtIFdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGVcXHJcXG4gICAgICogc2FjY2FkaWMgbW90aW9uIG9udG8gdGhlIGJsZW5kV2VpZ2h0IGFuaW1hdGlvbi4gVGhpcyBzaG91bGQgb25seSBiZSBzZXQgdG9cXHJcXG4gICAgICogdHJ1ZSBmb3IgYmxlbmQyZCBhbmltYXRpb25zIHJlcHJlc2VudGluZyBleWUgYW5pbWF0aW9uLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcj19IFtvcHRpb25zLmJsZW5kVGltZT1bUG9pbnRPZkludGVyZXN0RmVhdHVyZS5ERUZBVUxUX0xBWUVSX09QVElPTlMuYmxlbmRUaW1lXXtAbGluayBQb2ludE9mSW50ZXJlc3RGZWF0dXJlI0RFRkFVTFRfTEFZRVJfT1BUSU9OUyNibGVuZFRpbWV9XSAtXFxyXFxuICAgICAqIERlZmF1bHQgYW1vdW50IG9mIHRpbWUgdG8gdXNlIHdoZW4gbWFuaXB1bGF0aW5nIGxheWVyIHdlaWdodC5cXHJcXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdGlvbnMuZWFzaW5nRm4gLSBEZWZhdWx0IGVhc2luZyBmdW5jdGlvbiB0byB1c2Ugd2hlblxcclxcbiAgICAgKiBtYW5pcHVsYXRpbmcgbGF5ZXIgd2VpZ2h0LlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlZ2lzdGVyTG9va0xheWVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlckxvb2tMYXllcihsYXllck5hbWUpIHtcXG4gICAgICB2YXIgX3JlZjEwID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcXG4gICAgICAgICAgX3JlZjEwJGFuaW1hdGlvbiA9IF9yZWYxMC5hbmltYXRpb24sXFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9yZWYxMCRhbmltYXRpb24gPT09IHZvaWQgMCA/IFxcJ2xvb2tcXCcgOiBfcmVmMTAkYW5pbWF0aW9uLFxcbiAgICAgICAgICBfcmVmMTAkbWF4U3BlZWQgPSBfcmVmMTAubWF4U3BlZWQsXFxuICAgICAgICAgIG1heFNwZWVkID0gX3JlZjEwJG1heFNwZWVkID09PSB2b2lkIDAgPyAyNSA6IF9yZWYxMCRtYXhTcGVlZCxcXG4gICAgICAgICAgcmVmZXJlbmNlID0gX3JlZjEwLnJlZmVyZW5jZSxcXG4gICAgICAgICAgX3JlZjEwJGZvcndhcmRBeGlzID0gX3JlZjEwLmZvcndhcmRBeGlzLFxcbiAgICAgICAgICBmb3J3YXJkQXhpcyA9IF9yZWYxMCRmb3J3YXJkQXhpcyA9PT0gdm9pZCAwID8gXFwnUG9zaXRpdmVaXFwnIDogX3JlZjEwJGZvcndhcmRBeGlzLFxcbiAgICAgICAgICBfcmVmMTAkaGFzU2FjY2FkZSA9IF9yZWYxMC5oYXNTYWNjYWRlLFxcbiAgICAgICAgICBoYXNTYWNjYWRlID0gX3JlZjEwJGhhc1NhY2NhZGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjEwJGhhc1NhY2NhZGUsXFxuICAgICAgICAgIF9yZWYxMCRibGVuZFRpbWUgPSBfcmVmMTAuYmxlbmRUaW1lLFxcbiAgICAgICAgICBibGVuZFRpbWUgPSBfcmVmMTAkYmxlbmRUaW1lID09PSB2b2lkIDAgPyBQb2ludE9mSW50ZXJlc3RGZWF0dXJlLkRFRkFVTFRfTEFZRVJfT1BUSU9OUy5ibGVuZFRpbWUgOiBfcmVmMTAkYmxlbmRUaW1lLFxcbiAgICAgICAgICBlYXNpbmdGbiA9IF9yZWYxMC5lYXNpbmdGbjtcXG5cXG4gICAgICAvLyBWYWxpZGF0ZSByZWZlcmVuY2Ugb2JqZWN0XFxuICAgICAgcmVmZXJlbmNlID0gcmVmZXJlbmNlIHx8IHRoaXMuX2hvc3Qub3duZXI7XFxuXFxuICAgICAgaWYgKCF0aGlzLmNvbnN0cnVjdG9yLl92YWxpZGF0ZVRyYW5zZm9ybU9iamVjdChyZWZlcmVuY2UpKSB7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaW5pdGlhbGl6ZSByZWdpc3RlciBsb29rIGxheWVyIFwiLmNvbmNhdChsYXllck5hbWUsIFwiIGZvciBQb2ludE9mSW50ZXJlc3RGZWF0dXJlIG9uIGhvc3QgXCIpLmNvbmNhdCh0aGlzLl9ob3N0LmlkLCBcIi4gUmVmZXJlbmNlIG11c3QgYmUgZGVmaW5lZCBhcyBhIHZhbGlkIHRyYW5zZm9ybWF0aW9uIG9iamVjdC5cIikpO1xcbiAgICAgIH0gLy8gRmluZCB2ZWN0b3IgYXNzb2NpYXRlZCB3aXRoIGF4aXMgc3RyaW5nXFxuXFxuXFxuICAgICAgZm9yd2FyZEF4aXMgPSBBeGlzTWFwW2ZvcndhcmRBeGlzXSAhPT0gdW5kZWZpbmVkID8gQXhpc01hcFtmb3J3YXJkQXhpc10gOiBBeGlzTWFwLlBvc2l0aXZlWjsgLy8gU3RvcmUgdHJhY2tpbmcgY29uZmlndXJhdGlvblxcblxcbiAgICAgIHZhciB0cmFja2luZ0NvbmZpZyA9IHRoaXMuX2FkZFRyYWNraW5nQ29uZmlnKHtcXG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxcbiAgICAgICAgZm9yd2FyZEF4aXM6IGZvcndhcmRBeGlzXFxuICAgICAgfSk7IC8vIFJlZ2lzdGVyIHRoZSBsYXllciBhbmQgYW5pbWF0aW9uXFxuXFxuXFxuICAgICAgdGhpcy5yZWdpc3RlckxheWVyKGxheWVyTmFtZSwge1xcbiAgICAgICAgdHJhY2tpbmdDb25maWc6IHRyYWNraW5nQ29uZmlnLFxcbiAgICAgICAgbWF4U3BlZWQ6IG1heFNwZWVkLFxcbiAgICAgICAgbWF4SFNwZWVkOiB1bmRlZmluZWQsXFxuICAgICAgICBtYXhWU3BlZWQ6IHVuZGVmaW5lZCxcXG4gICAgICAgIGhEdXJhdGlvbjogdW5kZWZpbmVkLFxcbiAgICAgICAgdkR1cmF0aW9uOiB1bmRlZmluZWQsXFxuICAgICAgICBoVmVsb2NpdHk6IFswLCAwXSxcXG4gICAgICAgIHZWZWxvY2l0eTogWzAsIDBdLFxcbiAgICAgICAgaGFzU2FjY2FkZTogaGFzU2FjY2FkZSxcXG4gICAgICAgIGJsZW5kVGltZTogYmxlbmRUaW1lLFxcbiAgICAgICAgZWFzaW5nRm46IGVhc2luZ0ZuLFxcbiAgICAgICAgbWljcm9TYWNjYWRlOiB7XFxuICAgICAgICAgIGg6IDAsXFxuICAgICAgICAgIHY6IDBcXG4gICAgICAgIH0sXFxuICAgICAgICBtYWNyb1NhY2NhZGU6IHtcXG4gICAgICAgICAgaDogMCxcXG4gICAgICAgICAgdjogMFxcbiAgICAgICAgfSxcXG4gICAgICAgIHNhY2NhZGVUYXJnZXQ6IEZhY2VUYXJnZXRUeXBlcy5FeWVDZW50ZXIsXFxuICAgICAgICBhbmltYXRpb25zOiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2RlZmluZVByb3BlcnR5KHt9LCBhbmltYXRpb24sIHt9KVxcbiAgICAgIH0pO1xcbiAgICAgIHRoaXMuX2xvb2tMYXllcnNbbGF5ZXJOYW1lXSA9IGFuaW1hdGlvbjsgLy8gVmFsaWRhdGUgdGhlIGxvb2sgYW5pbWF0aW9uXFxuXFxuICAgICAgdGhpcy5fcmVnaXN0ZXJMb29rQW5pbWF0aW9uKGxheWVyTmFtZSwgYW5pbWF0aW9uKTsgLy8gSW5pdGlhbGl6ZSBzYWNjYWRlIHRpbWVyc1xcblxcblxcbiAgICAgIGlmIChoYXNTYWNjYWRlKSB7XFxuICAgICAgICB2YXIgbWFjcm9TYWNjYWRlV2FpdFJhbmdlID0gdGhpcy5fdGFyZ2V0ID8gTWFjcm9TYWNjYWRlV2FpdFJhbmdlcy5leWVUYXJnZXQgOiBNYWNyb1NhY2NhZGVXYWl0UmFuZ2VzW1wiZGVmYXVsdFwiXTtcXG5cXG4gICAgICAgIHRoaXMuX2luaXRpYWxpemVNaWNyb1RpbWVyLmFwcGx5KHRoaXMsIFtsYXllck5hbWVdLmNvbmNhdChQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3RvQ29uc3VtYWJsZUFycmF5KE1pY3JvU2FjY2FkZVdhaXRSYW5nZXNbXCJkZWZhdWx0XCJdKSkpO1xcblxcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZU1hY3JvVGltZXIuYXBwbHkodGhpcywgW2xheWVyTmFtZV0uY29uY2F0KFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfdG9Db25zdW1hYmxlQXJyYXkobWFjcm9TYWNjYWRlV2FpdFJhbmdlKSkpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RhcnQga2VlcGluZyB0cmFjayBvZiBhbiBhbmltYXRpb24gbGF5ZXIgdGhhdCBvd25zIGEgYmxpbmsgYW5pbWF0aW9uLiBCbGlua1xcclxcbiAgICAgKiBhbmltYXRpb25zIGNhbiBiZSBvZiBhbnkgdHlwZSwgYnV0IGlmIGl0IGlzIG9mIHR5cGUgcmFuZG9tQW5pbWF0aW9uIHRoZW4gYVxcclxcbiAgICAgKiBpdCB3aWxsIGJlIHJhbmRvbWl6ZWQgZWFjaCB0aW1lIGEgYmxpbmsgaXMgY2FsbGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXJOYW1lIC0gTmFtZSBvZiB0aGUgbGF5ZXIgdG8ga2VlcCB0cmFjayBvZi5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGxheWVyLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYW5pbWF0aW9uID0gXFwnYmxpbmtcXCddIC0gTmFtZSBvZiB0aGUgYmxpbmsgYW5pbWF0aW9uXFxyXFxuICAgICAqIG9uIHRoZSBsYXllci5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJsZW5kVGltZT1bUG9pbnRPZkludGVyZXN0RmVhdHVyZS5ERUZBVUxUX0xBWUVSX09QVElPTlMuYmxlbmRUaW1lXXtAbGluayBQb2ludE9mSW50ZXJlc3RGZWF0dXJlI0RFRkFVTFRfTEFZRVJfT1BUSU9OUyNibGVuZFRpbWV9XSAtXFxyXFxuICAgICAqIERlZmF1bHQgYW1vdW50IG9mIHRpbWUgdG8gdXNlIHdoZW4gbWFuaXB1bGF0aW5nIHRoZSBsYXllclxcJ3Mgd2VpZ2h0LlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0aW9ucy5lYXNpbmdGbiAtIERlZmF1bHQgZWFzaW5nIGZ1bmN0aW9uIHRvIHVzZSB3aGVuXFxyXFxuICAgICAqIG1hbmlwdWxhdGluZyB0aGUgbGF5ZXJcXCdzIHdlaWdodC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJyZWdpc3RlckJsaW5rTGF5ZXJcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyQmxpbmtMYXllcihsYXllck5hbWUpIHtcXG4gICAgICB2YXIgX3JlZjExID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcXG4gICAgICAgICAgX3JlZjExJGFuaW1hdGlvbiA9IF9yZWYxMS5hbmltYXRpb24sXFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9yZWYxMSRhbmltYXRpb24gPT09IHZvaWQgMCA/IFxcJ2JsaW5rXFwnIDogX3JlZjExJGFuaW1hdGlvbixcXG4gICAgICAgICAgX3JlZjExJGJsZW5kVGltZSA9IF9yZWYxMS5ibGVuZFRpbWUsXFxuICAgICAgICAgIGJsZW5kVGltZSA9IF9yZWYxMSRibGVuZFRpbWUgPT09IHZvaWQgMCA/IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmUuREVGQVVMVF9MQVlFUl9PUFRJT05TLmJsZW5kVGltZSA6IF9yZWYxMSRibGVuZFRpbWUsXFxuICAgICAgICAgIGVhc2luZ0ZuID0gX3JlZjExLmVhc2luZ0ZuO1xcblxcbiAgICAgIC8vIFJlZ2lzdGVyIHRoZSBsYXllciBhbmQgYW5pbWF0aW9uXFxuICAgICAgdGhpcy5yZWdpc3RlckxheWVyKGxheWVyTmFtZSwge1xcbiAgICAgICAgYmxlbmRUaW1lOiBibGVuZFRpbWUsXFxuICAgICAgICBlYXNpbmdGbjogZWFzaW5nRm4sXFxuICAgICAgICBhbmltYXRpb25zOiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX2RlZmluZVByb3BlcnR5KHt9LCBhbmltYXRpb24sIHt9KVxcbiAgICAgIH0pO1xcbiAgICAgIHRoaXMuX2JsaW5rTGF5ZXJzW2xheWVyTmFtZV0gPSBhbmltYXRpb247XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInVwZGF0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKGRlbHRhVGltZSkge1xcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xcblxcbiAgICAgIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0KFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoUG9pbnRPZkludGVyZXN0RmVhdHVyZS5wcm90b3R5cGUpLCBcInVwZGF0ZVwiLCB0aGlzKS5jYWxsKHRoaXMsIGRlbHRhVGltZSk7IC8vIFVwZGF0ZSB0aGUgbG9vayBhbmdsZXNcXG5cXG5cXG4gICAgICBpZiAodGhpcy5fdGFyZ2V0KSB7XFxuICAgICAgICB0aGlzLl9zZXRMb29rQW5nbGVzKCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRoaXMuX3Jlc2V0TG9va0FuZ2xlcygpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgZGVsdGFTZWNvbmRzID0gTWF0aC5taW4oZGVsdGFUaW1lLCBNYXhEZWx0YSkgLyAxMDAwO1xcbiAgICAgIHZhciB0cmlnZ2VyQmxpbmsgPSBmYWxzZTsgLy8gU2V0IGxvb2sgYmxlbmQgdmFsdWVzXFxuXFxuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5fbG9va0xheWVycykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjEyKSB7XFxuICAgICAgICB2YXIgX3JlZjEzID0gUG9pbnRPZkludGVyZXN0RmVhdHVyZV9zbGljZWRUb0FycmF5KF9yZWYxMiwgMiksXFxuICAgICAgICAgICAgbGF5ZXJOYW1lID0gX3JlZjEzWzBdLFxcbiAgICAgICAgICAgIGFuaW1OYW1lID0gX3JlZjEzWzFdO1xcblxcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBfdGhpczUuX21hbmFnZWRMYXllcnNbbGF5ZXJOYW1lXTsgLy8gSW5jcmVtZW50IHRoZSBzYWNjYWRlIHRpbWVyc1xcblxcbiAgICAgICAgaWYgKG9wdGlvbnMuaXNBY3RpdmUgJiYgb3B0aW9ucy5oYXNTYWNjYWRlKSB7XFxuICAgICAgICAgIG9wdGlvbnMubWljcm9TYWNjYWRlVGltZXIuZXhlY3V0ZShkZWx0YVRpbWUpO1xcbiAgICAgICAgICBvcHRpb25zLm1hY3JvU2FjY2FkZVRpbWVyLmV4ZWN1dGUoZGVsdGFUaW1lKTtcXG4gICAgICAgIH0gLy8gU2V0IHRoZSBibGVuZCB2YWx1ZXNcXG5cXG5cXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbnNbYW5pbU5hbWVdLmlzQWN0aXZlKSB7XFxuICAgICAgICAgIHZhciBjdXJyZW50SCA9IF90aGlzNS5faG9zdC5BbmltYXRpb25GZWF0dXJlLmdldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbU5hbWUsIFxcJ1hcXCcpO1xcblxcbiAgICAgICAgICB2YXIgY3VycmVudFYgPSBfdGhpczUuX2hvc3QuQW5pbWF0aW9uRmVhdHVyZS5nZXRBbmltYXRpb25CbGVuZFdlaWdodChsYXllck5hbWUsIGFuaW1OYW1lLCBcXCdZXFwnKTtcXG5cXG4gICAgICAgICAgdmFyIHRhcmdldEggPSBvcHRpb25zLnRyYWNraW5nQ29uZmlnLmFuZ2xlcy5oO1xcbiAgICAgICAgICB2YXIgdGFyZ2V0ViA9IG9wdGlvbnMudHJhY2tpbmdDb25maWcuYW5nbGVzLnY7IC8vIENoZWNrIGlmIHRoZSBsb29rIGFuZ2xlIGhhcyBjaGFuZ2VkIGVub3VnaCB0byB0cmlnZ2VyIGEgYmxpbmtcXG5cXG4gICAgICAgICAgaWYgKF90aGlzNS5faXNUYXJnZXRNb3ZpbmcgJiYgIXRyaWdnZXJCbGluaykge1xcbiAgICAgICAgICAgIHZhciBwcmV2VGFyZ2V0SCA9IG9wdGlvbnMudHJhY2tpbmdDb25maWcucHJldkFuZ2xlcy5oO1xcbiAgICAgICAgICAgIHZhciBwcmV2VGFyZ2V0ViA9IG9wdGlvbnMudHJhY2tpbmdDb25maWcucHJldkFuZ2xlcy52O1xcbiAgICAgICAgICAgIHZhciBjaGFuZ2VBbW91bnQgPSBjb3JlX01hdGhVdGlscy50b0RlZ3JlZXMoY29yZV9NYXRoVXRpbHMuZ2V0QW5nbGVCZXR3ZWVuKFtwcmV2VGFyZ2V0SCwgcHJldlRhcmdldFZdLCBbdGFyZ2V0SCwgdGFyZ2V0Vl0pKTtcXG5cXG4gICAgICAgICAgICBpZiAoY2hhbmdlQW1vdW50ID49IEJsaW5rVGhyZXNob2xkKSB7XFxuICAgICAgICAgICAgICB0cmlnZ2VyQmxpbmsgPSB0cnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBvcHRpb25zLnRyYWNraW5nQ29uZmlnLnByZXZBbmdsZXMuaCA9IHRhcmdldEg7XFxuICAgICAgICAgIG9wdGlvbnMudHJhY2tpbmdDb25maWcucHJldkFuZ2xlcy52ID0gdGFyZ2V0VjsgLy8gQWRkIGluIHRoZSBzYWNjYWRlIG1vdmVtZW50XFxuXFxuICAgICAgICAgIGlmIChvcHRpb25zLmhhc1NhY2NhZGUpIHtcXG4gICAgICAgICAgICBjb3JlX01hdGhVdGlscy5kYW1wVmFsdWUoMCwgb3B0aW9ucy5tYWNyb1NhY2NhZGUuaCArIG9wdGlvbnMubWFjcm9TYWNjYWRlLmgsIG9wdGlvbnMuaFZlbG9jaXR5LCBvcHRpb25zLmhEdXJhdGlvbiwgb3B0aW9ucy5tYXhIU3BlZWQpO1xcbiAgICAgICAgICAgIHRhcmdldEggKz0gb3B0aW9ucy5oVmVsb2NpdHlbMF07XFxuICAgICAgICAgICAgY29yZV9NYXRoVXRpbHMuZGFtcFZhbHVlKDAsIG9wdGlvbnMubWFjcm9TYWNjYWRlLnYgKyBvcHRpb25zLm1hY3JvU2FjY2FkZS52LCBvcHRpb25zLnZWZWxvY2l0eSwgb3B0aW9ucy52RHVyYXRpb24sIG9wdGlvbnMubWF4VlNwZWVkKTtcXG4gICAgICAgICAgICB0YXJnZXRWICs9IG9wdGlvbnMudlZlbG9jaXR5WzBdO1xcbiAgICAgICAgICB9IC8vIENsYW1wIHRvIG1heCBzcGVlZFxcblxcblxcbiAgICAgICAgICB2YXIgZmFjdG9yID0gY29yZV9NYXRoVXRpbHMuY2xhbXAoZGVsdGFTZWNvbmRzICogb3B0aW9ucy5tYXhTcGVlZCwgMCwgMSk7XFxuICAgICAgICAgIHRhcmdldEggPSBjb3JlX01hdGhVdGlscy5sZXJwKGN1cnJlbnRILCB0YXJnZXRILCBmYWN0b3IpO1xcbiAgICAgICAgICB0YXJnZXRWID0gY29yZV9NYXRoVXRpbHMubGVycChjdXJyZW50ViwgdGFyZ2V0ViwgZmFjdG9yKTsgLy8gVXBkYXRlIHRoZSBibGVuZCB2YWx1ZXNcXG5cXG4gICAgICAgICAgX3RoaXM1Ll9ob3N0LkFuaW1hdGlvbkZlYXR1cmUuc2V0QW5pbWF0aW9uQmxlbmRXZWlnaHQobGF5ZXJOYW1lLCBhbmltTmFtZSwgXFwnWFxcJywgdGFyZ2V0SCk7XFxuXFxuICAgICAgICAgIF90aGlzNS5faG9zdC5BbmltYXRpb25GZWF0dXJlLnNldEFuaW1hdGlvbkJsZW5kV2VpZ2h0KGxheWVyTmFtZSwgYW5pbU5hbWUsIFxcJ1lcXCcsIHRhcmdldFYpO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmICghdHJpZ2dlckJsaW5rIHx8ICF0aGlzLl9pc1RhcmdldE1vdmluZykge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gRXhlY3V0ZSBibGlua1xcblxcblxcbiAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX2JsaW5rTGF5ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMTQpIHtcXG4gICAgICAgIHZhciBfcmVmMTUgPSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlX3NsaWNlZFRvQXJyYXkoX3JlZjE0LCAyKSxcXG4gICAgICAgICAgICBsYXllck5hbWUgPSBfcmVmMTVbMF0sXFxuICAgICAgICAgICAgYW5pbU5hbWUgPSBfcmVmMTVbMV07XFxuXFxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gX3RoaXM1Ll9tYW5hZ2VkTGF5ZXJzW2xheWVyTmFtZV0uYW5pbWF0aW9uc1thbmltTmFtZV07XFxuXFxuICAgICAgICBpZiAoYW5pbWF0aW9uLmlzQWN0aXZlKSB7XFxuICAgICAgICAgIF90aGlzNS5faG9zdC5BbmltYXRpb25GZWF0dXJlLnBsYXlBbmltYXRpb24obGF5ZXJOYW1lLCBhbmltTmFtZSk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImluc3RhbGxBcGlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxBcGkoKSB7XFxuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XFxuXFxuICAgICAgLyoqXFxyXFxuICAgICAgICogQGlubmVyXFxyXFxuICAgICAgICogQG5hbWVzcGFjZSBQb2ludE9mSW50ZXJlc3RGZWF0dXJlXFxyXFxuICAgICAgICovXFxuICAgICAgdmFyIGFwaSA9IFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0KFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoUG9pbnRPZkludGVyZXN0RmVhdHVyZS5wcm90b3R5cGUpLCBcImluc3RhbGxBcGlcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhcGksIHtcXG4gICAgICAgIC8qKlxcclxcbiAgICAgICAgICogQG1lbWJlcm9mIFBvaW50T2ZJbnRlcmVzdEZlYXR1cmVcXHJcXG4gICAgICAgICAqIEBpbnN0YW5jZVxcclxcbiAgICAgICAgICogQHNlZSBjb3JlL1BvaW50T2ZJbnRlcmVzdEZlYXR1cmUjdGFyZ2V0XFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHRhcmdldDoge1xcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM2LnRhcmdldDtcXG4gICAgICAgICAgfSxcXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGFyZ2V0KSB7XFxuICAgICAgICAgICAgX3RoaXM2LnRhcmdldCA9IHRhcmdldDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICAgIE9iamVjdC5hc3NpZ24oYXBpLCB7XFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9Qb2ludE9mSW50ZXJlc3RGZWF0dXJlI3JlZ2lzdGVyTG9va0xheWVyXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHJlZ2lzdGVyTG9va0xheWVyOiB0aGlzLnJlZ2lzdGVyTG9va0xheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9Qb2ludE9mSW50ZXJlc3RGZWF0dXJlI3JlZ2lzdGVyQmxpbmtMYXllclxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZWdpc3RlckJsaW5rTGF5ZXI6IHRoaXMucmVnaXN0ZXJCbGlua0xheWVyLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9Qb2ludE9mSW50ZXJlc3RGZWF0dXJlI3NldFRhcmdldFxcclxcbiAgICAgICAgICovXFxuICAgICAgICBzZXRUYXJnZXQ6IHRoaXMuc2V0VGFyZ2V0LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9Qb2ludE9mSW50ZXJlc3RGZWF0dXJlI3NldFRhcmdldEJ5TmFtZVxcclxcbiAgICAgICAgICovXFxuICAgICAgICBzZXRUYXJnZXRCeU5hbWU6IHRoaXMuc2V0VGFyZ2V0QnlOYW1lLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb2ludE9mSW50ZXJlc3RGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgY29yZS9Qb2ludE9mSW50ZXJlc3RGZWF0dXJlI3NldFRhcmdldEJ5SWRcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgc2V0VGFyZ2V0QnlJZDogdGhpcy5zZXRUYXJnZXRCeUlkLmJpbmQodGhpcylcXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gYXBpO1xcbiAgICB9XFxuICB9XSwgW3tcXG4gICAga2V5OiBcIl9nZXRXb3JsZFBvc2l0aW9uXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0V29ybGRQb3NpdGlvbihvYmopIHtcXG4gICAgICByZXR1cm4gWzAsIDAsIDBdO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXR1cm4gYSBtYXRyaXggcmVwcmVzZW50aW5nIHRoZSBnbG9iYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IG9mIGFuIG9iamVjdC5cXHJcXG4gICAgICogU2hvdWxkIGJlIG92ZXJsb2FkZWQgZm9yIGVhY2ggcmVuZGVyaW5nIGVuZ2luZSBpbXBsZW1lbnRhdGlvbi5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHthbnl9IG9iaiAtIEVuZ2luZS1zcGVjaWZpYyAzRCB0cmFuc2Zvcm0gb2JqZWN0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPG51bWJlcj59IC0gQW4gYXJyYXkgY29uc2lzdGluZyBvZiAxNiBudW1iZXJzIHJlcHJlc2VudGluZ1xcclxcbiAgICAgKiB0aGUgM2QgdHJhbnNmb3JtYXRpb24uXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2dldFdvcmxkTWF0cml4XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0V29ybGRNYXRyaXgob2JqKSB7XFxuICAgICAgcmV0dXJuIFsxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxXTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUm90YXRlIHRoZSBnaXZlbiBsb2NhbCBkaXJlY3Rpb24gdmVjdG9yIGJ5IHRoZSBvYmplY3RcXCdzIHdvcmxkIHJvdGF0aW9uIG1hdHJpeC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHthbnl9IG9iaiAtIEVuZ2luZS1zcGVjaWZpYyAzRCB0cmFuc2Zvcm0gb2JqZWN0LlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBmb3J3YXJkVmVjdG9yIC0gVW5pdCB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBsb2NhbFxcclxcbiAgICAgKiBmb3J3YXJkIGRpcmVjdGlvbiBvZiB0aGUgb2JqZWN0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkuPG51bWJlcj59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2dldE9iamVjdERpcmVjdGlvblwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE9iamVjdERpcmVjdGlvbihvYmopIHtcXG4gICAgICB2YXIgZm9yd2FyZFZlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogQXhpc01hcC5Qb3NpdGl2ZVo7XFxuICAgICAgdmFyIHJvdGF0aW9uID0gY29yZV9NYXRoVXRpbHMuZ2V0Um90YXRpb25NYXRyaXgodGhpcy5fZ2V0V29ybGRNYXRyaXgob2JqKSk7XFxuICAgICAgcmV0dXJuIGNvcmVfTWF0aFV0aWxzLnJvdGF0ZVZlY3Rvcihmb3J3YXJkVmVjdG9yLCByb3RhdGlvbik7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENhbGN1bGF0ZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBsb29rIGFuZ2xlcyBpbiBkZWdyZWVzIGdpdmVuIHNwaGVyaWNhbCB0aGV0YVxcclxcbiAgICAgKiBhbmQgcGhpIGFuZ2xlcyBpbiByYWRpYW5zLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGhldGEgLSBWZXJ0aWNhbC9wb2xhciBhbmdsZSBpbiByYWRpYW5zIHdoZXJlIDAgcG9pbnRzIGRpcmVjdGx5XFxyXFxuICAgICAqIGFsb25nIHBvc2l0aXZlIFkgYXhpcy5cXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBoaSAtIEhvcml6b250YWwvYXppbXV0aGFsIGFuZ2xlIGluIHJhZGlhbnMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IC0gQW4gb2JqZWN0IHdpdGggdGhlIHNpZ25hdHVyZSB7aDogbnVtYmVyLCB2OiBudW1iZXJ9IHdoZXJlXFxyXFxuICAgICAqIGggcmVwcmVzZW50cyBob3Jpem9udGFsIHJvdGF0aW9uIGluIGRlZ3JlZXMgYW5kIHYgcmVwcmVzZW50cyB2ZXJ0aWNhbCByb3RhdGlvblxcclxcbiAgICAgKiBpbiBkZWdyZWVzLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zcGhlcmljYWxUb0JsZW5kVmFsdWVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zcGhlcmljYWxUb0JsZW5kVmFsdWUodGhldGEsIHBoaSkge1xcbiAgICAgIHZhciBoID0gY29yZV9NYXRoVXRpbHMudG9EZWdyZWVzKHBoaSk7IC8vIE9mZnNldCB0aGUgdmVydGljYWwgYW5nbGUgc28gMCBpcyBwb2ludGluZyBmb3J3YXJkIGluc3RlYWQgb2YgdXBcXG5cXG4gICAgICB2YXIgdiA9IGNvcmVfTWF0aFV0aWxzLnRvRGVncmVlcyh0aGV0YSkgLSA5MDsgLy8gQ29udmVydCB2ZXJ0aWNhbCBhbmdsZSB0byAtMTgwLCAxODAgcmFuZ2VcXG5cXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgaDogaCxcXG4gICAgICAgIHY6IHZcXG4gICAgICB9O1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJfdmFsaWRhdGVUcmFuc2Zvcm1PYmplY3RcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF92YWxpZGF0ZVRyYW5zZm9ybU9iamVjdChvYmopIHtcXG4gICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgT2JqZWN0O1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gUG9pbnRPZkludGVyZXN0RmVhdHVyZTtcXG59KGNvcmVfQWJzdHJhY3RIb3N0RmVhdHVyZS5taXgoYXdzcGFja19TU01MU3BlZWNobWFya0ludGVyZmFjZS5NaXhpbiwgYW5pbXBhY2tfTWFuYWdlZEFuaW1hdGlvbkxheWVySW50ZXJmYWNlLk1peGluKSk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBjb3JlX1BvaW50T2ZJbnRlcmVzdEZlYXR1cmUgPSAoUG9pbnRPZkludGVyZXN0RmVhdHVyZSk7XFxuXFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYW5pbXBhY2svaW5kZXguanNcXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKipcXHJcXG4gKiBAbW9kdWxlIGNvcmUvYW5pbXBhY2tcXHJcXG4gKi9cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG4vKipcXHJcXG4gKiBAbmFtZXNwYWNlXFxyXFxuICovXFxuXFxudmFyIEVhc2luZyA9IHtcXG4gIC8qKlxcclxcbiAgICogQHNlZSBMaW5lYXJcXHJcXG4gICAqL1xcbiAgTGluZWFyOiBMaW5lYXIsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgUXVhZHJhdGljXFxyXFxuICAgKi9cXG4gIFF1YWRyYXRpYzogUXVhZHJhdGljLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEN1YmljXFxyXFxuICAgKi9cXG4gIEN1YmljOiBDdWJpYyxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBRdWFydGljXFxyXFxuICAgKi9cXG4gIFF1YXJ0aWM6IFF1YXJ0aWMsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgUXVpbnRpY1xcclxcbiAgICovXFxuICBRdWludGljOiBRdWludGljLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIFNpbnVzb2lkYWxcXHJcXG4gICAqL1xcbiAgU2ludXNvaWRhbDogU2ludXNvaWRhbCxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBFeHBvbmVudGlhbFxcclxcbiAgICovXFxuICBFeHBvbmVudGlhbDogRXhwb25lbnRpYWwsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgQ2lyY3VsYXJcXHJcXG4gICAqL1xcbiAgQ2lyY3VsYXI6IENpcmN1bGFyLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEVsYXN0aWNcXHJcXG4gICAqL1xcbiAgRWxhc3RpYzogRWxhc3RpYyxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBCYWNrXFxyXFxuICAgKi9cXG4gIEJhY2s6IEJhY2ssXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgQm91bmNlXFxyXFxuICAgKi9cXG4gIEJvdW5jZTogQm91bmNlXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGFuaW1wYWNrID0gKHtcXG4gIC8qKlxcclxcbiAgICogQHNlZSBjb3JlL0FuaW1hdGlvbkZlYXR1cmVcXHJcXG4gICAqL1xcbiAgQW5pbWF0aW9uRmVhdHVyZTogYW5pbXBhY2tfQW5pbWF0aW9uRmVhdHVyZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBBbmltYXRpb25MYXllclxcclxcbiAgICovXFxuICBBbmltYXRpb25MYXllcjogYW5pbXBhY2tfQW5pbWF0aW9uTGF5ZXIsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgY29yZS9TaW5nbGVTdGF0ZVxcclxcbiAgICovXFxuICBTaW5nbGVTdGF0ZTogc3RhdGVfU2luZ2xlU3RhdGUsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgVHJhbnNpdGlvblN0YXRlXFxyXFxuICAgKi9cXG4gIFRyYW5zaXRpb25TdGF0ZTogc3RhdGVfVHJhbnNpdGlvblN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEZyZWVCbGVuZFN0YXRlXFxyXFxuICAgKi9cXG4gIEZyZWVCbGVuZFN0YXRlOiBzdGF0ZV9GcmVlQmxlbmRTdGF0ZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBRdWV1ZVN0YXRlXFxyXFxuICAgKi9cXG4gIFF1ZXVlU3RhdGU6IHN0YXRlX1F1ZXVlU3RhdGUsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgUmFuZG9tQW5pbWF0aW9uU3RhdGVcXHJcXG4gICAqL1xcbiAgUmFuZG9tQW5pbWF0aW9uU3RhdGU6IHN0YXRlX1JhbmRvbUFuaW1hdGlvblN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEJsZW5kMWRTdGF0ZVxcclxcbiAgICovXFxuICBCbGVuZDFkU3RhdGU6IHN0YXRlX0JsZW5kMWRTdGF0ZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBCbGVuZDJkU3RhdGVcXHJcXG4gICAqL1xcbiAgQmxlbmQyZFN0YXRlOiBzdGF0ZV9CbGVuZDJkU3RhdGUsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgQW5pbWF0aW9uVXRpbHNcXHJcXG4gICAqL1xcbiAgQW5pbWF0aW9uVXRpbHM6IGFuaW1wYWNrX0FuaW1hdGlvblV0aWxzLFxcbiAgRWFzaW5nOiBFYXNpbmcsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgTGF5ZXJCbGVuZE1vZGVzXFxyXFxuICAgKi9cXG4gIExheWVyQmxlbmRNb2RlczogTGF5ZXJCbGVuZE1vZGVzLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIERlZmF1bHRMYXllckJsZW5kTW9kZVxcclxcbiAgICovXFxuICBEZWZhdWx0TGF5ZXJCbGVuZE1vZGU6IERlZmF1bHRMYXllckJsZW5kTW9kZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBBbmltYXRpb25UeXBlc1xcclxcbiAgICovXFxuICBBbmltYXRpb25UeXBlczogQW5pbWF0aW9uVHlwZXNcXG59KTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hd3NwYWNrL1RleHRUb1NwZWVjaFV0aWxzLmpzXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoVXRpbHNfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBUZXh0VG9TcGVlY2hVdGlsc19hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IFRleHRUb1NwZWVjaFV0aWxzX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IFRleHRUb1NwZWVjaFV0aWxzX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgVGV4dFRvU3BlZWNoVXRpbHNfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaFV0aWxzX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoVXRpbHNfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hVdGlsc19hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIFRleHRUb1NwZWVjaFV0aWxzX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaFV0aWxzX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBUZXh0VG9TcGVlY2hVdGlsc19hcnJheVdpdGhIb2xlcyhhcnIpIHx8IFRleHRUb1NwZWVjaFV0aWxzX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgVGV4dFRvU3BlZWNoVXRpbHNfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBUZXh0VG9TcGVlY2hVdGlsc19ub25JdGVyYWJsZVJlc3QoKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaFV0aWxzX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxcXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoVXRpbHNfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBUZXh0VG9TcGVlY2hVdGlsc19hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gVGV4dFRvU3BlZWNoVXRpbHNfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoVXRpbHNfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hVdGlsc19pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoVXRpbHNfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hVdGlsc190eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIFRleHRUb1NwZWVjaFV0aWxzX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIFRleHRUb1NwZWVjaFV0aWxzX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoVXRpbHNfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaFV0aWxzX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaFV0aWxzX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgVGV4dFRvU3BlZWNoVXRpbHNfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFRleHRUb1NwZWVjaFV0aWxzX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuLyoqXFxyXFxuICogQSBjb2xsZWN0aW9uIG9mIHVzZWZ1bCB0ZXh0LXRvLXNwZWVjaCBmdW5jdGlvbnMuXFxyXFxuICpcXHJcXG4gKiBAaGlkZWNvbnN0cnVjdG9yXFxyXFxuICovXFxuXFxudmFyIFRleHRUb1NwZWVjaFV0aWxzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIFRleHRUb1NwZWVjaFV0aWxzKCkge1xcbiAgICBUZXh0VG9TcGVlY2hVdGlsc19jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0VG9TcGVlY2hVdGlscyk7XFxuICB9XFxuXFxuICBUZXh0VG9TcGVlY2hVdGlsc19jcmVhdGVDbGFzcyhUZXh0VG9TcGVlY2hVdGlscywgbnVsbCwgW3tcXG4gICAga2V5OiBcImF1dG9HZW5lcmF0ZVNTTUxNYXJrc1wiLFxcbiAgICB2YWx1ZTpcXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybnMgYSBuZXcgc3RyaW5nIHdpdGggU1NNTCBtYXJrcyBpbnNlcnRlZCBiYXNlZCBvblxcclxcbiAgICAgKiBtYXRjaGVzIGJldHdlZW4gdGhlIGlucHV0IHN0cmluZyBhbmQgdGhlIGlucHV0IG1hcC4gVGhlXFxyXFxuICAgICAqIHdvcmQgbWF0Y2hlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZS4gV29yZHMgd2l0aGluIGV4aXN0aW5nXFxyXFxuICAgICAqIFNTTUwgdGFncyB3aWxsIG5vdCBiZSBhZmZlY3RlZC4gSW5wdXQgdGV4dCB3aWxsIGJlIHN1cnJvdW5kZWRcXHJcXG4gICAgICogYnkgPHNwZWFrPjwvc3BlYWs+IHRhZ3MgaWYgbmVlZGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIElucHV0IHN0cmluZy5cXHJcXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG1hcCAtIElucHV0IG9iamVjdCB0aGF0IG1hcHMgbWFyayBrZXlzXFxyXFxuICAgICAqIHRvIGFycmF5cyBvZiB3b3Jkcy4gRXhhbXBsZTpcXHJcXG4gICAgICpcXHJcXG4gICAgICogIHtcXHJcXG4gICAgICogICAgXFwnbWFyazpzYWRcXCcgOiBbXFwnc2FkXFwnLCBcXCdibHVlXFwnLCBcXCdkb3duXFwnXSxcXHJcXG4gICAgICogICAgXFwnbWFyazpoYXBweVxcJyA6IFtcXCdqb3lcXCcsIFxcJ2dsYWRcXCcsIFxcJ2dyZWF0XFwnXSxcXHJcXG4gICAgICogICAgXFwnbWFyazpub1xcJyA6IFtcXCdub1xcJywgXFwnbmFoXFwnLCBcXCduYXlcXCcsIFxcJ3N1cmVcXCddXFxyXFxuICAgICAqICB9XFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IFtyYW5kb21NYXJrcyA9IFtdXSAtIElmIHRoZXJlIGFyZSBzZW50ZW5jZXMgdGhhdCBkb25cXCd0XFxyXFxuICAgICAqIG1hdGNoIGFueSB3b3JkcyBmcm9tIHRoZSBtYXAgb2JqZWN0LCBtYXJrcyBmcm9tIHRoaXMgYXJyYXkgd2lsbCBiZSByYW5kb21seVxcclxcbiAgICAgKiBjaG9zZW4gYW5kIGluc2VydGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSAtIFVwZGF0ZWQgaW5wdXQgc3RyaW5nLlxcclxcbiAgICAgKi9cXG4gICAgZnVuY3Rpb24gYXV0b0dlbmVyYXRlU1NNTE1hcmtzKHRleHQsIG1hcCkge1xcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIHJhbmRvbU1hcmtzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcXG5cXG4gICAgICBpZiAoVGV4dFRvU3BlZWNoVXRpbHNfdHlwZW9mKG1hcCkgIT09IFxcJ29iamVjdFxcJyB8fCBtYXAgPT09IG51bGwpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZW5lcmF0ZSBTU01MIG1hcmtzIGZvciB0ZXh0IFxcXFxcIlwiLmNvbmNhdCh0ZXh0LCBcIlxcXFxcIiBiZWNhdXNlIG1hcCBpcyBub3QgYW4gb2JqZWN0LlwiKSk7XFxuICAgICAgfSAvLyBwcm9jZXNzIHRoZSBpbnB1dCBtYXAgaW50byBhbiBpbnRlcm5hbCBmb3JtYXRcXG5cXG5cXG4gICAgICB2YXIgaW50ZXJuYWxNYXAgPSB0aGlzLl9wcm9jZXNzSW5wdXRNYXAobWFwKTtcXG5cXG4gICAgICB2YXIgc3BlYWtUYWdzID0gW1xcJzxzcGVhaz5cXCcsIFxcJzwvc3BlYWs+XFwnXTtcXG4gICAgICB2YXIgc3NtbE1hcmtSZWdleCA9IC88bWFyayBuYW1lPSg/OlwifFxcJykoLio/KSg/OlwifFxcJylcXFxcLz4vO1xcbiAgICAgIHZhciBzc21sVGFnUmVnZXggPSAvPFtePl0qPi9nOyAvLyBJZGVudGlmeSBhbnkgZXhpc3RpbmcgU1NNTCB0YWdzXFxuXFxuICAgICAgdmFyIGV4aXN0aW5nVGFncyA9IFtdO1xcbiAgICAgIHZhciByZXN1bHQgPSBzc21sVGFnUmVnZXguZXhlYyh0ZXh0KTtcXG5cXG4gICAgICB3aGlsZSAocmVzdWx0ICE9PSBudWxsKSB7XFxuICAgICAgICBleGlzdGluZ1RhZ3MucHVzaCh7XFxuICAgICAgICAgIHN0YXJ0OiByZXN1bHQuaW5kZXgsXFxuICAgICAgICAgIGVuZDogcmVzdWx0LmluZGV4ICsgcmVzdWx0WzBdLmxlbmd0aCxcXG4gICAgICAgICAgdGV4dDogcmVzdWx0WzBdXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJlc3VsdCA9IHNzbWxUYWdSZWdleC5leGVjKHRleHQpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgY2h1bmtzID0gW107XFxuICAgICAgdmFyIGluZGV4ID0gMDtcXG4gICAgICB2YXIgc3NtbE1hcmtSZXN1bHQ7XFxuICAgICAgdmFyIGR1cGxpY2F0ZU1hcmtUb0NoZWNrID0gW107XFxuICAgICAgZXhpc3RpbmdUYWdzLmZvckVhY2goZnVuY3Rpb24gKGV4aXN0aW5nVGFnKSB7XFxuICAgICAgICB2YXIgc3Vic3RyID0gdGV4dC5zbGljZShpbmRleCwgZXhpc3RpbmdUYWcuc3RhcnQpO1xcblxcbiAgICAgICAgaWYgKHN1YnN0ciAhPT0gXFwnXFwnKSB7XFxuICAgICAgICAgIC8vIGF1dG8tbWFyayBub24tdGFnIHRleHRcXG4gICAgICAgICAgY2h1bmtzLnB1c2goX3RoaXMuX2luc2VydE1hcmtzKHN1YnN0ciwgaW50ZXJuYWxNYXAsIGR1cGxpY2F0ZU1hcmtUb0NoZWNrKSk7XFxuICAgICAgICAgIGR1cGxpY2F0ZU1hcmtUb0NoZWNrID0gW107XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzc21sTWFya1Jlc3VsdCA9IHNzbWxNYXJrUmVnZXguZXhlYyhleGlzdGluZ1RhZy50ZXh0KTtcXG5cXG4gICAgICAgIGlmIChzc21sTWFya1Jlc3VsdCAhPT0gbnVsbCkge1xcbiAgICAgICAgICB2YXIgbWFya1RleHQgPSBzc21sTWFya1Jlc3VsdFsxXTtcXG4gICAgICAgICAgZHVwbGljYXRlTWFya1RvQ2hlY2sucHVzaChtYXJrVGV4dCk7XFxuICAgICAgICB9IGVsc2UgaWYgKCFzcGVha1RhZ3MuaW5jbHVkZXMoZXhpc3RpbmdUYWcudGV4dCkpIHtcXG4gICAgICAgICAgY2h1bmtzLnB1c2goZXhpc3RpbmdUYWcudGV4dCk7XFxuICAgICAgICB9IC8vIGFkdmFuY2UgdGhlIGluZGV4XFxuXFxuXFxuICAgICAgICBpbmRleCA9IGV4aXN0aW5nVGFnLmVuZDtcXG4gICAgICB9KTtcXG4gICAgICBjaHVua3MucHVzaCh0aGlzLl9pbnNlcnRNYXJrcyh0ZXh0LnNsaWNlKGluZGV4KSwgaW50ZXJuYWxNYXAsIGR1cGxpY2F0ZU1hcmtUb0NoZWNrKSk7XFxuICAgICAgdmFyIG1hcmtlZFRleHQgPSBjaHVua3Muam9pbihcXCdcXCcpO1xcblxcbiAgICAgIGlmIChyYW5kb21NYXJrcyAmJiByYW5kb21NYXJrcy5sZW5ndGggPiAwKSB7XFxuICAgICAgICAvLyBhZGQgcmFuZG9tIG1hcmtzIHRvIGFueSB1bm1hcmtlZCBzZW50ZW5jZXNcXG4gICAgICAgIG1hcmtlZFRleHQgPSB0aGlzLmFkZE1hcmtzVG9Vbm1hcmtlZFNlbnRlbmNlcyhtYXJrZWRUZXh0LCByYW5kb21NYXJrcyk7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBUZXh0VG9TcGVlY2hVdGlscy52YWxpZGF0ZVRleHQobWFya2VkVGV4dCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybnMgYSBuZXcgc3RyaW5nIHdpdGggYSByYW5kb20gU1NNTCBtYXJrIGluc2VydGVkIGF0IGVhY2ggc2VudGVuY2UgdGhhdFxcclxcbiAgICAgKiBkb2VzIG5vdCBhbHJlYWR5IGNvbnRhaW4gYW4gU1NNTCBtYXJrLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIElucHV0IHN0cmluZy5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gbWFya3MgLSBBbnkgYXJyYXkgb2YgcmFuZG9tIFNTTUwgbWFya3MgdG8gY2hvb3NlIGZyb21cXHJcXG4gICAgICogd2hlbiBtb2RpZnlpbmcgdGhlIHRleHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiYWRkTWFya3NUb1VubWFya2VkU2VudGVuY2VzXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRNYXJrc1RvVW5tYXJrZWRTZW50ZW5jZXModGV4dCwgbWFya3MpIHtcXG4gICAgICBpZiAoIW1hcmtzIHx8IG1hcmtzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRleHQ7XFxuICAgICAgdmFyIHNzbWxNYXJrUmVnZXggPSAvPG1hcmsgbmFtZT0oPzpcInxcXCcpKC4qPykoPzpcInxcXCcpXFxcXC8+L2c7XFxuICAgICAgdmFyIHNzbWxUYWdSZWdleCA9IC88W14+XSo+L2c7IC8vIEZpbmQgdGhlIGluZGljZXMgb2YgYW55IG1hcmtzIGluIHRoZSB0ZXh0XFxuXFxuICAgICAgdmFyIG1hcmtJbmRpY2VzID0gW107XFxuICAgICAgdmFyIG1hcmtSZXN1bHQgPSBzc21sTWFya1JlZ2V4LmV4ZWModGV4dCk7XFxuXFxuICAgICAgd2hpbGUgKG1hcmtSZXN1bHQgIT09IG51bGwpIHtcXG4gICAgICAgIG1hcmtJbmRpY2VzLnB1c2gobWFya1Jlc3VsdC5pbmRleCk7XFxuICAgICAgICBtYXJrUmVzdWx0ID0gc3NtbE1hcmtSZWdleC5leGVjKHRleHQpO1xcbiAgICAgIH0gLy8gRmluZCBhbGwgU1NNTCB0YWdzIGluIHRoZSB0ZXh0XFxuXFxuXFxuICAgICAgdmFyIGV4aXN0aW5nVGFncyA9IFtdO1xcbiAgICAgIHZhciBzc21sUmVzdWx0ID0gc3NtbFRhZ1JlZ2V4LmV4ZWModGV4dCk7XFxuXFxuICAgICAgd2hpbGUgKHNzbWxSZXN1bHQgIT09IG51bGwpIHtcXG4gICAgICAgIGV4aXN0aW5nVGFncy5wdXNoKHtcXG4gICAgICAgICAgc3RhcnQ6IHNzbWxSZXN1bHQuaW5kZXgsXFxuICAgICAgICAgIGVuZDogc3NtbFJlc3VsdC5pbmRleCArIHNzbWxSZXN1bHRbMF0ubGVuZ3RoLFxcbiAgICAgICAgICB0ZXh0OiBzc21sUmVzdWx0WzBdXFxuICAgICAgICB9KTtcXG4gICAgICAgIHNzbWxSZXN1bHQgPSBzc21sVGFnUmVnZXguZXhlYyh0ZXh0KTtcXG4gICAgICB9IC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIHRleHQgd2l0aCBhbGwgU1NNTCBtYXJrcyByZXBsYWNlcyB3aXRoIHdoaXRlc3BhY2VcXG5cXG5cXG4gICAgICB2YXIgY2xlYW5lZFRleHQgPSB0ZXh0LnNsaWNlKCk7XFxuICAgICAgZXhpc3RpbmdUYWdzLmZvckVhY2goZnVuY3Rpb24gKGV4aXN0aW5nU3NtbCkge1xcbiAgICAgICAgdmFyIHdoaXRlc3BhY2UgPSBuZXcgQXJyYXkoZXhpc3RpbmdTc21sLnRleHQubGVuZ3RoICsgMSkuam9pbihcXCcgXFwnKTtcXG4gICAgICAgIGNsZWFuZWRUZXh0ID0gW2NsZWFuZWRUZXh0LnNsaWNlKDAsIGV4aXN0aW5nU3NtbC5zdGFydCksIHdoaXRlc3BhY2UsIGNsZWFuZWRUZXh0LnNsaWNlKGV4aXN0aW5nU3NtbC5lbmQpXS5qb2luKFxcJ1xcJyk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgdmFyIHNlbnRlbmNlRW5kSW5kaWNlcyA9IHRoaXMuX2dldFNlbnRlbmNlRW5kcyhjbGVhbmVkVGV4dCk7IC8vIE9ubHkgaW5zZXJ0IHJhbmRvbSBtYXJrcyBpbnRvIHNlbnRlbmNlcyB0aGF0IGRvblxcJ3QgYWxyZWFkeSBoYXZlIGFueVxcblxcblxcbiAgICAgIHZhciBwcmV2SW5kZXggPSAwO1xcbiAgICAgIHZhciB0YXJnZXRJbmRpY2VzID0gc2VudGVuY2VFbmRJbmRpY2VzLmZpbHRlcihmdW5jdGlvbiAoaW5kZXgpIHtcXG4gICAgICAgIHZhciBjb250YWluc01hcmsgPSBtYXJrSW5kaWNlcy5maW5kSW5kZXgoZnVuY3Rpb24gKG1hcmtJbmRleCkge1xcbiAgICAgICAgICByZXR1cm4gcHJldkluZGV4IDw9IG1hcmtJbmRleCAmJiBpbmRleCA+IG1hcmtJbmRleDtcXG4gICAgICAgIH0pICE9PSAtMTtcXG4gICAgICAgIHByZXZJbmRleCA9IGluZGV4O1xcbiAgICAgICAgcmV0dXJuICFjb250YWluc01hcms7XFxuICAgICAgfSk7XFxuXFxuICAgICAgdmFyIHJhbmRvbU1hcmtlZFRleHQgPSB0aGlzLl9pbnNlcnRSYW5kb21NYXJrc0F0KHRleHQsIHRhcmdldEluZGljZXMsIG1hcmtzKTtcXG5cXG4gICAgICByZXR1cm4gcmFuZG9tTWFya2VkVGV4dDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2VuZXJhdGUgYSB2ZXJzaW9uIG9mIGdpdmVuIHRleHQgdGhhdCBpcyBlbmNsb3NlZCBieSBQb2xseSBzc21sIHNwZWFrIHRhZ3MuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHRleHQgdG8gdmFsaWRhdGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVXBkYXRlZCBpbnB1dCBzdHJpbmcuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidmFsaWRhdGVUZXh0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVRleHQodGV4dCkge1xcbiAgICAgIGlmICghdGV4dCkge1xcbiAgICAgICAgdGV4dCA9IFxcJzxzcGVhaz48L3NwZWFrPlxcJztcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKF5cXFxccyo8XFxcXHMqc3BlYWtcXFxccyopPlxcXFxzKnwoXlxcXFxzKikvLCBcXCc8c3BlYWs+XFwnKS5yZXBsYWNlKC8oXFxcXHMqPFxcXFxzKlxcXFwvXFxcXHMqc3BlYWtcXFxccyo+XFxcXHMqJHxcXFxccyokKS8sIFxcJzwvc3BlYWs+XFwnKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHRleHQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBhcnNlIGFuIGlucHV0IHN0cmluZyBhbmQgaW5zZXJ0IFNTTUwgbWFya3MgYmFzZWQgb25cXHJcXG4gICAgICogd29yZCBtYXRjaGVzIGluIGEgbWFwLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIElucHV0IHN0cmluZy5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48bnVtYmVyPn0gW2luZGljZXMgPSBbXV0gLSBBbiBhcnJheSBvZiBpbmRpY2VzIGluIHRoZSB0ZXh0IGlucHV0XFxyXFxuICAgICAqIHdoZXJlIHJhbmRvbSBtYXJrcyBzaG91bGQgYmUgaW5zZXJ0ZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IFttYXJrcyA9IFtdXSAtIEFuIGFycmF5IG9mIG1hcmsgc3RyaW5ncyB0byBjaG9vc2VcXHJcXG4gICAgICogZnJvbSB3aGVuIGluc2VydGluZyByYW5kb20gbWFya3MuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVXBkYXRlZCBpbnB1dCBzdHJpbmcuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2luc2VydFJhbmRvbU1hcmtzQXRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnNlcnRSYW5kb21NYXJrc0F0KHRleHQpIHtcXG4gICAgICB2YXIgaW5kaWNlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XFxuICAgICAgdmFyIG1hcmtzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcXG5cXG4gICAgICBpZiAoIW1hcmtzIHx8IG1hcmtzLmxlbmd0aCA9PT0gMCB8fCAhaW5kaWNlcyB8fCBpbmRpY2VzLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgcmV0dXJuIHRleHQ7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBvZmZzZXQgPSAwO1xcbiAgICAgIGluZGljZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcXG4gICAgICAgIHZhciByYW5kb21NYXJrID0gXCI8bWFyayBuYW1lPVxcJ1wiLmNvbmNhdChtYXJrc1tjb3JlX1V0aWxzLmdldFJhbmRvbUludCgwLCBtYXJrcy5sZW5ndGgpXSwgXCJcXCcvPlwiKTtcXG4gICAgICAgIHRleHQgPSBbdGV4dC5zbGljZSgwLCBpbmRleCArIG9mZnNldCksIHJhbmRvbU1hcmssIHRleHQuc2xpY2UoaW5kZXggKyBvZmZzZXQpXS5qb2luKFxcJ1xcJyk7XFxuICAgICAgICBvZmZzZXQgKz0gcmFuZG9tTWFyay5sZW5ndGg7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIHRleHQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBhcnNlcyBhIHN0cmluZyBvZiB0ZXh0IGFuZCByZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGluZGljZXNcXHJcXG4gICAgICogb2YgdGhlIGxhc3QgY2hhcmFjdGVyIGluIGEgc2VudGVuY2UgdGhhdCBpcyBub3QgaW4gdGhlIGZvbGxvd2luZyBsaXN0OlxcclxcbiAgICAgKiAgKFxcJy5cXCcsIFxcJz9cXCcsIFxcJyFcXCcpXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGV4dCB0byBwcm9jZXNzIGZvciBlbmQgb2Ygc2VudGVuY2VcXHJcXG4gICAgICogaW5kaWNlcy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0FycmF5LjxudW1iZXI+fSAtIEFycmF5IG9mIGVuZCBvZiBzZW50ZW5jZSBpbmRpY2VzLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9nZXRTZW50ZW5jZUVuZHNcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRTZW50ZW5jZUVuZHModGV4dCkge1xcbiAgICAgIHZhciBzZW50ZW5jZVJlZ2V4ID0gL1teLiE/XStbLiE/XSsvZztcXG4gICAgICB2YXIgZW5kU2VudGVuY2VSZWdleCA9IC9bLiE/XSsvO1xcbiAgICAgIHZhciByZXN1bHQgPSBzZW50ZW5jZVJlZ2V4LmV4ZWModGV4dCk7XFxuICAgICAgdmFyIHNlbnRlbmNlRW5kcyA9IFtdO1xcblxcbiAgICAgIHdoaWxlIChyZXN1bHQgIT09IG51bGwpIHtcXG4gICAgICAgIC8vIGZpbmQgdGhlIGxhc3Qgbm9uLXB1bmN0dWF0aW9uIGNoYXJhY3RlclxcbiAgICAgICAgdmFyIHB1bmN0UmVzdWx0ID0gZW5kU2VudGVuY2VSZWdleC5leGVjKHJlc3VsdFswXSk7XFxuICAgICAgICBzZW50ZW5jZUVuZHMucHVzaChyZXN1bHQuaW5kZXggKyByZXN1bHRbMF0ubGVuZ3RoIC0gcHVuY3RSZXN1bHRbMF0ubGVuZ3RoKTtcXG4gICAgICAgIHJlc3VsdCA9IHNlbnRlbmNlUmVnZXguZXhlYyh0ZXh0KTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHNlbnRlbmNlRW5kcztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGFyc2UgYW4gaW5wdXQgc3RyaW5nIGFuZCBpbnNlcnQgU1NNTCBtYXJrcyBiYXNlZCBvblxcclxcbiAgICAgKiB3b3JkIG1hdGNoZXMgaW4gYSBtYXAuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gSW5wdXQgc3RyaW5nLlxcclxcbiAgICAgKiBAcGFyYW0ge01hcH0gbWFwIC0gTWFwcGluZyBvZiB3b3JkcyB0byBtYXJrIHZhbHVlcyB0aGF0XFxyXFxuICAgICAqIHdpbGwgYmUgaW5zZXJ0ZWQgYXMgdGhlIHZhbHVlIGZvciBhIG1hcmtcXCdzIFxcJ25hbWVcXCcgYXR0cmlidXRlLlxcclxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkdXBsaWNhdGVzVG9DaGVjayAtIEEgbGlzdCBvZiBtYXJrIHZhbHVlcyB0byBjaGVjayBmb3IgZHVwbGljYXRlIGFnYWluc3QgdGhlIGZpcnN0IHdvcmRcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ30gLSBVcGRhdGVkIGlucHV0IHN0cmluZy5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfaW5zZXJ0TWFya3NcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnNlcnRNYXJrcyh0ZXh0LCBtYXAsIGR1cGxpY2F0ZXNUb0NoZWNrKSB7XFxuICAgICAgaWYgKHRleHQgPT09IFxcJ1xcJykgcmV0dXJuIHRleHQ7XFxuICAgICAgdmFyIHdvcmRSZWdleCA9IC9cXFxcdyt8XFxcXHMrfFteXFxcXHNcXFxcd10rL2c7XFxuICAgICAgdmFyIGxvd2VyQ2FzZVdvcmQ7XFxuICAgICAgdmFyIGNoZWNrRHVwbGljYXRlID0gdHJ1ZTtcXG4gICAgICB2YXIgbWFya2VkV29yZHMgPSB0ZXh0Lm1hdGNoKHdvcmRSZWdleCkubWFwKGZ1bmN0aW9uICh3b3JkKSB7XFxuICAgICAgICBsb3dlckNhc2VXb3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xcblxcbiAgICAgICAgaWYgKG1hcC5oYXMobG93ZXJDYXNlV29yZCkpIHtcXG4gICAgICAgICAgdmFyIG1hcmtzID0gbWFwLmdldChsb3dlckNhc2VXb3JkKS5tYXAoZnVuY3Rpb24gKG1hcmspIHtcXG4gICAgICAgICAgICBpZiAoY2hlY2tEdXBsaWNhdGUpIHtcXG4gICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlID0gZmFsc2U7XFxuICAgICAgICAgICAgICByZXR1cm4gZHVwbGljYXRlc1RvQ2hlY2suaW5jbHVkZXMobWFyaykgPyBcXCdcXCcgOiBcIjxtYXJrIG5hbWU9XFwnXCIuY29uY2F0KG1hcmssIFwiXFwnLz5cIik7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgIHJldHVybiBcIjxtYXJrIG5hbWU9XFwnXCIuY29uY2F0KG1hcmssIFwiXFwnLz5cIik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KTtcXG4gICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KG1hcmtzLmpvaW4oXFwnXFwnKSkuY29uY2F0KHdvcmQpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGUgPSBmYWxzZTtcXG4gICAgICAgICAgcmV0dXJuIHdvcmQ7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgICAgdmFyIGV4aXN0aW5nTWFya3MgPSBkdXBsaWNhdGVzVG9DaGVjay5tYXAoZnVuY3Rpb24gKG1hcmspIHtcXG4gICAgICAgIHJldHVybiBcIjxtYXJrIG5hbWU9XFwnXCIuY29uY2F0KG1hcmssIFwiXFwnLz5cIik7XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGV4aXN0aW5nTWFya3Muam9pbihcXCdcXCcpKS5jb25jYXQobWFya2VkV29yZHMuam9pbihcXCdcXCcpKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUHJvY2Vzc2VzIGFuIGlucHV0IG9iamVjdCBmb3IgbWFwcGluZyBhbiBhcnJheVxcclxcbiAgICAgKiBvZiB3b3JkcyB0byBzcGVjaWZpYyBtYXJrIGtleXMuIENvbnZlcnRzIHRoZSBpbnB1dFxcclxcbiAgICAgKiBtYXAgaW50byBhIE1hcCB3aXRoIGEgbW9yZSBlZmZpY2llbnQgZm9ybWF0IGZvclxcclxcbiAgICAgKiBwZXJmb3JtaW5nIG1hcmsgaW5qZWN0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbWFwIC0gSW5wdXQgb2JqZWN0IHRoYXQgbWFwcyBtYXJrIGtleXNcXHJcXG4gICAgICogdG8gYXJyYXlzIG9mIHdvcmRzLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7TWFwfSAtIE1hcCBmb3IgaW50ZXJuYWwgdXNlLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9wcm9jZXNzSW5wdXRNYXBcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzSW5wdXRNYXAobWFwKSB7XFxuICAgICAgdmFyIGludGVybmFsTWFwID0gbmV3IE1hcCgpO1xcbiAgICAgIHZhciBsaXN0ID0gW107XFxuICAgICAgT2JqZWN0LmVudHJpZXMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XFxuICAgICAgICB2YXIgX3JlZjIgPSBUZXh0VG9TcGVlY2hVdGlsc19zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxcbiAgICAgICAgICAgIGtleSA9IF9yZWYyWzBdLFxcbiAgICAgICAgICAgIHZhbHVlID0gX3JlZjJbMV07XFxuXFxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XFxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZW5lcmF0ZSBTU01MIG1hcmtzIGZyb20gbWFwIFxcXFxcIlwiLmNvbmNhdChtYXAsIFwiXFxcXFwiIGJlY2F1c2UgdmFsdWUgZm9yIGtleSBcXCdcIikuY29uY2F0KGtleSwgXCJcXCcgaXMgbm90IGFuIGFycmF5LlwiKSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh3b3JkKSB7XFxuICAgICAgICAgIHZhciBsb3dlckNhc2VXb3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xcbiAgICAgICAgICBsaXN0ID0gaW50ZXJuYWxNYXAuZ2V0KGxvd2VyQ2FzZVdvcmQpO1xcblxcbiAgICAgICAgICBpZiAobGlzdCAhPT0gdW5kZWZpbmVkICYmICFsaXN0LmluY2x1ZGVzKGtleSkpIHtcXG4gICAgICAgICAgICBpbnRlcm5hbE1hcC5zZXQobG93ZXJDYXNlV29yZCwgW10uY29uY2F0KFRleHRUb1NwZWVjaFV0aWxzX3RvQ29uc3VtYWJsZUFycmF5KGxpc3QpLCBba2V5XSkpO1xcbiAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGludGVybmFsTWFwLnNldChsb3dlckNhc2VXb3JkLCBba2V5XSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBpbnRlcm5hbE1hcDtcXG4gICAgfVxcbiAgfV0pO1xcblxcbiAgcmV0dXJuIFRleHRUb1NwZWVjaFV0aWxzO1xcbn0oKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGF3c3BhY2tfVGV4dFRvU3BlZWNoVXRpbHMgPSAoVGV4dFRvU3BlZWNoVXRpbHMpO1xcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb3JlL2F3c3BhY2svQWJzdHJhY3RTcGVlY2guanNcXG5mdW5jdGlvbiBBYnN0cmFjdFNwZWVjaF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIEFic3RyYWN0U3BlZWNoX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgQWJzdHJhY3RTcGVlY2hfaXRlcmFibGVUb0FycmF5KGFycikgfHwgQWJzdHJhY3RTcGVlY2hfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBBYnN0cmFjdFNwZWVjaF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RTcGVlY2hfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFNwZWVjaF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIEFic3RyYWN0U3BlZWNoX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBBYnN0cmFjdFNwZWVjaF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFNwZWVjaF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0U3BlZWNoX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gQWJzdHJhY3RTcGVlY2hfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RTcGVlY2hfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFNwZWVjaF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RTcGVlY2hfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RTcGVlY2hfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBBYnN0cmFjdFNwZWVjaF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgQWJzdHJhY3RTcGVlY2hfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG4vLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlULTBcXG5cXG4vKipcXHJcXG4gKiBDbGFzcyB0aGF0IGNhbiBwbGF5IGJhY2sgYXVkaW8gZ2VuZXJhdGVkIGJ5IEFXUyBQb2xseSBhbmQgc3luY2hyb25pemVkIGVtaXRcXHJcXG4gKiBzcGVlY2htYXJrIG1lc3NhZ2VzLlxcclxcbiAqXFxyXFxuICogQGFic3RyYWN0XFxyXFxuICovXFxuXFxudmFyIEFic3RyYWN0U3BlZWNoID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcXG4gIC8qKlxcclxcbiAgICogQGNvbnN0cnVjdG9yXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtjb3JlL1RleHRUb1NwZWVjaEZlYXR1cmV9IHNwZWFrZXIgLSBUaGUgZmVhdHVyZSB0aGF0IG93bnMgdGhlIFNwZWVjaCBhbmRcXHJcXG4gICAqIHdpbGwgZW1pdCBzcGVlY2htYXJrIG1lc3NhZ2VzLlxcclxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCBvZiB0aGUgc3BlZWNoLlxcclxcbiAgICogQHBhcmFtIHtBcnJheS48T2JqZWN0Pn0gW3NwZWVjaG1hcmtzPVtdXSAtIEFuIGFycmF5IG9mIHNwZWVjaG1hcmsgb2JqZWN0cyByZXByZXNlbnRpbmdcXHJcXG4gICAqIHRoZSB0ZXh0IGFuZCB0aW1pbmcgb2YgdGhlIHNwZWVjaC5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gQWJzdHJhY3RTcGVlY2goc3BlYWtlciwgdGV4dCkge1xcbiAgICB2YXIgc3BlZWNobWFya3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xcblxcbiAgICBBYnN0cmFjdFNwZWVjaF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBYnN0cmFjdFNwZWVjaCk7XFxuXFxuICAgIHRoaXMuX3NwZWFrZXIgPSBzcGVha2VyO1xcbiAgICB0aGlzLl90ZXh0ID0gdGV4dDtcXG4gICAgdGhpcy5fc3BlZWNobWFya3MgPSBzcGVlY2htYXJrcztcXG4gICAgdGhpcy5fc3BlZWNobWFya09mZnNldCA9IDA7XFxuXFxuICAgIHRoaXMuX3Jlc2V0KCk7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIFJlc2V0IHRyYWNraW5nIHByb3BlcnRpZXMuXFxyXFxuICAgKlxcclxcbiAgICogQHByaXZhdGVcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2N1cnJlbnRUaW1lPTBdIC0gVGltZSB0byB1c2UgZm9yIF9zdGFydFRpbWUuXFxyXFxuICAgKi9cXG5cXG5cXG4gIEFic3RyYWN0U3BlZWNoX2NyZWF0ZUNsYXNzKEFic3RyYWN0U3BlZWNoLCBbe1xcbiAgICBrZXk6IFwiX3Jlc2V0XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzZXQoKSB7XFxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xcbiAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xcbiAgICAgIHRoaXMuX2xvY2FsVGltZSA9IDA7XFxuICAgICAgdGhpcy5fcGF1c2VUaW1lID0gMDtcXG4gICAgICB0aGlzLl9wbGF5aW5nID0gZmFsc2U7XFxuICAgICAgdGhpcy5fbWFya0l0ZXIgPSB0aGlzLl9zcGVlY2htYXJrcy52YWx1ZXMoKTtcXG5cXG4gICAgICB2YXIgX3RoaXMkX21hcmtJdGVyJG5leHQgPSB0aGlzLl9tYXJrSXRlci5uZXh0KCksXFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkX21hcmtJdGVyJG5leHQudmFsdWUsXFxuICAgICAgICAgIGRvbmUgPSBfdGhpcyRfbWFya0l0ZXIkbmV4dC5kb25lO1xcblxcbiAgICAgIHRoaXMuX2N1cnJlbnRNYXJrID0gdmFsdWU7XFxuICAgICAgdGhpcy5fZW5kVGltZSA9IHRoaXMuX3NwZWVjaG1hcmtzLmxlbmd0aCA/IHRoaXMuX3NwZWVjaG1hcmtzW3RoaXMuX3NwZWVjaG1hcmtzLmxlbmd0aCAtIDFdLnRpbWUgOiAwO1xcbiAgICAgIHRoaXMuX2RvbmUgPSBkb25lO1xcbiAgICAgIHRoaXMuX3Byb21pc2UgPSBudWxsO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDcmVhdGUgYSBuZXcgcHJvbWlzZSB0aGF0IHdpbGwgc3RvcCBwbGF5YmFjayBhbmQgZW1pdCBtZXNzYWdlcyBmb3IgdGhpcyBzcGVlY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkZpbmlzaCAtIEZ1bmNpdG9uIHRvIGV4ZWN1dGUgb25jZSB0aGUgc3BlZWNoIHN0b3BzLlxcclxcbiAgICAgKiBAcGFyYW0ge29uRXJyb3I9fSBvbkVycm9yIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSBpZiB0aGUgc3BlZWNoIGVuY291bnRlcnMgYW5cXHJcXG4gICAgICogZXJyb3IuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkludGVycnVwdCAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIHNwZWVjaCBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9jcmVhdGVQcm9taXNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlUHJvbWlzZShvbkZpbmlzaCwgb25FcnJvciwgb25JbnRlcnJ1cHQpIHtcXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xcblxcbiAgICAgIHZhciBvblJlc29sdmUgPSBmdW5jdGlvbiBvblJlc29sdmUodmFsdWUpIHtcXG4gICAgICAgIF90aGlzLl9wbGF5aW5nID0gZmFsc2U7XFxuXFxuICAgICAgICBfdGhpcy5fc3BlYWtlci5lbWl0KF90aGlzLl9zcGVha2VyLmNvbnN0cnVjdG9yLkVWRU5UUy5zdG9wLCBfdGhpcyk7XFxuXFxuICAgICAgICBfdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5lbWl0KF90aGlzLl9zcGVha2VyLmNvbnN0cnVjdG9yLkVWRU5UUy5zdG9wLCBfdGhpcyk7XFxuXFxuICAgICAgICBpZiAodHlwZW9mIG9uRmluaXNoID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBvbkZpbmlzaCh2YWx1ZSk7XFxuICAgICAgICB9XFxuICAgICAgfTtcXG5cXG4gICAgICB2YXIgb25SZWplY3QgPSBmdW5jdGlvbiBvblJlamVjdChlKSB7XFxuICAgICAgICBfdGhpcy5fcGxheWluZyA9IGZhbHNlO1xcblxcbiAgICAgICAgX3RoaXMuX3NwZWFrZXIuZW1pdChfdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5FVkVOVFMuc3RvcCwgX3RoaXMpO1xcblxcbiAgICAgICAgX3RoaXMuX3NwZWFrZXIuY29uc3RydWN0b3IuZW1pdChfdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5FVkVOVFMuc3RvcCwgX3RoaXMpO1xcblxcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlwiLmNvbmNhdChfdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcIiBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGVycm9yOiBcIikuY29uY2F0KGUpKTtcXG5cXG4gICAgICAgIGlmICh0eXBlb2Ygb25FcnJvciA9PT0gXFwnZnVuY3Rpb25cXCcpIHtcXG4gICAgICAgICAgb25FcnJvcihlKTtcXG4gICAgICAgIH1cXG4gICAgICB9O1xcblxcbiAgICAgIHZhciBvbkNhbmNlbCA9IGZ1bmN0aW9uIG9uQ2FuY2VsKHZhbHVlKSB7XFxuICAgICAgICBfdGhpcy5fcGxheWluZyA9IGZhbHNlO1xcblxcbiAgICAgICAgX3RoaXMuX3NwZWFrZXIuZW1pdChfdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5FVkVOVFMuaW50ZXJydXB0LCBfdGhpcyk7XFxuXFxuICAgICAgICBfdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5lbWl0KF90aGlzLl9zcGVha2VyLmNvbnN0cnVjdG9yLkVWRU5UUy5pbnRlcnJ1cHQsIF90aGlzKTtcXG5cXG4gICAgICAgIGlmICh0eXBlb2Ygb25JbnRlcnJ1cHQgPT09IFxcJ2Z1bmN0aW9uXFwnKSB7XFxuICAgICAgICAgIG9uSW50ZXJydXB0KHZhbHVlKTtcXG4gICAgICAgIH1cXG4gICAgICB9O1xcblxcbiAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgY29yZV9EZWZlcnJlZCh1bmRlZmluZWQsIG9uUmVzb2x2ZSwgb25SZWplY3QsIG9uQ2FuY2VsKTtcXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIHdoZXRoZXIgb3Igbm90IHRoZSBzcGVlY2ggaGFzIHJlYWNoZWQgaXRcXCdzIGVuZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2NoZWNrRmluaXNoZWRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja0ZpbmlzaGVkKCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9kb25lICYmIHRoaXMuX2xvY2FsVGltZSA+PSB0aGlzLl9lbmRUaW1lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSBwbGF5YmFjayBzdGF0ZSBvZiB0aGUgYXVkaW8uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZWFkb25seVxcclxcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwbGF5aW5nXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB0aGlzLl9wbGF5aW5nO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSB0ZXh0IG9mIHRoZSBzcGVlY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZWFkb25seVxcclxcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInRleHRcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3RleHQ7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYSBzaGFsbG93IGNvcHkgb2YgdGhlIHNwZWVjaG1hcmtzIGFycmF5IGZvciB0aGUgc3BlZWNoLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge0FycmF5LjxPYmplY3Q+fVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNwZWVjaG1hcmtzXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBBYnN0cmFjdFNwZWVjaF90b0NvbnN1bWFibGVBcnJheSh0aGlzLl9zcGVlY2htYXJrcyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgYW5kIHNldHMgdGhlIG51bWJlciBvZiBzZWNvbmRzIHRvIG9mZnNldCBzcGVlY2htYXJrIGVtaXNzaW9uLlxcclxcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInNwZWVjaG1hcmtPZmZzZXRcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3NwZWVjaG1hcmtPZmZzZXQgLyAxMDAwO1xcbiAgICB9LFxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChvZmZzZXQpIHtcXG4gICAgICB0aGlzLl9zcGVlY2htYXJrT2Zmc2V0ID0gb2Zmc2V0ICogMTAwMDsgLy8gU3RvcmUgYXMgbWlsbGlzZWNvbmRzXFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEVtaXQgc3BlZWNobWFyayBtZXNzYWdlcyBhcyB0aGV5IGFyZSBlbmNvdW50ZXJlZCBpbiBzeW5jIHdpdGggYXVkaW8uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50VGltZSAtIEN1cnJlbnQgZ2xvYmFsIHRpbWUgd2hlbiB1cGRhdGUgd2FzIGNhbGxlZC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ1cGRhdGVcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShjdXJyZW50VGltZSkge1xcbiAgICAgIGlmICghdGhpcy5fcGxheWluZykge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH0gLy8gVXBkYXRlIGxvY2FsIGF1ZGlvIHRpbWVcXG5cXG5cXG4gICAgICB0aGlzLl9sb2NhbFRpbWUgPSBjdXJyZW50VGltZSAtIHRoaXMuX3N0YXJ0VGltZTtcXG5cXG4gICAgICBpZiAoIXRoaXMuX2RvbmUpIHtcXG4gICAgICAgIC8vIEVtaXQgc3BlZWNobWFyayBtZXNzYWdlcyBmb3IgbWFya3MgdXAgdG8gdGhlIGN1cnJlbnQgdGltZVxcbiAgICAgICAgd2hpbGUgKCF0aGlzLl9kb25lICYmIHRoaXMuX2N1cnJlbnRNYXJrLnRpbWUgKyB0aGlzLl9zcGVlY2htYXJrT2Zmc2V0IDw9IHRoaXMuX2xvY2FsVGltZSkge1xcbiAgICAgICAgICB0aGlzLl9zcGVha2VyLmVtaXQodGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5FVkVOVFNbdGhpcy5fY3VycmVudE1hcmsudHlwZV0sIHtcXG4gICAgICAgICAgICBzcGVlY2g6IHRoaXMsXFxuICAgICAgICAgICAgbWFyazogdGhpcy5fY3VycmVudE1hcmtcXG4gICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgIHZhciBfdGhpcyRfbWFya0l0ZXIkbmV4dDIgPSB0aGlzLl9tYXJrSXRlci5uZXh0KCksXFxuICAgICAgICAgICAgICB2YWx1ZSA9IF90aGlzJF9tYXJrSXRlciRuZXh0Mi52YWx1ZSxcXG4gICAgICAgICAgICAgIGRvbmUgPSBfdGhpcyRfbWFya0l0ZXIkbmV4dDIuZG9uZTtcXG5cXG4gICAgICAgICAgdGhpcy5fY3VycmVudE1hcmsgPSB2YWx1ZTtcXG4gICAgICAgICAgdGhpcy5fZG9uZSA9IGRvbmU7XFxuICAgICAgICB9XFxuICAgICAgfSAvLyBFbmQgcGxheWJhY2tcXG5cXG5cXG4gICAgICBpZiAodGhpcy5fY2hlY2tGaW5pc2hlZCgpKSB7XFxuICAgICAgICB0aGlzLnN0b3AoKTtcXG5cXG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQbGF5IHRoZSBzcGVlY2ggZnJvbSB0aGUgYmVnaW5uaW5nLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY3VycmVudFRpbWUgLSBDdXJyZW50IGdsb2JhbCB0aW1lIHdoZW4gcGxheSB3YXMgY2FsbGVkLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25GaW5pc2ggLSBPcHRpb25hbCBmdW5jdGlvbiB0byBleGVjdXRlIG9uY2UgdGhlIHNwZWVjaFxcclxcbiAgICAgKiBwcm9taXNlIHJlc29sdmVzLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25FcnJvciAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIHNwZWVjaFxcclxcbiAgICAgKiBlbmNvdW50ZXJzIGFuZCBlcnJvciBkdXJpbmcgcGxheWJhY2suXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkludGVycnVwdCAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIHNwZWVjaFxcclxcbiAgICAgKiBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXNvbHZlcyBvbmNlIHRoZSBzcGVlY2ggcmVhY2hlcyB0aGUgZW5kIG9mIHBsYXliYWNrLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInBsYXlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoY3VycmVudFRpbWUsIG9uRmluaXNoLCBvbkVycm9yLCBvbkludGVycnVwdCkge1xcbiAgICAgIHRoaXMuX3Jlc2V0KGN1cnJlbnRUaW1lKTtcXG5cXG4gICAgICB0aGlzLl9wbGF5aW5nID0gdHJ1ZTtcXG5cXG4gICAgICB0aGlzLl9zcGVha2VyLmVtaXQodGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5FVkVOVFMucGxheSwgdGhpcyk7XFxuXFxuICAgICAgdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5lbWl0KHRoaXMuX3NwZWFrZXIuY29uc3RydWN0b3IuRVZFTlRTLnBsYXksIHRoaXMpO1xcblxcbiAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVQcm9taXNlKG9uRmluaXNoLCBvbkVycm9yLCBvbkludGVycnVwdCk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFBhdXNlIHRoZSBzcGVlY2ggYXQgdGhlIGN1cnJlbnQgdGltZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRUaW1lIC0gQ3VycmVudCBnbG9iYWwgdGltZSB3aGVuIHBhdXNlIHdhcyBjYWxsZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicGF1c2VcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKGN1cnJlbnRUaW1lKSB7XFxuICAgICAgdGhpcy5fcGxheWluZyA9IGZhbHNlO1xcbiAgICAgIHRoaXMuX3BhdXNlVGltZSA9IGN1cnJlbnRUaW1lO1xcblxcbiAgICAgIHRoaXMuX3NwZWFrZXIuZW1pdCh0aGlzLl9zcGVha2VyLmNvbnN0cnVjdG9yLkVWRU5UUy5wYXVzZSwgdGhpcyk7XFxuXFxuICAgICAgdGhpcy5fc3BlYWtlci5jb25zdHJ1Y3Rvci5lbWl0KHRoaXMuX3NwZWFrZXIuY29uc3RydWN0b3IuRVZFTlRTLnBhdXNlLCB0aGlzKTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmVzdW1lIHRoZSBzcGVlY2ggYXQgdGhlIGN1cnJlbnQgdGltZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRUaW1lIC0gQ3VycmVudCBnbG9iYWwgdGltZSB3aGVuIHJlc3VtZSB3YXMgY2FsbGVkLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25GaW5pc2ggLSBPcHRpb25hbCBmdW5jdGlvbiB0byBleGVjdXRlIG9uY2UgdGhlIHNwZWVjaFxcclxcbiAgICAgKiBwcm9taXNlIHJlc29sdmVzLlxcclxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb25FcnJvciAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIHNwZWVjaFxcclxcbiAgICAgKiBlbmNvdW50ZXJzIGFuZCBlcnJvciBkdXJpbmcgcGxheWJhY2suXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBvbkludGVycnVwdCAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgaWYgdGhlIHNwZWVjaFxcclxcbiAgICAgKiBpcyBjYW5jZWxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXNvbHZlcyBvbmNlIHRoZSBzcGVlY2ggcmVhY2hlcyB0aGUgZW5kIG9mIHBsYXliYWNrLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKGN1cnJlbnRUaW1lLCBvbkZpbmlzaCwgb25FcnJvciwgb25JbnRlcnJ1cHQpIHtcXG4gICAgICAvLyBQbGF5IGZyb20gdGhlIGJlZ2lubmluZyBpZiB0aGUgc3BlZWNoIGhhc25cXCd0IHBsYXllZCB5ZXRcXG4gICAgICBpZiAoIXRoaXMuX3Byb21pc2UpIHtcXG4gICAgICAgIHRoaXMuX3Jlc2V0KGN1cnJlbnRUaW1lKTtcXG5cXG4gICAgICAgIHRoaXMuX2NyZWF0ZVByb21pc2Uob25GaW5pc2gsIG9uRXJyb3IsIG9uSW50ZXJydXB0KTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy5fcGxheWluZyA9IHRydWU7XFxuICAgICAgdGhpcy5fc3RhcnRUaW1lICs9IGN1cnJlbnRUaW1lIC0gdGhpcy5fcGF1c2VUaW1lO1xcblxcbiAgICAgIHRoaXMuX3NwZWFrZXIuZW1pdCh0aGlzLl9zcGVha2VyLmNvbnN0cnVjdG9yLkVWRU5UUy5yZXN1bWUsIHRoaXMpO1xcblxcbiAgICAgIHRoaXMuX3NwZWFrZXIuY29uc3RydWN0b3IuZW1pdCh0aGlzLl9zcGVha2VyLmNvbnN0cnVjdG9yLkVWRU5UUy5yZXN1bWUsIHRoaXMpO1xcblxcbiAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDYW5jZWxzIHBsYXliYWNrIG9mIHRoZSBzcGVlY2ggYXQgdGhlIGN1cnJlbnQgdGltZS4gQ2FuY2VsIHRoZSBzcGVlY2ggcHJvbWlzZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJjYW5jZWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcXG4gICAgICBpZiAodGhpcy5fcHJvbWlzZSkge1xcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5jYW5jZWwoKTtcXG5cXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBudWxsO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl9wbGF5aW5nID0gZmFsc2U7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFN0b3AgdGhlIHNwZWVjaCBhbmQgcmVzZXQgdGltZSB0byB0aGUgYmVnaW5uaW5nLiBSZXNvbHZlIHRoZSBzcGVlY2ggcHJvbWlzZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJzdG9wXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xcbiAgICAgIGlmICh0aGlzLl9wcm9taXNlKSB7XFxuICAgICAgICB0aGlzLl9wcm9taXNlLnJlc29sdmUoKTtcXG5cXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBudWxsO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl9wbGF5aW5nID0gZmFsc2U7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBBYnN0cmFjdFNwZWVjaDtcXG59KCk7XFxuXFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBhd3NwYWNrX0Fic3RyYWN0U3BlZWNoID0gKEFic3RyYWN0U3BlZWNoKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hd3NwYWNrL1NwZWVjaC5qc1xcbmZ1bmN0aW9uIFNwZWVjaF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIFNwZWVjaF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBTcGVlY2hfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBTcGVlY2hfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFNwZWVjaF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBTcGVlY2hfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBTcGVlY2hfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFNwZWVjaF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIFNwZWVjaF9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBTcGVlY2hfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IFNwZWVjaF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gU3BlZWNoX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIFNwZWVjaF9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIFNwZWVjaF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gU3BlZWNoX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBTcGVlY2hfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgU3BlZWNoX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIFNwZWVjaF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IFNwZWVjaF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gU3BlZWNoX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuZnVuY3Rpb24gU3BlZWNoX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBTcGVlY2hfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gU3BlZWNoX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBTcGVlY2hfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIFNwZWVjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBTcGVlY2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChTcGVlY2hfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIFNwZWVjaF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBTcGVlY2hfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gU3BlZWNoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gU3BlZWNoX2dldFByb3RvdHlwZU9mKG8pIHsgU3BlZWNoX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIFNwZWVjaF9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qKlxcclxcbiAqIFRoZSBidWlsdC1pbiBjbGFzcyBmb3IgYXN5bmNocm9ub3VzIFByb21pc2VzLlxcclxcbiAqIEBleHRlcm5hbCBBdWRpb1xcclxcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxBdWRpb0VsZW1lbnQvQXVkaW9cXHJcXG4gKi9cXG5cXG4vKipcXHJcXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFNwZWVjaFxcclxcbiAqIEBhbGlhcyBjb3JlL1NwZWVjaFxcclxcbiAqL1xcblxcbnZhciBTcGVlY2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BYnN0cmFjdFNwZWVjaCkge1xcbiAgU3BlZWNoX2luaGVyaXRzKFNwZWVjaCwgX0Fic3RyYWN0U3BlZWNoKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBTcGVlY2hfY3JlYXRlU3VwZXIoU3BlZWNoKTtcXG5cXG4gIC8qKlxcclxcbiAgICogQGNvbnN0cnVjdG9yXFxyXFxuICAgKlxcclxcbiAgICogQHBhcmFtIHtUZXh0VG9TcGVlY2h9IHNwZWFrZXIgLSBUaGUgb3duZXIgb2YgdGhlIFNwZWVjaCB0aGF0IHdpbGwgZW1pdCBzcGVlY2htYXJrXFxyXFxuICAgKiBtZXNzYWdlcy5cXHJcXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHRleHQgb2YgdGhlIHNwZWVjaC5cXHJcXG4gICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IFtzcGVlY2htYXJrcz1bXV0gLSBBbiBhcnJheSBvZiBzcGVlY2htYXJrIG9iamVjdHMgcmVwcmVzZW50aW5nXFxyXFxuICAgKiB0aGUgdGV4dCBhbmQgdGltaW5nIG9mIHRoZSBzcGVlY2guXFxyXFxuICAgKiBAcGFyYW0ge09iamVjdH0gYXVkaW9Db25maWcgLSBPYmplY3QgY29udGFpbmluZyBhdWRpbyBhbmQgdXJsLlxcclxcbiAgICogQHBhcmFtIHtleHRlcm5hbDpBdWRpb30gYXVkaW9Db25maWcuYXVkaW8gLSBQbGF5YWJsZSBhdWRpbyBvYmplY3QuXFxyXFxuICAgKi9cXG4gIGZ1bmN0aW9uIFNwZWVjaChzcGVha2VyLCB0ZXh0KSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgdmFyIHNwZWVjaG1hcmtzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcXG4gICAgdmFyIGF1ZGlvQ29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XFxuXFxuICAgIFNwZWVjaF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcGVlY2gpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNwZWFrZXIsIHRleHQsIHNwZWVjaG1hcmtzKTtcXG4gICAgX3RoaXMuX2F1ZGlvID0gYXVkaW9Db25maWcuYXVkaW87IC8vIEtlZXAgdHJhY2sgb2Ygd2hldGhlciB0aGUgYXVkaW8gaGFzIGZpbmlzaGVkIHBsYXlpbmcgdGhyb3VnaFxcblxcbiAgICBfdGhpcy5fYXVkaW8ub25lbmRlZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICBfdGhpcy5fYXVkaW9GaW5pc2hlZCA9IHRydWU7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLl9hdWRpb0ZpbmlzaGVkID0gdHJ1ZTtcXG4gICAgcmV0dXJuIF90aGlzO1xcbiAgfVxcblxcbiAgU3BlZWNoX2NyZWF0ZUNsYXNzKFNwZWVjaCwgW3tcXG4gICAga2V5OiBcIl9jaGVja0ZpbmlzaGVkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2hlY2tGaW5pc2hlZCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fYXVkaW9GaW5pc2hlZCAmJiBTcGVlY2hfZ2V0KFNwZWVjaF9nZXRQcm90b3R5cGVPZihTcGVlY2gucHJvdG90eXBlKSwgXCJfY2hlY2tGaW5pc2hlZFwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHRoZSBwbGF5YWJsZSBhdWRpbyBmb3IgdGhlIHNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtleHRlcm5hbDpBdWRpb31cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJhdWRpb1wiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fYXVkaW87XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIGF1ZGlvIHZvbHVtZSBmb3IgdGhlIHNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHR5cGUge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ2b2x1bWVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX2F1ZGlvLnZvbHVtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU2V0cyB0aGUgYXVkaW8gdm9sdW1lIGZvciB0aGUgc3BlZWNoLlxcclxcbiAgICAgKi9cXG4gICAgLFxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2b2x1bWUpIHtcXG4gICAgICB0aGlzLl9hdWRpby52b2x1bWUgPSB2b2x1bWU7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFNldCB0aGUgYXVkaW9cXCdzIGN1cnJlbnQgbG9jYWwgdGltZSBhbmQgcGxheSBpdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfcGxheUF1ZGlvXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcGxheUF1ZGlvKCkge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIGlmICh0aGlzLl9zcGVlY2htYXJrT2Zmc2V0IDwgMCkge1xcbiAgICAgICAgdGhpcy5fYXVkaW8uY3VycmVudFRpbWUgPSB0aGlzLl9zcGVlY2htYXJrT2Zmc2V0O1xcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIGlmIChfdGhpczIuX3BsYXlpbmcpIHtcXG4gICAgICAgICAgICBfdGhpczIuX2F1ZGlvLmN1cnJlbnRUaW1lID0gKF90aGlzMi5fbG9jYWxUaW1lICsgX3RoaXMyLl9zcGVlY2htYXJrT2Zmc2V0KSAvIDEwMDA7XFxuXFxuICAgICAgICAgICAgX3RoaXMyLl9hdWRpby5wbGF5KCk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH0sIC10aGlzLl9zcGVlY2htYXJrT2Zmc2V0KTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhpcy5fYXVkaW8uY3VycmVudFRpbWUgPSAwO1xcblxcbiAgICAgICAgdGhpcy5fYXVkaW8ucGxheSgpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUGF1c2UgdGhlIGF1ZGlvIG9uY2UgaXQgaXMgcGxheWFibGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3BhdXNlQXVkaW9cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXVzZUF1ZGlvKCkge1xcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xcblxcbiAgICAgIHRoaXMuX2F1ZGlvLnBsYXkoKS50aGVuKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmICghX3RoaXMzLl9wbGF5aW5nKSB7XFxuICAgICAgICAgIF90aGlzMy5fYXVkaW8ucGF1c2UoKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicGxheVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheShjdXJyZW50VGltZSwgb25GaW5pc2gsIG9uRXJyb3IsIG9uSW50ZXJydXB0KSB7XFxuICAgICAgdGhpcy5fYXVkaW9GaW5pc2hlZCA9IGZhbHNlO1xcblxcbiAgICAgIHRoaXMuX3BsYXlBdWRpbygpO1xcblxcbiAgICAgIHJldHVybiBTcGVlY2hfZ2V0KFNwZWVjaF9nZXRQcm90b3R5cGVPZihTcGVlY2gucHJvdG90eXBlKSwgXCJwbGF5XCIsIHRoaXMpLmNhbGwodGhpcywgY3VycmVudFRpbWUsIG9uRmluaXNoLCBvbkVycm9yLCBvbkludGVycnVwdCk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInBhdXNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZShjdXJyZW50VGltZSkge1xcbiAgICAgIHRoaXMuX3BhdXNlQXVkaW8oKTtcXG5cXG4gICAgICBTcGVlY2hfZ2V0KFNwZWVjaF9nZXRQcm90b3R5cGVPZihTcGVlY2gucHJvdG90eXBlKSwgXCJwYXVzZVwiLCB0aGlzKS5jYWxsKHRoaXMsIGN1cnJlbnRUaW1lKTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVzdW1lXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWUoY3VycmVudFRpbWUsIG9uRmluaXNoLCBvbkVycm9yLCBvbkludGVycnVwdCkge1xcbiAgICAgIHRoaXMuX2F1ZGlvRmluaXNoZWQgPSBmYWxzZTtcXG5cXG4gICAgICB0aGlzLl9hdWRpby5wbGF5KCk7XFxuXFxuICAgICAgcmV0dXJuIFNwZWVjaF9nZXQoU3BlZWNoX2dldFByb3RvdHlwZU9mKFNwZWVjaC5wcm90b3R5cGUpLCBcInJlc3VtZVwiLCB0aGlzKS5jYWxsKHRoaXMsIGN1cnJlbnRUaW1lLCBvbkZpbmlzaCwgb25FcnJvciwgb25JbnRlcnJ1cHQpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJjYW5jZWxcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcXG4gICAgICB0aGlzLl9wYXVzZUF1ZGlvKCk7XFxuXFxuICAgICAgU3BlZWNoX2dldChTcGVlY2hfZ2V0UHJvdG90eXBlT2YoU3BlZWNoLnByb3RvdHlwZSksIFwiY2FuY2VsXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XFxuICAgICAgdGhpcy5fcGF1c2VBdWRpbygpO1xcblxcbiAgICAgIHRoaXMuX2F1ZGlvLmN1cnJlbnRUaW1lID0gMDtcXG5cXG4gICAgICBTcGVlY2hfZ2V0KFNwZWVjaF9nZXRQcm90b3R5cGVPZihTcGVlY2gucHJvdG90eXBlKSwgXCJzdG9wXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBTcGVlY2g7XFxufShhd3NwYWNrX0Fic3RyYWN0U3BlZWNoKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGF3c3BhY2tfU3BlZWNoID0gKFNwZWVjaCk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYXdzcGFjay9BYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUuanNcXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3R5cGVvZihvYmopOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX293bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX293bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX293bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfbm9uSXRlcmFibGVSZXN0KCk7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXFxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9hcnJheUxpa2VUb0FycmF5KGFycik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9zZXRQcm90b3R5cGVPZihvLCBwKSB7IEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XFxuXFxuZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2dldFByb3RvdHlwZU9mKG8pIHsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcblxcblxcblxcblxcblxcbi8qKlxcclxcbiAqIFRoZSBBbWF6b24gUG9sbHkgc2VydmljZSBvYmplY3QuXFxyXFxuICogQGV4dGVybmFsIFBvbGx5XFxyXFxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTSmF2YVNjcmlwdFNESy9sYXRlc3QvQVdTL1BvbGx5Lmh0bWxcXHJcXG4gKi9cXG5cXG4vKipcXHJcXG4gKiBUaGUgcHJlc2lnbmVyIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIHByZXNpZ25lZCB1cmxzIGZvciB0aGUgUG9sbHkgc2VydmljZS5cXHJcXG4gKiBAZXh0ZXJuYWwgUHJlc2lnbmVyXFxyXFxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTSmF2YVNjcmlwdFNESy9sYXRlc3QvQVdTL1BvbGx5L1ByZXNpZ25lci5odG1sXFxyXFxuICovXFxuLy8gQXZhaWxhYmxlIG9wdGlvbnMgZm9yIFBvbGx5XFxuXFxudmFyIGVuZ2luZXMgPSBbXFwnc3RhbmRhcmRcXCcsIFxcJ25ldXJhbFxcJ107XFxudmFyIGF1ZGlvRm9ybWF0cyA9IFtcXCdtcDNcXCcsIFxcJ29nZ192b3JiaXNcXCcsIFxcJ3BjbVxcJ107XFxudmFyIHNwZWVjaG1hcmtUeXBlcyA9IFtcXCdzZW50ZW5jZVxcJywgXFwnc3NtbFxcJywgXFwndmlzZW1lXFwnLCBcXCd3b3JkXFwnXTtcXG52YXIgc2FtcGxlUmF0ZXMgPSB7XFxuICBtcDM6IHtcXG4gICAgcmF0ZXM6IFtcXCc4MDAwXFwnLCBcXCcxNjAwMFxcJywgXFwnMjIwNTBcXCcsIFxcJzI0MDAwXFwnXSxcXG4gICAgZGVmYXVsdHM6IHtcXG4gICAgICBzdGFuZGFyZDogXFwnMjA1MFxcJyxcXG4gICAgICBuZXVyYWw6IFxcJzI0MDBcXCdcXG4gICAgfVxcbiAgfSxcXG4gIHBjbToge1xcbiAgICByYXRlczogW1xcJzgwMDBcXCcsIFxcJzE2MDAwXFwnXSxcXG4gICAgZGVmYXVsdHM6IHtcXG4gICAgICBzdGFuZGFyZDogXFwnMTYwMFxcJyxcXG4gICAgICBuZXVyYWw6IFxcJzE2MDBcXCdcXG4gICAgfVxcbiAgfVxcbn07XFxuc2FtcGxlUmF0ZXMub2dnX3ZvcmJpcyA9IHNhbXBsZVJhdGVzLm1wMztcXG52YXIgYXdzVmVyc2lvbjtcXG4vKipcXHJcXG4gKiBCYXNlIGNsYXNzIGZvciB0dXJuaW5nIHRleHQgaW5wdXQgaW50byBwbGF5YWJsZSBhdWRpby4gVGhlcmUgc2hvdWxkIGJlIG9uZSBpbnN0YW5jZVxcclxcbiAqIHBlciBzcGVha2VyLCBlYWNoIGluc3RhbmNlIGNhbiBwbGF5IG9ubHkgb25lIHBpZWNlIG9mIHRleHQgYXQgYSB0aW1lLlxcclxcbiAqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RIb3N0RmVhdHVyZVxcclxcbiAqIEBhYnN0cmFjdFxcclxcbiAqXFxyXFxuICogQHByb3BlcnR5IHsobnVtYmVyfHVuZGVmaW5lZCl9IEFXU19WRVJTSU9OIC0gR2V0cyB0aGUgdmVyc2lvbiBvZiBBV1MgU0RLIGJlaW5nXFxyXFxuICogdXNlZC4gV2lsbCBiZSB1bmRlZmluZWQgdW50aWwgW2luaXRpYWxpemVTZXJ2aWNlXXtAbGluayBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUuaW5pdGlhbGl6ZVNlcnZpY2V9XFxyXFxuICogaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbUE9MTFlfTUlOX05FVVJBTF9WRVJTSU9OPVxcJzIuNTAzXFwnXSAtIEdldHMgdGhlIG1pbmltdW0gdmVyc2lvblxcclxcbiAqIG9mIHRoZSBBV1MgU0RLIHRoYXQgaXMgbmVjZXNzYXJ5IHRvIHVzZSBuZXVyYWwgdm9pY2VzIHdpdGggQVdTIFBvbGx5LlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBQT0xMWV9ERUZBVUxUUyAtIERlZmF1bHQgdmFsdWVzIHRvIHVzZSB3aXRoIGNhbGxzIHRvIHtAbGluayBleHRlcm5hbDpQb2xseX0uXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtQT0xMWV9ERUZBVUxUUy5FbmdpbmU9XFwnc3RhbmRhcmRcXCddXFxyXFxuICogQHByb3BlcnR5IHtBcnJheS48c3RyaW5nPn0gW1BPTExZX0RFRkFVTFRTLkxleGljb25OYW1lcz1bXV1cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW1BPTExZX0RFRkFVTFRTLk91dHB1dEZvcm1hdD1cXCdtcDNcXCddXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtQT0xMWV9ERUZBVUxUUy5TYW1wbGVSYXRlPVxcJzIyMDUwXFwnXVxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbUE9MTFlfREVGQVVMVFMuVGV4dD1cXCdcXCddXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtQT0xMWV9ERUZBVUxUUy5UZXh0VHlwZT1cXCdzc21sXFwnXVxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbUE9MTFlfREVGQVVMVFMuVm9pY2VJZD1cXCdBbXlcXCddXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtQT0xMWV9ERUZBVUxUUy5MYW5ndWFnZUNvZGU9XFwnZW4tR0JcXCddXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtQT0xMWV9ERUZBVUxUUy5MYW5ndWFnZU5hbWU9XFwnQnJpdGlzaCBFbmdsaXNoXFwnXVxcclxcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IFtQT0xMWV9WT0lDRVM9W11dIC0gQW4gYXJyYXkgb2Ygdm9pY2VzIGF2YWlsYWJsZSBpblxcclxcbiAqIFBvbGx5LiBXaWxsIGJlIGVtcHR5IHVudGlsIFtpbml0aWFsaXplU2VydmljZV17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlLmluaXRpYWxpemVTZXJ2aWNlfVxcclxcbiAqIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC4gU2VlIFtQb2xseSBEb2N1bWVudGF0aW9uXXtAbGluayBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vcG9sbHkvbGF0ZXN0L2RnL3ZvaWNlbGlzdC5odG1sfVxcclxcbiAqIGZvciBhIGZ1bGwgbGlzdCBvZiBhdmFpbGFibGUgdm9pY2VzLlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbUE9MTFlfTEFOR1VBR0VTPXt9XSAtIEFuIG9iamVjdCB0aGF0IG1hcHMgbGFuZ3VhZ2UgbmFtZXNcXHJcXG4gKiB0byBsYW5ndWFnZSBjb2RlcyB0aGF0IGFyZSBhdmFpbGFibGUgaW4gUG9sbHkuIFdpbGwgYmUgZW1wdHkgdW50aWxcXHJcXG4gKiBbaW5pdGlhbGl6ZVNlcnZpY2Vde0BsaW5rIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZS5pbml0aWFsaXplU2VydmljZX1cXHJcXG4gKiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZXhlY3V0ZWQuIFNlZSBbUG9sbHkgRG9jdW1lbnRhdGlvbl17QGxpbmsgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL3BvbGx5L2xhdGVzdC9kZy9TdXBwb3J0ZWRMYW5ndWFnZS5odG1sfVxcclxcbiAqIGZvciBhIGZ1bGwgbGlzdCBvZiBhdmFpbGFibGUgbGFuZ3VhZ2VzIGFuZCBjb3JyZXNwb25kaW5nIGNvZGVzLlxcclxcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbUE9MTFlfTEFOR1VBR0VfQ09ERVM9e31dIC0gQW4gb2JqZWN0IHRoYXQgbWFwcyBsYW5ndWFnZSBjb2Rlc1xcclxcbiAqIHRvIGxhbmd1YWdlIG5hbWVzIHRoYXQgYXJlIGF2YWlsYWJsZSBpbiBQb2xseS4gV2lsbCBiZSBlbXB0eSB1bnRpbFxcclxcbiAqIFtpbml0aWFsaXplU2VydmljZV17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlLmluaXRpYWxpemVTZXJ2aWNlfVxcclxcbiAqIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC4gU2VlIFtQb2xseSBEb2N1bWVudGF0aW9uXXtAbGluayBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vcG9sbHkvbGF0ZXN0L2RnL1N1cHBvcnRlZExhbmd1YWdlLmh0bWx9XFxyXFxuICogZm9yIGEgZnVsbCBsaXN0IG9mIGF2YWlsYWJsZSBsYW5ndWFnZXMgYW5kIGNvcnJlc3BvbmRpbmcgY29kZXMuXFxyXFxuICogQHByb3BlcnR5IHtPYmplY3R9IEVWRU5UUyAtIEJ1aWx0LWluIG1lc3NhZ2VzIHRoYXQgdGhlIGZlYXR1cmUgZW1pdHMuIFdoZW4gdGhlXFxyXFxuICogZmVhdHVyZSBpcyBhZGRlZCB0byBhIHtAbGluayBjb3JlL0hvc3RPYmplY3R9LCBldmVudCBuYW1lcyB3aWxsIGJlIHByZWZpeGVkIGJ5IHRoZVxcclxcbiAqIG5hbWUgb2YgdGhlIGZlYXR1cmUgY2xhc3MgKyBcXCcuXFwnLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRTLnJlYWR5PW9uUmVhZHlFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZCBhZnRlclxcclxcbiAqIFtpbml0aWFsaXplU2VydmljZV17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlLmluaXRpYWxpemVTZXJ2aWNlfSBoYXMgYmVlblxcclxcbiAqIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy5wbGF5PW9uUGxheUV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpcyBlbWl0dGVkIGFmdGVyXFxyXFxuICogZWFjaCBjYWxsIHRvIFtwbGF5XXtAbGluayBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUjcGxheX0uIFRoZSBzcGVlY2ggdGhhdCB3YXMgcGxheWVkXFxyXFxuICogaXMgc3VwcGxpZWQgYXMgYW4gYXJndW1lbnQgdG8gbGlzdGVuZXIgZnVuY3Rpb25zLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRTLnBhdXNlPW9uUGF1c2VFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZCBhZnRlclxcclxcbiAqIGVhY2ggY2FsbCB0byBbcGF1c2Vde0BsaW5rIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZSNwYXVzZX0uIFRoZSBzcGVlY2ggdGhhdCB3YXMgcGF1c2VkXFxyXFxuICogaXMgc3VwcGxpZWQgYXMgYW4gYXJndW1lbnQgdG8gbGlzdGVuZXIgZnVuY3Rpb25zLlxcclxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbRVZFTlRTLnJlc3VtZT1vblJlc3VtZUV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpcyBlbWl0dGVkIGFmdGVyXFxyXFxuICogZWFjaCBjYWxsIHRvIFtyZXN1bWVde0BsaW5rIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZSNyZXN1bWV9LiBUaGUgc3BlZWNoIHRoYXQgd2FzXFxyXFxuICogcmVzdW1lZCBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuaW50ZXJydXB0PW9uSW50ZXJydXB0RXZlbnRdIC0gTWVzc2FnZSB0aGF0IGlzIGVtaXR0ZWRcXHJcXG4gKiBpZiB0aGVyZSBpcyBhIGN1cnJlbnQgc3BlZWNoIGluIHByb2dyZXNzIGFuZCBbcGxheV17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3BsYXl9XFxyXFxuICogb3IgW3Jlc3VtZV17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3Jlc3VtZX0gYXJlIGV4ZWN1dGVkIGZvciBhIG5ldyBzcGVlY2guXFxyXFxuICogVGhlIHNwZWVjaCB0aGF0IHdhcyBpbnRlcnJ1cHRlZCBpcyBzdXBwbGllZCBhcyBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuc3RvcD1vblN0b3BFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZCBhZnRlclxcclxcbiAqIGVhY2ggY2FsbCB0byBbc3RvcF17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3N0b3B9IGFuZCB3aGVuIGEgc3BlZWNoIHJlYWNoZXNcXHJcXG4gKiB0aGUgZW5kIG9mIHBsYXliYWNrLiBUaGUgc3BlZWNoIHRoYXQgd2FzIHN0b3BwZWQgaXMgc3VwcGxpZWQgYXMgYW4gYXJndW1lbnRcXHJcXG4gKiB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuc2VudGVuY2U9b25TZW50ZW5jZUV2ZW50XSAtIE1lc3NhZ2UgdGhhdCBpcyBlbWl0dGVkXFxyXFxuICogZWFjaCB0aW1lIGEgc2VudGVuY2Ugc3BlZWNobWFyayBpcyBlbmNvdW50ZXJlZCB3aG9zZSB0aW1lc3RhbXAgbWF0Y2hlcyB1cCB3aXRoXFxyXFxuICogdGhlIHNwZWVjaCBhdWRpb1xcJ3MgY3VycmVudCB0aW1lLiBUaGUgc2VudGVuY2Ugc3BlZWNobWFyayBvYmplY3QgaXMgc3VwcGxpZWQgYXNcXHJcXG4gKiBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMud29yZD1vbldvcmRFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZFxcclxcbiAqIGVhY2ggdGltZSBhIHdvcmQgc3BlZWNobWFyayBpcyBlbmNvdW50ZXJlZCB3aG9zZSB0aW1lc3RhbXAgbWF0Y2hlcyB1cCB3aXRoXFxyXFxuICogdGhlIHNwZWVjaCBhdWRpb1xcJ3MgY3VycmVudCB0aW1lLiBUaGUgd29yZCBzcGVlY2htYXJrIG9iamVjdCBpcyBzdXBwbGllZCBhc1xcclxcbiAqIGFuIGFyZ3VtZW50IHRvIGxpc3RlbmVyIGZ1bmN0aW9ucy5cXHJcXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW0VWRU5UUy52aXNlbWU9b25WaXNlbWVFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZFxcclxcbiAqIGVhY2ggdGltZSBhIHZpc2VtZSBzcGVlY2htYXJrIGlzIGVuY291bnRlcmVkIHdob3NlIHRpbWVzdGFtcCBtYXRjaGVzIHVwIHdpdGhcXHJcXG4gKiB0aGUgc3BlZWNoIGF1ZGlvXFwncyBjdXJyZW50IHRpbWUuIFRoZSB2aXNlbWUgc3BlZWNobWFyayBvYmplY3QgaXMgc3VwcGxpZWQgYXNcXHJcXG4gKiBhbiBhcmd1bWVudCB0byBsaXN0ZW5lciBmdW5jdGlvbnMuXFxyXFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtFVkVOVFMuc3NtbD1vblNzbWxFdmVudF0gLSBNZXNzYWdlIHRoYXQgaXMgZW1pdHRlZFxcclxcbiAqIGVhY2ggdGltZSBhIHNzbWwgc3BlZWNobWFyayBpcyBlbmNvdW50ZXJlZCB3aG9zZSB0aW1lc3RhbXAgbWF0Y2hlcyB1cCB3aXRoXFxyXFxuICogdGhlIHNwZWVjaCBhdWRpb1xcJ3MgY3VycmVudCB0aW1lLiBUaGUgc3NtbCBzcGVlY2htYXJrIG9iamVjdCBpcyBzdXBwbGllZCBhc1xcclxcbiAqIGFuIGFyZ3VtZW50IHRvIGxpc3RlbmVyIGZ1bmN0aW9ucy5cXHJcXG4gKiBAcHJvcGVydHkge09iamVjdH0gU0VSVklDRVMgLSBBV1Mgc2VydmljZXMgdGhhdCBhcmUgbmVjZXNzYXJ5IGZvciB0aGUgZmVhdHVyZVxcclxcbiAqIHRvIGZ1bmN0aW9uLlxcclxcbiAqIEBwcm9wZXJ0eSB7ZXh0ZXJuYWw6UG9sbHl9IFNFUlZJQ0VTLnBvbGx5IC0gVGhlIFBvbGx5IHNlcnZpY2UgdGhhdCBpcyB1c2VkXFxyXFxuICogdG8gc3ludGhlc2l6ZSBzcGVlY2htYXJrcy4gV2lsbCBiZSB1bmRlZmluZWQgdW50aWwgW2luaXRpYWxpemVTZXJ2aWNlXXtAbGluayBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUuaW5pdGlhbGl6ZVNlcnZpY2V9XFxyXFxuICogaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkXFxyXFxuICogQHByb3BlcnR5IHtleHRlcm5hbDpQcmVzaWduZXJ9IFNFUlZJQ0VTLnByZXNpZ25lciAtIFRoZSBQb2xseSBQcmVzaWduZXJcXHJcXG4gKiBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIHN5bnRoZXNpemUgc3BlZWNoIGF1ZGlvLiBXaWxsIGJlIHVuZGVmaW5lZCB1bnRpbFxcclxcbiAqIFtpbml0aWFsaXplU2VydmljZV17QGxpbmsgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlLmluaXRpYWxpemVTZXJ2aWNlfVxcclxcbiAqIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleGVjdXRlZC5cXHJcXG4gKi9cXG5cXG52YXIgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQWJzdHJhY3RIb3N0RmVhdHVyZSkge1xcbiAgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2luaGVyaXRzKEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZSwgX0Fic3RyYWN0SG9zdEZlYXR1cmUpO1xcblxcbiAgdmFyIF9zdXBlciA9IEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9jcmVhdGVTdXBlcihBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUpO1xcblxcbiAgLyoqXFxyXFxuICAgKiBAY29uc3RydWN0b3JcXHJcXG4gICAqXFxyXFxuICAgKiBAcGFyYW0ge2NvcmUvSG9zdE9iamVjdH0gaG9zdCAtIEhvc3Qgb2JqZWN0IG1hbmFnaW5nIHRoZSBmZWF0dXJlLlxcclxcbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIC0gT3B0aW9ucyB0aGF0IHdpbGwgYmUgc2VudCB0byBQb2xseSBmb3IgZWFjaCBzcGVlY2guXFxyXFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdGlvbnMudm9pY2UgLSBUaGUgbmFtZSBvZiB0aGUgUG9sbHkgdm9pY2UgdG8gdXNlIGZvciBhbGwgc3BlZWNoLlxcclxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLmVuZ2luZSAtIFRoZSBuYW1lIG9mIHRoZSBQb2xseSBlbmdpbmUgdG8gdXNlIGZvciBhbGwgc3BlZWNoLlxcclxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLmxhbmd1YWdlIC0gVGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIHRvIHVzZSBmb3IgYWxsIHNwZWVjaC5cXHJcXG4gICAqIEBwYXJhbSB7YXVkaW9Gb3JtYXR9IFtvcHRpb25zLmF1ZGlvRm9ybWF0PVxcJ21wM1xcJ10gLSBUaGUgZm9ybWF0IHRvIHVzZSBmb3IgZ2VuZXJhdGVkXFxyXFxuICAgKiBhdWRpbyBmb3IgYWxsIHNwZWVjaGVzLlxcclxcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLnNhbXBsZVJhdGUgLSBUaGUgc2FtcGxlIHJhdGUgZm9yIGF1ZGlvIGZpbGVzIGZvciBhbGxcXHJcXG4gICAqIHNwZWVjaGVzLlxcclxcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNwZWVjaG1hcmtPZmZzZXQ9MF0gLSBBbW91bnQgb2YgdGltZSBpbiBzZWNvbmRzIHRvXFxyXFxuICAgKiBvZmZzZXQgc3BlZWNobWFyayBldmVudCBlbWlzc2lvbiBmcm9tIHRoZSBhdWRpby5cXHJcXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5FbmRNYXJrRHVyYXRpb249LjA1XSAtIFRoZSBtaW5pbXVtIGFtb3VudCBvZiB0aW1lXFxyXFxuICAgKiBpbiBzZWNvbmRzIHRoYXQgdGhlIGxhc3Qgc3BlZWNobWFyayBvZiBlYWNoIHR5cGUgaW4gYSBzcGVlY2ggY2FuIGhhdmUgaXRzXFxyXFxuICAgKiBkdXJhdGlvbiBwcm9wZXJ0eSBzZXQgdG8uXFxyXFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudm9sdW1lPTFdIC0gVGhlIGRlZmF1bHQgdm9sdW1lIHRvIHBsYXkgc3BlZWNoIGF1ZGlvXFxyXFxuICAgKiB3aXRoLlxcclxcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pc0dsb2JhbD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBhdWRpbyBzb3VyY2Ugc2hvdWxkIGRlZmF1bHRcXHJcXG4gICAqIHRvIGdsb2JhbCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgb3Igbm90IGl0IGlzIGF0dGFjaGVkIHRvIGFuIG9iamVjdC5cXHJcXG4gICAqL1xcbiAgZnVuY3Rpb24gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlKGhvc3QpIHtcXG4gICAgdmFyIF90aGlzO1xcblxcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xcbiAgICAgIHZvaWNlOiB1bmRlZmluZWQsXFxuICAgICAgZW5naW5lOiB1bmRlZmluZWQsXFxuICAgICAgbGFuZ3VhZ2U6IHVuZGVmaW5lZCxcXG4gICAgICBhdWRpb0Zvcm1hdDogXFwnbXAzXFwnLFxcbiAgICAgIHNhbXBsZVJhdGU6IHVuZGVmaW5lZCxcXG4gICAgICBzcGVlY2htYXJrT2Zmc2V0OiAwLFxcbiAgICAgIG1pbkVuZE1hcmtEdXJhdGlvbjogMC4wNSxcXG4gICAgICB2b2x1bWU6IDEsXFxuICAgICAgaXNHbG9iYWw6IGZhbHNlXFxuICAgIH07XFxuXFxuICAgIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9jbGFzc0NhbGxDaGVjayh0aGlzLCBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUpO1xcblxcbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3QpO1xcbiAgICBfdGhpcy5fc3BlZWNoQ2FjaGUgPSB7fTtcXG4gICAgX3RoaXMuX2N1cnJlbnRTcGVlY2ggPSBudWxsO1xcbiAgICBfdGhpcy5fY3VycmVudFByb21pc2UgPSBudWxsO1xcbiAgICBfdGhpcy5faXNWYWxpZGF0ZWQgPSBmYWxzZTtcXG4gICAgX3RoaXMuc3BlZWNobWFya09mZnNldCA9IE51bWJlci5pc05hTihOdW1iZXIob3B0aW9ucy5zcGVlY2htYXJrT2Zmc2V0KSkgPyAwIDogTnVtYmVyKG9wdGlvbnMuc3BlZWNobWFya09mZnNldCk7XFxuICAgIF90aGlzLm1pbkVuZE1hcmtEdXJhdGlvbiA9IE51bWJlci5pc05hTihOdW1iZXIob3B0aW9ucy5taW5FbmRNYXJrRHVyYXRpb24pKSA/IDAgOiBOdW1iZXIob3B0aW9ucy5taW5FbmRNYXJrRHVyYXRpb24pO1xcbiAgICBfdGhpcy52b2x1bWUgPSBOdW1iZXIuaXNOYU4oTnVtYmVyKG9wdGlvbnMudm9sdW1lKSkgPyAxIDogTnVtYmVyKG9wdGlvbnMudm9sdW1lKTtcXG4gICAgX3RoaXMuX2lzR2xvYmFsID0gb3B0aW9ucy5pc0dsb2JhbCB8fCBmYWxzZTtcXG4gICAgX3RoaXMuX3Byb21pc2VzID0ge1xcbiAgICAgIHZvbHVtZTogY29yZV9EZWZlcnJlZC5yZXNvbHZlKClcXG4gICAgfTtcXG4gICAgX3RoaXMuX3ZvbHVtZVBhdXNlZCA9IGZhbHNlOyAvLyBTZXQgZGVmYXVsdCBvcHRpb25zIGZvciBlYWNoIHNwZWVjaFxcblxcbiAgICBfdGhpcy5fdm9pY2UgPSBvcHRpb25zLnZvaWNlIHx8IF90aGlzLmNvbnN0cnVjdG9yLlBPTExZX0RFRkFVTFRTLlZvaWNlSWQ7XFxuICAgIF90aGlzLl9sYW5ndWFnZSA9IG9wdGlvbnMubGFuZ3VhZ2UgfHwgX3RoaXMuY29uc3RydWN0b3IuUE9MTFlfREVGQVVMVFMuTGFuZ3VhZ2VOYW1lO1xcbiAgICBfdGhpcy5fZW5naW5lID0gZW5naW5lcy5pbmNsdWRlcyhvcHRpb25zLmVuZ2luZSkgPyBvcHRpb25zLmVuZ2luZSA6IF90aGlzLmNvbnN0cnVjdG9yLlBPTExZX0RFRkFVTFRTLkVuZ2luZTtcXG4gICAgX3RoaXMuX2F1ZGlvRm9ybWF0ID0gYXVkaW9Gb3JtYXRzLmluY2x1ZGVzKG9wdGlvbnMuYXVkaW9Gb3JtYXQpID8gb3B0aW9ucy5hdWRpb0Zvcm1hdCA6IF90aGlzLmNvbnN0cnVjdG9yLlBPTExZX0RFRkFVTFRTLk91dHB1dEZvcm1hdDtcXG4gICAgX3RoaXMuX3NhbXBsZVJhdGUgPSBzYW1wbGVSYXRlc1tfdGhpcy5fYXVkaW9Gb3JtYXRdLnJhdGVzLmluY2x1ZGVzKG9wdGlvbnMuc2FtcGxlUmF0ZSkgPyBvcHRpb25zLnNhbXBsZVJhdGUgOiBfdGhpcy5jb25zdHJ1Y3Rvci5QT0xMWV9ERUZBVUxUUy5TYW1wbGVSYXRlO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIFN0b3JlIFBvbGx5LCBQcmVzaWduZXIgYW5kIEFXUyBTREsgVmVyc2lvbiBmb3IgdXNlIGFjcm9zcyBhbGwgaW5zdGFuY2VzLlxcclxcbiAgICpcXHJcXG4gICAqIEBwYXJhbSB7ZXh0ZXJuYWw6UG9sbHl9IHBvbGx5IC0gUG9sbHkgaW5zdGFuY2UgdG8gdXNlIHRvIGdlbmVyYXRlIHNwZWVjaG1hcmtzLlxcclxcbiAgICogQHBhcmFtIHtleHRlcm5hbDpQcmVzaWduZXJ9IHByZXNpZ25lciAtIFByZXNpZ25lciBpbnN0YW5jZSB0byB1c2UgdG8gZ2VuZXJhdGVcXHJcXG4gICAqIGF1ZGlvIFVSTHMuXFxyXFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvbiAtIFZlcnNpb24gb2YgdGhlIEFXUyBTREsgdG8gdXNlIHRvIHZhbGlkYXRlIHZvaWNlIG9wdGlvbnMuXFxyXFxuICAgKi9cXG5cXG5cXG4gIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9jcmVhdGVDbGFzcyhBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUsIFt7XFxuICAgIGtleTogXCJjdXJyZW50U3BlZWNoXCIsXFxuICAgIGdldDpcXG4gICAgLyoqXFxyXFxuICAgICAqIEdldHMgdGhlIHRleHQgb2YgdGhlIGN1cnJlbnRseSBwbGF5aW5nIHNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJlYWRvbmx5XFxyXFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcbiAgICBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTcGVlY2gpIHtcXG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50U3BlZWNoLnRleHQ7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBudWxsO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyBhbmQgc2V0cyB0aGUgbnVtYmVyIG9mIHNlY29uZHMgdG8gb2Zmc2V0IHNwZWVjaG1hcmsgZW1pc3Npb24uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic3BlZWNobWFya09mZnNldFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fc3BlZWNobWFya09mZnNldDtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob2Zmc2V0KSB7XFxuICAgICAgdGhpcy5fc3BlZWNobWFya09mZnNldCA9IG9mZnNldDtcXG5cXG4gICAgICBpZiAodGhpcy5fY3VycmVudFNwZWVjaCkge1xcbiAgICAgICAgdGhpcy5fY3VycmVudFNwZWVjaC5zcGVlY2htYXJrT2Zmc2V0ID0gb2Zmc2V0O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyBhbmQgc2V0cyB0aGUgVGhlIG1pbmltdW0gYW1vdW50IG9mIHRpbWUgaW4gc2Vjb25kcyB0aGF0IHRoZSBsYXN0XFxyXFxuICAgICAqIHNwZWVjaG1hcmsgb2YgZWFjaCB0eXBlIGluIGEgc3BlZWNoIGNhbiBoYXZlIGl0cyBkdXJhdGlvbiBwcm9wZXJ0eSBzZXQgdG8uXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEB0eXBlIG51bWJlclxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIm1pbkVuZE1hcmtEdXJhdGlvblwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fbWluRW5kTWFya0R1cmF0aW9uIC8gMTAwMDtcXG4gICAgfSxcXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoZHVyYXRpb24pIHtcXG4gICAgICB0aGlzLl9taW5FbmRNYXJrRHVyYXRpb24gPSBkdXJhdGlvbiAqIDEwMDA7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIEFwcGVuZHMgdGhlIFN1bWVyaWFuIEhvc3RzIGN1c3RvbSB1c2VyLWFnZW50IHRvIGEgc3RyaW5nIGlmIGl0IGlzIG5vdFxcclxcbiAgICAgKiBhbHJlYWR5IHByZXNlbnQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50VXNlckFnZW50IC0gU3RyaW5nIHRvIGFwcGVuZCB0byBpZiBuZWVkZWQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3ZhbGlkYXRlRW5naW5lXCIsXFxuICAgIHZhbHVlOlxcbiAgICAvKipcXHJcXG4gICAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gZW5naW5lIHR5cGUgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBBV1MgU0RLIHZlcnNpb24uIElmIGl0XFxyXFxuICAgICAqIGlzLCByZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlLiBPdGhlcndpc2UgcmV0dXJuIGEgZGVmYXVsdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZSAtIFRoZSB0eXBlIG9mIFBvbGx5IHZvaWNlIGVuZ2luZSB0byB2YWxpZGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ31cXHJcXG4gICAgICovXFxuICAgIGZ1bmN0aW9uIF92YWxpZGF0ZUVuZ2luZShlbmdpbmUpIHtcXG4gICAgICAvLyBEZWZhdWx0IHRvIHRoZSBzdGFuZGFyZCBlbmdpbmUgaWYgbmV1cmFsIGlzIG5vdCBhdmFpbGFibGUgZm9yIHRoaXMgdmVyc2lvblxcbiAgICAgIGlmIChlbmdpbmUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmNvbnN0cnVjdG9yLkFXU19WRVJTSU9OIDwgdGhpcy5jb25zdHJ1Y3Rvci5QT0xMWV9NSU5fTkVVUkFMX1ZFUlNJT04pIHtcXG4gICAgICAgIGVuZ2luZSA9IHRoaXMuY29uc3RydWN0b3IuUE9MTFlfREVGQVVMVFMuRW5naW5lO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gZW5naW5lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDaGVja3MgaWYgYSBnaXZlbiBhdWRpbyBmb3JtYXQgdHlwZSBpcyBjb21wYXRpYmxlIHdpdGggUG9sbHkuIElmIGl0IGlzLCByZXR1cm5cXHJcXG4gICAgICogdGhlIG9yaWdpbmFsIHZhbHVlLiBPdGhlcndpc2UgcmV0dXJuIGEgZGVmYXVsdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZSAtIFRoZSB0eXBlIG9mIFBvbGx5IHZvaWNlIGVuZ2luZSB0byB2YWxpZGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ31cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfdmFsaWRhdGVGb3JtYXRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF92YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcXG4gICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQgfHwgIWF1ZGlvRm9ybWF0cy5pbmNsdWRlcyhmb3JtYXQpKSB7XFxuICAgICAgICBmb3JtYXQgPSB0aGlzLmNvbnN0cnVjdG9yLlBPTExZX0RFRkFVTFRTLk91dHB1dEZvcm1hdDtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGZvcm1hdDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gYXVkaW8gc2FtcGxpbmcgcmF0ZSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgYXVkaW9cXHJcXG4gICAgICogZm9ybWF0LiBJZiBpdCBpcywgcmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZS4gT3RoZXJ3aXNlIHJldHVybiBhIGRlZmF1bHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmdpbmUgLSBUaGUgdHlwZSBvZiBQb2xseSB2b2ljZSBlbmdpbmUgdG8gdmFsaWRhdGUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3ZhbGlkYXRlUmF0ZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ZhbGlkYXRlUmF0ZShyYXRlKSB7XFxuICAgICAgLy8gVXNlIGRlZmF1bHQgaWYgc3BlY2lmaWVkIHNhbXBsZSByYXRlIGlzIG5vdCB2YWxpZCBmb3IgdGhlIGF1ZGlvIGZvcm1hdFxcbiAgICAgIGlmIChyYXRlID09PSB1bmRlZmluZWQgfHwgIXNhbXBsZVJhdGVzW3RoaXMuX2F1ZGlvRm9ybWF0XS5yYXRlcy5pbmNsdWRlcyhyYXRlKSkge1xcbiAgICAgICAgcmF0ZSA9IHNhbXBsZVJhdGVzW3RoaXMuX2F1ZGlvRm9ybWF0XS5kZWZhdWx0c1t0aGlzLl9lbmdpbmVdO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gcmF0ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gUG9sbHkgdm9pY2UgaWQgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50IFBvbGx5IGVuZ2luZS5cXHJcXG4gICAgICogSWYgaXQgaXMsIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUuIE90aGVyd2lzZSByZXR1cm4gYSBkZWZhdWx0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lIC0gVGhlIHR5cGUgb2YgUG9sbHkgdm9pY2UgZW5naW5lIHRvIHZhbGlkYXRlLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl92YWxpZGF0ZVZvaWNlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdmFsaWRhdGVWb2ljZSh2b2ljZUlkKSB7XFxuICAgICAgdmFyIHZvaWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5QT0xMWV9WT0lDRVMuZmluZChmdW5jdGlvbiAodikge1xcbiAgICAgICAgcmV0dXJuIHYuSWQgPT09IHZvaWNlSWQ7XFxuICAgICAgfSk7IC8vIFVzZSB0aGUgZGVmYXVsdCB2b2ljZSBpZiB0aGUgdm9pY2UgaXNuXFwndCBzdXBwb3J0ZWQgYnkgdGhlIGVuZ2luZVxcblxcbiAgICAgIGlmICh2b2ljZSA9PT0gdW5kZWZpbmVkIHx8ICF2b2ljZS5TdXBwb3J0ZWRFbmdpbmVzLmluY2x1ZGVzKHRoaXMuX2VuZ2luZSkpIHtcXG4gICAgICAgIHZvaWNlSWQgPSB0aGlzLmNvbnN0cnVjdG9yLlBPTExZX0RFRkFVTFRTLlZvaWNlSWQ7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiB2b2ljZUlkO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBDaGVja3MgaWYgYSBnaXZlbiBQb2xseSBsYW5ndWFnZSBpcyBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgUG9sbHkgdm9pY2UuXFxyXFxuICAgICAqIElmIGl0IGlzLCByZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlLiBPdGhlcndpc2UgcmV0dXJuIGEgZGVmYXVsdC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZSAtIFRoZSB0eXBlIG9mIFBvbGx5IHZvaWNlIGVuZ2luZSB0byB2YWxpZGF0ZS5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge3N0cmluZ31cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfdmFsaWRhdGVMYW5ndWFnZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3ZhbGlkYXRlTGFuZ3VhZ2UobGFuZ3VhZ2UpIHtcXG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcXG5cXG4gICAgICB2YXIgdm9pY2UgPSB0aGlzLmNvbnN0cnVjdG9yLlBPTExZX1ZPSUNFUy5maW5kKGZ1bmN0aW9uICh2KSB7XFxuICAgICAgICByZXR1cm4gdi5JZCA9PT0gX3RoaXMyLl92b2ljZTtcXG4gICAgICB9KTtcXG4gICAgICB2YXIgbGFuZ3VhZ2VDb2RlID0gdGhpcy5jb25zdHJ1Y3Rvci5QT0xMWV9MQU5HVUFHRVNbbGFuZ3VhZ2VdOyAvLyBGaW5kIHRoZSBsYW5ndWFnZXMgYXZhaWxhYmxlIGZvciB0aGUgY3VycmVudCB2b2ljZVxcblxcbiAgICAgIHZhciBhdmFpbGFibGVDb2RlcyA9IFt2b2ljZS5MYW5ndWFnZUNvZGVdO1xcblxcbiAgICAgIGlmICh2b2ljZS5BZGRpdGlvbmFsTGFuZ3VhZ2VDb2Rlcykge1xcbiAgICAgICAgYXZhaWxhYmxlQ29kZXMucHVzaC5hcHBseShhdmFpbGFibGVDb2RlcywgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3RvQ29uc3VtYWJsZUFycmF5KHZvaWNlLkFkZGl0aW9uYWxMYW5ndWFnZUNvZGVzKSk7XFxuICAgICAgfSAvLyBJZiB0aGUgY3VycmVudCB2b2ljZSBkb2VzblxcJ3Qgc3VwcG9ydCB0aGUgbGFuZ3VhZ2UsIHVzZSBpdHMgZGVmYXVsdFxcblxcblxcbiAgICAgIGlmICghYXZhaWxhYmxlQ29kZXMuaW5jbHVkZXMobGFuZ3VhZ2VDb2RlKSkge1xcbiAgICAgICAgbGFuZ3VhZ2UgPSB0aGlzLmNvbnN0cnVjdG9yLlBPTExZX0xBTkdVQUdFX0NPREVTW3ZvaWNlLkxhbmd1YWdlQ29kZV07XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBsYW5ndWFnZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVmFsaWRhdGUgdGhlIGN1cnJlbnQgUG9sbHkgb3B0aW9ucyB0byBtYWtlIHN1cmUgdGhleSBhcmUgY29tcGF0aWJsZSB3aXRoIGVhY2hcXHJcXG4gICAgICogb3RoZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3ZhbGlkYXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdmFsaWRhdGUoKSB7XFxuICAgICAgLy8gVmFsaWRhdGUgc3BlZWNoIHBhcmFtZXRlcnNcXG4gICAgICB0aGlzLl9lbmdpbmUgPSB0aGlzLl92YWxpZGF0ZUVuZ2luZSh0aGlzLl9lbmdpbmUpO1xcbiAgICAgIHRoaXMuX2F1ZGlvRm9ybWF0ID0gdGhpcy5fdmFsaWRhdGVGb3JtYXQodGhpcy5fYXVkaW9Gb3JtYXQpO1xcbiAgICAgIHRoaXMuX3NhbXBsZVJhdGUgPSB0aGlzLl92YWxpZGF0ZVJhdGUodGhpcy5fc2FtcGxlUmF0ZSk7XFxuICAgICAgdGhpcy5fdm9pY2UgPSB0aGlzLl92YWxpZGF0ZVZvaWNlKHRoaXMuX3ZvaWNlKTtcXG4gICAgICB0aGlzLl9sYW5ndWFnZSA9IHRoaXMuX3ZhbGlkYXRlTGFuZ3VhZ2UodGhpcy5fbGFuZ3VhZ2UpO1xcbiAgICAgIHRoaXMuX2lzVmFsaWRhdGVkID0gdHJ1ZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogUmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIHBhcmFtZXRlcnMgY29tcGF0aWJsZSB3aXRoIFBvbGx5LnN5bnRoZXNpemVTcGVlY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiX2dldENvbmZpZ1wiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENvbmZpZygpIHtcXG4gICAgICAvLyBNYWtlIHN1cmUgcGFyYW1ldGVycyBoYXZlIGJlZW4gdmFsaWRhdGVkXFxuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuaXNSZWFkeSAmJiAhdGhpcy5faXNWYWxpZGF0ZWQpIHtcXG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlKCk7XFxuICAgICAgfSAvLyBDcmVhdGUgYSBjb25maWcgb2JqZWN0IGNvbXBhdGlibGUgd2l0aCBQb2xseVxcblxcblxcbiAgICAgIHJldHVybiB7XFxuICAgICAgICBFbmdpbmU6IHRoaXMuX2VuZ2luZSxcXG4gICAgICAgIE91dHB1dEZvcm1hdDogdGhpcy5fYXVkaW9Gb3JtYXQsXFxuICAgICAgICBTYW1wbGVSYXRlOiB0aGlzLl9zYW1wbGVSYXRlLFxcbiAgICAgICAgVm9pY2VJZDogdGhpcy5fdm9pY2UsXFxuICAgICAgICBMYW5ndWFnZUNvZGU6IHRoaXMuY29uc3RydWN0b3IuUE9MTFlfTEFOR1VBR0VTW3RoaXMuX2xhbmd1YWdlXVxcbiAgICAgIH07XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZSBQb2xseSBwYXJhbWV0ZXJzIHdpdGggb3B0aW9ucyBmcm9tIGEgZ2l2ZW4gY29uZmlnLiBBbGwgc3RvcmVkIHNwZWVjaGVzXFxyXFxuICAgICAqIHdpbGwgYmUgdXBkYXRlZCB0byB1c2UgdGhlIG5ldyBwYXJhbWV0ZXJzLCB1bmxlc3MgdGhlIHNwZWVjaCB0ZXh0IGlzIGNvbnRhaW5lZFxcclxcbiAgICAgKiBpbiB0aGUgXFwnc2tpcFNwZWVjaGVzXFwnIHBhcmFtZXRlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAtIFBvbGx5IHBhcmFtZXRlciBvcHRpb25zIHRvIG92ZXJ3cml0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gc2tpcFNwZWVjaGVzIC0gVGV4dCBvZiBhbnkgc3BlZWNoZXMgdGhhdCBzaG91bGQgbm90XFxyXFxuICAgICAqIGhhdmUgcGFyYW1ldGVycyB1cGRhdGVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl91cGRhdGVDb25maWdcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVDb25maWcoY29uZmlnKSB7XFxuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgdmFyIHNraXBTcGVlY2hlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107XFxuXFxuICAgICAgdmFyIGN1cnJlbnRDb25maWcgPSB0aGlzLl9nZXRDb25maWcoKTtcXG5cXG4gICAgICBpZiAoIWNvbmZpZykge1xcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDb25maWc7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX2lzVmFsaWRhdGVkID0gZmFsc2U7XFxuICAgICAgdmFyIGN1cnJlbnRDb25maWdTdHIgPSBKU09OLnN0cmluZ2lmeShjdXJyZW50Q29uZmlnKTsgLy8gVXBkYXRlIG9wdGlvbnNcXG5cXG4gICAgICBpZiAoY29uZmlnLkVuZ2luZSkge1xcbiAgICAgICAgdGhpcy5fZW5naW5lID0gY29uZmlnLkVuZ2luZTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKGNvbmZpZy5hdWRpb0Zvcm1hdCkge1xcbiAgICAgICAgdGhpcy5fYXVkaW9Gb3JtYXQgPSBjb25maWcuYXVkaW9Gb3JtYXQ7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChjb25maWcuU2FtcGxlUmF0ZSkge1xcbiAgICAgICAgdGhpcy5fc2FtcGxlUmF0ZSA9IGNvbmZpZy5TYW1wbGVSYXRlO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoY29uZmlnLlZvaWNlSWQpIHtcXG4gICAgICAgIHRoaXMuX3ZvaWNlID0gY29uZmlnLlZvaWNlSWQ7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChjb25maWcuTGFuZ3VhZ2UpIHtcXG4gICAgICAgIHRoaXMuX2xhbmd1YWdlID0gY29uZmlnLkxhbmd1YWdlO1xcbiAgICAgIH0gLy8gVmFsaWRhdGUgdGhlIGNvbmZpZ1xcblxcblxcbiAgICAgIHZhciB2YWxpZENvbmZpZyA9IHRoaXMuX2dldENvbmZpZygpOyAvLyBFeGl0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWRcXG5cXG5cXG4gICAgICB2YXIgY29uZmlnU3RyID0gSlNPTi5zdHJpbmdpZnkodmFsaWRDb25maWcpO1xcblxcbiAgICAgIGlmIChjdXJyZW50Q29uZmlnU3RyID09PSBjb25maWdTdHIpIHtcXG4gICAgICAgIHRoaXMuX2lzVmFsaWRhdGVkID0gdHJ1ZTtcXG4gICAgICAgIHJldHVybiB2YWxpZENvbmZpZztcXG4gICAgICB9IC8vIFVwZGF0ZSBhbGwgY2FjaGVkIGNvbmZpZ3NcXG5cXG5cXG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLl9zcGVlY2hDYWNoZSkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xcbiAgICAgICAgdmFyIF9yZWYyID0gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXFxuICAgICAgICAgICAgdGV4dCA9IF9yZWYyWzBdLFxcbiAgICAgICAgICAgIHNwZWVjaCA9IF9yZWYyWzFdO1xcblxcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIHNraXBwZWQgc3BlZWNoXFxuICAgICAgICBpZiAoc2tpcFNwZWVjaGVzLmluY2x1ZGVzKHRleHQpKSB7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciBzcGVlY2hDb25maWdTdHIgPSBKU09OLnN0cmluZ2lmeShzcGVlY2guY29uZmlnKTsgLy8gVXBkYXRlIHRoZSBzcGVlY2ggd2l0aCBuZXcgcGFyYW1ldGVyc1xcblxcbiAgICAgICAgaWYgKHNwZWVjaENvbmZpZ1N0ciAhPT0gY29uZmlnU3RyKSB7XFxuICAgICAgICAgIF90aGlzMy5fdXBkYXRlU3BlZWNoKHRleHQsIHZhbGlkQ29uZmlnKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gdmFsaWRDb25maWc7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZSBhbiBleGlzdGluZyBzcGVlY2gsIG9yIGFkZCBhIG5ldyBzcGVlY2ggd2l0aCBuZXcgUG9sbHkgcGFyYW1ldGVycyB3aXRoXFxyXFxuICAgICAqIG9wdGlvbnMgZnJvbSBhIGdpdmVuIGNvbmZpZy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCBvZiB0aGUgc3BlZWNoIHRvIHVwZGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAtIFBvbGx5IHBhcmFtZXRlciBvcHRpb25zIHRvIHVwZGF0ZS5cXHJcXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZm9yY2U9ZmFsc2VdIC0gV2hldGhlciB0byBmb3JjZSB0aGUgc3BlZWNoIHRvIGJlIHVwZGF0ZWRcXHJcXG4gICAgICogaWYgbm8gcGFyYW1ldGVycyBoYXZlIGNoYW5nZXMuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtBYnN0cmFjdFNwZWVjaH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfdXBkYXRlU3BlZWNoXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdXBkYXRlU3BlZWNoKHRleHQsIGNvbmZpZykge1xcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XFxuICAgICAgdmFyIHNwZWVjaCA9IHRoaXMuX3NwZWVjaENhY2hlW3RleHRdIHx8IHt9OyAvLyBFeGl0IGlmIG5vdGhpbmcgaGFzIGNoYW5nZWQgYW5kIGZvcmNlIGlzIGZhbHNlXFxuXFxuICAgICAgaWYgKCFmb3JjZSAmJiBjb25maWcgIT09IHVuZGVmaW5lZCAmJiBzcGVlY2guY29uZmlnICYmIEpTT04uc3RyaW5naWZ5KGNvbmZpZykgPT09IEpTT04uc3RyaW5naWZ5KHNwZWVjaC5jb25maWcpKSB7XFxuICAgICAgICByZXR1cm4gc3BlZWNoO1xcbiAgICAgIH0gLy8gQ3JlYXRlIHNlcGFyYXRlIHBhcmFtZXRlcnMgZm9yIGF1ZGlvIGFuZCBzcGVlY2htYXJrIGdlbmVyYXRpb25cXG5cXG5cXG4gICAgICB2YXIgYXVkaW9QYXJhbXMgPSBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfb2JqZWN0U3ByZWFkKEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XFxuICAgICAgICBUZXh0OiB0ZXh0LFxcbiAgICAgICAgVGV4dFR5cGU6IFxcJ3NzbWxcXCdcXG4gICAgICB9KTtcXG5cXG4gICAgICB2YXIgc3BlZWNobWFya1BhcmFtcyA9IEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9vYmplY3RTcHJlYWQoQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX29iamVjdFNwcmVhZCh7fSwgYXVkaW9QYXJhbXMpLCB7fSwge1xcbiAgICAgICAgT3V0cHV0Rm9ybWF0OiBcXCdqc29uXFwnLFxcbiAgICAgICAgU3BlZWNoTWFya1R5cGVzOiBzcGVlY2htYXJrVHlwZXNcXG4gICAgICB9KTsgLy8gR2VuZXJhdGUgYXVkaW8gYW5kIHNwZWVjaG1hcmtzXFxuXFxuXFxuICAgICAgc3BlZWNoLmNvbmZpZyA9IGNvbmZpZztcXG4gICAgICBzcGVlY2gucHJvbWlzZSA9IFByb21pc2UuYWxsKFt0aGlzLl9zeW50aGVzaXplU3BlZWNobWFya3Moc3BlZWNobWFya1BhcmFtcyksIHRoaXMuX3N5bnRoZXNpemVBdWRpbyhhdWRpb1BhcmFtcyldKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XFxuICAgICAgICByZXR1cm4gX3RoaXM0Ll9jcmVhdGVTcGVlY2guYXBwbHkoX3RoaXM0LCBbdGV4dF0uY29uY2F0KEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV90b0NvbnN1bWFibGVBcnJheShyZXN1bHRzKSkpO1xcbiAgICAgIH0pO1xcbiAgICAgIHRoaXMuX3NwZWVjaENhY2hlW3RleHRdID0gc3BlZWNoO1xcbiAgICAgIHJldHVybiBzcGVlY2g7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENyZWF0ZSBhIG5ldyBTcGVlY2ggb2JqZWN0IGZvciB0aGUgc3BlYWtlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtUZXh0VG9TcGVlY2h9IHNwZWFrZXIgLSBUaGUgVGV4dFRvU3BlZWNoIGluc3RhbmNlIHRoYXQgd2lsbCBvd24gdGhlIHNwZWVjaC5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUZXh0IG9mIHRoZSBzcGVlY2guXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzcGVlY2htYXJrcyAtIFNwZWVjaG1hcmtzIGZvciB0aGUgc3BlZWNoLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXVkaW9Db25maWcgLSBBdWRpbyBmb3IgdGhlIHNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0Fic3RyYWN0U3BlZWNofVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9jcmVhdGVTcGVlY2hcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVTcGVlY2godGV4dCwgc3BlZWNobWFya3MsIGF1ZGlvQ29uZmlnKSB7XFxuICAgICAgcmV0dXJuIG5ldyBhd3NwYWNrX0Fic3RyYWN0U3BlZWNoKHRoaXMsIHRleHQsIHNwZWVjaG1hcmtzLCBhdWRpb0NvbmZpZyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENyZWF0ZSBwcmVzaWduZWQgVVJMIG9mIHNwZWVjaCBhdWRpbyBmb3IgdGhlIGdpdmVuIHNwZWVjaCB0ZXh0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyBvYmplY3QgY29tcGF0aWJsZSB3aXRoIFBvbGx5LnN5bnRoZXNpemVTcGVlY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmVzb2x2ZXMgd2l0aCBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYXVkaW8gVVJMLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zeW50aGVzaXplQXVkaW9cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zeW50aGVzaXplQXVkaW8ocGFyYW1zKSB7XFxuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XFxuXFxuICAgICAgcmV0dXJuIG5ldyBjb3JlX0RlZmVycmVkKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcXG4gICAgICAgIF90aGlzNS5jb25zdHJ1Y3Rvci5TRVJWSUNFUy5wcmVzaWduZXIuZ2V0U3ludGhlc2l6ZVNwZWVjaFVybChwYXJhbXMsIGZ1bmN0aW9uIChlcnJvciwgdXJsKSB7XFxuICAgICAgICAgIGlmICghZXJyb3IpIHtcXG4gICAgICAgICAgICByZXNvbHZlKHtcXG4gICAgICAgICAgICAgIHVybDogdXJsXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHJpZXZlcyBhbmQgcGFyc2VzIHNwZWVjaG1hcmtzIGZvciB0aGUgZ2l2ZW4gc3BlZWNoIHRleHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBQYXJhbWV0ZXJzIG9iamVjdCBjb21wYXRpYmxlIHdpdGggUG9sbHkuc3ludGhlc2l6ZVNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfSBSZXNvbHZlcyB3aXRoIGFuIGFycmF5IG9mIHNwZWVjaG1hcmsgb2JqZWN0c1xcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zeW50aGVzaXplU3BlZWNobWFya3NcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zeW50aGVzaXplU3BlZWNobWFya3MocGFyYW1zKSB7XFxuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XFxuXFxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuU0VSVklDRVMucG9sbHkuc3ludGhlc2l6ZVNwZWVjaChwYXJhbXMpLnByb21pc2UoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcXG4gICAgICAgIC8vIENvbnZlcnQgY2hhcmNvZGVzIHRvIHN0cmluZ1xcbiAgICAgICAgdmFyIGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQuQXVkaW9TdHJlYW0pO1xcbiAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xcbiAgICAgICAgdmFyIGRhdGFTdHIgPSBqc29uLmRhdGEubWFwKGZ1bmN0aW9uIChjKSB7XFxuICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xcbiAgICAgICAgfSkuam9pbihcXCdcXCcpO1xcbiAgICAgICAgdmFyIG1hcmtUeXBlcyA9IHtcXG4gICAgICAgICAgc2VudGVuY2U6IFtdLFxcbiAgICAgICAgICB3b3JkOiBbXSxcXG4gICAgICAgICAgdmlzZW1lOiBbXSxcXG4gICAgICAgICAgc3NtbDogW11cXG4gICAgICAgIH07XFxuICAgICAgICB2YXIgZW5kTWFya1R5cGVzID0ge1xcbiAgICAgICAgICBzZW50ZW5jZTogbnVsbCxcXG4gICAgICAgICAgd29yZDogbnVsbCxcXG4gICAgICAgICAgdmlzZW1lOiBudWxsLFxcbiAgICAgICAgICBzc21sOiBudWxsXFxuICAgICAgICB9OyAvLyBTcGxpdCBieSBlbmNsb3Npbmcge30gdG8gY3JlYXRlIHNwZWVjaG1hcmsgb2JqZWN0c1xcblxcbiAgICAgICAgdmFyIHNwZWVjaE1hcmtzID0gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX3RvQ29uc3VtYWJsZUFycmF5KGRhdGFTdHIubWF0Y2hBbGwoL1xcXFx7Lio/XFxcXH0oPz1cXFxcbnwkKS9nbSkpLm1hcChmdW5jdGlvbiAobWF0Y2gpIHtcXG4gICAgICAgICAgdmFyIG1hcmsgPSBKU09OLnBhcnNlKG1hdGNoWzBdKTsgLy8gU2V0IHRoZSBkdXJhdGlvbiBvZiB0aGUgbGFzdCBzcGVlY2htYXJrIHN0b3JlZCBtYXRjaGluZyB0aGlzIG9uZVxcJ3MgdHlwZVxcblxcbiAgICAgICAgICB2YXIgbnVtTWFya3MgPSBtYXJrVHlwZXNbbWFyay50eXBlXS5sZW5ndGg7XFxuXFxuICAgICAgICAgIGlmIChudW1NYXJrcyA+IDApIHtcXG4gICAgICAgICAgICB2YXIgbGFzdE1hcmsgPSBtYXJrVHlwZXNbbWFyay50eXBlXVtudW1NYXJrcyAtIDFdO1xcbiAgICAgICAgICAgIGxhc3RNYXJrLmR1cmF0aW9uID0gbWFyay50aW1lIC0gbGFzdE1hcmsudGltZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBtYXJrVHlwZXNbbWFyay50eXBlXS5wdXNoKG1hcmspO1xcbiAgICAgICAgICBlbmRNYXJrVHlwZXNbbWFyay50eXBlXSA9IG1hcms7XFxuICAgICAgICAgIHJldHVybiBtYXJrO1xcbiAgICAgICAgfSk7IC8vIEZpbmQgdGhlIHRpbWUgb2YgdGhlIGxhdGVzdCBzcGVlY2htYXJrXFxuXFxuXFxuICAgICAgICB2YXIgZW5kVGltZXMgPSBbXTtcXG5cXG4gICAgICAgIGlmIChlbmRNYXJrVHlwZXMuc2VudGVuY2UpIHtcXG4gICAgICAgICAgZW5kVGltZXMucHVzaChlbmRNYXJrVHlwZXMuc2VudGVuY2UudGltZSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoZW5kTWFya1R5cGVzLndvcmQpIHtcXG4gICAgICAgICAgZW5kVGltZXMucHVzaChlbmRNYXJrVHlwZXMud29yZC50aW1lKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChlbmRNYXJrVHlwZXMudmlzZW1lKSB7XFxuICAgICAgICAgIGVuZFRpbWVzLnB1c2goZW5kTWFya1R5cGVzLnZpc2VtZS50aW1lKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChlbmRNYXJrVHlwZXMuc3NtbCkge1xcbiAgICAgICAgICBlbmRUaW1lcy5wdXNoKGVuZE1hcmtUeXBlcy5zc21sLnRpbWUpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmFyIGVuZFRpbWUgPSBNYXRoLm1heC5hcHBseShNYXRoLCBlbmRUaW1lcyk7IC8vIENhbGN1bGF0ZSBkdXJhdGlvbiBmb3IgdGhlIGVuZGluZyBzcGVlY2hNYXJrcyBvZiBlYWNoIHR5cGVcXG5cXG4gICAgICAgIGlmIChlbmRNYXJrVHlwZXMuc2VudGVuY2UpIHtcXG4gICAgICAgICAgZW5kTWFya1R5cGVzLnNlbnRlbmNlLmR1cmF0aW9uID0gTWF0aC5tYXgoX3RoaXM2Ll9taW5FbmRNYXJrRHVyYXRpb24sIGVuZFRpbWUgLSBlbmRNYXJrVHlwZXMuc2VudGVuY2UudGltZSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoZW5kTWFya1R5cGVzLndvcmQpIHtcXG4gICAgICAgICAgZW5kTWFya1R5cGVzLndvcmQuZHVyYXRpb24gPSBNYXRoLm1heChfdGhpczYuX21pbkVuZE1hcmtEdXJhdGlvbiwgZW5kVGltZSAtIGVuZE1hcmtUeXBlcy53b3JkLnRpbWUpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKGVuZE1hcmtUeXBlcy52aXNlbWUpIHtcXG4gICAgICAgICAgZW5kTWFya1R5cGVzLnZpc2VtZS5kdXJhdGlvbiA9IE1hdGgubWF4KF90aGlzNi5fbWluRW5kTWFya0R1cmF0aW9uLCBlbmRUaW1lIC0gZW5kTWFya1R5cGVzLnZpc2VtZS50aW1lKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChlbmRNYXJrVHlwZXMuc3NtbCkge1xcbiAgICAgICAgICBlbmRNYXJrVHlwZXMuc3NtbC5kdXJhdGlvbiA9IE1hdGgubWF4KF90aGlzNi5fbWluRW5kTWFya0R1cmF0aW9uLCBlbmRUaW1lIC0gZW5kTWFya1R5cGVzLnNzbWwudGltZSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gc3BlZWNoTWFya3M7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFJldHVybnMgYSBTcGVlY2ggb2JqZWN0IHRoYXQgaGFzIHRoZSBnaXZlbiB0ZXh0LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcHJpdmF0ZVxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIFNwZWVjaC5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgLSBPcHRpb25zIHRvIHVwZGF0ZSB0aGUgU3BlZWNoIHdpdGguXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH0gUmVzb2x2ZXMgd2l0aCBTcGVlY2ggb3IgbnVsbDtcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfZ2V0U3BlZWNoXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3BlZWNoKHRleHQsIGNvbmZpZykge1xcbiAgICAgIC8vIE1ha2Ugc3VyZSBBV1Mgc2VydmljZXMgZXhpc3RcXG4gICAgICBpZiAoIXRoaXMuY29uc3RydWN0b3IuaXNSZWFkeSkge1xcbiAgICAgICAgdmFyIGUgPSBcXCdBV1Mgc2VydmljZXMgaGF2ZSBub3QgYmVlbiBpbml0aWFsaXplZC5cXCc7XFxuICAgICAgICByZXR1cm4gY29yZV9EZWZlcnJlZC5yZWplY3QoZSk7XFxuICAgICAgfSAvLyBNYWtlIHN1cmUgaXRzIHBvc3NpYmxlIHRvIGdlbmVyYXRlIHNwZWVjaGVzXFxuXFxuXFxuICAgICAgaWYgKCF0ZXh0KSB7XFxuICAgICAgICB2YXIgX2UyID0gXFwnQ2Fubm90IHBsYXkgYSBzcGVlY2ggd2l0aCBubyB0ZXh0LlxcJztcXG4gICAgICAgIHJldHVybiBjb3JlX0RlZmVycmVkLnJlamVjdChfZTIpO1xcbiAgICAgIH0gLy8gVXBkYXRlIHRoZSBzcGVlY2ggd2l0aCBvcHRpb25zXFxuXFxuXFxuICAgICAgdGV4dCA9IGF3c3BhY2tfVGV4dFRvU3BlZWNoVXRpbHMudmFsaWRhdGVUZXh0KHRleHQpO1xcbiAgICAgIGNvbmZpZyA9IHRoaXMuX3VwZGF0ZUNvbmZpZyhjb25maWcsIHRleHQpO1xcbiAgICAgIHJldHVybiB0aGlzLl91cGRhdGVTcGVlY2godGV4dCwgY29uZmlnKS5wcm9taXNlO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBBZGRzIGEgbmFtZXNwYWNlIHRvIHRoZSBob3N0IHdpdGggdGhlIG5hbWUgb2YgdGhlIGZlYXR1cmUgdG8gY29udGFpbiBwcm9wZXJ0aWVzXFxyXFxuICAgICAqIGFuZCBtZXRob2RzIGZyb20gdGhlIGZlYXR1cmUgdGhhdCB1c2VycyBvZiB0aGUgaG9zdCBuZWVkIGFjY2VzcyB0by5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHNlZSBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiaW5zdGFsbEFwaVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zdGFsbEFwaSgpIHtcXG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcXG5cXG4gICAgICAvKipcXHJcXG4gICAgICAgKiBAaW5uZXJcXHJcXG4gICAgICAgKiBAbmFtZXNwYWNlIFRleHRUb1NwZWVjaEZlYXR1cmVcXHJcXG4gICAgICAgKi9cXG4gICAgICB2YXIgYXBpID0gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX2dldChBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlLnByb3RvdHlwZSksIFwiaW5zdGFsbEFwaVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xcblxcbiAgICAgIE9iamVjdC5hc3NpZ24oYXBpLCB7XFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3BsYXlcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgcGxheTogdGhpcy5wbGF5LmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3BhdXNlXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHBhdXNlOiB0aGlzLnBhdXNlLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3Jlc3VtZVxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZXN1bWU6IHRoaXMucmVzdW1lLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3N0b3BcXHJcXG4gICAgICAgICAqL1xcbiAgICAgICAgc3RvcDogdGhpcy5zdG9wLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI2dldFZvbHVtZVxcclxcbiAgICAgICAgICovXFxuICAgICAgICBnZXRWb2x1bWU6IHRoaXMuZ2V0Vm9sdW1lLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3NldFZvbHVtZVxcclxcbiAgICAgICAgICovXFxuICAgICAgICBzZXRWb2x1bWU6IHRoaXMuc2V0Vm9sdW1lLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3BhdXNlVm9sdW1lXFxyXFxuICAgICAgICAgKi9cXG4gICAgICAgIHBhdXNlVm9sdW1lOiB0aGlzLnBhdXNlVm9sdW1lLmJpbmQodGhpcyksXFxuXFxuICAgICAgICAvKipcXHJcXG4gICAgICAgICAqIEBtZW1iZXJvZiBUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgICAgICAgKiBAaW5zdGFuY2VcXHJcXG4gICAgICAgICAqIEBtZXRob2RcXHJcXG4gICAgICAgICAqIEBzZWUgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlI3Jlc3VtZVZvbHVtZVxcclxcbiAgICAgICAgICovXFxuICAgICAgICByZXN1bWVWb2x1bWU6IHRoaXMucmVzdW1lVm9sdW1lLmJpbmQodGhpcylcXG4gICAgICB9KTtcXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhcGksIHtcXG4gICAgICAgIC8qKlxcclxcbiAgICAgICAgICogQG1lbWJlcm9mIFRleHRUb1NwZWVjaEZlYXR1cmVcXHJcXG4gICAgICAgICAqIEBpbnN0YW5jZVxcclxcbiAgICAgICAgICogQHNlZSBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUjc3BlZWNobWFya09mZnNldFxcclxcbiAgICAgICAgICovXFxuICAgICAgICBzcGVlY2htYXJrT2Zmc2V0OiB7XFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICAgIHJldHVybiBfdGhpczcuc3BlZWNobWFya09mZnNldDtcXG4gICAgICAgICAgfSxcXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQob2Zmc2V0KSB7XFxuICAgICAgICAgICAgX3RoaXM3LnNwZWVjaG1hcmtPZmZzZXQgPSBvZmZzZXQ7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gYXBpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSB2b2x1bWUgdXNlZCBmb3IgYWxsIGF1ZGlvIGNsaXBzIHBsYXllZCBieSB0aGUgc3BlYWtlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHR5cGUge251bWJlcn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJ2b2x1bWVcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB3aGV0aGVyIG9yIG5vdCB0aGUgc3BlYWtlclxcJ3Mgdm9sdW1lIHZhbHVlIGlzIGN1cnJlbnRseSBiZWluZyB0d2VlbmVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcbiAgICAsXFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHZvbHVtZSkge1xcbiAgICAgIHRoaXMuX3ZvbHVtZSA9IGNvcmVfTWF0aFV0aWxzLmNsYW1wKHZvbHVtZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInZvbHVtZVBlbmRpbmdcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2VzLnZvbHVtZSAmJiB0aGlzLl9wcm9taXNlcy52b2x1bWUucGVuZGluZztcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogR2V0cyB0aGUgdm9sdW1lIHVzZWQgZm9yIGFsbCBhdWRpbyBjbGlwcyBwbGF5ZWQgYnkgdGhlIHNwZWFrZXIuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZ2V0Vm9sdW1lXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWb2x1bWUoKSB7XFxuICAgICAgcmV0dXJuIHRoaXMudm9sdW1lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBVcGRhdGVzIHRoZSB2b2x1bWUgdXNlZCBmb3IgYWxsIGF1ZGlvIGNsaXBzIHBsYXllZCBieSB0aGUgc3BlYWtlciBvdmVyIHRpbWUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWUgLSBUYXJnZXQgdm9sdW1lIHZhbHVlLlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NlY29uZHM9MF0gLSBBbW91bnQgb2YgdGltZSBpdCB3aWxsIHRha2UgdG8gcmVhY2ggdGhlIHRhcmdldFxcclxcbiAgICAgKiB2b2x1bWUuXFxyXFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBlYXNpbmdGbiAtIEVhc2luZyBmdW5jdGlvbiB1c2VkIGZvciBpbnRlcnBvbGF0aW9uLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwic2V0Vm9sdW1lXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUodm9sdW1lKSB7XFxuICAgICAgdmFyIHNlY29uZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XFxuICAgICAgdmFyIGVhc2luZ0ZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XFxuXFxuICAgICAgaWYgKHRoaXMudm9sdW1lUGVuZGluZykge1xcbiAgICAgICAgdGhpcy5fcHJvbWlzZXMudm9sdW1lLmNhbmNlbCgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2x1bWUgPSBjb3JlX01hdGhVdGlscy5jbGFtcCh2b2x1bWUpO1xcbiAgICAgIHRoaXMuX3Byb21pc2VzLnZvbHVtZSA9IGFuaW1wYWNrX0FuaW1hdGlvblV0aWxzLmludGVycG9sYXRlUHJvcGVydHkodGhpcywgXFwndm9sdW1lXFwnLCB2b2x1bWUsIHtcXG4gICAgICAgIHNlY29uZHM6IHNlY29uZHMsXFxuICAgICAgICBlYXNpbmdGbjogZWFzaW5nRm5cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZXMudm9sdW1lO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBQYXVzZSBpbnRlcnBvbGF0aW9uIGhhcHBlbmluZyBvbiB0aGUgc3BlYWtlclxcJ3Mgdm9sdW1lIHByb3BlcnR5LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZVZvbHVtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2VWb2x1bWUoKSB7XFxuICAgICAgdGhpcy5fdm9sdW1lUGF1c2VkID0gdHJ1ZTtcXG4gICAgICByZXR1cm4gdGhpcy52b2x1bWVQZW5kaW5nO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBSZXN1bWUgYW55IGludGVycG9sYXRpb24gaGFwcGVuaW5nIG9uIHRoZSBzcGVha2VyXFwncyB2b2x1bWUgcHJvcGVydHkuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVZvbHVtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lVm9sdW1lKCkge1xcbiAgICAgIHRoaXMuX3ZvbHVtZVBhdXNlZCA9IGZhbHNlO1xcbiAgICAgIHJldHVybiB0aGlzLnZvbHVtZVBlbmRpbmc7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIFVwZGF0ZSB0aGUgY3VycmVudGx5IHBsYXlpbmcgc3BlZWNoLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVsdGFUaW1lIC0gVGltZSBzaW5jZSB0aGUgbGFzdCB1cGRhdGUuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwidXBkYXRlXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUoZGVsdGFUaW1lKSB7XFxuICAgICAgaWYgKCF0aGlzLl92b2x1bWVQYXVzZWQpIHtcXG4gICAgICAgIHRoaXMuX3Byb21pc2VzLnZvbHVtZS5leGVjdXRlKGRlbHRhVGltZSk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50U3BlZWNoICYmIHRoaXMuX2N1cnJlbnRTcGVlY2gucGxheWluZykge1xcbiAgICAgICAgdGhpcy5fY3VycmVudFNwZWVjaC52b2x1bWUgPSB0aGlzLl92b2x1bWU7XFxuXFxuICAgICAgICB0aGlzLl9jdXJyZW50U3BlZWNoLnVwZGF0ZSh0aGlzLl9ob3N0Lm5vdyk7XFxuXFxuICAgICAgICBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0KEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUucHJvdG90eXBlKSwgXCJ1cGRhdGVcIiwgdGhpcykuY2FsbCh0aGlzLCBkZWx0YVRpbWUpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU2V0IHRoZSBjdXJyZW50IHNwZWVjaCB0byBhIG5ldyBhc3NldCBhbmQgdXBkYXRlIHRoZSBzcGVlY2hcXCdzIHNwZWVjaG1hcmtcXHJcXG4gICAgICogb2Zmc2V0IHZhbHVlIHRvIG1hdGNoIHRoYXQgb2YgdGhlIGZlYXR1cmUuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7QWJzdHJhY3RTcGVlY2h9IHNwZWVjaCAtIFNwZWVjaCB0byBzZXQgYXMgY3VycmVudC5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfc2V0Q3VycmVudFNwZWVjaFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEN1cnJlbnRTcGVlY2goc3BlZWNoKSB7XFxuICAgICAgc3BlZWNoLnNwZWVjaG1hcmtPZmZzZXQgPSB0aGlzLl9zcGVlY2htYXJrT2Zmc2V0O1xcbiAgICAgIHRoaXMuX2N1cnJlbnRTcGVlY2ggPSBzcGVlY2g7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENyZWF0ZSBhIHByb21pc2UgdGhhdCB3aWxsIHBsYXkvcmVzdW1lIGEgc3BlZWNoIHdpdGggdGhlIGdpdmVuIHRleHQgYWZ0ZXJcXHJcXG4gICAgICogdGhlIGF1ZGlvIGNvbnRleHQgYXR0ZW1wdHMgdG8gcmVzdW1lIGFuZCBzcGVlY2ggYXVkaW8gaXMgcmV0cmlldmVkIGZyb20gUG9sbHkuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGhlIHRleHQgb2YgdGhlIG5ldyBzcGVlY2ggdG8gcGxheS5cXHJcXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgLSBPcHRpb25hbCBwYXJhbWV0ZXJzIGZvciB0aGUgc3BlZWNoLlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3BsYXlNZXRob2QgPSBcXCdwbGF5XFwnXSAtIE1ldGhvZCB0byBleGVjdXRlIG9uIHRoZSByZXN1bHRpbmdcXHJcXG4gICAgICogU3BlZWNoIG9iamVjdC4gVmFsaWQgb3B0aW9ucyBhcmUgXFwncGxheVxcJyBhbmQgXFwncmVzdW1lXFwnLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zdGFydFNwZWVjaFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0U3BlZWNoKHRleHQsIGNvbmZpZykge1xcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xcblxcbiAgICAgIHZhciBwbGF5TWV0aG9kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBcXCdwbGF5XFwnO1xcblxcbiAgICAgIC8vIElmIG5vIHRleHQgaXMgcHJvdmlkZWQsIHRyeSB0byB1c2UgdGhlIGN1cnJlbnQgc3BlZWNoXFxuICAgICAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCAmJiBwbGF5TWV0aG9kID09PSBcXCdyZXN1bWVcXCcgJiYgdGhpcy5fY3VycmVudFNwZWVjaCkge1xcbiAgICAgICAgdGV4dCA9IHRoaXMuX2N1cnJlbnRTcGVlY2gudGV4dDtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIGN1cnJlbnRQcm9taXNlID0gdGhpcy5fY3VycmVudFByb21pc2UgfHwge1xcbiAgICAgICAgcGxheTogbmV3IGNvcmVfRGVmZXJyZWQodW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIGN1cnJlbnRQcm9taXNlLnNwZWVjaC5jYW5jZWwoKTtcXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgY3VycmVudFByb21pc2Uuc3BlZWNoLmNhbmNlbCgpO1xcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICBjdXJyZW50UHJvbWlzZS5zcGVlY2guY2FuY2VsKCk7XFxuICAgICAgICB9KSxcXG4gICAgICAgIHNwZWVjaDogbmV3IGNvcmVfRGVmZXJyZWQoKVxcbiAgICAgIH07XFxuICAgICAgdGhpcy5fY3VycmVudFByb21pc2UgPSBjdXJyZW50UHJvbWlzZTtcXG5cXG4gICAgICB0aGlzLl9nZXRTcGVlY2godGV4dCwgY29uZmlnKS50aGVuKGZ1bmN0aW9uIChzcGVlY2gpIHtcXG4gICAgICAgIC8vIEV4aXQgaWYgdGhlIHByb21pc2UgaXMgbm8gbG9uZ2VyIHBlbmRpbmcgYmVjYXVzZSBvZiB1c2VyIGludGVyYWN0aW9uXFxuICAgICAgICBpZiAoIWN1cnJlbnRQcm9taXNlLnBsYXkucGVuZGluZykge1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9IGVsc2UgaWYgKF90aGlzOC5fY3VycmVudFByb21pc2UgIT09IGN1cnJlbnRQcm9taXNlKSB7XFxuICAgICAgICAgIC8vIENhbmNlbCBpZiBhbm90aGVyIGNhbGwgdG8gcGxheSBoYXMgYWxyZWFkeSBiZWVuIG1hZGVcXG4gICAgICAgICAgY3VycmVudFByb21pc2UucGxheS5jYW5jZWwoKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfSAvLyBSZXNldCBjdXJyZW50IHNwZWVjaCB3aGVuIHRoZSBzcGVlY2ggZW5kc1xcblxcblxcbiAgICAgICAgdmFyIG9uRmluaXNoID0gZnVuY3Rpb24gb25GaW5pc2goKSB7XFxuICAgICAgICAgIF90aGlzOC5fY3VycmVudFNwZWVjaCA9IG51bGw7XFxuICAgICAgICAgIF90aGlzOC5fY3VycmVudFByb21pc2UgPSBudWxsO1xcbiAgICAgICAgfTsgLy8gQ2FuY2VsIHRoZSBjdXJyZW50bHkgcGxheWluZyBzcGVlY2hcXG5cXG5cXG4gICAgICAgIGlmIChfdGhpczguX2N1cnJlbnRTcGVlY2ggJiYgX3RoaXM4Ll9jdXJyZW50U3BlZWNoLnBsYXlpbmcpIHtcXG4gICAgICAgICAgaWYgKHBsYXlNZXRob2QgPT09IFxcJ3BsYXlcXCcpIHtcXG4gICAgICAgICAgICBfdGhpczguX2N1cnJlbnRTcGVlY2guY2FuY2VsKCk7XFxuICAgICAgICAgIH0gZWxzZSBpZiAocGxheU1ldGhvZCA9PT0gXFwncmVzdW1lXFwnICYmIF90aGlzOC5fY3VycmVudFNwZWVjaC5hdWRpbyAhPT0gc3BlZWNoLmF1ZGlvKSB7XFxuICAgICAgICAgICAgX3RoaXM4Ll9jdXJyZW50U3BlZWNoLmNhbmNlbCgpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBfdGhpczguX3NldEN1cnJlbnRTcGVlY2goc3BlZWNoKTsgLy8gUGxheSB0aGUgc3BlZWNoXFxuXFxuXFxuICAgICAgICBjdXJyZW50UHJvbWlzZS5zcGVlY2ggPSBzcGVlY2hbcGxheU1ldGhvZF0oX3RoaXM4Ll9ob3N0Lm5vdywgb25GaW5pc2gsIG9uRmluaXNoLCBvbkZpbmlzaCk7XFxuICAgICAgICBjdXJyZW50UHJvbWlzZS5zcGVlY2gudGhlbihmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIGlmIChjdXJyZW50UHJvbWlzZS5zcGVlY2gucmVzb2x2ZWQpIHtcXG4gICAgICAgICAgICBjdXJyZW50UHJvbWlzZS5wbGF5LnJlc29sdmUoKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBjdXJyZW50UHJvbWlzZS5wbGF5LmNhbmNlbCgpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnJvcikge1xcbiAgICAgICAgICBjdXJyZW50UHJvbWlzZS5wbGF5LnJlamVjdChlcnJvcik7XFxuICAgICAgICB9KTtcXG4gICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlKSB7XFxuICAgICAgICBlID0gXCJDYW5ub3QgXCIuY29uY2F0KHBsYXlNZXRob2QsIFwiIHNwZWVjaCBcIikuY29uY2F0KHRleHQsIFwiIG9uIGhvc3QgXCIpLmNvbmNhdChfdGhpczguaG9zdC5pZCwgXCIuIFwiKS5jb25jYXQoZSk7XFxuICAgICAgICBjdXJyZW50UHJvbWlzZS5wbGF5LnJlamVjdChlKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm4gY3VycmVudFByb21pc2UucGxheTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCBhbnkgc3BlZWNoZXMgY3VycmVudGx5IHBsYXlpbmcgYW5kIHBsYXkgYSBuZXcgc3BlZWNoIGZyb20gdGhlIGJlZ2lubmluZy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgdGV4dCBvZiB0aGUgbmV3IHNwZWVjaCB0byBwbGF5LlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyAtIE9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBzcGVlY2guXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEByZXR1cm5zIHtEZWZlcnJlZH1cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwbGF5XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KHRleHQsIGNvbmZpZykge1xcbiAgICAgIHJldHVybiB0aGlzLl9zdGFydFNwZWVjaCh0ZXh0LCBjb25maWcsIFxcJ3BsYXlcXCcpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBJZiBhIHNwZWVjaCBpcyBjdXJyZW50bHkgcGxheWluZywgcGF1c2UgaXQgYXQgdGhlIGN1cnJlbnQgdGltZS5cXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJwYXVzZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XFxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTcGVlY2ggJiYgdGhpcy5fY3VycmVudFNwZWVjaC5wbGF5aW5nKSB7XFxuICAgICAgICB0aGlzLl9jdXJyZW50U3BlZWNoLnBhdXNlKHRoaXMuX2hvc3Qubm93KTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgY29uc29sZS53YXJuKFwiQ2Fubm90IHBhdXNlIHNwZWVjaCBvbiBob3N0IFwiLmNvbmNhdCh0aGlzLmhvc3QuaWQsIFwiLiBObyBzcGVlY2ggaXMgY3VycmVudGx5IHBsYXlpbmdcIikpO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogU3RvcCBhbnkgc3BlZWNoZXMgY3VycmVudGx5IHBsYXlpbmcgYW5kIHJlc3VtZSBhIG5ldyBzcGVlY2ggZnJvbSB0aGUgY3VycmVudFxcclxcbiAgICAgKiB0aW1lLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRleHQgLSBUaGUgdGV4dCBvZiB0aGUgbmV3IHNwZWVjaCB0byBwbGF5LiBJZiB1bmRlZmluZWQgYW5kXFxyXFxuICAgICAqIHRoZXJlIGlzIGEgY3VycmVudCBzcGVlY2ggdGhhdCBpcyBwYXVzZWQsIHRoZSBjdXJyZW50IHNwZWVjaCB3aWxsIGJlIHJlc3VtZWQuXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIC0gT3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgdGhlIHNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKHRleHQsIGNvbmZpZykge1xcbiAgICAgIHJldHVybiB0aGlzLl9zdGFydFNwZWVjaCh0ZXh0LCBjb25maWcsIFxcJ3Jlc3VtZVxcJyk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIElmIGEgc3BlZWNoIGlzIGN1cnJlbnRseSBwbGF5aW5nLCBzdG9wIHBsYXliYWNrIGFuZCByZXNldCB0aW1lLlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcInN0b3BcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XFxuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTcGVlY2ggJiYgdGhpcy5fY3VycmVudFNwZWVjaC5wbGF5aW5nKSB7XFxuICAgICAgICB0aGlzLl9jdXJyZW50U3BlZWNoLnN0b3AoKTtcXG5cXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTcGVlY2ggPSBudWxsO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBjb25zb2xlLndhcm4oXCJDYW5ub3Qgc3RvcCBzcGVlY2ggb24gaG9zdCBcIi5jb25jYXQodGhpcy5ob3N0LmlkLCBcIi4gTm8gc3BlZWNoIGlzIGN1cnJlbnRseSBwbGF5aW5nLlwiKSk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJkaXNjYXJkXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjYXJkKCkge1xcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50U3BlZWNoICYmIHRoaXMuX2N1cnJlbnRTcGVlY2gucGxheWluZykge1xcbiAgICAgICAgdGhpcy5fY3VycmVudFNwZWVjaC5zdG9wKCk7XFxuICAgICAgfVxcblxcbiAgICAgIGRlbGV0ZSB0aGlzLl9zcGVlY2hDYWNoZTtcXG5cXG4gICAgICBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0KEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9nZXRQcm90b3R5cGVPZihBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUucHJvdG90eXBlKSwgXCJkaXNjYXJkXCIsIHRoaXMpLmNhbGwodGhpcyk7XFxuICAgIH1cXG4gIH1dLCBbe1xcbiAgICBrZXk6IFwiaW5pdGlhbGl6ZVNlcnZpY2VcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemVTZXJ2aWNlKHBvbGx5LCBwcmVzaWduZXIsIHZlcnNpb24pIHtcXG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcXG5cXG4gICAgICAvLyBNYWtlIHN1cmUgYWxsIHdlcmUgZGVmaW5lZFxcbiAgICAgIGlmIChwb2xseSA9PT0gdW5kZWZpbmVkIHx8IHByZXNpZ25lciA9PT0gdW5kZWZpbmVkIHx8IHZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcJ0Nhbm5vdCBpbml0aWFsaXplIFRleHRUb1NwZWVjaCBmZWF0dXJlLiBBbGwgYXJndW1lbnRzIG11c3QgYmUgZGVmaW5lZC5cXCcpO1xcbiAgICAgIH0gLy8gQWRkIHN1bWVyaWFuIGhvc3RzIHVzZXItYWdlbnRcXG5cXG5cXG4gICAgICBpZiAocG9sbHkuY29uZmlnKSB7XFxuICAgICAgICBwb2xseS5jb25maWcuY3VzdG9tVXNlckFnZW50ID0gdGhpcy5fd2l0aEN1c3RvbVVzZXJBZ2VudChwb2xseS5jb25maWcuY3VzdG9tVXNlckFnZW50KTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKHByZXNpZ25lci5zZXJ2aWNlICYmIHByZXNpZ25lci5zZXJ2aWNlLmNvbmZpZykge1xcbiAgICAgICAgcHJlc2lnbmVyLnNlcnZpY2UuY29uZmlnLmN1c3RvbVVzZXJBZ2VudCA9IHRoaXMuX3dpdGhDdXN0b21Vc2VyQWdlbnQocHJlc2lnbmVyLnNlcnZpY2UuY29uZmlnLmN1c3RvbVVzZXJBZ2VudCk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX2lzUmVhZHkgPSBmYWxzZTsgLy8gU3RvcmUgcGFyYW1ldGVyc1xcblxcbiAgICAgIHRoaXMuU0VSVklDRVMucG9sbHkgPSBwb2xseTtcXG4gICAgICB0aGlzLlNFUlZJQ0VTLnByZXNpZ25lciA9IHByZXNpZ25lcjtcXG4gICAgICBhd3NWZXJzaW9uID0gdmVyc2lvbjsgLy8gQ2xlYXIgdGhlIGN1cnJlbnQgcG9sbHkgb2JqZWN0c1xcblxcbiAgICAgIHZhciBhdmFpbGFibGVWb2ljZXMgPSB0aGlzLlBPTExZX1ZPSUNFUztcXG4gICAgICBhdmFpbGFibGVWb2ljZXMubGVuZ3RoID0gMDtcXG4gICAgICB2YXIgYXZhaWxhYmxlTGFuZ3VhZ2VzID0gdGhpcy5QT0xMWV9MQU5HVUFHRVM7XFxuICAgICAgT2JqZWN0LmtleXMoYXZhaWxhYmxlTGFuZ3VhZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICBkZWxldGUgYXZhaWxhYmxlTGFuZ3VhZ2VzW25hbWVdO1xcbiAgICAgIH0pO1xcbiAgICAgIHZhciBhdmFpbGFibGVMYW5ndWFnZUNvZGVzID0gdGhpcy5QT0xMWV9MQU5HVUFHRV9DT0RFUztcXG4gICAgICBPYmplY3Qua2V5cyhhdmFpbGFibGVMYW5ndWFnZUNvZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICBkZWxldGUgYXZhaWxhYmxlTGFuZ3VhZ2VDb2Rlc1tuYW1lXTtcXG4gICAgICB9KTsgLy8gUmUtcG9wdWxhdGUgYWNjb3JkaW5nIHRvIHZlcnNpb25cXG5cXG4gICAgICB2YXIgbWluTmV1cmFsU2RrID0gdGhpcy5QT0xMWV9NSU5fTkVVUkFMX1ZFUlNJT047XFxuICAgICAgcmV0dXJuIHRoaXMuU0VSVklDRVMucG9sbHkuZGVzY3JpYmVWb2ljZXMoKS5wcm9taXNlKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcXG4gICAgICAgIHZhciBhbGxDb2RlcyA9IHt9O1xcbiAgICAgICAgcmVzcG9uc2UuVm9pY2VzLmZvckVhY2goZnVuY3Rpb24gKHZvaWNlKSB7XFxuICAgICAgICAgIGlmICh2b2ljZS5TdXBwb3J0ZWRFbmdpbmVzLmluY2x1ZGVzKFxcJ3N0YW5kYXJkXFwnKSB8fCB2ZXJzaW9uID49IG1pbk5ldXJhbFNkaykge1xcbiAgICAgICAgICAgIGF2YWlsYWJsZVZvaWNlcy5wdXNoKHZvaWNlKTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBhdmFpbGFibGVWb2ljZXMuZm9yRWFjaChmdW5jdGlvbiAodm9pY2UpIHtcXG4gICAgICAgICAgICBhdmFpbGFibGVMYW5ndWFnZXNbdm9pY2UuTGFuZ3VhZ2VOYW1lXSA9IHZvaWNlLkxhbmd1YWdlQ29kZTtcXG4gICAgICAgICAgICBhbGxDb2Rlc1t2b2ljZS5MYW5ndWFnZUNvZGVdID0gdm9pY2UuTGFuZ3VhZ2VOYW1lO1xcbiAgICAgICAgICB9KTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoYXZhaWxhYmxlTGFuZ3VhZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xcbiAgICAgICAgICB2YXIgX3JlZjQgPSBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfc2xpY2VkVG9BcnJheShfcmVmMywgMiksXFxuICAgICAgICAgICAgICBuYW1lID0gX3JlZjRbMF0sXFxuICAgICAgICAgICAgICBjb2RlID0gX3JlZjRbMV07XFxuXFxuICAgICAgICAgIGF2YWlsYWJsZUxhbmd1YWdlQ29kZXNbY29kZV0gPSBuYW1lO1xcbiAgICAgICAgfSk7IC8vIE5vdGlmeSB0aGF0IHdlXFwncmUgcmVhZHkgdG8gZ2VuZXJhdGUgc3BlZWNoZXNcXG5cXG4gICAgICAgIF90aGlzOS5faXNSZWFkeSA9IHRydWU7XFxuXFxuICAgICAgICBfdGhpczkuZW1pdChfdGhpczkuRVZFTlRTLnJlYWR5KTtcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBjbGFzcyBpcyBjYXBhYmxlIG9mIGdlbmVyYXRpbmcgc3BlZWNoIGF1ZGlvLiBQb2xseSxcXHJcXG4gICAgICogUHJlc2lnbmVyIGFuZCBBV1MgU0RLIHZlcnNpb24gbnVtYmVyIG11c3QgaGF2ZSBiZWVuIGRlZmluZWQgdXNpbmdcXHJcXG4gICAgICogW2luaXRpYWxpemVTZXJ2aWNlXXtAbGluayBBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUuaW5pdGlhbGl6ZVNlcnZpY2V9LlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiaXNSZWFkeVwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5faXNSZWFkeTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiX3dpdGhDdXN0b21Vc2VyQWdlbnRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF93aXRoQ3VzdG9tVXNlckFnZW50KGN1cnJlbnRVc2VyQWdlbnQpIHtcXG4gICAgICB2YXIgc3VtZXJpYW5Ib3N0c1VzZXJBZ2VudCA9IFxcJ3JlcXVlc3Qtc291cmNlL1N1bWVyaWFuSG9zdHNcXCc7XFxuXFxuICAgICAgaWYgKGN1cnJlbnRVc2VyQWdlbnQgPT0gbnVsbCkge1xcbiAgICAgICAgcmV0dXJuIHN1bWVyaWFuSG9zdHNVc2VyQWdlbnQ7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChjdXJyZW50VXNlckFnZW50LmluZGV4T2Yoc3VtZXJpYW5Ib3N0c1VzZXJBZ2VudCkgIT09IC0xKSB7XFxuICAgICAgICByZXR1cm4gY3VycmVudFVzZXJBZ2VudDtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGN1cnJlbnRVc2VyQWdlbnQuY29uY2F0KFxcJyBcXCcsIHN1bWVyaWFuSG9zdHNVc2VyQWdlbnQpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlO1xcbn0oY29yZV9BYnN0cmFjdEhvc3RGZWF0dXJlKTtcXG5cXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUsIHtcXG4gIEFXU19WRVJTSU9OOiB7XFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBhd3NWZXJzaW9uO1xcbiAgICB9XFxuICB9LFxcbiAgUE9MTFlfTUlOX05FVVJBTF9WRVJTSU9OOiB7XFxuICAgIHZhbHVlOiBcXCcyLjUwM1xcJyxcXG4gICAgd3JpdGFibGU6IGZhbHNlXFxuICB9LFxcbiAgUE9MTFlfREVGQVVMVFM6IHtcXG4gICAgdmFsdWU6IHtcXG4gICAgICBFbmdpbmU6IFxcJ3N0YW5kYXJkXFwnLFxcbiAgICAgIExleGljb25OYW1lczogW10sXFxuICAgICAgT3V0cHV0Rm9ybWF0OiBcXCdtcDNcXCcsXFxuICAgICAgU2FtcGxlUmF0ZTogXFwnMjIwNTBcXCcsXFxuICAgICAgVGV4dDogXFwnXFwnLFxcbiAgICAgIFRleHRUeXBlOiBcXCdzc21sXFwnLFxcbiAgICAgIFZvaWNlSWQ6IFxcJ0FteVxcJyxcXG4gICAgICBMYW5ndWFnZUNvZGU6IFxcJ2VuLUdCXFwnLFxcbiAgICAgIExhbmd1YWdlTmFtZTogXFwnQnJpdGlzaCBFbmdsaXNoXFwnXFxuICAgIH0sXFxuICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgfSxcXG4gIFBPTExZX1ZPSUNFUzoge1xcbiAgICB2YWx1ZTogW10sXFxuICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgfSxcXG4gIFBPTExZX0xBTkdVQUdFUzoge1xcbiAgICB2YWx1ZToge30sXFxuICAgIHdyaXRhYmxlOiBmYWxzZVxcbiAgfSxcXG4gIFBPTExZX0xBTkdVQUdFX0NPREVTOiB7XFxuICAgIHZhbHVlOiB7fSxcXG4gICAgd3JpdGFibGU6IGZhbHNlXFxuICB9LFxcbiAgX2lzUmVhZHk6IHtcXG4gICAgdmFsdWU6IGZhbHNlLFxcbiAgICB3cml0YWJsZTogdHJ1ZVxcbiAgfSxcXG4gIEVWRU5UUzoge1xcbiAgICB2YWx1ZTogQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX29iamVjdFNwcmVhZChBYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmVfb2JqZWN0U3ByZWFkKHt9LCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlKS5FVkVOVFMpLCB7fSwge1xcbiAgICAgIHJlYWR5OiBcXCdvblJlYWR5RXZlbnRcXCcsXFxuICAgICAgcGxheTogXFwnb25QbGF5RXZlbnRcXCcsXFxuICAgICAgcGF1c2U6IFxcJ29uUGF1c2VFdmVudFxcJyxcXG4gICAgICByZXN1bWU6IFxcJ29uUmVzdW1lRXZlbnRcXCcsXFxuICAgICAgaW50ZXJydXB0OiBcXCdvbkludGVycnVwdEV2ZW50XFwnLFxcbiAgICAgIHN0b3A6IFxcJ29uU3RvcEV2ZW50XFwnLFxcbiAgICAgIHNlbnRlbmNlOiBcXCdvblNlbnRlbmNlRXZlbnRcXCcsXFxuICAgICAgd29yZDogXFwnb25Xb3JkRXZlbnRcXCcsXFxuICAgICAgdmlzZW1lOiBcXCdvblZpc2VtZUV2ZW50XFwnLFxcbiAgICAgIHNzbWw6IFxcJ29uU3NtbEV2ZW50XFwnXFxuICAgIH0pXFxuICB9LFxcbiAgU0VSVklDRVM6IHtcXG4gICAgdmFsdWU6IEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZV9vYmplY3RTcHJlYWQoQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlX29iamVjdFNwcmVhZCh7fSwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZSkuU0VSVklDRVMpLCB7fSwge1xcbiAgICAgIHBvbGx5OiB1bmRlZmluZWQsXFxuICAgICAgcHJlc2lnbmVyOiB1bmRlZmluZWRcXG4gICAgfSlcXG4gIH1cXG59KTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGF3c3BhY2tfQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlID0gKEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZSk7XFxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvcmUvYXdzcGFjay9UZXh0VG9TcGVlY2hGZWF0dXJlLmpzXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZV90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIFRleHRUb1NwZWVjaEZlYXR1cmVfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgVGV4dFRvU3BlZWNoRmVhdHVyZV90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZV9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIFRleHRUb1NwZWVjaEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIFRleHRUb1NwZWVjaEZlYXR1cmVfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlX2dldCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7IFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IFRleHRUb1NwZWVjaEZlYXR1cmVfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gVGV4dFRvU3BlZWNoRmVhdHVyZV9nZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgVGV4dFRvU3BlZWNoRmVhdHVyZV9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlX3NldFByb3RvdHlwZU9mKG8sIHApIHsgVGV4dFRvU3BlZWNoRmVhdHVyZV9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gVGV4dFRvU3BlZWNoRmVhdHVyZV9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IFRleHRUb1NwZWVjaEZlYXR1cmVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gVGV4dFRvU3BlZWNoRmVhdHVyZV9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gVGV4dFRvU3BlZWNoRmVhdHVyZV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gVGV4dFRvU3BlZWNoRmVhdHVyZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoVGV4dFRvU3BlZWNoRmVhdHVyZV90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gVGV4dFRvU3BlZWNoRmVhdHVyZV9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuXFwndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuXFwndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxcblxcbmZ1bmN0aW9uIFRleHRUb1NwZWVjaEZlYXR1cmVfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cXG5cXG5mdW5jdGlvbiBUZXh0VG9TcGVlY2hGZWF0dXJlX2dldFByb3RvdHlwZU9mKG8pIHsgVGV4dFRvU3BlZWNoRmVhdHVyZV9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBUZXh0VG9TcGVlY2hGZWF0dXJlX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuXFxuXFxuLyoqXFxyXFxuICogQGV4dGVuZHMgQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICogQGFsaWFzIGNvcmUvVGV4dFRvU3BlZWNoRmVhdHVyZVxcclxcbiAqL1xcblxcbnZhciBUZXh0VG9TcGVlY2hGZWF0dXJlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQWJzdHJhY3RUZXh0VG9TcGVlY2gpIHtcXG4gIFRleHRUb1NwZWVjaEZlYXR1cmVfaW5oZXJpdHMoVGV4dFRvU3BlZWNoRmVhdHVyZSwgX0Fic3RyYWN0VGV4dFRvU3BlZWNoKTtcXG5cXG4gIHZhciBfc3VwZXIgPSBUZXh0VG9TcGVlY2hGZWF0dXJlX2NyZWF0ZVN1cGVyKFRleHRUb1NwZWVjaEZlYXR1cmUpO1xcblxcbiAgZnVuY3Rpb24gVGV4dFRvU3BlZWNoRmVhdHVyZSgpIHtcXG4gICAgdmFyIF90aGlzO1xcblxcbiAgICBUZXh0VG9TcGVlY2hGZWF0dXJlX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHRUb1NwZWVjaEZlYXR1cmUpO1xcblxcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcXG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xcbiAgICB9XFxuXFxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcXG4gICAgX3RoaXMuX2VuYWJsZWQgPSBmYWxzZTtcXG5cXG4gICAgX3RoaXMuX3NldEF1ZGlvQ29udGV4dCgpO1xcblxcbiAgICBfdGhpcy5fb2JzZXJ2ZUF1ZGlvQ29udGV4dCgpO1xcblxcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuICAvKipcXHJcXG4gICAqIFN0b3JlIHRoZSBhdWRpbyBjb250ZXh0IHRoYXQgd2lsbCBiZSB1c2VkIHRvIGVuc3VyZSBhdWRpbyBjYW4gYmUgcGxheWVkLlxcclxcbiAgICpcXHJcXG4gICAqIEBwcml2YXRlXFxyXFxuICAgKi9cXG5cXG5cXG4gIFRleHRUb1NwZWVjaEZlYXR1cmVfY3JlYXRlQ2xhc3MoVGV4dFRvU3BlZWNoRmVhdHVyZSwgW3tcXG4gICAga2V5OiBcIl9zZXRBdWRpb0NvbnRleHRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRBdWRpb0NvbnRleHQoKSB7XFxuICAgICAgdGhpcy5fYXVkaW9Db250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBMaXN0ZW4gZm9yIHN0YXRlIGNoYW5nZXMgb24gdGhlIGF1ZGlvIGNvbnRleHQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGZlYXR1cmVcXHJcXG4gICAgICogaXMgZW5hYmxlZC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICovXFxuXFxuICB9LCB7XFxuICAgIGtleTogXCJfb2JzZXJ2ZUF1ZGlvQ29udGV4dFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29ic2VydmVBdWRpb0NvbnRleHQoKSB7XFxuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XFxuXFxuICAgICAgaWYgKHRoaXMuX2F1ZGlvQ29udGV4dCkge1xcbiAgICAgICAgdGhpcy5fYXVkaW9Db250ZXh0Lm9uc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIGlmIChfdGhpczIuX2F1ZGlvQ29udGV4dC5zdGF0ZSA9PT0gXFwncnVubmluZ1xcJykge1xcbiAgICAgICAgICAgIF90aGlzMi5fZW5hYmxlZCA9IHRydWU7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgX3RoaXMyLl9lbmFibGVkID0gZmFsc2U7XFxuICAgICAgICAgICAgY29uc29sZS53YXJuKFxcJ1RoZSBhdWRpbyBjb250ZXh0IGlzIG5vdCBydW5uaW5nLiBTcGVlY2ggd2lsbCBub3QgYmUgYWJsZSB0byBiZSBwbGF5ZWQgdW50aWwgaXQgaXMgcmVzdW1lZC4gVXNlIHRoZSBcIlRleHRUb1NwZWVjaEZlYXR1cmUucmVzdW1lQXVkaW9cIiBtZXRob2QgdG8gdHJ5IHRvIHJlc3VtZSBpdCBhZnRlciBhIHVzZXIgZ2VzdHVyZS5cXCcpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9O1xcblxcbiAgICAgICAgdGhpcy5fYXVkaW9Db250ZXh0Lm9uc3RhdGVjaGFuZ2UoKTtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENyZWF0ZSBhbiBBdWRpbyBvYmplY3Qgb2Ygc3BlZWNoIGF1ZGlvIGZvciB0aGUgZ2l2ZW4gc3BlZWNoIHRleHQuXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwcml2YXRlXFxyXFxuICAgICAqXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBQYXJhbWV0ZXJzIG9iamVjdCBjb21wYXRpYmxlIHdpdGggUG9sbHkuc3ludGhlc2l6ZVNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IFJlc29sdmVzIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGF1ZGlvIFVSTCBhbmQgQXVkaW9cXHJcXG4gICAgICogb2JqZWN0LlxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9zeW50aGVzaXplQXVkaW9cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zeW50aGVzaXplQXVkaW8ocGFyYW1zKSB7XFxuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XFxuXFxuICAgICAgcmV0dXJuIFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0KFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoVGV4dFRvU3BlZWNoRmVhdHVyZS5wcm90b3R5cGUpLCBcIl9zeW50aGVzaXplQXVkaW9cIiwgdGhpcykuY2FsbCh0aGlzLCBwYXJhbXMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xcbiAgICAgICAgdmFyIHVybCA9IHJlc3VsdC51cmw7IC8vIENyZWF0ZSBhbiBBdWRpbyBvYmplY3QgdGhhdCBwb2ludHMgdG8gdGhlIHByZXNpZ25lZCB1cmxcXG5cXG4gICAgICAgIHZhciBhdWRpbyA9IG5ldyBBdWRpbyh1cmwpO1xcbiAgICAgICAgYXVkaW8ubG9vcCA9IF90aGlzMy5sb29wO1xcbiAgICAgICAgYXVkaW8uY3Jvc3NPcmlnaW4gPSBcXCdhbm9ueW1vdXNcXCc7XFxuICAgICAgICBhdWRpby5wcmVsb2FkID0gXFwnYXV0b1xcJztcXG4gICAgICAgIHJlc3VsdC5hdWRpbyA9IGF1ZGlvO1xcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XFxuICAgICAgICAgIC8vIFJlc29sdmUgb25jZSB0aGUgbWluaW11bSBhbW91bnQgaXMgbG9hZGVkXFxuICAgICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoXFwnY2FucGxheXRocm91Z2hcXCcsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XFxuICAgICAgICAgIH0pOyAvLyBTdGFydCBsb2FkaW5nIHRoZSBhdWRpb1xcblxcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGF1ZGlvKTtcXG4gICAgICAgICAgYXVkaW8ubG9hZCgpO1xcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgIH1cXG4gICAgLyoqXFxyXFxuICAgICAqIENyZWF0ZSBhIG5ldyBTcGVlY2ggb2JqZWN0IGZvciB0aGUgc3BlYWtlci5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHByaXZhdGVcXHJcXG4gICAgICpcXHJcXG4gICAgICogQHBhcmFtIHtUZXh0VG9TcGVlY2h9IHNwZWFrZXIgLSBUaGUgVGV4dFRvU3BlZWNoIGluc3RhbmNlIHRoYXQgd2lsbCBvd24gdGhlIHNwZWVjaC5cXHJcXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUZXh0IG9mIHRoZSBzcGVlY2guXFxyXFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzcGVlY2htYXJrcyAtIFNwZWVjaG1hcmtzIGZvciB0aGUgc3BlZWNoLlxcclxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYXVkaW9Db25maWcgLSBBdWRpbyBmb3IgdGhlIHNwZWVjaC5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0Fic3RyYWN0U3BlZWNofVxcclxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcIl9jcmVhdGVTcGVlY2hcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVTcGVlY2godGV4dCwgc3BlZWNobWFya3MsIGF1ZGlvQ29uZmlnKSB7XFxuICAgICAgcmV0dXJuIG5ldyBhd3NwYWNrX1NwZWVjaCh0aGlzLCB0ZXh0LCBzcGVlY2htYXJrcywgYXVkaW9Db25maWcpO1xcbiAgICB9XFxuICAgIC8qKlxcclxcbiAgICAgKiBHZXRzIHdoZXRoZXIgb3Igbm90IHRoZSBhdWRpbyBjb250ZXh0IGlzIHJ1bm5pbmcgYW5kIHNwZWVjaCBjYW4gYmUgcGxheWVkLlxcclxcbiAgICAgKlxcclxcbiAgICAgKiBAcmVhZG9ubHlcXHJcXG4gICAgICogQHR5cGUge2Jvb2xlYW59XFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwiZW5hYmxlZFwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZDtcXG4gICAgfVxcbiAgICAvKipcXHJcXG4gICAgICogVHJ5IHRvIHJlc3VtZSB0aGUgYXVkaW8gY29udGV4dC4gVGhpcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZXhlY3V0ZWQgZWFjaCB0aW1lXFxyXFxuICAgICAqIHNwZWVjaCBpcyBwbGF5ZWQgb3IgcmVzdW1lZC4gSWYgdXNpbmcgbWFudWFsbHksIGl0IHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgYVxcclxcbiAgICAgKiB1c2VyIGludGVyYWN0aW9uIG9jY3Vycy5cXHJcXG4gICAgICpcXHJcXG4gICAgICogQHJldHVybnMge0RlZmVycmVkfSAtIFJlc29sdmVzIG9uY2UgdGhlIGF1ZGlvIGNvbnRleHQgaGFzIHJlc3VtZWQuXFxyXFxuICAgICAqL1xcblxcbiAgfSwge1xcbiAgICBrZXk6IFwicmVzdW1lQXVkaW9cIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZUF1ZGlvKCkge1xcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xcblxcbiAgICAgIHZhciBwcm9taXNlID0gbmV3IGNvcmVfRGVmZXJyZWQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xcbiAgICAgICAgX3RoaXM0Ll9hdWRpb0NvbnRleHQucmVzdW1lKCkudGhlbihmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIF90aGlzNC5fZW5hYmxlZCA9IHRydWU7XFxuICAgICAgICAgIHJlc29sdmUoKTtcXG4gICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGUpIHtcXG4gICAgICAgICAgX3RoaXM0Ll9lbmFibGVkID0gZmFsc2U7XFxuICAgICAgICAgIHJlamVjdChlKTtcXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICAgIHJldHVybiBwcm9taXNlO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJfc3RhcnRTcGVlY2hcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdGFydFNwZWVjaCh0ZXh0LCBjb25maWcpIHtcXG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcXG5cXG4gICAgICB2YXIgcGxheU1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogXFwncGxheVxcJztcXG4gICAgICB2YXIgY3VycmVudFByb21pc2UgPSB7XFxuICAgICAgICBwbGF5OiBuZXcgY29yZV9EZWZlcnJlZCh1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgY3VycmVudFByb21pc2Uuc3BlZWNoLmNhbmNlbCgpO1xcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICBjdXJyZW50UHJvbWlzZS5zcGVlY2guY2FuY2VsKCk7XFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgIGN1cnJlbnRQcm9taXNlLnNwZWVjaC5jYW5jZWwoKTtcXG4gICAgICAgIH0pLFxcbiAgICAgICAgc3BlZWNoOiBuZXcgY29yZV9EZWZlcnJlZCgpXFxuICAgICAgfTtcXG4gICAgICB0aGlzLl9jdXJyZW50UHJvbWlzZSA9IGN1cnJlbnRQcm9taXNlOyAvLyBUcnkgdG8gc3RhcnQgdGhlIGF1ZGlvIGNvbnRleHRcXG5cXG4gICAgICB0aGlzLnJlc3VtZUF1ZGlvKCkudGhlbihmdW5jdGlvbiAoKSB7XFxuICAgICAgICAvLyBFeGl0IGlmIHRoZSBwcm9taXNlIGlzIG5vIGxvbmdlciBwZW5kaW5nIGJlY2F1c2Ugb2YgdXNlciBpbnRlcmFjdGlvblxcbiAgICAgICAgaWYgKCFjdXJyZW50UHJvbWlzZS5wbGF5LnBlbmRpbmcpIHtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfSAvLyBDYW5jZWwgaWYgYW5vdGhlciBjYWxsIHRvIHBsYXkgaGFzIGFscmVhZHkgYmVlbiBtYWRlXFxuICAgICAgICBlbHNlIGlmIChfdGhpczUuX2N1cnJlbnRQcm9taXNlICE9PSBjdXJyZW50UHJvbWlzZSkge1xcbiAgICAgICAgICBjdXJyZW50UHJvbWlzZS5wbGF5LmNhbmNlbCgpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9IC8vIFRoZSBhdWRpbyBjb250ZXh0IGlzIHJ1bm5pbmcgc28gdGhlIHNwZWVjaCBjYW4gYmUgcGxheWVkXFxuXFxuXFxuICAgICAgICBpZiAoX3RoaXM1Ll9lbmFibGVkKSB7XFxuICAgICAgICAgIFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0KFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoVGV4dFRvU3BlZWNoRmVhdHVyZS5wcm90b3R5cGUpLCBcIl9zdGFydFNwZWVjaFwiLCBfdGhpczUpLmNhbGwoX3RoaXM1LCB0ZXh0LCBjb25maWcsIHBsYXlNZXRob2QpO1xcbiAgICAgICAgfSAvLyBSZWplY3QgaWYgdGhlIGF1ZGlvIGNvbnRleHQgaXMgbm90IHJ1bm5pbmdcXG4gICAgICAgIGVsc2Uge1xcbiAgICAgICAgICBjdXJyZW50UHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IFwiLmNvbmNhdChwbGF5TWV0aG9kLCBcIiBzcGVlY2ggb24gaG9zdCBcIikuY29uY2F0KF90aGlzNS5faG9zdC5pZCwgXCIuIFRoZSBhdWRpbyBjb250ZXh0IGlzIG5vdCBydW5uaW5nLiBVc2UgdGhlIFxcXFxcIlRleHRUb1NwZWVjaEZlYXR1cmUucmVzdW1lQXVkaW9cXFxcXCIgbWV0aG9kIHRvIHRyeSB0byByZXN1bWUgaXQgYWZ0ZXIgYSB1c2VyIGdlc3R1cmUuXCIpKSk7XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgICAgcmV0dXJuIGN1cnJlbnRQcm9taXNlLnBsYXk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInBsYXlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkodGV4dCwgY29uZmlnKSB7XFxuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0U3BlZWNoKHRleHQsIGNvbmZpZywgXFwncGxheVxcJyk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlc3VtZVwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKHRleHQsIGNvbmZpZykge1xcbiAgICAgIHJldHVybiB0aGlzLl9zdGFydFNwZWVjaCh0ZXh0LCBjb25maWcsIFxcJ3Jlc3VtZVxcJyk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcImluc3RhbGxBcGlcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc3RhbGxBcGkoKSB7XFxuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XFxuXFxuICAgICAgdmFyIGFwaSA9IFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0KFRleHRUb1NwZWVjaEZlYXR1cmVfZ2V0UHJvdG90eXBlT2YoVGV4dFRvU3BlZWNoRmVhdHVyZS5wcm90b3R5cGUpLCBcImluc3RhbGxBcGlcIiwgdGhpcykuY2FsbCh0aGlzKTtcXG5cXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhcGksIHtcXG4gICAgICAgIC8qKlxcclxcbiAgICAgICAgICogQG1lbWJlcm9mIFRleHRUb1NwZWVjaEZlYXR1cmVcXHJcXG4gICAgICAgICAqIEBpbnN0YW5jZVxcclxcbiAgICAgICAgICogQHNlZSBjb3JlL1RleHRUb1NwZWVjaEZlYXR1cmUjZW5hYmxlZFxcclxcbiAgICAgICAgICovXFxuICAgICAgICBlbmFibGVkOiB7XFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuX2VuYWJsZWQ7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gICAgICByZXR1cm4gYXBpO1xcbiAgICB9XFxuICB9XSk7XFxuXFxuICByZXR1cm4gVGV4dFRvU3BlZWNoRmVhdHVyZTtcXG59KGF3c3BhY2tfQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlKTtcXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGF3c3BhY2tfVGV4dFRvU3BlZWNoRmVhdHVyZSA9IChUZXh0VG9TcGVlY2hGZWF0dXJlKTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9hd3NwYWNrL2luZGV4LmpzXFxuLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVC0wXFxuXFxuXFxuXFxuXFxuXFxuLyoqXFxyXFxuICogQG1vZHVsZSBjb3JlL2F3c3BhY2tcXHJcXG4gKi9cXG5cXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IGF3c3BhY2sgPSAoe1xcbiAgLyoqXFxyXFxuICAgKiBAc2VlIGNvcmUvQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgKi9cXG4gIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZTogYXdzcGFja19BYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgY29yZS9UZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgKi9cXG4gIFRleHRUb1NwZWVjaEZlYXR1cmU6IGF3c3BhY2tfVGV4dFRvU3BlZWNoRmVhdHVyZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBjb3JlL1RleHRUb1NwZWVjaFV0aWxzXFxyXFxuICAgKi9cXG4gIFRleHRUb1NwZWVjaFV0aWxzOiBhd3NwYWNrX1RleHRUb1NwZWVjaFV0aWxzLFxcblxcbiAgLyoqIFxcclxcbiAgICogQHNlZSBjb3JlL0Fic3RyYWN0U3BlZWNoXFxyXFxuICAgKi9cXG4gIEFic3RyYWN0U3BlZWNoOiBhd3NwYWNrX0Fic3RyYWN0U3BlZWNoLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIGNvcmUvU3BlZWNoXFxyXFxuICAgKi9cXG4gIFNwZWVjaDogYXdzcGFja19TcGVlY2hcXG59KTtcXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29yZS9pbmRleC5qc1xcbi8vIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVQtMFxcblxcbi8qKlxcclxcbiAqIEBtb2R1bGUgY29yZS9IT1NUXFxyXFxuICovXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxudmFyIGNvcmVfRWFzaW5nID0gYW5pbXBhY2suRWFzaW5nLFxcbiAgICBjb3JlX0FuaW1hdGlvbkZlYXR1cmUgPSBhbmltcGFjay5BbmltYXRpb25GZWF0dXJlLFxcbiAgICBjb3JlX0FuaW1hdGlvblR5cGVzID0gYW5pbXBhY2suQW5pbWF0aW9uVHlwZXMsXFxuICAgIGNvcmVfQW5pbWF0aW9uTGF5ZXIgPSBhbmltcGFjay5BbmltYXRpb25MYXllcixcXG4gICAgY29yZV9MYXllckJsZW5kTW9kZXMgPSBhbmltcGFjay5MYXllckJsZW5kTW9kZXMsXFxuICAgIGNvcmVfRGVmYXVsdExheWVyQmxlbmRNb2RlID0gYW5pbXBhY2suRGVmYXVsdExheWVyQmxlbmRNb2RlLFxcbiAgICBjb3JlX1NpbmdsZVN0YXRlID0gYW5pbXBhY2suU2luZ2xlU3RhdGUsXFxuICAgIGNvcmVfVHJhbnNpdGlvblN0YXRlID0gYW5pbXBhY2suVHJhbnNpdGlvblN0YXRlLFxcbiAgICBjb3JlX0ZyZWVCbGVuZFN0YXRlID0gYW5pbXBhY2suRnJlZUJsZW5kU3RhdGUsXFxuICAgIGNvcmVfUXVldWVTdGF0ZSA9IGFuaW1wYWNrLlF1ZXVlU3RhdGUsXFxuICAgIGNvcmVfUmFuZG9tQW5pbWF0aW9uU3RhdGUgPSBhbmltcGFjay5SYW5kb21BbmltYXRpb25TdGF0ZSxcXG4gICAgY29yZV9CbGVuZDFkU3RhdGUgPSBhbmltcGFjay5CbGVuZDFkU3RhdGUsXFxuICAgIGNvcmVfQmxlbmQyZFN0YXRlID0gYW5pbXBhY2suQmxlbmQyZFN0YXRlLFxcbiAgICBjb3JlX0FuaW1hdGlvblV0aWxzID0gYW5pbXBhY2suQW5pbWF0aW9uVXRpbHM7XFxuXFxudmFyIGNvcmVfQWJzdHJhY3RUZXh0VG9TcGVlY2hGZWF0dXJlID0gYXdzcGFjay5BYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUsXFxuICAgIGNvcmVfVGV4dFRvU3BlZWNoRmVhdHVyZSA9IGF3c3BhY2suVGV4dFRvU3BlZWNoRmVhdHVyZSxcXG4gICAgY29yZV9UZXh0VG9TcGVlY2hVdGlscyA9IGF3c3BhY2suVGV4dFRvU3BlZWNoVXRpbHMsXFxuICAgIGNvcmVfQWJzdHJhY3RTcGVlY2ggPSBhd3NwYWNrLkFic3RyYWN0U3BlZWNoLFxcbiAgICBjb3JlX1NwZWVjaCA9IGF3c3BhY2suU3BlZWNoO1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgY29yZSA9ICh7XFxuICAvKipcXHJcXG4gICAqIEBzZWUgZW52XFxyXFxuICAgKi9cXG4gIGVudjogZW52LFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIFV0aWxzXFxyXFxuICAgKi9cXG4gIFV0aWxzOiBjb3JlX1V0aWxzLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIE1hdGhVdGlsc1xcclxcbiAgICovXFxuICBNYXRoVXRpbHM6IGNvcmVfTWF0aFV0aWxzLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIERlZmVycmVkXFxyXFxuICAgKi9cXG4gIERlZmVycmVkOiBjb3JlX0RlZmVycmVkLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIGNvcmUvTWVzc2VuZ2VyXFxyXFxuICAgKi9cXG4gIE1lc3NlbmdlcjogY29yZV9NZXNzZW5nZXIsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgY29yZS9Ib3N0T2JqZWN0XFxyXFxuICAgKi9cXG4gIEhvc3RPYmplY3Q6IGNvcmVfSG9zdE9iamVjdCxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBjb3JlL0xpcHN5bmNGZWF0dXJlXFxyXFxuICAgKi9cXG4gIExpcHN5bmNGZWF0dXJlOiBjb3JlX0xpcHN5bmNGZWF0dXJlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEdlc3R1cmVGZWF0dXJlXFxyXFxuICAgKi9cXG4gIEdlc3R1cmVGZWF0dXJlOiBjb3JlX0dlc3R1cmVGZWF0dXJlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIGNvcmUvUG9pbnRPZkludGVyZXN0RmVhdHVyZVxcclxcbiAgICovXFxuICBQb2ludE9mSW50ZXJlc3RGZWF0dXJlOiBjb3JlX1BvaW50T2ZJbnRlcmVzdEZlYXR1cmUsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgRGVmYXVsdFZpc2VtZU1hcFxcclxcbiAgICovXFxuICBEZWZhdWx0VmlzZW1lTWFwOiBEZWZhdWx0VmlzZW1lTWFwLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIERlZmF1bHRHZXN0dXJlV29yZHNcXHJcXG4gICAqL1xcbiAgRGVmYXVsdEdlc3R1cmVXb3JkczogRGVmYXVsdEdlc3R1cmVXb3JkcyxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBBeGlzTWFwXFxyXFxuICAgKi9cXG4gIEF4aXNNYXA6IEF4aXNNYXAsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgY29yZS9BbmltYXRpb25GZWF0dXJlXFxyXFxuICAgKi9cXG4gIEFuaW1hdGlvbkZlYXR1cmU6IGNvcmVfQW5pbWF0aW9uRmVhdHVyZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBBbmltYXRpb25MYXllclxcclxcbiAgICovXFxuICBBbmltYXRpb25MYXllcjogY29yZV9BbmltYXRpb25MYXllcixcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBjb3JlL1NpbmdsZVN0YXRlXFxyXFxuICAgKi9cXG4gIFNpbmdsZVN0YXRlOiBjb3JlX1NpbmdsZVN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIFRyYW5zaXRpb25TdGF0ZVxcclxcbiAgICovXFxuICBUcmFuc2l0aW9uU3RhdGU6IGNvcmVfVHJhbnNpdGlvblN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEZyZWVCbGVuZFN0YXRlXFxyXFxuICAgKi9cXG4gIEZyZWVCbGVuZFN0YXRlOiBjb3JlX0ZyZWVCbGVuZFN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIFF1ZXVlU3RhdGVcXHJcXG4gICAqL1xcbiAgUXVldWVTdGF0ZTogY29yZV9RdWV1ZVN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIFJhbmRvbUFuaW1hdGlvblN0YXRlXFxyXFxuICAgKi9cXG4gIFJhbmRvbUFuaW1hdGlvblN0YXRlOiBjb3JlX1JhbmRvbUFuaW1hdGlvblN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEJsZW5kMWRTdGF0ZVxcclxcbiAgICovXFxuICBCbGVuZDFkU3RhdGU6IGNvcmVfQmxlbmQxZFN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEJsZW5kMmRTdGF0ZVxcclxcbiAgICovXFxuICBCbGVuZDJkU3RhdGU6IGNvcmVfQmxlbmQyZFN0YXRlLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIEFuaW1hdGlvblV0aWxzXFxyXFxuICAgKi9cXG4gIEFuaW1hdGlvblV0aWxzOiBjb3JlX0FuaW1hdGlvblV0aWxzLFxcbiAgRWFzaW5nOiBjb3JlX0Vhc2luZyxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBMYXllckJsZW5kTW9kZXNcXHJcXG4gICAqL1xcbiAgTGF5ZXJCbGVuZE1vZGVzOiBjb3JlX0xheWVyQmxlbmRNb2RlcyxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBEZWZhdWx0TGF5ZXJCbGVuZE1vZGVcXHJcXG4gICAqL1xcbiAgRGVmYXVsdExheWVyQmxlbmRNb2RlOiBjb3JlX0RlZmF1bHRMYXllckJsZW5kTW9kZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBBbmltYXRpb25UeXBlc1xcclxcbiAgICovXFxuICBBbmltYXRpb25UeXBlczogY29yZV9BbmltYXRpb25UeXBlcyxcXG4gIC8vIEFXUyBQYWNrXFxuXFxuICAvKipcXHJcXG4gICogQHNlZSBjb3JlL0Fic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZVxcclxcbiAgKi9cXG4gIEFic3RyYWN0VGV4dFRvU3BlZWNoRmVhdHVyZTogY29yZV9BYnN0cmFjdFRleHRUb1NwZWVjaEZlYXR1cmUsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgY29yZS9UZXh0VG9TcGVlY2hGZWF0dXJlXFxyXFxuICAgKi9cXG4gIFRleHRUb1NwZWVjaEZlYXR1cmU6IGNvcmVfVGV4dFRvU3BlZWNoRmVhdHVyZSxcXG5cXG4gIC8qKlxcclxcbiAgICogQHNlZSBjb3JlL1RleHRUb1NwZWVjaFV0aWxzXFxyXFxuICAgKi9cXG4gIFRleHRUb1NwZWVjaFV0aWxzOiBjb3JlX1RleHRUb1NwZWVjaFV0aWxzLFxcblxcbiAgLyoqXFxyXFxuICAgKiBAc2VlIGNvcmUvQWJzdHJhY3RTcGVlY2hcXHJcXG4gICAqL1xcbiAgQWJzdHJhY3RTcGVlY2g6IGNvcmVfQWJzdHJhY3RTcGVlY2gsXFxuXFxuICAvKipcXHJcXG4gICAqIEBzZWUgY29yZS9TcGVlY2hcXHJcXG4gICAqL1xcbiAgU3BlZWNoOiBjb3JlX1NwZWVjaFxcbn0pOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5ETTNMbXB6SWl3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUVVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0SlFVTk5RVHM3T3pzN1FVRkRTanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5GTEhOQ1FVRnJSVHRCUVVGQk96dEJRVUZCTEZGQlFYUkVReXhWUVVGelJDeDFSVUZCZWtNc1dVRkJUU3hEUVVGRkxFTkJRV2xETzBGQlFVRXNVVUZCTDBKRExGTkJRU3RDTzBGQlFVRXNVVUZCY0VKRExGRkJRVzlDTzBGQlFVRXNVVUZCVmtNc1VVRkJWVHM3UVVGQlFUczdRVUZEYUVVc1VVRkJTU3hQUVVGUFNDeFZRVUZRTEV0QlFYTkNMRlZCUVRGQ0xFVkJRWE5ETzBGQlEzQkRMRmxCUVUwc1NVRkJTVWtzUzBGQlNpdzRSRUZCVGp0QlFVZEVPenRCUVVWRUxGRkJRVWtzVDBGQlQwZ3NVMEZCVUN4TFFVRnhRaXhYUVVGeVFpeEpRVUZ2UXl4UFFVRlBRU3hUUVVGUUxFdEJRWEZDTEZWQlFUZEVMRVZCUVhsRk8wRkJRM1pGTEZsQlFVMHNTVUZCU1Vjc1MwRkJTaXcyUkVGQlRqdEJRVWRFT3p0QlFVVkVMRkZCUVVrc1QwRkJUMFlzVVVGQlVDeExRVUZ2UWl4WFFVRndRaXhKUVVGdFF5eFBRVUZQUVN4UlFVRlFMRXRCUVc5Q0xGVkJRVE5FTEVWQlFYVkZPMEZCUTNKRkxGbEJRVTBzU1VGQlNVVXNTMEZCU2l3MFJFRkJUanRCUVVkRU96dEJRVVZFTEZGQlFVa3NUMEZCVDBRc1VVRkJVQ3hMUVVGdlFpeFhRVUZ3UWl4SlFVRnRReXhQUVVGUFFTeFJRVUZRTEV0QlFXOUNMRlZCUVRORUxFVkJRWFZGTzBGQlEzSkZMRmxCUVUwc1NVRkJTVU1zUzBGQlNpdzBSRUZCVGp0QlFVZEVPenRCUVVWRUxGRkJRVWxETEVkQlFVbzdRVUZEUVN4UlFVRkpReXhIUVVGS08wRkJRMEVzVVVGQlNVTXNUVUZCU2p0QlFVTkJMRkZCUVUxRExFMUJRVTBzUjBGQlJ6dEJRVU5pUXl4TlFVRkJRU3hSUVVGUkxFVkJRVVVzUzBGRVJ6dEJRVVZpUXl4TlFVRkJRU3hSUVVGUkxFVkJRVVVzUzBGR1J6dEJRVWRpUXl4TlFVRkJRU3hSUVVGUkxFVkJRVVVzUzBGSVJ6dEJRVWxpUXl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGS1NTeExRVUZtTzBGQlQwRXNPRUpCUVUwc1ZVRkJRME1zVDBGQlJDeEZRVUZWUXl4TlFVRldMRVZCUVhGQ08wRkJRM3BDTzBGQlEwRlVMRTFCUVVGQkxFZEJRVWNzUjBGQlJ5eGhRVUZCVlN4TFFVRkxMRVZCUVVrN1FVRkRZaXhaUVVGSlVDeE5RVUZOTEVOQlFVTkpMRTlCUVZnc1JVRkJiMEk3UVVGRGJFSktMRlZCUVVGQkxFMUJRVTBzUTBGQlEwTXNVVUZCVUN4SFFVRnJRaXhKUVVGc1FqdEJRVU5CUkN4VlFVRkJRU3hOUVVGTkxFTkJRVU5KTEU5QlFWQXNSMEZCYVVJc1MwRkJha0k3TzBGQlJVRXNZMEZCU1N4UFFVRlBXQ3hUUVVGUUxFdEJRWEZDTEZWQlFYcENMRVZCUVhGRE8wRkJRMjVEWXl4WlFVRkJRU3hMUVVGTExFZEJRVWRrTEZOQlFWTXNRMEZCUTJNc1MwRkJSQ3hEUVVGcVFqdEJRVU5FT3p0QlFVVkVMR2xDUVVGUFJpeFBRVUZQTEVOQlFVTkZMRXRCUVVRc1EwRkJaRHRCUVVORU8wRkJRMFlzVDBGWVJDeERRVVo1UWl4RFFXVjZRanM3TzBGQlEwRlVMRTFCUVVGQkxFZEJRVWNzUjBGQlJ5eGhRVUZCVXl4TFFVRkxMRVZCUVVrN1FVRkRZaXhaUVVGSlVDeE5RVUZOTEVOQlFVTkpMRTlCUVZnc1JVRkJiMEk3UVVGRGJFSktMRlZCUVVGQkxFMUJRVTBzUTBGQlEwVXNVVUZCVUN4SFFVRnJRaXhKUVVGc1FqdEJRVU5CUml4VlFVRkJRU3hOUVVGTkxFTkJRVU5KTEU5QlFWQXNSMEZCYVVJc1MwRkJha0k3TzBGQlJVRXNZMEZCU1N4UFFVRlBWaXhSUVVGUUxFdEJRVzlDTEZWQlFYaENMRVZCUVc5RE8wRkJRMnhEWVN4WlFVRkJRU3hMUVVGTExFZEJRVWRpTEZGQlFWRXNRMEZCUTJFc1MwRkJSQ3hEUVVGb1FqdEJRVU5FT3p0QlFVVkVMR2xDUVVGUFJDeE5RVUZOTEVOQlFVTkRMRXRCUVVRc1EwRkJZanRCUVVORU8wRkJRMFlzVDBGWVJDeERRV2hDZVVJc1EwRTJRbnBDT3pzN1FVRkRRVklzVFVGQlFVRXNUVUZCVFN4SFFVRkhMR2RDUVVGQlVTeExRVUZMTEVWQlFVazdRVUZEYUVJc1dVRkJTVkFzVFVGQlRTeERRVUZEU1N4UFFVRllMRVZCUVc5Q08wRkJRMnhDU2l4VlFVRkJRU3hOUVVGTkxFTkJRVU5ITEZGQlFWQXNSMEZCYTBJc1NVRkJiRUk3UVVGRFFVZ3NWVUZCUVVFc1RVRkJUU3hEUVVGRFNTeFBRVUZRTEVkQlFXbENMRXRCUVdwQ096dEJRVVZCTEdOQlFVa3NUMEZCVDFRc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOc1Exa3NXVUZCUVVFc1MwRkJTeXhIUVVGSFdpeFJRVUZSTEVOQlFVTlpMRXRCUVVRc1EwRkJhRUk3UVVGRFJEczdRVUZGUkN4cFFrRkJUMFlzVDBGQlR5eERRVUZEUlN4TFFVRkVMRU5CUVdRN1FVRkRSRHRCUVVOR0xFOUJXRVFzUTBFNVFubENMRU5CTWtONlFqczdPMEZCUTBGbUxFMUJRVUZCTEZWQlFWVXNRMEZCUTBzc1IwRkJSQ3hGUVVGTlF5eEhRVUZPTEVWQlFWZERMRTFCUVZnc1EwRkJWanRCUVVORUxFdEJOME5FTzBGQkswTkJMRlZCUVV0VExFOUJRVXdzUjBGQlpWSXNUVUZCWmp0QlFVTkJMRlZCUVV0VExGRkJRVXdzUjBGQlowSmFMRWRCUVdoQ08wRkJRMEVzVlVGQlMyRXNUMEZCVEN4SFFVRmxXaXhIUVVGbU8wRkJRMEVzVlVGQlMyRXNUMEZCVEN4SFFVRmxXaXhOUVVGbU8wRkJRMEVzVlVGQlMyRXNWMEZCVEN4SFFVRnRRbkJDTEZWQlFXNUNPMEZCZEVablJUdEJRWFZHYWtVN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096dFRRVU5GTEdWQlFXVTdRVUZEWWl4aFFVRlBMRXRCUVV0blFpeFBRVUZNTEVOQlFXRlFMRkZCUVhCQ08wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFOQlEwVXNaVUZCWlR0QlFVTmlMR0ZCUVU4c1MwRkJTMDhzVDBGQlRDeERRVUZoVGl4UlFVRndRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFRRVU5GTEdWQlFXVTdRVUZEWWl4aFFVRlBMRXRCUVV0TkxFOUJRVXdzUTBGQllVd3NVVUZCY0VJN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VTBGRFJTeGxRVUZqTzBGQlExb3NZVUZCVHl4TFFVRkxTeXhQUVVGTUxFTkJRV0ZLTEU5QlFYQkNPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdsQ1FVRlJSeXhMUVVGU0xFVkJRV1U3UVVGRFlpeGhRVUZQTEV0QlFVdEZMRkZCUVV3c1EwRkJZMFlzUzBGQlpDeERRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHZENRVUZQUVN4TFFVRlFMRVZCUVdNN1FVRkRXaXhoUVVGUExFdEJRVXRITEU5QlFVd3NRMEZCWVVnc1MwRkJZaXhEUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR2RDUVVGUFFTeExRVUZRTEVWQlFXTTdRVUZEV2l4aFFVRlBMRXRCUVV0SkxFOUJRVXdzUTBGQllVb3NTMEZCWWl4RFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHRRa0ZCYVVJN1FVRkRaaXhWUVVGSkxFdEJRVXRJTEU5QlFWUXNSVUZCYTBJN1FVRkJRU3d3UTBGRVZGTXNTVUZEVXp0QlFVUlVRU3hWUVVGQlFTeEpRVU5UTzBGQlFVRTdPMEZCUTJoQ0xHRkJRVXRFTEZkQlFVd3NZMEZCYVVJc1MwRkJTMGdzVVVGQmRFSXNSVUZCWjBNc1MwRkJTME1zVDBGQmNrTXNSVUZCT0VNc1MwRkJTME1zVDBGQmJrUXNVMEZCSzBSRkxFbEJRUzlFTzBGQlEwUTdRVUZEUmp0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzWjBKQlFXTk9MRXRCUVdRc1JVRkJjVUk3UVVGRGJrSXNZVUZCVHl4SlFVRkphRUlzVVVGQlNpeERRVUZoTEZWQlFVTnJRaXhSUVVGRUxFVkJRVmRETEU5QlFWZ3NSVUZCYjBKWUxFMUJRWEJDTEVWQlFTdENPMEZCUTJwRVFTeFJRVUZCUVN4TlFVRk5MRU5CUVVOUkxFdEJRVVFzUTBGQlRqdEJRVU5FTEU5QlJrMHNRMEZCVUR0QlFVZEVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeGhRVUZYVHl4UlFVRllMRVZCUVhGQ2NrSXNVMEZCY2tJc1JVRkJaME5ETEZGQlFXaERMRVZCUVRCRFF5eFJRVUV4UXl4RlFVRnZSRHRCUVVOc1JDeFZRVUZKYlVJc1VVRkJVU3hKUVVGSkxFbEJRVm9zU1VGQmIwSXNUMEZCVDBFc1VVRkJVU3hEUVVGRFF5eE5RVUZOTEVOQlFVTkRMRkZCUVZJc1EwRkJaaXhMUVVGeFF5eFZRVUUzUkN4RlFVRjVSVHRCUVVOMlJTeFpRVUZKUXl4RFFVRkRMR3RGUVVGTU96dEJRVVZCTEZsQlFVa3NUMEZCVDNaQ0xGRkJRVkFzUzBGQmIwSXNWVUZCZUVJc1JVRkJiME03UVVGRGJFTjFRaXhWUVVGQlFTeERRVUZETEVkQlFVZDJRaXhSUVVGUkxFTkJRVU4xUWl4RFFVRkVMRU5CUVZvN1FVRkRSRHM3UVVGRlJDeGxRVUZQTVVJc1VVRkJVU3hEUVVGRFpTeE5RVUZVTEVOQlFXZENWeXhEUVVGb1FpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1ZVRkJUVU1zUzBGQlN5eHpRa0ZCVDBvc1VVRkJVQ3hEUVVGWU96dEJRVU5CTEZWQlFVMUxMRkZCUVZFc1IwRkJSMFFzUzBGQlN5eERRVUZEUlN4TlFVRk9MRU5CUVdFc1ZVRkJRVU1zU1VGQlNUdEJRVUZCTEdWQlFVbEJMRWxCUVVrc1dVRkJXVGxDTEZGQlFYQkNPMEZCUVVFc1QwRkJha0lzUTBGQmFrSTdRVUZGUVN4VlFVRk5LMElzVFVGQlRTeEhRVUZITEVsQlFVa3ZRaXhSUVVGS0xFTkJRMkpuUXl4VFFVUmhMRVZCUldJc1ZVRkJRVU1zV1VGQldTeEZRVUZKTzBGQlEyUk1MRkZCUVVGQkxGRkJRVkVzUTBGQlEwMHNUMEZCVkN4RFFVRnBRaXhWUVVGQlNpeEpRVUZKTEVWQlFVazdRVUZEZGtKQkxGVkJRVUZCTEVsQlFVa3NRMEZCUTJoQ0xFOUJRVXdzUTBGQllXMUNMRmxCUVdJN1FVRkRSQ3hUUVVaRU8wRkJSMEZNTEZGQlFVRkJMRkZCUVZFc1EwRkJRMDhzVFVGQlZDeEhRVUZyUWl4RFFVRnNRanM3UVVGRlFTeFpRVUZKTEU5QlFVOXFReXhUUVVGUUxFdEJRWEZDTEZWQlFYcENMRVZCUVhGRE8wRkJRMjVETEdsQ1FVRlBRU3hUUVVGVExFTkJRVU1yUWl4WlFVRkVMRU5CUVdoQ08wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NhVUpCUVU5QkxGbEJRVkE3UVVGRFJEdEJRVU5HTEU5Qllsa3NSVUZqWWl4VlFVRkJSeXhMUVVGTExFVkJRVWs3UVVGRFVGSXNVVUZCUVVFc1VVRkJVU3hEUVVGRFRTeFBRVUZVTEVOQlFXbENMRlZCUVVGS0xFbEJRVWtzUlVGQlNUdEJRVU4yUWtFc1ZVRkJRVUVzU1VGQlNTeERRVUZEWml4TlFVRk1MRU5CUVZseFFpeExRVUZhTzBGQlEwUXNVMEZHUkR0QlFVZEJVaXhSUVVGQlFTeFJRVUZSTEVOQlFVTlBMRTFCUVZRc1IwRkJhMElzUTBGQmJFSTdPMEZCUlVFc1dVRkJTU3hQUVVGUGFFTXNVVUZCVUN4TFFVRnZRaXhWUVVGNFFpeEZRVUZ2UXp0QlFVTnNReXhwUWtGQlQwRXNVVUZCVVN4RFFVRkRhVU1zUzBGQlJDeERRVUZtTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2FVSkJRVTlCTEV0QlFWQTdRVUZEUkR0QlFVTkdMRTlCZWtKWkxFVkJNRUppTEZWQlFVRkRMRmRCUVZjc1JVRkJTVHRCUVVOaVZDeFJRVUZCUVN4UlFVRlJMRU5CUVVOTkxFOUJRVlFzUTBGQmFVSXNWVUZCUVVvc1NVRkJTU3hGUVVGSk8wRkJRM1pDUVN4VlFVRkJRU3hKUVVGSkxFTkJRVU4wUWl4TlFVRk1MRU5CUVZrMlFpeFhRVUZhTzBGQlEwUXNVMEZHUkR0QlFVZEJWQ3hSUVVGQlFTeFJRVUZSTEVOQlFVTlBMRTFCUVZRc1IwRkJhMElzUTBGQmJFSTdPMEZCUlVFc1dVRkJTU3hQUVVGUEwwSXNVVUZCVUN4TFFVRnZRaXhWUVVGNFFpeEZRVUZ2UXp0QlFVTnNReXhwUWtGQlQwRXNVVUZCVVN4RFFVRkRhVU1zVjBGQlJDeERRVUZtTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2FVSkJRVTlCTEZkQlFWQTdRVUZEUkR0QlFVTkdMRTlCY2tOWkxFTkJRV1k3UVVGM1EwRXNWVUZCVFVNc1VVRkJVU3hIUVVGSFdDeExRVUZMTEVOQlFVTlJMRTFCUVhaQ08wRkJRMEVzVlVGQlRVa3NWMEZCVnl4SFFVRkhPMEZCUTJ4Q1F5eFJRVUZCUVN4TlFVRk5MRVZCUVVVc1MwRkVWVHRCUVVWc1FrTXNVVUZCUVVFc1YwRkJWeXhGUVVGRkxFTkJSa3M3UVVGSGJFSkRMRkZCUVVGQkxGZEJRVmNzUlVGQlJUdEJRVWhMTEU5QlFYQkNPMEZCVFVGbUxFMUJRVUZCTEV0QlFVc3NRMEZCUTA4c1QwRkJUaXhEUVVGakxGVkJRVU5LTEVsQlFVUXNSVUZCVDJFc1MwRkJVQ3hGUVVGcFFqdEJRVU0zUWl4WlFVRkpTaXhYUVVGWExFTkJRVU5ETEUxQlFXaENMRVZCUVhkQ08wRkJRM1JDTzBGQlEwUXNVMEZHUkN4TlFVVlBMRWxCUVVrc1JVRkJSVllzU1VGQlNTeFpRVUZaWXl4UFFVRnNRaXhEUVVGS0xFVkJRV2RETzBGQlEzSkRUQ3hWUVVGQlFTeFhRVUZYTEVOQlFVTkhMRmRCUVZvc1EwRkJkMEpETEV0QlFYaENMRWxCUVdsRFlpeEpRVUZxUXp0QlFVTkJVeXhWUVVGQlFTeFhRVUZYTEVOQlFVTkZMRmRCUVZvc1NVRkJNa0lzUTBGQk0wSTdPMEZCUlVFc1kwRkJTVVlzVjBGQlZ5eERRVUZEUlN4WFFVRmFMRXRCUVRSQ1NDeFJRVUZvUXl4RlFVRXdRenRCUVVONFExQXNXVUZCUVVFc1RVRkJUU3hEUVVGRGFrSXNUMEZCVUN4RFFVRmxlVUlzVjBGQlZ5eERRVUZEUnl4WFFVRXpRanRCUVVORU96dEJRVU5FTzBGQlEwUTdPMEZCUlVSYUxGRkJRVUZCTEVsQlFVa3NRMEZCUTJVc1NVRkJUQ3hEUVVORkxGVkJRVUUzUWl4TFFVRkxMRVZCUVVrN1FVRkRVQ3hqUVVGSkxFTkJRVU4xUWl4WFFVRlhMRU5CUVVORExFMUJRV0lzU1VGQmRVSXNRMEZCUTFZc1NVRkJTU3hEUVVGRGJFSXNVVUZCYWtNc1JVRkJNa003UVVGRGVrTXlRaXhaUVVGQlFTeFhRVUZYTEVOQlFVTkhMRmRCUVZvc1EwRkJkMEpETEV0QlFYaENMRWxCUVdsRE0wSXNTMEZCYWtNN1FVRkRRWFZDTEZsQlFVRkJMRmRCUVZjc1EwRkJRMFVzVjBGQldpeEpRVUV5UWl4RFFVRXpRanM3UVVGRlFTeG5Ra0ZCU1VZc1YwRkJWeXhEUVVGRFJTeFhRVUZhTEV0QlFUUkNTQ3hSUVVGb1F5eEZRVUV3UXp0QlFVTjRRMUFzWTBGQlFVRXNUVUZCVFN4RFFVRkRha0lzVDBGQlVDeERRVUZsZVVJc1YwRkJWeXhEUVVGRFJ5eFhRVUV6UWp0QlFVTkVPMEZCUTBZc1YwRlFSQ3hOUVU5UExFbEJRVWtzUTBGQlEwZ3NWMEZCVnl4RFFVRkRReXhOUVVGcVFpeEZRVUY1UWp0QlFVTTVRa1FzV1VGQlFVRXNWMEZCVnl4RFFVRkRReXhOUVVGYUxFZEJRWEZDTEVsQlFYSkNPMEZCUTBGVUxGbEJRVUZCTEUxQlFVMHNRMEZCUTNaQ0xFMUJRVkFzUTBGQlkxRXNTMEZCWkR0QlFVTkVPMEZCUTBZc1UwRmlTQ3hGUVdORkxGVkJRVUZ2UWl4TFFVRkxMRVZCUVVrN1FVRkRVQ3hqUVVGSkxFTkJRVU5ITEZkQlFWY3NRMEZCUTBNc1RVRkJha0lzUlVGQmVVSTdRVUZEZGtKRUxGbEJRVUZCTEZkQlFWY3NRMEZCUTBNc1RVRkJXaXhIUVVGeFFpeEpRVUZ5UWp0QlFVTkJWQ3haUVVGQlFTeE5RVUZOTEVOQlFVTm9RaXhOUVVGUUxFTkJRV054UWl4TFFVRmtPMEZCUTBRN1FVRkRSaXhUUVc1Q1NEdEJRWEZDUkN4UFFXeERSRHRCUVc5RFFTeGhRVUZQVEN4TlFVRlFPMEZCUTBRN096czdhVU5CZGxSdlFtRTdPMEZCTUZSMlFpeHZSRUZCWlRWRExGRkJRV1lzUlRzN096czdPenM3UVVONlZVRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdTVUZEVFRoRE96czdPenM3T3p0QlFVTktPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwVXNkMEpCUVd0Q08wRkJRMmhDTEdGQlFVOHNiVU5CUVcxRFF5eFBRVUZ1UXl4RFFVRXlReXhQUVVFelF5eEZRVUZ2UkN4VlFVRkJReXhEUVVGRExFVkJRVWs3UVVGRE9VUXNXVUZCVFVNc1dVRkJXU3hIUVVGSFF5eEpRVUZKTEVOQlFVTkRMRXRCUVV3c1EwRkJWeXhEUVVGRFF5eEpRVUZKTEVOQlFVTkRMRWRCUVV3c1MwRkJZVWdzU1VGQlNTeERRVUZEU1N4TlFVRk1MRXRCUVdkQ0xFVkJRVGxDTEVsQlFXOURMRVZCUVM5RExFTkJRWEpDT3p0QlFVTkJMRmxCUVVsT0xFTkJRVU1zUzBGQlN5eEhRVUZXTEVWQlFXVTdRVUZEWWl4cFFrRkJUME1zV1VGQldTeERRVUZEVFN4UlFVRmlMRU5CUVhOQ0xFVkJRWFJDTEVOQlFWQTdRVUZEUkN4VFFVbzJSQ3hEUVVzNVJEczdPMEZCUTBFc1pVRkJUeXhEUVVGRlRpeFpRVUZaTEVkQlFVY3NSMEZCYUVJc1IwRkJkVUlzUjBGQmVFSXNSVUZCTmtKTkxGRkJRVGRDTEVOQlFYTkRMRVZCUVhSRExFTkJRVkE3UVVGRFJDeFBRVkJOTEVOQlFWQTdRVUZSUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSFZDUVVGeFFrTXNTVUZCY2tJc1JVRkJNa003UVVGQlFTeFZRVUZvUWtNc1UwRkJaMElzZFVWQlFVb3NSVUZCU1RzN1FVRkRla003UVVGRFFTeFZRVUZKTEVOQlFVTkJMRk5CUVZNc1EwRkJRME1zVVVGQlZpeERRVUZ0UWtZc1NVRkJia0lzUTBGQlRDeEZRVUVyUWp0QlFVTTNRaXhsUVVGUFFTeEpRVUZRTzBGQlEwUTdPMEZCUlVRc1ZVRkJUVWNzVDBGQlR5eEhRVUZITEVsQlFVbERMRWRCUVVvc1EwRkJVVWdzVTBGQlVpeERRVUZvUWl4RFFVNTVReXhEUVZGNlF6czdRVUZEUVN4VlFVRk5TU3hWUVVGVkxFZEJRVWRNTEVsQlFVa3NRMEZCUTAwc1MwRkJUQ3hEUVVGWExFMUJRVmdzUTBGQmJrSTdRVUZEUVN4VlFVRlBia0lzUzBGQlVDeEhRVUZuUW10Q0xGVkJRV2hDTEVOQlFVOXNRaXhMUVVGUU8wRkJRMEVzVlVGQlRXOUNMRkZCUVZFc1IwRkJSMUFzU1VGQlNTeERRVUZEVVN4TFFVRk1MRU5CUVZjc1EwRkJXQ3hGUVVGamNrSXNTMEZCWkN4RFFVRnFRanRCUVVOQkxGVkJRVWx6UWl4VFFVRlRMRWRCUVVkRExFMUJRVTBzUTBGQlEwd3NWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJXQ3hEUVVGMFFpeERRVnA1UXl4RFFXTjZRenM3UVVGRFFVWXNUVUZCUVVFc1QwRkJUeXhEUVVGRGVrSXNUMEZCVWl4RFFVRm5RaXhWUVVGQmFVTXNUMEZCVHl4RlFVRkpPMEZCUTNwQ0xGbEJRVTFETEdGQlFXRXNSMEZCUjBRc1QwRkJUeXhEUVVGRFRDeExRVUZTTEVOQlFXTXNUVUZCWkN4RFFVRjBRanM3UVVGRlFTeFpRVUZKU3l4UFFVRlBMRU5CUVVOSUxFdEJRVklzUTBGQll5eERRVUZrTEVWQlFXbENTU3hoUVVGaExFTkJRVU42UWl4TFFVRXZRaXhOUVVFd1EyOUNMRkZCUVRsRExFVkJRWGRFTzBGQlEzUkVMR05CUVUxTkxGbEJRVmtzUjBGQlIwZ3NUVUZCVFN4RFFVRkRSU3hoUVVGaExFTkJRVU1zUTBGQlJDeERRVUZrTEVOQlFUTkNPenRCUVVWQkxHTkJRVWxETEZsQlFWa3NSMEZCUjBvc1UwRkJia0lzUlVGQk9FSTdRVUZETlVKQkxGbEJRVUZCTEZOQlFWTXNSMEZCUjBrc1dVRkJXanRCUVVORU8wRkJRMFk3UVVGRFJpeFBRVlpFTEVWQlpubERMRU5CTWtKNlF6czdRVUZEUVN4MVFrRkJWVTRzVVVGQlZpeFRRVUZ4UWtVc1UwRkJVeXhIUVVGSExFTkJRV3BETzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdkQ1FVRjVSVHRCUVVGQkxGVkJRVGRFU3l4UFFVRTJSQ3gxUlVGQmJrUXNRMEZCYlVRN08wRkJRVUVzY1VaQlFVb3NSVUZCU1R0QlFVRkJMRlZCUVM5RFF5eFJRVUVyUXl4UlFVRXZRMEVzVVVGQkswTTdRVUZCUVN4VlFVRnlRME1zVlVGQmNVTXNVVUZCY2tOQkxGVkJRWEZETzBGQlFVRXNWVUZCZWtKd1JTeFJRVUY1UWl4UlFVRjZRa0VzVVVGQmVVSTdRVUZCUVN4VlFVRm1jVVVzVDBGQlpTeFJRVUZtUVN4UFFVRmxPenRCUVVOMlJUdEJRVU5CTEZWQlFVa3NUMEZCVDBnc1QwRkJVQ3hMUVVGdFFpeFJRVUYyUWl4RlFVRnBRenRCUVVNdlFra3NVVUZCUVVFc1QwRkJUeXhEUVVGRFF5eEpRVUZTTEdsRFFVTXlRa3dzVDBGRU0wSTdRVUZKUVVFc1VVRkJRVUVzVDBGQlR5eEhRVUZITEVOQlFWWTdRVUZEUkN4UFFWSnpSU3hEUVZWMlJUczdPMEZCUTBFc1ZVRkJTVUVzVDBGQlR5eEpRVUZKTEVOQlFXWXNSVUZCYTBJN1FVRkRhRUlzV1VGQlNTeFBRVUZQUXl4UlFVRlFMRXRCUVc5Q0xGVkJRWGhDTEVWQlFXOURPMEZCUTJ4RFFTeFZRVUZCUVN4UlFVRlJPMEZCUTFRN08wRkJSVVFzWlVGQlQzWkZMSEZDUVVGQkxFVkJRVkE3UVVGRFJEczdRVUZGUkN4VlFVRkpORVVzVjBGQlZ5eEhRVUZITEVOQlFXeENPMEZCUTBFc1ZVRkJUVU1zVTBGQlV5eEhRVUZIVUN4UFFVRlBMRWRCUVVjc1NVRkJOVUlzUTBGd1FuVkZMRU5CYjBKeVF6dEJRVVZzUXpzN1FVRkRRU3hWUVVGTlVTeFJRVUZSTEVkQlFVY3NVMEZCV0VFc1VVRkJWeXhEUVVGRGFFVXNUMEZCUkN4RlFVRlZReXhOUVVGV0xFVkJRV3RDU3l4UFFVRnNRaXhGUVVFMlF6dEJRVUZCTEZsQlFXeENNa1FzVTBGQmEwSXNkVVZCUVU0c1EwRkJUVHM3UVVGRE5VUXNXVUZCU1N4UFFVRlBRU3hUUVVGUUxFdEJRWEZDTEZGQlFYcENMRVZCUVcxRE8wRkJRMnBETEdOQlFVMXlSQ3hEUVVGRExFZEJRVWNzU1VGQlNYSkNMRXRCUVVvc1owVkJRVlk3UVVGSFFWVXNWVUZCUVVFc1RVRkJUU3hEUVVGRFZ5eERRVUZFTEVOQlFVNDdRVUZEUVR0QlFVTkVMRk5CVURKRUxFTkJVelZFT3pzN1FVRkRRU3haUVVGSmNVUXNVMEZCVXl4TFFVRkxMRU5CUVd4Q0xFVkJRWEZDTzBGQlEyNUNPMEZCUTBRc1UwRmFNa1FzUTBGak5VUTdPenRCUVVOQlNDeFJRVUZCUVN4WFFVRlhMRWxCUVVsSExGTkJRV1k3TzBGQlEwRXNXVUZCU1Vnc1YwRkJWeXhIUVVGSExFTkJRV3hDTEVWQlFYRkNPMEZCUTI1Q1FTeFZRVUZCUVN4WFFVRlhMRWRCUVVjc1EwRkJaRHRCUVVORU96dEJRVVZFTEZsQlFVa3NUMEZCVDBvc1ZVRkJVQ3hMUVVGelFpeFZRVUV4UWl4RlFVRnpRenRCUVVOd1EwRXNWVUZCUVVFc1ZVRkJWU3hEUVVGRGRFSXNTVUZCU1N4RFFVRkRPRUlzUjBGQlRDeERRVUZUU2l4WFFVRlhMRWRCUVVkRExGTkJRWFpDTEVWQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQlZqdEJRVU5FTEZOQmRFSXlSQ3hEUVhkQ05VUTdPenRCUVVOQkxGbEJRVWxFTEZkQlFWY3NTVUZCU1VNc1UwRkJia0lzUlVGQk9FSTdRVUZETlVJdlJDeFZRVUZCUVN4UFFVRlBPMEZCUTFJN1FVRkRSaXhQUVRWQ1JEczdRVUU0UWtFc1lVRkJUeXhKUVVGSlpDeGhRVUZLTEVOQlFXRTRSU3hSUVVGaUxFVkJRWFZDVUN4UlFVRjJRaXhGUVVGcFEwVXNUMEZCYWtNc1JVRkJNRU55UlN4UlFVRXhReXhEUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4M1FrRkJjMEkwUlN4SFFVRjBRaXhGUVVFeVFrTXNSMEZCTTBJc1JVRkJaME03UVVGRE9VSXNZVUZCVHk5Q0xFbEJRVWtzUTBGQlEwa3NUVUZCVEN4TlFVRnBRakpDTEVkQlFVY3NSMEZCUjBRc1IwRkJka0lzU1VGQk9FSkJMRWRCUVhKRE8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4elFrRkJiMEpCTEVkQlFYQkNMRVZCUVhsQ1F5eEhRVUY2UWl4RlFVRTRRanRCUVVNMVFrUXNUVUZCUVVFc1IwRkJSeXhIUVVGSE9VSXNTVUZCU1N4RFFVRkRaME1zU1VGQlRDeERRVUZWUml4SFFVRldMRU5CUVU0N1FVRkRRVU1zVFVGQlFVRXNSMEZCUnl4SFFVRkhMMElzU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZjNFFpeEhRVUZZTEVOQlFVNDdRVUZEUVN4aFFVRlBMMElzU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwa3NUVUZCVEN4TlFVRnBRakpDTEVkQlFVY3NSMEZCUjBRc1IwRkJka0lzUTBGQldDeEpRVUV3UTBFc1IwRkJha1E3UVVGRFJEczdPenM3TzBGQlIwZ3NhVVJCUVdWc1F5eExRVUZtTEVVN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRla3RCTzBGQlEwRTdRVUZEUVN4SlFVRk5jVU1zWTBGQll5eEhRVUZITEUxQlFVMXFReXhKUVVGSkxFTkJRVU5yUXl4RlFVRnNRenRCUVVOQkxFbEJRVTFETEdOQlFXTXNSMEZCUjI1RExFbEJRVWtzUTBGQlEydERMRVZCUVV3c1IwRkJWU3hIUVVGcVF6dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wbEJRMDFGT3pzN096czdPenRCUVVOS08wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBVc2RVSkJRV2xDUXl4UFFVRnFRaXhGUVVFd1FqdEJRVU40UWl4aFFVRlBRU3hQUVVGUExFZEJRVWRLTEdOQlFXcENPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEcxQ1FVRnBRa3NzVDBGQmFrSXNSVUZCTUVJN1FVRkRlRUlzWVVGQlQwRXNUMEZCVHl4SFFVRkhTQ3hqUVVGcVFqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzWTBGQldVa3NTVUZCV2l4RlFVRnJRa01zUlVGQmJFSXNSVUZCYzBKRExFMUJRWFJDTEVWQlFUaENPMEZCUXpWQ0xHRkJRVTlHTEVsQlFVa3NSMEZCUnl4RFFVRkRReXhGUVVGRkxFZEJRVWRFTEVsQlFVNHNTVUZCWTBVc1RVRkJOVUk3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHVkJRV0V6UlN4TFFVRmlMRVZCUVhORE8wRkJRVUVzVlVGQmJFSm5SU3hIUVVGclFpeDFSVUZCV2l4RFFVRlpPMEZCUVVFc1ZVRkJWRU1zUjBGQlV5eDFSVUZCU0N4RFFVRkhPMEZCUTNCRExHRkJRVTh2UWl4SlFVRkpMRU5CUVVNclFpeEhRVUZNTEVOQlFWTkVMRWRCUVZRc1JVRkJZemxDTEVsQlFVa3NRMEZCUXpoQ0xFZEJRVXdzUTBGQlUyaEZMRXRCUVZRc1JVRkJaMEpwUlN4SFFVRm9RaXhEUVVGa0xFTkJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzTkVKQlFUQkNWeXhEUVVFeFFpeEZRVUUyUWtNc1EwRkJOMElzUlVGQlowTkRMRU5CUVdoRExFVkJRVzFETzBGQlEycERMRlZCUVUxRExFOUJRVThzUjBGQlIxUXNVMEZCVXl4RFFVRkRWU3hsUVVGV0xFTkJRVEJDU2l4RFFVRXhRaXhGUVVFMlFrTXNRMEZCTjBJc1EwRkJhRUlzUTBGRWFVTXNRMEZIYWtNN08wRkJRMEVzVlVGQlNVVXNUMEZCVHl4TFFVRkxMRU5CUVdoQ0xFVkJRVzFDTzBGQlEycENMR1ZCUVU5SUxFTkJRVkE3UVVGRFJEczdRVUZGUkN4VlFVRk5TeXhEUVVGRExFZEJRMHdzUTBGQlF5eERRVUZEU0N4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFZEJRVTlHTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1MwRkJhVUpETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUMFFzUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCZWtJc1NVRkJaME1zUTBGQlEwVXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJSQ3hIUVVGUFJpeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRlVMRXRCUVdsQ1F5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU5RUxFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFYcENMRU5CUVdwRExFbEJRV3RGUnl4UFFVUndSVHM3UVVGSFFTeFZRVUZKUnl4TFFVRkxMRWRCUVVjc05FSkJRVWxPTEVOQlFWQXNRMEZCVkRzN1FVRkRRU3hWUVVGSlN5eERRVUZETEVkQlFVY3NRMEZCVWl4RlFVRlhPMEZCUTFSRExGRkJRVUZCTEV0QlFVc3NSMEZCUnl3MFFrRkJTVXdzUTBGQlVDeERRVUZNTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVsSkxFTkJRVU1zUjBGQlJ5eERRVUZTTEVWQlFWYzdRVUZEYUVKRExGRkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRkRUaXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZFTEVkQlFVOUxMRU5CUVVNc1NVRkJTVW9zUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCUkN4SFFVRlBSQ3hEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZhTEVOQlFWUXNSVUZCTWtKQkxFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFVUXNSMEZCVDBzc1EwRkJReXhKUVVGSlNpeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU5RUxFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFWb3NRMEZCYmtNc1EwRkJVanRCUVVORU96dEJRVVZFTEdGQlFVOU5MRXRCUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNlVUpCUVhWQ1RpeERRVUYyUWl4RlFVRXdRa01zUTBGQk1VSXNSVUZCTmtJN1FVRkRNMElzWVVGQlR5eERRVUZEUkN4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFZEJRVTlETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1MwRkJhVUpFTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUME1zUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCZWtJc1NVRkJaME1zUTBGQlEwUXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJSQ3hIUVVGUFF5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRlVMRXRCUVdsQ1JDeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU5RExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFYcENMRU5CUVhaRE8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2EwTkJRV2REVFN4UlFVRm9ReXhGUVVFd1F6dEJRVU40UXl4VlFVRkpMRU5CUVVOQkxGRkJRVVFzU1VGQllVRXNVVUZCVVN4RFFVRkRhRVVzVFVGQlZDeEhRVUZyUWl4RFFVRnVReXhGUVVGelF6dEJRVU53UXl4alFVRk5MRWxCUVVrNVFpeExRVUZLTEhkRVFVTTBRemhHTEZGQlJEVkRMR2xFUVVGT08wRkJSMFE3TzBGQlJVUXNWVUZCU1VNc1NVRkJTU3hIUVVGSGJFTXNUVUZCVFN4RFFVRkRiVU1zYVVKQlFXeENPMEZCUTBFc1ZVRkJTVU1zU1VGQlNTeEhRVUZIY0VNc1RVRkJUU3hEUVVGRGJVTXNhVUpCUVd4Q08wRkJRMEVzVlVGQlNVVXNTVUZCU1N4SFFVRkhja01zVFVGQlRTeERRVUZEYzBNc2FVSkJRV3hDTzBGQlEwRXNWVUZCU1VNc1NVRkJTU3hIUVVGSGRrTXNUVUZCVFN4RFFVRkRjME1zYVVKQlFXeENPMEZCUlVGTUxFMUJRVUZCTEZGQlFWRXNRMEZCUTJwRkxFOUJRVlFzUTBGQmFVSXNWVUZCUVhkRkxFTkJRVU1zUlVGQlNUdEJRVU53UWs0c1VVRkJRVUVzU1VGQlNTeEhRVUZIVFN4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFZEJRVTlPTEVsQlFWQXNSMEZCWTAwc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlppeEhRVUZ4UWs0c1NVRkJOVUk3UVVGRFFVVXNVVUZCUVVFc1NVRkJTU3hIUVVGSFNTeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU5S0xFbEJRVkFzUjBGQlkwa3NRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJaaXhIUVVGeFFrb3NTVUZCTlVJN1FVRkRRVU1zVVVGQlFVRXNTVUZCU1N4SFFVRkhSeXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZFTEVkQlFVOUlMRWxCUVZBc1IwRkJZMGNzUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCWml4SFFVRnhRa2dzU1VGQk5VSTdRVUZEUVVVc1VVRkJRVUVzU1VGQlNTeEhRVUZIUXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFZEJRVTlFTEVsQlFWQXNSMEZCWTBNc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlppeEhRVUZ4UWtRc1NVRkJOVUk3UVVGRFJDeFBRVXhFTzBGQlQwRXNWVUZCVFVVc1JVRkJSU3hIUVVGSFNpeEpRVUZKTEVkQlFVZElMRWxCUVd4Q08wRkJRMEVzVlVGQlRWRXNSVUZCUlN4SFFVRkhTQ3hKUVVGSkxFZEJRVWRJTEVsQlFXeENPMEZCUTBFc1ZVRkJUVThzU1VGQlNTeEhRVUZITEVOQlFVTlVMRWxCUVVrc1IwRkJSMGNzU1VGQlVpeEpRVUZuUWl4RFFVRTNRanRCUVVOQkxGVkJRVTFQTEVsQlFVa3NSMEZCUnl4RFFVRkRVaXhKUVVGSkxFZEJRVWRITEVsQlFWSXNTVUZCWjBJc1EwRkJOMEk3UVVGRFFTeFZRVUZOVFN4SlFVRkpMRWRCUVVkS0xFVkJRVVVzUjBGQlIwTXNSVUZCVEN4SFFVRlZSQ3hGUVVGV0xFZEJRV1ZETEVWQlFUVkNPMEZCUlVFc1ZVRkJUVWtzV1VGQldTeEhRVUZITEVOQlEyNUNZaXhSUVVGUkxFTkJRVU5vUlN4TlFVUlZMRVZCUlc1Q1owVXNVVUZCVVN4RFFVRkRhRVVzVFVGQlZDeEhRVUZyUWl4RFFVWkRMRVZCUjI1Q1owVXNVVUZCVVN4RFFVRkRhRVVzVFVGQlZDeEhRVUZyUWl4RFFVaERMRU5CUVhKQ08wRkJUVUVzVlVGQlRUaEZMR05CUVdNc2VVTkJRMlprTEZGQlJHVXNTVUZGYkVJc1EwRkJRMVVzU1VGQlNTeEhRVUZITEV0QlFVdEZMRWxCUVdJc1JVRkJiVUpFTEVsQlFVa3NSMEZCUjBNc1NVRkJNVUlzUTBGR2EwSXNSVUZIYkVJc1EwRkJRMFlzU1VGQlJDeEZRVUZQUXl4SlFVRkpMRWRCUVVjc1MwRkJTME1zU1VGQmJrSXNRMEZJYTBJc1JVRkpiRUlzUTBGQlEwWXNTVUZCU1N4SFFVRkhMRXRCUVV0RkxFbEJRV0lzUlVGQmJVSkVMRWxCUVVrc1IwRkJSME1zU1VGQk1VSXNRMEZLYTBJc1JVRkJjRUk3UVVGUFFTeFZRVUZOUnl4clFrRkJhMElzUjBGQlJ6VkNMRk5CUVZNc1EwRkJRelpDTEdGQlFWWXNRMEZEZWtKSUxGbEJSSGxDTEVWQlJYcENReXhqUVVaNVFpeERRVUV6UWp0QlFVdEJMRlZCUVUxSExHRkJRV0VzUjBGQlJ6dEJRVU53UWtNc1VVRkJRVUVzVDBGQlR5eEZRVUZGU0N4clFrRkVWenRCUVVWd1Fra3NVVUZCUVVFc1MwRkJTeXhGUVVGRkxFTkJRMHdzUTBGQlEwb3NhMEpCUVd0Q0xFTkJRVU1zUTBGQlJDeERRVUZ1UWl4RlFVRjNRa0VzYTBKQlFXdENMRU5CUVVNc1EwRkJSQ3hEUVVFeFF5eERRVVJMTEVWQlJVd3NRMEZCUTBFc2EwSkJRV3RDTEVOQlFVTXNRMEZCUkN4RFFVRnVRaXhGUVVGM1FrRXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlJDeERRVUV4UXl4RFFVWkxMRVZCUjB3c1EwRkJRMEVzYTBKQlFXdENMRU5CUVVNc1EwRkJSQ3hEUVVGdVFpeEZRVUYzUWtFc2EwSkJRV3RDTEVOQlFVTXNRMEZCUkN4RFFVRXhReXhEUVVoTE8wRkJSbUVzVDBGQmRFSTdRVUZUUVN4VlFVRk5TeXhUUVVGVExFZEJRVWNzUTBGQlEwZ3NZVUZCUkN4RFFVRnNRanRCUVVWQlNDeE5RVUZCUVN4alFVRmpMRU5CUVVNdlJTeFBRVUZtTEVOQlFYVkNMRlZCUVVOelJpeFBRVUZFTEVWQlFWVkRMRkZCUVZZc1JVRkJkVUk3UVVGRE5VTXNXVUZCVFVNc1owSkJRV2RDTEVkQlFVY3NSVUZCZWtJN1FVRkRRVWdzVVVGQlFVRXNVMEZCVXl4RFFVRkRja1lzVDBGQlZpeERRVUZyUWl4VlFVRkJlVVlzVVVGQlVTeEZRVUZKTzBGQlF6VkNMR05CUTBWeVF5eFRRVUZUTEVOQlFVTnpReXh4UWtGQlZpeERRVU5GV0N4alFVRmpMRU5CUVVOVkxGRkJRVkVzUTBGQlEwNHNUMEZCVkN4RFFVRnBRaXhEUVVGcVFpeERRVUZFTEVOQlJHaENMRVZCUlVWS0xHTkJRV01zUTBGQlExVXNVVUZCVVN4RFFVRkRUaXhQUVVGVUxFTkJRV2xDTEVOQlFXcENMRU5CUVVRc1EwRkdhRUlzUlVGSFJVb3NZMEZCWXl4RFFVRkRWU3hSUVVGUkxFTkJRVU5PTEU5QlFWUXNRMEZCYVVJc1EwRkJha0lzUTBGQlJDeERRVWhvUWl4RlFVbEZSeXhQUVVwR0xFTkJSRVlzUlVGUFJUdEJRVU5CUlN4WlFVRkJRU3huUWtGQlowSXNRMEZCUTBjc1NVRkJha0lzUTBGQmMwSkdMRkZCUVhSQ08wRkJRMFE3UVVGRFJpeFRRVmhFTzBGQllVRXNXVUZCVFVjc1dVRkJXU3hIUVVGSExFVkJRWEpDTzBGQlEwRktMRkZCUVVGQkxHZENRVUZuUWl4RFFVRkRlRVlzVDBGQmFrSXNRMEZCZVVJc1ZVRkJRWGxHTEZGQlFWRXNSVUZCU1R0QlFVTnVRMEVzVlVGQlFVRXNVVUZCVVN4RFFVRkRUQ3hMUVVGVUxFTkJRV1Z3Uml4UFFVRm1MRU5CUVhWQ0xGVkJRVUUyUml4SlFVRkpMRVZCUVVrN1FVRkROMElzWjBKQlFVbERMRXRCUVVzc1IwRkJSeXhEUVVGYU8wRkJRMEZPTEZsQlFVRkJMR2RDUVVGblFpeERRVUZEZUVZc1QwRkJha0lzUTBGQmVVSXNWVUZCUVN0R0xHRkJRV0VzUlVGQlNUdEJRVU40UXl4clFrRkJTVTRzVVVGQlVTeExRVUZMVFN4aFFVRnFRaXhGUVVGblF6dEJRVU01UWtFc1owSkJRVUZCTEdGQlFXRXNRMEZCUTFnc1MwRkJaQ3hEUVVGdlFuQkdMRTlCUVhCQ0xFTkJRVFJDTEZWQlFVRm5SeXhUUVVGVExFVkJRVWs3UVVGRGRrTXNjMEpCUTBkSUxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFVb3NTMEZCV1Vjc1UwRkJVeXhEUVVGRExFTkJRVVFzUTBGQmNrSXNTVUZCTkVKSUxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFVb3NTMEZCV1Vjc1UwRkJVeXhEUVVGRExFTkJRVVFzUTBGQmJFUXNTVUZEUTBnc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeExRVUZaUnl4VFFVRlRMRU5CUVVNc1EwRkJSQ3hEUVVGeVFpeEpRVUUwUWtnc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeExRVUZaUnl4VFFVRlRMRU5CUVVNc1EwRkJSQ3hEUVVad1JDeEZRVWRGTzBGQlEwRkdMRzlDUVVGQlFTeExRVUZMTEVsQlFVa3NRMEZCVkR0QlFVTkVPMEZCUTBZc2FVSkJVRVE3UVVGUlJEdEJRVU5HTEdGQldFUTdRVUZaUVN4blFrRkJTVUVzUzBGQlN5eExRVUZMTEVOQlFXUXNSVUZCYVVKR0xGbEJRVmtzUTBGQlEwUXNTVUZCWWl4RFFVRnJRa1VzU1VGQmJFSTdRVUZEYkVJc1YwRm1SRHRCUVdkQ1JDeFRRV3BDUkR0QlFXMUNRVXdzVVVGQlFVRXNaMEpCUVdkQ0xFTkJRVU40Uml4UFFVRnFRaXhEUVVGNVFpeFZRVUZCZVVZc1VVRkJVU3hGUVVGSk8wRkJRMjVEU2l4VlFVRkJRU3hUUVVGVExFTkJRVU5aTEUxQlFWWXNRMEZCYVVKYUxGTkJRVk1zUTBGQlEyRXNUMEZCVml4RFFVRnJRbFFzVVVGQmJFSXNRMEZCYWtJc1JVRkJPRU1zUTBGQk9VTTdRVUZEUkN4VFFVWkVPMEZCU1VGSExGRkJRVUZCTEZsQlFWa3NRMEZCUXpWR0xFOUJRV0lzUTBGQmNVSXNWVUZCUVRaR0xFbEJRVWtzUlVGQlNUdEJRVU16UWl4alFVRk5UU3hoUVVGaExFZEJRVWN2UXl4VFFVRlRMRU5CUVVNMlFpeGhRVUZXTEVOQlEzQkNMRU5CUVVOWkxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFVd3NSVUZCVlVFc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlpDeEZRVUZ0UWs0c1VVRkJia0lzUTBGRWIwSXNSVUZGY0VKU0xHTkJSbTlDTEVOQlFYUkNPMEZCUzBGTkxGVkJRVUZCTEZOQlFWTXNRMEZCUTAwc1NVRkJWaXhEUVVGbE8wRkJRMkpTTEZsQlFVRkJMRTlCUVU4c1JVRkJSV2RDTEdGQlJFazdRVUZGWW1Zc1dVRkJRVUVzUzBGQlN5eEZRVUZGTEVOQlEwd3NRMEZCUTJVc1lVRkJZU3hEUVVGRExFTkJRVVFzUTBGQlpDeEZRVUZ0UWtFc1lVRkJZU3hEUVVGRExFTkJRVVFzUTBGQmFFTXNRMEZFU3l4RlFVVk1MRU5CUVVOQkxHRkJRV0VzUTBGQlF5eERRVUZFTEVOQlFXUXNSVUZCYlVKQkxHRkJRV0VzUTBGQlF5eERRVUZFTEVOQlFXaERMRU5CUmtzc1JVRkhUQ3hEUVVGRFFTeGhRVUZoTEVOQlFVTXNRMEZCUkN4RFFVRmtMRVZCUVcxQ1FTeGhRVUZoTEVOQlFVTXNRMEZCUkN4RFFVRm9ReXhEUVVoTE8wRkJSazBzVjBGQlpqdEJRVkZFTEZOQlpFUTdRVUZsUkN4UFFYUkVSRHRCUVhkRVFTeFZRVUZOUXl4cFFrRkJhVUlzUjBGQlJ5eEZRVUV4UWp0QlFVTkJaaXhOUVVGQlFTeFRRVUZUTEVOQlFVTnlSaXhQUVVGV0xFTkJRV3RDTEZWQlFVRjVSaXhSUVVGUkxFVkJRVWs3UVVGRE5VSkJMRkZCUVVGQkxGRkJRVkVzUTBGQlEwNHNUMEZCVkN4RFFVRnBRbTVHTEU5QlFXcENMRU5CUVhsQ0xGVkJRVUZUTEV0QlFVc3NSVUZCU1R0QlFVTm9ReXhqUVVGSmNVVXNXVUZCV1N4RFFVRkRkRVFzVVVGQllpeERRVUZ6UW1Zc1MwRkJkRUlzUTBGQlNpeEZRVUZyUXp0QlFVTm9RekpHTEZsQlFVRkJMR2xDUVVGcFFpeERRVUZEVkN4SlFVRnNRaXhEUVVGMVFrWXNVVUZCZGtJN1FVRkRSRHRCUVVOR0xGTkJTa1E3UVVGTFJDeFBRVTVFTzBGQlVVRlhMRTFCUVVGQkxHbENRVUZwUWl4RFFVRkRjRWNzVDBGQmJFSXNRMEZCTUVJc1ZVRkJRWGxHTEZGQlFWRXNSVUZCU1R0QlFVTndReXhaUVVGTmFFWXNTMEZCU3l4SFFVRkhORVVzVTBGQlV5eERRVUZEWVN4UFFVRldMRU5CUVd0Q1ZDeFJRVUZzUWl4RFFVRmtPenRCUVVOQkxGbEJRVWxvUml4TFFVRkxMRXRCUVVzc1EwRkJReXhEUVVGbUxFVkJRV3RDTzBGQlEyaENORVVzVlVGQlFVRXNVMEZCVXl4RFFVRkRXU3hOUVVGV0xFTkJRV2xDZUVZc1MwRkJha0lzUlVGQmQwSXNRMEZCZUVJN1FVRkRSRHRCUVVOR0xFOUJURVE3UVVGUFFTeGhRVUZQTkVVc1UwRkJVeXhEUVVGRFowSXNSMEZCVml4RFFVRmpMRlZCUVVGYUxGRkJRVkU3UVVGQlFTeGxRVUZKUVN4UlFVRlJMRU5CUVVOT0xFOUJRV0k3UVVGQlFTeFBRVUYwUWl4RFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3dyUWtGQk5rSjZRaXhEUVVFM1FpeEZRVUZuUTBNc1EwRkJhRU1zUlVGQmJVTTNReXhEUVVGdVF5eEZRVUZ6UXpoRExFTkJRWFJETEVWQlFYbERPMEZCUTNaRExGVkJRVTB3UXl4RlFVRkZMRWRCUVVjMVF5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU5RkxFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFXNUNPMEZCUTBFc1ZVRkJUVEpETEVWQlFVVXNSMEZCUnpkRExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFVUXNSMEZCVDBVc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQmJrSTdRVUZEUVN4VlFVRk5ORU1zUlVGQlJTeEhRVUZITjBNc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlJDeEhRVUZQUXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGdVFqdEJRVU5CTEZWQlFVMDJReXhGUVVGRkxFZEJRVWM1UXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFZEJRVTlETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVc1Q08wRkJRMEVzVlVGQlRUaERMRVZCUVVVc1IwRkJSelZHTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUemhETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVc1Q08wRkJRMEVzVlVGQlRTdERMRVZCUVVVc1IwRkJSemRHTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUemhETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVc1Q08wRkJSVUVzWVVGRFJTeERRVUZETUVNc1JVRkJSU3hIUVVGSFFTeEZRVUZNTEVkQlFWVkRMRVZCUVVVc1IwRkJSMEVzUlVGQmFFSXNTMEZCZFVKRExFVkJRVVVzUjBGQlIwY3NSVUZCVEN4SFFVRlZSQ3hGUVVGRkxFZEJRVWRFTEVWQlFYUkRMRWxCUTBVc1EwRkJRMFFzUlVGQlJTeEhRVUZIUVN4RlFVRk1MRWRCUVZWRExFVkJRVVVzUjBGQlIwRXNSVUZCYUVJc1MwRkJkVUpJTEVWQlFVVXNSMEZCUjBzc1JVRkJUQ3hIUVVGVlJDeEZRVUZGTEVkQlFVZElMRVZCUVhSRExFTkJSRVlzUjBGRlJTeERRVUZEUnl4RlFVRkZMRWRCUVVkQkxFVkJRVXdzUjBGQlZVTXNSVUZCUlN4SFFVRkhRU3hGUVVGb1FpeExRVUYxUWt3c1JVRkJSU3hIUVVGSFJ5eEZRVUZNTEVkQlFWVkVMRVZCUVVVc1IwRkJSMFFzUlVGQmRFTXNRMEZHUml4SFFVZEJMRU5CU2tZN1FVRk5SRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc01rSkJRWGxDTjBNc1EwRkJla0lzUlVGQk5FSkRMRU5CUVRWQ0xFVkJRU3RDTjBNc1EwRkJMMElzUlVGQmEwTTRReXhEUVVGc1F5eEZRVUZ4UXp0QlFVTnVReXhWUVVGTlowUXNTMEZCU3l4SFFVRkhMRU5CUVVOcVJDeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU4M1F5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRlVMRXRCUVdsQ05FTXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJSQ3hIUVVGUE5VTXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJla0lzU1VGQlowTXNRMEZCUTBFc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlJDeEhRVUZQTmtNc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlZDeExRVUZwUWtRc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQlJDeEhRVUZQTlVNc1EwRkJReXhEUVVGRExFTkJRVVFzUTBGQmVrSXNRMEZCT1VNN1FVRkRRU3hWUVVGTkswWXNTVUZCU1N4SFFVTlNMRU5CUVVNc1EwRkJRMnhFTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUemRETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1MwRkJhVUk0UXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFZEJRVTg1UXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGNlFpeEpRVUZuUXl4RFFVRkRRU3hEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZFTEVkQlFVODJReXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZVTEV0QlFXbENReXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZFTEVkQlFVODVReXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUY2UWl4RFFVRnFReXhKUVVGclJUaEdMRXRCUkhCRk8wRkJSVUVzVlVGQlRVVXNTVUZCU1N4SFFVTlNMRU5CUVVNc1EwRkJRMmhITEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUelJETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1MwRkJhVUpGTEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVVRc1IwRkJUemxETEVOQlFVTXNRMEZCUXl4RFFVRkVMRU5CUVhwQ0xFbEJRV2RETEVOQlFVTTBReXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZFTEVkQlFVODFReXhEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZVTEV0QlFXbENPRU1zUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCUkN4SFFVRlBPVU1zUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCZWtJc1EwRkJha01zU1VGQmEwVTRSaXhMUVVSd1JUdEJRVVZCTEZWQlFVMUhMRWxCUVVrc1IwRkJSeXhKUVVGSlJpeEpRVUZLTEVkQlFWZERMRWxCUVhoQ08wRkJSVUVzWVVGRFJVUXNTVUZCU1N4SlFVRkpMRU5CUVZJc1NVRkJZVUVzU1VGQlNTeEpRVUZKTEVOQlFYSkNMRWxCUVRCQ1F5eEpRVUZKTEVsQlFVa3NRMEZCYkVNc1NVRkJkVU5CTEVsQlFVa3NTVUZCU1N4RFFVRXZReXhKUVVGdlJFTXNTVUZCU1N4SlFVRkpMRU5CUVRWRUxFbEJRV2xGUVN4SlFVRkpMRWxCUVVrc1EwRkVNMFU3UVVGSFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxIVkNRVUZ4UWpWQ0xFOUJRWEpDTEVWQlFUaENiRUlzVVVGQk9VSXNSVUZCZDBNN1FVRkRkRU1zVlVGQlRTdERMRkZCUVZFc1IwRkJSeXhEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVOQlFXcENPMEZCUTBFM1FpeE5RVUZCUVN4UFFVRlBMRU5CUVVOdVJpeFBRVUZTTEVOQlFXZENMRlZCUVVGVExFdEJRVXNzUlVGQlNUdEJRVU4yUW5WSExGRkJRVUZCTEZGQlFWRXNRMEZCUXl4RFFVRkVMRU5CUVZJc1NVRkJaUzlETEZGQlFWRXNRMEZCUTNoRUxFdEJRVVFzUTBGQlVpeERRVUZuUWl4RFFVRm9RaXhEUVVGbU8wRkJRMEYxUnl4UlFVRkJRU3hSUVVGUkxFTkJRVU1zUTBGQlJDeERRVUZTTEVsQlFXVXZReXhSUVVGUkxFTkJRVU40UkN4TFFVRkVMRU5CUVZJc1EwRkJaMElzUTBGQmFFSXNRMEZCWmp0QlFVTkVMRTlCU0VRN1FVRkpRWFZITEUxQlFVRkJMRkZCUVZFc1EwRkJReXhEUVVGRUxFTkJRVklzU1VGQlpUZENMRTlCUVU4c1EwRkJRMnhHTEUxQlFYWkNPMEZCUTBFclJ5eE5RVUZCUVN4UlFVRlJMRU5CUVVNc1EwRkJSQ3hEUVVGU0xFbEJRV1UzUWl4UFFVRlBMRU5CUVVOc1JpeE5RVUYyUWp0QlFVVkJhMFlzVFVGQlFVRXNUMEZCVHl4RFFVRkRPRUlzU1VGQlVpeERRVUZoTEZWQlFVTjJSQ3hEUVVGRUxFVkJRVWxETEVOQlFVb3NSVUZCVlR0QlFVTnlRaXhaUVVGTmJVUXNTVUZCU1N4SFFVRkhPVVlzU1VGQlNTeERRVUZEYTBjc1MwRkJUQ3hEUVVOWWFrUXNVVUZCVVN4RFFVRkRUaXhEUVVGRUxFTkJRVklzUTBGQldTeERRVUZhTEVsQlFXbENjVVFzVVVGQlVTeERRVUZETEVOQlFVUXNRMEZFWkN4RlFVVllMME1zVVVGQlVTeERRVUZEVGl4RFFVRkVMRU5CUVZJc1EwRkJXU3hEUVVGYUxFbEJRV2xDY1VRc1VVRkJVU3hEUVVGRExFTkJRVVFzUTBGR1pDeERRVUZpTzBGQlNVRXNXVUZCVFVnc1NVRkJTU3hIUVVGSE4wWXNTVUZCU1N4RFFVRkRhMGNzUzBGQlRDeERRVU5ZYWtRc1VVRkJVU3hEUVVGRFVDeERRVUZFTEVOQlFWSXNRMEZCV1N4RFFVRmFMRWxCUVdsQ2MwUXNVVUZCVVN4RFFVRkRMRU5CUVVRc1EwRkVaQ3hGUVVWWUwwTXNVVUZCVVN4RFFVRkRVQ3hEUVVGRUxFTkJRVklzUTBGQldTeERRVUZhTEVsQlFXbENjMFFzVVVGQlVTeERRVUZETEVOQlFVUXNRMEZHWkN4RFFVRmlPMEZCUzBFc1pVRkJUMGdzU1VGQlNTeEhRVUZIUXl4SlFVRmtPMEZCUTBRc1QwRllSRHRCUVdGQkxHRkJRVTh6UWl4UFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNjMEpCUVc5Q2VrSXNRMEZCY0VJc1JVRkJkVUpETEVOQlFYWkNMRVZCUVRCQ04wTXNRMEZCTVVJc1JVRkJOa0k3UVVGRE0wSXNZVUZCVDBVc1NVRkJTU3hEUVVGRGJVY3NSMEZCVEN4RFFVTk1MRU5CUVVONlJDeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWxCUVZGRExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFVUXNSMEZCVHpkRExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFXaENMRWxCUVhWQ05rTXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJSQ3hKUVVGUk4wTXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJSQ3hIUVVGUE5FTXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJhRUlzUTBGQmRrSXNSMEZCT0VNMVF5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWxCUVZFMFF5eERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkVMRWRCUVU5RExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFXaENMRU5CUVM5RExFbEJRWFZGTEVkQlJHeEZMRU5CUVZBN1FVRkhSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNORUpCUVRCQ2VVUXNUVUZCTVVJc1JVRkJhME03UVVGRGFFTXNWVUZCU1N4RlFVRkZRU3hOUVVGTkxGbEJRVmxETEV0QlFYQkNMRU5CUVVvc1JVRkJaME03UVVGRE9VSXNZMEZCVFN4SlFVRkpiRW9zUzBGQlNpd3lRMEZESzBKcFNpeE5RVVF2UWl4MVEwRkJUanRCUVVkRU96dEJRVVZFTEZWQlFVMUZMRTlCUVU4c1IwRkJSeXhUUVVGV1FTeFBRVUZWTEVOQlFVTkRMRmRCUVVRc1JVRkJZME1zV1VGQlpDeEZRVUVyUWp0QlFVTTNReXhaUVVGSkxFOUJRVTlCTEZsQlFWQXNTMEZCZDBJc1VVRkJOVUlzUlVGQmMwTTdRVUZEY0VNc1owSkJRVTBzU1VGQlNYSktMRXRCUVVvc01rTkJReXRDYVVvc1RVRkVMMElzY1VSQlFVNDdRVUZIUkRzN1FVRkZSQ3hsUVVGUFJ5eFhRVUZYTEZsQlFVbERMRmxCUVVvc1JVRkJiMElzUTBGQmNFSXNRMEZCYkVJN1FVRkRSQ3hQUVZKRU96dEJRVlZCTEdGQlFVOTRSeXhKUVVGSkxFTkJRVU41Unl4SlFVRk1MRU5CUVZWTUxFMUJRVTBzUTBGQlEwMHNUVUZCVUN4RFFVRmpTaXhQUVVGa0xFVkJRWFZDTEVOQlFYWkNMRU5CUVZZc1EwRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSFZDUVVGeFFrc3NUMEZCY2tJc1JVRkJPRUpETEU5QlFUbENMRVZCUVhWRE8wRkJRM0pETEZWQlFVa3NSVUZCUlVRc1QwRkJUeXhaUVVGWlRpeExRVUZ5UWl4TFFVRXJRaXhGUVVGRlR5eFBRVUZQTEZsQlFWbFFMRXRCUVhKQ0xFTkJRUzlDTEVsQlFUaEVUU3hQUVVGUExFTkJRVU14U0N4TlFVRlNMRXRCUVcxQ01rZ3NUMEZCVHl4RFFVRkRNMGdzVFVGQk4wWXNSVUZCY1VjN1FVRkRia2NzWTBGQlRTeEpRVUZKT1VJc1MwRkJTaXd3UTBGQk5FTjNTaXhQUVVFMVF5eHJRa0ZCTWtSRExFOUJRVE5FTEd0RVFVRk9PMEZCUTBRN08wRkJSVVFzVlVGQlNTOUlMRTFCUVUwc1IwRkJSeXhEUVVGaU8wRkJRMEU0U0N4TlFVRkJRU3hQUVVGUExFTkJRVU16U0N4UFFVRlNMRU5CUVdkQ0xGVkJRVU0yU0N4TlFVRkVMRVZCUVZOd1NDeExRVUZVTEVWQlFXMUNPMEZCUTJwRExGbEJRVTF4U0N4TlFVRk5MRWRCUVVkR0xFOUJRVThzUTBGQlEyNUlMRXRCUVVRc1EwRkJkRUk3TzBGQlJVRXNXVUZCU1N4UFFVRlBiMGdzVFVGQlVDeExRVUZyUWl4UlFVRnNRaXhKUVVFNFFpeFBRVUZQUXl4TlFVRlFMRXRCUVd0Q0xGRkJRWEJFTEVWQlFUaEVPMEZCUXpWRUxHZENRVUZOTEVsQlFVa3pTaXhMUVVGS0xEQkRRVUUwUTNkS0xFOUJRVFZETEd0Q1FVRXlSRU1zVDBGQk0wUXNiMFJCUVU0N1FVRkRSRHM3UVVGRlJDOUlMRkZCUVVGQkxFMUJRVTBzU1VGQlNXZEpMRTFCUVUwc1IwRkJSME1zVFVGQmJrSTdRVUZEUkN4UFFWSkVPMEZCVlVFc1lVRkJUMnBKTEUxQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeDVRa0ZCZFVJNFNDeFBRVUYyUWl4RlFVRm5RME1zVDBGQmFFTXNSVUZCZVVNN1FVRkRka01zVlVGQlRVY3NUMEZCVHl4SFFVRkhMRXRCUVV0RExHVkJRVXdzTmtKQlFYbENUQ3hQUVVGNlFpeEZRVUZvUWp0QlFVTkJMRlZCUVUxTkxFOUJRVThzUjBGQlJ5eExRVUZMUkN4bFFVRk1MRFpDUVVGNVFrb3NUMEZCZWtJc1JVRkJhRUk3UVVGRFFTeFZRVUZOVFN4SFFVRkhMRWRCUVVjc1MwRkJTME1zWVVGQlRDeERRVUZ0UWtvc1QwRkJia0lzUlVGQk5FSkZMRTlCUVRWQ0xFTkJRVm83UVVGRlFTeGhRVUZQYWtnc1NVRkJTU3hEUVVGRGIwZ3NTVUZCVEN4RFFVRlZMRXRCUVV0RExFdEJRVXdzUTBGQlYwZ3NSMEZCV0N4RlFVRm5RaXhEUVVGRExFTkJRV3BDTEVWQlFXOUNMRU5CUVhCQ0xFTkJRVllzUTBGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhOQ1FVRnZRa2tzVDBGQmNFSXNSVUZCTmtKRExFOUJRVGRDTEVWQlFYTkRPMEZCUTNCRExGVkJRVWtzUlVGQlJVUXNUMEZCVHl4WlFVRlpha0lzUzBGQmNrSXNTMEZEUTJsQ0xFOUJRVThzUTBGQlEzSkpMRTFCUVZJc1MwRkJiVUlzUTBGRWNFSXNTVUZGUXl4RFFVRkRjVWtzVDBGQlR5eERRVUZEUlN4TFFVRlNMRU5CUVdNc1ZVRkJRV2hGTEVOQlFVTTdRVUZCUVN4bFFVRkpMRTlCUVU5QkxFTkJRVkFzUzBGQllTeFJRVUZxUWp0QlFVRkJMRTlCUVdZc1EwRkdUaXhGUVVWcFJEdEJRVU12UXl4alFVRk5MRWxCUVVseVJ5eExRVUZLTEdkRFFVTnZRbTFMTEU5QlJIQkNMR2xEUVVOclJFTXNUMEZFYkVRc2JVUkJRVTQ3UVVGSFJEczdRVUZGUkN4VlFVRkpMRVZCUVVWQkxFOUJRVThzV1VGQldXeENMRXRCUVhKQ0xFdEJRME5yUWl4UFFVRlBMRU5CUVVOMFNTeE5RVUZTTEV0QlFXMUNMRU5CUkhCQ0xFbEJSVU1zUTBGQlEzTkpMRTlCUVU4c1EwRkJRME1zUzBGQlVpeERRVUZqTEZWQlFVRm9SU3hEUVVGRE8wRkJRVUVzWlVGQlNTeFBRVUZQUVN4RFFVRlFMRXRCUVdFc1VVRkJha0k3UVVGQlFTeFBRVUZtTEVOQlJrNHNSVUZGYVVRN1FVRkRMME1zWTBGQlRTeEpRVUZKY2tjc1MwRkJTaXhuUTBGRGIwSnRTeXhQUVVSd1FpeHBRMEZEYTBSRExFOUJSR3hFTEc5RVFVRk9PMEZCUjBRN08wRkJSVVFzVlVGQlRVVXNRMEZCUXl4SFFVRkhSaXhQUVVGUExFTkJRVU1zUTBGQlJDeERRVUZRTEVkQlFXRkVMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRWEJDTEVkQlEwNURMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRVkFzUjBGQllVUXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkVaQ3hIUVVWT1F5eFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRWRCUVdGRUxFOUJRVThzUTBGQlF5eERRVUZFTEVOQlJuaENPMEZCUjBFc1ZVRkJUVWtzUTBGQlF5eEhRVUZIU0N4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGUUxFZEJRV0ZFTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVhCQ0xFZEJRMDVETEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVZBc1IwRkJZVVFzVDBGQlR5eERRVUZETEVOQlFVUXNRMEZFWkN4SFFVVk9ReXhQUVVGUExFTkJRVU1zUTBGQlJDeERRVUZRTEVkQlFXRkVMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJSbmhDTzBGQlIwRXNWVUZCVFVzc1EwRkJReXhIUVVGSFNpeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRWRCUVdGRUxFOUJRVThzUTBGQlF5eERRVUZFTEVOQlFYQkNMRWRCUTA1RExFOUJRVThzUTBGQlF5eERRVUZFTEVOQlFWQXNSMEZCWVVRc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGRVpDeEhRVVZPUXl4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGUUxFZEJRV0ZFTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUm5oQ08wRkJTVUVzWVVGQlR5eERRVUZEUnl4RFFVRkVMRVZCUVVsRExFTkJRVW9zUlVGQlQwTXNRMEZCVUN4RFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhsQ1FVRjFRblpDTEUxQlFYWkNMRVZCUVN0Q08wRkJRemRDTEZWQlFVMTNRaXhUUVVGVExFZEJRVWNzUzBGQlMwTXNhMEpCUVV3c1EwRkJkMEo2UWl4TlFVRjRRaXhEUVVGc1FqczdRVUZGUVN4VlFVRkpkMElzVTBGQlV5eExRVUZMTEVOQlFXeENMRVZCUVhGQ08wRkJRMjVDZUVJc1VVRkJRVUVzVFVGQlRTeERRVUZETUVJc1NVRkJVQ3hEUVVGWkxFTkJRVm83UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVERGQ0xGRkJRVUZCTEUxQlFVMHNRMEZCUTNCSUxFOUJRVkFzUTBGQlpTeFZRVUZEYkVJc1MwRkJSQ3hGUVVGUk1rSXNTMEZCVWl4RlFVRnJRanRCUVVNdlFqSkhMRlZCUVVGQkxFMUJRVTBzUTBGQlF6TkhMRXRCUVVRc1EwRkJUaXhIUVVGblFqTkNMRXRCUVVzc1IwRkJSemhLTEZOQlFYaENPMEZCUTBRc1UwRkdSRHRCUVVkRU96dEJRVVZFTEdGQlFVOTRRaXhOUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3d5UWtGQmVVSXlRaXhQUVVGNlFpeEZRVUZyUXp0QlFVTm9ReXhWUVVGSkxFVkJRVVZCTEU5QlFVOHNXVUZCV1RGQ0xFdEJRWEpDTEV0QlEwTXdRaXhQUVVGUExFTkJRVU01U1N4TlFVRlNMRXRCUVcxQ0xFVkJSSEJDTEVsQlJVTXNRMEZCUXpoSkxFOUJRVThzUTBGQlExQXNTMEZCVWl4RFFVRmpMRlZCUVVGb1JTeERRVUZETzBGQlFVRXNaVUZCU1N4UFFVRlBRU3hEUVVGUUxFdEJRV0VzVVVGQmFrSTdRVUZCUVN4UFFVRm1MRU5CUms0c1JVRkZhVVE3UVVGREwwTXNZMEZCVFN4SlFVRkpja2NzUzBGQlNpeHBRMEZEY1VJMFN5eFBRVVJ5UWl4NVJVRkJUanRCUVVkRUxFOUJVQ3RDTEVOQlUyaERPenM3UVVGRFFTeFZRVUZOUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhMUVVGTFNDeHJRa0ZCVEN4RFFVRjNRa1VzVDBGQlR5eERRVUZEYWtnc1MwRkJVaXhEUVVGakxFTkJRV1FzUlVGQmFVSXNRMEZCYWtJc1EwRkJlRUlzUzBGQlowUXNRMEZCY2tRc1EwRkJaanRCUVVOQkxGVkJRVTF0U0N4TlFVRk5MRWRCUVVjc1MwRkJTeXhMUVVGTFNpeHJRa0ZCVEN4RFFVRjNRa1VzVDBGQlR5eERRVUZEYWtnc1MwRkJVaXhEUVVGakxFTkJRV1FzUlVGQmFVSXNRMEZCYWtJc1EwRkJlRUlzUzBGQlowUXNRMEZCY2tRc1EwRkJaanRCUVVOQkxGVkJRVTF2U0N4TlFVRk5MRWRCUVVjc1MwRkJTeXhMUVVGTFRDeHJRa0ZCVEN4RFFVRjNRa1VzVDBGQlR5eERRVUZEYWtnc1MwRkJVaXhEUVVGakxFTkJRV1FzUlVGQmFVSXNSVUZCYWtJc1EwRkJlRUlzUzBGQmFVUXNRMEZCZEVRc1EwRkJaanRCUVVWQkxHRkJRVThzUTBGRFRHbElMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRVkFzUjBGQllVTXNUVUZFVWl4RlFVTm5Ra1FzVDBGQlR5eERRVUZETEVOQlFVUXNRMEZCVUN4SFFVRmhReXhOUVVRM1FpeEZRVU54UTBRc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoUXl4TlFVUnNSQ3hGUVVWTVJDeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRWRCUVdGRkxFMUJSbElzUlVGRlowSkdMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRVkFzUjBGQllVVXNUVUZHTjBJc1JVRkZjVU5HTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVZBc1IwRkJZVVVzVFVGR2JFUXNSVUZIVEVZc1QwRkJUeXhEUVVGRExFTkJRVVFzUTBGQlVDeEhRVUZoUnl4TlFVaFNMRVZCUjJkQ1NDeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRWRCUVdGSExFMUJTRGRDTEVWQlIzRkRTQ3hQUVVGUExFTkJRVU1zUlVGQlJDeERRVUZRTEVkQlFXTkhMRTFCU0c1RUxFTkJRVkE3UVVGTFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3NFFrRkJORUpVTEVOQlFUVkNMRVZCUVN0Q1F5eERRVUV2UWl4RlFVRnJRME1zUTBGQmJFTXNSVUZCY1VNN1FVRkRia01zVlVGQlRWRXNRMEZCUXl4SFFVRkhMRXRCUVV0T0xHdENRVUZNTEVOQlFYZENMRU5CUVVOS0xFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RlFVRlBReXhEUVVGUUxFTkJRWGhDTEVOQlFWWXNRMEZFYlVNc1EwRkhia003TzBGQlEwRXNWVUZCU1ZFc1EwRkJReXhMUVVGTExFTkJRVllzUlVGQllUdEJRVU5ZTEdWQlFVOHNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUTBGQlVEdEJRVU5FT3p0QlFVVkVMR0ZCUVU4c1EwRkRURUVzUTBGRVN5eEZRVVZNYmtrc1NVRkJTU3hEUVVGRGIwZ3NTVUZCVEN4RFFVRlZMRXRCUVV0RExFdEJRVXdzUTBGQlYwc3NRMEZCUXl4SFFVRkhVeXhEUVVGbUxFVkJRV3RDTEVOQlFVVXNRMEZCY0VJc1JVRkJkVUlzUTBGQmRrSXNRMEZCVml4RFFVWkxMRVZCUjB4dVNTeEpRVUZKTEVOQlFVTnJSeXhMUVVGTUxFTkJRVmQxUWl4RFFVRllMRVZCUVdORkxFTkJRV1FzUTBGSVN5eERRVUZRTzBGQlMwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEcxQ1FVTkZia0lzV1VGRVJpeEZRVVZGTkVJc1YwRkdSaXhGUVU5Rk8wRkJRVUVzVlVGS1FVTXNWVUZKUVN4MVJVRktZU3hEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVOQlNXSTdRVUZCUVN4VlFVaEJlRWNzVTBGSFFTeDFSVUZJV1N4SlFVZGFPMEZCUVVFc1ZVRkdRWGxITEZWQlJVRXNkVVZCUm1Fc1IwRkZZanRCUVVGQkxGVkJSRUZETEZGQlEwRXNkVVZCUkZjc1IwRkRXRHRCUVVOQlJDeE5RVUZCUVN4VlFVRlZMRWRCUVVkMFNTeEpRVUZKTEVOQlFVTXJRaXhIUVVGTUxFTkJRVk1zVFVGQlZDeEZRVUZwUW5WSExGVkJRV3BDTEVOQlFXSTdRVUZEUVhwSExFMUJRVUZCTEZOQlFWTXNSMEZCUnpkQ0xFbEJRVWtzUTBGQlF5dENMRWRCUVV3c1EwRkJVeXhKUVVGVUxFVkJRV1ZHTEZOQlFXWXNRMEZCV2l4RFFVWkJMRU5CU1VFN08wRkJRMEVzVlVGQlRUSkhMRk5CUVZNc1IwRkJSMFFzVVVGQlVTeEhRVUZIUkN4VlFVRTNRanRCUVVOQkxGVkJRVTFITEZWQlFWVXNSMEZCUjJwRExGbEJRVmtzUjBGQlJ6UkNMRmRCUVd4RE8wRkJRMEVzVlVGQlRVMHNaVUZCWlN4SFFVRkhMRXRCUVV0eVFpeExRVUZNTEVOQlFWZHZRaXhWUVVGWUxFVkJRWFZDTEVOQlFVTkVMRk5CUVhoQ0xFVkJRVzFEUVN4VFFVRnVReXhEUVVGNFFqdEJRVU5CTEZWQlFVMUhMRk5CUVZNc1IwRkJSMjVETEZsQlFWa3NSMEZCUjJ0RExHVkJRV3BETEVOQlVrRXNRMEZWUVRzN1FVRkRRU3hWUVVGTlJTeEZRVUZGTEVkQlFVY3NTVUZCU1U0c1ZVRkJaanRCUVVOQkxGVkJRVTFQTEVWQlFVVXNSMEZCUjBRc1JVRkJSU3hIUVVGSEwwY3NVMEZCYUVJN1FVRkRRU3hWUVVGTmFVZ3NSVUZCUlN4SFFVRkhMRXRCUVVzc1NVRkJTVVFzUlVGQlNpeEhRVUZUTEdWQlFVMUJMRVZCUVU0c1JVRkJXU3hEUVVGYUxFTkJRVlFzUjBGQmVVSXNaMEpCUVU5QkxFVkJRVkFzUlVGQllTeERRVUZpTEVOQlFUbENMRU5CUVZnN1FVRkRRU3hWUVVGTlJTeEZRVUZGTEVkQlFVY3NRMEZCUTFZc1ZVRkJWU3hEUVVGRExFTkJRVVFzUTBGQlZpeEhRVUZuUWs4c1JVRkJSU3hIUVVGSFJpeGxRVUYwUWl4SlFVRjVRemRITEZOQlFYQkVMRU5CWkVFc1EwRm5Ra0U3TzBGQlEwRjNSeXhOUVVGQlFTeFZRVUZWTEVOQlFVTXNRMEZCUkN4RFFVRldMRWRCUVdkQ1RTeFRRVUZUTEVkQlFVY3NRMEZCUTBRc1pVRkJaU3hIUVVGSFN5eEZRVUZ1UWl4SlFVRjVRa1FzUlVGQmNrUTdRVUZEUVZRc1RVRkJRVUVzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5RaXhEUVVGRFFTeFZRVUZWTEVOQlFVTXNRMEZCUkN4RFFVRldMRWRCUVdkQ1R5eEZRVUZGTEVkQlFVZEhMRVZCUVhSQ0xFbEJRVFJDUkN4RlFVRTFReXhEUVd4Q1FTeERRVzlDUVRzN1FVRkRRU3hWUVVGSlZpeFhRVUZYTEVkQlFVYzFRaXhaUVVGa0xFZEJRVFpDTEVOQlFUZENMRXRCUVcxRE5rSXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJWaXhIUVVGblFrUXNWMEZCZGtRc1JVRkJiMFU3UVVGRGJFVkRMRkZCUVVGQkxGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNSMEZCWjBKRUxGZEJRV2hDTzBGQlEwRkRMRkZCUVVGQkxGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNSMEZCWjBJc1EwRkJRMEVzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5Ra1FzVjBGQmFrSXNTVUZCWjBOMlJ5eFRRVUZvUkR0QlFVTkVPenRCUVVWRUxHRkJRVTkzUnl4VlFVRlFPMEZCUTBRN096czdPenRCUVVkSUxIRkVRVUZsYWtjc1UwRkJaaXhGT3p0QlEzaHJRa0U3UVVGRFFUczdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCVFRSSExFZEJRVWNzUjBGQlJ5eE5RVUZhT3pzN096czdPenM3UVVOVVFUdEJRVU5CT3p0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEpRVU5OUXp0QlFVTktPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5GTEhGQ1FVRlpReXhGUVVGYUxFVkJRV2RDTzBGQlFVRTdPMEZCUTJRc1UwRkJTME1zUjBGQlRDeEhRVUZYUkN4RlFVRkZMRXRCUVV0d1N5eFRRVUZRTEVkQlFXMUNiMHNzUlVGQmJrSXNSMEZCZDBKMFNpeHRRa0ZCUVN4RlFVRnVRenRCUVVOQkxGTkJRVXQ1U2l4WFFVRk1MRWRCUVcxQ1F5eE5RVUZ1UWp0QlFVTkJMRk5CUVV0RExGVkJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hUUVVGTFF5eGxRVUZNTEVkQlFYVkNMRVZCUVhaQ08wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMU5CUTBVc1pVRkJVenRCUVVOUUxHRkJRVThzUzBGQlMwd3NSMEZCV2p0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNOa0pCUVc5Q1RTeFBRVUZ3UWl4RlFVRTJRanRCUVVNelFpeDFRa0ZCVlN4TFFVRkxVQ3hGUVVGbUxHTkJRWEZDVHl4UFFVRnlRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3g1UWtGQlowSkRMRkZCUVdoQ0xFVkJRVEJDTzBGQlEzaENMR0ZCUVU4c1ZVRkJRV3hNTEVOQlFVTXNSVUZCU1R0QlFVTldMRmxCUVVsV0xFdEJRVW83TzBGQlJVRXNXVUZCU1ZVc1EwRkJReXhEUVVGRGJVd3NUVUZCUml4TFFVRmhMRWxCUVdwQ0xFVkJRWFZDTzBGQlEzSkNOMHdzVlVGQlFVRXNTMEZCU3l4SFFVRkhWU3hEUVVGRExFTkJRVU50VEN4TlFVRldPMEZCUTBRN08wRkJSVVJFTEZGQlFVRkJMRkZCUVZFc1EwRkJRelZNTEV0QlFVUXNRMEZCVWp0QlFVTkVMRTlCVWtRN1FVRlRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2MwSkJRV0V5VEN4UFFVRmlMRVZCUVhOQ00wd3NTMEZCZEVJc1JVRkJOa0k3UVVGRE0wSXNZVUZCVHl4SlFVRkpPRXdzVjBGQlNpeERRVUZuUWtnc1QwRkJhRUlzUlVGQmVVSTdRVUZCUTBVc1VVRkJRVUVzVFVGQlRTeEZRVUZGTjB3N1FVRkJWQ3hQUVVGNlFpeERRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYzBKQlFXRXlUQ3hQUVVGaUxFVkJRWE5DU1N4UlFVRjBRaXhGUVVGblF6dEJRVU01UWl4WFFVRkxVaXhYUVVGTUxFTkJRV2xDVXl4blFrRkJha0lzUTBGRFJTeExRVUZMUXl4dFFrRkJUQ3hEUVVGNVFrNHNUMEZCZWtJc1EwRkVSaXhGUVVWRlNTeFJRVVpHTzBGQlNVUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzZVVKQlFXZENTaXhQUVVGb1FpeEZRVUY1UWtrc1VVRkJla0lzUlVGQmJVTTdRVUZEYWtNc1YwRkJTMUlzVjBGQlRDeERRVUZwUWxjc2JVSkJRV3BDTEVOQlEwVXNTMEZCUzBRc2JVSkJRVXdzUTBGQmVVSk9MRTlCUVhwQ0xFTkJSRVlzUlVGRlJVa3NVVUZHUmp0QlFVbEVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYTBKQlFWTktMRTlCUVZRc1JVRkJhMEpETEZGQlFXeENMRVZCUVRSQ08wRkJRekZDTEZWQlFVa3NUMEZCVDBFc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOc1F5eGpRVUZOTEVsQlFVbDJUU3hMUVVGS0xHMURRVU4xUW5OTkxFOUJSSFpDTEdsQ1FVTnhReXhMUVVGTFVDeEZRVVF4UXl4dlEwRkJUanRCUVVkRU96dEJRVVZFTEZWQlFVa3NTMEZCUzBzc1ZVRkJUQ3hEUVVGblFrVXNUMEZCYUVJc1RVRkJOa0l6U3l4VFFVRnFReXhGUVVFMFF6dEJRVU14UXl4aFFVRkxlVXNzVlVGQlRDeERRVUZuUWtVc1QwRkJhRUlzU1VGQk1rSXNSVUZCTTBJN1FVRkRRU3hoUVVGTFJDeGxRVUZNTEVOQlFYRkNReXhQUVVGeVFpeEpRVUZuUXl4RlFVRm9RenRCUVVORU96dEJRVVZFTEZWQlFVMUpMRkZCUVZFc1IwRkJSeXhMUVVGTFNTeGxRVUZNTEVOQlFYRkNVQ3hSUVVGeVFpeERRVUZxUWpzN1FVRkRRU3hYUVVGTFNDeFZRVUZNTEVOQlFXZENSU3hQUVVGb1FpeEZRVUY1UWpsRkxFbEJRWHBDTEVOQlFUaENLMFVzVVVGQk9VSTdPMEZCUTBFc1YwRkJTMFlzWlVGQlRDeERRVUZ4UWtNc1QwRkJja0lzUlVGQk9FSTVSU3hKUVVFNVFpeERRVUZ0UTJ0R0xGRkJRVzVET3p0QlFVVkJMRmRCUVV0TExGbEJRVXdzUTBGQmEwSlVMRTlCUVd4Q0xFVkJRVEpDU1N4UlFVRXpRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSFZDUVVGalNpeFBRVUZrTEVWQlFYVkNReXhSUVVGMlFpeEZRVUZwUXp0QlFVTXZRaXhWUVVGSkxFdEJRVXRJTEZWQlFVd3NRMEZCWjBKRkxFOUJRV2hDTEUxQlFUWkNNMHNzVTBGQmFrTXNSVUZCTkVNN1FVRkRNVU03UVVGRFJDeFBRVVpFTEUxQlJVOHNTVUZCU1RSTExGRkJRVkVzUzBGQlN6VkxMRk5CUVdwQ0xFVkJRVFJDTzBGQlEycERPMEZCUTBFc1lVRkJTeXhKUVVGSmNVd3NRMEZCUXl4SFFVRkhMRXRCUVV0YUxGVkJRVXdzUTBGQlowSkZMRTlCUVdoQ0xFVkJRWGxDZUVzc1RVRkJla0lzUjBGQmEwTXNRMEZCTDBNc1JVRkJhMFJyVEN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGMlJDeEZRVUV3UkVFc1EwRkJReXhGUVVFelJDeEZRVUVyUkR0QlFVTTNSQ3hsUVVGTFF5eGhRVUZNTEVOQlFXMUNXQ3hQUVVGdVFpeEZRVUUwUWl4TFFVRkxSaXhWUVVGTUxFTkJRV2RDUlN4UFFVRm9RaXhGUVVGNVFsVXNRMEZCZWtJc1EwRkJOVUk3UVVGRFJEczdRVUZGUkR0QlFVTkVMRTlCVmpoQ0xFTkJXUzlDT3pzN1FVRkRRU3hWUVVGTk1Vc3NTMEZCU3l4SFFVRkhMRXRCUVVzNFNpeFZRVUZNTEVOQlFXZENSU3hQUVVGb1FpeEZRVUY1UW5aRkxFOUJRWHBDTEVOQlFXbERkMFVzVVVGQmFrTXNRMEZCWkRzN1FVRkRRU3hWUVVGSmFrc3NTMEZCU3l4TFFVRkxMRU5CUVVNc1EwRkJaaXhGUVVGclFqdEJRVU5vUWp0QlFVTkVPenRCUVVWRUxGVkJRVTF2U3l4UlFVRlJMRWRCUVVjc1MwRkJTMHdzWlVGQlRDeERRVUZ4UWtNc1QwRkJja0lzUlVGQk9FSm9TeXhMUVVFNVFpeERRVUZxUWpzN1FVRkRRU3hYUVVGTE5Fc3NaVUZCVEN4RFFVRnhRbG9zVDBGQmNrSXNSVUZCT0VKSkxGRkJRVGxDT3p0QlFVVkJMRmRCUVV0T0xGVkJRVXdzUTBGQlowSkZMRTlCUVdoQ0xFVkJRWGxDZUVVc1RVRkJla0lzUTBGQlowTjRSaXhMUVVGb1F5eEZRVUYxUXl4RFFVRjJRenM3UVVGRFFTeFhRVUZMSzBvc1pVRkJUQ3hEUVVGeFFrTXNUMEZCY2tJc1JVRkJPRUo0UlN4TlFVRTVRaXhEUVVGeFEzaEdMRXRCUVhKRExFVkJRVFJETEVOQlFUVkRPenRCUVVWQkxGVkJRVWtzUzBGQlN6aEtMRlZCUVV3c1EwRkJaMEpGTEU5QlFXaENMRVZCUVhsQ2VFc3NUVUZCZWtJc1MwRkJiME1zUTBGQmVFTXNSVUZCTWtNN1FVRkRla01zWlVGQlR5eExRVUZMYzBzc1ZVRkJUQ3hEUVVGblFrVXNUMEZCYUVJc1EwRkJVRHRCUVVOQkxHVkJRVThzUzBGQlMwUXNaVUZCVEN4RFFVRnhRa01zVDBGQmNrSXNRMEZCVUR0QlFVTkVPMEZCUTBZN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNLMEpCUVhOQ1lTeE5RVUYwUWl4RlFVRTRRbG9zVVVGQk9VSXNSVUZCZDBNN1FVRkJRVHM3UVVGRGRFTXNWVUZCVFdFc1VVRkJVU3hIUVVGSFF5eE5RVUZOTEVOQlFVTkRMRWxCUVZBc1EwRkJXU3hMUVVGTGJFSXNWVUZCYWtJc1JVRkJOa0kxU3l4TlFVRTNRaXhEUVVGdlF5eFZRVUZCT0Vzc1QwRkJUenRCUVVGQkxHVkJRVWxoTEUxQlFVMHNRMEZCUTBrc1NVRkJVQ3hEUVVGWmFrSXNUMEZCV2l4RFFVRktPMEZCUVVFc1QwRkJNME1zUTBGQmFrSTdRVUZGUVdNc1RVRkJRVUVzVVVGQlVTeERRVUZEZGt3c1QwRkJWQ3hEUVVGcFFpeFZRVUZCZVVzc1QwRkJUeXhGUVVGSk8wRkJRekZDTEdGQlFVa3NRMEZCUTFjc1lVRkJUQ3hEUVVGdFFsZ3NUMEZCYmtJc1JVRkJORUpETEZGQlFUVkNPMEZCUTBRc1QwRkdSRHRCUVVkRU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTdzRRa0ZCY1VJN1FVRkRia0lzVlVGQlRXRXNVVUZCVVN4SFFVRkhReXhOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZCV1N4TFFVRkxiRUlzVlVGQmFrSXNRMEZCYWtJN08wRkJSVUVzVjBGQlN5eEpRVUZKV1N4RFFVRkRMRWRCUVVkSkxGRkJRVkVzUTBGQlEzUk1MRTFCUVZRc1IwRkJhMElzUTBGQkwwSXNSVUZCYTBOclRDeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRjJReXhGUVVFd1EwRXNRMEZCUXl4RlFVRXpReXhGUVVFclF6dEJRVU0zUXl4aFFVRkxReXhoUVVGTUxFTkJRVzFDUnl4UlFVRlJMRU5CUVVOS0xFTkJRVVFzUTBGQk0wSTdRVUZEUkR0QlFVTkdPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeGpRVUZMVml4UFFVRk1MRVZCUVdNelRDeExRVUZrTEVWQlFYRkNPMEZCUTI1Q0xGVkJRVWtzUzBGQlMzbE1MRlZCUVV3c1EwRkJaMEpGTEU5QlFXaENMRTFCUVRaQ00wc3NVMEZCYWtNc1JVRkJORU03UVVGRE1VTTdRVUZEUkRzN1FVRkZSREpMTEUxQlFVRkJMRTlCUVU4c1IwRkJSeXhMUVVGTFRTeHRRa0ZCVEN4RFFVRjVRazRzVDBGQmVrSXNRMEZCVmpzN1FVRkRRU3hWUVVGTmEwSXNTMEZCU3l4SFFVRkhMRXRCUVV0RExGbEJRVXdzUTBGQmEwSnVRaXhQUVVGc1FpeEZRVUV5UWpOTUxFdEJRVE5DTEVOQlFXUTdPMEZCUTBFc1YwRkJTM1ZNTEZkQlFVd3NRMEZCYVVKM1FpeGhRVUZxUWl4RFFVRXJRa1lzUzBGQkwwSTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHJRa0ZCWjBKc1FpeFBRVUZvUWl4RlFVRjVRa01zVVVGQmVrSXNSVUZCYlVOdlFpeFRRVUZ1UXl4RlFVRTRRenRCUVVNMVF5eFhRVUZMUXl4bFFVRk1MRU5CUVhGQ1F5eFJRVUZ5UWl4RFFVRTRRblpDTEU5QlFUbENMRVZCUVhWRFF5eFJRVUYyUXl4RlFVRnBSRzlDTEZOQlFXcEVPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSFZDUVVGeFFuSkNMRTlCUVhKQ0xFVkJRVGhDUXl4UlFVRTVRaXhGUVVGM1F6dEJRVU4wUXl4WFFVRkxjVUlzWlVGQlRDeERRVUZ4UWxnc1lVRkJja0lzUTBGQmJVTllMRTlCUVc1RExFVkJRVFJEUXl4UlFVRTFRenRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMQ3RDUVVFMlFsa3NUVUZCTjBJc1JVRkJjVU5hTEZGQlFYSkRMRVZCUVN0RE8wRkJRVUU3TzBGQlF6ZERMRlZCUVUxaExGRkJRVkVzUjBGQlIwTXNUVUZCVFN4RFFVRkRReXhKUVVGUUxFTkJRVmtzUzBGQlMwMHNaVUZCVEN4RFFVRnhRbmhDTEZWQlFXcERMRVZCUVRaRE5Vc3NUVUZCTjBNc1EwRkRaaXhWUVVGQk9Fc3NUMEZCVHp0QlFVRkJMR1ZCUVVsaExFMUJRVTBzUTBGQlEwa3NTVUZCVUN4RFFVRlpha0lzVDBGQldpeERRVUZLTzBGQlFVRXNUMEZFVVN4RFFVRnFRanRCUVVsQll5eE5RVUZCUVN4UlFVRlJMRU5CUVVOMlRDeFBRVUZVTEVOQlFXbENMRlZCUVVGNVN5eFBRVUZQTEVWQlFVazdRVUZETVVJc1kwRkJTU3hEUVVGRFZ5eGhRVUZNTEVOQlFXMUNXQ3hQUVVGdVFpeEZRVUUwUWtNc1VVRkJOVUk3UVVGRFJDeFBRVVpFTzBGQlIwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3c0UWtGQk5FSTdRVUZETVVJc1YwRkJTM0ZDTEdWQlFVd3NRMEZCY1VKRkxHdENRVUZ5UWp0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNZMEZCV1hoQ0xFOUJRVm9zUlVGQmNVSXpUQ3hMUVVGeVFpeEZRVUUwUWp0QlFVTXhRaXhYUVVGTGFVNHNaVUZCVEN4RFFVRnhRa2NzU1VGQmNrSXNRMEZCTUVKNlFpeFBRVUV4UWl4RlFVRnRRek5NTEV0QlFXNURPMEZCUTBRN096czdPenRCUVVkSU1FMHNUVUZCVFN4RFFVRkRWeXhuUWtGQlVDeERRVUYzUW14RExGTkJRWGhDTEVWQlFXMURPMEZCUTJwRE9FSXNSVUZCUVVFc1pVRkJaU3hGUVVGRk8wRkJRMlpxVGl4SlFVRkJRU3hMUVVGTExFVkJRVVVzU1VGQlNXMU1MRk5CUVVvc1JVRkVVVHRCUVVWbWJVTXNTVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJSa3NzUjBGRVowSTdRVUZMYWtORExFVkJRVUZCTEUxQlFVMHNSVUZCUlR0QlFVTk9kazRzU1VGQlFVRXNTMEZCU3l4RlFVRkZMRVZCUkVRN1FVRkZUbk5PTEVsQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVVaS08wRkJUSGxDTEVOQlFXNURPMEZCVjBFc2NVUkJRV1Z1UXl4VFFVRm1MRVU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJGUkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMGxCUTAxeFF6dEJRVU5LTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSU3dyUWtGQldVTXNTVUZCV2l4RlFVRnJRanRCUVVGQk96dEJRVU5vUWl4VFFVRkxReXhMUVVGTUxFZEJRV0ZFTEVsQlFXSTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk96czdPenRYUVVORkxITkNRVUZoTzBGQlFVRTdPMEZCUTFnc1ZVRkJUVVVzVFVGQlRTeEhRVUZITEVWQlFXWTdRVUZEUVN4VlFVRk5ReXhIUVVGSExFZEJRVWM3UVVGQlEwd3NVVUZCUVVFc1RVRkJUU3hGUVVGRlNUdEJRVUZVTEU5QlFWb3NRMEZHVnl4RFFVbFlPenRCUVVOQmFrSXNUVUZCUVVFc1RVRkJUU3hEUVVGRGJVSXNUMEZCVUN4RFFVRmxMRXRCUVV0RExGZEJRVXdzUTBGQmFVSlFMRTFCUVdoRExFVkJRWGREY2swc1QwRkJlRU1zUTBGQlowUXNaMEpCUVcxQ08wRkJRVUU3UVVGQlFTeFpRVUZxUW5OQ0xFbEJRV2xDTzBGQlFVRXNXVUZCV0hoRExFdEJRVmM3TzBGQlEycEZNazRzVVVGQlFVRXNUVUZCVFN4RFFVRkRia3dzU1VGQlJDeERRVUZPTEdGQlFXdENMRXRCUVVrc1EwRkJRM05NTEZkQlFVd3NRMEZCYVVKMFRDeEpRVUZ1UXl4alFVRXlRM2hETEV0QlFUTkRPMEZCUTBRc1QwRkdSRHRCUVVsQkxGZEJRVXN3VGl4TFFVRk1MRU5CUVZjc1MwRkJTMGtzVjBGQlRDeERRVUZwUW5STUxFbEJRVFZDTEVsQlFXOURiMHdzUjBGQmNFTTdRVUZGUVN4aFFVRlBRU3hIUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFOQlEwVXNaVUZCVnp0QlFVTlVMR0ZCUVU4c1MwRkJTMFlzUzBGQldqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0VFFVTkZMR1ZCUVZrN1FVRkRWaXhoUVVGUExFdEJRVXRCTEV0QlFVd3NRMEZCVjBzc1MwRkJiRUk3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR3RDUVVGVGNFTXNUMEZCVkN4RlFVRnJRa01zVVVGQmJFSXNSVUZCTkVJN1FVRkRNVUlzVjBGQlN6aENMRXRCUVV3c1EwRkJWMUlzVVVGQldDeERRVUZ2UW5aQ0xFOUJRWEJDTEVWQlFUWkNReXhSUVVFM1FqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkJUVVU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSU3d5UWtGQlkwUXNUMEZCWkN4RlFVRjFRa01zVVVGQmRrSXNSVUZCYVVNN1FVRkRMMElzVjBGQlN6aENMRXRCUVV3c1EwRkJWM0JDTEdGQlFWZ3NRMEZCZVVKWUxFOUJRWHBDTEVWQlFXdERReXhSUVVGc1F6dEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkJUVVU3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVORkxHMURRVUZ6UWxrc1RVRkJkRUlzUlVGQk9FSmFMRkZCUVRsQ0xFVkJRWGRETzBGQlEzUkRMRmRCUVVzNFFpeExRVUZNTEVOQlFWZE5MSEZDUVVGWUxFTkJRV2xEZUVJc1RVRkJha01zUlVGQmVVTmFMRkZCUVhwRE8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenRCUVUxRk8wRkJRMFk3UVVGRFFUdEJRVU5GTEd0RFFVRnhRanRCUVVOdVFpeFhRVUZMT0VJc1MwRkJUQ3hEUVVGWFVDeHJRa0ZCV0R0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk96czdPenRCUVV0Rk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBVc2EwSkJRVXQ0UWl4UFFVRk1MRVZCUVdNelRDeExRVUZrTEVWQlFYRkNPMEZCUTI1Q01rd3NUVUZCUVVFc1QwRkJUeXhoUVVGTkxFdEJRVXR0UXl4WFFVRk1MRU5CUVdsQ2RFd3NTVUZCZGtJc1kwRkJLMEp0U2l4UFFVRXZRaXhEUVVGUU96dEJRVU5CTEZkQlFVc3JRaXhMUVVGTUxFTkJRVmRPTEVsQlFWZ3NRMEZCWjBKNlFpeFBRVUZvUWl4RlFVRjVRak5NTEV0QlFYcENPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdRVUZOUlR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFJTeHZRa0ZCVHl0RUxGTkJRVkFzUlVGQmEwSTdRVUZEYUVJc1YwRkJTM0ZLTEVsQlFVd3NRMEZCVlN4TFFVRkxWU3hYUVVGTUxFTkJRV2xDVUN4TlFVRnFRaXhEUVVGM1FsVXNUVUZCYkVNc1JVRkJNRU5zU3l4VFFVRXhRenRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHRRa0ZCVlR0QlFVRkJPenRCUVVOU01ra3NUVUZCUVVFc1RVRkJUU3hEUVVGRFF5eEpRVUZRTEVOQlFWa3NTMEZCUzJVc1MwRkJUQ3hEUVVGWExFdEJRVXRKTEZkQlFVd3NRMEZCYVVKMFRDeEpRVUUxUWl4RFFVRmFMRVZCUVN0RGRFSXNUMEZCTDBNc1EwRkJkVVFzVlVGQlFYTkNMRWxCUVVrc1JVRkJTVHRCUVVNM1JDeGxRVUZQTEUxQlFVa3NRMEZCUTJ0TUxFdEJRVXdzUTBGQlZ5eE5RVUZKTEVOQlFVTkpMRmRCUVV3c1EwRkJhVUowVEN4SlFVRTFRaXhGUVVGclEwRXNTVUZCYkVNc1EwRkJVRHRCUVVORUxFOUJSa1E3UVVGSlFTeGhRVUZQTEV0QlFVdHJUQ3hMUVVGTUxFTkJRVmNzUzBGQlMwa3NWMEZCVEN4RFFVRnBRblJNTEVsQlFUVkNMRU5CUVZBN1FVRkRRU3hoUVVGUExFdEJRVXRyVEN4TFFVRmFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVRsSVJTeHJRa0ZCWjBJdlFpeFBRVUZvUWl4RlFVRjVRa01zVVVGQmVrSXNSVUZCYlVNN1FVRkRha05FTEUxQlFVRkJMRTlCUVU4c1lVRkJUU3hMUVVGTGJrb3NTVUZCV0N4alFVRnRRbTFLTEU5QlFXNUNMRU5CUVZBN1FVRkRRVklzVFVGQlFVRXNkVUpCUVVFc1EwRkJiVUpSTEU5QlFXNUNMRVZCUVRSQ1F5eFJRVUUxUWp0QlFVTkVPenM3VjBGdlFrUXNkVUpCUVhGQ1JDeFBRVUZ5UWl4RlFVRTRRa01zVVVGQk9VSXNSVUZCZDBNN1FVRkRkRU5FTEUxQlFVRkJMRTlCUVU4c1lVRkJUU3hMUVVGTGJrb3NTVUZCV0N4alFVRnRRbTFLTEU5QlFXNUNMRU5CUVZBN1FVRkRRVklzVFVGQlFVRXNORUpCUVVFc1EwRkJkMEpSTEU5QlFYaENMRVZCUVdsRFF5eFJRVUZxUXp0QlFVTkVPenM3VjBGelFrUXNLMEpCUVRaQ1dTeE5RVUUzUWl4RlFVRnhRMW9zVVVGQmNrTXNSVUZCSzBNN1FVRkROME5aTEUxQlFVRkJMRTFCUVUwc1IwRkJSeXhKUVVGSk1FSXNUVUZCU2l4WlFVRmxMRXRCUVVzeFRDeEpRVUZ3UWl4alFVRTBRbWRMTEUxQlFVMHNRMEZCUXpKQ0xFMUJRVkFzUTBGQlkzQk5MRTlCUVdRc1EwRkJjMElzU1VGQmRFSXNSVUZCTkVJc1JVRkJOVUlzUTBGQk5VSXNSVUZCVkR0QlFVTkJiMG9zVFVGQlFVRXNiME5CUVVFc1EwRkJaME54UWl4TlFVRm9ReXhGUVVGM1Exb3NVVUZCZUVNN1FVRkRSRHM3TzFkQldVUXNPRUpCUVRSQ08wRkJRekZDVkN4TlFVRkJRU3h2UTBGQlFTeERRVUZuUXl4SlFVRkpLME1zVFVGQlNpeFpRVUZsTEV0QlFVc3hUQ3hKUVVGd1FpeFBRVUZvUXp0QlFVTkVPenM3VjBGeFFrUXNZMEZCV1cxS0xFOUJRVm9zUlVGQmNVSXpUQ3hMUVVGeVFpeEZRVUUwUWp0QlFVTXhRakpNTEUxQlFVRkJMRTlCUVU4c1lVRkJUU3hMUVVGTGJrb3NTVUZCV0N4alFVRnRRbTFLTEU5QlFXNUNMRU5CUVZBN1FVRkRRVklzVFVGQlFVRXNiVUpCUVVFc1EwRkJaVkVzVDBGQlppeEZRVUYzUWpOTUxFdEJRWGhDTzBGQlEwUTdPenRYUVhORFJDeGxRVUZ0UXp0QlFVTnFReXhWUVVGSmIwOHNWMEZCVnl4SFFVRkhMRWxCUVd4Q096dEJRVVJwUXl4M1EwRkJja0pETEcxQ1FVRnhRanRCUVVGeVFrRXNVVUZCUVVFc2JVSkJRWEZDTzBGQlFVRTdPMEZCUjJwRFFTeE5RVUZCUVN4dFFrRkJiVUlzUTBGQlEyNU9MRTlCUVhCQ0xFTkJRVFJDTEZWQlFVRnZUaXhwUWtGQmFVSXNSVUZCU1R0QlFVTXZRMFlzVVVGQlFVRXNWMEZCVnl4SFFVRkhSU3hwUWtGQmFVSXNRMEZCUTBZc1YwRkJSQ3hEUVVFdlFqdEJRVU5FTEU5QlJrUTdRVUZKUVN4aFFVRlBRU3hYUVVGUU8wRkJRMFE3T3pzN096dEJRVWRJTVVJc1RVRkJUU3hEUVVGRFZ5eG5Ra0ZCVUN4RFFVRjNRa2NzYlVKQlFYaENMRVZCUVRaRE8wRkJRek5EUkN4RlFVRkJRU3hOUVVGTkxFVkJRVVU3UVVGRFRuWk9MRWxCUVVGQkxFdEJRVXNzUlVGQlJUdEJRVU5NYVU4c1RVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlJFZ3NTMEZFUkR0QlFVbE9XQ3hKUVVGQlFTeFJRVUZSTEVWQlFVVTdRVUZLU2l4SFFVUnRRenRCUVU4elEybENMRVZCUVVGQkxGRkJRVkVzUlVGQlJUdEJRVU5TZGs4c1NVRkJRVUVzUzBGQlN5eEZRVUZGTEVWQlJFTTdRVUZGVW5OT0xFbEJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVWkdPMEZCVUdsRExFTkJRVGRETzBGQllVRXNLMFJCUVdWRkxHMUNRVUZtTEVVN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZUU5Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMW5RanM3T3pzN1FVRkRTanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUlN4M1FrRkJLMEk3UVVGQlFUczdRVUZCUVN4dFJrRkJTaXhGUVVGSk8wRkJRVUVzTUVKQlFXeENWQ3hMUVVGclFqdEJRVUZCTEZGQlFXeENRU3hMUVVGclFpd3lRa0ZCVml4RlFVRlZPenRCUVVGQk96dEJRVU0zUWp0QlFVTkJMRGhDUVVGTlFTeExRVUZMTEVOQlFVTXpReXhGUVVGYU8wRkJSVUVzVlVGQlMzRkVMRTFCUVV3c1IwRkJZMVlzUzBGQlpEdEJRVU5CTEZWQlFVdFhMRk5CUVV3c1IwRkJhVUlzUlVGQmFrSTdRVUZEUVN4VlFVRkxReXhOUVVGTUxFZEJRV01zUlVGQlpEdEJRVU5CTEZWQlFVdERMRmRCUVV3c1IwRkJiVUlzVFVGQlMzWk5MRWRCUVhoQ08wRkJVRFpDTzBGQlVUbENPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096dFRRVU5GTEdWQlFWazdRVUZEVml4aFFVRlBMRXRCUVV0dlRTeE5RVUZhTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1UwRkRSU3hsUVVGVk8wRkJRMUlzWVVGQlQzSk5MRWxCUVVrc1EwRkJRME1zUjBGQlRDeEZRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1UwRkRSU3hsUVVGblFqdEJRVU5rTEdGQlFVOHNTMEZCUzBFc1IwRkJUQ3hIUVVGWExFdEJRVXQxVFN4WFFVRjJRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHJRa0ZCVXp0QlFVTlFMRlZCUVUxb1RDeFhRVUZYTEVkQlFVY3NTMEZCUzNaQ0xFZEJRWHBDTzBGQlEwRXNWVUZCVFhkTkxFVkJRVVVzUjBGQlJ5eExRVUZMT1Vzc1UwRkJhRUlzUTBGR1R5eERRVWxRT3p0QlFVTkJMRmRCUVVzMFN5eE5RVUZNTEVOQlFWbDZUaXhQUVVGYUxFTkJRVzlDTEZWQlFVRTBUaXhKUVVGSkxFVkJRVWs3UVVGRE1VSkJMRkZCUVVGQkxFbEJRVWtzUTBGQlEwTXNUMEZCVEN4RFFVRmhSaXhGUVVGaU8wRkJRMFFzVDBGR1JDeEZRVXhQTEVOQlUxQTdPenRCUVVOQmJrTXNUVUZCUVVFc1RVRkJUU3hEUVVGRGMwTXNUVUZCVUN4RFFVRmpMRXRCUVV0T0xGTkJRVzVDTEVWQlFUaENlRTRzVDBGQk9VSXNRMEZCYzBNc1ZVRkJRU3RPTEU5QlFVOHNSVUZCU1R0QlFVTXZRMEVzVVVGQlFVRXNUMEZCVHl4RFFVRkRhRUlzVFVGQlVpeERRVUZsV1N4RlFVRm1PMEZCUTBRc1QwRkdSQ3hGUVZaUExFTkJZMUE3TzBGQlEwRXNWMEZCUzNwQ0xFbEJRVXdzUTBGQlZTeExRVUZMVlN4WFFVRk1MRU5CUVdsQ1VDeE5RVUZxUWl4RFFVRjNRbFVzVFVGQmJFTXNSVUZCTUVOWkxFVkJRVEZETzBGQlJVRXNWMEZCUzBRc1YwRkJUQ3hIUVVGdFFtaE1MRmRCUVc1Q08wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHTkJRVXRPTEU5QlFVd3NSVUZCT0VRN1FVRkJRVHM3UVVGQlFTeHpSa0ZCU2l4RlFVRkpPMEZCUVVFc1ZVRkJMME5ETEZGQlFTdERMRk5CUVM5RFFTeFJRVUVyUXp0QlFVRkJMRlZCUVhKRFF5eFZRVUZ4UXl4VFFVRnlRMEVzVlVGQmNVTTdRVUZCUVN4VlFVRjZRbkJGTEZGQlFYbENMRk5CUVhwQ1FTeFJRVUY1UWp0QlFVRkJMRlZCUVdaeFJTeFBRVUZsTEZOQlFXWkJMRTlCUVdVN08wRkJRelZFTEZWQlFVMXhUQ3hKUVVGSkxFZEJRVWRvVGl4bFFVRkJMRU5CUVZkM1FpeFBRVUZZTEVWQlFXOUNPMEZCUVVORExGRkJRVUZCTEZGQlFWRXNSVUZCVWtFc1VVRkJSRHRCUVVGWFF5eFJRVUZCUVN4VlFVRlZMRVZCUVZaQkxGVkJRVmc3UVVGQmRVSndSU3hSUVVGQlFTeFJRVUZSTEVWQlFWSkJMRkZCUVhaQ08wRkJRV2xEY1VVc1VVRkJRVUVzVDBGQlR5eEZRVUZRUVR0QlFVRnFReXhQUVVGd1FpeERRVUZpT3p0QlFVTkJMRmRCUVV0clRDeE5RVUZNTEVOQlFWazVTQ3hKUVVGYUxFTkJRV2xDYVVrc1NVRkJha0lzUlVGR05FUXNRMEZKTlVRN096dEJRVU5CTEZWQlFVMUpMRlZCUVZVc1IwRkJSeXhUUVVGaVFTeFZRVUZoTEVkQlFVMDdRVUZEZGtJc1kwRkJTU3hEUVVGRFVDeE5RVUZNTEVOQlFWbDRTQ3hOUVVGYUxFTkJRVzFDTEUxQlFVa3NRMEZCUTNkSUxFMUJRVXdzUTBGQldYWklMRTlCUVZvc1EwRkJiMEl3U0N4SlFVRndRaXhEUVVGdVFpeEZRVUU0UXl4RFFVRTVRenRCUVVORUxFOUJSa1E3TzBGQlIwRkJMRTFCUVVGQkxFbEJRVWtzUTBGQlEycE9MRWxCUVV3c1EwRkJWWEZPTEZWQlFWWXNSVUZCYzBKQkxGVkJRWFJDTzBGQlJVRXNZVUZCVDBvc1NVRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHZRa0ZCVjBzc1dVRkJXQ3hGUVVGcFJEdEJRVUZCTEZWQlFYaENReXhMUVVGM1FpeDFSVUZCYUVJc1MwRkJaMEk3TzBGQlF5OURMRlZCUVUxRExGTkJRVk1zUjBGQlJ5eHJRa0ZCVDBZc1dVRkJWaXhEUVVGbUxFTkJSQ3RETEVOQlJ5OURPenM3UVVGRFFTeFZRVUZKUlN4VFFVRlRMRXRCUVVzc1ZVRkJiRUlzUlVGQk9FSTdRVUZETlVJc1kwRkJUU3hKUVVGSmFGRXNTMEZCU2l4elEwRkRNRUlzUzBGQlN5dE1MRVZCUkM5Q0xIRkRRVUZPTzBGQlIwUXNUMEZLUkN4RFFVdEJPMEZCVEVFc1YwRk5TeXhKUVVGSkxFVkJRVVVyUkN4WlFVRlpMRU5CUVVOSExGTkJRV0lzV1VGQmEwTTVRaXgzUWtGQmNFTXNRMEZCU2l4RlFVRTRSRHRCUVVOcVJTeGpRVUZOTEVsQlFVbHVUeXhMUVVGS0xEaENRVU5yUWpoUUxGbEJRVmtzUTBGQlF6Tk5MRWxCUkM5Q0xITkNRVU1yUXl4TFFVRkxORWtzUlVGRWNFUXNjVVJCUVU0N1FVRkhSQ3hQUVdRNFF5eERRV2RDTDBNN096dEJRVU5CTEZWQlFVa3NTMEZCUzNORUxGTkJRVXdzUTBGQlpWTXNXVUZCV1N4RFFVRkRNMDBzU1VGQk5VSXNUVUZCYzBONFFpeFRRVUV4UXl4RlFVRnhSRHRCUVVOdVJDeFpRVUZKYjA4c1MwRkJTaXhGUVVGWE8wRkJRMVF4VEN4VlFVRkJRU3hQUVVGUExFTkJRVU5ETEVsQlFWSXNiVUpCUTJGM1RDeFpRVUZaTEVOQlFVTXpUU3hKUVVReFFpeHhRMEZEZVVRc1MwRkJTelJKTEVWQlJEbEVPMEZCUjBRc1UwRktSQ3hOUVVsUE8wRkJRMHdzWjBKQlFVMHNTVUZCU1M5TUxFdEJRVW9zYlVKQlEwODRVQ3haUVVGWkxFTkJRVU16VFN4SlFVUndRaXh4UTBGRGJVUXNTMEZCU3pSSkxFVkJSSGhFTEhORVFVRk9PMEZCUjBRN1FVRkRSaXhQUVROQ09FTXNRMEUyUWk5RE96czdRVUUzUWl0RExIZERRVUZPT1Vzc1NVRkJUVHRCUVVGT1FTeFJRVUZCUVN4SlFVRk5PMEZCUVVFN08wRkJPRUl2UXl4VlFVRk5NazhzVDBGQlR5eEhRVUZITEhGQ1FVRkpSU3haUVVGUUxFZEJRVzlDTEVsQlFYQkNMRk5CUVRaQ04wOHNTVUZCTjBJc1JVRkJZanM3UVVGRFFUSlBMRTFCUVVGQkxFOUJRVThzUTBGQlEwMHNWVUZCVWp0QlFVVkJMRmRCUVV0aUxGTkJRVXdzUTBGQlpWTXNXVUZCV1N4RFFVRkRNMDBzU1VGQk5VSXNTVUZCYjBONVRTeFBRVUZ3UXp0QlFVTkJMRmRCUVVzM1FpeEpRVUZNTEVOQlFWVXNTMEZCUzFVc1YwRkJUQ3hEUVVGcFFsQXNUVUZCYWtJc1EwRkJkMEpwUXl4VlFVRnNReXhGUVVFNFEwd3NXVUZCV1N4RFFVRkRNMDBzU1VGQk0wUTdRVUZGUVN4aFFVRlBMRWxCUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNkVUpCUVdOcFRpeFJRVUZrTEVWQlFYZENPMEZCUTNSQ0xGVkJRVWtzUzBGQlMyWXNVMEZCVEN4RFFVRmxaU3hSUVVGbUxFMUJRVFpDZWs4c1UwRkJha01zUlVGQk5FTTdRVUZETVVNd1F5eFJRVUZCUVN4UFFVRlBMRU5CUVVORExFbEJRVklzTWtKQlEzRkNPRXdzVVVGRWNrSXNjVU5CUTNkRUxFdEJRVXR5UlN4RlFVUTNSRHRCUVVkQkxHVkJRVThzUzBGQlVEdEJRVU5FTEU5QlRFUXNUVUZMVHp0QlFVTk1PMEZCUTBFc1lVRkJTMmRETEVsQlFVd3NRMEZCVlN4TFFVRkxWU3hYUVVGTUxFTkJRV2xDVUN4TlFVRnFRaXhEUVVGM1FtMURMR0ZCUVd4RExFVkJRV2xFUkN4UlFVRnFSRHM3UVVGRFFTeGhRVUZMWml4VFFVRk1MRU5CUVdWbExGRkJRV1lzUlVGQmVVSkZMRTlCUVhwQ096dEJRVU5CTEdWQlFVOHNTMEZCUzJwQ0xGTkJRVXdzUTBGQlpXVXNVVUZCWml4RFFVRlFPMEZCUlVFc1pVRkJUeXhKUVVGUU8wRkJRMFE3UVVGRFJqdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2IwSkJRVmRCTEZGQlFWZ3NSVUZCY1VJN1FVRkRia0lzWVVGQlR5eERRVUZETEVOQlFVTXNTMEZCUzJZc1UwRkJUQ3hEUVVGbFpTeFJRVUZtTEVOQlFWUTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3gzUWtGQlpUdEJRVU5pTEdGQlFVOHZReXhOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZCV1N4TFFVRkxLMElzVTBGQmFrSXNRMEZCVUR0QlFVTkVPenM3TzBWQmNFMXpRblpFT3p0QlFYVk5la0oxUWl4TlFVRk5MRU5CUVVOclJDeGpRVUZRTEVOQlFYTkNjRUlzVlVGQmRFSXNSVUZCYTBNc1VVRkJiRU1zUlVGQk5FTTdRVUZETVVONFR5eEZRVUZCUVN4TFFVRkxMR3REUVVOQk1FMHNUVUZCVFN4RFFVRkRiVVFzWTBGQlVDeERRVUZ6UW5KQ0xGVkJRWFJDTEVWQlFXdERha0lzVFVGRWJFTTdRVUZGU0ZVc1NVRkJRVUVzVFVGQlRTeEZRVUZGTEZWQlJrdzdRVUZIU0hWQ0xFbEJRVUZCTEZWQlFWVXNSVUZCUlN4alFVaFVPMEZCU1VoRkxFbEJRVUZCTEdGQlFXRXNSVUZCUlR0QlFVcGFMRWxCUkhGRE8wRkJUekZEY0VNc1JVRkJRVUVzVVVGQlVTeEZRVUZGTzBGQlVHZERMRU5CUVRWRE8wRkJWVUVzYzBSQlFXVnJRaXhWUVVGbUxFVTdPMEZEZEU5Qk8wRkJRMEU3TzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTA4c1NVRkJUWE5DTEUxQlFVMHNSMEZCUnp0QlFVTndRa01zUlVGQlFVRXNTVUZFYjBJc1owSkJRMlpETEVOQlJHVXNSVUZEV2p0QlFVTk9MRmRCUVU5QkxFTkJRVkE3UVVGRFJDeEhRVWh0UWp0QlFVbHdRa01zUlVGQlFVRXNSVUZLYjBJc1kwRkpha0pFTEVOQlNtbENMRVZCU1dRN1FVRkRTaXhYUVVGUFFTeERRVUZRTzBGQlEwUXNSMEZPYlVJN1FVRlBjRUpGTEVWQlFVRkJMRWRCVUc5Q0xHVkJUMmhDUml4RFFWQm5RaXhGUVU5aU8wRkJRMHdzVjBGQlQwRXNRMEZCVUR0QlFVTkVMRWRCVkcxQ08wRkJWWEJDUnl4RlFVRkJRU3hMUVZadlFpeHBRa0ZWWkVnc1EwRldZeXhGUVZWWU8wRkJRMUFzVjBGQlQwRXNRMEZCVUR0QlFVTkVPMEZCV20xQ0xFTkJRV1k3UVVGbFVEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRUeXhKUVVGTlNTeFRRVUZUTEVkQlFVYzdRVUZEZGtKSUxFVkJRVUZCTEVWQlJIVkNMR05CUTNCQ1JDeERRVVJ2UWl4RlFVTnFRanRCUVVOS0xGZEJRVTlCTEVOQlFVTXNSMEZCUjBFc1EwRkJXRHRCUVVORUxFZEJTSE5DTzBGQlNYWkNSU3hGUVVGQlFTeEhRVXAxUWl4bFFVbHVRa1lzUTBGS2JVSXNSVUZKYUVJN1FVRkRUQ3hYUVVGUFFTeERRVUZETEVsQlFVa3NTVUZCU1VFc1EwRkJVaXhEUVVGU08wRkJRMFFzUjBGT2MwSTdRVUZQZGtKSExFVkJRVUZCTEV0QlVIVkNMR2xDUVU5cVFrZ3NRMEZRYVVJc1JVRlBaRHRCUVVOUVFTeEpRVUZCUVN4RFFVRkRMRWxCUVVrc1EwRkJURHM3UVVGRFFTeFJRVUZKUVN4RFFVRkRMRWRCUVVjc1EwRkJVaXhGUVVGWE8wRkJRMVFzWVVGQlR5eE5RVUZOUVN4RFFVRk9MRWRCUVZWQkxFTkJRV3BDTzBGQlEwUTdPMEZCUTBRc1YwRkJUeXhEUVVGRExFZEJRVVFzU1VGQlVTeEZRVUZGUVN4RFFVRkdMRWxCUVU5QkxFTkJRVU1zUjBGQlJ5eERRVUZZTEVsQlFXZENMRU5CUVhoQ0xFTkJRVkE3UVVGRFJEdEJRV0p6UWl4RFFVRnNRanRCUVdkQ1VEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRUeXhKUVVGTlN5eExRVUZMTEVkQlFVYzdRVUZEYmtKS0xFVkJRVUZCTEVWQlJHMUNMR05CUTJoQ1JDeERRVVJuUWl4RlFVTmlPMEZCUTBvc1YwRkJUMEVzUTBGQlF5eEhRVUZIUVN4RFFVRktMRWRCUVZGQkxFTkJRV1k3UVVGRFJDeEhRVWhyUWp0QlFVbHVRa1VzUlVGQlFVRXNSMEZLYlVJc1pVRkpaa1lzUTBGS1pTeEZRVWxhTzBGQlEwd3NWMEZCVHl4RlFVRkZRU3hEUVVGR0xFZEJRVTFCTEVOQlFVNHNSMEZCVlVFc1EwRkJWaXhIUVVGakxFTkJRWEpDTzBGQlEwUXNSMEZPYTBJN1FVRlBia0pITEVWQlFVRkJMRXRCVUcxQ0xHbENRVTlpU0N4RFFWQmhMRVZCVDFZN1FVRkRVRUVzU1VGQlFVRXNRMEZCUXl4SlFVRkpMRU5CUVV3N08wRkJRMEVzVVVGQlNVRXNRMEZCUXl4SFFVRkhMRU5CUVZJc1JVRkJWenRCUVVOVUxHRkJRVThzVFVGQlRVRXNRMEZCVGl4SFFVRlZRU3hEUVVGV0xFZEJRV05CTEVOQlFYSkNPMEZCUTBRN08wRkJSVVJCTEVsQlFVRkJMRU5CUVVNc1NVRkJTU3hEUVVGTU8wRkJRMEVzVjBGQlR5eFBRVUZQUVN4RFFVRkRMRWRCUVVkQkxFTkJRVW9zUjBGQlVVRXNRMEZCVWl4SFFVRlpMRU5CUVc1Q0xFTkJRVkE3UVVGRFJEdEJRV1pyUWl4RFFVRmtPMEZCYTBKUU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxTkxFOUJRVThzUjBGQlJ6dEJRVU55UWt3c1JVRkJRVUVzUlVGRWNVSXNZMEZEYkVKRUxFTkJSR3RDTEVWQlEyWTdRVUZEU2l4WFFVRlBRU3hEUVVGRExFZEJRVWRCTEVOQlFVb3NSMEZCVVVFc1EwRkJVaXhIUVVGWlFTeERRVUZ1UWp0QlFVTkVMRWRCU0c5Q08wRkJTWEpDUlN4RlFVRkJRU3hIUVVweFFpeGxRVWxxUWtZc1EwRkthVUlzUlVGSlpEdEJRVU5NTEZkQlFVOHNTVUZCU1N4RlFVRkZRU3hEUVVGR0xFZEJRVTFCTEVOQlFVNHNSMEZCVlVFc1EwRkJWaXhIUVVGalFTeERRVUY2UWp0QlFVTkVMRWRCVG05Q08wRkJUM0pDUnl4RlFVRkJRU3hMUVZCeFFpeHBRa0ZQWmtnc1EwRlFaU3hGUVU5YU8wRkJRMUJCTEVsQlFVRkJMRU5CUVVNc1NVRkJTU3hEUVVGTU96dEJRVU5CTEZGQlFVbEJMRU5CUVVNc1IwRkJSeXhEUVVGU0xFVkJRVmM3UVVGRFZDeGhRVUZQTEUxQlFVMUJMRU5CUVU0c1IwRkJWVUVzUTBGQlZpeEhRVUZqUVN4RFFVRmtMRWRCUVd0Q1FTeERRVUY2UWp0QlFVTkVPenRCUVVWRVFTeEpRVUZCUVN4RFFVRkRMRWxCUVVrc1EwRkJURHRCUVVOQkxGZEJRVThzUTBGQlF5eEhRVUZFTEVsQlFWRkJMRU5CUVVNc1IwRkJSMEVzUTBGQlNpeEhRVUZSUVN4RFFVRlNMRWRCUVZsQkxFTkJRVm9zUjBGQlowSXNRMEZCZUVJc1EwRkJVRHRCUVVORU8wRkJabTlDTEVOQlFXaENPMEZCYTBKUU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxUExFOUJRVThzUjBGQlJ6dEJRVU55UWs0c1JVRkJRVUVzUlVGRWNVSXNZMEZEYkVKRUxFTkJSR3RDTEVWQlEyWTdRVUZEU2l4WFFVRlBRU3hEUVVGRExFZEJRVWRCTEVOQlFVb3NSMEZCVVVFc1EwRkJVaXhIUVVGWlFTeERRVUZhTEVkQlFXZENRU3hEUVVGMlFqdEJRVU5FTEVkQlNHOUNPMEZCU1hKQ1JTeEZRVUZCUVN4SFFVcHhRaXhsUVVscVFrWXNRMEZLYVVJc1JVRkpaRHRCUVVOTUxGZEJRVThzUlVGQlJVRXNRMEZCUml4SFFVRk5RU3hEUVVGT0xFZEJRVlZCTEVOQlFWWXNSMEZCWTBFc1EwRkJaQ3hIUVVGclFrRXNRMEZCYkVJc1IwRkJjMElzUTBGQk4wSTdRVUZEUkN4SFFVNXZRanRCUVU5eVFrY3NSVUZCUVVFc1MwRlFjVUlzYVVKQlQyWklMRU5CVUdVc1JVRlBXanRCUVVOUVFTeEpRVUZCUVN4RFFVRkRMRWxCUVVrc1EwRkJURHM3UVVGRFFTeFJRVUZKUVN4RFFVRkRMRWRCUVVjc1EwRkJVaXhGUVVGWE8wRkJRMVFzWVVGQlR5eE5RVUZOUVN4RFFVRk9MRWRCUVZWQkxFTkJRVllzUjBGQlkwRXNRMEZCWkN4SFFVRnJRa0VzUTBGQmJFSXNSMEZCYzBKQkxFTkJRVGRDTzBGQlEwUTdPMEZCUlVSQkxFbEJRVUZCTEVOQlFVTXNTVUZCU1N4RFFVRk1PMEZCUTBFc1YwRkJUeXhQUVVGUFFTeERRVUZETEVkQlFVZEJMRU5CUVVvc1IwRkJVVUVzUTBGQlVpeEhRVUZaUVN4RFFVRmFMRWRCUVdkQ1FTeERRVUZvUWl4SFFVRnZRaXhEUVVFelFpeERRVUZRTzBGQlEwUTdRVUZtYjBJc1EwRkJhRUk3UVVGclFsQTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRWRXNWVUZCVlN4SFFVRkhPMEZCUTNoQ1VDeEZRVUZCUVN4RlFVUjNRaXhqUVVOeVFrUXNRMEZFY1VJc1JVRkRiRUk3UVVGRFNpeFhRVUZQTEVsQlFVazVUaXhKUVVGSkxFTkJRVU4xVHl4SFFVRk1MRU5CUVZWVUxFTkJRVU1zUjBGQlJ6bE9MRWxCUVVrc1EwRkJRMnRETEVWQlFWWXNSMEZCWjBJc1EwRkJla0lzUTBGQldEdEJRVU5FTEVkQlNIVkNPMEZCU1hoQ09Fd3NSVUZCUVVFc1IwRktkMElzWlVGSmNFSkdMRU5CU205Q0xFVkJTV3BDTzBGQlEwd3NWMEZCVHpsT0xFbEJRVWtzUTBGQlEzZFBMRWRCUVV3c1EwRkJWVllzUTBGQlF5eEhRVUZIT1U0c1NVRkJTU3hEUVVGRGEwTXNSVUZCVml4SFFVRm5RaXhEUVVGNlFpeERRVUZRTzBGQlEwUXNSMEZPZFVJN1FVRlBlRUlyVEN4RlFVRkJRU3hMUVZCM1FpeHBRa0ZQYkVKSUxFTkJVR3RDTEVWQlQyWTdRVUZEVUN4WFFVRlBMRTlCUVU4c1NVRkJTVGxPTEVsQlFVa3NRMEZCUTNWUExFZEJRVXdzUTBGQlUzWlBMRWxCUVVrc1EwRkJRMnRETEVWQlFVd3NSMEZCVlRSTUxFTkJRVzVDTEVOQlFWZ3NRMEZCVUR0QlFVTkVPMEZCVkhWQ0xFTkJRVzVDTzBGQldWQTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRWY3NWMEZCVnl4SFFVRkhPMEZCUTNwQ1ZpeEZRVUZCUVN4RlFVUjVRaXhqUVVOMFFrUXNRMEZFYzBJc1JVRkRia0k3UVVGRFNpeFhRVUZQUVN4RFFVRkRMRXRCUVVzc1EwRkJUaXhIUVVGVkxFTkJRVllzV1VGQll5eEpRVUZrTEVWQlFYVkNRU3hEUVVGRExFZEJRVWNzUTBGQk0wSXNRMEZCVUR0QlFVTkVMRWRCU0hkQ08wRkJTWHBDUlN4RlFVRkJRU3hIUVVwNVFpeGxRVWx5UWtZc1EwRktjVUlzUlVGSmJFSTdRVUZEVEN4WFFVRlBRU3hEUVVGRExFdEJRVXNzUTBGQlRpeEhRVUZWTEVOQlFWWXNSMEZCWXl4aFFVRkpMRU5CUVVvc1JVRkJWU3hEUVVGRExFVkJRVVFzUjBGQlRVRXNRMEZCYUVJc1EwRkJja0k3UVVGRFJDeEhRVTUzUWp0QlFVOTZRa2NzUlVGQlFVRXNTMEZRZVVJc2FVSkJUMjVDU0N4RFFWQnRRaXhGUVU5b1FqdEJRVU5RTEZGQlFVbEJMRU5CUVVNc1MwRkJTeXhEUVVGV0xFVkJRV0U3UVVGRFdDeGhRVUZQTEVOQlFWQTdRVUZEUkRzN1FVRkRSQ3hSUVVGSlFTeERRVUZETEV0QlFVc3NRMEZCVml4RlFVRmhPMEZCUTFnc1lVRkJUeXhEUVVGUU8wRkJRMFE3TzBGQlJVUkJMRWxCUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZNT3p0QlFVTkJMRkZCUVVsQkxFTkJRVU1zUjBGQlJ5eERRVUZTTEVWQlFWYzdRVUZEVkN4aFFVRlBMR1ZCUVUwc1NVRkJUaXhGUVVGbFFTeERRVUZETEVkQlFVY3NRMEZCYmtJc1EwRkJVRHRCUVVORU96dEJRVU5FTEZkQlFVOHNUMEZCVHl4VlFVRkZMRU5CUVVZc1JVRkJVU3hEUVVGRExFVkJRVVFzU1VGQlQwRXNRMEZCUXl4SFFVRkhMRU5CUVZnc1EwRkJVaXhKUVVFd1FpeERRVUZxUXl4RFFVRlFPMEZCUTBRN1FVRndRbmRDTEVOQlFYQkNPMEZCZFVKUU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxWkxGRkJRVkVzUjBGQlJ6dEJRVU4wUWxnc1JVRkJRVUVzUlVGRWMwSXNZMEZEYmtKRUxFTkJSRzFDTEVWQlEyaENPMEZCUTBvc1YwRkJUeXhKUVVGSk9VNHNTVUZCU1N4RFFVRkRlVWNzU1VGQlRDeERRVUZWTEVsQlFVbHhTQ3hEUVVGRExFZEJRVWRCTEVOQlFXeENMRU5CUVZnN1FVRkRSQ3hIUVVoeFFqdEJRVWwwUWtVc1JVRkJRVUVzUjBGS2MwSXNaVUZKYkVKR0xFTkJTbXRDTEVWQlNXWTdRVUZEVEN4WFFVRlBPVTRzU1VGQlNTeERRVUZEZVVjc1NVRkJUQ3hEUVVGVkxFbEJRVWtzUlVGQlJYRklMRU5CUVVZc1IwRkJUVUVzUTBGQmNFSXNRMEZCVUR0QlFVTkVMRWRCVG5GQ08wRkJUM1JDUnl4RlFVRkJRU3hMUVZCelFpeHBRa0ZQYUVKSUxFTkJVR2RDTEVWQlQySTdRVUZEVUVFc1NVRkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVdzdPMEZCUTBFc1VVRkJTVUVzUTBGQlF5eEhRVUZITEVOQlFWSXNSVUZCVnp0QlFVTlVMR0ZCUVU4c1EwRkJReXhIUVVGRUxFbEJRVkU1VGl4SlFVRkpMRU5CUVVONVJ5eEpRVUZNTEVOQlFWVXNTVUZCU1hGSUxFTkJRVU1zUjBGQlIwRXNRMEZCYkVJc1NVRkJkVUlzUTBGQkwwSXNRMEZCVUR0QlFVTkVPenRCUVVWRVFTeEpRVUZCUVN4RFFVRkRMRWxCUVVrc1EwRkJURHRCUVVOQkxGZEJRVThzVDBGQlR6bE9MRWxCUVVrc1EwRkJRM2xITEVsQlFVd3NRMEZCVlN4SlFVRkpjVWdzUTBGQlF5eEhRVUZIUVN4RFFVRnNRaXhKUVVGMVFpeERRVUU1UWl4RFFVRlFPMEZCUTBRN1FVRm1jVUlzUTBGQmFrSTdRVUZyUWxBN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFdFc1QwRkJUeXhIUVVGSE8wRkJRM0pDV2l4RlFVRkJRU3hGUVVSeFFpeGpRVU5zUWtRc1EwRkVhMElzUlVGRFpqdEJRVU5LTEZGQlFVbGpMRU5CUVVvN1FVRkRRU3hSUVVGSmJFMHNRMEZCUXl4SFFVRkhMRWRCUVZJN1FVRkRRU3hSUVVGTlJTeERRVUZETEVkQlFVY3NSMEZCVmpzN1FVRkZRU3hSUVVGSmEwd3NRMEZCUXl4TFFVRkxMRU5CUVZZc1JVRkJZVHRCUVVOWUxHRkJRVThzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRkZCUVVsQkxFTkJRVU1zUzBGQlN5eERRVUZXTEVWQlFXRTdRVUZEV0N4aFFVRlBMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFJRVUZKTEVOQlFVTndUQ3hEUVVGRUxFbEJRVTFCTEVOQlFVTXNSMEZCUnl4RFFVRmtMRVZCUVdsQ08wRkJRMlpCTEUxQlFVRkJMRU5CUVVNc1IwRkJSeXhEUVVGS08wRkJRMEZyVFN4TlFVRkJRU3hEUVVGRExFZEJRVWRvVFN4RFFVRkRMRWRCUVVjc1EwRkJVanRCUVVORUxFdEJTRVFzVFVGSFR6dEJRVU5NWjAwc1RVRkJRVUVzUTBGQlF5eEhRVUZKYUUwc1EwRkJReXhIUVVGSE5VTXNTVUZCU1N4RFFVRkROazhzU1VGQlRDeERRVUZWTEVsQlFVbHVUU3hEUVVGa0xFTkJRVXdzU1VGQk1FSXNTVUZCU1RGRExFbEJRVWtzUTBGQlEydERMRVZCUVc1RExFTkJRVW83UVVGRFJEczdRVUZGUkRSTUxFbEJRVUZCTEVOQlFVTXNTVUZCU1N4RFFVRk1PMEZCUTBFc1YwRkJUeXhGUVVGRmNFd3NRMEZCUXl4WlFVRkhMRU5CUVVnc1JVRkJVeXhMUVVGTGIwd3NRMEZCWkN4RFFVRkVMRWRCUVc5Q09VNHNTVUZCU1N4RFFVRkRkMDhzUjBGQlRDeERRVUZWTEVOQlFVTldMRU5CUVVNc1IwRkJSMk1zUTBGQlRDeExRVUZYTEVsQlFVazFUeXhKUVVGSkxFTkJRVU5yUXl4RlFVRndRaXhEUVVGRUxFZEJRVFJDVlN4RFFVRnlReXhEUVVGMFFpeERRVUZRTzBGQlEwUXNSMEYyUW05Q08wRkJkMEp5UW05TUxFVkJRVUZCTEVkQmVFSnhRaXhsUVhkQ2FrSkdMRU5CZUVKcFFpeEZRWGRDWkR0QlFVTk1MRkZCUVVsakxFTkJRVW83UVVGRFFTeFJRVUZKYkUwc1EwRkJReXhIUVVGSExFZEJRVkk3UVVGRFFTeFJRVUZOUlN4RFFVRkRMRWRCUVVjc1IwRkJWanM3UVVGRlFTeFJRVUZKYTB3c1EwRkJReXhMUVVGTExFTkJRVllzUlVGQllUdEJRVU5ZTEdGQlFVOHNRMEZCVUR0QlFVTkVPenRCUVVWRUxGRkJRVWxCTEVOQlFVTXNTMEZCU3l4RFFVRldMRVZCUVdFN1FVRkRXQ3hoUVVGUExFTkJRVkE3UVVGRFJEczdRVUZGUkN4UlFVRkpMRU5CUVVOd1RDeERRVUZFTEVsQlFVMUJMRU5CUVVNc1IwRkJSeXhEUVVGa0xFVkJRV2xDTzBGQlEyWkJMRTFCUVVGQkxFTkJRVU1zUjBGQlJ5eERRVUZLTzBGQlEwRnJUU3hOUVVGQlFTeERRVUZETEVkQlFVZG9UU3hEUVVGRExFZEJRVWNzUTBGQlVqdEJRVU5FTEV0QlNFUXNUVUZIVHp0QlFVTk1aMDBzVFVGQlFVRXNRMEZCUXl4SFFVRkphRTBzUTBGQlF5eEhRVUZITlVNc1NVRkJTU3hEUVVGRE5rOHNTVUZCVEN4RFFVRlZMRWxCUVVsdVRTeERRVUZrTEVOQlFVd3NTVUZCTUVJc1NVRkJTVEZETEVsQlFVa3NRMEZCUTJ0RExFVkJRVzVETEVOQlFVbzdRVUZEUkRzN1FVRkZSQ3hYUVVGUFVTeERRVUZETEZsQlFVY3NRMEZCU0N4RlFVRlRMRU5CUVVNc1JVRkJSQ3hIUVVGTmIwd3NRMEZCWml4RFFVRkVMRWRCUVhGQ09VNHNTVUZCU1N4RFFVRkRkMDhzUjBGQlRDeERRVUZWTEVOQlFVTldMRU5CUVVNc1IwRkJSMk1zUTBGQlRDeExRVUZYTEVsQlFVazFUeXhKUVVGSkxFTkJRVU5yUXl4RlFVRndRaXhEUVVGRUxFZEJRVFJDVlN4RFFVRnlReXhEUVVGeVFpeEhRVUVyUkN4RFFVRjBSVHRCUVVORUxFZEJOME52UWp0QlFUaERja0p4VEN4RlFVRkJRU3hMUVRsRGNVSXNhVUpCT0VObVNDeERRVGxEWlN4RlFUaERXanRCUVVOUUxGRkJRVWxqTEVOQlFVbzdRVUZEUVN4UlFVRkpiRTBzUTBGQlF5eEhRVUZITEVkQlFWSTdRVUZEUVN4UlFVRk5SU3hEUVVGRExFZEJRVWNzUjBGQlZqczdRVUZGUVN4UlFVRkphMHdzUTBGQlF5eExRVUZMTEVOQlFWWXNSVUZCWVR0QlFVTllMR0ZCUVU4c1EwRkJVRHRCUVVORU96dEJRVVZFTEZGQlFVbEJMRU5CUVVNc1MwRkJTeXhEUVVGV0xFVkJRV0U3UVVGRFdDeGhRVUZQTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hSUVVGSkxFTkJRVU53VEN4RFFVRkVMRWxCUVUxQkxFTkJRVU1zUjBGQlJ5eERRVUZrTEVWQlFXbENPMEZCUTJaQkxFMUJRVUZCTEVOQlFVTXNSMEZCUnl4RFFVRktPMEZCUTBGclRTeE5RVUZCUVN4RFFVRkRMRWRCUVVkb1RTeERRVUZETEVkQlFVY3NRMEZCVWp0QlFVTkVMRXRCU0VRc1RVRkhUenRCUVVOTVowMHNUVUZCUVVFc1EwRkJReXhIUVVGSmFFMHNRMEZCUXl4SFFVRkhOVU1zU1VGQlNTeERRVUZETms4c1NVRkJUQ3hEUVVGVkxFbEJRVWx1VFN4RFFVRmtMRU5CUVV3c1NVRkJNRUlzU1VGQlNURkRMRWxCUVVrc1EwRkJRMnRETEVWQlFXNURMRU5CUVVvN1FVRkRSRHM3UVVGRlJEUk1MRWxCUVVGQkxFTkJRVU1zU1VGQlNTeERRVUZNT3p0QlFVTkJMRkZCUVVsQkxFTkJRVU1zUjBGQlJ5eERRVUZTTEVWQlFWYzdRVUZEVkVFc1RVRkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVdzdRVUZEUVN4aFFVTkZMRU5CUVVNc1IwRkJSQ3hKUVVGUmNFd3NRMEZCUXl4WlFVRkhMRU5CUVVnc1JVRkJVeXhMUVVGTGIwd3NRMEZCWkN4RFFVRkVMRWRCUVc5Q09VNHNTVUZCU1N4RFFVRkRkMDhzUjBGQlRDeERRVUZWTEVOQlFVTldMRU5CUVVNc1IwRkJSMk1zUTBGQlRDeExRVUZYTEVsQlFVazFUeXhKUVVGSkxFTkJRVU5yUXl4RlFVRndRaXhEUVVGRUxFZEJRVFJDVlN4RFFVRnlReXhEUVVFMVFpeERRVVJHTzBGQlIwUTdPMEZCUlVSclRDeEpRVUZCUVN4RFFVRkRMRWxCUVVrc1EwRkJURHRCUVVOQkxGZEJRMFZ3VEN4RFFVRkRMRmxCUVVjc1EwRkJTQ3hGUVVGVExFTkJRVU1zUlVGQlJDeEhRVUZOYjB3c1EwRkJaaXhEUVVGRUxFZEJRWEZDT1U0c1NVRkJTU3hEUVVGRGQwOHNSMEZCVEN4RFFVRlZMRU5CUVVOV0xFTkJRVU1zUjBGQlIyTXNRMEZCVEN4TFFVRlhMRWxCUVVrMVR5eEpRVUZKTEVOQlFVTnJReXhGUVVGd1FpeERRVUZFTEVkQlFUUkNWU3hEUVVGeVF5eERRVUZ5UWl4SFFVRXJSQ3hIUVVFdlJDeEhRVUZ4UlN4RFFVUjJSVHRCUVVkRU8wRkJPVVZ2UWl4RFFVRm9RanRCUVdsR1VEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRUeXhKUVVGTmEwMHNTVUZCU1N4SFFVRkhPMEZCUTJ4Q1ppeEZRVUZCUVN4RlFVUnJRaXhqUVVObVJDeERRVVJsTEVWQlExbzdRVUZEU2l4UlFVRk5ZeXhEUVVGRExFZEJRVWNzVDBGQlZqdEJRVU5CTEZkQlFVOWtMRU5CUVVNc1IwRkJSMEVzUTBGQlNpeEpRVUZUTEVOQlFVTmpMRU5CUVVNc1IwRkJSeXhEUVVGTUxFbEJRVlZrTEVOQlFWWXNSMEZCWTJNc1EwRkJka0lzUTBGQlVEdEJRVU5FTEVkQlNtbENPMEZCUzJ4Q1dpeEZRVUZCUVN4SFFVeHJRaXhsUVV0a1JpeERRVXhqTEVWQlMxZzdRVUZEVEN4UlFVRk5ZeXhEUVVGRExFZEJRVWNzVDBGQlZqdEJRVU5CTEZkQlFVOHNSVUZCUldRc1EwRkJSaXhIUVVGTlFTeERRVUZPTEVsQlFWY3NRMEZCUTJNc1EwRkJReXhIUVVGSExFTkJRVXdzU1VGQlZXUXNRMEZCVml4SFFVRmpZeXhEUVVGNlFpeEpRVUU0UWl4RFFVRnlRenRCUVVORUxFZEJVbWxDTzBGQlUyeENXQ3hGUVVGQlFTeExRVlJyUWl4cFFrRlRXa2dzUTBGVVdTeEZRVk5VTzBGQlExQXNVVUZCVFdNc1EwRkJReXhIUVVGSExGVkJRVlVzUzBGQmNFSTdRVUZEUVdRc1NVRkJRVUVzUTBGQlF5eEpRVUZKTEVOQlFVdzdPMEZCUTBFc1VVRkJTVUVzUTBGQlF5eEhRVUZITEVOQlFWSXNSVUZCVnp0QlFVTlVMR0ZCUVU4c1QwRkJUMEVzUTBGQlF5eEhRVUZIUVN4RFFVRktMRWxCUVZNc1EwRkJRMk1zUTBGQlF5eEhRVUZITEVOQlFVd3NTVUZCVldRc1EwRkJWaXhIUVVGall5eERRVUYyUWl4RFFVRlFMRU5CUVZBN1FVRkRSRHM3UVVGRlJHUXNTVUZCUVVFc1EwRkJReXhKUVVGSkxFTkJRVXc3UVVGRFFTeFhRVUZQTEU5QlFVOUJMRU5CUVVNc1IwRkJSMEVzUTBGQlNpeEpRVUZUTEVOQlFVTmpMRU5CUVVNc1IwRkJSeXhEUVVGTUxFbEJRVlZrTEVOQlFWWXNSMEZCWTJNc1EwRkJka0lzU1VGQk5FSXNRMEZCYmtNc1EwRkJVRHRCUVVORU8wRkJiRUpwUWl4RFFVRmlPMEZCY1VKUU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxSExFMUJRVTBzUjBGQlJ6dEJRVU53UW1oQ0xFVkJRVUZCTEVWQlJHOUNMR05CUTJwQ1JDeERRVVJwUWl4RlFVTmtPMEZCUTBvc1YwRkJUeXhKUVVGSmFVSXNUVUZCVFN4RFFVRkRaaXhIUVVGUUxFTkJRVmNzU1VGQlNVWXNRMEZCWml4RFFVRllPMEZCUTBRc1IwRkliVUk3UVVGSmNFSkZMRVZCUVVGQkxFZEJTbTlDTEdWQlNXaENSaXhEUVVwblFpeEZRVWxpTzBGQlEwd3NVVUZCU1VFc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQldpeEZRVUZyUWp0QlFVTm9RaXhoUVVGUExGTkJRVk5CTEVOQlFWUXNSMEZCWVVFc1EwRkJjRUk3UVVGRFJDeExRVVpFTEUxQlJVOHNTVUZCU1VFc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQldpeEZRVUZyUWp0QlFVTjJRa0VzVFVGQlFVRXNRMEZCUXl4SlFVRkpMRWRCUVV3N1FVRkRRU3hoUVVGUExGVkJRVlZCTEVOQlFVTXNSMEZCUnl4SlFVRmtMRWxCUVhOQ1FTeERRVUYwUWl4SFFVRXdRaXhKUVVGcVF6dEJRVU5FTEV0QlNFMHNUVUZIUVN4SlFVRkpRU3hEUVVGRExFZEJRVWNzVFVGQlRTeEpRVUZrTEVWQlFXOUNPMEZCUTNwQ1FTeE5RVUZCUVN4RFFVRkRMRWxCUVVrc1NVRkJURHRCUVVOQkxHRkJRVThzVlVGQlZVRXNRMEZCUXl4SFFVRkhMRWxCUVdRc1NVRkJjMEpCTEVOQlFYUkNMRWRCUVRCQ0xFMUJRV3BETzBGQlEwUTdPMEZCUTBSQkxFbEJRVUZCTEVOQlFVTXNTVUZCU1N4TFFVRk1PMEZCUTBFc1YwRkJUeXhWUVVGVlFTeERRVUZETEVkQlFVY3NTVUZCWkN4SlFVRnpRa0VzUTBGQmRFSXNSMEZCTUVJc1VVRkJha003UVVGRFJDeEhRV2hDYlVJN1FVRnBRbkJDUnl4RlFVRkJRU3hMUVdwQ2IwSXNhVUpCYVVKa1NDeERRV3BDWXl4RlFXbENXRHRCUVVOUUxGRkJRVWxCTEVOQlFVTXNSMEZCUnl4SFFVRlNMRVZCUVdFN1FVRkRXQ3hoUVVGUGFVSXNUVUZCVFN4RFFVRkRhRUlzUlVGQlVDeERRVUZWUkN4RFFVRkRMRWRCUVVjc1EwRkJaQ3hKUVVGdFFpeEhRVUV4UWp0QlFVTkVPenRCUVVORUxGZEJRVTlwUWl4TlFVRk5MRU5CUVVObUxFZEJRVkFzUTBGQlYwWXNRMEZCUXl4SFFVRkhMRU5CUVVvc1IwRkJVU3hEUVVGdVFpeEpRVUYzUWl4SFFVRjRRaXhIUVVFNFFpeEhRVUZ5UXp0QlFVTkVPMEZCZEVKdFFpeERRVUZtTEVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnlVMUE3UVVGRFFUczdRVUZGUVRzN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1NVRkRUV3RDT3pzN096czdPenRCUVVOS08wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBVc05rSkJRV2RDZWtJc1VVRkJhRUlzUlVGQk1FSXNRMEZCUlR0QlFVVTFRanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERKQ1FVRnJRa0VzVVVGQmJFSXNSVUZCTkVJc1EwRkJSVHRCUVVVNVFqdEJRVU5HTzBGQlEwRTdPenM3VjBGRFJTeHRRa0ZCVlN4RFFVRkZPMEZCUlZvN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdWQlFXRXdRaXhUUVVGaUxFVkJRWGRDTzBGQlEzUkNMRlZCUVUxRExIRkNRVUZ4UWp0QlFVRkJPenRCUVVGQk96dEJRVU42UWl4MVEwRkJXVE5FTEVsQlFWb3NSVUZCYTBJN1FVRkJRVHM3UVVGQlFUczdRVUZEYUVJc2IwTkJRVTFCTEVsQlFVNDdRVUZEUVN4blFrRkJTME1zUzBGQlRDeEhRVUZoUkN4SlFVRmlMRU5CUm1kQ0xFTkJTV2hDT3p0QlFVTkJMR05CUVVrc1EwRkJReXhOUVVGTE5FUXNXVUZCVml4RlFVRjNRanRCUVVOMFFpeHJRa0ZCUzBFc1dVRkJUQ3hIUVVGdlFpeEpRVUZ3UWl4RFFVUnpRaXhEUVVkMFFqczdRVUZEUVN4clFrRkJTME1zWlVGQlRDeEhRVUYxUWl4TlFVRkxRU3hsUVVGTUxFTkJRWEZDUXl4SlFVRnlRaXgzUkVGQmRrSTdRVUZEUVN4clFrRkJTME1zYVVKQlFVd3NSMEZCZVVJc1RVRkJTMEVzYVVKQlFVd3NRMEZCZFVKRUxFbEJRWFpDTEhkRVFVRjZRanM3UVVGRlFTeHJRa0ZCU3pkRUxFdEJRVXdzUTBGQlYxSXNVVUZCV0N4RFFVTkZjMElzYVVOQlJFWXNSVUZGUlN4TlFVRkxPRU1zWlVGR1VEczdRVUZKUVN4clFrRkJTelZFTEV0QlFVd3NRMEZCVjFJc1VVRkJXQ3hEUVVORmMwSXNiME5CUkVZc1JVRkZSU3hOUVVGTFowUXNhVUpCUmxBc1JVRlljMElzUTBGblFuUkNPenM3UVVGRFFUbEZMRmxCUVVGQkxFMUJRVTBzUTBGQlEwTXNTVUZCVUN4RFFVRlpMRTFCUVV0dFFpeFhRVUZNTEVOQlFXbENNa1FzYTBKQlFUZENMRVZCUVdsRWRsRXNUMEZCYWtRc1EwRkJlVVFzVlVGQlFYVlBMRkZCUVZFc1JVRkJTVHRCUVVOdVJTeHJRa0ZCU1N4TlFVRkxMMElzUzBGQlRDeERRVUZYSzBJc1VVRkJXQ3hOUVVGNVFucFBMRk5CUVRkQ0xFVkJRWGRETzBGQlEzUkRMSE5DUVVGTGMxRXNaVUZCVEN4RFFVRnhRamRDTEZGQlFYSkNPMEZCUTBRN1FVRkRSaXhoUVVwRU8wRkJTMFE3TzBGQk0wSmxPMEZCTkVKcVFqczdRVUUzUW5kQ08wRkJRVUU3UVVGQlFTeHBRa0VyUW5wQ0xIbENRVUZuUWtFc1VVRkJhRUlzUlVGQk1FSTdRVUZCUVRzN1FVRkRlRUlzWjBKQlFVa3NTMEZCU3pOQ0xGZEJRVXdzUTBGQmFVSXlSQ3hyUWtGQmFrSXNRMEZCYjBOb1F5eFJRVUZ3UXl4TlFVRnJSSHBQTEZOQlFYUkVMRVZCUVdsRk8wRkJReTlFTEd0Q1FVRk5NazBzVFVGQlRTeEhRVUZITEV0QlFVdEhMRmRCUVV3c1EwRkJhVUl5UkN4clFrRkJha0lzUTBGQmIwTm9ReXhSUVVGd1F5eERRVUZtTzBGQlJVRXZReXhqUVVGQlFTeE5RVUZOTEVOQlFVTnRRaXhQUVVGUUxFTkJRV1ZHTEUxQlFXWXNSVUZCZFVKNlRTeFBRVUYyUWl4RFFVRXJRaXhuUWtGQk1rSTdRVUZCUVR0QlFVRkJMRzlDUVVGNlFuZFJMRk5CUVhsQ08wRkJRVUVzYjBKQlFXUTVSaXhSUVVGak96dEJRVU40UkN4elFrRkJTU3hEUVVGRFFTeFJRVUZFTEVOQlFVb3NSMEZCYVVJc1RVRkJTU3hEUVVGRFFTeFJRVUZFTEVOQlFVb3NRMEZCWlRKR0xFbEJRV1lzUTBGQmIwSXNUVUZCY0VJc1EwRkJha0k3TzBGQlEwRXNjMEpCUVVrc1EwRkJRemRFTEV0QlFVd3NRMEZCVjFJc1VVRkJXQ3hEUVVORkxFMUJRVWtzUTBGQlExRXNTMEZCVEN4RFFVRlhLMElzVVVGQldDeEZRVUZ4UW14RExFMUJRWEpDTEVOQlFUUkNiVVVzVTBGQk5VSXNRMEZFUml4RlFVVkZMRTFCUVVrc1EwRkJRemxHTEZGQlFVUXNRMEZHVGp0QlFVbEVMR1ZCVGtRN1FVRlBSRHRCUVVOR08wRkJNME4zUWp0QlFVRkJPMEZCUVVFc2FVSkJOa042UWl3eVFrRkJhMEkyUkN4UlFVRnNRaXhGUVVFMFFqdEJRVUZCT3p0QlFVTXhRaXhuUWtGQlNTeExRVUZMTTBJc1YwRkJUQ3hEUVVGcFFqSkVMR3RDUVVGcVFpeERRVUZ2UTJoRExGRkJRWEJETEUxQlFXdEVlazhzVTBGQmRFUXNSVUZCYVVVN1FVRkRMMFFzYTBKQlFVMHlUU3hOUVVGTkxFZEJRVWNzUzBGQlMwY3NWMEZCVEN4RFFVRnBRakpFTEd0Q1FVRnFRaXhEUVVGdlEyaERMRkZCUVhCRExFTkJRV1k3UVVGRlFTOURMR05CUVVGQkxFMUJRVTBzUTBGQlEyMUNMRTlCUVZBc1EwRkJaVVlzVFVGQlppeEZRVUYxUW5wTkxFOUJRWFpDTEVOQlFTdENMR2xDUVVFeVFqdEJRVUZCTzBGQlFVRXNiMEpCUVhwQ2QxRXNVMEZCZVVJN1FVRkJRU3h2UWtGQlpEbEdMRkZCUVdNN08wRkJRM2hFTEhOQ1FVRkpMRU5CUVVNNFFpeExRVUZNTEVOQlFWZHdRaXhoUVVGWUxFTkJRMFVzVFVGQlNTeERRVUZEYjBJc1MwRkJUQ3hEUVVGWEswSXNVVUZCV0N4RlFVRnhRbXhETEUxQlFYSkNMRU5CUVRSQ2JVVXNVMEZCTlVJc1EwRkVSaXhGUVVWRkxFMUJRVWtzUTBGQlF6bEdMRkZCUVVRc1EwRkdUanRCUVVsRUxHVkJURVE3UVVGTlJEdEJRVU5HTzBGQmVFUjNRanRCUVVGQk8wRkJRVUVzYVVKQk1FUjZRaXh0UWtGQlZUdEJRVUZCT3p0QlFVTlNPMEZCUTBFc2FVSkJRVXM0UWl4TFFVRk1MRU5CUVZkd1FpeGhRVUZZTEVOQlEwVnJReXhwUTBGRVJpeEZRVVZGTEV0QlFVczRReXhsUVVaUU96dEJRVWxCTEdsQ1FVRkxOVVFzUzBGQlRDeERRVUZYY0VJc1lVRkJXQ3hEUVVORmEwTXNiME5CUkVZc1JVRkZSU3hMUVVGTFowUXNhVUpCUmxBc1JVRk9VU3hEUVZkU096czdRVUZEUVRsRkxGbEJRVUZCTEUxQlFVMHNRMEZCUTBNc1NVRkJVQ3hEUVVGWkxFdEJRVXR0UWl4WFFVRk1MRU5CUVdsQ01rUXNhMEpCUVRkQ0xFVkJRV2xFZGxFc1QwRkJha1FzUTBGQmVVUXNWVUZCUVhWUExGRkJRVkVzUlVGQlNUdEJRVU51UlN4clFrRkJTU3hOUVVGSkxFTkJRVU12UWl4TFFVRk1MRU5CUVZjclFpeFJRVUZZTEUxQlFYbENlazhzVTBGQk4wSXNSVUZCZDBNN1FVRkRkRU1zYzBKQlFVa3NRMEZCUTNkUkxHbENRVUZNTEVOQlFYVkNMMElzVVVGQmRrSTdRVUZEUkR0QlFVTkdMR0ZCU2tRN08wRkJUVUU3UVVGRFJEdEJRVGRGZDBJN08wRkJRVUU3UVVGQlFTeFJRVUZwUWpCQ0xGTkJRV3BDTEVOQlFUTkNPenRCUVdkR1FTeFZRVUZOVFN4clFrRkJhMElzUjBGQlIwNHNVMEZCVXl4RFFVRkRUU3hyUWtGQlZpeEpRVUZuUXl4RlFVRXpSRHRCUVVWQkwwVXNUVUZCUVVFc1RVRkJUU3hEUVVGRFZ5eG5Ra0ZCVUN4RFFVRjNRaXRFTEhGQ1FVRjRRaXhGUVVFclF6dEJRVU0zUTBzc1VVRkJRVUVzYTBKQlFXdENMRVZCUVVVN1FVRkRiRUo2VWl4VlFVRkJRU3hMUVVGTExFVkJRVVVzTWtOQlEwWjVVaXhyUWtGRVFTeERRVVJoTzBGQlNXeENia1VzVlVGQlFVRXNVVUZCVVN4RlFVRkZPMEZCU2xFN1FVRkVlVUlzVDBGQkwwTTdRVUZUUVN4aFFVRlBPRVFzY1VKQlFWQTdRVUZEUkRzN096czdRVUZIU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlEwRXhSU3hOUVVGTkxFTkJRVU5YTEdkQ1FVRlFMRU5CUVhkQ05rUXNlVUpCUVhoQ0xFVkJRVzFFTzBGQlEycEVUeXhGUVVGQlFTeHJRa0ZCYTBJc1JVRkJSVHRCUVVOc1FucFNMRWxCUVVGQkxFdEJRVXNzUlVGQlJTeEZRVVJYTzBGQlJXeENjMDRzU1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUmxFN1FVRkVOa0lzUTBGQmJrUTdRVUZQUVN4eFJVRkJaVFJFTEhsQ1FVRm1MRVU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzcExRVHRCUVVOQk96dEJRVVZCT3p0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0SlFVTk5VenM3T3pzN096czdPenM3T3pzN1FVRkRTanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkZMR2xEUVVGelFqdEJRVUZCTEZWQlFWQnVVQ3hKUVVGUExGRkJRVkJCTEVsQlFVODdRVUZCUlR0QlFVVjRRanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdkRFFVRjNRanRCUVVGQkxGVkJRVkJCTEVsQlFVOHNVMEZCVUVFc1NVRkJUenRCUVVGRk8wRkJSVEZDTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3huUTBGQmIwTTdRVUZCUVN4VlFVRnVRbTlRTEU5QlFXMUNMRk5CUVc1Q1FTeFBRVUZ0UWp0QlFVRkJMRlZCUVZaRExFOUJRVlVzVTBGQlZrRXNUMEZCVlR0QlFVRkZPMEZCUlhSRE8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4clEwRkJPRU03UVVGQlFTeFZRVUV6UWtNc1UwRkJNa0lzVTBGQk0wSkJMRk5CUVRKQ08wRkJRVUVzVlVGQmFFSkRMR0ZCUVdkQ0xGTkJRV2hDUVN4aFFVRm5RanRCUVVGRk8wRkJSV2hFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3h2UTBGQlowUTdRVUZCUVN4VlFVRXpRa1FzVTBGQk1rSXNVMEZCTTBKQkxGTkJRVEpDTzBGQlFVRXNWVUZCYUVKRExHRkJRV2RDTEZOQlFXaENRU3hoUVVGblFqdEJRVUZGTzBGQlJXeEVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEc5RFFVRnRSRHRCUVVGQkxGVkJRVGxDUkN4VFFVRTRRaXhUUVVFNVFrRXNVMEZCT0VJN1FVRkJRU3hWUVVGdVFrWXNUMEZCYlVJc1UwRkJia0pCTEU5QlFXMUNPMEZCUVVFc1ZVRkJWa01zVDBGQlZTeFRRVUZXUVN4UFFVRlZPMEZCUVVVN1FVRkZja1E3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR1ZCUVdGV0xGTkJRV0lzUlVGQmQwSTdRVUZEZEVJc1ZVRkJUV0VzVjBGQlZ5eEhRVUZIWkN4dlEwRkJRU3hEUVVGblEwTXNVMEZCYUVNc1EwRkJjRUk3TzBGQlEwRXNWVUZCVFdVc09FSkJRVGhDTzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFTeHBRa0ZEYkVNc09FSkJRWE5DTzBGQlFVRXNaMEpCUVZBeFVDeEpRVUZQTEZOQlFWQkJMRWxCUVU4N1FVRkJSVHRCUVVSVk8wRkJRVUU3UVVGQlFTeHBRa0ZIYkVNc1owTkJRWGRDTzBGQlFVRXNaMEpCUVZCQkxFbEJRVThzVTBGQlVFRXNTVUZCVHp0QlFVRkZPMEZCU0ZFN1FVRkJRVHRCUVVGQkxHbENRVXRzUXl4blEwRkJiME03UVVGQlFTeG5Ra0ZCYmtKdlVDeFBRVUZ0UWl4VFFVRnVRa0VzVDBGQmJVSTdRVUZCUVN4blFrRkJWa01zVDBGQlZTeFRRVUZXUVN4UFFVRlZPMEZCUVVVN1FVRk1TanRCUVVGQk8wRkJRVUVzYVVKQlQyeERMRzFEUVVFNFF6dEJRVUZCTEdkQ1FVRXpRa01zVTBGQk1rSXNWVUZCTTBKQkxGTkJRVEpDTzBGQlFVRXNaMEpCUVdoQ1F5eGhRVUZuUWl4VlFVRm9Ra0VzWVVGQlowSTdRVUZCUlR0QlFWQmtPMEZCUVVFN1FVRkJRU3hwUWtGVGJFTXNjVU5CUVdkRU8wRkJRVUVzWjBKQlFUTkNSQ3hUUVVFeVFpeFZRVUV6UWtFc1UwRkJNa0k3UVVGQlFTeG5Ra0ZCYUVKRExHRkJRV2RDTEZWQlFXaENRU3hoUVVGblFqdEJRVUZGTzBGQlZHaENPMEZCUVVFN1FVRkJRU3hwUWtGWGJFTXNjVU5CUVcxRU8wRkJRVUVzWjBKQlFUbENSQ3hUUVVFNFFpeFZRVUU1UWtFc1UwRkJPRUk3UVVGQlFTeG5Ra0ZCYmtKR0xFOUJRVzFDTEZWQlFXNUNRU3hQUVVGdFFqdEJRVUZCTEdkQ1FVRldReXhQUVVGVkxGVkJRVlpCTEU5QlFWVTdRVUZCUlR0QlFWaHVRanM3UVVGQlFUdEJRVUZCTEZGQlFXbENSeXhYUVVGcVFpeERRVUZ3UXpzN1FVRmpRWFJHTEUxQlFVRkJMRTFCUVUwc1EwRkJRMWNzWjBKQlFWQXNRMEZCZDBJMlJTdzRRa0ZCZUVJc1JVRkJkMFE3UVVGRGRFUlVMRkZCUVVGQkxHdENRVUZyUWl4RlFVRkZPMEZCUTJ4Q2VsSXNWVUZCUVVFc1MwRkJTeXhGUVVGRkxHOUhRVU5HWjFNc1YwRkJWeXhEUVVGRFVDeHJRa0ZFV2l4SFFVVkJSU3hyUTBGQmEwTXNRMEZCUTBZc2EwSkJSbTVETEVOQlJHRTdRVUZMYkVKdVJTeFZRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRk1VVHRCUVVSclF5eFBRVUY0UkR0QlFWVkJMR0ZCUVU4MFJTdzRRa0ZCVUR0QlFVTkVPenM3TzBWQkwwWTRRMmhDT3p0QlFXdEhha1I0UlN4TlFVRk5MRU5CUVVOWExHZENRVUZRTEVOQlFYZENjMFVzYTBOQlFYaENMRVZCUVRSRU8wRkJRekZFUml4RlFVRkJRU3hyUWtGQmEwSXNSVUZCUlR0QlFVTnNRbnBTTEVsQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVOTWJWTXNUVUZCUVVFc1owSkJRV2RDTEVWQlFVVTdRVUZEYUVKRExGRkJRVUZCTEZGQlFWRXNSVUZCUlN4bFFVUk5PMEZCUldoQ1F5eFJRVUZCUVN4WFFVRlhMRVZCUVVVc2FVSkJSa2M3UVVGSGFFSkRMRkZCUVVGQkxGZEJRVmNzUlVGQlJTeHBRa0ZJUnp0QlFVbG9Ra01zVVVGQlFVRXNXVUZCV1N4RlFVRkZMRzFDUVVwRk8wRkJTMmhDUXl4UlFVRkJRU3hsUVVGbExFVkJRVVVzY1VKQlRFUTdRVUZOYUVKRExGRkJRVUZCTEdWQlFXVXNSVUZCUlR0QlFVNUVPMEZCUkdJc1MwRkVWenRCUVZkc1FtNUdMRWxCUVVGQkxGRkJRVkVzUlVGQlJUdEJRVmhSTzBGQlJITkRMRU5CUVRWRU8wRkJaMEpCTEd0R1FVRmxjVVVzYTBOQlFXWXNSVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNwS1FUdEJRVU5CT3p0QlFVVkJPenRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wbEJRMDFsT3pzN096czdPenM3T3pzN096dEJRVU5LTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSU3d5UWtGQlkyeFJMRWxCUVdRc1JVRkJhME03UVVGQlFTeFZRVUZrYlZFc1QwRkJZeXgxUlVGQlNpeEZRVUZKTzBGQlFVVTdRVUZGY0VNN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERKQ1FVRnJRbUlzVTBGQmJFSXNSVUZCTmtKRExHRkJRVGRDTEVWQlFUQkVPMEZCUVVFc1ZVRkJaRmtzVDBGQll5eDFSVUZCU2l4RlFVRkpPMEZCUVVVN1FVRkZOVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxESkNRVUZ2UlR0QlFVRkJMRlZCUVhCRVF5eFZRVUZ2UkN4MVJVRkJka003UVVGQlFTeGxRVUZOTEVsQlFVNDdRVUZCUVN4UFFVRjFRenRCUVVGQkxGVkJRVE5DUXl4TlFVRXlRanRCUVVGQkxGVkJRVzVDZGxBc1QwRkJiVUk3UVVGQlFTeFZRVUZXZDFBc1VVRkJWVHRCUVVGRk8wRkJSWFJGTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3huUWtGQlQzaFFMRTlCUVZBc1JVRkJaMEozVUN4UlFVRm9RaXhGUVVFd1FpeERRVUZGTzBGQlJUVkNPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHBRa0ZCVVhoUUxFOUJRVklzUlVGQmFVSjNVQ3hSUVVGcVFpeEZRVUV5UWl4RFFVRkZPMEZCUlRkQ08wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4bFFVRmhNMElzVTBGQllpeEZRVUYzUWp0QlFVTjBRaXhWUVVGTllTeFhRVUZYTEVkQlFVZE1MR2xFUVVGQkxFTkJRWGxEVWl4VFFVRjZReXhEUVVGd1FqczdRVUZEUVN4VlFVRk5ORUlzTUVKQlFUQkNPMEZCUVVFN08wRkJRVUU3TzBGQlF6bENMRGhEUVVGeFFqdEJRVUZCT3p0QlFVRkJPenRCUVVGQkxEUkRRVUZPZWxNc1NVRkJUVHRCUVVGT1FTeFpRVUZCUVN4SlFVRk5PMEZCUVVFN08wRkJRMjVDTERSRVFVRlRRU3hKUVVGVU8wRkJSVUVzWjBKQlFVc3dVeXhqUVVGTUxFZEJRWE5DTEVWQlFYUkNPMEZCU0cxQ08wRkJTWEJDT3p0QlFVdzJRanRCUVVGQk8wRkJRVUVzYVVKQlR6bENMSGxDUVVGblFuWkVMRkZCUVdoQ0xFVkJRVEJDTzBGQlFVRTdPMEZCUTNoQ0xIZExRVUZ6UWtFc1VVRkJkRUk3TzBGQlJVRXNaMEpCUVVsQkxGRkJRVkVzUzBGQlN5eHJRa0ZCYWtJc1JVRkJjVU03UVVGRGJrTTdRVUZEUkRzN1FVRkZSQ3hwUWtGQlMzVkVMR05CUVV3c1IwRkJjMElzUzBGQlMwRXNZMEZCVEN4SlFVRjFRaXhGUVVFM1F5eERRVkIzUWl4RFFWTjRRanM3UVVGRFFTeHBRa0ZCUzNSR0xFdEJRVXdzUTBGQlYzbEZMR2RDUVVGWUxFTkJRVFJDWXl4TlFVRTFRaXhEUVVGdFF5OVNMRTlCUVc1RExFTkJRVEpETEZWQlFVRnpRaXhKUVVGSkxFVkJRVWs3UVVGRGFrUXNiMEpCUVVrc1EwRkJRekJSTEdGQlFVd3NRMEZCYlVJN1FVRkJRekZSTEdkQ1FVRkJRU3hKUVVGSkxFVkJRVXBCTzBGQlFVUXNaVUZCYmtJN1FVRkRSQ3hoUVVaRU8wRkJSMFE3UVVGd1FqWkNPMEZCUVVFN1FVRkJRU3hwUWtGelFqbENMREpDUVVGclFtbE9MRkZCUVd4Q0xFVkJRVFJDTzBGQlFVRTdPMEZCUXpGQ0xEQkxRVUYzUWtFc1VVRkJlRUk3TzBGQlJVRXNaMEpCUVVsQkxGRkJRVkVzUzBGQlN5eHJRa0ZCYWtJc1JVRkJjVU03UVVGRGJrTTdRVUZEUkRzN1FVRkZSQ3hwUWtGQlMzVkVMR05CUVV3c1IwRkJjMElzUzBGQlMwRXNZMEZCVEN4SlFVRjFRaXhGUVVFM1F5eERRVkF3UWl4RFFWTXhRanM3UVVGRFFYUkhMRmxCUVVGQkxFMUJRVTBzUTBGQlEwTXNTVUZCVUN4RFFVRlpMRXRCUVV0eFJ5eGpRVUZxUWl4RlFVRnBRemxTTEU5QlFXcERMRU5CUVhsRExGVkJRVUZ6UWl4SlFVRkpMRVZCUVVrN1FVRkRMME1zYjBKQlFVa3NRMEZCUXpKUkxHVkJRVXdzUTBGQmNVSTdRVUZCUXpOUkxHZENRVUZCUVN4SlFVRkpMRVZCUVVwQk8wRkJRVVFzWlVGQmNrSTdRVUZEUkN4aFFVWkVPMEZCUjBRN1FVRnVRelpDTzBGQlFVRTdRVUZCUVN4cFFrRnhRemxDTERaQ1FVRnpRanRCUVVGQk96dEJRVUZCTEdkQ1FVRlFRU3hKUVVGUExGRkJRVkJCTEVsQlFVODdPMEZCUTNCQ08wRkJRMEVzWjBKQlFVa3NTMEZCUzNkUkxHTkJRVXdzUTBGQmIwSjRVU3hKUVVGd1FpeE5RVUU0UW5oQ0xGTkJRV3hETEVWQlFUWkRPMEZCUXpORExHMUNRVUZMWjFNc1kwRkJUQ3hEUVVGdlFuaFJMRWxCUVhCQ0xFVkJRVEJDTkZFc1VVRkJNVUlzUjBGQmNVTXNTVUZCY2tNc1EwRkVNa01zUTBGSE0wTTdPMEZCUTBFc2JVSkJRVXN4Uml4TFFVRk1MRU5CUVZkNVJTeG5Ra0ZCV0N4RFFVRTBRbXRDTEdGQlFUVkNMRU5CUVRCRE4xRXNTVUZCTVVNc1JVRkJaMFIwUWl4UFFVRm9SQ3hEUVVGM1JDeFZRVUZCYjFNc1VVRkJVU3hGUVVGSk8wRkJRMnhGTEhOQ1FVRkpMRU5CUVVORExHbENRVUZNTEVOQlFYVkNPMEZCUVVONlFpeHJRa0ZCUVVFc1UwRkJVeXhGUVVGRmRGQXNTVUZCV2p0QlFVRnJRblZRTEd0Q1FVRkJRU3hoUVVGaExFVkJRVVYxUWp0QlFVRnFReXhwUWtGQmRrSTdRVUZEUkN4bFFVWkVPMEZCUjBRN1FVRkRSanRCUVM5RE5rSTdRVUZCUVR0QlFVRkJMR2xDUVdsRU9VSXNaME5CUVhkQ08wRkJRVUU3TzBGQlFVRXNaMEpCUVZBNVVTeEpRVUZQTEZOQlFWQkJMRWxCUVU4N08wRkJRM1JDTzBGQlEwRXNaMEpCUVVrc1MwRkJTM2RSTEdOQlFVd3NRMEZCYjBKNFVTeEpRVUZ3UWl4TlFVRTRRbmhDTEZOQlFXeERMRVZCUVRaRE8wRkJRek5ETEcxQ1FVRkxaMU1zWTBGQlRDeERRVUZ2UW5oUkxFbEJRWEJDTEVWQlFUQkNORkVzVVVGQk1VSXNSMEZCY1VNc1MwRkJja01zUTBGRU1rTXNRMEZITTBNN08wRkJRMEV4Unl4alFVRkJRU3hOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZCV1N4TFFVRkxjVWNzWTBGQlRDeERRVUZ2UW5oUkxFbEJRWEJDTEVWQlFUQkNaMUlzVlVGQmRFTXNSVUZCYTBSMFV5eFBRVUZzUkN4RFFVTkZMRlZCUVVGdlV5eFJRVUZSTEVWQlFVazdRVUZEVml4elFrRkJTU3hEUVVGRFJ5eHRRa0ZCVEN4RFFVRjVRanRCUVVOMlFqTkNMR3RDUVVGQlFTeFRRVUZUTEVWQlFVVjBVQ3hKUVVSWk8wRkJSWFpDZFZBc2EwSkJRVUZCTEdGQlFXRXNSVUZCUlhWQ08wRkJSbEVzYVVKQlFYcENPMEZCU1VRc1pVRk9TRHRCUVZGRU8wRkJRMFk3UVVGb1JUWkNPMEZCUVVFN1FVRkJRU3hwUWtGclJUbENMR2REUVVGdlF6dEJRVUZCTEdkQ1FVRnVRakZDTEU5QlFXMUNMRk5CUVc1Q1FTeFBRVUZ0UWp0QlFVRkJMR2RDUVVGV1F5eFBRVUZWTEZOQlFWWkJMRTlCUVZVN1FVRkRiRU1zWjBKQlFVMDJRaXhaUVVGWkxFZEJRVWNzUzBGQlMxWXNZMEZCVEN4RFFVRnZRbkJDTEU5QlFYQkNMRU5CUVhKQ0xFTkJSR3RETEVOQlIyeERPenRCUVVOQkxHZENRVUZKT0VJc1dVRkJXU3hMUVVGTE1WTXNVMEZCY2tJc1JVRkJaME03UVVGRE9VSXNjVUpCUVU4c1MwRkJTMmRUTEdOQlFVd3NRMEZCYjBKd1FpeFBRVUZ3UWl4RFFVRlFPMEZCUTBFc2JVSkJRVXR2UWl4alFVRk1MRU5CUVc5Q2JrSXNUMEZCY0VJc1NVRkJLMEkyUWl4WlFVRXZRanRCUVVORU8wRkJRMFk3UVVFeFJUWkNPMEZCUVVFN1FVRkJRU3hwUWtFMFJUbENMR3REUVVFNFF6dEJRVUZCTEdkQ1FVRXpRalZDTEZOQlFUSkNMRk5CUVROQ1FTeFRRVUV5UWp0QlFVRkJMR2RDUVVGb1FrTXNZVUZCWjBJc1UwRkJhRUpCTEdGQlFXZENPenRCUVVNMVF6dEJRVU5CTEdkQ1FVTkZMRXRCUVV0cFFpeGpRVUZNTEVOQlFXOUNiRUlzVTBGQmNFSXNUVUZCYlVNNVVTeFRRVUZ1UXl4SlFVTkJMRXRCUVV0blV5eGpRVUZNTEVOQlFXOUNiRUlzVTBGQmNFSXNSVUZCSzBJd1FpeFZRVUV2UWl4RFFVRXdRM3BDTEdGQlFURkRMRTFCUVRaRUwxRXNVMEZHTDBRc1JVRkhSVHRCUVVOQkxHMUNRVUZMWjFNc1kwRkJUQ3hEUVVGdlFteENMRk5CUVhCQ0xFVkJRU3RDTUVJc1ZVRkJMMElzUTBGRFJYcENMR0ZCUkVZc1JVRkZSWEZDTEZGQlJrWXNSMEZGWVN4SlFVWmlPMEZCUjBRN1FVRkRSanRCUVhSR05rSTdRVUZCUVR0QlFVRkJMR2xDUVhkR09VSXNiME5CUVdkRU8wRkJRVUVzWjBKQlFUTkNkRUlzVTBGQk1rSXNVMEZCTTBKQkxGTkJRVEpDTzBGQlFVRXNaMEpCUVdoQ1F5eGhRVUZuUWl4VFFVRm9Ra0VzWVVGQlowSTdPMEZCUXpsRE8wRkJRMEVzWjBKQlEwVXNTMEZCUzJsQ0xHTkJRVXdzUTBGQmIwSnNRaXhUUVVGd1FpeE5RVUZ0UXpsUkxGTkJRVzVETEVsQlEwRXNTMEZCUzJkVExHTkJRVXdzUTBGQmIwSnNRaXhUUVVGd1FpeEZRVUVyUWpCQ0xGVkJRUzlDTEVOQlFUQkRla0lzWVVGQk1VTXNUVUZCTmtRdlVTeFRRVVl2UkN4RlFVZEZPMEZCUTBFc2JVSkJRVXRuVXl4alFVRk1MRU5CUVc5Q2JFSXNVMEZCY0VJc1JVRkJLMEl3UWl4VlFVRXZRaXhEUVVORmVrSXNZVUZFUml4RlFVVkZjVUlzVVVGR1JpeEhRVVZoTEV0QlJtSTdRVUZIUkR0QlFVTkdPMEZCYkVjMlFqdEJRVUZCTzBGQlFVRXNhVUpCYjBjNVFpeHZRMEZCYlVRN1FVRkJRU3huUWtGQk9VSjBRaXhUUVVFNFFpeFRRVUU1UWtFc1UwRkJPRUk3UVVGQlFTeG5Ra0ZCYmtKR0xFOUJRVzFDTEZOQlFXNUNRU3hQUVVGdFFqdEJRVUZCTEdkQ1FVRldReXhQUVVGVkxGTkJRVlpCTEU5QlFWVTdPMEZCUTJwRUxHZENRVU5GTEV0QlFVdHRRaXhqUVVGTUxFTkJRVzlDYkVJc1UwRkJjRUlzVFVGQmJVTTVVU3hUUVVGdVF5eEpRVU5CTEV0QlFVdG5VeXhqUVVGTUxFTkJRVzlDYkVJc1UwRkJjRUlzUlVGQkswSXdRaXhWUVVFdlFpeERRVUV3UXpWQ0xFOUJRVEZETEUxQlFYVkVOVkVzVTBGR2VrUXNSVUZIUlR0QlFVTkJPMEZCUTBFc2EwSkJRVTB5VXl4WFFVRlhMRWRCUVVjc1MwRkJTMWdzWTBGQlRDeERRVUZ2UW14Q0xGTkJRWEJDTEVWQlFTdENNRUlzVlVGQkwwSXNRMEZEYkVJMVFpeFBRVVJyUWl4RFFVRndRanRCUVVkQkxIRkNRVUZQTEV0QlFVdHZRaXhqUVVGTUxFTkJRVzlDYkVJc1UwRkJjRUlzUlVGQkswSXdRaXhWUVVFdlFpeERRVUV3UXpWQ0xFOUJRVEZETEVOQlFWQTdRVUZEUVN4dFFrRkJTMjlDTEdOQlFVd3NRMEZCYjBKc1FpeFRRVUZ3UWl4RlFVRXJRakJDTEZWQlFTOUNMRU5CUVRCRE0wSXNUMEZCTVVNc1NVRkJjVVE0UWl4WFFVRnlSRHRCUVVORU8wRkJRMFk3UVVGb1NEWkNPMEZCUVVFN1FVRkJRU3hwUWtGclNEbENMSFZDUVVGamJsSXNTVUZCWkN4RlFVRnJRenRCUVVGQk96dEJRVUZCTEdkQ1FVRmtiVkVzVDBGQll5eDFSVUZCU2l4RlFVRkpPenRCUVVOb1F6dEJRVU5CTEdkQ1FVRkpMRXRCUVV0TExHTkJRVXdzUTBGQmIwSjRVU3hKUVVGd1FpeE5RVUU0UW5oQ0xGTkJRV3hETEVWQlFUWkRPMEZCUXpORExHMUNRVUZMWjFNc1kwRkJUQ3hEUVVGdlFuaFJMRWxCUVhCQ0xHZEhRVU5MTEV0QlFVdHpUQ3hYUVVGTUxFTkJRV2xDT0VZc2NVSkJSSFJDTzBGQlJVVktMR2RDUVVGQlFTeFZRVUZWTEVWQlFVVTdRVUZHWkR0QlFVbEVMR0ZCVUN0Q0xFTkJVMmhET3pzN1FVRkRRU3huUWtGQlRVVXNXVUZCV1N4SFFVRkhMRXRCUVV0V0xHTkJRVXdzUTBGQmIwSjRVU3hKUVVGd1FpeERRVUZ5UWp0QlFVTkJiVkVzV1VGQlFVRXNUMEZCVHl4SFFVRkhMR2RFUVVGSlFTeFBRVUZRTEVOQlFWQTdRVUZEUVN4blFrRkJUV3RDTEdkQ1FVRm5RaXhIUVVGSGJFSXNUMEZCVHl4RFFVRkRZU3hWUVVGU0xFbEJRWE5DTEVWQlFTOURPMEZCUTBFc2JVSkJRVTlpTEU5QlFVOHNRMEZCUTJFc1ZVRkJaanRCUVVOQk9VY3NXVUZCUVVFc1RVRkJUU3hEUVVGRGIwZ3NUVUZCVUN4RFFVRmpTaXhaUVVGa0xFVkJRVFJDWml4UFFVRTFRaXhGUVdSblF5eERRV2RDYUVNN08wRkJRMEZsTEZsQlFVRkJMRmxCUVZrc1EwRkJRMDRzVVVGQllpeEhRVU5GTEV0QlFVc3hSaXhMUVVGTUxFTkJRVmQ1UlN4blFrRkJXQ3hMUVVGblEyNVNMRk5CUVdoRExFbEJRMEVzUzBGQlN6Qk5MRXRCUVV3c1EwRkJWM2xGTEdkQ1FVRllMRU5CUVRSQ1l5eE5RVUUxUWl4RFFVRnRRM1pSTEZGQlFXNURMRU5CUVRSRFJpeEpRVUUxUXl4RFFVWkdMRU5CYWtKblF5eERRWEZDYUVNN08wRkJRMEZyU3l4WlFVRkJRU3hOUVVGTkxFTkJRVU50UWl4UFFVRlFMRU5CUVdWblJ5eG5Ra0ZCWml4RlFVRnBRek5UTEU5QlFXcERMRU5CUVhsRExHbENRVUUyUWp0QlFVRkJPMEZCUVVFc2EwSkJRVE5DYjFNc1VVRkJNa0k3UVVGQlFTeHJRa0ZCYWtKTExGZEJRV2xDT3p0QlFVTndSU3h2UWtGQlNTeERRVUZEU1N4cFFrRkJUQ3hEUVVGMVFuWlNMRWxCUVhaQ0xFVkJRVFpDT0ZFc1VVRkJOMElzUlVGQmRVTkxMRmRCUVhaRE8wRkJRMFFzWVVGR1JEdEJRVWRFTzBGQk0wazJRanRCUVVGQk8wRkJRVUVzYVVKQk5razVRaXd5UWtGQmEwSTNRaXhUUVVGc1FpeEZRVUUyUWtNc1lVRkJOMElzUlVGQk1FUTdRVUZCUVN4blFrRkJaRmtzVDBGQll5eDFSVUZCU2l4RlFVRkpPenRCUVVONFJEdEJRVU5CTEdkQ1FVRkpMRXRCUVV0TExHTkJRVXdzUTBGQmIwSnNRaXhUUVVGd1FpeE5RVUZ0UXpsUkxGTkJRWFpETEVWQlFXdEVPMEZCUTJoRUxHMUNRVUZMWjFRc1lVRkJUQ3hEUVVGdFFteERMRk5CUVc1Q08wRkJRMFFzWVVGS2RVUXNRMEZOZUVRN096dEJRVU5CTEdkQ1FVRk5Oa0lzVjBGQlZ5eEhRVU5tTEV0QlFVdFlMR05CUVV3c1EwRkJiMEpzUWl4VFFVRndRaXhGUVVFclFqQkNMRlZCUVM5Q0xFTkJRVEJEZWtJc1lVRkJNVU1zUzBGQk5FUXNSVUZFT1VRN1FVRkZRWEpHTEZsQlFVRkJMRTFCUVUwc1EwRkJRMjlJTEUxQlFWQXNRMEZCWTBnc1YwRkJaQ3hGUVVFeVFtaENMRTlCUVROQ08wRkJRMEVzYVVKQlFVdExMR05CUVV3c1EwRkJiMEpzUWl4VFFVRndRaXhGUVVFclFqQkNMRlZCUVM5Q0xFTkJRVEJEZWtJc1lVRkJNVU1zU1VGQk1rUTBRaXhYUVVFelJDeERRVlozUkN4RFFWbDRSRHM3UVVGRFFTeHBRa0ZCUzFnc1kwRkJUQ3hEUVVGdlFteENMRk5CUVhCQ0xFVkJRU3RDTUVJc1ZVRkJMMElzUTBGQk1FTjZRaXhoUVVFeFF5eEZRVUY1UkhGQ0xGRkJRWHBFTEVkQlEwVXNTMEZCUzBvc1kwRkJUQ3hEUVVGdlFteENMRk5CUVhCQ0xFVkJRU3RDYzBJc1VVRkJMMElzU1VGRFFTeExRVUZMTVVZc1MwRkJUQ3hEUVVGWGVVVXNaMEpCUVZnc1EwRkJORUpyUWl4aFFVRTFRaXhEUVVFd1EzWkNMRk5CUVRGRExFVkJRWEZFY0ZBc1VVRkJja1FzUTBGRFJYRlFMR0ZCUkVZc1EwRkdSanRCUVV0RU8wRkJMMG8yUWp0QlFVRkJPMEZCUVVFc2FVSkJhVXM1UWl3eVFrRkJiMFU3UVVGQlFUczdRVUZCUVN4blFrRkJjRVJoTEZWQlFXOUVMSFZGUVVGMlF6dEJRVUZCTEhGQ1FVRk5MRWxCUVU0N1FVRkJRU3hoUVVGMVF6dEJRVUZCTEdkQ1FVRXpRa01zVFVGQk1rSTdRVUZCUVN4blFrRkJia0oyVUN4UFFVRnRRanRCUVVGQkxHZENRVUZXZDFBc1VVRkJWVHRCUVVOc1JTeG5Ra0ZCVFcxQ0xGVkJRVlVzUjBGQlIzWklMRTFCUVUwc1EwRkJRME1zU1VGQlVDeERRVUZaTEV0QlFVdHhSeXhqUVVGcVFpeEZRVUZwUTI1VExFMUJRV3BETEVOQlFYZERLMUlzVlVGQmVFTXNRMEZCYmtJN1FVRkZRWEZDTEZsQlFVRkJMRlZCUVZVc1EwRkJReTlUTEU5QlFWZ3NRMEZCYlVJc1ZVRkJRWE5DTEVsQlFVa3NSVUZCU1R0QlFVTjZRaXhyUWtGQlRXdFNMRmxCUVZrc1IwRkJSeXhOUVVGSkxFTkJRVU5XTEdOQlFVd3NRMEZCYjBKNFVTeEpRVUZ3UWl4RFFVRnlRanM3UVVGRlFTeHJRa0ZCU1d0U0xGbEJRVmtzUTBGQlEwNHNVVUZCYWtJc1JVRkJNa0k3UVVGRGVrSXNjMEpCUVVrc1EwRkJRekZHTEV0QlFVd3NRMEZCVjNsRkxHZENRVUZZTEVOQlFUUkNLMElzWTBGQk5VSXNRMEZEUlRGU0xFbEJSRVlzUlVGRlJYRlJMRTFCUmtZc1JVRkhSWFpRTEU5QlFVOHNTMEZCUzNSRExGTkJRVm9zUjBGQmQwSnpReXhQUVVGNFFpeEhRVUZyUTI5UkxGbEJRVmtzUTBGQlExTXNVMEZJYWtRc1JVRkpSWEpDTEZGQlFWRXNTVUZCU1Zrc1dVRkJXU3hEUVVGRFdpeFJRVW96UWp0QlFVMUVPMEZCUTBZc1lVRllSRHRCUVZsRU8wRkJhRXcyUWp0QlFVRkJPMEZCUVVFc2FVSkJhMHc1UWl4blFrRkJUM2hRTEU5QlFWQXNSVUZCWjBKM1VDeFJRVUZvUWl4RlFVRXdRanRCUVVONFFpeHBRa0ZCUzNOQ0xHVkJRVXdzUTBGQmNVSndWQ3hUUVVGeVFpeEZRVUZuUXl4RFFVRm9ReXhGUVVGdFEzTkRMRTlCUVc1RExFVkJRVFJEZDFBc1VVRkJOVU03UVVGRFJEdEJRWEJNTmtJN1FVRkJRVHRCUVVGQkxHbENRWE5NT1VJc2FVSkJRVkY0VUN4UFFVRlNMRVZCUVdsQ2QxQXNVVUZCYWtJc1JVRkJNa0k3UVVGRGVrSXNhVUpCUVV0elFpeGxRVUZNTEVOQlFYRkNjRlFzVTBGQmNrSXNSVUZCWjBNc1EwRkJhRU1zUlVGQmJVTnpReXhQUVVGdVF5eEZRVUUwUTNkUUxGRkJRVFZETzBGQlEwUTdRVUY0VERaQ08wRkJRVUU3UVVGQlFTeHBRa0V3VERsQ0xITkNRVUZoTzBGQlExZ3NaMEpCUVUxc1JpeEhRVUZITEVkQlFVY3NjMHBCUVZvN08wRkJSVUZzUWl4WlFVRkJRU3hOUVVGTkxFTkJRVU52U0N4TlFVRlFMRU5CUVdOc1J5eEhRVUZrTEVWQlFXMUNPMEZCUTJwQ2IwY3NZMEZCUVVFc1lVRkJZU3hGUVVGRkxFdEJRVXRCTEdGQlFVd3NRMEZCYlVKNlF5eEpRVUZ1UWl4RFFVRjNRaXhKUVVGNFFpeERRVVJGTzBGQlJXcENkME1zWTBGQlFVRXNhVUpCUVdsQ0xFVkJRVVVzUzBGQlMwRXNhVUpCUVV3c1EwRkJkVUo0UXl4SlFVRjJRaXhEUVVFMFFpeEpRVUUxUWl4RFFVWkdPMEZCUjJwQ05rTXNZMEZCUVVFc1pVRkJaU3hGUVVGRkxFdEJRVXRCTEdWQlFVd3NRMEZCY1VJM1F5eEpRVUZ5UWl4RFFVRXdRaXhKUVVFeFFpeERRVWhCTzBGQlNXcENPRU1zWTBGQlFVRXNUVUZCVFN4RlFVRkZMRXRCUVV0QkxFMUJRVXdzUTBGQldUbERMRWxCUVZvc1EwRkJhVUlzU1VGQmFrSXNRMEZLVXp0QlFVdHFRaXRETEdOQlFVRkJMRTlCUVU4c1JVRkJSU3hMUVVGTFFTeFBRVUZNTEVOQlFXRXZReXhKUVVGaUxFTkJRV3RDTEVsQlFXeENPMEZCVEZFc1lVRkJia0k3UVVGUlFTeHRRa0ZCVHpORUxFZEJRVkE3UVVGRFJEdEJRWFJOTmtJN08wRkJRVUU3UVVGQlFTeFJRVUZwUW05RkxGZEJRV3BDTEVOQlFXaERPenRCUVhsTlFYUkdMRTFCUVVGQkxFMUJRVTBzUTBGQlExY3NaMEpCUVZBc1EwRkJkMEl3Uml3d1FrRkJlRUlzUlVGQmIwUTdRVUZEYkVSaExGRkJRVUZCTEhGQ1FVRnhRaXhGUVVGRk8wRkJRM0pDTlZRc1ZVRkJRVUVzUzBGQlN5eEZRVUZGTUZNc09FSkJRVGhDTEVOQlFVTnJRaXh4UWtGRWFrSTdRVUZGY2tKMFJ5eFZRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRkdWenRCUVVReVFpeFBRVUZ3UkR0QlFVOUJMR0ZCUVU5NVJpd3dRa0ZCVUR0QlFVTkVPenM3TzBWQmRsSXdRM0JDT3p0QlFUQlNOME5xUml4TlFVRk5MRU5CUVVOWExHZENRVUZRTEVOQlFYZENjVVlzT0VKQlFYaENMRVZCUVhkRU8wRkJRM1JFYTBJc1JVRkJRVUVzY1VKQlFYRkNMRVZCUVVVN1FVRkRja0kxVkN4SlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGQlEyMVZMRTFCUVVGQkxGTkJRVk1zUlVGQlJTeEhRVUZhTzBGQlFXbENXQ3hOUVVGQlFTeFZRVUZWTEVWQlFVVTdRVUZCTjBJc1MwRkVZenRCUVVWeVFteEhMRWxCUVVGQkxGRkJRVkVzUlVGQlJUdEJRVVpYTzBGQlJDdENMRU5CUVhoRU8wRkJUMEVzT0VWQlFXVnZSaXc0UWtGQlppeEZPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOMlZFRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMDJRanM3T3pzN096czdPenM3T3pzN1FVRkRTanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwVXNkVUpCUVZVc1EwRkJSVHRCUVVWYU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHZRa0ZCVnl4RFFVRkZPMEZCUldJN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxIRkNRVUZaTEVOQlFVVTdRVUZGWkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2JVSkJRVlVzUTBGQlJUdEJRVVZhTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4MVFrRkJZeXhEUVVGRk8wRkJSV2hDTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4dFFrRkJWU3hEUVVGRk8wRkJSVm83UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhGQ1FVRlpMRU5CUVVVN1FVRkZaRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYlVKQlFWVXNRMEZCUlR0QlFVVmFPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeGxRVUZoY0VRc1UwRkJZaXhGUVVGM1FqdEJRVU4wUWl4VlFVRk5ZU3hYUVVGWExFZEJRVWRrTEc5RFFVRkJMRU5CUVdkRFF5eFRRVUZvUXl4RFFVRndRanM3UVVGRFFTeFZRVUZOY1VRc2FVTkJRV2xETzBGQlFVRTdPMEZCUVVFN08wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFTeHBRa0ZEY2tNc2JVSkJRVlVzUTBGQlJUdEJRVVI1UWp0QlFVRkJPMEZCUVVFc2FVSkJSM0pETEc5Q1FVRlhMRU5CUVVVN1FVRklkMEk3UVVGQlFUdEJRVUZCTEdsQ1FVdHlReXh4UWtGQldTeERRVUZGTzBGQlRIVkNPMEZCUVVFN1FVRkJRU3hwUWtGUGNrTXNiVUpCUVZVc1EwRkJSVHRCUVZCNVFqdEJRVUZCTzBGQlFVRXNhVUpCVTNKRExIVkNRVUZqTEVOQlFVVTdRVUZVY1VJN1FVRkJRVHRCUVVGQkxHbENRVmR5UXl4dFFrRkJWU3hEUVVGRk8wRkJXSGxDTzBGQlFVRTdRVUZCUVN4cFFrRmhja01zY1VKQlFWa3NRMEZCUlR0QlFXSjFRanRCUVVGQk8wRkJRVUVzYVVKQlpYSkRMRzFDUVVGVkxFTkJRVVU3UVVGbWVVSTdPMEZCUVVFN1FVRkJRU3hSUVVGcFFuaERMRmRCUVdwQ0xFTkJRWFpET3p0QlFXdENRWFJHTEUxQlFVRkJMRTFCUVUwc1EwRkJRMWNzWjBKQlFWQXNRMEZCZDBKdFNDeHBRMEZCZUVJc1JVRkJNa1E3UVVGRGVrUXZReXhSUVVGQlFTeHJRa0ZCYTBJc1JVRkJSVHRCUVVOc1FucFNMRlZCUVVGQkxFdEJRVXNzUlVGQlJTd3dSMEZEUm1kVExGZEJRVmNzUTBGQlExQXNhMEpCUkZvc1IwRkZRVGhETEhGRFFVRnhReXhEUVVGRE9VTXNhMEpCUm5SRExFTkJSR0U3UVVGTGJFSnVSU3hWUVVGQlFTeFJRVUZSTEVWQlFVVTdRVUZNVVR0QlFVUnhReXhQUVVFelJEdEJRVlZCTEdGQlFVOXJTQ3hwUTBGQlVEdEJRVU5FT3pzN08wVkJhRWRwUkhSRU96dEJRVzFIY0VSNFJTeE5RVUZOTEVOQlFVTlhMR2RDUVVGUUxFTkJRWGRDYTBnc2NVTkJRWGhDTEVWQlFTdEVPMEZCUXpkRU9VTXNSVUZCUVVFc2EwSkJRV3RDTEVWQlFVVTdRVUZEYkVKNlVpeEpRVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRUSGxWTEUxQlFVRkJMRzFDUVVGdFFpeEZRVUZGTzBGQlEyNUNReXhSUVVGQlFTeEpRVUZKTEVWQlFVVXNVMEZFWVR0QlFVVnVRa01zVVVGQlFVRXNTMEZCU3l4RlFVRkZMRlZCUmxrN1FVRkhia0pETEZGQlFVRkJMRTFCUVUwc1JVRkJSU3hYUVVoWE8wRkJTVzVDUXl4UlFVRkJRU3hKUVVGSkxFVkJRVVVzVTBGS1lUdEJRVXR1UWtNc1VVRkJRVUVzVVVGQlVTeEZRVUZGTEdGQlRGTTdRVUZOYmtKRExGRkJRVUZCTEVsQlFVa3NSVUZCUlN4VFFVNWhPMEZCVDI1Q1F5eFJRVUZCUVN4TlFVRk5MRVZCUVVVc1YwRlFWenRCUVZGdVFrTXNVVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJVbUU3UVVGRWFFSXNTMEZFVnp0QlFXRnNRak5JTEVsQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVdKUk8wRkJSSGxETEVOQlFTOUVPMEZCYTBKQkxHOUdRVUZsYVVnc2NVTkJRV1lzUlRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5vUzBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzU1VGQlRWY3NaMEpCUVdkQ0xFZEJRVWM3UVVGRGRrSkRMRVZCUVVGQkxFZEJRVWNzUlVGQlJUdEJRVUZETTFNc1NVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFWQXNSMEZFYTBJN1FVRkZka0p6UXl4RlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGQlEzUkRMRWxCUVVGQkxFbEJRVWtzUlVGQlJTeEhRVUZRTzBGQlFWazBVeXhKUVVGQlFTeGpRVUZqTEVWQlFVVTdRVUZCTlVJc1IwRkdiMEk3UVVGSGRrSnVVU3hGUVVGQlFTeERRVUZETEVWQlFVVTdRVUZCUTNwRExFbEJRVUZCTEVsQlFVa3NSVUZCUlN4SFFVRlFPMEZCUVZreVVpeEpRVUZCUVN4VFFVRlRMRVZCUVVVN1FVRkJka0lzUjBGSWIwSTdRVUZKZGtKclFpeEZRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkJRemRUTEVsQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVGUUxFZEJTbTlDTzBGQlMzWkNPRk1zUlVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUVVNNVV5eEpRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkJVQ3hIUVV4dlFqdEJRVTEyUWl0VExFVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVRkRMMU1zU1VGQlFVRXNTVUZCU1N4RlFVRkZMRWRCUVZBN1FVRkJXVFJUTEVsQlFVRkJMR05CUVdNc1JVRkJSVHRCUVVFMVFpeEhRVTV2UWp0QlFVOTJRbkJHTEVWQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVGRGVFNHNTVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVkFzUjBGUWIwSTdRVUZSZGtJMlNpeEZRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkJRemRLTEVsQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVGUUxFZEJVbTlDTzBGQlUzWkNOa2dzUlVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUVVNM1NDeEpRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkJVQ3hIUVZSdlFqdEJRVlYyUW5OUExFVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVRkRkRThzU1VGQlFVRXNTVUZCU1N4RlFVRkZMRWRCUVZBN1FVRkJXVEpTTEVsQlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVGMlFpeEhRVlp2UWp0QlFWZDJRbkZDTEVWQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVGRGFGUXNTVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVkFzUjBGWWIwSTdRVUZaZGtJc1QwRkJTenRCUVVGRFFTeEpRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkJVQ3hIUVZwclFqdEJRV0YyUW05RExFVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVRkRjRU1zU1VGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUVZBc1IwRmliMEk3UVVGamRrSTVRaXhGUVVGQlFTeERRVUZETEVWQlFVVTdRVUZCUXpoQ0xFbEJRVUZCTEVsQlFVa3NSVUZCUlN4SFFVRlFPMEZCUVZreVVpeEpRVUZCUVN4VFFVRlRMRVZCUVVVN1FVRkJka0lzUjBGa2IwSTdRVUZsZGtKelFpeEZRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkJRMnBVTEVsQlFVRkJMRWxCUVVrc1JVRkJSVHRCUVVGUUxFZEJabTlDTzBGQlowSjJRbXRVTEVWQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVGRGJGUXNTVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVkFzUjBGb1FtOUNPMEZCYVVKMlFtMVVMRVZCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVUZEYmxRc1NVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFWQTdRVUZxUW05Q0xFTkJRWHBDTzBGQmIwSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3U1VGRFRXOVVPenM3T3p0QlFVbEtPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUlN3d1FrRkRSVzVKTEVsQlJFWXNSVUZqUlR0QlFVRkJPenRCUVVGQkxHMUdRVkJKTEVWQlQwbzdRVUZCUVN3NFFrRllSVEJITEZOQlYwWTdRVUZCUVN4UlFWaGhNRUlzWlVGWFlpd3JRa0ZZSzBJc1NVRlhMMEk3UVVGQlFTdzRRa0ZXUlVNc1UwRlZSanM3UVVGQlFTeHBSRUZXTmtNc1JVRlZOME03UVVGQlFTd3JRMEZXWTBNc1RVRlZaRHRCUVVGQkxGRkJWbU5CTEUxQlZXUXNjME5CVm5WQ0xFZEJWWFpDTzBGQlFVRXNLME5CVmpSQ2VsTXNUMEZWTlVJN1FVRkJRU3hSUVZZMFFrRXNUMEZWTlVJc2MwTkJWbk5ETEVkQlZYUkRPMEZCUVVFc05rSkJWRVYzVUN4UlFWTkdPMEZCUVVFc1VVRlVXV3RFTEdOQlUxb3NPRUpCVkRaQ05VWXNaVUZUTjBJN1FVRkJRU3d5UWtGU1JUWkRMRTFCVVVZN1FVRkJRU3hSUVZKVlowUXNXVUZSVml3MFFrRlNlVUlzUlVGUmVrSTdPMEZCUVVFc2IwWkJSa2tzUlVGRlNqdEJRVUZCTEdkRFFVeEZPVUlzVTBGTFJqdEJRVUZCTEZGQlRHRXJRaXhuUWtGTFlpeG5RMEZNWjBNc1NVRkxhRU03UVVGQlFTd3JRa0ZLUlhCRUxGRkJTVVk3UVVGQlFTeFJRVXBaY1VRc1pVRkpXaXdyUWtGS09FSXZSaXhsUVVrNVFqdEJRVUZCTERaQ1FVaEZOa01zVFVGSFJqdEJRVUZCTEZGQlNGVnRSQ3hoUVVkV0xEWkNRVWd3UWl4RlFVY3hRanM3UVVGQlFTeFJRVVJCUXl4alFVTkJMSFZGUVVScFFpeExRVU5xUWpzN1FVRkJRVHM3UVVGRFFTdzRRa0ZCVFRWSkxFbEJRVTQ3UVVGRlFTeFZRVUZMTmtrc1lVRkJUQ3hIUVVGeFFpeEZRVUZ5UWp0QlFVTkJMRlZCUVV0RExHTkJRVXdzUjBGQmMwSXNSVUZCZEVJN1FVRkRRU3hWUVVGTFJpeGpRVUZNTEVkQlFYTkNRU3hqUVVGMFFpeERRVXhCTEVOQlQwRTdPMEZCUTBGS0xFbEJRVUZCTEZsQlFWa3NRMEZCUXk5VkxFOUJRV0lzUTBGQmNVSXNhVUpCUVhGRU8wRkJRVUVzVlVGQmJrUnpRaXhKUVVGdFJDeFRRVUZ1UkVFc1NVRkJiVVE3UVVGQlFTeFZRVUUzUTJkVkxGTkJRVFpETEZOQlFUZERRU3hUUVVFMlF6dEJRVUZCTEd0RFFVRnNRME1zVTBGQmEwTTdRVUZCUVN4VlFVRnNRMEVzVTBGQmEwTXNaME5CUVhSQ2RrSXNaMEpCUVhOQ096dEJRVU40UlN4WlFVRkxkMElzYlVKQlFVd3NRMEZCZVVKc1ZTeEpRVUY2UWl4RlFVRXJRanRCUVVNM1FtZFZMRkZCUVVGQkxGTkJRVk1zUlVGQlZFRXNVMEZFTmtJN1FVRkZOMEpETEZGQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGR05rSTdRVUZITjBKWUxGRkJRVUZCTEZOQlFWTXNSVUZCUlR0QlFVRkRReXhWUVVGQlFTeE5RVUZOTEVWQlFVNUJMRTFCUVVRN1FVRkJVM3BUTEZWQlFVRkJMRTlCUVU4c1JVRkJVRUU3UVVGQlZDeFRRVWhyUWp0QlFVazNRalpSTEZGQlFVRkJMRk5CUVZNc1JVRkJSVEJDTEdWQlNtdENPMEZCU3pkQ0wwTXNVVUZCUVVFc1VVRkJVU3hGUVVGRmEwUTdRVUZNYlVJc1QwRkJMMEk3UVVGUFJDeExRVkpFTEVWQlVrRXNRMEZyUWtFN08wRkJRMEZKTEVsQlFVRkJMR0ZCUVdFc1EwRkJRMnhXTEU5QlFXUXNRMEZCYzBJc2FVSkJRWFZDTzBGQlFVRXNWVUZCY2tKelFpeEpRVUZ4UWl4VFFVRnlRa0VzU1VGQmNVSTdRVUZCUVN4VlFVRm1aMVVzVTBGQlpTeFRRVUZtUVN4VFFVRmxPenRCUVVNelF5eFpRVUZMUnl4dlFrRkJUQ3hEUVVFd1FtNVZMRWxCUVRGQ0xFVkJRV2RETzBGQlF6bENaMVVzVVVGQlFVRXNVMEZCVXl4RlFVRlVRU3hUUVVRNFFqdEJRVVU1UW5KRExGRkJRVUZCTEZOQlFWTXNSVUZCUlN0Q0xHZENRVVp0UWp0QlFVYzVRbkJFTEZGQlFVRkJMRkZCUVZFc1JVRkJSWEZFTzBGQlNHOUNMRTlCUVdoRE8wRkJTMFFzUzBGT1JEdEJRVzVDUVR0QlFUQkNSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMWRCUTBVc2EwTkJRWGxDY2tVc1UwRkJla0lzUlVGQmIwTkRMR0ZCUVhCRExFVkJRVzFFTzBGQlEycEVMRlZCUVVrc1MwRkJTMmxDTEdOQlFVd3NRMEZCYjBKc1FpeFRRVUZ3UWl4RlFVRXJRakJDTEZWQlFTOUNMRU5CUVRCRGVrSXNZVUZCTVVNc1JVRkJlVVJ4UWl4UlFVRTNSQ3hGUVVGMVJUdEJRVU55UlN4WlFVTkZMRXRCUVVzeFJpeExRVUZNTEVOQlFWZDVSU3huUWtGQldDeERRVUUwUW5sRkxHZENRVUUxUWl4RFFVTkZPVVVzVTBGRVJpeEZRVVZGUXl4aFFVWkdMRTFCUjAwc1YwRktVaXhGUVV0Rk8wRkJRMEU3UVVGRFFYSlBMRlZCUVVGQkxFOUJRVThzUTBGQlEwTXNTVUZCVWl4dlJFRkRPRU52VHl4aFFVUTVReXgxUWtGRGQwVkVMRk5CUkhoRkxIVkNRVU00Uml4TFFVRkxjRVVzUzBGQlRDeERRVUZYZEVNc1JVRkVla2M3UVVGSFFTeGxRVUZMTkVnc1kwRkJUQ3hEUVVGdlFteENMRk5CUVhCQ0xFVkJRU3RDTUVJc1ZVRkJMMElzUTBGRFJYcENMR0ZCUkVZc1JVRkZSWEZDTEZGQlJrWXNSMEZGWVN4TFFVWmlPMEZCUjBRc1UwRmlSQ3hOUVdGUE8wRkJRMHc3UVVGRFFTeGpRVUZOZVVRc1YwRkJWeXhIUVVGSExFdEJRVXR1U2l4TFFVRk1MRU5CUVZkNVJTeG5Ra0ZCV0N4RFFVRTBRakpGTEhOQ1FVRTFRaXhEUVVOc1FtaEdMRk5CUkd0Q0xFVkJSV3hDUXl4aFFVWnJRaXhEUVVGd1FqczdRVUZKUVN4alFVRlBNRVVzVTBGQlVDeEhRVUZ2UWl4TFFVRkxla1FzWTBGQlRDeERRVUZ2UW14Q0xGTkJRWEJDTEVWQlFTdENNRUlzVlVGQkwwSXNRMEZEYkVKNlFpeGhRVVJyUWl4RFFVRndRaXhEUVVGUE1FVXNVMEZCVUR0QlFVbEJMMG9zVlVGQlFVRXNUVUZCVFN4RFFVRkRjME1zVFVGQlVDeERRVUZqZVVnc1UwRkJaQ3hGUVVGNVFuWldMRTlCUVhwQ0xFTkJRV2xETEZWQlFVRTJWaXhoUVVGaExFVkJRVWs3UVVGRGFFUkJMRmxCUVVGQkxHRkJRV0VzUTBGQlF6TkVMRkZCUVdRc1IwRkJlVUo1UkN4WFFVRlhMRU5CUVVOdVZTeFJRVUZhTEVOQlFYRkNjVlVzWVVGQllTeERRVUZEZGxVc1NVRkJia01zUTBGQmVrSTdRVUZEUkN4WFFVWkVPMEZCUjBRN1FVRkRSanRCUVVOR08wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4NVFrRkJaMEpwVGl4UlFVRm9RaXhGUVVFd1FqdEJRVU40UWl4WFFVRkxOa2NzWVVGQlRDeEhRVUZ4UWl4TFFVRkxRU3hoUVVGTUxFbEJRWE5DTEVWQlFUTkRPMEZCUTBFc1YwRkJTME1zWTBGQlRDeEhRVUZ6UWl4TFFVRkxRU3hqUVVGTUxFbEJRWFZDTEVWQlFUZERPenRCUVVWQkxITklRVUZ6UWpsSExGRkJRWFJDT3p0QlFVVkJMRlZCUVVsQkxGRkJRVkVzUzBGQlN5eHhRa0ZCYWtJc1JVRkJkME03UVVGRGRFTXNZVUZCU3k5Q0xFdEJRVXdzUTBGQlZ5dEhMRzFDUVVGWUxFTkJRU3RDZFVNc1owSkJRUzlDTEVkQlEwVXNRMEZCUXl4TFFVRkxReXhsUVVGT0xFbEJRWGxDTEVOQlJETkNPMEZCUlVRN1FVRkRSanM3TzFkQlJVUXNPRUpCUVhOQ08wRkJRVUVzVlVGQlVIcFZMRWxCUVU4c1UwRkJVRUVzU1VGQlR6czdRVUZEY0VJc2IwaEJRVzlDTzBGQlFVTkJMRkZCUVVGQkxFbEJRVWtzUlVGQlNrRTdRVUZCUkN4UFFVRndRaXhGUVVSdlFpeERRVWR3UWpzN08wRkJRMEVzVlVGQlNTeExRVUZMT0ZRc1lVRkJUQ3hEUVVGdFFqbFVMRWxCUVc1Q0xFMUJRVFpDZUVJc1UwRkJha01zUlVGQk5FTTdRVUZETVVNc1lVRkJTMnRYTEhkQ1FVRk1MRU5CUVRoQ01WVXNTVUZCT1VJc1JVRkJiME1zUzBGQlN6aFVMR0ZCUVV3c1EwRkJiVUk1VkN4SlFVRnVRaXhEUVVGd1F6dEJRVU5FTzBGQlEwWTdPenRYUVVWRUxHdERRVUU0UXp0QlFVRkJMRlZCUVROQ2MxQXNVMEZCTWtJc1UwRkJNMEpCTEZOQlFUSkNPMEZCUVVFc1ZVRkJhRUpETEdGQlFXZENMRk5CUVdoQ1FTeGhRVUZuUWpzN1FVRkROVU1zZDBoQlFYZENPMEZCUVVORUxGRkJRVUZCTEZOQlFWTXNSVUZCVkVFN1FVRkJSQ3hQUVVGNFFpeEZRVVEwUXl4RFFVYzFRenM3TzBGQlEwRXNWVUZCU1N4TFFVRkxkMFVzWVVGQlRDeERRVUZ0UW5oRkxGTkJRVzVDTEUxQlFXdERReXhoUVVGMFF5eEZRVUZ4UkR0QlFVTnVSQ3hoUVVGTGJVWXNkMEpCUVV3c1EwRkJPRUp3Uml4VFFVRTVRaXhGUVVGNVF5eExRVUZMZDBVc1lVRkJUQ3hEUVVGdFFuaEZMRk5CUVc1Q0xFTkJRWHBETzBGQlEwUTdRVUZEUmpzN08xZEJSVVFzYlVKQlFWVTdRVUZCUVRzN1FVRkRVanRCUVVOQkxGZEJRVXQxUXl4TlFVRk1MRWRCUmxFc1EwRkpVanM3UVVGRFFTeFBRVUZETEV0QlFVdHBReXhoUVVGT0xFVkJRWEZDTEV0QlFVdERMR05CUVRGQ0xFVkJRVEJEY2xZc1QwRkJNVU1zUTBGQmEwUXNWVUZCUVN0U0xFMUJRVTBzUlVGQlNUdEJRVU14UkhaSExGRkJRVUZCTEUxQlFVMHNRMEZCUTIxQ0xFOUJRVkFzUTBGQlpXOUdMRTFCUVdZc1JVRkJkVUl2VWl4UFFVRjJRaXhEUVVFclFpeHBRa0ZCWjBNN1FVRkJRVHRCUVVGQkxHTkJRVGxDTkZFc1UwRkJPRUk3UVVGQlFTeGpRVUZ1UWtNc1lVRkJiVUk3TzBGQlF6ZEVMR05CUVVrc1RVRkJTU3hEUVVGRGFVSXNZMEZCVEN4RFFVRnZRbXhDTEZOQlFYQkNMRVZCUVN0Q01FSXNWVUZCTDBJc1EwRkJNRU42UWl4aFFVRXhReXhGUVVGNVJIRkNMRkZCUVRkRUxFVkJRWFZGTzBGQlEzSkZMR3RDUVVGSkxFTkJRVU14Uml4TFFVRk1MRU5CUVZkNVJTeG5Ra0ZCV0N4RFFVRTBRbWRHTEdWQlFUVkNMRU5CUVRSRGNrWXNVMEZCTlVNc1JVRkJkVVJETEdGQlFYWkVPMEZCUTBRN1FVRkRSaXhUUVVwRU8wRkJTMFFzVDBGT1JEdEJRVTlFT3pzN1YwRkZSQ3h2UWtGQlZ6dEJRVU5VTEZkQlFVdHhSaXhQUVVGTU8wRkJRMFE3T3p0WFFVVkVMSEZDUVVGWk8wRkJRMVlzVjBGQlMwTXNUMEZCVER0QlFVTkVPenM3VjBGRlJDeHRRa0ZCVlR0QlFVRkJPenRCUVVOU08wRkJRMEVzVjBGQlN5OURMRTlCUVV3c1IwRkdVU3hEUVVsU096dEJRVU5CTEU5QlFVTXNTMEZCUzJkRExHRkJRVTRzUlVGQmNVSXNTMEZCUzBNc1kwRkJNVUlzUlVGQk1FTnlWaXhQUVVFeFF5eERRVUZyUkN4VlFVRkJLMUlzVFVGQlRTeEZRVUZKTzBGQlF6RkVka2NzVVVGQlFVRXNUVUZCVFN4RFFVRkRiVUlzVDBGQlVDeERRVUZsYjBZc1RVRkJaaXhGUVVGMVFpOVNMRTlCUVhaQ0xFTkJRU3RDTEdsQ1FVRm5RenRCUVVGQk8wRkJRVUVzWTBGQk9VSTBVU3hUUVVFNFFqdEJRVUZCTEdOQlFXNUNReXhoUVVGdFFqczdRVUZETjBRc1kwRkJTU3hOUVVGSkxFTkJRVU5wUWl4alFVRk1MRU5CUVc5Q2JFSXNVMEZCY0VJc1JVRkJLMEl3UWl4VlFVRXZRaXhEUVVFd1EzcENMR0ZCUVRGRExFVkJRWGxFY1VJc1VVRkJOMFFzUlVGQmRVVTdRVUZEY2tVc2EwSkJRVWtzUTBGQlF6RkdMRXRCUVV3c1EwRkJWM2xGTEdkQ1FVRllMRU5CUVRSQ2JVWXNZMEZCTlVJc1EwRkJNa040Uml4VFFVRXpReXhGUVVGelJFTXNZVUZCZEVRN1FVRkRSRHRCUVVOR0xGTkJTa1E3UVVGTFJDeFBRVTVFTzBGQlQwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3l0RlFVTkZPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRnBRbmRHTEdkQ1FVRkJRU3hKUVVGcVFpeFZRVUZwUWtFc1NVRkJha0k3UVVGRFJUZExMR2RDUVVGQlFTeE5RVUZOTEVOQlFVTnRRaXhQUVVGUUxFTkJRV1VzUzBGQlMzbEpMR0ZCUVhCQ0xFVkJRVzFEY0ZZc1QwRkJia01zUTBGQk1rTXNhMEpCUVRKQ08wRkJRVUU3UVVGQlFTeHpRa0ZCZWtJMFVTeFRRVUY1UWp0QlFVRkJMSE5DUVVGa2QwSXNVVUZCWXpzN1FVRkRjRVU3UVVGRFFTdzRRMEZCT0VJc1RVRkJTU3hEUVVGRFRpeGpRVUZNTEVOQlFXOUNiRUlzVTBGQmNFSXNSVUZCSzBJd1FpeFZRVUV2UWl4RFFVTTFRa1lzVVVGRU5FSXNRMEZCT1VJN1FVRkJRU3h6UWtGQlQwWXNVVUZCVUN4NVFrRkJUMEVzVVVGQlVEdEJRVUZCTEhOQ1FVRnBRbkZFTEZOQlFXcENMSGxDUVVGcFFrRXNVMEZCYWtJN08wRkJTVUVzYzBKQlFVa3NRMEZCUTNKRUxGRkJRVXdzUlVGQlpUdEJRVU5pTzBGQlEwUXNiVUpCVW0xRkxFTkJWWEJGT3pzN1FVRkRRU3d5UjBGUlN5eE5RVUZKTEVOQlFVTktMR05CUVV3c1EwRkJiMEpzUWl4VFFVRndRaXhEUVZKTUxFZEJVMHN5UlN4VFFVRlRMRU5CUVVOakxFbEJRVWtzUTBGQlEzWllMRXRCUVU0c1EwRlVaRHRCUVVGQkxITkNRVU5SWjFZc1RVRkVVaXd3UWtGRFJYaFRMRWxCUkVZN1FVRkJRU3h6UWtGRldXZFdMR05CUmxvc01FSkJSVVZ3UlN4UlFVWkdPMEZCUVVFc2MwSkJSMFV3UXl4VFFVaEdMREJDUVVkRlFTeFRRVWhHTzBGQlFVRXNjMEpCU1VVelFpeFRRVXBHTERCQ1FVbEZRU3hUUVVwR08wRkJRVUVzYzBKQlMwVnlRaXhSUVV4R0xEQkNRVXRGUVN4UlFVeEdPMEZCUVVFc2MwSkJUVVZ6UXl4alFVNUdMREJDUVUxRlFTeGpRVTVHT3p0QlFWbEJMSE5DUVVGTmNVTXNWMEZCVnl4SFFVRkhMRTFCUVVrc1EwRkJReTlLTEV0QlFVd3NRMEZCVjNsRkxHZENRVUZZTEVOQlFUUkNNa1VzYzBKQlFUVkNMRU5CUTJ4Q2FFWXNVMEZFYTBJc1JVRkZiRUozUWl4UlFVWnJRaXhEUVVGd1FpeERRWFpDYjBVc1EwRTBRbkJGT3pzN1FVRkRRU3h6UWtGQlNTeERRVUZEYTBVc1kwRkJSQ3hKUVVGdFFpeERRVUZEUXl4WFFVRlhMRU5CUVVNdlZTeFJRVUZhTEVOQlFYRkNjMU1zVFVGQmNrSXNRMEZCZUVJc1JVRkJjMFE3UVVGRGNFUTdRVUZEUkN4dFFrRXZRbTFGTEVOQmFVTndSVHRCUVVOQk96czdRVUZEUVN4elFrRkJTVzVETEUxQlFVMHNSMEZCUnl4RFFVRmlPMEZCUTBFc2MwSkJRVTAyUlN4UlFVRlJMRWRCUVVkSUxFbEJRVWtzUTBGQlEwY3NVVUZCVEN4SFFVRm5RaXhKUVVGcVF6czdRVUZEUVN4elFrRkJTVUVzVVVGQlVTeEhRVUZIZGtRc1UwRkJaaXhGUVVFd1FqdEJRVU40UWl4M1FrRkJUWGRFTEZWQlFWVXNSMEZCUjNoRUxGTkJRVk1zUjBGQlJ5eERRVUZhTEVkQlFXZENkVVFzVVVGQlVTeEhRVUZIZGtRc1UwRkJNMElzUjBGQmRVTXNRMEZCTVVRN1FVRkRRWFJDTEc5Q1FVRkJRU3hOUVVGTkxFZEJRMHAxUXl4alFVRmpMRXRCUVV0d1ZTeFRRVUZ1UWl4SFFVTkpiMVVzWTBGRVNpeEhRVVZKT1ZFc2JVSkJRVUVzUTBGQlpTeERRVUZtTEVWQlFXdENMRU5CUVd4Q0xFVkJRWEZDY1ZRc1ZVRkJja0lzUTBGSVRqdEJRVWxFT3p0QlFVTkVMSE5DUVVGTlJTeFhRVUZYTEVkQlFVY3pWaXhKUVVGSkxFTkJRVU00UWl4SFFVRk1MRU5CUVZNd1ZDeFJRVUZVTEVWQlFXMUNka1FzVTBGQmJrSXNRMEZCY0VJc1EwRTFRMjlGTEVOQk9FTndSVHM3UVVGRFFTeHpRa0ZCVFRKRUxGRkJRVkVzUjBGQlIwb3NVVUZCVVN4SFFVRkhka1FzVTBGQk5VSTdPMEZCUlVFc2MwSkJRVWt5UkN4UlFVRlJMRWRCUVVjc1EwRkJaaXhGUVVGclFqdEJRVU5vUWp0QlFVTkJMREJDUVVGSkxFTkJRVU5ETEc5Q1FVRk1MRU5CUTBWcVJ5eFRRVVJHTEVWQlJVVjNRaXhSUVVaR0xFVkJSMFV3UWl4TlFVaEdMRVZCU1VWdVF5eE5RVXBHTEVWQlMwVm5SaXhYUVV4R0xFVkJUVVV4UkN4VFFVNUdMRVZCVDBWeVFpeFJRVkJHTzBGQlUwUXNiVUpCV0VRc1RVRlhUenRCUVVOTUxIZENRVUZOTmtVc1YwRkJWU3hIUVVOa04wSXNVMEZCVXl4RFFVRkRlRk1zVDBGQlZpeEhRVUZ2UWl4RFFVRndRaXhIUVVGM1FuZFZMRkZCUVZFc1IwRkJSMmhETEZOQlFWTXNRMEZCUTNoVExFOUJRVGRETEVkQlFYVkVMRU5CUkhwRUxFTkJSRXNzUTBGSFREczdPMEZCUTBFc2QwSkJRVTB3VlN4WFFVRlhMRWRCUVVjeFZDeHRRa0ZCUVN4RFFVTnNRblZQTEUxQlJHdENMRVZCUld4Q1FTeE5RVUZOTEVkQlFVZHBSQ3hUUVVGVExFTkJRVU5ETEUxQlJrUXNSVUZIYkVJM1ZDeEpRVUZKTEVOQlFVTTRRaXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaTWxRc1YwRkJXaXhEUVVoclFpeERRVUZ3UWpzN1FVRkxRU3d3UWtGQlNTeERRVUZEVFN4clFrRkJUQ3hEUVVORmJrY3NVMEZFUml4RlFVVkZkMElzVVVGR1JpeEZRVWRGTUVJc1RVRklSaXhGUVVsRmJrTXNUVUZLUml4RlFVdEZiVVlzVjBGTVJpeEZRVTFGU0N4WFFVNUdMRVZCVDBWRExGRkJVRVlzUlVGUlJUTkVMRk5CVWtZc1JVRlRSWEpDTEZGQlZFWTdRVUZYUkR0QlFVTkdMR2xDUVdwR1JEczdRVUZFUmp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPenM3T3pzN1FVRnhSa0U3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3NFFrRkRSV2hDTEZOQlJFWXNSVUZGUlhkQ0xGRkJSa1lzUlVGSFJUUkZMRlZCU0VZc1JVRkpSVU1zVlVGS1JpeEZRVXRGVGl4WFFVeEdMRVZCVFVWUExGbEJUa1lzUlVGUFJYUkdMRkZCVUVZc1JVRlJSVHRCUVVGQk96dEJRVU5CTzBGQlEwRXNWVUZCVFhWR0xHRkJRV0VzUjBGQlJ5eExRVUZMTTBzc1MwRkJUQ3hEUVVGWGVVVXNaMEpCUVZnc1EwRkJORUp0Unl4MVFrRkJOVUlzUTBGRGNFSjRSeXhUUVVSdlFpeEZRVVZ3UW5kQ0xGRkJSbTlDTEVWQlIzQkNORVVzVlVGSWIwSXNSVUZKY0VKRExGVkJTbTlDTEVWQlMzQkNUaXhYUVV4dlFpeEZRVTF3UWk5RkxGRkJUbTlDTEVOQlFYUkNMRU5CUmtFc1EwRlhRVHM3TzBGQlEwRjFSaXhOUVVGQlFTeGhRVUZoTEVOQlFVTjRWeXhKUVVGa0xFTkJRVzFDTEZsQlFVMDdRVUZEZGtJc1dVRkJTU3hEUVVGRGQxY3NZVUZCWVN4RFFVRkRlbGtzVVVGQmJrSXNSVUZCTmtJN1FVRkRNMElzWjBKQlFVa3NRMEZCUXpoT0xFdEJRVXdzUTBGQlYzbEZMR2RDUVVGWUxFTkJRVFJDYlVjc2RVSkJRVFZDTEVOQlEwVjRSeXhUUVVSR0xFVkJSVVYzUWl4UlFVWkdMRVZCUjBVMFJTeFZRVWhHTEVWQlNVVXNRMEZLUml4RlFVdEZSU3haUVV4R0xFVkJUVVYwUml4UlFVNUdPMEZCVVVRN1FVRkRSaXhQUVZoRU8wRkJXVVE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096dDNSa0ZEUlN4clFrRkRSV2hDTEZOQlJFWXNSVUZGUlhkQ0xGRkJSa1lzUlVGSFJUUkZMRlZCU0VZc1JVRkpSVU1zVlVGS1JpeEZRVXRGU0N4WFFVeEdMRVZCVFVWSUxGZEJUa1lzUlVGUFJVTXNVVUZRUml4RlFWRkZUU3haUVZKR0xFVkJVMFYwUml4UlFWUkdPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVmRGTzBGQlEwMTVSaXhuUWtGQlFVRXNXVUZhVWl4SFFWbDFRaXhMUVVGTE4wc3NTMEZCVEN4RFFVRlhlVVVzWjBKQlFWZ3NRMEZCTkVKdFJ5eDFRa0ZCTlVJc1EwRkRia0o0Unl4VFFVUnRRaXhGUVVWdVFuZENMRkZCUm0xQ0xFVkJSMjVDTkVVc1ZVRkliVUlzUlVGSmJrSkRMRlZCU20xQ0xFVkJTMjVDVGl4WFFVeHRRaXhGUVUxdVFpOUZMRkZCVG0xQ0xFTkJXblpDTzBGQlFVRTdRVUZCUVN4MVFrRnhRbEY1Uml4WlFYSkNVanM3UVVGQlFUdEJRVUZCTEc5Q1FYVkNUMEVzV1VGQldTeERRVUZETTFrc1VVRjJRbkJDTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVhkQ1NUdEJRVU5OTkZrc1owSkJRVUZCTEZkQmVrSldMRWRCZVVKM1FpeExRVUZMT1Vzc1MwRkJUQ3hEUVVGWGVVVXNaMEpCUVZnc1EwRkJORUp0Unl4MVFrRkJOVUlzUTBGRGJFSjRSeXhUUVVSclFpeEZRVVZzUW5kQ0xGRkJSbXRDTEVWQlIyeENORVVzVlVGSWEwSXNSVUZKYkVKR0xGZEJTbXRDTEVWQlMyeENSaXhSUVV4clFpeEZRVTFzUW1oR0xGRkJUbXRDTEVOQmVrSjRRanRCUVVGQk8wRkJRVUVzZFVKQmEwTlZNRVlzVjBGc1ExWTdPMEZCUVVFN1FVRnZRMGtzYjBKQlFVa3NRMEZCUTBFc1YwRkJWeXhEUVVGRE5Wa3NVVUZCYWtJc1JVRkJNa0k3UVVGRGVrSTdRVUZEUVN4MVFrRkJTemhPTEV0QlFVd3NRMEZCVjNsRkxHZENRVUZZTEVOQlFUUkNiVWNzZFVKQlFUVkNMRU5CUTBWNFJ5eFRRVVJHTEVWQlJVVjNRaXhSUVVaR0xFVkJSMFUwUlN4VlFVaEdMRVZCU1VVc1EwRktSaXhGUVV0RlJTeFpRVXhHTEVWQlRVVjBSaXhSUVU1R08wRkJVVVE3TzBGQk9VTk1PMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3pzN096czdPenRCUVd0RVFUdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdVMEZEUlN4bFFVRnhRanRCUVVOdVFpeGhRVUZQTEV0QlFVdHRSU3hsUVVGYU8wRkJRMFE3VTBGRlJDeGhRVUZ0UWpOVUxFOUJRVzVDTEVWQlFUUkNPMEZCUXpGQ0xGZEJRVXN5VkN4bFFVRk1MRWRCUVhWQ00xUXNUMEZCZGtJN08wRkJSVUVzVlVGQlNTeExRVUZMYjBzc1MwRkJUQ3hEUVVGWEswY3NiVUpCUVdZc1JVRkJiME03UVVGRGJFTXNZVUZCU3k5SExFdEJRVXdzUTBGQlZ5dEhMRzFDUVVGWUxFTkJRU3RDZFVNc1owSkJRUzlDTEVkQlFXdEVMRU5CUVVNeFZDeFBRVUZ1UkR0QlFVTkVPMEZCUTBZN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzTmtKQlEwVjNUeXhUUVVSR0xFVkJVMFU3UVVGQlFTeDFSa0ZFU1N4RlFVTktPMEZCUVVFc2IwTkJUa1V3UlN4VFFVMUdPMEZCUVVFc1ZVRk9SVUVzVTBGTlJpeHBRMEZPWXl4VFFVMWtPMEZCUVVFc2IwTkJURVZXTEZOQlMwWTdRVUZCUVN4VlFVeEZRU3hUUVV0R0xHbERRVXhqTzBGQlFVTkRMRkZCUVVGQkxFMUJRVTBzUlVGQlJTeEhRVUZVTzBGQlFXTjZVeXhSUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZCZGtJc1QwRkxaRHRCUVVGQkxHOURRVXBGTmxFc1UwRkpSanRCUVVGQkxGVkJTa1ZCTEZOQlNVWXNhVU5CU21ONVFpeGpRVUZqTEVOQlFVTm9ReXh4UWtGQlppeERRVUZ4UTA4c1UwRkpia1E3UVVGQlFTeFZRVWhGY2tJc1VVRkhSaXhWUVVoRlFTeFJRVWRHTzBGQlFVRXNiME5CUmtVeVJDeFRRVVZHTzBGQlFVRXNWVUZHUlVFc1UwRkZSaXhwUTBGR1kzWkNMR2RDUVVWa096dEJRVU5CTzBGQlEwRXNWMEZCUzJ4Q0xHRkJRVXdzUTBGQmJVSnNReXhUUVVGdVFpeEZRVUU0UWp0QlFVTTFRbWRGTEZGQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGRU5FSTdRVUZGTlVJelFpeFJRVUZCUVN4VFFVRlRMRVZCUVZSQkxGTkJSalJDTzBGQlJ6VkNja0lzVVVGQlFVRXNVVUZCVVN4RlFVRlNRU3hSUVVnMFFqdEJRVWsxUWxVc1VVRkJRVUVzVlVGQlZTeEZRVUZGTEd0RFFVRkZaMFFzVTBGQlNpeEZRVUZuUWp0QlFVRkRReXhWUVVGQlFTeFRRVUZUTEVWQlFWUkJPMEZCUVVRc1UwRkJhRUk3UVVGS2EwSXNUMEZCT1VJN1FVRk5RU3hYUVVGTFNDeGhRVUZNTEVOQlFXMUNlRVVzVTBGQmJrSXNTVUZCWjBNd1JTeFRRVUZvUXl4RFFWSkJMRU5CVlVFN08wRkJRMEVzVjBGQlMxVXNkMEpCUVV3c1EwRkJPRUp3Uml4VFFVRTVRaXhGUVVGNVF6QkZMRk5CUVhwRE8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERoQ1FVTkZNVVVzVTBGRVJpeEZRVTlGTzBGQlFVRXNkVVpCUkVrc1JVRkRTanRCUVVGQkxHOURRVXBGTUVVc1UwRkpSanRCUVVGQkxGVkJTa1ZCTEZOQlNVWXNhVU5CU21Nc1dVRkpaRHRCUVVGQkxHOURRVWhGY2tNc1UwRkhSanRCUVVGQkxGVkJTRVZCTEZOQlIwWXNhVU5CU0dONVFpeGpRVUZqTEVOQlFVTm9ReXh4UWtGQlppeERRVUZ4UTA4c1UwRkhia1E3UVVGQlFTeFZRVVpGY2tJc1VVRkZSaXhWUVVaRlFTeFJRVVZHT3p0QlFVTkJPMEZCUTBFc1YwRkJTMnRDTEdGQlFVd3NRMEZCYlVKc1F5eFRRVUZ1UWl4RlFVRTRRanRCUVVNMVFuRkRMRkZCUVVGQkxGTkJRVk1zUlVGQlZFRXNVMEZFTkVJN1FVRkZOVUp5UWl4UlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQlJqUkNPMEZCUnpWQ1ZTeFJRVUZCUVN4VlFVRlZMRVZCUVVVc2EwTkJRVVZuUkN4VFFVRktMRVZCUVdkQ0xFVkJRV2hDTzBGQlNHdENMRTlCUVRsQ08wRkJTMEVzVjBGQlMwUXNZMEZCVEN4RFFVRnZRbnBGTEZOQlFYQkNMRWxCUVdsRE1FVXNVMEZCYWtNN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhOQ1FVRmhPMEZCUVVFN08wRkJRMWc3UVVGRFNqdEJRVU5CTzBGQlEwRTdRVUZEU1N4VlFVRk5OVWtzUjBGQlJ5eEhRVUZITERCSFFVRmFPMEZCUlVFN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVrN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVrN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVrN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVrN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVWSmJFSXNUVUZCUVVFc1RVRkJUU3hEUVVGRGIwZ3NUVUZCVUN4RFFVRmpiRWNzUjBGQlpDeEZRVUZ0UWp0QlFVTnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFRoSkxGRkJRVUZCTEcxQ1FVRnRRaXhGUVVGRkxFdEJRVXRCTEcxQ1FVRk1MRU5CUVhsQ2JrWXNTVUZCZWtJc1EwRkJPRUlzU1VGQk9VSXNRMEZRU2pzN1FVRlJha0k3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTAxdlJpeFJRVUZCUVN4dlFrRkJiMElzUlVGQlJTeExRVUZMUVN4dlFrRkJUQ3hEUVVFd1FuQkdMRWxCUVRGQ0xFTkJRU3RDTEVsQlFTOUNPMEZCWkV3c1QwRkJia0k3UVVGcFFrRTdRVUZEU2p0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5KTjBVc1RVRkJRVUVzVFVGQlRTeERRVUZEYTBRc1kwRkJVQ3hEUVVGelFtaERMRWRCUVhSQ0xFVkJRVEpDTEdkQ1FVRXpRaXhGUVVFMlF6dEJRVU16UXpaTExGRkJRVUZCTEVkQlFVY3NSVUZCUlR0QlFVRkJMR2xDUVVGTkxFMUJRVWtzUTBGQlEzQkRMR05CUVZnN1FVRkJRU3hUUVVSelF6dEJRVVV6UTNGRExGRkJRVUZCTEVkQlFVY3NSVUZCUlN4aFFVRkJjRllzVDBGQlR5eEZRVUZKTzBGQlEyUXNaMEpCUVVrc1EwRkJReXRUTEdOQlFVd3NSMEZCYzBJdlV5eFBRVUYwUWp0QlFVTkVPMEZCU2pCRExFOUJRVGRETzBGQlQwRXNZVUZCVDNOTExFZEJRVkE3UVVGRFJEczdPenRGUVdwclFqQkNTaXcwUWtGQlFTeERRVU16UWl0SExHMUVRVVF5UWl4RlFVVXpRamRDTERaRFFVWXlRanM3UVVGdmEwSTNRaXd3UkVGQlpXdEVMR05CUVdZN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOcWIwSkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0SlFVTk5aMFE3T3pzN096czdPenM3T3pzN08wRkJRMG83UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFJTd3lRa0ZCWjBJN1FVRkJRU3hWUVVGUWNrSXNTVUZCVHl4UlFVRlFRU3hKUVVGUE8wRkJRVVU3UVVGRmJFSTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHVkJRV0Z3Unl4VFFVRmlMRVZCUVhkQ08wRkJRM1JDTEZWQlFVMWhMRmRCUVZjc1IwRkJSM1ZETEcxRVFVRkJMRU5CUVRSRGNFUXNVMEZCTlVNc1EwRkJjRUk3TzBGQlEwRXNWVUZCVFRCSUxHMUNRVUZ0UWp0QlFVRkJPenRCUVVGQk96dEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNhVUpCUTNaQ0xIZENRVUZuUWp0QlFVRkJMR2RDUVVGUWRFSXNTVUZCVHl4VFFVRlFRU3hKUVVGUE96dEJRVU5rTEdkQ1FVRkpPMEZCUTBZc1owTkJRV2REZFVJc1NVRkJTU3hEUVVGRFF5eExRVUZNTEVOQlFWZDRRaXhKUVVGSkxFTkJRVU4yV0N4TFFVRm9RaXhEUVVGb1F6dEJRVUZCTEd0Q1FVRlBhVkFzVDBGQlVDeGxRVUZQUVN4UFFVRlFPMEZCUVVFc2EwSkJRV2RDSzBvc1RVRkJhRUlzWlVGQlowSkJMRTFCUVdoQ08wRkJRVUVzYTBKQlFYZENNVmtzU1VGQmVFSXNaVUZCZDBKQkxFbEJRWGhDT3p0QlFVTkJMR3RDUVVGSkxFdEJRVXQzVGl4WFFVRk1MRU5CUVdsQ2RFd3NTVUZCYWtJc1MwRkJNRUo1VFN4UFFVRTVRaXhGUVVGMVF6dEJRVU55UXl4dlFrRkJUWEpFTEZGQlFWRXNSMEZCUnl4TFFVRkxiMDRzVFVGQlRDeERRVUZxUWpzN1FVRkRRU3h2UWtGQlNYQk9MRkZCUVZFc1NVRkJTU3hQUVVGUFFTeFJRVUZRTEV0QlFXOUNMRlZCUVhCRExFVkJRV2RFTzBGQlF6bERRU3hyUWtGQlFVRXNVVUZCVVN4RFFVRkRjVTRzUzBGQlZDeERRVUZsTEVsQlFXWXNSVUZCY1VJeldTeEpRVUZ5UWp0QlFVTkVMR2xDUVVaRUxFMUJSVTg3UVVGRFRHOUVMR3RDUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJc2IwSkJRWGxDY1ZZc1RVRkJla0lzTkVOQlFXbEZMMG9zVDBGQmFrVTdRVUZEUkR0QlFVTkdPMEZCUTBZc1lVRldSQ3hEUVZWRkxFOUJRVTEyVHl4RFFVRk9MRVZCUVZNc1EwRkJSVHRCUVVOa08wRkJZbk5DT3p0QlFVRkJPMEZCUVVFc1VVRkJhVUp6VWl4WFFVRnFRaXhEUVVGNlFqczdRVUZuUWtFc1lVRkJUelpITEcxQ1FVRlFPMEZCUTBRN096czdSVUY0UTIxRGRFVTdPMEZCTWtOMFF5eHpSVUZCWlhGRkxIVkNRVUZtTEVVN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjZSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRU3hKUVVGTlRTeHRRa0ZCYlVJc1IwRkJSenRCUVVNeFFrTXNSVUZCUVVFc1IwRkJSeXhGUVVGRkxFTkJRMGdzUzBGRVJ5eEZRVVZJTEU5QlJrY3NSVUZIU0N4WFFVaEhMRVZCU1Vnc1MwRktSeXhGUVV0SUxFOUJURWNzUlVGTlNDeE5RVTVITEVWQlQwZ3NTMEZRUnl4RlFWRklMRTFCVWtjc1JVRlRTQ3hSUVZSSExFVkJWVWdzVFVGV1J5eEZRVmRJTEUxQldFY3NSVUZaU0N4VlFWcEhMRVZCWVVnc1QwRmlSeXhGUVdOSUxGVkJaRWNzUlVGbFNDeFBRV1pITEVWQlowSklMRkZCYUVKSExFVkJhVUpJTEV0QmFrSkhMRVZCYTBKSUxFOUJiRUpITEVWQmJVSklMRTFCYmtKSExFVkJiMEpJTEUxQmNFSkhMRU5CUkhGQ08wRkJkVUl4UWtNc1JVRkJRVUVzUzBGQlN5eEZRVUZGTEVOQlEwd3NVVUZFU3l4RlFVVk1MRTlCUmtzc1JVRkhUQ3hUUVVoTExFVkJTVXdzVFVGS1N5eEZRVXRNTEZOQlRFc3NSVUZOVEN4TlFVNUxMRVZCVDB3c1VVRlFTeXhGUVZGTUxGVkJVa3NzUlVGVFRDeFBRVlJMTEVWQlZVd3NUMEZXU3l4RlFWZE1MRTlCV0Vzc1JVRlpUQ3hOUVZwTExFVkJZVXdzVFVGaVN5eEZRV05NTEUxQlpFc3NSVUZsVEN4TlFXWkxMRVZCWjBKTUxFMUJhRUpMTEVOQmRrSnRRanRCUVhsRE1VSXNVVUZCU1N4RFFVTkdMRk5CUkVVc1JVRkZSaXhYUVVaRkxFVkJSMFlzVVVGSVJTeEZRVWxHTEUxQlNrVXNSVUZMUml4TFFVeEZMRVZCVFVZc1RVRk9SU3hGUVU5R0xGTkJVRVVzUlVGUlJpeFRRVkpGTEVWQlUwWXNVMEZVUlN4RlFWVkdMRkZCVmtVc1EwRjZRM05DTzBGQmNVUXhRa01zUlVGQlFVRXNTVUZCU1N4RlFVRkZMRU5CUTBvc1MwRkVTU3hGUVVWS0xGRkJSa2tzUlVGSFNpeExRVWhKTEVWQlNVb3NVVUZLU1N4RlFVdEtMRTlCVEVrc1JVRk5TaXhOUVU1SkxFVkJUMG9zVVVGUVNTeEZRVkZLTEZkQlVra3NSVUZUU2l4UlFWUkpMRVZCVlVvc1lVRldTU3hGUVZkS0xHTkJXRWtzUlVGWlNpeGxRVnBKTEVWQllVb3NWMEZpU1N4RlFXTktMRlZCWkVrc1JVRmxTaXhaUVdaSkxFVkJaMEpLTEZWQmFFSkpMRVZCYVVKS0xFOUJha0pKTEVWQmEwSktMRTlCYkVKSkxFVkJiVUpLTEZGQmJrSkpMRVZCYjBKS0xGTkJjRUpKTEVWQmNVSktMRlZCY2tKSkxFVkJjMEpLTEZGQmRFSkpMRVZCZFVKS0xGTkJka0pKTEVWQmQwSktMRlZCZUVKSkxFVkJlVUpLTEZOQmVrSkpMRVZCTUVKS0xGVkJNVUpKTEVWQk1rSktMRTFCTTBKSkxFVkJORUpLTEZWQk5VSkpMRVZCTmtKS0xGZEJOMEpKTEVWQk9FSktMRTlCT1VKSkxFVkJLMEpLTEZGQkwwSkpMRVZCWjBOS0xGTkJhRU5KTEVWQmFVTktMRkZCYWtOSkxFTkJja1J2UWp0QlFYZEdNVUpETEVWQlFVRkJMRkZCUVZFc1JVRkJSU3hEUVVOU0xFMUJSRkVzUlVGRlVpeFJRVVpSTEVWQlIxSXNUMEZJVVN4RlFVbFNMRTlCU2xFc1JVRkxVaXhMUVV4UkxFVkJUVklzVFVGT1VTeEZRVTlTTEZGQlVGRXNSVUZSVWl4SlFWSlJMRVZCVTFJc1QwRlVVU3hGUVZWU0xFMUJWbEVzUlVGWFVpeFZRVmhSTEVWQldWSXNVMEZhVVN4RlFXRlNMRmxCWWxFc1JVRmpVaXhSUVdSUkxFVkJaVklzVVVGbVVTeEZRV2RDVWl4UlFXaENVU3hGUVdsQ1VpeFJRV3BDVVN4RFFYaEdaMEk3UVVFeVJ6RkNReXhGUVVGQlFTeEhRVUZITEVWQlFVVXNRMEZEU0N4UlFVUkhMRVZCUlVnc1MwRkdSeXhGUVVkSUxFMUJTRWNzUlVGSlNDeFBRVXBITEVWQlMwZ3NVMEZNUnl4RlFVMUlMRTFCVGtjc1JVRlBTQ3hOUVZCSExFVkJVVWdzVVVGU1J5eEZRVk5JTEU5QlZFY3NSVUZWU0N4SlFWWkhMRVZCVjBnc1QwRllSeXhEUVROSGNVSTdRVUYzU0RGQ1F5eEZRVUZCUVN4VlFVRlZMRVZCUVVVc1EwRkRWaXhQUVVSVkxFVkJSVllzVVVGR1ZTeEZRVWRXTEZWQlNGVXNSVUZKVml4UlFVcFZMRVZCUzFZc1YwRk1WU3hGUVUxV0xGRkJUbFVzUlVGUFZpeFZRVkJWTEVWQlVWWXNWMEZTVlN4RlFWTldMRlZCVkZVc1JVRlZWaXhOUVZaVkxFVkJWMVlzVFVGWVZTeEZRVmxXTEUxQldsVXNSVUZoVml4UlFXSlZMRVZCWTFZc1RVRmtWU3hGUVdWV0xGRkJabFVzUlVGblFsWXNTMEZvUWxVc1JVRnBRbFlzVFVGcVFsVXNSVUZyUWxZc1QwRnNRbFVzUlVGdFFsWXNVMEZ1UWxVc1JVRnZRbFlzVlVGd1FsVXNSVUZ4UWxZc1dVRnlRbFVzUlVGelFsWXNVMEYwUWxVc1JVRjFRbFlzVlVGMlFsVXNSVUYzUWxZc1VVRjRRbFVzUlVGNVFsWXNWMEY2UWxVc1JVRXdRbFlzVTBFeFFsVXNSVUV5UWxZc1YwRXpRbFVzUlVFMFFsWXNVVUUxUWxVc1EwRjRTR003UVVGelNqRkNReXhGUVVGQlFTeEhRVUZITEVWQlFVVXNRMEZCUXl4TFFVRkVMRVZCUVZFc1RVRkJVaXhGUVVGblFpeFBRVUZvUWl4RlFVRjVRaXhOUVVGNlFpeEZRVUZwUXl4UFFVRnFReXhGUVVFd1F5eE5RVUV4UXl4RlFVRnJSQ3hMUVVGc1JDeERRWFJLY1VJN1FVRjFTakZDUXl4RlFVRkJRU3hQUVVGUExFVkJRVVVzUTBGRFVDeFRRVVJQTEVWQlJWQXNUVUZHVHl4RlFVZFFMRlZCU0U4c1JVRkpVQ3hSUVVwUExFVkJTMUFzVDBGTVR5eEZRVTFRTEZOQlRrOHNSVUZQVUN4VlFWQlBMRVZCVVZBc1UwRlNUeXhGUVZOUUxGRkJWRThzUlVGVlVDeFBRVlpQTEVWQlYxQXNVVUZZVHl4RlFWbFFMRlZCV2s4c1JVRmhVQ3hUUVdKUExFVkJZMUFzVVVGa1R5eEZRV1ZRTEZkQlprOHNSVUZuUWxBc1UwRm9RazhzUlVGcFFsQXNXVUZxUWs4c1JVRnJRbEFzVjBGc1FrOHNSVUZ0UWxBc1VVRnVRazhzUlVGdlFsQXNWVUZ3UWs4c1JVRnhRbEFzVjBGeVFrOHNRMEYyU21sQ08wRkJPRXN4UWtNc1JVRkJRVUVzU1VGQlNTeEZRVUZGTEVOQlEwb3NUMEZFU1N4RlFVVktMRWxCUmtrc1JVRkhTaXhOUVVoSkxFVkJTVW9zVDBGS1NTeEZRVXRLTEZOQlRFa3NSVUZOU2l4UFFVNUpMRVZCVDBvc1RVRlFTU3hGUVZGS0xFdEJVa2tzUlVGVFNpeExRVlJKTEVWQlZVb3NVMEZXU1N4RlFWZEtMRTFCV0Vrc1JVRlpTaXhQUVZwSkxFVkJZVW9zVFVGaVNTeERRVGxMYjBJN1FVRTJUREZDUXl4RlFVRkJRU3hKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZFTEVWQlFVOHNSMEZCVUN4RlFVRlpMRkZCUVZvc1JVRkJjMElzVFVGQmRFSXNSVUZCT0VJc1RVRkJPVUlzUlVGQmMwTXNTMEZCZEVNc1JVRkJOa01zU1VGQk4wTXNSVUZCYlVRc1RVRkJia1FzUlVGQk1rUXNTMEZCTTBRN1FVRTNURzlDTEVOQlFUVkNPMEZCWjAxQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMURPenM3T3p0QlFVbEtPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5GTERCQ1FVRlpjRTBzU1VGQldpeEZRVUY1UlR0QlFVRkJPenRCUVVGQkxHMUdRVUZLTEVWQlFVazdRVUZCUVN3MlFrRkJkRVJ4U3l4UlFVRnpSRHRCUVVGQkxGRkJRWFJFUVN4UlFVRnpSQ3c0UWtGQk0wTXNRMEZCTWtNN1FVRkJRU3h2UTBGQmVFTm5ReXhsUVVGM1F6dEJRVUZCTEZGQlFYaERRU3hsUVVGM1F5eHhRMEZCZEVJc1EwRkJjMEk3UVVGQlFTd3lRa0ZCYmtJM1J5eE5RVUZ0UWp0QlFVRkJMRkZCUVc1Q1FTeE5RVUZ0UWl3MFFrRkJWaXhGUVVGVk96dEJRVUZCT3p0QlFVTjJSU3c0UWtGQlRYaEdMRWxCUVU0N1FVRkZRU3hWUVVGTGNVc3NVVUZCVEN4SFFVRm5Ra0VzVVVGQmFFSTdRVUZEUVN4VlFVRkxaME1zWlVGQlRDeEhRVUYxUWtFc1pVRkJka0lzUTBGS2RVVXNRMEZOZGtVN08wRkJRMEZ3VGl4SlFVRkJRU3hOUVVGTkxFTkJRVU50UWl4UFFVRlFMRU5CUVdWdlJpeE5RVUZtTEVWQlFYVkNMMUlzVDBGQmRrSXNRMEZCSzBJc2FVSkJRVEJDTzBGQlFVRTdRVUZCUVN4VlFVRjRRbk5DTEVsQlFYZENPMEZCUVVFN1FVRkJRU3hWUVVGc1FtMVJMRTlCUVd0Q0xIVkNRVUZTTEVWQlFWRTdPMEZCUTNaRUxGbEJRVXR4UWl4aFFVRk1MRU5CUVcxQ2VGSXNTVUZCYmtJc1JVRkJlVUp0VVN4UFFVRjZRanRCUVVORUxFdEJSa1E3UVVGUWRVVTdRVUZWZUVVN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08xZEJRMFVzYzBKQlFXRnZTQ3hMUVVGaUxFVkJRVzlDZGtRc1UwRkJjRUlzUlVGQkswSTdRVUZETjBJc1ZVRkJUWGRFTEdGQlFXRXNSMEZEYWtKRUxFdEJRVXNzUTBGQlEycERMRkZCUVU0c1MwRkJiVUk1Vnl4VFFVRnVRaXhIUVVFclFpdFpMRXRCUVVzc1EwRkJRMnBETEZGQlFYSkRMRWRCUVdkRUxFdEJRVXRCTEZGQlJIWkVPMEZCUjBFc1lVRkJUM1JDTEZOQlFWTXNRMEZCUTNOQ0xGRkJRVllzUzBGQmRVSTVWeXhUUVVGMlFpeEhRVU5JZDFZc1UwRkJVeXhEUVVGRGMwSXNVVUZFVUN4SFFVVklhME1zWVVGR1NqdEJRVWRFTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNOa0pCUVc5Q1JDeExRVUZ3UWl4RlFVRXlRblpFTEZOQlFUTkNMRVZCUVhORE8wRkJRM0JETEZWQlFVMTVSQ3h2UWtGQmIwSXNSMEZEZUVKR0xFdEJRVXNzUTBGQlEwUXNaVUZCVGl4TFFVRXdRamxaTEZOQlFURkNMRWRCUTBrcldTeExRVUZMTEVOQlFVTkVMR1ZCUkZZc1IwRkZTU3hMUVVGTFFTeGxRVWhZTzBGQlMwRXNZVUZCVDNSRUxGTkJRVk1zUTBGQlEzTkVMR1ZCUVZZc1MwRkJPRUk1V1N4VFFVRTVRaXhIUVVOSWQxWXNVMEZCVXl4RFFVRkRjMFFzWlVGRVVDeEhRVVZJUnl4dlFrRkdTanRCUVVkRU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4M1FrRkJORVE3UVVGQlFUczdRVUZCUVN4VlFVRnVSRzVKTEZOQlFXMUVMRk5CUVc1RVFTeFRRVUZ0UkR0QlFVRkJMRlZCUVhoRFF5eGhRVUYzUXl4VFFVRjRRMEVzWVVGQmQwTTdRVUZCUVN4VlFVRjZRbTFKTEZWQlFYbENMRk5CUVhwQ1FTeFZRVUY1UWp0QlFVRkJMRlZCUVdKRExGVkJRV0VzVTBGQllrRXNWVUZCWVR0QlFVTXhSRHRCUVVOQkxGVkJRVTFLTEV0QlFVc3NSMEZCUnl4TFFVRkxMMGNzWTBGQlRDeERRVUZ2UW14Q0xGTkJRWEJDTEVOQlFXUTdPMEZCUTBFc1ZVRkJTV2xKTEV0QlFVc3NTMEZCU3k5WkxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJN1FVRkRSQ3hQUVV4NVJDeERRVTh4UkRzN08wRkJRMEVzVlVGQlRYZFdMRk5CUVZNc1IwRkJSM1ZFTEV0QlFVc3NRMEZCUTNaSExGVkJRVTRzUTBGQmFVSjZRaXhoUVVGcVFpeERRVUZzUWpzN1FVRkRRU3hWUVVGSmVVVXNVMEZCVXl4TFFVRkxlRllzVTBGQmJFSXNSVUZCTmtJN1FVRkRNMEk3UVVGRFJDeFBRVmg1UkN4RFFXRXhSRHM3TzBGQlEwRXNWVUZCU1N4RFFVRkRhMW9zVlVGQlJDeEpRVUZsTEVOQlFVTkRMRlZCUVdoQ0xFbEJRVGhDU2l4TFFVRkxMRU5CUVVOTExHTkJRVTRzUzBGQmVVSnlTU3hoUVVFelJDeEZRVUV3UlR0QlFVTjRSU3haUVVGTkswWXNVVUZCVVN4SFFVRkhMRXRCUVV0MVF5eFpRVUZNTEVOQlFXdENUaXhMUVVGc1FpeEZRVUY1UW5aRUxGTkJRWHBDTEVOQlFXcENPenRCUVVOQmRVUXNVVUZCUVVFc1MwRkJTeXhEUVVGRFR5eFRRVUZPTEVOQlFXZENPV0VzVFVGQmFFSXNSMEZHZDBVc1EwRkplRVU3TzBGQlEwRXNXVUZCU1hOWkxGRkJRVkVzU1VGQlNTeERRVUZvUWl4RlFVRnRRanRCUVVOcVFpeGxRVUZMY0Vzc1MwRkJUQ3hEUVVGWGVVVXNaMEpCUVZnc1EwRkJORUp2U1N4cFFrRkJOVUlzUTBGQk9FTjZTU3hUUVVFNVF5eEZRVUY1UkVNc1lVRkJla1E3UVVGRFJDeFRRVVpFTEVOQlNVRTdRVUZLUVN4aFFVdExPMEZCUTBoblNTeFZRVUZCUVN4TFFVRkxMRU5CUVVOUExGTkJRVTRzUjBGQmEwSjRXU3hsUVVGQkxFTkJRVmRuVnl4UlFVRllMRVZCUVhGQ08wRkJRM0pEZGxVc1dVRkJRVUVzVVVGQlVTeEZRVUZGTEc5Q1FVRk5PMEZCUTJRN1FVRkRRU3hyUWtGQlNYZFhMRXRCUVVzc1EwRkJRMHNzWTBGQlRpeExRVUY1UW5KSkxHRkJRVGRDTEVWQlFUUkRPMEZCUXpGRExITkNRVUZKTEVOQlFVTnlSU3hMUVVGTUxFTkJRVmQ1UlN4blFrRkJXQ3hEUVVFMFFtOUpMR2xDUVVFMVFpeERRVU5GZWtrc1UwRkVSaXhGUVVWRlF5eGhRVVpHTzBGQlNVUTdRVUZEUmp0QlFWUnZReXhYUVVGeVFpeERRVUZzUWp0QlFWZEVPMEZCUTBZN1FVRkRSanRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3gzUWtGQmIwTTdRVUZCUVN4VlFVRXpRa1FzVTBGQk1rSXNVMEZCTTBKQkxGTkJRVEpDTzBGQlFVRXNWVUZCYUVKRExHRkJRV2RDTEZOQlFXaENRU3hoUVVGblFqdEJRVU5zUXp0QlFVTkJMRlZCUVUxblNTeExRVUZMTEVkQlFVY3NTMEZCU3k5SExHTkJRVXdzUTBGQmIwSnNRaXhUUVVGd1FpeERRVUZrT3p0QlFVTkJMRlZCUVVscFNTeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNPMEZCUTBRc1QwRk1hVU1zUTBGUGJFTTdPenRCUVVOQkxGVkJRVTEzVml4VFFVRlRMRWRCUVVkMVJDeExRVUZMTEVOQlFVTjJSeXhWUVVGT0xFTkJRV2xDZWtJc1lVRkJha0lzUTBGQmJFSTdPMEZCUTBFc1ZVRkJTWGxGTEZOQlFWTXNTMEZCUzNoV0xGTkJRV1FzU1VGQk1rSXJVU3hoUVVGaExFdEJRVXRuU1N4TFFVRkxMRU5CUVVOTExHTkJRWFpFTEVWQlFYVkZPMEZCUTNKRlRDeFJRVUZCUVN4TFFVRkxMRU5CUVVOTExHTkJRVTRzUjBGQmRVSXNTVUZCZGtJN1FVRkRRVXdzVVVGQlFVRXNTMEZCU3l4RFFVRkRVeXhUUVVGT0xFZEJRV3RDTEVsQlFXeENPMEZCUTBGVUxGRkJRVUZCTEV0QlFVc3NRMEZCUTA4c1UwRkJUaXhEUVVGblFqbGhMRTFCUVdoQ0xFZEJTSEZGTEVOQlMzSkZPenRCUVVOQkxGbEJRVWwxWVN4TFFVRkxMRU5CUVVOVkxGZEJRVllzUlVGQmRVSTdRVUZEY2tJc1pVRkJTM0pITEdWQlFVd3NRMEZCY1VJc1ZVRkJRVFZTTEVsQlFVazdRVUZCUVN4dFFrRkJTVUVzU1VGQlNTeExRVUZMYzFBc1UwRkJZanRCUVVGQkxGZEJRWHBDTEVWQlFXbEVMRU5CUVdwRU8wRkJRMFE3UVVGRFJqdEJRVU5HT3pzN1YwRkZSQ3hyUTBGQk9FTTdRVUZCUVN4VlFVRXpRa0VzVTBGQk1rSXNVMEZCTTBKQkxGTkJRVEpDTzBGQlFVRXNWVUZCYUVKRExHRkJRV2RDTEZOQlFXaENRU3hoUVVGblFqdEJRVU0xUXl4VlFVRk5aMGtzUzBGQlN5eEhRVUZITEV0QlFVc3ZSeXhqUVVGTUxFTkJRVzlDYkVJc1UwRkJjRUlzUTBGQlpEczdRVUZGUVN4VlFVRkphVWtzUzBGQlN5eExRVUZMTDFrc1UwRkJaQ3hGUVVGNVFqdEJRVU4yUWl4WlFVRk5kMVlzVTBGQlV5eEhRVUZIZFVRc1MwRkJTeXhEUVVGRGRrY3NWVUZCVGl4RFFVRnBRbnBDTEdGQlFXcENMRU5CUVd4Q0xFTkJSSFZDTEVOQlIzWkNPenRCUVVOQkxGbEJRVWw1UlN4VFFVRlRMRXRCUVV0NFZpeFRRVUZzUWl4RlFVRTJRanRCUVVNelFpeGxRVUZMSzFNc2FVSkJRVXdzUTBGQmRVSnFReXhUUVVGMlFpeEZRVUZyUTBNc1lVRkJiRU03UVVGRFJDeFRRVVpFTEVOQlIwRTdRVUZJUVN4aFFVbExPMEZCUTBoNVJTeFZRVUZCUVN4VFFVRlRMRU5CUVVOd1JDeFJRVUZXTEVkQlFYRkNMRWxCUVhKQ08wRkJRMFE3UVVGRFJqdEJRVU5HT3pzN1YwRkZSQ3gxUWtGQll6VlJMRWxCUVdRc1JVRkJhME03UVVGQlFUczdRVUZCUVN4VlFVRmtiVkVzVDBGQll5eDFSVUZCU2l4RlFVRkpPenRCUVVOb1F5eHZTRUZCYjBKdVVTeEpRVUZ3UWl3NFJFRkRTMjFSTEU5QlJFdzdRVUZGUlRKSUxGRkJRVUZCTEZOQlFWTXNSVUZCUlhSaUxIRkNRVUZCTEVWQlJtSTdRVUZIUlhkaUxGRkJRVUZCTEZOQlFWTXNSVUZCUlN4SlFVaGlPMEZCU1VWS0xGRkJRVUZCTEdOQlFXTXNSVUZCUlR0QlFVcHNRanM3UVVGUFFTeFZRVUZKTEV0QlFVdHdTQ3hqUVVGTUxFTkJRVzlDZUZFc1NVRkJjRUlzUlVGQk1FSTBVU3hSUVVFNVFpeEZRVUYzUXp0QlFVTjBReXhoUVVGTE1VWXNTMEZCVEN4RFFVRlhlVVVzWjBKQlFWZ3NRMEZCTkVKclFpeGhRVUUxUWl4RFFVRXdRemRSTEVsQlFURkRMRVZCUVdkRWRFSXNUMEZCYUVRc1EwRkJkMFFzVlVGQlFYZGFMRWxCUVVrc1JVRkJTVHRCUVVNNVJEdEJRVU5CTEdOQlFVa3NUVUZCU1N4RFFVRkRNVWdzWTBGQlRDeERRVUZ2UW5oUkxFbEJRWEJDTEVWQlFUQkNaMUlzVlVGQk1VSXNRMEZCY1VOclNDeEpRVUZ5UXl4TlFVRXJRekZhTEZOQlFXNUVMRVZCUVRoRU8wRkJRelZFTEd0Q1FVRkpMRU5CUVVNclV5eHBRa0ZCVEN4RFFVTkZkbElzU1VGRVJpeEZRVVZGYTFrc1NVRkdSaXhGUVVkRkxFMUJRVWtzUTBGQlF6RklMR05CUVV3c1EwRkJiMEo0VVN4SlFVRndRaXhGUVVFd1FtZFNMRlZCUVRGQ0xFTkJRWEZEYTBnc1NVRkJja01zUTBGSVJqdEJRVXRFTzBGQlEwWXNVMEZVUkR0QlFWVkVPMEZCUTBZN096dFhRVVZFTERKQ1FVRnJRalZKTEZOQlFXeENMRVZCUVRaQ1F5eGhRVUUzUWl4RlFVRXdSRHRCUVVGQkxGVkJRV1JaTEU5QlFXTXNkVVZCUVVvc1JVRkJTVHM3UVVGRGVFUTdRVUZEUVN4VlFVRkpMRVZCUVVWQkxFOUJRVThzUTBGQlEyZEpMRXRCUVZJc1dVRkJlVUp3VXl4TFFVRXpRaXhMUVVGeFF5eEZRVUZGYjBzc1QwRkJUeXhEUVVGRFowa3NTMEZCVWl4WlFVRjVRaTlZTEVkQlFUTkNMRU5CUVhwRExFVkJRVEJGTzBGQlEzaEZLMUFzVVVGQlFVRXNUMEZCVHl4RFFVRkRaMGtzUzBGQlVpeEhRVUZuUW5wQ0xHMUNRVUZ0UWl4RFFVRkRia2dzWVVGQlJDeERRVUZ1UWl4SlFVRnpReXhGUVVGMFJEdEJRVU5FT3p0QlFVVkVMSGRJUVVGM1FrUXNVMEZCZUVJc1JVRkJiVU5ETEdGQlFXNURMRVZCUVd0RVdTeFBRVUZzUkR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3MFFrRkJiVUk3UVVGQlFUczdRVUZEYWtJc1ZVRkJUV2xKTEZWQlFWVXNSMEZCUnl4RlFVRnVRanRCUVVWQmJFOHNUVUZCUVVFc1RVRkJUU3hEUVVGRGJVSXNUMEZCVUN4RFFVRmxMRXRCUVV0dFJpeGpRVUZ3UWl4RlFVRnZRemxTTEU5QlFYQkRMRU5CUVRSRExHbENRVUVyUWp0QlFVRkJPMEZCUVVFc1dVRkJOMEkwVVN4VFFVRTJRanRCUVVGQkxGbEJRV3BDTUVJc1ZVRkJhVUlzV1VGQmFrSkJMRlZCUVdsQ096dEJRVU42UlRsSExGRkJRVUZCTEUxQlFVMHNRMEZCUTIxQ0xFOUJRVkFzUTBGQlpUSkdMRlZCUVdZc1JVRkJNa0owVXl4UFFVRXpRaXhEUVVORkxHbENRVWROTzBGQlFVRTdRVUZCUVN4alFVWktObEVzWVVGRlNUdEJRVUZCTzBGQlFVRXNZMEZFU0N0R0xGRkJRMGNzVjBGRVNFRXNVVUZEUnp0QlFVRkJMR05CUkU5blF5eGxRVU5RTEZkQlJFOUJMR1ZCUTFBN1FVRkJRU3hqUVVSM1FtRXNTMEZEZUVJc1YwRkVkMEpCTEV0QlEzaENPMEZCUVVFc1kwRkVLMEpGTEdOQlF5OUNMRmRCUkN0Q1FTeGpRVU12UWpzN1FVRkRTanRCUVVOQkxHTkJRVWxHTEV0QlFVc3NRMEZCUTNoYUxFMUJRVllzUlVGQmEwSTdRVUZEYUVJc1owSkJRVTEzVWl4UFFVRlBMRWRCUVVjc2QwWkJRMVp0Uml4UlFVRlJMRWxCUVVrN1FVRkJSVUVzWTBGQlFVRXNVVUZCVVN4RlFVRlNRVHRCUVVGR0xHRkJSRXdzUjBGRlVHZERMR1ZCUVdVc1NVRkJTVHRCUVVGRlFTeGpRVUZCUVN4bFFVRmxMRVZCUVdaQk8wRkJRVVlzWVVGR1dpeEhRVWRRWlN4alFVRmpMRWxCUVVrN1FVRkJSVUVzWTBGQlFVRXNZMEZCWXl4RlFVRmtRVHRCUVVGR0xHRkJTRmdzUTBGQllqczdRVUZMUVN4blFrRkJUVU1zUjBGQlJ5eEhRVUZITzBGQlExWTNUQ3hqUVVGQlFTeFBRVUZQTEVWQlFVVXNUVUZCU1N4RFFVRkRia0lzVjBGQlRDeERRVUZwUW5STUxFbEJSR2hDTzBGQlJWWjNWeXhqUVVGQlFTeE5RVUZOTEVWQlFVVXNZVUZHUlR0QlFVZFdNVmtzWTBGQlFVRXNTVUZCU1N4RlFVRkZMRU5CUVVOM1VpeFRRVUZFTEVWQlFWbERMR0ZCUVZvc1JVRkJNa0paTEU5QlFUTkNPMEZCU0Vrc1lVRkJXanRCUVUxQmFVa3NXVUZCUVVFc1ZVRkJWU3hEUVVGRE9VSXNTVUZCU1N4RFFVRkRhVU1zVTBGQlRDeERRVUZsUkN4SFFVRm1MRU5CUVVRc1EwRkJWaXhIUVVGclEwZ3NTMEZCYkVNN1FVRkRSRHRCUVVOR0xGTkJjRUpJTzBGQmMwSkVMRTlCZGtKRU8wRkJlVUpCTEdGQlFVOURMRlZCUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYlVOQlFUQkNNMGdzVFVGQk1VSXNSVUZCYTBNN1FVRkJRVHM3UVVGRGFFTXNWVUZCVFN0SUxHVkJRV1VzUjBGQlJ5eEZRVUY0UWp0QlFVTkJMMGdzVFVGQlFVRXNUVUZCVFN4SFFVRkhRU3hOUVVGTkxFbEJRVWwyUnl4TlFVRk5MRU5CUVVORExFbEJRVkFzUTBGQldTeExRVUZMY1Vjc1kwRkJha0lzUTBGQmJrSTdRVUZGUVVNc1RVRkJRVUVzVFVGQlRTeERRVUZETDFJc1QwRkJVQ3hEUVVGbExGVkJRVUUwVVN4VFFVRlRMRVZCUVVrN1FVRkRNVUlzV1VGQlRXbEpMRXRCUVVzc1IwRkJSeXhOUVVGSkxFTkJRVU12Unl4alFVRk1MRU5CUVc5Q2JFSXNVMEZCY0VJc1EwRkJaQ3hEUVVRd1FpeERRVWN4UWpzN1FVRkRRU3haUVVGSkxFTkJRVU5wU1N4TFFVRk1MRVZCUVZrN1FVRkRWanRCUVVORU96dEJRVVZFY2s0c1VVRkJRVUVzVFVGQlRTeERRVUZEYlVJc1QwRkJVQ3hEUVVGbGEwMHNTMEZCU3l4RFFVRkRka2NzVlVGQmNrSXNSVUZCYVVOMFV5eFBRVUZxUXl4RFFVTkZMR3RDUVVkTk8wRkJRVUU3UVVGQlFTeGpRVVpLTmxFc1lVRkZTVHRCUVVGQk8wRkJRVUVzWTBGRVJpdEdMRkZCUTBVc1YwRkVSa0VzVVVGRFJUdEJRVUZCTEdOQlJGRm5ReXhsUVVOU0xGZEJSRkZCTEdWQlExSTdRVUZCUVN4alFVUjVRbUVzUzBGRGVrSXNWMEZFZVVKQkxFdEJRM3BDTzBGQlFVRXNZMEZFWjBORkxHTkJRMmhETEZkQlJHZERRU3hqUVVOb1F6czdRVUZEU2p0QlFVTkJMR05CUVVrc1EwRkJRMFlzUzBGQlN5eERRVUZEZUZvc1RVRkJXQ3hGUVVGdFFqdEJRVU5xUWl4blFrRkJUWGRTTEU5QlFVOHNSMEZCUnl4M1JrRkRWbTFHTEZGQlFWRXNTVUZCU1R0QlFVRkZRU3hqUVVGQlFTeFJRVUZSTEVWQlFWSkJPMEZCUVVZc1lVRkVUQ3hIUVVWUVowTXNaVUZCWlN4SlFVRkpPMEZCUVVWQkxHTkJRVUZCTEdWQlFXVXNSVUZCWmtFN1FVRkJSaXhoUVVaYUxFZEJSMUJsTEdOQlFXTXNTVUZCU1R0QlFVRkZRU3hqUVVGQlFTeGpRVUZqTEVWQlFXUkJPMEZCUVVZc1lVRklXQ3hEUVVGaU96dEJRVXRCTEdkQ1FVRk5ReXhIUVVGSExFZEJRVWRvUXl4SlFVRkpMRU5CUVVOcFF5eFRRVUZNTEVOQlFXVTdRVUZEZWtJNVRDeGpRVUZCUVN4UFFVRlBMRVZCUVVVc1RVRkJTU3hEUVVGRGJrSXNWMEZCVEN4RFFVRnBRblJNTEVsQlJFUTdRVUZGZWtKM1Z5eGpRVUZCUVN4TlFVRk5MRVZCUVVVc1lVRkdhVUk3UVVGSGVrSXhXU3hqUVVGQlFTeEpRVUZKTEVWQlFVVXNRMEZCUTNkU0xGTkJRVVFzUlVGQldVTXNZVUZCV2l4RlFVRXlRbGtzVDBGQk0wSTdRVUZJYlVJc1lVRkJaaXhEUVVGYU96dEJRVTFCTEdkQ1FVRkpMRU5CUVVOeFNTeGxRVUZsTEVOQlFVTjBXU3hSUVVGb1FpeERRVUY1UW05WkxFZEJRWHBDTEVOQlFVd3NSVUZCYjBNN1FVRkRiRU5GTEdOQlFVRkJMR1ZCUVdVc1EwRkJRMjVWTEVsQlFXaENMRU5CUVhGQ2FWVXNSMEZCY2tJN1FVRkRSRHRCUVVOR08wRkJRMFlzVTBGMFFrZzdRVUYzUWtRc1QwRm9RMFE3UVVGclEwRXNZVUZCVDBVc1pVRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4eFFrRkRSV3hLTEZOQlJFWXNSVUZGUlVNc1lVRkdSaXhGUVVsRk8wRkJRVUVzZFVaQlJEWkVMRVZCUXpkRU8wRkJRVUVzVlVGRVF5dEdMRkZCUTBRc1ZVRkVRMEVzVVVGRFJEdEJRVUZCTEZWQlJGZG5ReXhsUVVOWUxGVkJSRmRCTEdWQlExZzdRVUZCUVN4VlFVUTBRbVVzWTBGRE5VSXNWVUZFTkVKQkxHTkJRelZDTzBGQlFVRXNaME5CUkRSRGVrd3NTMEZETlVNN1FVRkJRU3hWUVVRMFEwRXNTMEZETlVNc05rSkJSRzlFTEV0QlEzQkVPenRCUVVOQk8wRkJRMEVzVlVGRFJTeExRVUZMTkVRc1kwRkJUQ3hEUVVGdlFteENMRk5CUVhCQ0xFMUJRVzFET1ZFc1UwRkJia01zU1VGRFFTeExRVUZMWjFNc1kwRkJUQ3hEUVVGdlFteENMRk5CUVhCQ0xFVkJRU3RDTUVJc1ZVRkJMMElzUTBGQk1FTjZRaXhoUVVFeFF5eE5RVUUyUkM5UkxGTkJSaTlFTEVWQlIwVTdRVUZEUVN4aFFVRkxLMU1zYVVKQlFVd3NRMEZCZFVKcVF5eFRRVUYyUWl4RlFVRnJRME1zWVVGQmJFTXNSVUZCYVVRN1FVRkRMME1yUml4VlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQlJDdERPMEZCUlM5RFowTXNWVUZCUVVFc1pVRkJaU3hGUVVGbVFTeGxRVVlyUXp0QlFVY3ZRMlVzVlVGQlFVRXNZMEZCWXl4RlFVRmtRVHRCUVVnclF5eFRRVUZxUkR0QlFVdEVPenRCUVVWRUxGVkJRVTFrTEV0QlFVc3NSMEZCUnl4TFFVRkxMMGNzWTBGQlRDeERRVUZ2UW14Q0xGTkJRWEJDTEVOQlFXUTdRVUZEUVN4VlFVRk5NRVVzVTBGQlV5eEhRVUZIZFVRc1MwRkJTeXhEUVVGRGRrY3NWVUZCVGl4RFFVRnBRbnBDTEdGQlFXcENMRU5CUVd4Q0xFTkJaRUVzUTBGblFrRTdPMEZCUTBFc1ZVRkJTU3hEUVVGRGVVVXNVMEZCVXl4RFFVRkRjRVFzVVVGQlppeEZRVUY1UWp0QlFVTjJRanRCUVVOQkxGbEJRVTB6UkN4UlFVRlJMRWRCUVVkelN5eExRVUZMTEVOQlFVTXpSeXhSUVVGT0xFZEJRV2xDTEZkQlFXcENMRWRCUVN0Q0xFOUJRV2hFTzBGQlEwRXNXVUZCVFhwSUxFOUJRVThzT0VKQlFYVkNiMGNzWVVGQmRrSXNkVUpCUVdsRVJDeFRRVUZxUkN4MVFrRkJkVVVzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlFXeEdMR3RDUVVFMFJuRkZMRkZCUVRWR0xHZERRVUZpTzBGQlJVRXZUQ3hSUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJc1EwRkJZV2RKTEU5QlFXSTdRVUZEUVN4bFFVRlBNMDBzYjBKQlFVRXNRMEZCWjBJN1FVRkJRMmxqTEZWQlFVRkJMRTFCUVUwc1JVRkJSU3hWUVVGVU8wRkJRWEZDYW1Jc1ZVRkJRVUVzUzBGQlN5eEZRVUZGZVZBN1FVRkJOVUlzVTBGQmFFSXNRMEZCVUR0QlFVTkVMRTlCZUVKRUxFTkJNRUpCT3pzN1FVRkRRU3hWUVVGUE1rc3NZMEZCVUN4SFFVRjVRa3dzUzBGQmVrSXNRMEZCVDBzc1kwRkJVRHM3UVVGRFFTeFZRVUZKUVN4alFVRmpMRXRCUVV0eVNTeGhRVUZ1UWl4SlFVRnZReXhEUVVGRE0wTXNTMEZCZWtNc1JVRkJaMFE3UVVGRE9VTXNXVUZCVFhwRUxGRkJRVThzT0VKQlFYVkNiMGNzWVVGQmRrSXNkVUpCUVdsRVJDeFRRVUZxUkN4MVFrRkJkVVVzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlFXeEdMRFJJUVVGaU96dEJRVVZCTVVnc1VVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNMRU5CUVdGblNTeFJRVUZpTzBGQlEwRXNaVUZCVHpOTkxHOUNRVUZCTEVOQlFXZENPMEZCUVVOcFl5eFZRVUZCUVN4TlFVRk5MRVZCUVVVc1UwRkJWRHRCUVVGdlFtcGlMRlZCUVVGQkxFdEJRVXNzUlVGQlJTdFNPMEZCUVROQ0xGTkJRV2hDTEVOQlFWQTdRVUZEUkN4UFFXcERSQ3hEUVcxRFFUczdPMEZCUTBFc1ZVRkJTU3RHTEZGQlFWRXNTMEZCU3psWExGTkJRV3BDTEVWQlFUUkNPMEZCUXpGQ2QxWXNVVUZCUVVFc1UwRkJVeXhEUVVGRGMwSXNVVUZCVml4SFFVRnhRa0VzVVVGQmNrSTdRVUZEUkRzN1FVRkZSQ3hWUVVGSlowTXNaVUZCWlN4TFFVRkxPVmtzVTBGQmVFSXNSVUZCYlVNN1FVRkRha04zVml4UlFVRkJRU3hUUVVGVExFTkJRVU56UkN4bFFVRldMRWRCUVRSQ1FTeGxRVUUxUWp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTVFTeFJRVUZCUVN4bFFVRmxMRWRCUVVjc1MwRkJTMjlDTEcxQ1FVRk1MRU5CUVhsQ2JrSXNTMEZCZWtJc1JVRkJaME4yUkN4VFFVRm9ReXhEUVVGc1FqdEJRVU5FTEU5Qk5VTkVMRU5CT0VOQk96czdRVUZEUVN4VlFVRkpMRU5CUVVOd1NDeExRVUZFTEVsQlFWVXlTeXhMUVVGTExFTkJRVU5UTEZOQlFVNHNTMEZCYjBJc1NVRkJPVUlzU1VGQmMwTlVMRXRCUVVzc1EwRkJRMU1zVTBGQlRpeEhRVUZyUWxZc1pVRkJOVVFzUlVGQk5rVTdRVUZETTBWd1Z5eFJRVUZCUVN4UFFVRlBMRU5CUVVORExFbEJRVklzTkVKQlEzTkNiMDhzWVVGRWRFSXNkVUpCUTJkRVJDeFRRVVJvUkN4MVFrRkRjMFVzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlJHcEdMR2REUVVONVJ6QlBMR1ZCUkhwSE8wRkJSMEVzWlVGQlR6bGhMRzlDUVVGQkxFTkJRV2RDTzBGQlEzSkNhV01zVlVGQlFVRXNUVUZCVFN4RlFVRkZMR2xDUVVSaE8wRkJSWEpDYW1Jc1ZVRkJRVUVzUzBGQlN5eEZRVUZGT0Zvc1pVRkJaU3hIUVVGSFF5eExRVUZMTEVOQlFVTlRPMEZCUmxZc1UwRkJhRUlzUTBGQlVEdEJRVWxFTEU5QmRrUkVMRU5CZVVSQk96czdRVUZEUVZRc1RVRkJRVUVzUzBGQlN5eERRVUZEU3l4alFVRk9MRWRCUVhWQ2Nra3NZVUZCZGtJN1FVRkRRV2RKTEUxQlFVRkJMRXRCUVVzc1EwRkJRMU1zVTBGQlRpeEhRVUZyUWl4RFFVRnNRanRCUVVOQlZDeE5RVUZCUVN4TFFVRkxMRU5CUVVOUExGTkJRVTRzUTBGQlowSTVZU3hOUVVGb1FqczdRVUZEUVN4VlFVRkpkV0VzUzBGQlN5eERRVUZEVlN4WFFVRldMRVZCUVhWQ08wRkJRM0pDTEdGQlFVdHlSeXhsUVVGTUxFTkJRWEZDTEZWQlFVRTFVaXhKUVVGSk8wRkJRVUVzYVVKQlFVbEJMRWxCUVVrc1MwRkJTM05RTEZOQlFXSTdRVUZCUVN4VFFVRjZRaXhGUVVGcFJDeERRVUZxUkR0QlFVTkVPenRCUVVWRUxHRkJRVThzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM2xGTEdkQ1FVRllMRU5CUVRSQ1owb3NZVUZCTlVJc1EwRkRUSEpLTEZOQlJFc3NSVUZGVEVNc1lVRkdTeXhGUVVkTU9Fa3NZMEZJU3l4RFFVRlFPMEZCUzBRN096dFhRVVZFTEdkQ1FVRlBPVmNzVTBGQlVDeEZRVUZyUWp0QlFVRkJPenRCUVVOb1FpdzJSMEZCWVVFc1UwRkJZaXhGUVVSblFpeERRVWRvUWpzN08wRkJRMEV5U1N4TlFVRkJRU3hOUVVGTkxFTkJRVU50UWl4UFFVRlFMRU5CUVdVc1MwRkJTMjFHTEdOQlFYQkNMRVZCUVc5RE9WSXNUMEZCY0VNc1EwRkJORU1zYTBKQlFYRkNPMEZCUVVFN1FVRkJRU3haUVVGdVFuTkNMRWxCUVcxQ08wRkJRVUVzV1VGQlltMVJMRTlCUVdFN08wRkJReTlFTEZsQlFVbEJMRTlCUVU4c1EwRkJRMU1zVVVGQlVpeEpRVUZ2UWl4RFFVRkRMRTFCUVVrc1EwRkJRekZHTEV0QlFVd3NRMEZCVjNsRkxHZENRVUZZTEVOQlFUUkNhVW9zVTBGQk5VSXNRMEZCYzBNMVdTeEpRVUYwUXl4RFFVRjZRaXhGUVVGelJUdEJRVU53UlcxUkxGVkJRVUZCTEU5QlFVOHNRMEZCUXpKSUxGTkJRVklzUTBGQmEwSjJUQ3hQUVVGc1FpeERRVUV3UW1oTUxGTkJRVEZDT3p0QlFVVkJMR05CUVVrMFR5eFBRVUZQTEVOQlFVTTJTQ3hUUVVGU0xFdEJRWE5DTEVsQlFURkNMRVZCUVdkRE8wRkJRemxDTjBnc1dVRkJRVUVzVDBGQlR5eERRVUZETmtnc1UwRkJVaXhKUVVGeFFucFhMRk5CUVZNc1IwRkJSeXhKUVVGcVF6dEJRVU5FTzBGQlEwWTdRVUZEUml4UFFWSkVPMEZCVTBRN096dFhRVVZFTEhOQ1FVRmhPMEZCUTFnN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFNTeFZRVUZOTmtvc1IwRkJSeXhIUVVGSExEQkhRVUZhT3p0QlFVVkJiRUlzVFVGQlFVRXNUVUZCVFN4RFFVRkRiMGdzVFVGQlVDeERRVUZqYkVjc1IwRkJaQ3hGUVVGdFFqdEJRVU5xUWp0QlFVTk9PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFRYbE9MRkZCUVVGQkxHZENRVUZuUWl4RlFVRkZMRXRCUVV0QkxHZENRVUZNTEVOQlFYTkNPVW9zU1VGQmRFSXNRMEZCTWtJc1NVRkJNMElzUTBGUVJEczdRVUZSYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMHJTaXhSUVVGQlFTeDVRa0ZCZVVJc1JVRkJSU3hMUVVGTFFTeDVRa0ZCVEN4RFFVRXJRaTlLTEVsQlFTOUNMRU5CUVc5RExFbEJRWEJETEVOQlpGWTdPMEZCWldwQ08wRkJRMDQ3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTk5aMHNzVVVGQlFVRXNWMEZCVnl4RlFVRkZMRXRCUVV0QkxGZEJRVXdzUTBGQmFVSm9TeXhKUVVGcVFpeERRVUZ6UWl4SlFVRjBRanRCUVhKQ1NTeFBRVUZ1UWp0QlFYVkNSRHM3T3p0RlFUTmlNRUl2UkN3MFFrRkJRU3hEUVVNelFtOU1MSEZEUVVReVFpeEZRVVV6UW14SExEWkRRVVl5UWpzN1FVRTRZamRDYUVjc1RVRkJUU3hEUVVGRFZ5eG5Ra0ZCVUN4RFFVRjNRbmROTEdOQlFYaENMRVZCUVhkRE8wRkJRM1JEYWtjc1JVRkJRVUVzY1VKQlFYRkNMRVZCUVVVN1FVRkRja0kxVkN4SlFVRkJRU3hMUVVGTExFVkJRVVVzTkVSQlEwWTJXaXhqUVVGakxFTkJRVU5xUnl4eFFrRkVaanRCUVVWSU5rY3NUVUZCUVVFc1YwRkJWeXhGUVVGRk8wRkJSbFlzVFVGRVowSTdRVUZMY2tKdVRpeEpRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRk1WeXhIUVVSbE8wRkJVWFJEYlVVc1JVRkJRVUVzYTBKQlFXdENMRVZCUVVVN1FVRkRiRUo2VWl4SlFVRkJRU3hMUVVGTExFVkJRVVVzTkVSQlEwWTJXaXhqUVVGakxFTkJRVU53U1N4clFrRkVaanRCUVVWSVZTeE5RVUZCUVN4blFrRkJaMElzUlVGQlJTdzBSRUZEWWpCSUxHTkJRV01zUTBGQlEzQkpMR3RDUVVGbUxFTkJRV3REVlN4blFrRkVka0k3UVVGRlpHOUpMRkZCUVVGQkxHbENRVUZwUWl4RlFVRkZMRk5CUmt3N1FVRkhaR2xDTEZGQlFVRkJMR0ZCUVdFc1JVRkJSU3hUUVVoRU8wRkJTV1JETEZGQlFVRkJMR3RDUVVGclFpeEZRVUZGTzBGQlNrNDdRVUZHWWp0QlFVUmhPMEZCVW10Q0xFTkJRWGhETzBGQmNVSkJMREJFUVVGbE5VSXNZMEZCWmpzN096czdPenM3TzBGRGRIRkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEpRVU5OTmtJN096czdPenM3VjBGRFNpeGpRVUZaYWxnc1NVRkJXaXhGUVVGclFrTXNSVUZCYkVJc1JVRkJjMEpETEUxQlFYUkNMRVZCUVRoQ08wRkJRelZDYWtJc1RVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNPMEZCUlVFc1lVRkJUMWNzYlVKQlFVRXNRMEZCWlVjc1NVRkJaaXhGUVVGeFFrTXNSVUZCY2tJc1JVRkJlVUpETEUxQlFYcENMRU5CUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR1ZCUVdFelJTeExRVUZpTEVWQlFYTkRPMEZCUVVFc1ZVRkJiRUpuUlN4SFFVRnJRaXgxUlVGQldpeERRVUZaTzBGQlFVRXNWVUZCVkVNc1IwRkJVeXgxUlVGQlNDeERRVUZITzBGQlEzQkRVQ3hOUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJN1FVRkZRU3hoUVVGUFZ5eHZRa0ZCUVN4RFFVRm5RblJGTEV0QlFXaENMRVZCUVhWQ1owVXNSMEZCZGtJc1JVRkJORUpETEVkQlFUVkNMRU5CUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMRFpDUVVORk1GZ3NZVUZFUml4RlFVVkZReXhaUVVaR0xFVkJSMFYwVWl4WFFVaEdMRVZCUzBVN1FVRkJRU3h4UmtGRWJVVXNSVUZEYmtVN1FVRkJRU3c0UWtGRVEyaElMRTlCUTBRN1FVRkJRU3hWUVVSRFFTeFBRVU5FTERaQ1FVUlhMRU5CUTFnN1FVRkJRU3hWUVVSamQxQXNVVUZEWkN4UlFVUmpRU3hSUVVOa08wRkJRVUVzVlVGRWQwSjJVQ3hUUVVONFFpeFJRVVIzUWtFc1VVRkRlRUk3UVVGQlFTeFZRVVJyUTBNc1YwRkRiRU1zVVVGRWEwTkJMRlZCUTJ4RE8wRkJRVUVzVlVGRU9FTndSU3hUUVVNNVF5eFJRVVE0UTBFc1VVRkRPVU03UVVGQlFTeFZRVVIzUkhGRkxFOUJRM2hFTEZGQlJIZEVRU3hQUVVONFJEczdRVUZEUVR0QlFVTkJMRlZCUVVrc1JVRkJSV3RaTEdGQlFXRXNXVUZCV1dwUUxFMUJRVE5DTEVOQlFVb3NSVUZCZDBNN1FVRkRkRU1zV1VGQlRXaE5MRU5CUVVNc1IwRkJSeXhKUVVGSmNrSXNTMEZCU2l4MVEwRkRkVUoxWXl4WlFVUjJRaXg1UTBGQlZqczdRVUZKUVN4WlFVRkpMRTlCUVU5dVdTeFBRVUZRTEV0QlFXMUNMRlZCUVhaQ0xFVkJRVzFETzBGQlEycERRU3hWUVVGQlFTeFBRVUZQTEVOQlFVTXZReXhEUVVGRUxFTkJRVkE3UVVGRFJEczdRVUZGUkN4bFFVRlBNVUlzYjBKQlFVRXNRMEZCWjBJd1FpeERRVUZvUWl4RFFVRlFPMEZCUTBRc1QwRmFSQ3hEUVdOQk96czdRVUZEUVN4VlFVRkpkME1zVFVGQlRTeERRVUZETWxrc1MwRkJVQ3hEUVVGaE0xa3NUVUZCVFN4RFFVRkRlVmtzWVVGQllTeERRVUZEUXl4WlFVRkVMRU5CUVdRc1EwRkJia0lzUTBGQlNpeEZRVUYxUkR0QlFVTnlSQ3haUVVGTmJHSXNSVUZCUXl4SFFVRkhMRWxCUVVseVFpeExRVUZLTEhWRFFVTjFRblZqTEZsQlJIWkNMR2xEUVVGV096dEJRVWxCTEZsQlFVa3NUMEZCVDI1WkxFOUJRVkFzUzBGQmJVSXNWVUZCZGtJc1JVRkJiVU03UVVGRGFrTkJMRlZCUVVGQkxFOUJRVThzUTBGQlF5OURMRVZCUVVRc1EwRkJVRHRCUVVORU96dEJRVVZFTEdWQlFVOHhRaXh2UWtGQlFTeERRVUZuUWpCQ0xFVkJRV2hDTEVOQlFWQTdRVUZEUkN4UFFYcENSQ3hEUVRKQ1FUczdPMEZCUTBFc1ZVRkJTWGRETEUxQlFVMHNRMEZCUXpKWkxFdEJRVkFzUTBGQllUTlpMRTFCUVUwc1EwRkJRMjlJTEZkQlFVUXNRMEZCYmtJc1EwRkJTaXhGUVVGMVF6dEJRVU55UXl4WlFVRk5OVW9zUjBGQlF5eEhRVUZITEVsQlFVbHlRaXhMUVVGS0xIVkRRVU4xUW5WakxGbEJSSFpDTEhWQ1FVTm5SSFJTTEZkQlJHaEVMSEZEUVVGV096dEJRVWxCTEZsQlFVa3NUMEZCVHpkSExFOUJRVkFzUzBGQmJVSXNWVUZCZGtJc1JVRkJiVU03UVVGRGFrTkJMRlZCUVVGQkxFOUJRVThzUTBGQlF5OURMRWRCUVVRc1EwRkJVRHRCUVVORU96dEJRVVZFTEdWQlFVOHhRaXh2UWtGQlFTeERRVUZuUWpCQ0xFZEJRV2hDTEVOQlFWQTdRVUZEUkN4UFFYUkRSQ3hEUVhkRFFUczdPMEZCUTBFc1ZVRkJUVzlpTEZWQlFWVXNSMEZCUjBnc1lVRkJZU3hEUVVGRFF5eFpRVUZFTEVOQlFXaERPenRCUVVWQkxGVkJRVWxGTEZWQlFWVXNTMEZCUzNoU0xGZEJRVzVDTEVWQlFXZERPMEZCUXpsQ0xGbEJRVWtzVDBGQlR5OUhMRk5CUVZBc1MwRkJiMElzVlVGQmVFSXNSVUZCYjBNN1FVRkRiRU5CTEZWQlFVRkJMRk5CUVZFc1EwRkJReXRITEZkQlFVUXNRMEZCVWp0QlFVTkVPenRCUVVWRUxHVkJRVTkwVEN4eFFrRkJRU3hEUVVGcFFuTk1MRmRCUVdwQ0xFTkJRVkE3UVVGRFJDeFBRV3BFUkN4RFFXMUVRVHM3TzBGQlEwRXNWVUZCU1N4UFFVRlBkMGtzVVVGQlVDeExRVUZ2UWl4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUXl4WlFVRkpRU3hSUVVGUkxFdEJRVXM1VWl4VFFVRnFRaXhGUVVFMFFqdEJRVU14UWpCRExGVkJRVUZCTEU5QlFVOHNRMEZCUTBNc1NVRkJVanRCUVVkRU96dEJRVVZFYlZBc1VVRkJRVUVzVVVGQlVTeEhRVUZIYUVRc1dVRkJXRHRCUVVORU96dEJRVVZFTEZWQlFVMXBUU3haUVVGWkxFZEJRVWRxWVN4bFFVRkJMRU5CUVZkM1FpeFBRVUZZTEVWQlFXOUNPMEZCUTNaRFF5eFJRVUZCUVN4UlFVRlJMRVZCUVVVc2IwSkJRVTA3UVVGRFpHOVpMRlZCUVVGQkxHRkJRV0VzUTBGQlEwTXNXVUZCUkN4RFFVRmlMRWRCUVRoQ2RGSXNWMEZCT1VJN08wRkJSVUVzWTBGQlNTeFBRVUZQTDBjc1UwRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOc1EwRXNXVUZCUVVFc1UwRkJVU3hEUVVGREswY3NWMEZCUkN4RFFVRlNPMEZCUTBRN1FVRkRSaXhUUVZCelF6dEJRVkYyUTJ4TUxGRkJRVUZCTEZGQlFWRXNSVUZCUlN4dlFrRkJUVHRCUVVOa0xHTkJRVWtzVDBGQlQwRXNVMEZCVUN4TFFVRnZRaXhWUVVGNFFpeEZRVUZ2UXp0QlFVTnNRMEVzV1VGQlFVRXNVMEZCVVN4RFFVRkRkV01zWVVGQllTeERRVUZEUXl4WlFVRkVMRU5CUVdRc1EwRkJVanRCUVVORU8wRkJRMFlzVTBGYWMwTTdRVUZoZGtOd1dTeFJRVUZCUVN4VlFVRlZMRVZCUVVVc2IwSkJRVUYzV1N4UlFVRlJMRVZCUVVrN1FVRkRkRUlzWTBGQlNVd3NZVUZCWVN4RFFVRkRReXhaUVVGRUxFTkJRV0lzUzBGQlowTjBVaXhYUVVGd1F5eEZRVUZwUkR0QlFVTXZRenRCUVVOQkxHZENRVUZOTWxJc1ZVRkJWU3hIUVVGSGJrb3NVVUZCVVN4RFFVRkRhMG9zVVVGQlJDeERRVUV6UWpzN1FVRkZRU3huUWtGQlNTeFBRVUZQUXl4VlFVRlFMRXRCUVhOQ0xGRkJRVEZDTEVWQlFXOURPMEZCUTJ4RExHdENRVUZOZG1Jc1IwRkJReXhIUVVGSExFbEJRVWx5UWl4TFFVRktMREpGUVVGV096dEJRVWRCTUdNc1kwRkJRVUVzV1VGQldTeERRVUZEYUdNc1RVRkJZaXhEUVVGdlFsY3NSMEZCY0VJN1FVRkRRVHRCUVVORUxHRkJWamhETEVOQldTOURPenM3UVVGRFFXbGlMRmxCUVVGQkxHRkJRV0VzUTBGQlEwTXNXVUZCUkN4RFFVRmlMRWRCUVRoQ2RGZ3NiVUpCUVVFc1EwRkROVUozV0N4VlFVUTBRaXhGUVVVMVFuaFNMRmRCUmpSQ0xFVkJSelZDTWxJc1ZVRklORUlzUTBGQk9VSTdRVUZMUkN4WFFXNUNjVUlzUTBGeFFuUkNPenM3UVVGRFFTeGpRVUZKTEU5QlFVOTZXU3hYUVVGUUxFdEJRWE5DTEZWQlFURkNMRVZCUVhORE8wRkJRM0JEUVN4WlFVRkJRU3hYUVVGVkxFTkJRVU50V1N4aFFVRmhMRU5CUVVORExGbEJRVVFzUTBGQlpDeERRVUZXTzBGQlEwUXNWMEY0UW5GQ0xFTkJNRUowUWpzN08wRkJRMEVzWTBGQlNVa3NVVUZCVVN4TFFVRkxMRU5CUVdwQ0xFVkJRVzlDTzBGQlEyeENUQ3haUVVGQlFTeGhRVUZoTEVOQlFVTkRMRmxCUVVRc1EwRkJZaXhIUVVFNFFuUlNMRmRCUVRsQ08wRkJRMEY1VWl4WlFVRkJRU3haUVVGWkxFTkJRVU5xWXl4UFFVRmlMRU5CUVhGQ2Qwc3NWMEZCY2tJN1FVRkRSRHRCUVVOR0xGTkJOVU56UXp0QlFUWkRka00zUnl4UlFVRkJRU3hQUVVGUExFVkJRVkJCTzBGQk4wTjFReXhQUVVGd1FpeERRVUZ5UWp0QlFXZEVRU3hoUVVGUGMxa3NXVUZCVUR0QlFVTkVPenM3T3pzN1FVRkhTQ3c0UkVGQlpVd3NZMEZCWml4Rk96czdPenM3T3p0QlEzQk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3U1VGRFRWRTdRVUZEU2p0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkZMREpDUVVFd1FqdEJRVUZCTEZGQlFXUjJTaXhQUVVGakxIVkZRVUZLTEVWQlFVazdPMEZCUVVFN08wRkJRM2hDTEZOQlFVdHVVU3hKUVVGTUxFZEJRMFZ0VVN4UFFVRlBMRU5CUVVOdVVTeEpRVUZTTEV0QlFXbENlRUlzVTBGQmFrSXNSMEZCTmtJeVVpeFBRVUZQTEVOQlFVTnVVU3hKUVVGeVF5eEhRVUUwUXl4TFFVRkxjMHdzVjBGQlRDeERRVUZwUW5STUxFbEJSQzlFTzBGQlJVRXNVMEZCU3pKYUxFOUJRVXdzUjBGRFJYaEtMRTlCUVU4c1EwRkJRMFVzVFVGQlVpeExRVUZ0UWpkU0xGTkJRVzVDTEVkQlEwbHpSQ3h2UWtGQlFTeERRVUZuUW5GUExFOUJRVThzUTBGQlEwVXNUVUZCZUVJc1JVRkJaME1zUTBGQmFFTXNSVUZCYlVNc1EwRkJia01zUTBGRVNpeEhRVVZKTEVOQlNFNDdRVUZKUVN4VFFVRkxkVW9zWlVGQlRDeEhRVUYxUWl4TFFVRkxSQ3hQUVVFMVFqdEJRVU5CTEZOQlFVdEZMRTlCUVV3c1IwRkJaU3hMUVVGbU8wRkJSVUVzVTBGQlMwTXNVMEZCVEN4SFFVRnBRanRCUVVObVF5eE5RVUZCUVN4TlFVRk5MRVZCUVVWMlpDeHhRa0ZCUVN4RlFVUlBPMEZCUldZMlZDeE5RVUZCUVN4TlFVRk5MRVZCUVVVM1ZDeHhRa0ZCUVN4RlFVWlBPMEZCUjJZd1ZpeE5RVUZCUVN4SlFVRkpMRVZCUVVVeFZpeHhRa0ZCUVR0QlFVaFRMRXRCUVdwQ08wRkJUVUVzVTBGQlMzZGtMR05CUVV3c1IwRkJjMEk3UVVGRGNFSnFXaXhOUVVGQlFTeFJRVUZSTEVWQlFVVjJReXhUUVVSVk8wRkJSWEJDZVVNc1RVRkJRVUVzVDBGQlR5eEZRVUZGZWtNc1UwRkdWenRCUVVkd1FqVkNMRTFCUVVGQkxGRkJRVkVzUlVGQlJUUkNPMEZCU0ZVc1MwRkJkRUk3UVVGTFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMU5CUTBVc1pVRkJZVHRCUVVOWUxHRkJRVThzUzBGQlMzRmlMRTlCUVZvN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VTBGRFJTeGxRVUZoTzBGQlExZ3NZVUZCVHl4TFFVRkxSaXhQUVVGYU8wRkJRMFE3VTBGRlJDeGhRVUZYZEVvc1RVRkJXQ3hGUVVGdFFqdEJRVU5xUWl4WFFVRkxjMG9zVDBGQlRDeEhRVUZsTjFnc2IwSkJRVUVzUTBGQlowSjFUeXhOUVVGb1FpeEZRVUYzUWl4RFFVRjRRaXhGUVVFeVFpeERRVUV6UWl4RFFVRm1PMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VTBGRFJTeGxRVUZ2UWp0QlFVTnNRaXhoUVVGUExFdEJRVXQ1U2l4VFFVRk1MRU5CUVdWNlNpeE5RVUZtTEVsQlFYbENMRXRCUVV0NVNpeFRRVUZNTEVOQlFXVjZTaXhOUVVGbUxFTkJRWE5DYUZRc1QwRkJkRVE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYlVKQlFWVm5WQ3hOUVVGV0xFVkJRWGxETzBGQlFVRXNWVUZCZGtKMlVDeFBRVUYxUWl4MVJVRkJZaXhEUVVGaE8wRkJRVUVzVlVGQlZuZFFMRkZCUVZVN08wRkJRM1pETEZkQlFVdDNTaXhUUVVGTUxFTkJRV1Y2U2l4TlFVRm1MRU5CUVhOQ2NsUXNUVUZCZEVJN08wRkJRMEZ4VkN4TlFVRkJRU3hOUVVGTkxFZEJRVWQyVHl4dlFrRkJRU3hEUVVGblFuVlBMRTFCUVdoQ0xFTkJRVlE3UVVGRlFTeFhRVUZMZVVvc1UwRkJUQ3hEUVVGbGVrb3NUVUZCWml4SFFVRjNRalpKTERKRFFVRkJMRU5CUTNSQ0xFbEJSSE5DTEVWQlJYUkNMRkZCUm5OQ0xFVkJSM1JDTjBrc1RVRkljMElzUlVGSmRFSTdRVUZCUTNaUUxGRkJRVUZCTEU5QlFVOHNSVUZCVUVFc1QwRkJSRHRCUVVGVmQxQXNVVUZCUVVFc1VVRkJVU3hGUVVGU1FUdEJRVUZXTEU5QlNuTkNMRU5CUVhoQ08wRkJUMEVzWVVGQlR5eExRVUZMZDBvc1UwRkJUQ3hEUVVGbGVrb3NUVUZCZEVJN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFRRVU5GTEdWQlFYRkNPMEZCUTI1Q0xHRkJRVThzUzBGQlMzVktMR1ZCUVZvN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTdzRRa0ZCY1VKNldDeE5RVUZ5UWl4RlFVRTJRanRCUVVNelFpeFhRVUZMZVZnc1pVRkJUQ3hIUVVGMVFpeExRVUZMUkN4UFFVRk1MRWRCUVdWNFdDeE5RVUYwUXp0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHZENRVUZQV2l4VFFVRlFMRVZCUVd0Q08wRkJRMmhDTEZWQlFVa3NRMEZCUXl4TFFVRkxjMWtzVDBGQlZpeEZRVUZ0UWp0QlFVTnFRak5RTEZGQlFVRkJMRTFCUVUwc1EwRkJRM05ETEUxQlFWQXNRMEZCWXl4TFFVRkxjMDRzVTBGQmJrSXNSVUZCT0VKd1lpeFBRVUU1UWl4RFFVRnpReXhWUVVGQmQySXNUMEZCVHl4RlFVRkpPMEZCUXk5RFFTeFZRVUZCUVN4UFFVRlBMRU5CUVVNelRpeFBRVUZTTEVOQlFXZENhRXdzVTBGQmFFSTdRVUZEUkN4VFFVWkVPMEZCUjBRN1FVRkRSanRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc1kwRkJTMUlzVVVGQlRDeEZRVUZsUlN4UFFVRm1MRVZCUVhkQ2NrVXNVVUZCZUVJc1JVRkJhME03UVVGRGFFTXNWMEZCUzJsa0xFOUJRVXdzUjBGQlpTeExRVUZtTzBGQlEwRXNWMEZCUzBjc1kwRkJUQ3hEUVVGdlFtcGFMRkZCUVhCQ0xFZEJRU3RDUVN4UlFVRXZRanRCUVVOQkxGZEJRVXRwV2l4alFVRk1MRU5CUVc5Q0wxa3NUMEZCY0VJc1IwRkJPRUpCTEU5QlFUbENPMEZCUTBFc1YwRkJTeXRaTEdOQlFVd3NRMEZCYjBKd1pDeFJRVUZ3UWl4SFFVRXJRa0VzVVVGQkwwSTdRVUZGUVN4WFFVRkxhMlFzVTBGQlRDeERRVUZsTlVnc1NVRkJaaXhIUVVGelFpeEpRVUZKTVZZc1lVRkJTaXhEUVVGaFowTXNVMEZCWWl4RlFVRjNRblZETEZGQlFYaENMRVZCUVd0RFJTeFBRVUZzUXl4RlFVRXlRM0pGTEZGQlFUTkRMRU5CUVhSQ08wRkJRMEVzVjBGQlMydGtMRk5CUVV3c1EwRkJaVU1zVFVGQlppeEhRVUYzUW5aa0xHbENRVUZCTEVOQlFXRXNRMEZEYmtNc1MwRkJTM05rTEZOQlFVd3NRMEZCWlRWSUxFbEJSRzlDTEVWQlJXNURMRXRCUVVzMFNDeFRRVUZNTEVOQlFXVjZTaXhOUVVadlFpeERRVUZpTEVOQlFYaENPMEZCUzBFc1lVRkJUeXhMUVVGTGVVb3NVMEZCVEN4RFFVRmxReXhOUVVGMFFqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR2xDUVVGUk8wRkJRMDRzVjBGQlMwWXNUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkRRU3hoUVVGUExFbEJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzWjBKQlFVODVXU3hSUVVGUUxFVkJRV2xDUlN4UFFVRnFRaXhGUVVFd1FuSkZMRkZCUVRGQ0xFVkJRVzlETzBGQlEyeERMRmRCUVV0cFpDeFBRVUZNTEVkQlFXVXNTMEZCWmpzN1FVRkZRU3hWUVVGSkxFTkJRVU1zUzBGQlMwTXNVMEZCVEN4RFFVRmxOVWdzU1VGQlppeERRVUZ2UWpkVkxFOUJRWHBDTEVWQlFXdERPMEZCUTJoRExHRkJRVXN5WXl4alFVRk1MRU5CUVc5Q2Fsb3NVVUZCY0VJc1IwRkJLMEpCTEZGQlFWRXNTVUZCU1N4TFFVRkxhVm9zWTBGQlRDeERRVUZ2UW1wYUxGRkJRUzlFTzBGQlEwRXNZVUZCUzJsYUxHTkJRVXdzUTBGQmIwSXZXU3hQUVVGd1FpeEhRVUU0UWtFc1QwRkJUeXhKUVVGSkxFdEJRVXNyV1N4alFVRk1MRU5CUVc5Q0wxa3NUMEZCTjBRN1FVRkRRU3hoUVVGTEsxa3NZMEZCVEN4RFFVRnZRbkJrTEZGQlFYQkNMRWRCUVN0Q1FTeFJRVUZSTEVsQlFVa3NTMEZCUzI5a0xHTkJRVXdzUTBGQmIwSndaQ3hSUVVFdlJEdEJRVVZCTEdGQlFVdHJaQ3hUUVVGTUxFTkJRV1UxU0N4SlFVRm1MRWRCUVhOQ0xFbEJRVWt4Vml4aFFVRktMRU5CUTNCQ1owTXNVMEZFYjBJc1JVRkZjRUlzUzBGQlMzZGlMR05CUVV3c1EwRkJiMEpxV2l4UlFVWkJMRVZCUjNCQ0xFdEJRVXRwV2l4alFVRk1MRU5CUVc5Q0wxa3NUMEZJUVN4RlFVbHdRaXhMUVVGTEsxa3NZMEZCVEN4RFFVRnZRbkJrTEZGQlNrRXNRMEZCZEVJN1FVRk5RU3hoUVVGTGEyUXNVMEZCVEN4RFFVRmxReXhOUVVGbUxFZEJRWGRDZG1Rc2FVSkJRVUVzUTBGQllTeERRVU51UXl4TFFVRkxjMlFzVTBGQlRDeERRVUZsTlVnc1NVRkViMElzUlVGRmJrTXNTMEZCU3pSSUxGTkJRVXdzUTBGQlpYcEtMRTFCUm05Q0xFTkJRV0lzUTBGQmVFSTdRVUZKUkRzN1FVRkZSQ3hoUVVGUExFdEJRVXQ1U2l4VFFVRk1MRU5CUVdWRExFMUJRWFJDTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2EwSkJRVk03UVVGRFVDeFhRVUZMUml4UFFVRk1MRWRCUVdVc1NVRkJaanRCUVVWQk0xQXNUVUZCUVVFc1RVRkJUU3hEUVVGRGMwTXNUVUZCVUN4RFFVRmpMRXRCUVV0elRpeFRRVUZ1UWl4RlFVRTRRbkJpTEU5QlFUbENMRU5CUVhORExGVkJRVUYzWWl4UFFVRlBMRVZCUVVrN1FVRkRMME5CTEZGQlFVRkJMRTlCUVU4c1EwRkJRMnhrTEUxQlFWSTdRVUZEUkN4UFFVWkVPMEZCU1VFc1lVRkJUeXhKUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNaMEpCUVU4N1FVRkRUQ3hYUVVGTE5tTXNUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkZRVE5RTEUxQlFVRkJMRTFCUVUwc1EwRkJRM05ETEUxQlFWQXNRMEZCWXl4TFFVRkxjMDRzVTBGQmJrSXNSVUZCT0VKd1lpeFBRVUU1UWl4RFFVRnpReXhWUVVGQmQySXNUMEZCVHl4RlFVRkpPMEZCUXk5RFFTeFJRVUZCUVN4UFFVRlBMRU5CUVVNMVl5eFBRVUZTTzBGQlEwUXNUMEZHUkR0QlFVbEJMR0ZCUVU4c1NVRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CT3pzN08xZEJRMFVzYlVKQlFWVTdRVUZEVWl4WFFVRkxUaXhOUVVGTU8wRkJSVUVzWVVGQlR5eExRVUZMT0dNc1UwRkJXanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHpRa0ZCWVR0QlFVTllMRmRCUVV0TkxHOUNRVUZNTEVOQlFUQkNMRU5CUVRGQ08wRkJRMFE3T3pzN096dEJRVWRJTERCRVFVRmxWaXhoUVVGbUxFVTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU42VUVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRKUVVOTlZ6czdPenM3UVVGRFNpdzJRa0ZCTUVJN1FVRkJRVHM3UVVGQlFTeFJRVUZrYkVzc1QwRkJZeXgxUlVGQlNpeEZRVUZKT3p0QlFVRkJPenRCUVVONFFpdzRRa0ZCVFVFc1QwRkJUanRCUVVWQkxGVkJRVXR0U3l4SFFVRk1MRWRCUVZjc1NVRkJXRHRCUVVOQkxGVkJRVXRETEV0QlFVd3NSMEZCWVN4RlFVRmlPMEZCUTBFc1ZVRkJTME1zWTBGQlRDeEhRVUZ6UW1obExIRkNRVUZCTEVWQlFYUkNPMEZCVEhkQ08wRkJUWHBDT3pzN08xTkJSVVFzWlVGQmNVSTdRVUZEYmtJN1FVRkRRU3hWUVVGSmFXVXNWMEZCVnl4SFFVRkhMRU5CUVd4Q096dEJRVVZCTEZWQlFVa3NTMEZCUzBnc1IwRkJWQ3hGUVVGak8wRkJRMXBITEZGQlFVRkJMRmRCUVZjc1NVRkJTU3hMUVVGTFNDeEhRVUZNTEVOQlFWTnFTeXhOUVVGNFFqdEJRVU5FT3p0QlFVVkVMRmRCUVV0clN5eExRVUZNTEVOQlFWYzNZaXhQUVVGWUxFTkJRVzFDTEZWQlFVRm5ZeXhMUVVGTExFVkJRVWs3UVVGRE1VSkVMRkZCUVVGQkxGZEJRVmNzU1VGQlNVTXNTMEZCU3l4RFFVRkRja3NzVFVGQmNrSTdRVUZEUkN4UFFVWkVPenRCUVVsQkxHRkJRVTl2U3l4WFFVRlhMRWRCUVVjc1MwRkJTMklzWlVGQk1VSTdRVUZEUkRzN08xZEJSVVFzT0VKQlFYRkNlbGdzVFVGQmNrSXNSVUZCTmtJN1FVRkJRVHM3UVVGRE0wSXNPRWhCUVRKQ1FTeE5RVUV6UWpzN1FVRkZRU3hYUVVGTGIxa3NTMEZCVEN4RFFVRlhOMklzVDBGQldDeERRVUZ0UWl4VlFVRkJaMk1zUzBGQlN5eEZRVUZKTzBGQlF6RkNRU3hSUVVGQlFTeExRVUZMTEVOQlFVTk9MRzlDUVVGT0xFTkJRVEpDTEUxQlFVa3NRMEZCUTFJc1pVRkJhRU03UVVGRFJDeFBRVVpFT3p0QlFVbEJMRlZCUVVrc1MwRkJTMVVzUjBGQlZDeEZRVUZqTzBGQlExb3NZVUZCUzBFc1IwRkJUQ3hEUVVGVFJpeHZRa0ZCVkN4RFFVRTRRaXhMUVVGTFVpeGxRVUZ1UXp0QlFVTkVPMEZCUTBZN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNjVUpCVFVVN1FVRkJRU3hWUVV4QlpTeGhRVXRCTEhWRlFVeG5RaXhGUVV0b1FqdEJRVUZCTEZWQlNrRkRMRmRCU1VFN1FVRkJRU3hWUVVoQmRrTXNZMEZIUVR0QlFVRkJMRlZCUmtFdlNDeFJRVVZCTzBGQlFVRXNWVUZFUVRWRUxGVkJRMEU3TzBGQlEwRTdRVUZEUVN4VlFVRkpMRXRCUVVzMFRpeEhRVUZNTEV0QlFXRk5MRmRCUVdJc1NVRkJORUpFTEdGQlFXRXNRMEZCUTNwaExGRkJRV1FzUTBGQmRVSXNTMEZCUzI5aExFZEJRVFZDTEVOQlFXaERMRVZCUVd0Rk8wRkJRMmhGTEdGQlFVdEJMRWRCUVV3c1IwRkJWeXhKUVVGWU8wRkJRMFE3TzBGQlEwUXNWMEZCUzBNc1MwRkJUQ3hIUVVGaExFdEJRVXRCTEV0QlFVd3NRMEZCVjJ4akxFMUJRVmdzUTBGRFdDeFZRVUZCY1dNc1MwRkJTenRCUVVGQkxHVkJRVWxCTEV0QlFVc3NTMEZCUzBVc1YwRkJWaXhKUVVGNVFpeERRVUZEUkN4aFFVRmhMRU5CUVVONllTeFJRVUZrTEVOQlFYVkNkMkVzUzBGQmRrSXNRMEZCT1VJN1FVRkJRU3hQUVVSTkxFTkJRV0k3UVVGSFFTeFhRVUZMUnl4VlFVRk1PMEZCUlVFc1YwRkJTMDRzUzBGQlRDeEhRVUZoU1N4aFFVRmlPMEZCUTBFc1YwRkJTMHdzUjBGQlRDeEhRVUZYVFN4WFFVRllPMEZCUTBFc1YwRkJTMFVzUzBGQlRDeERRVUZYZWtNc1kwRkJXQ3hGUVVFeVFpOUlMRkZCUVROQ0xFVkJRWEZETlVRc1ZVRkJja003UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdWQlFVMHlUQ3hqUVVGT0xFVkJRWE5DTDBnc1VVRkJkRUlzUlVGQlowTTFSQ3hWUVVGb1F5eEZRVUUwUXp0QlFVRkJPenRCUVVNeFF6dEJRVU5CTEZkQlFVczRUaXhqUVVGTUxFTkJRVzlDZUdRc1RVRkJjRUlzUjBGR01FTXNRMEZKTVVNN096dEJRVU5CTEZWQlFVMHJaQ3hqUVVGakxFZEJRVWNzUzBGQlMxSXNTMEZCVEN4RFFVRlhlRllzUjBGQldDeERRVUZsTEZWQlFVRXlWaXhMUVVGTE8wRkJRVUVzWlVGRGVrTkJMRXRCUVVzc1EwRkJRMDBzVTBGQlRpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFqTkRMR05CUVc1Q0xFVkJRVzFETDBnc1VVRkJia01zUTBGRWVVTTdRVUZCUVN4UFFVRndRaXhEUVVGMlFpeERRVXd3UXl4RFFWTXhRenM3TzBGQlEwRXNWVUZCU1N4TFFVRkxaMHNzUjBGQlZDeEZRVUZqTzBGQlExcFRMRkZCUVVGQkxHTkJRV01zUTBGQlF6RlhMRWxCUVdZc1EwRkJiMElzUzBGQlMybFhMRWRCUVV3c1EwRkJVMVVzVTBGQlZDeERRVUZ0UWl4RFFVRnVRaXhGUVVGelFqTkRMR05CUVhSQ0xFVkJRWE5ETDBnc1VVRkJkRU1zUTBGQmNFSTdRVUZEUVN4aFFVRkxkRkVzU1VGQlRDeEhRVUZaTEV0QlFVdHpZU3hIUVVGTUxFTkJRVk4wWVN4SlFVRnlRanRCUVVORUxFOUJTRVFzVFVGSFR6dEJRVU5NTEdGQlFVdEJMRWxCUVV3c1IwRkJXU3hKUVVGYU8wRkJRMFE3TzBGQlJVUXNWMEZCUzNkaExHTkJRVXdzUjBGQmMwSm9aU3hwUWtGQlFTeERRVUZoZFdVc1kwRkJZaXhGUVVFMlFpeFpRVUZOTzBGQlEzWkVMR05CUVVrc1EwRkJRMUlzUzBGQlRDeERRVUZYTjJJc1QwRkJXQ3hEUVVGdFFpeFZRVUZCWjJNc1MwRkJTeXhGUVVGSk8wRkJRekZDUVN4VlFVRkJRU3hMUVVGTExFTkJRVU14WkN4TlFVRk9PMEZCUTBFd1pDeFZRVUZCUVN4TFFVRkxMRU5CUVVOSExGVkJRVTQ3UVVGRFJDeFRRVWhFT3p0QlFVbEJMRmxCUVVrc1QwRkJUMjVQTEZWQlFWQXNTMEZCYzBJc1ZVRkJNVUlzUlVGQmMwTTdRVUZEY0VOQkxGVkJRVUZCTEZWQlFWVTdRVUZEV0R0QlFVTkdMRTlCVW5GQ0xFTkJRWFJDTzBGQlUwUTdPenRYUVVWRUxHTkJRVXN6VEN4UlFVRk1MRVZCUVdWRkxFOUJRV1lzUlVGQmQwSnlSU3hSUVVGNFFpeEZRVUZyUTNGbExFMUJRV3hETEVWQlFUQkRPMEZCUTNoRExGZEJRVXR3UWl4UFFVRk1MRWRCUVdVc1MwRkJaanRCUVVOQkxGZEJRVXRITEdOQlFVd3NRMEZCYjBKcVdpeFJRVUZ3UWl4SFFVRXJRa0VzVVVGQkwwSTdRVUZEUVN4WFFVRkxhVm9zWTBGQlRDeERRVUZ2UWk5WkxFOUJRWEJDTEVkQlFUaENRU3hQUVVFNVFqdEJRVU5CTEZkQlFVc3JXU3hqUVVGTUxFTkJRVzlDY0dRc1VVRkJjRUlzUjBGQkswSkJMRkZCUVM5Q08wRkJSVUVzVlVGQlRYTmxMRkZCUVZFc1IwRkJSeXhEUVVGRExFdEJRVXRXTEdOQlFVNHNRMEZCYWtJN08wRkJSVUVzVjBGQlMwUXNTMEZCVEN4RFFVRlhOMklzVDBGQldDeERRVUZ0UWl4VlFVRkJaMk1zUzBGQlN5eEZRVUZKTzBGQlF6RkNRU3hSUVVGQlFTeExRVUZMTEVOQlFVTjBTU3hOUVVGT08wRkJRMFFzVDBGR1JEczdRVUZKUVN4VlFVRkpMRXRCUVV0clNTeEhRVUZVTEVWQlFXTTdRVUZEV2l4aFFVRkxVaXhUUVVGTUxFTkJRV1UxU0N4SlFVRm1MRWRCUVhOQ0xFdEJRVXR2U1N4SFFVRk1MRU5CUVZOd1NTeEpRVUZVTEVOQlEzQkNNVlFzVTBGRWIwSXNSVUZGY0VKQkxGTkJSbTlDTEVWQlIzQkNRU3hUUVVodlFpeEZRVWx3UW5sakxFMUJTbTlDTEVOQlFYUkNPMEZCVFVGRExGRkJRVUZCTEZGQlFWRXNRMEZCUXpkWExFbEJRVlFzUTBGQll5eExRVUZMZVZZc1UwRkJUQ3hEUVVGbE5VZ3NTVUZCTjBJN1FVRkRSRHM3UVVGRlJDeFhRVUZMTkVnc1UwRkJUQ3hEUVVGbFF5eE5RVUZtTEVkQlFYZENkbVFzYVVKQlFVRXNRMEZCWVRCbExGRkJRV0lzUlVGQmRVSnVZU3hSUVVGMlFpeEZRVUZwUTBVc1QwRkJha01zUlVGQk1FTnlSU3hSUVVFeFF5eERRVUY0UWp0QlFVTkJMR0ZCUVU4c1MwRkJTMnRrTEZOQlFVd3NRMEZCWlVNc1RVRkJkRUk3UVVGRFJEczdPMWRCUlVRc2FVSkJRVkU3UVVGRFRpeFhRVUZMVVN4TFFVRk1MRU5CUVZjM1lpeFBRVUZZTEVOQlFXMUNMRlZCUVVGbll5eExRVUZMTEVWQlFVazdRVUZETVVKQkxGRkJRVUZCTEV0QlFVc3NRMEZCUTNaSkxFdEJRVTQ3UVVGRFJDeFBRVVpFT3p0QlFVbEJMRlZCUVVrc1MwRkJTMjFKTEVkQlFWUXNSVUZCWXp0QlFVTmFMR0ZCUVV0QkxFZEJRVXdzUTBGQlUyNUpMRXRCUVZRN1FVRkRSRHM3UVVGRlJEdEJRVU5FT3pzN1YwRkZSQ3huUWtGQlQzQlNMRkZCUVZBc1JVRkJhVUpGTEU5QlFXcENMRVZCUVRCQ2NrVXNVVUZCTVVJc1JVRkJiME54WlN4TlFVRndReXhGUVVFMFF6dEJRVU14UXl4WFFVRkxjRUlzVDBGQlRDeEhRVUZsTEV0QlFXWTdPMEZCUlVFc1ZVRkJTU3hEUVVGRExFdEJRVXRETEZOQlFVd3NRMEZCWlRWSUxFbEJRV1lzUTBGQmIwSTNWU3hQUVVGNlFpeEZRVUZyUXp0QlFVTm9ReXhoUVVGTE1tTXNZMEZCVEN4RFFVRnZRbXBhTEZGQlFYQkNMRWRCUVN0Q1FTeFJRVUZSTEVsQlFVa3NTMEZCUzJsYUxHTkJRVXdzUTBGQmIwSnFXaXhSUVVFdlJEdEJRVU5CTEdGQlFVdHBXaXhqUVVGTUxFTkJRVzlDTDFrc1QwRkJjRUlzUjBGQk9FSkJMRTlCUVU4c1NVRkJTU3hMUVVGTEsxa3NZMEZCVEN4RFFVRnZRaTlaTEU5QlFUZEVPMEZCUTBFc1lVRkJTeXRaTEdOQlFVd3NRMEZCYjBKd1pDeFJRVUZ3UWl4SFFVRXJRa0VzVVVGQlVTeEpRVUZKTEV0QlFVdHZaQ3hqUVVGTUxFTkJRVzlDY0dRc1VVRkJMMFE3UVVGRFJEczdRVUZGUkN4VlFVRk5jMlVzVVVGQlVTeEhRVUZITEVOQlFVTXNTMEZCUzFZc1kwRkJUaXhEUVVGcVFqczdRVUZGUVN4WFFVRkxSQ3hMUVVGTUxFTkJRVmMzWWl4UFFVRllMRU5CUVcxQ0xGVkJRVUZuWXl4TFFVRkxMRVZCUVVrN1FVRkRNVUpCTEZGQlFVRkJMRXRCUVVzc1EwRkJRM1JKTEUxQlFVNDdRVUZEUkN4UFFVWkVPenRCUVVsQkxGVkJRVWtzUzBGQlMydEpMRWRCUVZRc1JVRkJZenRCUVVOYUxHRkJRVXRTTEZOQlFVd3NRMEZCWlRWSUxFbEJRV1lzUjBGQmMwSXNTMEZCUzI5SkxFZEJRVXdzUTBGQlUyeEpMRTFCUVZRc1EwRkRjRUkxVkN4VFFVUnZRaXhGUVVWd1FrRXNVMEZHYjBJc1JVRkhjRUpCTEZOQlNHOUNMRVZCU1hCQ2VXTXNUVUZLYjBJc1EwRkJkRUk3UVVGTlFVTXNVVUZCUVVFc1VVRkJVU3hEUVVGRE4xY3NTVUZCVkN4RFFVRmpMRXRCUVV0NVZpeFRRVUZNTEVOQlFXVTFTQ3hKUVVFM1FqdEJRVU5FT3p0QlFVVkVMRmRCUVVzMFNDeFRRVUZNTEVOQlFXVkRMRTFCUVdZc1IwRkJkMEoyWkN4cFFrRkJRU3hEUVVOMFFqQmxMRkZCUkhOQ0xFVkJSWFJDTEV0QlFVdHNRaXhqUVVGTUxFTkJRVzlDYWxvc1VVRkdSU3hGUVVkMFFpeExRVUZMYVZvc1kwRkJUQ3hEUVVGdlFpOVpMRTlCU0VVc1JVRkpkRUlzUzBGQlN5dFpMR05CUVV3c1EwRkJiMEp3WkN4UlFVcEZMRU5CUVhoQ08wRkJUVUVzWVVGQlR5eExRVUZMYTJRc1UwRkJUQ3hEUVVGbFF5eE5RVUYwUWp0QlFVTkVPenM3VjBGRlJDeHJRa0ZCVXp0QlFVTlFMRmRCUVV0UkxFdEJRVXdzUTBGQlZ6ZGlMRTlCUVZnc1EwRkJiVUlzVlVGQlFXZGpMRXRCUVVzc1JVRkJTVHRCUVVNeFFrRXNVVUZCUVVFc1MwRkJTeXhEUVVGRGRra3NTMEZCVGp0QlFVTkVMRTlCUmtRN08wRkJTVUVzVlVGQlNTeExRVUZMYlVrc1IwRkJWQ3hGUVVGak8wRkJRMW9zWVVGQlMwRXNSMEZCVEN4RFFVRlRkR1FzVFVGQlZEdEJRVU5FT3p0QlFVVkVMRmRCUVV0M1pDeGpRVUZNTEVOQlFXOUNlR1FzVFVGQmNFSTdPMEZCUlVFN1FVRkRSRHM3TzFkQlJVUXNaMEpCUVU4N1FVRkRUQ3hYUVVGTGRXUXNTMEZCVEN4RFFVRlhOMklzVDBGQldDeERRVUZ0UWl4VlFVRkJaMk1zUzBGQlN5eEZRVUZKTzBGQlF6RkNRU3hSUVVGQlFTeExRVUZMTEVOQlFVTjJTU3hMUVVGT08wRkJRMFFzVDBGR1JEczdRVUZKUVN4VlFVRkpMRXRCUVV0dFNTeEhRVUZVTEVWQlFXTTdRVUZEV2l4aFFVRkxRU3hIUVVGTUxFTkJRVk5xU1N4SlFVRlVPMEZCUTBRN08wRkJSVVE3UVVGRFJEczdPMWRCUlVRc1owSkJRVTg1VVN4VFFVRlFMRVZCUVd0Q08wRkJRMmhDTEdkSVFVRmhRU3hUUVVGaU96dEJRVVZCTEZkQlFVdG5XaXhMUVVGTUxFTkJRVmMzWWl4UFFVRllMRU5CUVcxQ0xGVkJRVUZuWXl4TFFVRkxMRVZCUVVrN1FVRkRNVUpCTEZGQlFVRkJMRXRCUVVzc1EwRkJRMnBRTEUxQlFVNHNRMEZCWVd4TExGTkJRV0k3UVVGRFJDeFBRVVpFT3p0QlFVbEJMRlZCUVVrc1MwRkJTeXRaTEVkQlFWUXNSVUZCWXp0QlFVTmFMR0ZCUVV0QkxFZEJRVXdzUTBGQlV6ZFBMRTFCUVZRc1EwRkJaMEpzU3l4VFFVRm9RanRCUVVORU8wRkJRMFk3T3p0WFFVVkVMRzFDUVVGVk8wRkJRMUk3TzBGQlJVRXNWMEZCUzJsYUxHTkJRVXdzUTBGQmIwSjRaQ3hOUVVGd1FqczdRVUZEUVN4aFFVRlBMRXRCUVV0M1pDeGpRVUZhTzBGQlEwRXNWMEZCUzBZc1IwRkJUQ3hIUVVGWExFbEJRVmc3UVVGRFFTeFhRVUZMUXl4TFFVRk1MRU5CUVZjMVlpeE5RVUZZTEVkQlFXOUNMRU5CUVhCQ08wRkJRMFE3T3p0WFFVVkVMSE5DUVVGaE8wRkJRMWdzVlVGQlNTeExRVUZMTW1Jc1IwRkJWQ3hGUVVGak8wRkJRMW9zWVVGQlMwRXNSMEZCVEN4RFFVRlRUeXhWUVVGVU8wRkJRMFE3TzBGQlJVUXNWMEZCUzA0c1MwRkJUQ3hEUVVGWE4ySXNUMEZCV0N4RFFVRnRRaXhWUVVGQloyTXNTMEZCU3l4RlFVRkpPMEZCUXpGQ1FTeFJRVUZCUVN4TFFVRkxMRU5CUVVOSExGVkJRVTQ3UVVGRFJDeFBRVVpFTzBGQlIwUTdPenM3UlVGcVVESkNia0k3TzBGQmIxQTVRaXcwUkVGQlpWY3NaVUZCWml4Rk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZET1ZCQk8wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wbEJRMDFqT3pzN096czdPenRCUVVOS08wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkZMRzFDUVVGaE8wRkJRMWdzWVVGQlR5eExRVUZMZEVJc1QwRkJXanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFOQlEwVXNaVUZCY1VJc1EwRkJSVHRUUVVWMlFpeGhRVUZ0UWk5WkxFOUJRVzVDTEVWQlFUUkNMRU5CUVVVN1FVRkZPVUk3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFOQlEwVXNaVUZCWlN4RFFVRkZPMU5CUldwQ0xHRkJRV0Z6WVN4RlFVRmlMRVZCUVdsQ0xFTkJRVVU3UVVGRmJrSTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMU5CUTBVc1pVRkJiVUlzUTBGQlJUdEJRVVZ5UWp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1UwRkRSU3hsUVVGMVFpeERRVUZGTzBGQlJYcENPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRUUVVORkxHVkJRWE5DTEVOQlFVVTdRVUZGZUVJN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTdzRRa0ZCY1VKd1lpeEpRVUZ5UWl4RlFVRXlRbkZpTEZWQlFUTkNMRVZCUVhWRGFFUXNZMEZCZGtNc1JVRkJkVVF2U0N4UlFVRjJSQ3hGUVVGcFJYSlFMRTlCUVdwRkxFVkJRVEJGTEVOQlFVVTdRVUZGTlVVN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhWQ1FVTkZha0lzU1VGRVJpeEZRVVZGY1Zrc1kwRkdSaXhGUVVkRkwwZ3NVVUZJUml4RlFVbEZkbEFzVVVGS1JpeEZRVXRGUlN4UFFVeEdMRVZCVFVWeVJTeFJRVTVHTEVWQlQwVnhaU3hOUVZCR0xFVkJVVVVzUTBGQlJUdEJRVVZLTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3eVFrRkJhMElzUTBGQlJUdEJRVVZ3UWp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc01FSkJRV2xDTEVOQlFVVTdRVUZGYmtJN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeDVRa0ZEUldwaUxFbEJSRVlzUlVGRlJYRlpMR05CUmtZc1JVRkhSUzlJTEZGQlNFWXNSVUZKUlhaUUxGRkJTa1lzUlVGTFJVVXNUMEZNUml4RlFVMUZja1VzVVVGT1JpeEZRVTlGY1dVc1RVRlFSaXhGUVZGRkxFTkJRVVU3UVVGRlNqdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNlVUpCUVdkQ0xFTkJRVVU3UVVGRmJFSTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR2RDUVVGUE1Wb3NVMEZCVUN4RlFVRnJRaXhEUVVGRk8wRkJSWEJDTzBGQlEwWTdRVUZEUVRzN096dFhRVU5GTEcxQ1FVRlZMRU5CUVVVN1FVRkZXanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNhVUpCUVcxRE8wRkJRVUVzVlVGQmRFSnZUaXhUUVVGelFqdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk96dEJRVU5xUXl4VlFVRk5NazBzYjBKQlFXOUNPMEZCUVVFN08wRkJRVUU3TzBGQlEzaENMSGREUVVGdFF6dEJRVUZCT3p0QlFVRkJMR05CUVhaQ2Jrd3NUMEZCZFVJc2RVVkJRV0lzUlVGQllUczdRVUZCUVRzN1FVRkJRU3cwUTBGQlRuSlRMRWxCUVUwN1FVRkJUa0VzV1VGQlFVRXNTVUZCVFR0QlFVRkJPenRCUVVOcVF5eHRSRUZCVFhGVExFOUJRVTRzVTBGQmEwSnlVeXhKUVVGc1FqdEJRVVZCTEdkQ1FVRkxlV1FzWjBKQlFVd3NSMEZCZDBJc1NVRkJTV3hDTEhGQ1FVRktMRVZCUVhoQ08wRkJRMEVzWjBKQlFVdHRRaXhQUVVGTUxFZEJRV1VzVFVGQlMwRXNUMEZCVEN4TFFVRnBRbWhrTEZOQlFXcENMRWRCUVRaQ0xFMUJRVXRuWkN4UFFVRnNReXhIUVVFMFF5eEpRVUZKUXl4SFFVRktMRVZCUVRORU8wRkJRMEVzWjBKQlFVdERMR0ZCUVV3c1IwRkJjVUlzU1VGQmNrSTdRVUZEUVN4blFrRkJTemRDTEU5QlFVd3NSMEZCWlN4TFFVRm1PMEZCUlVFc1owSkJRVXM0UWl4bFFVRk1MRWRCUTBWcVlpeE5RVUZOTEVOQlFVTjVVQ3hQUVVGUExFTkJRVU5yU1N4alFVRlVMRU5CUVU0c1NVRkJhME1zUTBGQmJFTXNSMEZEU1ROWUxFMUJRVTBzUTBGQlEzbFFMRTlCUVU4c1EwRkJRMnRKTEdOQlFWUXNRMEZFVml4SFFVVkpMRU5CU0U0N1FVRkxRU3huUWtGQlMzVkVMRk5CUVV3c1IwRkRSU3hQUVVGUGVrd3NUMEZCVHl4RFFVRkRSeXhSUVVGbUxFdEJRVFJDTEZWQlFUVkNMRWRCUVhsRFNDeFBRVUZQTEVOQlFVTkhMRkZCUVdwRUxFZEJRVFJFT1ZJc1UwRkVPVVE3UVVGaWFVTTdRVUZsYkVNN08wRkJhRUoxUWp0QlFVRkJPMEZCUVVFc1pVRnJRbmhDTEdWQlFXRTdRVUZEV0N4dFFrRkJUeXhMUVVGTGNXSXNUMEZCV2p0QlFVTkVPMEZCY0VKMVFqdEJRVUZCTzBGQlFVRXNaVUZ6UW5oQ0xHVkJRWEZDTzBGQlEyNUNMRzFDUVVGUExFdEJRVXM0UWl4bFFVRmFPMEZCUTBRc1YwRjRRblZDTzBGQlFVRXNaVUV3UW5oQ0xHRkJRVzFDTjJFc1QwRkJia0lzUlVGQk5FSTdRVUZETVVKQkxGbEJRVUZCTEU5QlFVOHNSMEZCUjBvc1RVRkJUU3hEUVVGRFNTeFBRVUZFTEVOQlFXaENPenRCUVVWQkxHZENRVUZKTEVWQlFVVkJMRTlCUVU4c1NVRkJTU3hEUVVGaUxFTkJRVW9zUlVGQmNVSTdRVUZEYmtJc2IwSkJRVTBzU1VGQlNXcEZMRXRCUVVvc01FTkJRemhDTEV0QlFVdDVUeXhYUVVGTUxFTkJRV2xDZEV3c1NVRkVMME1zYVVKQlF6QkVZeXhQUVVReFJDeDFSVUZCVGp0QlFVZEVPenRCUVVWRUxHbENRVUZMTm1Fc1pVRkJUQ3hIUVVGMVFqZGhMRTlCUVhaQ08wRkJRMFE3UVVGd1EzVkNPMEZCUVVFN1FVRkJRU3hsUVhORGVFSXNaVUZCWlR0QlFVTmlMRzFDUVVGUExFdEJRVXM0WVN4VFFVRmFPMEZCUTBRc1YwRjRRM1ZDTzBGQlFVRXNaVUV3UTNoQ0xHRkJRV0ZTTEVWQlFXSXNSVUZCYVVJN1FVRkRaaXhwUWtGQlMxRXNVMEZCVEN4SFFVRnBRbElzUlVGQmFrSTdRVUZEUkR0QlFUVkRkVUk3UVVGQlFUdEJRVUZCTEdWQk9FTjRRaXhsUVVGdFFqdEJRVU5xUWl4dFFrRkJUeXhMUVVGTFRTeGhRVUZhTzBGQlEwUTdRVUZvUkhWQ08wRkJRVUU3UVVGQlFTeGxRV3RFZUVJc1pVRkJkVUk3UVVGRGNrSXNaMEpCUVVrc1MwRkJTMEVzWVVGQlZDeEZRVUYzUWp0QlFVTjBRaXh4UWtGQlR5eExRVUZMUVN4aFFVRk1MRU5CUVcxQ01XSXNTVUZCTVVJN1FVRkRSRHM3UVVGRlJDeHRRa0ZCVHl4SlFVRlFPMEZCUTBRN1FVRjRSSFZDTzBGQlFVRTdRVUZCUVN4bFFUQkVlRUlzWlVGQmMwSTdRVUZEY0VJc2JVSkJRVThzUzBGQlN6QmlMR0ZCUVV3c1MwRkJkVUlzUzBGQlMwZ3NaMEpCUVc1RE8wRkJRMFE3UVVFMVJIVkNPMEZCUVVFN1FVRkJRU3hwUWtFNFJIaENMRGhDUVVORmRtSXNTVUZFUml4RlFVVkZjV0lzVlVGR1JpeEZRVWRGYUVRc1kwRklSaXhGUVVsRkwwZ3NVVUZLUml4RlFVdEZjbEFzVDBGTVJpeEZRVTFGTzBGQlFVRTdPMEZCUTBFc1owSkJRVWxxUWl4SlFVRkpMRXRCUVVzc1NVRkJWQ3hKUVVGcFFpeERRVUZETEV0QlFVdDNZaXhQUVVGTUxFTkJRV0ZMTEVkQlFXSXNRMEZCYVVJM1lpeEpRVUZxUWl4RFFVRjBRaXhGUVVFNFF6dEJRVU0xUXl4clFrRkJUVGxDTEVOQlFVTXNSMEZCUnl4SlFVRkpja0lzUzBGQlNpeHJRa0ZEUlhkbExGVkJSRVlzZDBKQlF6QkNjbUlzU1VGRU1VSXNNa05CUVZZN08wRkJTVUVzYTBKQlFVa3NUMEZCVDJsQ0xFOUJRVkFzUzBGQmJVSXNWVUZCZGtJc1JVRkJiVU03UVVGRGFrTkJMR2RDUVVGQlFTeFBRVUZQTEVOQlFVTXZReXhEUVVGRUxFTkJRVkE3UVVGRFJEczdRVUZGUkN4dlFrRkJUVUVzUTBGQlRqdEJRVU5FT3p0QlFVVkVMR2RDUVVGTk1HTXNWMEZCVnl4SFFVRkhOV0VzU1VGQlNTeExRVUZMTEVsQlFWUXNSMEZCWjBJc1MwRkJTM2RpTEU5QlFVd3NRMEZCWVhaR0xFZEJRV0lzUTBGQmFVSnFWeXhKUVVGcVFpeERRVUZvUWl4SFFVRjVReXhKUVVFM1JDeERRV0pCTEVOQlpVRTdPMEZCUTBFc1owSkJRVWtzUzBGQlN6aGlMR2RDUVVGTUxFdEJRVEJDT1dJc1NVRkJPVUlzUlVGQmIwTTdRVUZEYkVNN1FVRkRRU3hyUWtGQlNYRlpMR05CUVdNc1NVRkJTU3hEUVVGMFFpeEZRVUY1UWp0QlFVTjJRanRCUVVOQkxHOUNRVUZKTEV0QlFVdHhSQ3hoUVVGVUxFVkJRWGRDTzBGQlEzUkNMSFZDUVVGTFFTeGhRVUZNTEVOQlFXMUNNV1VzVFVGQmJrSTdPMEZCUTBFc2RVSkJRVXN3WlN4aFFVRk1MRU5CUVcxQ2Nrd3NUVUZCYmtJc1IwRkJORUlzUTBGQk5VSTdPMEZCUTBFc2RVSkJRVXR4VEN4aFFVRk1MRU5CUVcxQ1lpeFZRVUZ1UWp0QlFVTkVPenRCUVVWRUxIRkNRVUZMWVN4aFFVRk1MRWRCUVhGQ1pDeFhRVUZ5UWp0QlFVTkVMR1ZCVkVRc1EwRlZRVHRCUVZaQkxHMUNRVmRMTzBGQlEwZzdRVUZEUVN4dlFrRkJUVVFzWVVGQllTeEhRVUZITERKRFFVRkpMRXRCUVV0aExFOUJRVXdzUTBGQllXaFFMRTFCUVdJc1JVRkJTaXhGUVVFeVFtNVBMRTFCUVROQ0xFTkJRM0JDTEZWQlFVRnBVU3hEUVVGRE8wRkJRVUVzZVVKQlFVbEJMRU5CUVVNc1MwRkJTM05OTEZkQlFVNHNTMEZCYzBKMFRTeERRVUZETEVOQlFVTXJRaXhOUVVGR0xFbEJRVmt2UWl4RFFVRkRMRU5CUVVONVRpeGhRVUZ3UXl4RFFVRktPMEZCUVVFc2FVSkJSRzFDTEVOQlFYUkNMRU5CUmtjc1EwRk5TRHM3TzBGQlEwRXNjVUpCUVV0U0xHZENRVUZNTEVOQlFYTkNVeXhUUVVGMFFpeERRVU5GY2tJc1lVRkVSaXhGUVVWRlF5eFhRVVpHTEVWQlIwVjJReXhqUVVoR0xFVkJTVVV2U0N4UlFVcEdMRVZCUzBVc1dVRkJUVHRCUVVOS0xIZENRVUZKTEVOQlFVTnZUQ3hoUVVGTUxFZEJRWEZDWkN4WFFVRnlRanRCUVVOQkxIZENRVUZKTEVOQlFVTlhMR2RDUVVGTUxFTkJRWE5DYkV3c1RVRkJkRUlzUjBGQkswSXNRMEZCTDBJN1FVRkRSQ3hwUWtGU1NEczdRVUZYUVN4eFFrRkJTM0ZNTEdGQlFVd3NSMEZCY1VJc1MwRkJTMGdzWjBKQlFURkNPMEZCUTBRN1FVRkRSaXhoUVdwRFJDeE5RV2xEVHl4SlFVRkpSaXhWUVVGVkxFdEJRVXNzVFVGQmJrSXNSVUZCTWtJN1FVRkRhRU1zYlVKQlFVdExMR0ZCUVV3c1EwRkJiVUl4WlN4TlFVRnVRanM3UVVGRlFTeHJRa0ZCU1N4TFFVRkxNR1VzWVVGQlRDeExRVUYxUWl4TFFVRkxTQ3huUWtGQmFFTXNSVUZCYTBRN1FVRkRhRVFzY1VKQlFVdEJMR2RDUVVGTUxFTkJRWE5DVkN4TFFVRjBRaXhEUVVFMFFucERMR05CUVRWQ0xFVkJRVFJETDBnc1VVRkJOVU1zUlVGQmMwUXNXVUZCVFR0QlFVTXhSQ3gzUWtGQlNTeERRVUZEYjB3c1lVRkJUQ3hIUVVGeFFtUXNWMEZCY2tJN1FVRkRRU3gzUWtGQlNTeERRVUZEVnl4blFrRkJUQ3hEUVVGelFteE1MRTFCUVhSQ0xFZEJRU3RDTEVOQlFTOUNPMEZCUTBRc2FVSkJTRVE3UVVGSlJEdEJRVU5HTEdGQk1VUkVMRU5CTkVSQk96czdRVUZEUVN4cFFrRkJTM0ZNTEdGQlFVd3NRMEZCYlVKeVRDeE5RVUZ1UWl4SFFVRTBRaXhEUVVFMVFqczdRVUZEUVN4cFFrRkJTM0ZNTEdGQlFVd3NRMEZCYlVKMFFpeHZRa0ZCYmtJc1EwRkJkME1zUzBGQlMxSXNaVUZCTjBNN1FVRkRSRHRCUVc1SmRVSTdRVUZCUVR0QlFVRkJMR2xDUVhGSmVFSXNkVUpCUTBVMVdpeEpRVVJHTEVWQlJVVnhXU3hqUVVaR0xFVkJSMFV2U0N4UlFVaEdMRVZCU1VWMlVDeFJRVXBHTEVWQlMwVkZMRTlCVEVZc1JVRk5SWEpGTEZGQlRrWXNSVUZQUlhGbExFMUJVRVlzUlVGUlJUdEJRVU5CTEdkQ1FVRkpjbU1zUzBGQlNqdEJRVU5CTEdkQ1FVRkpja0lzVFVGQlRTeEhRVUZITEV0QlFXSTdPMEZCUTBFc1owSkJRVWs3UVVGRFJpeHRRa0ZCU3pCbExHOUNRVUZNTEVOQlEwVnFZeXhKUVVSR0xFVkJSVVVzVFVGR1JpeEZRVWRGY1Zrc1kwRkJZeXhMUVVGTE4xb3NVMEZCYmtJc1IwRkRTVFphTEdOQlJFb3NSMEZGU1N4TFFVRkxjMFFzWlVGTVdDeEZRVTFGY2t3c1VVRkJVU3hMUVVGTE9WSXNVMEZCWWl4SFFVRjVRamhTTEZGQlFYcENMRWRCUVc5RExFdEJRVXR6VEN4VFFVNHpReXhGUVU5Rk0yRXNUMEZRUmp0QlFWTkVMR0ZCVmtRc1EwRlZSU3hQUVVGUEwwTXNRMEZCVUN4RlFVRlZPMEZCUTFaVkxHTkJRVUZCTEV0QlFVc3NSMEZCUjFZc1EwRkJVanRCUVVOQldDeGpRVUZCUVN4TlFVRk5MRWRCUVVjc1NVRkJWRHRCUVVORU96dEJRVVZFTEdkQ1FVRkpRU3hOUVVGS0xFVkJRVms3UVVGRFZpeHhRa0ZCVDJZc2IwSkJRVUVzUTBGQlowSnZReXhMUVVGb1FpeERRVUZRTzBGQlEwUTdPMEZCUlVRc2JVSkJRVThzUzBGQlN6aGpMR0ZCUVV3c1EwRkJiVUo0U2l4SlFVRnVRaXhEUVVGM1FtNVNMRkZCUVhoQ0xFVkJRV3REUlN4UFFVRnNReXhGUVVFeVEzSkZMRkZCUVRORExFVkJRWEZFY1dVc1RVRkJja1FzUTBGQlVEdEJRVU5FTzBGQmNFdDFRanRCUVVGQk8wRkJRVUVzYVVKQmMwdDRRaXd3UWtGQmFVSTdRVUZEWml4blFrRkJTU3hMUVVGTFV5eGhRVUZVTEVWQlFYZENPMEZCUTNSQ0xIRkNRVUZQTEV0QlFVdEJMR0ZCUVV3c1EwRkJiVUoyU2l4TFFVRnVRaXhGUVVGUU8wRkJRMFFzWVVGR1JDeE5RVVZQTzBGQlEwd3NjVUpCUVU4c1MwRkJVRHRCUVVORU8wRkJRMFk3UVVFMVMzVkNPMEZCUVVFN1FVRkJRU3hwUWtFNFMzaENMSGxDUVVORmJsTXNTVUZFUml4RlFVVkZjVmtzWTBGR1JpeEZRVWRGTDBnc1VVRklSaXhGUVVsRmRsQXNVVUZLUml4RlFVdEZSU3hQUVV4R0xFVkJUVVZ5UlN4UlFVNUdMRVZCVDBWeFpTeE5RVkJHTEVWQlVVVTdRVUZEUVN4blFrRkJTV3BpTEVsQlFVa3NTMEZCUzNoQ0xGTkJRVlFzU1VGQmMwSXNTMEZCUzJ0a0xHRkJRUzlDTEVWQlFUaERPMEZCUXpWRE1XSXNZMEZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXN3WWl4aFFVRk1MRU5CUVcxQ01XSXNTVUZCTVVJN1FVRkRSRHM3UVVGRlJDeG5Ra0ZCU1hCQ0xFdEJRVW83UVVGRFFTeG5Ra0ZCU1hKQ0xFMUJRVTBzUjBGQlJ5eExRVUZpT3p0QlFVTkJMR2RDUVVGSk8wRkJRMFlzYlVKQlFVc3daU3h2UWtGQlRDeERRVU5GYW1Nc1NVRkVSaXhGUVVWRkxGRkJSa1lzUlVGSFJYRlpMR05CUVdNc1MwRkJTemRhTEZOQlFXNUNMRWRCUTBrMldpeGpRVVJLTEVkQlJVa3NTMEZCUzNORUxHVkJURmdzUlVGTlJYSk1MRkZCUVZFc1MwRkJTemxTTEZOQlFXSXNSMEZCZVVJNFVpeFJRVUY2UWl4SFFVRnZReXhMUVVGTGMwd3NVMEZPTTBNc1JVRlBSVE5oTEU5QlVFWTdRVUZUUkN4aFFWWkVMRU5CVlVVc1QwRkJUeTlETEVOQlFWQXNSVUZCVlR0QlFVTldWU3hqUVVGQlFTeExRVUZMTEVkQlFVZFdMRU5CUVZJN1FVRkRRVmdzWTBGQlFVRXNUVUZCVFN4SFFVRkhMRWxCUVZRN1FVRkRSRHM3UVVGRlJDeG5Ra0ZCU1VFc1RVRkJTaXhGUVVGWk8wRkJRMVlzY1VKQlFVOW1MRzlDUVVGQkxFTkJRV2RDYjBNc1MwRkJhRUlzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRzFDUVVGUExFdEJRVXM0WXl4aFFVRk1MRU5CUVcxQ2RFb3NUVUZCYmtJc1EwRkJNRUp5VWl4UlFVRXhRaXhGUVVGdlEwVXNUMEZCY0VNc1JVRkJOa055UlN4UlFVRTNReXhGUVVGMVJIRmxMRTFCUVhaRUxFTkJRVkE3UVVGRFJEdEJRV3BPZFVJN1FVRkJRVHRCUVVGQkxHbENRVzFPZUVJc01rSkJRV3RDTzBGQlEyaENMR2RDUVVGSkxFdEJRVXRUTEdGQlFWUXNSVUZCZDBJN1FVRkRkRUlzY1VKQlFVOHNTMEZCUzBFc1lVRkJUQ3hEUVVGdFFqRmxMRTFCUVc1Q0xFVkJRVkE3UVVGRFJDeGhRVVpFTEUxQlJVODdRVUZEVEN4eFFrRkJUeXhMUVVGUU8wRkJRMFE3UVVGRFJqdEJRWHBPZFVJN1FVRkJRVHRCUVVGQkxHbENRVEpPZUVJc2VVSkJRV2RDTzBGQlEyUXNaMEpCUVVrc1MwRkJTekJsTEdGQlFWUXNSVUZCZDBJN1FVRkRkRUlzY1VKQlFVOHNTMEZCUzBFc1lVRkJUQ3hEUVVGdFFuSktMRWxCUVc1Q0xFVkJRVkE3UVVGRFJDeGhRVVpFTEUxQlJVODdRVUZEVEN4eFFrRkJUeXhMUVVGUU8wRkJRMFE3UVVGRFJqdEJRV3BQZFVJN1FVRkJRVHRCUVVGQkxHbENRVzFQZUVJc1owSkJRVTg1VVN4VFFVRlFMRVZCUVd0Q08wRkJRMmhDTEhWSlFVRnJRanRCUVVOb1Fpd3JTVUZCWVVFc1UwRkJZanRCUVVORU96dEJRVVZFTEdkQ1FVRkpMRXRCUVV0dFlTeGhRVUZVTEVWQlFYZENPMEZCUTNSQ0xHMUNRVUZMUVN4aFFVRk1MRU5CUVcxQ2FsRXNUVUZCYmtJc1EwRkJNRUpzU3l4VFFVRXhRanRCUVVORU8wRkJRMFk3UVVFelQzVkNPMEZCUVVFN1FVRkJRU3hwUWtFMlQzaENMRzFDUVVGVk8wRkJRMUlzZDBsQlFXMUNPMEZCUTJwQ08wRkJRMFE3TzBGQlJVUXNhVUpCUVV0bllTeG5Ra0ZCVEN4RFFVRnpRbkJQTEU5QlFYUkNPenRCUVVOQkxHMUNRVUZQTEV0QlFVdHZUeXhuUWtGQldqdEJRVU5FTzBGQmNGQjFRanM3UVVGQlFUdEJRVUZCTEZGQlFXbENOVTBzVTBGQmFrSXNRMEZCTVVJN08wRkJkVkJCTEdGQlFVOHlUU3h2UWtGQlVEdEJRVU5FT3pzN096czdRVUZIU0N4M1JVRkJaVWdzZDBKQlFXWXNSVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY0dKQk8wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMWxPenM3T3pzN096dEJRVU5LTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMFVzYzBKQlFWTnNZeXhKUVVGVUxFVkJRV1VzUTBGQlJUdEJRVVZxUWp0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2VVSkJRV2RDTEVOQlFVVTdRVUZGYkVJN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNhMEpCUVZNd1lTeExRVUZVTEVWQlFXZENMRU5CUVVVN1FVRkZiRUk3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4eFFrRkJXVEZoTEVsQlFWb3NSVUZCYTBJc1EwRkJSVHRCUVVWd1FqdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3h4UWtGQldXMWpMRmRCUVZvc1JVRkJlVUk1VFN4UFFVRjZRaXhGUVVGclF5eERRVUZGTzBGQlJYQkRPMEZCUTBZN1FVRkRRVHM3T3p0WFFVTkZMSGxDUVVGblFpeERRVUZGTzBGQlJXeENPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHBRa0ZCYlVNN1FVRkJRU3hWUVVGMFFsWXNVMEZCYzBJN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVRzN1FVRkRha003UVVGRFNqdEJRVU5CTzBGQlEwRTdRVUZEU1N4VlFVRk5lVTRzYlVKQlFXMUNPMEZCUVVFN08wRkJRVUU3TzBGQlEzWkNMSFZEUVVGdFF6dEJRVUZCT3p0QlFVRkJMR05CUVhaQ2FrMHNUMEZCZFVJc2RVVkJRV0lzUlVGQllUczdRVUZCUVRzN1FVRkJRU3cwUTBGQlRuSlRMRWxCUVUwN1FVRkJUa0VzV1VGQlFVRXNTVUZCVFR0QlFVRkJPenRCUVVOcVF5eHRSRUZCVFhGVExFOUJRVTRzVTBGQmEwSnlVeXhKUVVGc1FqdEJRVVZCTEdkQ1FVRkxNR1FzVDBGQlRDeEhRVUZsTEUxQlFVdEJMRTlCUVV3c1MwRkJhVUpvWkN4VFFVRnFRaXhIUVVFMlFpeE5RVUZMWjJRc1QwRkJiRU1zUjBGQk5FTXNTVUZCU1VNc1IwRkJTaXhGUVVFelJEdEJRVWhwUXp0QlFVbHNRenM3UVVGTWMwSTdRVUZCUVR0QlFVRkJMR2xDUVU5MlFpeHJRa0ZCVTNwaUxFbEJRVlFzUlVGQlpUdEJRVU5pTEcxQ1FVRlBMRXRCUVV0M1lpeFBRVUZNTEVOQlFXRjJSaXhIUVVGaUxFTkJRV2xDYWxjc1NVRkJha0lzUTBGQlVEdEJRVU5FTzBGQlZITkNPMEZCUVVFN1FVRkJRU3hwUWtGWGRrSXNlVUpCUVdkQ08wRkJRMlFzTmtSQlFWY3NTMEZCUzNkaUxFOUJRVXdzUTBGQllYSlNMRWxCUVdJc1JVRkJXRHRCUVVORU8wRkJZbk5DTzBGQlFVRTdRVUZCUVN4cFFrRmxka0lzYTBKQlFWTjFVU3hMUVVGVUxFVkJRV2RDTzBGQlEyUTdRVUZEUVN4blFrRkJTU3d3UTBGQlNTeExRVUZMWXl4UFFVRk1MRU5CUVdGb1VDeE5RVUZpTEVWQlFVb3NSVUZCTWtKMFRTeFJRVUV6UWl4RFFVRnZRM2RoTEV0QlFYQkRMRU5CUVVvc1JVRkJaMFE3UVVGRE9VTjRXaXhqUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJc2VVTkJRMjFETEV0QlFVdHVRaXhKUVVSNFF6dEJRVWRCTEhGQ1FVRlBNR0VzUzBGQlN5eERRVUZETVdFc1NVRkJZanRCUVVORUxHRkJVR0VzUTBGVFpEczdPMEZCUTBFc1owSkJRVTF4WXl4VlFVRlZMRWRCUVVjdll5eDNRa0ZCUVN4RFFVRnZRbTlpTEV0QlFVc3NRMEZCUXpGaExFbEJRVEZDTERSRFFVTmtMRXRCUVV0M1lpeFBRVUZNTEVOQlFXRnlVaXhKUVVGaUxFVkJSR01zUlVGQmJrSTdPMEZCU1VFc1owSkJRVWwxVVN4TFFVRkxMRU5CUVVNeFlTeEpRVUZPTEV0QlFXVnhZeXhWUVVGdVFpeEZRVUVyUWp0QlFVTTNRbTVpTEdOQlFVRkJMRTlCUVU4c1EwRkJRME1zU1VGQlVpd3dRa0ZEYjBKMVdpeExRVUZMTEVOQlFVTXhZU3hKUVVReFFpeHpRMEZETUVRc1MwRkJTMEVzU1VGRUwwUXNjVVJCUXpoSGNXTXNWVUZFT1VjN1FVRkhRVE5DTEdOQlFVRkJMRXRCUVVzc1EwRkJRekZoTEVsQlFVNHNSMEZCWVhGakxGVkJRV0k3UVVGRFJEczdRVUZGUkN4cFFrRkJTMklzVDBGQlRDeERRVUZoZEVZc1IwRkJZaXhEUVVGcFFuZEZMRXRCUVVzc1EwRkJRekZoTEVsQlFYWkNMRVZCUVRaQ01HRXNTMEZCTjBJN08wRkJSVUVzYlVKQlFVOUJMRXRCUVVzc1EwRkJRekZoTEVsQlFXSTdRVUZEUkR0QlFYWkRjMEk3UVVGQlFUdEJRVUZCTEdsQ1FYbERka0lzY1VKQlFWbEJMRWxCUVZvc1JVRkJhMEk3UVVGRGFFSTdRVUZEUVN4blFrRkJTU3hEUVVGRExFdEJRVXQzWWl4UFFVRk9MRWxCUVdsQ0xFTkJRVU1zUzBGQlMwRXNUMEZCVEN4RFFVRmhTeXhIUVVGaUxFTkJRV2xDTjJJc1NVRkJha0lzUTBGQmRFSXNSVUZCT0VNN1FVRkROVU5yUWl4alFVRkJRU3hQUVVGUExFTkJRVU5ETEVsQlFWSXNiME5CUXpoQ2JrSXNTVUZFT1VJc2VVSkJRMmxFTEV0QlFVdEJMRWxCUkhSRU8wRkJSMEVzY1VKQlFVOHNTMEZCVUR0QlFVTkVPenRCUVVWRUxHbENRVUZMZDJJc1QwRkJUQ3hEUVVGaGRrWXNSMEZCWWl4RFFVRnBRbXBYTEVsQlFXcENMRVZCUVhWQ2JVNHNUMEZCZGtJN08wRkJRMEVzYVVKQlFVdHhUeXhQUVVGTUxGZEJRVzlDZUdJc1NVRkJjRUk3TzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVORU8wRkJja1J6UWp0QlFVRkJPMEZCUVVFc2FVSkJkVVIyUWl4eFFrRkJXVzFqTEZkQlFWb3NSVUZCZVVJNVRTeFBRVUY2UWl4RlFVRnJRenRCUVVOb1F6dEJRVU5CTEdkQ1FVRkpMRU5CUVVNc1MwRkJTMjFOTEU5QlFVNHNTVUZCYVVJc1EwRkJReXhMUVVGTFFTeFBRVUZNTEVOQlFXRkxMRWRCUVdJc1EwRkJhVUpOTEZkQlFXcENMRU5CUVhSQ0xFVkJRWEZFTzBGQlEyNUVMRzlDUVVGTkxFbEJRVWwwWml4TFFVRktMRzFEUVVOMVFuTm1MRmRCUkhaQ0xHbENRVU41UXl4TFFVRkxibU1zU1VGRU9VTXNNa05CUVU0N1FVRkhSRHM3UVVGRlJDeG5Ra0ZCVFRCaExFdEJRVXNzUjBGQlJ5eExRVUZMWXl4UFFVRk1MRU5CUVdGMlJpeEhRVUZpTEVOQlFXbENhMGNzVjBGQmFrSXNRMEZCWkN4RFFWSm5ReXhEUVZWb1F6czdPMEZCUTBFc1owSkJRVWxCTEZkQlFWY3NTMEZCU3psTkxFOUJRWEJDTEVWQlFUWkNPMEZCUXpOQ0xIRkNRVUZQT0Uwc1YwRkJVRHRCUVVORUxHRkJZaXRDTEVOQlpXaERPenM3UVVGRFFTeG5Ra0ZCVFVVc1ZVRkJWU3hIUVVGSEwyTXNkMEpCUVVFc1EwRkRha0lyVUN4UFFVUnBRaXhGUVVWcVFpd3dRMEZCU1N4TFFVRkxiVTBzVDBGQlRDeERRVUZoY2xJc1NVRkJZaXhGUVVGS0xFVkJRWGxDT1V3c1RVRkJla0lzUTBGQlowTXNWVUZCUVdsUkxFTkJRVU03UVVGQlFTeHhRa0ZCU1VFc1EwRkJReXhEUVVGRGRFOHNTVUZCUml4TFFVRlhiV01zVjBGQlpqdEJRVUZCTEdGQlFXcERMRU5CUm1sQ0xFTkJRVzVDT3p0QlFVdEJMR2RDUVVGSk9VMHNUMEZCVHl4TFFVRkxaMDRzVlVGQmFFSXNSVUZCTkVJN1FVRkRNVUp1WWl4alFVRkJRU3hQUVVGUExFTkJRVU5ETEVsQlFWSXNNRUpCUTI5Q2EwOHNUMEZFY0VJc2NVTkJRM05FTEV0QlFVdHlVQ3hKUVVRelJDdzBRMEZEYVVkeFl5eFZRVVJxUnp0QlFVZEJhRTRzWTBGQlFVRXNUMEZCVHl4SFFVRkhaMDRzVlVGQlZqdEJRVU5FT3p0QlFVVkVNMElzV1VGQlFVRXNTMEZCU3l4RFFVRkRNV0VzU1VGQlRpeEhRVUZoY1ZBc1QwRkJZanM3UVVGRFFTeHBRa0ZCUzIxTkxFOUJRVXdzVjBGQmIwSlhMRmRCUVhCQ096dEJRVU5CTEdsQ1FVRkxXQ3hQUVVGTUxFTkJRV0YwUml4SFFVRmlMRU5CUVdsQ2QwVXNTMEZCU3l4RFFVRkRNV0VzU1VGQmRrSXNSVUZCTmtJd1lTeExRVUUzUWpzN1FVRkZRU3h0UWtGQlQwRXNTMEZCU3l4RFFVRkRNV0VzU1VGQllqdEJRVU5FTzBGQmVFWnpRanRCUVVGQk8wRkJRVUVzYVVKQk1FWjJRaXg1UWtGQlowSTdRVUZEWkN4cFFrRkJTM2RpTEU5QlFVd3NRMEZCWVRsakxFOUJRV0lzUTBGQmNVSXNWVUZCUVdkakxFdEJRVXNzUlVGQlNUdEJRVU0xUWtFc1kwRkJRVUVzUzBGQlN5eERRVUZEZGs0c1QwRkJUanRCUVVORUxHRkJSa1E3TzBGQlNVRXNiVUpCUVU4c1MwRkJTM0ZQTEU5QlFWbzdRVUZEUkR0QlFXaEhjMEk3TzBGQlFVRTdRVUZCUVN4UlFVRnBRamROTEZOQlFXcENMRU5CUVhwQ096dEJRV3RIUVN4aFFVRlBlVTRzYlVKQlFWQTdRVUZEUkRzN096czdPMEZCUlVnc2IwVkJRV1ZHTEhWQ1FVRm1MRVU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnlURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdTVUZEVFVzN096czdPMEZCUjBvN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBVc2QwSkJRVFJETzBGQlFVRTdPMEZCUVVFc1VVRkJhRU53VFN4UFFVRm5ReXgxUlVGQmRFSXNSVUZCYzBJN1FVRkJRU3hSUVVGc1FuRk5MRmRCUVd0Q0xIVkZRVUZLTEVWQlFVazdPMEZCUVVFN08wRkJRekZETERoQ1FVRk5jazBzVDBGQlRqdEJRVVZCY1Uwc1NVRkJRVUVzVjBGQlZ5eERRVUZET1dRc1QwRkJXaXhEUVVGdlFpeFZRVUZCWjJNc1MwRkJTeXhGUVVGSk8wRkJRek5DTEZsQlFVc3JRaXhSUVVGTUxFTkJRV012UWl4TFFVRmtPMEZCUTBRc1MwRkdSRHRCUVVsQkxGVkJRVXRuUXl4TlFVRk1MRWRCUVdNc1RVRkJTMnhDTEU5QlFVd3NRMEZCWVhKU0xFbEJRV0lzUlVGQlpEdEJRVU5CTEZWQlFVdDNVeXhMUVVGTUxFZEJRV0VzU1VGQllqdEJRVkl3UXp0QlFWTXpRenRCUVVWRU8wRkJRMFk3UVVGRFFUczdPenM3VTBGRFJTeGxRVUZYTzBGQlExUXNZVUZCVHl4TFFVRkxRU3hMUVVGYU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdVMEZEUlN4bFFVRnhRanRCUVVOdVFpeGhRVUZQTEV0QlFVdHFRaXhoUVVGTUxFZEJRMGdzUzBGQlMwRXNZVUZCVEN4RFFVRnRRbXRDTEdOQlFXNUNMRWRCUVc5RExFdEJRVXRvUkN4bFFVUjBReXhIUVVWSUxFTkJSa283UVVGSFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4clFrRkJVenRCUVVOUUxGZEJRVXM0UXl4TlFVRk1MRWRCUVdNc1MwRkJTMnhDTEU5QlFVd3NRMEZCWVhKU0xFbEJRV0lzUlVGQlpEczdRVUZEUVN3NFFrRkJjMElzUzBGQlMzVlRMRTFCUVV3c1EwRkJXVWNzU1VGQldpeEZRVUYwUWp0QlFVRkJMRlZCUVU5eVppeExRVUZRTEhGQ1FVRlBRU3hMUVVGUU8wRkJRVUVzVlVGQlkzTm1MRWxCUVdRc2NVSkJRV05CTEVsQlFXUTdPMEZCUTBFc1YwRkJTMGdzUzBGQlRDeEhRVUZoUnl4SlFVRmlPMEZCUlVFc1lVRkJUM1JtTEV0QlFVc3NTVUZCU1N4SlFVRm9RanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERoQ1FVRnhRakpGTEUxQlFYSkNMRVZCUVRaQ08wRkJRek5DTEN0SFFVRXlRa0VzVFVGQk0wSTdPMEZCUlVFc1ZVRkJTU3hMUVVGTGRWb3NZVUZCVkN4RlFVRjNRanRCUVVOMFFpeGhRVUZMUVN4aFFVRk1MRU5CUVcxQ2RFSXNiMEpCUVc1Q0xFTkJRWGRETEV0QlFVdFNMR1ZCUVRkRE8wRkJRMFE3UVVGRFJqdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzWTBGQlMzRkNMRTFCUVV3c1JVRkJNa0k3UVVGQlFUczdRVUZCUVN4VlFVRmtPRUlzU1VGQll5eDFSVUZCVUN4TFFVRlBPenRCUVVONlFqdEJRVU5CTEN0Q1FVRTBRaXhMUVVGTFRDeE5RVUZNTEVOQlFWbEhMRWxCUVZvc1JVRkJOVUk3UVVGQlFTeFZRVUZqTjJNc1NVRkJaQ3h6UWtGQlQzaERMRXRCUVZBN1FVRkJRU3hWUVVGdlFuTm1MRWxCUVhCQ0xITkNRVUZ2UWtFc1NVRkJjRUk3TzBGQlEwRXNWMEZCUzBnc1MwRkJUQ3hIUVVGaFJ5eEpRVUZpTzBGQlEwRXNWMEZCUzJwRUxFOUJRVXdzUjBGQlpTeExRVUZtTEVOQlNubENMRU5CVFhwQ096dEJRVU5CTEZWQlFVbHBSQ3hKUVVGS0xFVkJRVlU3UVVGRFVqdEJRVU5CTEZsQlFVbERMRWxCUVVvc1JVRkJWVHRCUVVOU0xHbENRVUZQTEV0QlFVczNTeXhKUVVGTUxFTkJRMHdzUzBGQlN6aElMR05CUVV3c1EwRkJiMEpxV2l4UlFVUm1MRVZCUlV3c1MwRkJTMmxhTEdOQlFVd3NRMEZCYjBJdldTeFBRVVptTEVWQlIwd3NTMEZCU3l0WkxHTkJRVXdzUTBGQmIwSndaQ3hSUVVobUxFVkJTVXh4WlN4TlFVcExMRU5CUVZBN1FVRk5SQ3hUUVZCRUxFTkJVVUU3UVVGU1FTeGhRVk5MTzBGQlEwZ3NaVUZCUzI1Q0xGTkJRVXdzUTBGQlpVTXNUVUZCWml4RFFVRnpRbnBqTEU5QlFYUkNPenRCUVVOQkxHbENRVUZQTEV0QlFVdDNZeXhUUVVGTUxFTkJRV1ZETEUxQlFYUkNPMEZCUTBRN1FVRkRSaXhQUVhSQ2QwSXNRMEYzUW5wQ096czdRVUZEUVN4VlFVRkpMRTlCUVU5clFpeE5RVUZRTEV0QlFXdENMRlZCUVhSQ0xFVkJRV3RETzBGQlEyaERMRmxCUVUwclFpeFJRVUZSTEVkQlFVY3NOa0pCUVVrc1MwRkJTM2hDTEU5QlFVd3NRMEZCWVhKU0xFbEJRV0lzUlVGQlNpeEZRVUY1UWl4TFFVRkxjVklzVDBGQlRDeERRVUZoZVVJc1NVRkJZaXhIUVVGdlFpeERRVUUzUXl4RFFVRnFRanM3UVVGRFFTeFpRVUZOZEVZc1ZVRkJWU3hIUVVGSE0xZ3NTVUZCU1N4TFFVRkxaMlFzVVVGQk5VSTdRVUZEUVM5Q0xGRkJRVUZCTEUxQlFVMHNRMEZCUXp0QlFVTk1hbUlzVlVGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVVSTE8wRkJSVXd3V0N4VlFVRkJRU3hWUVVGVkxFVkJRVVVzUzBGQlMzZEdMRkZCUVV3c1EwRkJZMnhrTEVsQlFXUXNSVUZCYjBKdFpDeFRRVUZ3UWl4TFFVRnJRME1zVVVGQmJFTXNTVUZCT0VNc1EwRkJRM3BHTEZWQlJuUkVPMEZCUjB4QkxGVkJRVUZCTEZWQlFWVXNSVUZCVmtFN1FVRklTeXhUUVVGRUxFTkJRVTQ3UVVGTFJDeFBRV3BEZDBJc1EwRnRRM3BDT3pzN1FVRkRRU3hYUVVGTFowSXNZVUZCVEN4RFFVTkZNMWtzU1VGRVJpeEZRVVZGTEV0QlFVc3lZaXhsUVVaUUxFVkJSMFVzUzBGQlMwTXNVMEZJVUN4RlFVbEZMRmxCUVUwN1FVRkRTaXhaUVVGSkxFTkJRVU1zVFVGQlNTeERRVUZETDBJc1QwRkJUaXhKUVVGcFFpeERRVUZETEUxQlFVa3NRMEZCUTNkRUxHVkJRVE5DTEVWQlFUUkRPMEZCUXpGRExHZENRVUZKTEVOQlFVTlNMRWxCUVV3c1EwRkJWVFZDTEUxQlFWWTdRVUZEUkR0QlFVTkdMRTlCVWtnc1JVRlRSU3hMUVVGTGFrSXNZMEZCVEN4RFFVRnZRaTlaTEU5QlZIUkNPMEZCV1VFc1lVRkJUeXhMUVVGTE5sa3NVMEZCVEN4RFFVRmxReXhOUVVGMFFqdEJRVU5FT3pzN1YwRkZSQ3hqUVVGTGFGb3NVVUZCVEN4RlFVRmxSU3hQUVVGbUxFVkJRWGRDY2tVc1VVRkJlRUlzUlVGQmEwTnhaU3hOUVVGc1F5eEZRVUV3UXp0QlFVRkJPenRCUVVONFF5eFZRVUZOYW1Jc1NVRkJTU3hIUVVGSExFdEJRVXR6WkN4TlFVRk1MRVZCUVdJN08wRkJRMEVzSzBaQlFWZDJZeXhSUVVGWUxFVkJRWEZDUlN4UFFVRnlRaXhGUVVFNFFuSkZMRkZCUVRsQ096dEJRVVZCTEZWQlFVa3NTMEZCU3l0bUxFdEJRVlFzUlVGQlowSTdRVUZEWkN4aFFVRkxOME1zVTBGQlRDeERRVUZsUXl4TlFVRm1MRU5CUVhOQ2VtTXNUMEZCZEVJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFREdEJRVU5CTEZsQlFVa3dReXhKUVVGSkxFdEJRVXNzUzBGQlN6aGlMR2RDUVVGa0xFbEJRV3RETEU5QlFVOWlMRTFCUVZBc1MwRkJhMElzVlVGQmVFUXNSVUZCYjBVN1FVRkRiRVVzWTBGQlRTdENMRkZCUVZFc1IwRkJSeXcyUWtGQlNTeExRVUZMZUVJc1QwRkJUQ3hEUVVGaGNsSXNTVUZCWWl4RlFVRktMRVZCUVhsQ0xFdEJRVXR4VWl4UFFVRk1MRU5CUVdGNVFpeEpRVUZpTEVkQlFXOUNMRU5CUVRkRExFTkJRV3BDT3p0QlFVTkJMR05CUVUxMFJpeFZRVUZWTEVkQlFVY3pXQ3hKUVVGSkxFdEJRVXRuWkN4UlFVRTFRanRCUVVOQkwwSXNWVUZCUVVFc1RVRkJUU3hEUVVGRE8wRkJRMHhxWWl4WlFVRkJRU3hKUVVGSkxFVkJRVXBCTEVsQlJFczdRVUZGVERCWUxGbEJRVUZCTEZWQlFWVXNSVUZCUlRGWUxFbEJRVWtzUjBGRFdpeExRVUZMYTJRc1VVRkJUQ3hEUVVGamJHUXNTVUZCWkN4RlFVRnZRbTFrTEZOQlFYQkNMRXRCUVd0RFF5eFJRVUZzUXl4SlFVRTRReXhEUVVGRGVrWXNWVUZFYmtNc1IwRkZXaXhKUVVwRE8wRkJTMHhCTEZsQlFVRkJMRlZCUVZVc1JVRkJSU3hEUVVGRE0xZ3NTVUZCUkN4SlFVRlRNbGc3UVVGTWFFSXNWMEZCUkN4RFFVRk9PMEZCVDBRc1UwRmFTU3hEUVdOTU96czdRVUZEUVN4aFFVRkxaMElzWVVGQlRDeERRVU5GTTFrc1NVRkVSaXhGUVVWRkxFdEJRVXN3WWl4aFFVRk1MRWRCUVhGQ0xFdEJRVXRETEdWQlFURkNMRWRCUVRSRExFTkJSamxETEVWQlIwVXNTMEZCUzBNc1UwRklVQ3hGUVVsRkxGbEJRVTA3UVVGRFNpeGpRVUZKTEVOQlFVTXNUVUZCU1N4RFFVRkRMMElzVDBGQlRpeEpRVUZwUWl4RFFVRkRMRTFCUVVrc1EwRkJRM2RFTEdWQlFUTkNMRVZCUVRSRE8wRkJRekZETEd0Q1FVRkpMRU5CUVVOU0xFbEJRVXdzUTBGQlZUVkNMRTFCUVZZN1FVRkRSRHRCUVVOR0xGTkJVa2dzUlVGVFJXaGhMRTlCVkVZN1FVRlhSRHM3UVVGRlJDeGhRVUZQTEV0QlFVczJXU3hUUVVGTUxFTkJRV1ZETEUxQlFYUkNPMEZCUTBRN096dFhRVVZFTEdsQ1FVRlJPMEZCUTA0c1ZVRkJUWGRFTEUxQlFVMHNSMEZCUnl4NVJrRkJaanM3UVVGRFFTeFhRVUZMZWtrc1kwRkJURHRCUVVWQkxHRkJRVTk1U1N4TlFVRlFPMEZCUTBRN096dFhRVVZFTEdkQ1FVRlBlR01zVVVGQlVDeEZRVUZwUWtVc1QwRkJha0lzUlVGQk1FSnlSU3hSUVVFeFFpeEZRVUZ2UTNGbExFMUJRWEJETEVWQlFUUkRPMEZCUVVFN08wRkJRekZETEZWQlFVa3NTMEZCU3pCQ0xFdEJRVlFzUlVGQlowSTdRVUZEWkN4bFFVRlBMRXRCUVV0NlN5eEpRVUZNTEVOQlFWVnVVaXhSUVVGV0xFVkJRVzlDUlN4UFFVRndRaXhGUVVFMlFuSkZMRkZCUVRkQ0xFVkJRWFZEY1dVc1RVRkJka01zUTBGQlVEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MRzFIUVVGaGJHRXNVVUZCWWl4RlFVRjFRa1VzVDBGQmRrSXNSVUZCWjBOeVJTeFJRVUZvUXpzN1FVRkZRU3hoUVVGTEsxZ3NaVUZCVEN4RFFVTkZMRXRCUVVzclJ5eGhRVUZNTEVOQlFXMUNNV0lzU1VGRWNrSXNSVUZGUlN4TFFVRkxNbUlzWlVGR1VDeEZRVWRGTEV0QlFVdERMRk5CU0ZBc1JVRkpSU3haUVVGTk8wRkJRMG9zWTBGQlNTeERRVUZETEUxQlFVa3NRMEZCUXk5Q0xFOUJRVTRzU1VGQmFVSXNRMEZCUXl4TlFVRkpMRU5CUVVOM1JDeGxRVUV6UWl4RlFVRTBRenRCUVVNeFF5eHJRa0ZCU1N4RFFVRkRVaXhKUVVGTUxFTkJRVlUxUWl4TlFVRldPMEZCUTBRN1FVRkRSaXhUUVZKSUxFVkJVMFZvWVN4UFFWUkdPMEZCV1VFc1pVRkJUeXhMUVVGTE5sa3NVMEZCVEN4RFFVRmxReXhOUVVGMFFqdEJRVU5FTzBGQlEwWTdPenRYUVVWRUxHdENRVUZUTzBGQlExQXNWVUZCVFROakxGRkJRVkVzUjBGQlJ5d3dSa0ZCYWtJN08wRkJSVUVzVlVGQlNTeExRVUZMYzJVc1lVRkJWQ3hGUVVGM1FqdEJRVU4wUWl4aFFVRkxRU3hoUVVGTUxFTkJRVzFDTVdVc1RVRkJia0k3UVVGRFJEczdRVUZGUkN4aFFVRlBTU3hSUVVGUU8wRkJRMFE3T3p0WFFVVkVMR2RDUVVGUE8wRkJRMHdzVlVGQlRXOW5RaXhQUVVGUExFZEJRVWNzZDBaQlFXaENPenRCUVVOQkxGZEJRVXQ0UlN4aFFVRk1PMEZCUTBFc1YwRkJTekpFTEV0QlFVd3NSMEZCWVN4SlFVRmlPMEZCUlVFc1lVRkJUMkVzVDBGQlVEdEJRVU5FT3pzN1YwRkZSQ3h0UWtGQlZUdEJRVU5TT3p0QlFVVkJMRmRCUVV0RExHRkJRVXc3UVVGRFJEczdPenRGUVhwT2MwSjBReXgxUTBGQlFTeERRVU4yUW1Vc2JVTkJRVUVzUTBGQk9FSjRReXh0UWtGQk9VSXNRMEZFZFVJN08wRkJORTU2UWl4MVJFRkJaVFpETEZWQlFXWXNSVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNoUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMGxCUTAxdFFqczdPenM3UVVGRFNpeG5RMEZCY1VRN1FVRkJRVHM3UVVGQlFTeFJRVUY2UTNaT0xFOUJRWGxETEhWRlFVRXZRaXhGUVVFclFqdEJRVUZCTEZGQlFUTkNkMDRzVjBGQk1rSXNkVVZCUVdJc1JVRkJZVHM3UVVGQlFUczdRVUZCUVN4elEwRkJUamRtTEVsQlFVMDdRVUZCVGtFc1RVRkJRVUVzU1VGQlRUdEJRVUZCT3p0QlFVTnVSQ3cyUTBGQlRYRlRMRTlCUVU0c1UwRkJhMEp5VXl4SlFVRnNRanRCUVVOQk5tWXNTVUZCUVVFc1YwRkJWeXhEUVVGRGFtWXNUMEZCV2l4RFFVRnZRaXhWUVVGQloyTXNTMEZCU3l4RlFVRkpPMEZCUXpOQ0xGbEJRVXNyUWl4UlFVRk1MRU5CUVdNdlFpeExRVUZrTzBGQlEwUXNTMEZHUkR0QlFVWnRSRHRCUVV0d1JEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN1UwRkRSU3hsUVVGeFFqdEJRVU51UWl4VlFVRkphMFFzV1VGQldTeEhRVUZITEVOQlFXNUNPenRCUVVOQkxGZEJRVXR3UXl4UFFVRk1MRU5CUVdFNVl5eFBRVUZpTEVOQlFYRkNMRlZCUVVGbll5eExRVUZMTEVWQlFVazdRVUZETlVKclJDeFJRVUZCUVN4WlFVRlpMRWxCUVVsc1JDeExRVUZMTEVOQlFVTnJReXhqUVVGMFFqdEJRVU5FTEU5QlJrUTdPMEZCUjBFc1lVRkJUMmRDTEZsQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzZDBKQlFXVTFaQ3hKUVVGbUxFVkJRWEZDTzBGQlEyNUNPMEZCUTBFc1ZVRkJUVEJoTEV0QlFVc3NSMEZCUnl4TFFVRkxkME1zVVVGQlRDeERRVUZqYkdRc1NVRkJaQ3hEUVVGa096dEJRVU5CTEZWQlFVa3dZU3hMUVVGTExFdEJRVXRzWXl4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEdOQlFVMHNTVUZCU1ROQ0xFdEJRVW9zYzBOQlF6QkNiVVFzU1VGRU1VSXNPRUpCUTJ0RUxFdEJRVXRCTEVsQlJIWkVMSFZEUVVGT08wRkJSMFE3TzBGQlJVUXNZVUZCVHpCaExFdEJRVXNzUTBGQlEzSkxMRTFCUVdJN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4M1FrRkJaWEpSTEVsQlFXWXNSVUZCY1VKeFVTeE5RVUZ5UWl4RlFVRnZSRHRCUVVGQkxGVkJRWFpDZGxBc1QwRkJkVUlzZFVWQlFXSXNRMEZCWVR0QlFVRkJMRlZCUVZaM1VDeFJRVUZWTzBGQlEyeEVPMEZCUTBFc1ZVRkJUVzlMTEV0QlFVc3NSMEZCUnl4TFFVRkxkME1zVVVGQlRDeERRVUZqYkdRc1NVRkJaQ3hEUVVGa096dEJRVVZCTEZWQlFVa3dZU3hMUVVGTExFdEJRVXRzWXl4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEdOQlFVMHNTVUZCU1ROQ0xFdEJRVW9zYzBOQlF6QkNiVVFzU1VGRU1VSXNPRUpCUTJ0RUxFdEJRVXRCTEVsQlJIWkVMSFZEUVVGT08wRkJSMFE3TzBGQlJVUnhVU3hOUVVGQlFTeE5RVUZOTEVkQlFVZDJUeXh2UWtGQlFTeERRVUZuUW5WUExFMUJRV2hDTEVOQlFWUTdRVUZEUVN4aFFVRlBjVXNzUzBGQlN5eERRVUZEVFN4VFFVRk9MRU5CUVdkQ00wc3NUVUZCYUVJc1JVRkJkMEoyVUN4UFFVRjRRaXhGUVVGcFEzZFFMRkZCUVdwRExFTkJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3NFFrRkJjVUp1VHl4TlFVRnlRaXhGUVVFMlFqdEJRVUZCT3p0QlFVTXpRaXgxU1VGQk1rSkJMRTFCUVROQ096dEJRVVZCTEZkQlFVdHhXaXhQUVVGTUxFTkJRV0U1WXl4UFFVRmlMRU5CUVhGQ0xGVkJRVUZuWXl4TFFVRkxMRVZCUVVrN1FVRkROVUpCTEZGQlFVRkJMRXRCUVVzc1EwRkJRMDRzYjBKQlFVNHNRMEZCTWtJc1RVRkJTU3hEUVVGRFVpeGxRVUZvUXp0QlFVTkVMRTlCUmtRN1FVRkhSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeG5Ra0ZCVDNKWkxGTkJRVkFzUlVGQmEwSTdRVUZEYUVJc2VVaEJRV0ZCTEZOQlFXSTdPMEZCUlVFc1YwRkJTMmxoTEU5QlFVd3NRMEZCWVRsakxFOUJRV0lzUTBGQmNVSXNWVUZCUVdkakxFdEJRVXNzUlVGQlNUdEJRVU0xUWtFc1VVRkJRVUVzUzBGQlN5eERRVUZEYWxBc1RVRkJUaXhEUVVGaGJFc3NVMEZCWWp0QlFVTkVMRTlCUmtRN1FVRkhSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc1kwRkJTMUlzVVVGQlRDeEZRVUZsUlN4UFFVRm1MRVZCUVhkQ2NrVXNVVUZCZUVJc1JVRkJhME03UVVGRGFFTXNWVUZCVFhObExGRkJRVkVzUjBGQlJ5eERRVUZETEdsSVFVRnNRanM3UVVGRlFTeFhRVUZMVFN4UFFVRk1MRU5CUVdFNVl5eFBRVUZpTEVOQlFYRkNMRlZCUVVGbll5eExRVUZMTEVWQlFVazdRVUZETlVKUkxGRkJRVUZCTEZGQlFWRXNRMEZCUXpkWExFbEJRVlFzUTBGQlkzRlhMRXRCUVVzc1EwRkJRM2hKTEVsQlFVNHNSVUZCWkR0QlFVTkVMRTlCUmtRN08wRkJSMEVzWVVGQlR6RldMR2xDUVVGQkxFTkJRV0V3WlN4UlFVRmlMRVZCUVhWQ2JtRXNVVUZCZGtJc1JVRkJhVU5GTEU5QlFXcERMRVZCUVRCRGNrVXNVVUZCTVVNc1EwRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdsQ1FVRlJPMEZCUTA0c1YwRkJTelJsTEU5QlFVd3NRMEZCWVRsakxFOUJRV0lzUTBGQmNVSXNWVUZCUVdkakxFdEJRVXNzUlVGQlNUdEJRVU0xUWtFc1VVRkJRVUVzUzBGQlN5eERRVUZEZGtrc1MwRkJUanRCUVVORUxFOUJSa1E3TzBGQlIwRTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNaMEpCUVU5d1VpeFJRVUZRTEVWQlFXbENSU3hQUVVGcVFpeEZRVUV3UW5KRkxGRkJRVEZDTEVWQlFXOURPMEZCUTJ4RExGVkJRVTF6WlN4UlFVRlJMRWRCUVVjc1EwRkJReXh0U0VGQmJFSTdPMEZCUlVFc1YwRkJTMDBzVDBGQlRDeERRVUZoT1dNc1QwRkJZaXhEUVVGeFFpeFZRVUZCWjJNc1MwRkJTeXhGUVVGSk8wRkJRelZDVVN4UlFVRkJRU3hSUVVGUkxFTkJRVU0zVnl4SlFVRlVMRU5CUVdOeFZ5eExRVUZMTEVOQlFVTjBTU3hOUVVGT0xFVkJRV1E3UVVGRFJDeFBRVVpFT3p0QlFVZEJMR0ZCUVU4MVZpeHBRa0ZCUVN4RFFVRmhNR1VzVVVGQllpeEZRVUYxUW01aExGRkJRWFpDTEVWQlFXbERSU3hQUVVGcVF5eEZRVUV3UTNKRkxGRkJRVEZETEVOQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3hyUWtGQlV6dEJRVU5RTEZkQlFVczBaU3hQUVVGTUxFTkJRV0U1WXl4UFFVRmlMRU5CUVhGQ0xGVkJRVUZuWXl4TFFVRkxMRVZCUVVrN1FVRkROVUpCTEZGQlFVRkJMRXRCUVVzc1EwRkJRekZrTEUxQlFVNDdRVUZEUkN4UFFVWkVPenRCUVVkQk8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNaMEpCUVU4N1FVRkRUQ3hYUVVGTGQyVXNUMEZCVEN4RFFVRmhPV01zVDBGQllpeERRVUZ4UWl4VlFVRkJaMk1zUzBGQlN5eEZRVUZKTzBGQlF6VkNRU3hSUVVGQlFTeExRVUZMTEVOQlFVTnlTU3hKUVVGT08wRkJRMFFzVDBGR1JEczdRVUZIUVR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHMUNRVUZWTzBGQlExSTdPMEZCUlVFc1YwRkJTMjlNTEdGQlFVdzdRVUZEUkRzN096dEZRVFZMT0VKMlFpeHRRMEZCUVN4RFFVRTRRbmhETEcxQ1FVRTVRanM3UVVFclMycERMQ3RFUVVGbFowVXNhMEpCUVdZc1JUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRelZNUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0SlFVTk5SenM3T3pzN1FVRkRTanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkZMRFJDUVVFMFF6dEJRVUZCTEZGQlFXaERNVTRzVDBGQlowTXNkVVZCUVhSQ0xFVkJRWE5DTzBGQlFVRXNVVUZCYkVKM1RpeFhRVUZyUWl4MVJVRkJTaXhGUVVGSk96dEJRVUZCT3p0QlFVRkJMRFpDUVVOd1EzaE9MRTlCUkc5RExFVkJRek5DZDA0c1YwRkVNa0k3UVVGRk0wTTdPenM3VjBGRlJDdzRRa0ZCY1VKNFlpeE5RVUZ5UWl4RlFVRTJRanRCUVVGQk96dEJRVU16UWl3eVNFRkJNa0pCTEUxQlFUTkNMRVZCUkRKQ0xFTkJSek5DT3pzN1FVRkRRU3hWUVVGSk1tSXNWVUZCVlN4SFFVRkhMRU5CUVdwQ096dEJRVVZCTEZkQlFVdDBReXhQUVVGTUxFTkJRV0U1WXl4UFFVRmlMRU5CUVhGQ0xGVkJRVUZuWXl4TFFVRkxMRVZCUVVrN1FVRkROVUp2UkN4UlFVRkJRU3hWUVVGVkxFbEJRVWx3UkN4TFFVRkxMRU5CUVVOeVN5eE5RVUZ3UWp0QlFVTkVMRTlCUmtRc1JVRk9Na0lzUTBGVk0wSTdPenRCUVVOQmJFOHNUVUZCUVVFc1RVRkJUU3hKUVVGSmVrTXNTVUZCU1N4RFFVRkRLMElzUjBGQlRDeERRVUZUY1dNc1ZVRkJWQ3hGUVVGeFFpeERRVUZ5UWl4RFFVRldMRU5CV0RKQ0xFTkJZVE5DT3p0QlFVTkJMRmRCUVV0MFF5eFBRVUZNTEVOQlFXRTVZeXhQUVVGaUxFTkJRWEZDTEZWQlFVRm5ZeXhMUVVGTExFVkJRVWs3UVVGRE5VSkJMRkZCUVVGQkxFdEJRVXNzUTBGQlEwNHNiMEpCUVU0c1EwRkJNa0pxV1N4TlFVRk5MRWRCUVVjc1MwRkJTU3hEUVVGRGQxZ3NUMEZCZWtNN1FVRkRSQ3hQUVVaRU8wRkJSMFE3T3pzN1JVRTNRakJDSzBRN08wRkJaME0zUWl3eVJFRkJaVWNzWTBGQlppeEZPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZWtOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMUZPenM3T3p0QlFVTktPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSU3d3UWtGTFJUdEJRVUZCT3p0QlFVRkJMRkZCU2tFMVRpeFBRVWxCTEhWRlFVcFZMRVZCU1ZZN1FVRkJRU3hSUVVoQmQwNHNWMEZIUVN4MVJVRklZeXhGUVVka08wRkJRVUVzVVVGR1FVc3NaVUZGUVN4MVJVRkdhMElzUlVGRmJFSTdRVUZCUVN4UlFVUkJReXhaUVVOQkxIVkZRVVJsTEVWQlEyWTdPMEZCUVVFN08wRkJRMEVzT0VKQlFVMDVUaXhQUVVGT0xFVkJRV1YzVGl4WFFVRm1PMEZCUlVFc1ZVRkJTMDhzVjBGQlRDeEhRVUZ0UWl4RFFVRnVRanRCUVVOQkxGVkJRVXR3UlN4VFFVRk1MREpFUVVOTExFMUJRVXRCTEZOQlJGWTdRVUZGUlhGRkxFMUJRVUZCTEZWQlFWVXNSVUZCUlROb1FpeHhRa0ZCUVR0QlFVWmtMRTlCU2tFc1EwRlRRVHM3UVVGRFFTeFJRVUZOTkdoQ0xHOUNRVUZ2UWl4SFFVTjRRbFFzVjBGQlZ5eERRVUZEYUdZc1RVRkJXaXhMUVVGMVFpeERRVUYyUWl4SlFVRTBRbWRtTEZkQlFWY3NRMEZCUTJobUxFMUJRVm9zUzBGQmRVSnhaaXhsUVVGbExFTkJRVU55Wml4TlFVUnlSVHM3UVVGRlFTeFJRVUZKZVdZc2IwSkJRVW9zUlVGQk1FSTdRVUZEZUVJc1dVRkJUU3hKUVVGSmRtaENMRXRCUVVvc01rUkJReXREYldoQ0xHVkJSQzlETEN0RVFVRk9PMEZCUjBRN08wRkJSVVFzVVVGQlRVc3NhMEpCUVd0Q0xFZEJRM1JDTEVsQlFVbHFaU3hIUVVGS0xFTkJRVkUwWkN4bFFVRlNMRVZCUVhsQ1ppeEpRVUY2UWl4TFFVRnJRMlVzWlVGQlpTeERRVUZEY21Zc1RVRkVjRVE3TzBGQlJVRXNVVUZCU1RCbUxHdENRVUZLTEVWQlFYZENPMEZCUTNSQ0xGbEJRVTBzU1VGQlNYaG9RaXhMUVVGS0xESkVRVU1yUTIxb1FpeGxRVVF2UXl4cFJFRkJUanRCUVVkRUxFdEJlRUpFTEVOQk1FSkJPenM3UVVGRFFTeFZRVUZMVFN4WFFVRk1MRWRCUVcxQ0xFVkJRVzVDT3p0QlFVTkJMRzFEUVVGSkxFMUJRVXM1UXl4UFFVRk1MRU5CUVdGb1VDeE5RVUZpTEVWQlFVb3NSVUZCTWtJNVRpeFBRVUV6UWl4RFFVRnRReXhWUVVGRFoyTXNTMEZCUkN4RlFVRlJkbUlzUzBGQlVpeEZRVUZyUWp0QlFVTnVSQ3haUVVGTGJXWXNWMEZCVEN4RFFVRnBRbXBoTEVsQlFXcENMRU5CUVhOQ08wRkJRM0JDTjBjc1VVRkJRVUVzUzBGQlN5eEZRVUZGZDJkQ0xHVkJRV1VzUTBGQlF6ZGxMRXRCUVVRc1EwRkVSanRCUVVWd1FtRXNVVUZCUVVFc1NVRkJTU3hGUVVGRk1HRXNTMEZCU3l4RFFVRkRNV0VzU1VGR1VUdEJRVWR3UW5WbExGRkJRVUZCTEZWQlFWVXNSVUZCUlU0c1dVRkJXU3hEUVVGRE9XVXNTMEZCUkN4RFFVRmFMRWxCUVhWQ08wRkJTR1lzVDBGQmRFSTdRVUZMUkN4TFFVNUVPenRCUVZGQkxGVkJRVXR4Wml4bFFVRk1PenRCUVVOQkxGVkJRVXRETEhOQ1FVRk1MRWRCUVRoQ0xFbEJRVGxDTzBGQlJVRXNWVUZCUzBNc1pVRkJUQ3hIUVVGMVFpeEpRVUYyUWpzN1FVRkZRU3hWUVVGTFF5eHRRa0ZCVERzN1FVRjZRMEU3UVVFd1EwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN096czdPMU5CUTBVc1pVRkJhVUk3UVVGRFppeGhRVUZQTEV0QlFVdFVMRmRCUVZvN1FVRkRSRHRUUVVWRUxHRkJRV1V4WjBJc1MwRkJaaXhGUVVGelFqdEJRVU53UWl4WFFVRkxNR2RDTEZkQlFVd3NSMEZCYlVJeFowSXNTMEZCYmtJN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUczdPenRUUVVORkxHVkJRWGRDTzBGQlEzUkNMR0ZCUVU4c1MwRkJTM05qTEZOQlFVd3NRMEZCWlhGRkxGVkJRV1lzU1VGQk5rSXNTMEZCUzNKRkxGTkJRVXdzUTBGQlpYRkZMRlZCUVdZc1EwRkJNRUk1WjBJc1QwRkJPVVE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeDNRa0ZCWlRKRExFbEJRV1lzUlVGQmNVSjRReXhMUVVGeVFpeEZRVUZ0UkR0QlFVRkJPenRCUVVGQkxGVkJRWFpDYzBRc1QwRkJkVUlzZFVWQlFXSXNRMEZCWVR0QlFVRkJMRlZCUVZaM1VDeFJRVUZWT3p0QlFVTnFSQ3hYUVVGTGQwb3NVMEZCVEN4RFFVRmxjVVVzVlVGQlppeERRVUV3UW01b1FpeE5RVUV4UWpzN1FVRkZRU3hYUVVGTE9HTXNVMEZCVEN4RFFVRmxjVVVzVlVGQlppeEhRVUUwUW1wR0xESkRRVUZCTEVOQlF6RkNMRWxCUkRCQ0xFVkJSVEZDTEZsQlJqQkNMRVZCUnpGQ01XSXNTMEZJTUVJc1JVRkpNVUk3UVVGRFJYTkVMRkZCUVVGQkxFOUJRVThzUlVGQlVFRXNUMEZFUmp0QlFVVkZkMUFzVVVGQlFVRXNVVUZCVVN4RlFVRlNRU3hSUVVaR08wRkJSMFYwVUN4UlFVRkJRU3hWUVVGVkxFVkJRVVVzYzBKQlFVMDdRVUZEYUVJc1owSkJRVWtzUTBGQlF6SmtMRzFDUVVGTU8wRkJRMFFzVTBGTVNEdEJRVTFGTldRc1VVRkJRVUVzVVVGQlVTeEZRVUZGTEc5Q1FVRk5PMEZCUTJRc1owSkJRVWtzUTBGQlF6UmtMRzFDUVVGTU8wRkJRMFE3UVVGU1NDeFBRVW93UWl4RFFVRTFRanRCUVdkQ1FTeGhRVUZQTEV0QlFVczNSU3hUUVVGTUxFTkJRV1Z4UlN4VlFVRjBRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERCQ1FVRnBRanRCUVVObUxHRkJRVThzUzBGQlMwRXNWVUZCV2p0QlFVTkVPenM3VjBGRlJDeHJRa0ZCVTNwRUxFdEJRVlFzUlVGQmQwUTdRVUZCUVN4VlFVRjRRMnRGTEdOQlFYZERMSFZGUVVGMlFpeERRVUYxUWp0QlFVRkJMRlZCUVhCQ1RDeFZRVUZ2UWl4MVJVRkJVQ3hMUVVGUE8wRkJRM1JFTEZkQlFVdEVMRmRCUVV3c1IwRkJiVUlzUzBGQlMwRXNWMEZCVEN4SlFVRnZRaXhGUVVGMlF5eERRVVJ6UkN4RFFVZDBSRHM3UVVGRFFTeFZRVUZOVHl4VFFVRlRMRWRCUVVjc1MwRkJTMUFzVjBGQlRDeERRVUZwUWxFc1NVRkJha0lzUTBGRGFFSXNWVUZCUVVNc1UwRkJVenRCUVVGQkxHVkJRVWxCTEZOQlFWTXNRMEZCUTNab1FpeExRVUZXTEV0QlFXOUNiMmhDTEdOQlFYaENPMEZCUVVFc1QwRkVUeXhEUVVGc1FqczdRVUZIUVN4VlFVRkpMRXRCUVV0SUxITkNRVUZNTEVsQlFTdENTU3hUUVVGVExFdEJRVXR5WjBJc1UwRkJha1FzUlVGQk5FUTdRVUZETVVRc1kwRkJUU3hKUVVGSk0wSXNTMEZCU2l4NVEwRkROa0lyYUVJc1kwRkVOMElzZDBKQlEzbEViRVVzUzBGQlN5eERRVUZETVdFc1NVRkVMMFFzYVVKQlF6QkZMRXRCUVV0QkxFbEJSQzlGTEcxRVFVRk9PMEZCUjBRN08wRkJSVVFzZVVkQlFXVXdZU3hMUVVGbU96dEJRVU5CTEZkQlFVczBSQ3hYUVVGTUxFTkJRV2xDYW1Fc1NVRkJha0lzUTBGQmMwSTdRVUZEY0VJM1J5eFJRVUZCUVN4TFFVRkxMRVZCUVVWdmFFSXNZMEZFWVR0QlFVVndRalZsTEZGQlFVRkJMRWxCUVVrc1JVRkJSVEJoTEV0QlFVc3NRMEZCUXpGaExFbEJSbEU3UVVGSGNFSjFaU3hSUVVGQlFTeFZRVUZWTEVWQlFVVkJMRlZCUVZVc1NVRkJTVHRCUVVoT0xFOUJRWFJDT3p0QlFVMUJMRmRCUVV0RExHVkJRVXc3TzBGQlJVRXNZVUZCVHpsRUxFdEJRVXNzUTBGQlF6RmhMRWxCUVdJN1FVRkRSRHM3TzFkQlJVUXNjVUpCUVZsQkxFbEJRVm9zUlVGQmEwSTdRVUZEYUVJc1ZVRkJUV2RtTEU5QlFVOHNSMEZCUnl4elIwRkJhMEpvWml4SlFVRnlRaXhEUVVGaU96dEJRVVZCTEZWQlFVbG5aaXhQUVVGS0xFVkJRV0U3UVVGRFdDeFpRVUZOTjJZc1MwRkJTeXhIUVVGSExFdEJRVXR0Wml4WFFVRk1MRU5CUVdsQ1Z5eFRRVUZxUWl4RFFVTmFMRlZCUVVGR0xGTkJRVk03UVVGQlFTeHBRa0ZCU1VFc1UwRkJVeXhEUVVGREwyVXNTVUZCVml4TFFVRnRRa0VzU1VGQmRrSTdRVUZCUVN4VFFVUkhMRU5CUVdRN08wRkJSMEVzWVVGQlMzTmxMRmRCUVV3c1EwRkJhVUl6V2l4TlFVRnFRaXhEUVVGM1FuaEdMRXRCUVhoQ0xFVkJRU3RDTEVOQlFTOUNPMEZCUTBRN08wRkJSVVFzWVVGQlR6Wm1MRTlCUVZBN1FVRkRSRHM3TzFkQlJVUXNjVUpCUVZrM1F5eFhRVUZhTEVWQlFYbENPVTBzVDBGQmVrSXNSVUZCYTBNN1FVRkRhRU5CTEUxQlFVRkJMRTlCUVU4c1IwRkJSeXh6UjBGQmEwSTRUU3hYUVVGeVFpeEZRVUZyUXpsTkxFOUJRV3hETEVOQlFWQTdPMEZCUlVFc1ZVRkJUVEJRTEZOQlFWTXNSMEZCUnl4TFFVRkxWQ3hYUVVGTUxFTkJRV2xDVVN4SlFVRnFRaXhEUVVOb1FpeFZRVUZCUXl4VFFVRlRPMEZCUVVFc1pVRkJTVUVzVTBGQlV5eERRVUZETDJVc1NVRkJWaXhMUVVGdFFtMWpMRmRCUVhaQ08wRkJRVUVzVDBGRVR5eERRVUZzUWpzN1FVRkhRVFJETEUxQlFVRkJMRk5CUVZNc1EwRkJReTlsTEVsQlFWWXNSMEZCYVVKeFVDeFBRVUZxUWp0QlFVVkJMR0ZCUVU5QkxFOUJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc01rSkJRV3RDY2xBc1NVRkJiRUlzUlVGQmQwSTdRVUZEZEVJc1ZVRkJUU3RsTEZOQlFWTXNSMEZCUnl4TFFVRkxWQ3hYUVVGTUxFTkJRV2xDVVN4SlFVRnFRaXhEUVVOb1FpeFZRVUZCUXl4VFFVRlRPMEZCUVVFc1pVRkJTVUVzVTBGQlV5eERRVUZETDJVc1NVRkJWaXhMUVVGdFFrRXNTVUZCZGtJN1FVRkJRU3hQUVVSUExFTkJRV3hDT3p0QlFVbEJMRlZCUVVrclpTeFRRVUZUTEV0QlFVdDJaMElzVTBGQmJFSXNSVUZCTmtJN1FVRkRNMElzWTBGQlRTeEpRVUZKTTBJc1MwRkJTaXdyUTBGRGJVTnRSQ3hKUVVSdVF5eHBRa0ZET0VNc1MwRkJTMEVzU1VGRWJrUXNkVU5CUVU0N1FVRkhSRHM3UVVGRlJDeGhRVUZQSzJVc1UwRkJVeXhEUVVGRGRtaENMRXRCUVdwQ08wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc01rSkJRV3RDZDBNc1NVRkJiRUlzUlVGQmQwSjRReXhMUVVGNFFpeEZRVUVyUWp0QlFVTTNRanRCUVVOQkxGVkJRVTF4YUVJc1UwRkJVeXhIUVVGSExFdEJRVXRRTEZkQlFVd3NRMEZCYVVKUkxFbEJRV3BDTEVOQlEyaENMRlZCUVVGRExGTkJRVk03UVVGQlFTeGxRVUZKUVN4VFFVRlRMRU5CUVVOMmFFSXNTMEZCVml4TFFVRnZRa0VzUzBGQmVFSTdRVUZCUVN4UFFVUlBMRU5CUVd4Q096dEJRVWRCTEZWQlFVbHhhRUlzVTBGQlV5eExRVUZMY21kQ0xGTkJRV3hDTEVWQlFUWkNPMEZCUXpOQ0xHTkJRVTBzU1VGQlNUTkNMRXRCUVVvc2VVTkJRelpDVnl4TFFVUTNRaXgzUWtGRFowUjNReXhKUVVSb1JDeHBRa0ZETWtRc1MwRkJTMEVzU1VGRWFFVXNiVVJCUVU0N1FVRkhSRHM3UVVGRlJDeFZRVUZOSzJVc1UwRkJVeXhIUVVGSExFdEJRVXRVTEZkQlFVd3NRMEZCYVVKUkxFbEJRV3BDTEVOQlEyaENMRlZCUVVGRExGTkJRVk03UVVGQlFTeGxRVUZKUVN4VFFVRlRMRU5CUVVNdlpTeEpRVUZXTEV0QlFXMUNRU3hKUVVGMlFqdEJRVUZCTEU5QlJFOHNRMEZCYkVJN08wRkJTVUVzVlVGQlNTdGxMRk5CUVZNc1MwRkJTM1puUWl4VFFVRnNRaXhGUVVFMlFqdEJRVU16UWl4alFVRk5MRWxCUVVrelFpeExRVUZLTEN0RFFVTnRRMjFFTEVsQlJHNURMR2xDUVVNNFF5eExRVUZMUVN4SlFVUnVSQ3gxUTBGQlRqdEJRVWRFT3p0QlFVVkVLMlVzVFVGQlFVRXNVMEZCVXl4RFFVRkRkbWhDTEV0QlFWWXNSMEZCYTBKQkxFdEJRV3hDT3p0QlFVVkJMRmRCUVV0bmFFSXNaVUZCVERzN1FVRkZRU3hoUVVGUFR5eFRRVUZUTEVOQlFVTjJhRUlzUzBGQmFrSTdRVUZEUkRzN08xZEJSVVFzT0VKQlFYRkNNa1VzVFVGQmNrSXNSVUZCTmtJN1FVRkJRVHM3UVVGRE0wSXNjVWhCUVRKQ1FTeE5RVUV6UWpzN1FVRkZRU3hWUVVGSkxFdEJRVXQxWXl4bFFVRlVMRVZCUVRCQ08wRkJRM2hDTEdGQlFVdHNSQ3hQUVVGTUxFTkJRV0U1WXl4UFFVRmlMRU5CUVhGQ0xGVkJRVUZuWXl4TFFVRkxMRVZCUVVrN1FVRkROVUlzWTBGQlNVRXNTMEZCU3l4RFFVRkRja3NzVFVGQlRpeExRVUZwUWl4RFFVRnlRaXhGUVVGM1FqdEJRVU4wUW5GTExGbEJRVUZCTEV0QlFVc3NRMEZCUTNkRkxHTkJRVTRzUjBGQmRVSXNUVUZCU1N4RFFVRkRVaXhsUVVGTUxFTkJRWEZDVVN4alFVRTFRenRCUVVORU8wRkJRMFlzVTBGS1JEdEJRVXRFTzBGQlEwWTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxDdENRVUZ6UWp0QlFVRkJPenRCUVVOd1FpeFZRVUZKTEV0QlFVdGFMRmRCUVV3c1EwRkJhVUl6Wml4TlFVRnFRaXhMUVVFMFFpeERRVUZvUXl4RlFVRnRRenM3UVVGRmJrTXNWVUZCU1N4TFFVRkxNbVlzVjBGQlRDeERRVUZwUWpObUxFMUJRV3BDTEV0QlFUUkNMRU5CUVdoRExFVkJRVzFETzBGQlEycERMRmxCUVUwcllpeExRVUZMTEVkQlFVY3NTMEZCUzJNc1QwRkJUQ3hEUVVGaGRrWXNSMEZCWWl4RFFVRnBRaXhMUVVGTGNVa3NWMEZCVEN4RFFVRnBRaXhEUVVGcVFpeEZRVUZ2UW5SbExFbEJRWEpETEVOQlFXUTdPMEZCUTBFd1lTeFJRVUZCUVN4TFFVRkxMRU5CUVVOTkxGTkJRVTRzUTBGQlowSXNRMEZCYUVJN1FVRkRRVHRCUVVORUxFOUJVRzFDTEVOQlUzQkNPenM3UVVGRFFTeFhRVUZMVVN4UFFVRk1MRU5CUVdFNVl5eFBRVUZpTEVOQlFYRkNMRlZCUVVGbll5eExRVUZMTEVWQlFVazdRVUZETlVKQkxGRkJRVUZCTEV0QlFVc3NRMEZCUTAwc1UwRkJUaXhEUVVGblFpeERRVUZvUWp0QlFVTkVMRTlCUmtRN08wRkJTVUVzVjBGQlN6QkVMR1ZCUVV3c1IwRkJkVUlzU1VGQmRrSXNRMEZrYjBJc1EwRm5RbkJDT3p0QlFVTkJMRlZCUVVsVExGZEJRVmNzUjBGQlJ5eExRVUZMWWl4WFFVRk1MRU5CUVdsQ1Z5eFRRVUZxUWl4RFFVRXlRaXhWUVVGQlJpeFRRVUZUTEVWQlFVazdRVUZEZUVRc1pVRkJUMEVzVTBGQlV5eERRVUZEZG1oQ0xFdEJRVllzU1VGQmJVSXNUVUZCU1N4RFFVRkRNR2RDTEZkQlFTOUNPMEZCUTBRc1QwRkdhVUlzUTBGQmJFSTdPMEZCU1VFc1ZVRkJTV2xDTEZkQlFWY3NTMEZCU3l4RFFVRm9RaXhKUVVGeFFrRXNWMEZCVnl4TFFVRkxMRU5CUVVNc1EwRkJNVU1zUlVGQk5rTTdRVUZETTBNN1FVRkRRVUVzVVVGQlFVRXNWMEZCVnl4SFFVRkhRU3hYUVVGWExFdEJRVXNzUTBGQlF5eERRVUZxUWl4SFFVRnhRaXhMUVVGTFlpeFhRVUZNTEVOQlFXbENNMllzVFVGQmFrSXNSMEZCTUVJc1EwRkJMME1zUjBGQmJVUXNRMEZCYWtVN08wRkJRMEVzV1VGQlRTdGlMRTFCUVVzc1IwRkJSeXhMUVVGTFl5eFBRVUZNTEVOQlFXRjJSaXhIUVVGaUxFTkJRV2xDTEV0QlFVdHhTU3hYUVVGTUxFTkJRV2xDWVN4WFFVRnFRaXhGUVVFNFFtNW1MRWxCUVM5RExFTkJRV1E3TzBGQlEwRXdZU3hSUVVGQlFTeE5RVUZMTEVOQlFVTk5MRk5CUVU0c1EwRkJaMElzUTBGQmFFSTdRVUZEUkN4UFFVeEVMRTFCUzA4N1FVRkRURHRCUVVOQkxGbEJRVTF2UlN4VlFVRlZMRWRCUVVjc1MwRkJTMlFzVjBGQlRDeERRVUZwUW1Fc1YwRkJWeXhIUVVGSExFTkJRUzlDTEVOQlFXNUNPMEZCUTBFc1dVRkJUVVVzVlVGQlZTeEhRVUZITEV0QlFVdG1MRmRCUVV3c1EwRkJhVUpoTEZkQlFXcENMRU5CUVc1Q08wRkJSVUVzV1VGQlRVY3NUMEZCVHl4SFFVTllMRU5CUVVNc1MwRkJTMjVDTEZWQlFVd3NSMEZCYTBKcFFpeFZRVUZWTEVOQlFVTTFhRUlzUzBGQk9VSXNTMEZEUXpab1FpeFZRVUZWTEVOQlFVTTNhRUlzUzBGQldDeEhRVUZ0UWpSb1FpeFZRVUZWTEVOQlFVTTFhRUlzUzBGRUwwSXNRMEZFUmp0QlFVZEJMRmxCUVUwcmFFSXNUMEZCVHl4SFFVRkhMRWxCUVVsRUxFOUJRWEJDT3p0QlFVVkJMRmxCUVUxRkxFMUJRVTBzUjBGQlJ5eExRVUZMYUVVc1QwRkJUQ3hEUVVGaGRrWXNSMEZCWWl4RFFVRnBRbTFLTEZWQlFWVXNRMEZCUTNCbUxFbEJRVFZDTEVOQlFXWTdPMEZCUTBFc1dVRkJUWGxtTEUxQlFVMHNSMEZCUnl4TFFVRkxha1VzVDBGQlRDeERRVUZoZGtZc1IwRkJZaXhEUVVGcFFtOUtMRlZCUVZVc1EwRkJRM0ptTEVsQlFUVkNMRU5CUVdZN08wRkJSVUYzWml4UlFVRkJRU3hOUVVGTkxFTkJRVU40UlN4VFFVRlFMRU5CUVdsQ2RVVXNUMEZCYWtJN1FVRkRRVVVzVVVGQlFVRXNUVUZCVFN4RFFVRkRla1VzVTBGQlVDeERRVUZwUW5ORkxFOUJRV3BDTEVWQlpFc3NRMEZuUWt3N08wRkJRMEVzV1VGQlNVWXNWVUZCVlN4RFFVRkRZaXhWUVVGWUxFbEJRWGxDWXl4VlFVRlZMRU5CUVVOa0xGVkJRWGhETEVWQlFXOUVPMEZCUTJ4RUxHVkJRVXRITEdWQlFVd3NSMEZCZFVKaExFOUJRVThzUjBGQlIwUXNUMEZCVml4SFFVRnZRa1VzVFVGQmNFSXNSMEZCTmtKRExFMUJRWEJFTzBGQlEwUTdRVUZEUmp0QlFVTkdPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxESkNRVUZyUWp0QlFVTm9RaXhYUVVGTGJrSXNWMEZCVEN4RFFVRnBRak5aTEVsQlFXcENMRU5CUVhOQ0xGVkJRVU4yUkN4RFFVRkVMRVZCUVVsRExFTkJRVW83UVVGQlFTeGxRVUZWUkN4RFFVRkRMRU5CUVVNMVJTeExRVUZHTEVkQlFWVTJSU3hEUVVGRExFTkJRVU0zUlN4TFFVRjBRanRCUVVGQkxFOUJRWFJDTzBGQlEwUTdPenM3UlVFNVUzZENhMmRDT3p0QlFXbFVNMElzZVVSQlFXVkxMRmxCUVdZc1JUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRemRVUVR0QlFVTkJPenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMHlRanM3T3pzN1FVRkRTanRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMFVzTUVKQlMwVTdRVUZCUVRzN1FVRkJRU3hSUVVwQmRsQXNUMEZKUVN4MVJVRktWU3hGUVVsV08wRkJRVUVzVVVGSVFYZE9MRmRCUjBFc2RVVkJTR01zUlVGSFpEdEJRVUZCTEZGQlJrRkxMR1ZCUlVFc2RVVkJSbXRDTEVWQlJXeENPMEZCUVVFc1VVRkVRVU1zV1VGRFFTeDFSVUZFWlN4RlFVTm1PenRCUVVGQk96dEJRVU5CTERoQ1FVRk5PVTRzVDBGQlRpeEZRVUZsZDA0c1YwRkJaanM3UVVGRlFTeFJRVUZKUVN4WFFVRlhMRU5CUVVOb1ppeE5RVUZhTEV0QlFYVkNjV1lzWlVGQlpTeERRVUZEY21Zc1RVRkJNME1zUlVGQmJVUTdRVUZEYWtRc1dVRkJUU3hKUVVGSk9VSXNTMEZCU2l4MVJFRkRNa000WjBJc1YwRkVNME1zYTBOQlF6aEZTeXhsUVVRNVJTeHBSVUZCVGp0QlFVZEVPenRCUVVWRVFTeEpRVUZCUVN4bFFVRmxMRU5CUTFwNFpDeExRVVJJTEVOQlExTXNRMEZFVkN4RlFVTlpkMlFzWlVGQlpTeERRVUZEY21Zc1RVRkJhRUlzUjBGQmVVSXNRMEZFY2tNc1JVRkZSMFFzVDBGR1NDeERRVVZYTEZWQlFVTnhaMElzVTBGQlJDeEZRVUZaTldZc1MwRkJXaXhGUVVGelFqdEJRVU0zUWpabExFMUJRVUZCTEdWQlFXVXNRMEZCUTNoa0xFdEJRV2hDTEVOQlFYTkNja0lzUzBGQlN5eEhRVUZITEVOQlFUbENMRVZCUVdsRFZDeFBRVUZxUXl4RFFVRjVReXhWUVVGQmFXaENMR05CUVdNc1JVRkJTVHRCUVVONlJDeFpRVU5GV2l4VFFVRlRMRU5CUVVNc1EwRkJSQ3hEUVVGVUxFdEJRV2xDV1N4alFVRmpMRU5CUVVNc1EwRkJSQ3hEUVVFdlFpeEpRVU5CV2l4VFFVRlRMRU5CUVVNc1EwRkJSQ3hEUVVGVUxFdEJRV2xDV1N4alFVRmpMRU5CUVVNc1EwRkJSQ3hEUVVacVF5eEZRVWRGTzBGQlEwRXNaMEpCUVUwc1NVRkJTVGxwUWl4TFFVRktMREpFUVVNclEyMW9RaXhsUVVRdlF5eDFSRUZCVGp0QlFVZEVPMEZCUTBZc1QwRlVSRHRCUVZWRUxFdEJZa2c3UVVGbFFTeFZRVUZMTkVJc1dVRkJUQ3hIUVVGdlFpeERRVUZ3UWp0QlFVTkJMRlZCUVV0RExGbEJRVXdzUjBGQmIwSXNRMEZCY0VJN1FVRkZRU3hWUVVGTEwwWXNVMEZCVEN3eVJFRkRTeXhOUVVGTFFTeFRRVVJXTzBGQlJVVm5SeXhOUVVGQlFTeFhRVUZYTEVWQlFVVjBha0lzY1VKQlFVRXNSVUZHWmp0QlFVZEZkV3BDTEUxQlFVRkJMRmRCUVZjc1JVRkJSWFpxUWl4eFFrRkJRVHRCUVVobU8wRkJUVUVzVlVGQlN6aG9RaXhYUVVGTUxFZEJRVzFDTEVWQlFXNUNPenRCUVVOQkxHMURRVUZKTEUxQlFVczVReXhQUVVGTUxFTkJRV0ZvVUN4TlFVRmlMRVZCUVVvc1JVRkJNa0k1VGl4UFFVRXpRaXhEUVVGdFF5eFZRVUZEWjJNc1MwRkJSQ3hGUVVGUmRtSXNTMEZCVWl4RlFVRnJRanRCUVVOdVJDeFpRVUZMYldZc1YwRkJUQ3hEUVVGcFFtcGhMRWxCUVdwQ0xFTkJRWE5DTzBGQlEzQkNja1VzVVVGQlFVRXNTVUZCU1N4RlFVRkZNR0VzUzBGQlN5eERRVUZETVdFc1NVRkVVVHRCUVVWd1FuVmxMRkZCUVVGQkxGVkJRVlVzUlVGQlJVNHNXVUZCV1N4RFFVRkRPV1VzUzBGQlJDeERRVUZhTEVsQlFYVkNPMEZCUm1Zc1QwRkJkRUk3UVVGSlJDeExRVXhFT3p0QlFVOUJMRlZCUVVzMlowSXNVMEZCVEN4SFFVRnBRbWhETEdWQlFXcENPenRCUVVWQkxGRkJRVWtzVFVGQlMyZERMRk5CUVV3c1EwRkJaWEpvUWl4TlFVRm1MRWxCUVhsQ0xFTkJRVGRDTEVWQlFXZERPMEZCUXpsQ0xGbEJRVXR6YUVJc1ZVRkJUQ3hIUVVGclFtNWxMSFZEUVVGQkxFTkJRVzFETEUxQlFVdHJaU3hUUVVGNFF5eERRVUZzUWp0QlFVTkVPenRCUVVWRUxGVkJRVXQwUWl4bFFVRk1MRWRCUVhWQ0xFbEJRWFpDT3p0QlFVVkJMRlZCUVV0RExHMUNRVUZNT3p0QlFXcEVRVHRCUVd0RVJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TzFkQlEwVXNkMEpCUVdVelpTeEpRVUZtTEVWQlFYRkNlRU1zUzBGQmNrSXNSVUZCYlVRN1FVRkJRVHM3UVVGQlFTeFZRVUYyUW5ORUxFOUJRWFZDTEhWRlFVRmlMRU5CUVdFN1FVRkJRU3hWUVVGV2QxQXNVVUZCVlR0QlFVTnFSQ3hWUVVGTk5sQXNVVUZCVVN4MVFrRkJaMEp1WjBJc1NVRkJTU3hEUVVGRGIyZENMRmRCUVV3c1JVRkJhRUlzUTBGQlpEczdRVUZEUVN4VlFVRkpSQ3hSUVVGUkxFdEJRVXNzWVVGQllpeEpRVUU0UWtFc1VVRkJVU3hMUVVGTExHRkJRUzlETEVWQlFUaEVPMEZCUXpWRUxHTkJRVTBzU1VGQlNYUnFRaXhMUVVGS0xIVkRRVU15UW0xRUxFbEJSRE5DTEdsQ1FVTnpReXhMUVVGTFFTeEpRVVF6UXl3clJFRkJUanRCUVVkRU96dEJRVVZFTEZkQlFVczRXaXhUUVVGTUxFTkJRV1Z4Unl4UlFVRm1MRVZCUVhsQ2JtcENMRTFCUVhwQ096dEJRVVZCTEZkQlFVczRZeXhUUVVGTUxFTkJRV1Z4Unl4UlFVRm1MRWxCUVRKQ2FrZ3NNa05CUVVFc1EwRkRla0lzU1VGRWVVSXNSVUZGZWtKcFNDeFJRVVo1UWl4RlFVZDZRak5wUWl4TFFVaDVRaXhGUVVsNlFqdEJRVU5GYzBRc1VVRkJRVUVzVDBGQlR5eEZRVUZRUVN4UFFVUkdPMEZCUlVWM1VDeFJRVUZCUVN4UlFVRlJMRVZCUVZKQkxGRkJSa1k3UVVGSFJYUlFMRkZCUVVGQkxGVkJRVlVzUlVGQlJTeHpRa0ZCVFR0QlFVTm9RaXhuUWtGQlNTeERRVUZETW1Rc2JVSkJRVXc3UVVGRFJDeFRRVXhJTzBGQlRVVTFaQ3hSUVVGQlFTeFJRVUZSTEVWQlFVVXNiMEpCUVUwN1FVRkRaQ3huUWtGQlNTeERRVUZETkdRc2JVSkJRVXc3UVVGRFJEdEJRVkpJTEU5QlNubENMRU5CUVROQ08wRkJaMEpCTEdGQlFVOHNTMEZCU3pkRkxGTkJRVXdzUTBGQlpYRkhMRkZCUVdZc1EwRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4M1FrRkJaVzVuUWl4SlFVRm1MRVZCUVhGQ08wRkJRMjVDTEZWQlFVMXRaMElzVVVGQlVTeEhRVUZIYm1kQ0xFbEJRVWtzUTBGQlEyOW5RaXhYUVVGTUxFVkJRV3BDT3p0QlFVTkJMRlZCUVVsRUxGRkJRVkVzUzBGQlN5eEhRVUZpTEVsQlFXOUNRU3hSUVVGUkxFdEJRVXNzUjBGQmNrTXNSVUZCTUVNN1FVRkRlRU1zWTBGQlRTeEpRVUZKZEdwQ0xFdEJRVW9zZFVOQlF6SkNiVVFzU1VGRU0wSXNhVUpCUTNORExFdEJRVXRCTEVsQlJETkRMQ3RFUVVGT08wRkJSMFE3TzBGQlJVUXNZVUZCVDIxblFpeFJRVUZSTEV0QlFVc3NSMEZCWWl4SFFVRnRRaXhMUVVGTFVDeFpRVUY0UWl4SFFVRjFReXhMUVVGTFF5eFpRVUZ1UkR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk96czdPMU5CUTBVc1pVRkJhMEk3UVVGRGFFSXNZVUZCVHl4TFFVRkxSQ3haUVVGYU8wRkJRMFE3VTBGRlJDeGhRVUZuUW5CcFFpeExRVUZvUWl4RlFVRjFRanRCUVVOeVFpeFhRVUZMYjJsQ0xGbEJRVXdzUjBGQmIwSndhVUlzUzBGQmNFSTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHM3T3p0VFFVTkZMR1ZCUVd0Q08wRkJRMmhDTEdGQlFVOHNTMEZCUzNGcFFpeFpRVUZhTzBGQlEwUTdVMEZGUkN4aFFVRm5RbkpwUWl4TFFVRm9RaXhGUVVGMVFqdEJRVU55UWl4WFFVRkxjV2xDTEZsQlFVd3NSMEZCYjBKeWFVSXNTMEZCY0VJN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUczdPenRUUVVORkxHVkJRWGxDTzBGQlEzWkNMR0ZCUVU4c1MwRkJTM05qTEZOQlFVd3NRMEZCWldkSExGZEJRV1lzU1VGQk9FSXNTMEZCUzJoSExGTkJRVXdzUTBGQlpXZEhMRmRCUVdZc1EwRkJNa0o2YVVJc1QwRkJhRVU3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVRzN096dFRRVU5GTEdWQlFYbENPMEZCUTNaQ0xHRkJRVThzUzBGQlMzbGpMRk5CUVV3c1EwRkJaV2xITEZkQlFXWXNTVUZCT0VJc1MwRkJTMnBITEZOQlFVd3NRMEZCWldsSExGZEJRV1lzUTBGQk1rSXhhVUlzVDBGQmFFVTdRVUZEUkRzN08xZEJSVVFzT0VKQlFYRkNPRVVzVFVGQmNrSXNSVUZCTmtJN1FVRkJRVHM3UVVGRE0wSXNjVWhCUVRKQ1FTeE5RVUV6UWpzN1FVRkZRU3hWUVVGSkxFdEJRVXQxWXl4bFFVRlVMRVZCUVRCQ08wRkJRM2hDTEhWRFFVRkpMRXRCUVV0c1JDeFBRVUZNTEVOQlFXRm9VQ3hOUVVGaUxFVkJRVW9zUlVGQk1rSTVUaXhQUVVFelFpeERRVUZ0UXl4VlFVRkRaMk1zUzBGQlJDeEZRVUZSZG1Jc1MwRkJVaXhGUVVGclFqdEJRVU51UkN4alFVRkpkV0lzUzBGQlN5eERRVUZEY2tzc1RVRkJUaXhMUVVGcFFpeERRVUZxUWl4SlFVRnpRaXhOUVVGSkxFTkJRVU5wVHl4WFFVRk1MRU5CUVdsQ2JtWXNTMEZCYWtJc1JVRkJkMEp2Wml4VlFVRnNSQ3hGUVVFNFJEdEJRVU0xUkRkRUxGbEJRVUZCTEV0QlFVc3NRMEZCUTNkRkxHTkJRVTRzUjBGQmRVSXNUVUZCU1N4RFFVRkRVaXhsUVVGTUxFTkJRWEZDVVN4alFVRTFRenRCUVVORU8wRkJRMFlzVTBGS1JEdEJRVXRFTzBGQlEwWTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxDdENRVUZ6UWp0QlFVRkJPenRCUVVOd1FpeFZRVUZKTEVOQlFVTXNTMEZCUzJNc1UwRkJUaXhKUVVGdFFpeExRVUZMUVN4VFFVRk1MRU5CUVdWeWFFSXNUVUZCWml4TFFVRXdRaXhEUVVGcVJDeEZRVUZ2UkRzN1FVRkZjRVFzVlVGQlNTeExRVUZMY1doQ0xGTkJRVXdzUTBGQlpYSm9RaXhOUVVGbUxFdEJRVEJDTEVOQlFUbENMRVZCUVdsRE8wRkJReTlDTEhWRFFVRkpMRXRCUVVzMll5eFBRVUZNTEVOQlFXRm9VQ3hOUVVGaUxFVkJRVW9zUlVGQk1rSXNRMEZCTTBJc1JVRkJPRUkyUkN4TlFVRTVRaXhIUVVGMVF5eERRVUYyUXp0QlFVTkJPMEZCUTBRc1QwRk9iVUlzUTBGUmNFSTdPenRCUVVOQkxGZEJRVXR0VEN4UFFVRk1MRU5CUVdFNVl5eFBRVUZpTEVOQlFYRkNMRlZCUVVGbll5eExRVUZMTEVWQlFVazdRVUZETlVKQkxGRkJRVUZCTEV0QlFVc3NRMEZCUTAwc1UwRkJUaXhEUVVGblFpeERRVUZvUWp0QlFVTkVMRTlCUmtRN08wRkJSMEVzVjBGQlN6QkVMR1ZCUVV3c1IwRkJkVUlzU1VGQmRrSTdRVUZGUVN4VlFVRk5jR01zUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCUzNOa0xGbEJRVTRzUlVGQmIwSXNTMEZCUzBNc1dVRkJla0lzUTBGQlZqczdRVUZGUVN4VlFVRkpMRXRCUVV0SExGTkJRVXdzUTBGQlpYSm9RaXhOUVVGbUxFdEJRVEJDTEVOQlFUbENMRVZCUVdsRE8wRkJReTlDTEdGQlFVc3dhRUlzSzBKQlFVd3NRMEZCY1VNdlpDeERRVUZ5UXp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxGbEJRVTAyUWl4UlFVRlJMRWRCUVVjc1MwRkJTemhpTEZWQlFVd3NRMEZCWjBKdVFpeEpRVUZvUWl4RFFVRnhRaXhWUVVGQk0yRXNVVUZCVVN4RlFVRkpPMEZCUTJoRUxHbENRVUZQY2tNc1owTkJRVUVzUTBGRFRDeE5RVUZKTEVOQlFVTnJaU3hUUVVGTUxFTkJRV1UzWWl4UlFVRlJMRU5CUVVNc1EwRkJSQ3hEUVVGMlFpeERRVVJMTEVWQlJVd3NUVUZCU1N4RFFVRkRObUlzVTBGQlRDeERRVUZsTjJJc1VVRkJVU3hEUVVGRExFTkJRVVFzUTBGQmRrSXNRMEZHU3l4RlFVZE1MRTFCUVVrc1EwRkJRelppTEZOQlFVd3NRMEZCWlRkaUxGRkJRVkVzUTBGQlF5eERRVUZFTEVOQlFYWkNMRU5CU0Vzc1JVRkpURGRDTEVOQlNrc3NRMEZCVUR0QlFVMUVMRk5CVUdkQ0xFTkJRV3BDT3p0QlFWTkJMRmxCUVVrMlFpeFJRVUZLTEVWQlFXTTdRVUZEV2l4bFFVRkxiMk1zY1VKQlFVd3NRMEZCTWtKd1l5eFJRVUV6UWl4RlFVRnhRemRDTEVOQlFYSkRPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWlVGQlMydGxMRzlEUVVGTUxFTkJRVEJEYkdVc1EwRkJNVU03UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEN0Q1FVRnpRalpDTEZGQlFYUkNMRVZCUVdkRE4wSXNRMEZCYUVNc1JVRkJiVU03UVVGRGFrTXNWVUZCVFcxbExFdEJRVXNzUjBGQlJ6TmxMREpDUVVGQkxFTkJRMW9zUzBGQlMydGxMRk5CUVV3c1EwRkJaVGRpTEZGQlFWRXNRMEZCUXl4RFFVRkVMRU5CUVhaQ0xFTkJSRmtzUlVGRldpeExRVUZMTm1Jc1UwRkJUQ3hEUVVGbE4ySXNVVUZCVVN4RFFVRkRMRU5CUVVRc1EwRkJka0lzUTBGR1dTeEZRVWRhTjBJc1EwRklXU3hEUVVGa08wRkJUVUVzVlVGQlRYRmxMRXRCUVVzc1IwRkJSemRsTERKQ1FVRkJMRU5CUTFvc1MwRkJTMnRsTEZOQlFVd3NRMEZCWlRkaUxGRkJRVkVzUTBGQlF5eERRVUZFTEVOQlFYWkNMRU5CUkZrc1JVRkZXaXhMUVVGTE5tSXNVMEZCVEN4RFFVRmxOMklzVVVGQlVTeERRVUZETEVOQlFVUXNRMEZCZGtJc1EwRkdXU3hGUVVkYU4wSXNRMEZJV1N4RFFVRmtPMEZCVFVFc1ZVRkJUWE5sTEV0QlFVc3NSMEZCUnpsbExESkNRVUZCTEVOQlExb3NTMEZCUzJ0bExGTkJRVXdzUTBGQlpUZGlMRkZCUVZFc1EwRkJReXhEUVVGRUxFTkJRWFpDTEVOQlJGa3NSVUZGV2l4TFFVRkxObUlzVTBGQlRDeERRVUZsTjJJc1VVRkJVU3hEUVVGRExFTkJRVVFzUTBGQmRrSXNRMEZHV1N4RlFVZGFOMElzUTBGSVdTeERRVUZrTzBGQlRVRXNWVUZCVFhWbExGTkJRVk1zUjBGQlIwb3NTMEZCU3l4SFFVRkhSU3hMUVVGU0xFZEJRV2RDUXl4TFFVRnNRenRCUVVWQkxGVkJRVTFGTEU5QlFVOHNSMEZCUjB3c1MwRkJTeXhIUVVGSFNTeFRRVUY0UWp0QlFVTkJMRlZCUVUxRkxFOUJRVThzUjBGQlIwb3NTMEZCU3l4SFFVRkhSU3hUUVVGNFFqdEJRVU5CTEZWQlFVMUhMRTlCUVU4c1IwRkJSMG9zUzBGQlN5eEhRVUZIUXl4VFFVRjRRanRCUVVWQkxGVkJRVTE2UWl4VlFVRlZMRWRCUVVjc1MwRkJTMlFzVjBGQlRDeERRVUZwUW01aExGRkJRVkVzUTBGQlF5eERRVUZFTEVOQlFYcENMRU5CUVc1Q08wRkJRMEVzVlVGQlRXdGlMRlZCUVZVc1IwRkJSeXhMUVVGTFppeFhRVUZNTEVOQlFXbENibUVzVVVGQlVTeERRVUZETEVOQlFVUXNRMEZCZWtJc1EwRkJia0k3UVVGRFFTeFZRVUZOT0dNc1ZVRkJWU3hIUVVGSExFdEJRVXN6UXl4WFFVRk1MRU5CUVdsQ2JtRXNVVUZCVVN4RFFVRkRMRU5CUVVRc1EwRkJla0lzUTBGQmJrSTdPMEZCUlVFc1ZVRkJUWEZpTEUxQlFVMHNSMEZCUnl4TFFVRkxhRVVzVDBGQlRDeERRVUZoZGtZc1IwRkJZaXhEUVVGcFFtMUtMRlZCUVZVc1EwRkJRM0JtTEVsQlFUVkNMRU5CUVdZN08wRkJRMEVzVlVGQlRYbG1MRTFCUVUwc1IwRkJSeXhMUVVGTGFrVXNUMEZCVEN4RFFVRmhka1lzUjBGQllpeERRVUZwUW05S0xGVkJRVlVzUTBGQlEzSm1MRWxCUVRWQ0xFTkJRV1k3TzBGQlEwRXNWVUZCVFd0b1FpeE5RVUZOTEVkQlFVY3NTMEZCU3pGR0xFOUJRVXdzUTBGQllYWkdMRWRCUVdJc1EwRkJhVUpuVEN4VlFVRlZMRU5CUVVOcWFFSXNTVUZCTlVJc1EwRkJaanM3UVVGRlFYZG1MRTFCUVVGQkxFMUJRVTBzUTBGQlEzaEZMRk5CUVZBc1EwRkJhVUk0Uml4UFFVRnFRanRCUVVOQmNrSXNUVUZCUVVFc1RVRkJUU3hEUVVGRGVrVXNVMEZCVUN4RFFVRnBRaXRHTEU5QlFXcENPMEZCUTBGSExFMUJRVUZCTEUxQlFVMHNRMEZCUTJ4SExGTkJRVkFzUTBGQmFVSm5SeXhQUVVGcVFqczdRVUZGUVN4WFFVRkxSeXhyUWtGQlRDeERRVU5GTEVOQlFVTXpRaXhOUVVGRUxFVkJRVk5ETEUxQlFWUXNSVUZCYVVKNVFpeE5RVUZxUWl4RFFVUkdMRVZCUlVVc1EwRkJRemxDTEZWQlFWVXNRMEZCUTJJc1ZVRkJXaXhGUVVGM1FtTXNWVUZCVlN4RFFVRkRaQ3hWUVVGdVF5eEZRVUVyUXpCRExGVkJRVlVzUTBGQlF6RkRMRlZCUVRGRUxFTkJSa1k3UVVGSlJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxEaERRVUZ4UTJwakxFTkJRWEpETEVWQlFYZERPMEZCUVVFN08wRkJRM1JETEZWQlFVazRaU3hyUWtGQmEwSXNSMEZCUnl4SlFVRjZRanRCUVVOQkxGVkJRVWxETEdGQlFXRXNSMEZCUnpOblFpeE5RVUZOTEVOQlFVTnRReXhwUWtGQk0wSTdRVUZEUVN4VlFVRkplV1VzWlVGQlpTeEhRVUZITEVOQlFVTXNRMEZCZGtJN08wRkJSVUVzVjBGQlMzSkNMRlZCUVV3c1EwRkJaMEoyYUVJc1QwRkJhRUlzUTBGQmQwSXNWVUZCUTNsR0xGRkJRVVFzUlVGQlYyaEdMRXRCUVZnc1JVRkJjVUk3UVVGRE0wTXNXVUZCVFc5cFFpeE5RVUZOTEVkQlFVZDZaaXhwUTBGQlFTeERRVU5pTEUxQlFVa3NRMEZCUTJ0bExGTkJRVXdzUTBGQlpUZGlMRkZCUVZFc1EwRkJReXhEUVVGRUxFTkJRWFpDTEVOQlJHRXNSVUZGWWl4TlFVRkpMRU5CUVVNMllpeFRRVUZNTEVOQlFXVTNZaXhSUVVGUkxFTkJRVU1zUTBGQlJDeERRVUYyUWl4RFFVWmhMRVZCUjJJM1FpeERRVWhoTEVOQlFXWTdRVUZMUVN4WlFVRk5iV1lzVFVGQlRTeEhRVUZITTJZc2FVTkJRVUVzUTBGRFlpeE5RVUZKTEVOQlFVTnJaU3hUUVVGTUxFTkJRV1UzWWl4UlFVRlJMRU5CUVVNc1EwRkJSQ3hEUVVGMlFpeERRVVJoTEVWQlJXSXNUVUZCU1N4RFFVRkRObUlzVTBGQlRDeERRVUZsTjJJc1VVRkJVU3hEUVVGRExFTkJRVVFzUTBGQmRrSXNRMEZHWVN4RlFVZGlOMElzUTBGSVlTeERRVUZtTzBGQlMwRXNXVUZCVFc5bUxFMUJRVTBzUjBGQlJ6Vm1MR2xEUVVGQkxFTkJRMklzVFVGQlNTeERRVUZEYTJVc1UwRkJUQ3hEUVVGbE4ySXNVVUZCVVN4RFFVRkRMRU5CUVVRc1EwRkJka0lzUTBGRVlTeEZRVVZpTEUxQlFVa3NRMEZCUXpaaUxGTkJRVXdzUTBGQlpUZGlMRkZCUVZFc1EwRkJReXhEUVVGRUxFTkJRWFpDTEVOQlJtRXNSVUZIWWpkQ0xFTkJTR0VzUTBGQlpqdEJRVTFCTEZsQlFVMXhaaXhMUVVGTExFZEJRVWMzWml3NFFrRkJRU3hEUVVFd1FubG1MRTFCUVRGQ0xFVkJRV3REYW1Zc1EwRkJiRU1zUTBGQlpEdEJRVU5CTEZsQlFVMXpaaXhMUVVGTExFZEJRVWM1Wml3NFFrRkJRU3hEUVVFd1FqSm1MRTFCUVRGQ0xFVkJRV3REYm1Zc1EwRkJiRU1zUTBGQlpEdEJRVU5CTEZsQlFVMTFaaXhMUVVGTExFZEJRVWN2Wml3NFFrRkJRU3hEUVVFd1FqUm1MRTFCUVRGQ0xFVkJRV3REY0dZc1EwRkJiRU1zUTBGQlpEdEJRVVZCTEZsQlFVbDNaaXhwUWtGQmFVSXNSMEZCUjBvc1RVRkJlRUk3UVVGRFFTeFpRVUZKU3l4WlFVRlpMRWRCUVVkR0xFdEJRVzVDT3p0QlFVVkJMRmxCUVVsR0xFdEJRVXNzUjBGQlIwa3NXVUZCV2l4RlFVRXdRanRCUVVONFFrUXNWVUZCUVVFc2FVSkJRV2xDTEVkQlFVZFFMRTFCUVhCQ08wRkJRMEZSTEZWQlFVRkJMRmxCUVZrc1IwRkJSMG9zUzBGQlpqdEJRVU5FT3p0QlFVTkVMRmxCUVVsRExFdEJRVXNzUjBGQlIwY3NXVUZCV2l4RlFVRXdRanRCUVVONFFrUXNWVUZCUVVFc2FVSkJRV2xDTEVkQlFVZE1MRTFCUVhCQ08wRkJRMEZOTEZWQlFVRkJMRmxCUVZrc1IwRkJSMGdzUzBGQlpqdEJRVU5FT3p0QlFVVkVMRmxCUVVsSExGbEJRVmtzUjBGQlIxWXNZVUZCYmtJc1JVRkJhME03UVVGRGFFTkJMRlZCUVVGQkxHRkJRV0VzUjBGQlIxVXNXVUZCYUVJN1FVRkRRVmdzVlVGQlFVRXNhMEpCUVd0Q0xFZEJRVWNzSzBKQlFVbFZMR2xDUVVGUUxFTkJRV3hDTzBGQlEwRlNMRlZCUVVGQkxHVkJRV1VzUjBGQlIyNXBRaXhMUVVGc1FqdEJRVU5FTzBGQlEwWXNUMEYwUTBRN08wRkJkME5CTEZkQlFVdHZhRUlzY1VKQlFVd3NRMEZEUlN4TFFVRkxUaXhWUVVGTUxFTkJRV2RDY1VJc1pVRkJhRUlzUTBGRVJpeEZRVVZGUml4clFrRkdSanRCUVVsRU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2VVTkJRV2RET1dVc1EwRkJhRU1zUlVGQmJVTTdRVUZEYWtNc1ZVRkJUVEJtTEZsQlFWa3NSMEZCUjJ4blFpeHBRMEZCUVN4RFFVTnVRaXhMUVVGTGEyVXNVMEZCVEN4RFFVRmxMRU5CUVVNc1EwRkJSQ3hEUVVGbUxFTkJSRzFDTEVWQlJXNUNMRXRCUVV0QkxGTkJRVXdzUTBGQlpTeERRVUZETEVOQlFVUXNRMEZCWml4RFFVWnRRaXhGUVVkdVFqRmtMRU5CU0cxQ0xFTkJRWEpDTzBGQlRVRXNWVUZCVFhGbUxFdEJRVXNzUjBGQlJ6ZG1MRGhDUVVGQkxFTkJRVEJDTEV0QlFVdHJaU3hUUVVGTUxFTkJRV1VzUTBGQlppeERRVUV4UWl4RlFVRTJRMmRETEZsQlFUZERMRU5CUVdRN1FVRkRRU3hWUVVGTlNpeExRVUZMTEVkQlFVYzVaaXc0UWtGQlFTeERRVUV3UWl4TFFVRkxhMlVzVTBGQlRDeERRVUZsTEVOQlFXWXNRMEZCTVVJc1JVRkJOa05uUXl4WlFVRTNReXhEUVVGa08wRkJSVUVzVlVGQlRXeENMRTlCUVU4c1IwRkJSMk1zUzBGQlN5eEpRVUZKUkN4TFFVRkxMRWRCUVVkRExFdEJRVm9zUTBGQmNrSTdRVUZEUVN4VlFVRk5ZaXhQUVVGUExFZEJRVWRaTEV0QlFVc3NTVUZCU1VFc1MwRkJTeXhIUVVGSFF5eExRVUZhTEVOQlFYSkNPMEZCUlVFc1ZVRkJUWGhETEZWQlFWVXNSMEZCUnl4TFFVRkxaQ3hYUVVGTUxFTkJRV2xDTEVOQlFXcENMRU5CUVc1Q08wRkJRMEVzVlVGQlRXVXNWVUZCVlN4SFFVRkhMRXRCUVV0bUxGZEJRVXdzUTBGQmFVSXNRMEZCYWtJc1EwRkJia0k3TzBGQlJVRXNWVUZCVFd0Q0xFMUJRVTBzUjBGQlJ5eExRVUZMYUVVc1QwRkJUQ3hEUVVGaGRrWXNSMEZCWWl4RFFVRnBRbTFLTEZWQlFWVXNRMEZCUTNCbUxFbEJRVFZDTEVOQlFXWTdPMEZCUTBFc1ZVRkJUWGxtTEUxQlFVMHNSMEZCUnl4TFFVRkxha1VzVDBGQlRDeERRVUZoZGtZc1IwRkJZaXhEUVVGcFFtOUtMRlZCUVZVc1EwRkJRM0ptTEVsQlFUVkNMRU5CUVdZN08wRkJSVUYzWml4TlFVRkJRU3hOUVVGTkxFTkJRVU40UlN4VFFVRlFMRU5CUVdsQ09FWXNUMEZCYWtJN1FVRkRRWEpDTEUxQlFVRkJMRTFCUVUwc1EwRkJRM3BGTEZOQlFWQXNRMEZCYVVJclJpeFBRVUZxUWpzN1FVRkZRU3hYUVVGTFNTeHJRa0ZCVEN4RFFVTkZMRU5CUVVNelFpeE5RVUZFTEVWQlFWTkRMRTFCUVZRc1EwRkVSaXhGUVVWRkxFTkJRVU5NTEZWQlFWVXNRMEZCUTJJc1ZVRkJXaXhGUVVGM1FtTXNWVUZCVlN4RFFVRkRaQ3hWUVVGdVF5eERRVVpHTzBGQlNVUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERSQ1FVRnRRakJFTEUxQlFXNUNMRVZCUVRKQ1F5eFpRVUV6UWl4RlFVRjVRenRCUVVGQk96dEJRVU4yUXl4VlFVRkplbWRDTEVkQlFVY3NSMEZCUnl4RFFVRldPMEZCUTBGM1owSXNUVUZCUVVFc1RVRkJUU3hEUVVGRGRtcENMRTlCUVZBc1EwRkJaU3hWUVVGRFoyTXNTMEZCUkN4RlFVRlJkbUlzUzBGQlVpeEZRVUZyUWp0QlFVTXZRaXhaUVVGSksybENMRmxCUVZrc1EwRkJReTlwUWl4TFFVRkVMRU5CUVZvc1NVRkJkVUoxWWl4TFFVRkxMRU5CUVVOeVN5eE5RVUZPTEVkQlFXVTFUeXhIUVVFeFF5eEZRVUVyUXp0QlFVTTNReXhuUWtGQlNTeERRVUZEYVdRc1pVRkJUQ3hIUVVGMVFtaEZMRXRCUVhaQ08wRkJRMEZxV2l4VlFVRkJRU3hIUVVGSExFZEJRVWRwV2l4TFFVRkxMRU5CUVVOeVN5eE5RVUZhTzBGQlEwUTdRVUZEUml4UFFVeEVPMEZCVFVRN096czdSVUZzV1hkQ2NVNDdPMEZCY1ZrelFpeDVSRUZCWldkRExGbEJRV1lzUlRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyNWFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxNVF5eGxRVUZsTEVkQlFVYzdRVUZCUTBNc1JVRkJRVUVzVVVGQlVTeEZRVUZGTEZWQlFWZzdRVUZCZFVKRExFVkJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVRnFReXhEUVVGNFFqdEJRVVZRTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFR5eEpRVUZOUXl4eFFrRkJjVUlzUjBGQlJ5eFZRVUU1UWp0QlFVVlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1UwRkJVME1zYVVKQlFWUXNRMEZCTWtKRExGTkJRVE5DTEVWQlFYTkRPMEZCUXpORExFMUJRVWw2WXl4TFFVRkxMRU5CUVVNNVJDeEpRVUZPTEVOQlFWZHBTU3hOUVVGTkxFTkJRVU56UXl4TlFVRlFMRU5CUVdNeVZpeGxRVUZrTEVOQlFWZ3NSVUZCTWtOcWFVSXNVVUZCTTBNc1EwRkJiMFJ6YVVJc1UwRkJjRVFzUTBGQlNpeEZRVUZ2UlR0QlFVTnNSU3hYUVVGUFFTeFRRVUZRTzBGQlEwUXNSMEZHUkN4TlFVVlBPMEZCUTB3c1YwRkJUMFlzY1VKQlFWQTdRVUZEUkR0QlFVTkdPMEZCUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMGxCUTAxSE96czdPenRCUVVkS08wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkZMRFJDUVVFd1FqdEJRVUZCT3p0QlFVRkJMRkZCUVdSMFV5eFBRVUZqTEhWRlFVRktMRVZCUVVrN08wRkJRVUU3TzBGQlEzaENMRGhDUVVGTlFTeFBRVUZPTzBGQlJVRXNWVUZCUzI1UkxFbEJRVXdzUjBGQldXMVJMRTlCUVU4c1EwRkJRMjVSTEVsQlFWSXNTMEZCYVVKNFFpeFRRVUZxUWl4SFFVRTJRaXhuUWtGQk4wSXNSMEZCWjBReVVpeFBRVUZQTEVOQlFVTnVVU3hKUVVGd1JUdEJRVU5CTEZWQlFVc3dhVUlzVlVGQlRDeEhRVUZyUWpOakxFdEJRVXNzUTBGQlF6bEVMRWxCUVU0c1EwRkJWMmxKTEUxQlFVMHNRMEZCUTNORExFMUJRVkFzUTBGQll6SldMR1ZCUVdRc1EwRkJXQ3hGUVVFeVEycHBRaXhSUVVFelF5eERRVU5vUW1sUkxFOUJRVThzUTBGQlEzRlRMRk5CUkZFc1NVRkhaSEpUTEU5QlFVOHNRMEZCUTNGVExGTkJTRTBzUjBGSlpFWXNjVUpCU2tvN1FVRkxRU3hWUVVGTGVFa3NVMEZCVEN4SFFVRnBRanRCUVVObWVrb3NUVUZCUVVFc1RVRkJUU3hGUVVGRk4xUXNjVUpCUVVFN1FVRkVUeXhMUVVGcVFqdEJRVWRCTEZWQlFVdHRiVUlzWVVGQlRDeEhRVUZ4UWl4TFFVRnlRanRCUVVWQkxGVkJRVXQwVXl4TlFVRk1MRWRCUVdNc1QwRkJUMFlzVDBGQlR5eERRVUZEUlN4TlFVRm1MRXRCUVRCQ0xGRkJRVEZDTEVkQlFYRkRSaXhQUVVGUExFTkJRVU5GTEUxQlFUZERMRWRCUVhORUxFTkJRWEJGTzBGQlEwRXNWVUZCUzNWS0xHVkJRVXdzUjBGQmRVSXNUVUZCUzBRc1QwRkJOVUk3UVVGbWQwSTdRVUZuUW5wQ08wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3p0VFFVTkZMR1ZCUVdkQ08wRkJRMlFzWVVGQlR5eExRVUZMSzBrc1ZVRkJXanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFOQlMwVXNaVUZCWVR0QlFVTllMR0ZCUVU4c1MwRkJTeTlKTEU5QlFWbzdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdVMEZpUlN4aFFVRlhkRW9zVFVGQldDeEZRVUZ0UWp0QlFVTnFRaXhYUVVGTGMwb3NUMEZCVEN4SFFVRmxOMWdzYjBKQlFVRXNRMEZCWjBKMVR5eE5RVUZvUWl4RlFVRjNRaXhEUVVGNFFpeEZRVUV5UWl4RFFVRXpRaXhEUVVGbU8wRkJRMFE3T3p0VFFWbEVMR1ZCUVc5Q08wRkJRMnhDTEdGQlFVOHNTMEZCUzNsS0xGTkJRVXdzUTBGQlpYcEtMRTFCUVdZc1NVRkJlVUlzUzBGQlMzbEtMRk5CUVV3c1EwRkJaWHBLTEUxQlFXWXNRMEZCYzBKb1ZDeFBRVUYwUkR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYVVKQlFWRTdRVUZEVGl4WFFVRkxkMk1zVDBGQlRDeEhRVUZsTEVsQlFXWTdRVUZEUVN4WFFVRkxPRWtzWVVGQlRDeEhRVUZ4UWl4SlFVRnlRanRCUVVWQkxHRkJRVThzUzBGQlN6ZE9MR05CUVV3c1RVRkJlVUlzUzBGQlMybElMR0ZCUVhKRE8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4clFrRkJVenRCUVVOUUxGZEJRVXRzUXl4UFFVRk1MRWRCUVdVc1MwRkJaanRCUVVOQkxGZEJRVXM0U1N4aFFVRk1MRWRCUVhGQ0xFdEJRWEpDTzBGQlJVRXNWVUZCVFVNc1kwRkJZeXhIUVVGSExFdEJRVXMzUnl4aFFVRTFRanM3UVVGRlFTeFZRVUZKTEV0QlFVdE1MR0ZCUVZRc1JVRkJkMEk3UVVGRGRFSXNaVUZCVHl4TFFVRkxMMGNzWlVGQlRDeE5RVUV3UW1sUExHTkJRV3BETzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1pVRkJUMEVzWTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEcxQ1FVRlZkbE1zVFVGQlZpeEZRVUY1UXp0QlFVRkJMRlZCUVhaQ2RsQXNUMEZCZFVJc2RVVkJRV0lzUTBGQllUdEJRVUZCTEZWQlFWWjNVQ3hSUVVGVk96dEJRVU4yUXl4VlFVRkpMRXRCUVV0NVRDeGhRVUZVTEVWQlFYZENPMEZCUTNSQ0xHRkJRVXRxUXl4VFFVRk1MRU5CUVdWNlNpeE5RVUZtTEVOQlFYTkNjbFFzVFVGQmRFSTdRVUZEUkRzN1FVRkZSSEZVTEUxQlFVRkJMRTFCUVUwc1IwRkJSM1pQTEc5Q1FVRkJMRU5CUVdkQ2RVOHNUVUZCYUVJc1EwRkJWRHRCUVVOQkxGZEJRVXQ1U2l4VFFVRk1MRU5CUVdWNlNpeE5RVUZtTEVkQlFYZENOa2tzTWtOQlFVRXNRMEZEZEVJc1NVRkVjMElzUlVGRmRFSXNVVUZHYzBJc1JVRkhkRUkzU1N4TlFVaHpRaXhGUVVsMFFqdEJRVU5GZGxBc1VVRkJRVUVzVDBGQlR5eEZRVUZRUVN4UFFVUkdPMEZCUlVWM1VDeFJRVUZCUVN4UlFVRlJMRVZCUVVWQkxGRkJRVkVzUzBGQlN6bFNMRk5CUVdJc1IwRkJlVUk0VWl4UlFVRjZRaXhIUVVGdlF5eExRVUZMYzB3N1FVRkdja1FzVDBGS2MwSXNRMEZCZUVJN1FVRlZRU3hoUVVGUExFdEJRVXM1UWl4VFFVRk1MRU5CUVdWNlNpeE5RVUYwUWp0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxIVkNRVUZqTzBGQlExb3NWMEZCUzNOVExHRkJRVXdzUjBGQmNVSXNTVUZCY2tJN1FVRkZRU3hoUVVGUExFdEJRVXMxUnl4aFFVRmFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzZDBKQlFXVTdRVUZEWWl4WFFVRkxORWNzWVVGQlRDeEhRVUZ4UWl4TFFVRnlRanRCUVVWQkxHRkJRVThzUzBGQlN6VkhMR0ZCUVZvN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTdzRRa0ZCY1VJMVdpeE5RVUZ5UWl4RlFVRTJRanRCUVVNelFpeFhRVUZMZVZnc1pVRkJUQ3hIUVVGMVFpeExRVUZMUkN4UFFVRk1MRWRCUVdWNFdDeE5RVUYwUXpzN1FVRkZRU3hWUVVGSkxFdEJRVXQxV2l4aFFVRlVMRVZCUVhkQ08wRkJRM1JDTEdGQlFVdEJMR0ZCUVV3c1EwRkJiVUowUWl4dlFrRkJia0lzUTBGQmQwTXNTMEZCUzFJc1pVRkJOME03UVVGRFJEdEJRVU5HTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3huUTBGQmRVSnlTeXhoUVVGMlFpeEZRVUZ6UXp0QlFVTndReXhWUVVGTmJVd3NTMEZCU3l4SFFVRkhMRXRCUVV0M1F5eFJRVUZNTEVOQlFXTXpUaXhoUVVGa0xFTkJRV1E3TzBGQlJVRXNWVUZCU1cxTUxFdEJRVXNzUzBGQlMyeGpMRk5CUVdRc1JVRkJlVUk3UVVGRGRrSXNZMEZCVFN4SlFVRkpNMElzUzBGQlNpd3JRMEZEYlVNd1V5eGhRVVJ1UXl4MVFrRkROa1FzUzBGQlMzWlFMRWxCUkd4RkxESkRRVUZPTzBGQlIwUTdPMEZCUlVRc1ZVRkJTVEJoTEV0QlFVc3NXVUZCV1dkRUxIZENRVUZ5UWl4RlFVRjVRenRCUVVOMlF5eGxRVUZQYUVRc1MwRkJTeXhEUVVGRGJVa3NZVUZCVGl4RlFVRlFPMEZCUTBRN08wRkJSVVFzV1VGQlRTeEpRVUZKYUcxQ0xFdEJRVW9zSzBOQlEyMURNRk1zWVVGRWJrTXNkVUpCUXpaRUxFdEJRVXQyVUN4SlFVUnNSU3d5UkVGQlRqdEJRVWRFTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3hwUTBGRFJYVlFMR0ZCUkVZc1JVRkZSWFZVTEZOQlJrWXNSVUZIUlhwVExFMUJTRVlzUlVGTlJUdEJRVUZCTEZWQlJrRjJVQ3hQUVVWQkxIVkZRVVpWTEVOQlJWWTdRVUZCUVN4VlFVUkJkMUFzVVVGRFFUdEJRVU5CTEZWQlFVMXZTeXhMUVVGTExFZEJRVWNzUzBGQlMzZERMRkZCUVV3c1EwRkJZek5PTEdGQlFXUXNRMEZCWkRzN1FVRkZRU3hWUVVGSmJVd3NTMEZCU3l4TFFVRkxiR01zVTBGQlpDeEZRVUY1UWp0QlFVTjJRaXhqUVVGTkxFbEJRVWt6UWl4TFFVRktMR2RFUVVOdlF6QlRMR0ZCUkhCRExIVkNRVU00UkN4TFFVRkxkbEFzU1VGRWJrVXNNa05CUVU0N1FVRkhSRHM3UVVGRlJDeFZRVUZKTUdFc1MwRkJTeXhaUVVGWlowUXNkMEpCUVhKQ0xFVkJRWGxETzBGQlEzWkRMR1ZCUVU5b1JDeExRVUZMTEVOQlFVTnhTU3hqUVVGT0xFTkJRWEZDUkN4VFFVRnlRaXhGUVVGblEzcFRMRTFCUVdoRExFVkJRWGREZGxBc1QwRkJlRU1zUlVGQmFVUjNVQ3hSUVVGcVJDeERRVUZRTzBGQlEwUTdPMEZCUlVRc1dVRkJUU3hKUVVGSmVsUXNTMEZCU2l4blJFRkRiME13VXl4aFFVUndReXgxUWtGRE9FUXNTMEZCUzNaUUxFbEJSRzVGTERKRVFVRk9PMEZCUjBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4cFEwRkJkMEoxVUN4aFFVRjRRaXhGUVVGMVEzVlVMRk5CUVhaRExFVkJRV3RFTzBGQlEyaEVMRlZCUVUxd1NTeExRVUZMTEVkQlFVY3NTMEZCUzNkRExGRkJRVXdzUTBGQll6Tk9MR0ZCUVdRc1EwRkJaRHM3UVVGRlFTeFZRVUZKYlV3c1MwRkJTeXhMUVVGTGJHTXNVMEZCWkN4RlFVRjVRanRCUVVOMlFpeGpRVUZOTEVsQlFVa3pRaXhMUVVGS0xHZEVRVU52UXpCVExHRkJSSEJETEhWQ1FVTTRSQ3hMUVVGTGRsQXNTVUZFYmtVc01rTkJRVTQ3UVVGSFJEczdRVUZGUkN4VlFVRkpNR0VzUzBGQlN5eFpRVUZaWjBRc2QwSkJRWEpDTEVWQlFYbERPMEZCUTNaRExHVkJRVTlvUkN4TFFVRkxMRU5CUVVOelNTeGpRVUZPTEVOQlFYRkNSaXhUUVVGeVFpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1dVRkJUU3hKUVVGSmFtMUNMRXRCUVVvc1owUkJRMjlETUZNc1lVRkVjRU1zZFVKQlF6aEVMRXRCUVV0MlVDeEpRVVJ1UlN3eVJFRkJUanRCUVVkRU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdkQ1FVRlBkVUlzVTBGQlVDeEZRVUZyUWp0QlFVTm9RaXcyUjBGQllVRXNVMEZCWWpzN1FVRkZRU3hWUVVGSkxFTkJRVU1zUzBGQlMzTlpMRTlCUVU0c1NVRkJhVUlzUTBGQlF5eExRVUZMT0Vrc1lVRkJNMElzUlVGQk1FTTdRVUZEZUVNc1lVRkJTemRKTEZOQlFVd3NRMEZCWlhwS0xFMUJRV1lzUTBGQmMwSTVSQ3hQUVVGMFFpeERRVUU0UW1oTUxGTkJRVGxDTzBGQlEwUTdRVUZEUmp0QlFVVkVPMEZCUTBZN1FVRkRRVHM3T3p0WFFVTkZMRzFDUVVGVk8wRkJRMUk3TzBGQlJVRXNWMEZCUzJ0akxHRkJRVXc3TzBGQlJVRXNWMEZCU3pORUxGTkJRVXdzUTBGQlpYcEtMRTFCUVdZc1EwRkJjMEp5VkN4TlFVRjBRanM3UVVGRFFTeGhRVUZQTEV0QlFVczRZeXhUUVVGYU8wRkJRMFE3T3pzN1JVRjZVakJDY1VJc2RVTkJRVUVzUTBGRE0wSmxMRzFEUVVGQkxFVkJSREpDT3p0QlFUUlNOMElzT0VSQlFXVjFSeXhqUVVGbUxFVTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6VlZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBsQlEwMVJPenM3T3p0QlFVTktPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFJTeDVRa0ZCTUVJN1FVRkJRVHM3UVVGQlFTeFJRVUZrT1ZNc1QwRkJZeXgxUlVGQlNpeEZRVUZKT3p0QlFVRkJPenRCUVVONFFpdzRRa0ZCVFVFc1QwRkJUanRCUVVWQkxGVkJRVXNyVXl4VlFVRk1MRWRCUVd0Q0wxTXNUMEZCVHl4RFFVRkRaMVFzVTBGQlVpeExRVUZ6UWpOclFpeFRRVUYwUWl4SFFVRnJRekpTTEU5QlFVOHNRMEZCUTJkVUxGTkJRVEZETEVkQlFYTkVMRU5CUVhoRk8wRkJRMEVzVlVGQlMzSktMRk5CUVV3c1EwRkJaWEZLTEZOQlFXWXNSMEZCTWtJemJVSXNjVUpCUVVFc1JVRkJNMEk3UVVGRFFTeFZRVUZMTkcxQ0xGVkJRVXdzUjBGRFJXcFVMRTlCUVU4c1EwRkJRMmRPTEZOQlFWSXNTMEZCYzBJelpTeFRRVUYwUWl4SFFVRnJRekpTTEU5QlFVOHNRMEZCUTJkT0xGTkJRVEZETEVkQlFYTkVReXhSUVVSNFJEdEJRVVZCTEZWQlFVdHpSaXhWUVVGTUxFZEJRV3RDU0N4cFFrRkJhVUlzUTBGQlEzQlRMRTlCUVU4c1EwRkJRM0ZUTEZOQlFWUXNRMEZCYmtNN1FVRlFkMEk3UVVGUmVrSTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenRUUVVORkxHVkJRWEZDTzBGQlEyNUNMR0ZCUVU4c1EwRkJVRHRCUVVORU8xTkJSVVFzWVVGQmJVSmhMRWxCUVc1Q0xFVkJRWGxDTEVOQlEzaENPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRUUVVORkxHVkJRV2RDTzBGQlEyUXNZVUZCVHl4TFFVRkxTQ3hWUVVGYU8wRkJRMFE3VTBGRlJDeGhRVUZqUXl4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEZkQlFVdEVMRlZCUVV3c1IwRkJhMEpETEZOQlFXeENPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VTBGRFJTeGxRVUYxUWp0QlFVTnlRaXhoUVVGUExFdEJRVXR5U2l4VFFVRk1MRU5CUVdWeFNpeFRRVUZtTEVOQlFYbENPV3hDTEU5QlFXaERPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSE5DUVVGaE9HeENMRk5CUVdJc1JVRkJLME03UVVGQlFTeFZRVUYyUW5KcFFpeFBRVUYxUWl4MVJVRkJZaXhEUVVGaE8wRkJRVUVzVlVGQlZuZFFMRkZCUVZVN08wRkJRemRETEZkQlFVdDNTaXhUUVVGTUxFTkJRV1Z4U2l4VFFVRm1MRU5CUVhsQ2JtMUNMRTFCUVhwQ096dEJRVVZCTEZkQlFVczRZeXhUUVVGTUxFTkJRV1Z4U2l4VFFVRm1MRWRCUVRKQ2Frc3NNa05CUVVFc1EwRkRla0lzU1VGRWVVSXNSVUZGZWtJc1YwRkdlVUlzUlVGSGVrSnBTeXhUUVVoNVFpeEZRVWw2UWp0QlFVRkRjbWxDTEZGQlFVRkJMRTlCUVU4c1JVRkJVRUVzVDBGQlJEdEJRVUZWZDFBc1VVRkJRVUVzVVVGQlVTeEZRVUZTUVR0QlFVRldMRTlCU25sQ0xFTkJRVE5DTzBGQlQwRXNZVUZCVHl4TFFVRkxkMG9zVTBGQlRDeERRVUZsY1Vvc1UwRkJkRUk3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdVMEZEUlN4bFFVRm5RanRCUVVOa0xHRkJRVThzUzBGQlMwTXNWVUZCV2p0QlFVTkVPMU5CUlVRc1lVRkJZMnBITEZOQlFXUXNSVUZCZVVJN1FVRkRka0lzVjBGQlMybEhMRlZCUVV3c1IwRkJhMEpxUnl4VFFVRnNRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFOQlEwVXNaVUZCWjBJN1FVRkRaQ3hoUVVGUExFdEJRVXQxUml4VlFVRmFPMEZCUTBRN096czdSVUY0UjNWQ2FFbzdPMEZCTWtjeFFpeDNSRUZCWlhWS0xGZEJRV1lzUlRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzaElRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdTVUZEVFVzN096czdPMEZCUTBvN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUlN4clEwRkJNRU03UVVGQlFUczdRVUZCUVN4UlFVRTVRbTVVTEU5QlFUaENMSFZGUVVGd1FpeEZRVUZ2UWp0QlFVRkJMRkZCUVdoQ2IxUXNVMEZCWjBJc2RVVkJRVW9zUlVGQlNUczdRVUZCUVRzN1FVRkRlRU1zT0VKQlFVMXdWQ3hQUVVGT08wRkJSVUVzVlVGQlMzRlVMR0ZCUVV3c1IwRkJjVUp5VkN4UFFVRlBMRU5CUVVOelZDeFpRVUZTTEVkQlFYVkNkRlFzVDBGQlR5eERRVUZEYzFRc1dVRkJMMElzUjBGQk9FTXNRMEZCYmtVN1FVRkZRVVlzU1VGQlFVRXNVMEZCVXl4RFFVRkROMnRDTEU5QlFWWXNRMEZCYTBJc1ZVRkJRV2RqTEV0QlFVc3NSVUZCU1R0QlFVTjZRaXhaUVVGTEswSXNVVUZCVEN4RFFVRmpMMElzUzBGQlpEdEJRVU5FTEV0QlJrUTdRVUZNZDBNN1FVRlJla003UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3p0VFFVTkZMR1ZCUVcxQ08wRkJRMnBDTEdGQlFVOHNTMEZCU3poSkxHRkJRVm83UVVGRFJEdFRRVVZFTEdGQlFXbENReXhaUVVGcVFpeEZRVUVyUWp0QlFVTTNRaXhYUVVGTFJDeGhRVUZNTEVkQlFYRkNReXhaUVVGeVFqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSFZDUVVGak8wRkJRVUU3TzBGQlExb3NWVUZCVFhwTUxGTkJRVk1zUjBGQlJ6RlpMSGxDUVVGQkxFTkJRWEZDTEV0QlFVdHJhMElzWVVGQlRDeEhRVUZ4UWl4RFFVRXhReXhGUVVFMlF5eExRVUZMUVN4aFFVRk1MRWRCUVhGQ0xFTkJRV3hGTEVOQlFXeENPenRCUVVOQkxGVkJRVTE2YVVJc1VVRkJVU3hIUVVGSExGTkJRVmhCTEZGQlFWY3NSMEZCVFR0QlFVTnlRaXhqUVVGSkxFTkJRVU0wYVVJc2JVSkJRVXdzUTBGQmVVSXNUVUZCU1N4RFFVRkRNMG9zWTBGQlRDeERRVUZ2UWk5WkxFOUJRVGRETzBGQlEwUXNUMEZHUkRzN1FVRkhRU3hYUVVGTE5sa3NVMEZCVEN4RFFVRmxPRW9zUzBGQlppeEhRVUYxUW5SclFpeGxRVUZCTEVOQlFWY3dXU3hUUVVGWUxFVkJRWE5DTzBGQlFVTnFXQ3hSUVVGQlFTeFJRVUZSTEVWQlFWSkJPMEZCUVVRc1QwRkJkRUlzUTBGQmRrSTdRVUZEUkRzN08xZEJSVVFzT0VKQlFYRkNiMElzVFVGQmNrSXNSVUZCTmtJN1FVRkRNMElzTmtsQlFUSkNRU3hOUVVFelFqczdRVUZGUVN4VlFVRkpMRXRCUVV0MVdpeGhRVUZVTEVWQlFYZENPMEZCUTNSQ0xHRkJRVXRCTEdGQlFVd3NRMEZCYlVKMFFpeHZRa0ZCYmtJc1EwRkJkME1zUzBGQlMxSXNaVUZCTjBNN1FVRkRSRHRCUVVOR08wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNOa0pCUVc5Q00xa3NUMEZCY0VJc1JVRkJOa0k3UVVGRE0wSXNWMEZCU3pScFFpeFhRVUZNT3p0QlFVVkJMRlZCUVUwMVFpeE5RVUZOTEVkQlFVY3NTMEZCUzFrc1lVRkJUQ3hGUVVGbU96dEJRVU5CTEZWQlFVa3NTMEZCUzI1SUxHRkJRVlFzUlVGQmQwSTdRVUZEZEVKMVJ5eFJRVUZCUVN4TlFVRk5MRU5CUVVOMFpDeE5RVUZRTEVOQlFXTnpaQ3hOUVVGTkxFTkJRVU55WkN4UFFVRlFMRU5CUVdVc1MwRkJTemhYTEdGQlFVd3NRMEZCYlVJeFlpeEpRVUZzUXl4RFFVRmtMRVZCUVhWRUxFTkJRWFpFTzBGQlEwUTdPMEZCUTBRc1ZVRkJUVGhxUWl4WFFVRlhMRWRCUVVrM1FpeE5RVUZOTEVOQlFVTXphVUlzZFVKQlFVRXNRMEZCYlVJc1EwRkJia0lzUlVGQmMwSXlhVUlzVFVGQlRTeERRVUZEZEdwQ0xFMUJRVGRDTEVOQlFVUXNRMEZCTTBJN1FVRkZRU3hYUVVGTFoyRXNZVUZCVEN4RFFVRnRRbTFNTEZkQlFXNUNMRVZCUVdkRExFdEJRVXR1U1N4bFFVRnlReXhGUVVGelJDeExRVUZMUXl4VFFVRXpSQ3hGUVVGelJYQmtMRk5CUVhSRkxFVkJRV2xHZVVNc1QwRkJha1lzUlVGQk1FWjZReXhUUVVFeFJqdEJRVU5FT3pzN1YwRkZSQ3hqUVVGTGRVTXNVVUZCVEN4RlFVRmxSU3hQUVVGbUxFVkJRWGRDY2tVc1VVRkJlRUlzUlVGQmEwTTdRVUZEYUVNc1YwRkJTeXR0UWl4dFFrRkJUQ3hEUVVGNVFqRnBRaXhQUVVGNlFqdEJRVU5CTEc5SlFVRnJRa1lzVVVGQmJFSXNSVUZCTkVKRkxFOUJRVFZDTEVWQlFYRkRja1VzVVVGQmNrTTdRVUZEUkRzN08xZEJSVVFzYVVKQlFWRTdRVUZEVGl4aFFVRlBMREpJUVVGcFFpeExRVUZMYTFrc1kwRkJUQ3hGUVVGNFFqdEJRVU5FT3pzN1YwRkZSQ3huUWtGQlR5OVVMRkZCUVZBc1JVRkJhVUpGTEU5QlFXcENMRVZCUVRCQ2NrVXNVVUZCTVVJc1JVRkJiME03UVVGRGJFTXNWVUZCU1N4TFFVRkxPR1VzWVVGQlZDeEZRVUYzUWp0QlFVTjBRaXhoUVVGTEwwY3NaVUZCVEN4RFFVRnhRaXhMUVVGTEswY3NZVUZCVEN4RFFVRnRRakZpTEVsQlFYaERMRVZCUVRoRExFdEJRVXN5WWl4bFFVRnVSQ3hGUVVGdlJTeExRVUZMUXl4VFFVRjZSU3hGUVVGdlJuQmtMRk5CUVhCR0xFVkJRU3RHZVVNc1QwRkJMMFlzUlVGQmQwZDZReXhUUVVGNFJ6dEJRVU5FT3p0QlFVTkVMSE5KUVVGdlFuVkRMRkZCUVhCQ0xFVkJRVGhDUlN4UFFVRTVRaXhGUVVGMVEzSkZMRkZCUVhaRE8wRkJRMFE3T3p0WFFVVkVMR3RDUVVGVE8wRkJRMUFzWVVGQlR5dzBTRUZCYTBJc1MwRkJTMjl1UWl4bFFVRk1MRVZCUVhwQ08wRkJRMFE3T3p0WFFVVkVMR2RDUVVGUE8wRkJRMHdzWVVGQlR5d3dTRUZCWjBJc1MwRkJTMmhNTEdGQlFVd3NSVUZCZGtJN1FVRkRSRHM3TzFkQlJVUXNiVUpCUVZVN1FVRkRVanM3UVVGRFFTeFhRVUZMZVVVc1lVRkJURHRCUVVORU96czdPMFZCYWtkblEzUkRMSFZEUVVGQkxFTkJRU3RDWlN4dFEwRkJRU3hEUVVFNFFuaERMRzFDUVVFNVFpeERRVUV2UWpzN1FVRnZSMjVETEdsRlFVRmxORW9zYjBKQlFXWXNSVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnhJUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUVmNzWTBGQll5eEhRVUZITzBGQlF6VkNReXhGUVVGQlFTeE5RVUZOTEVWQlFVVnFRaXhwUWtGRWIwSTdRVUZGTlVKclFpeEZRVUZCUVN4VFFVRlRMRVZCUVVWMFJ5eHZRa0ZHYVVJN1FVRkhOVUoxUnl4RlFVRkJRU3hMUVVGTExFVkJRVVUzU0N4blFrRkljVUk3UVVGSk5VSTRTQ3hGUVVGQlFTeGxRVUZsTEVWQlFVVm1MREJDUVVwWE8wRkJTelZDWjBJc1JVRkJRVUVzVDBGQlR5eEZRVUZGZGtjc2EwSkJURzFDTzBGQlRUVkNkMGNzUlVGQlFVRXNUMEZCVHl4RlFVRkZOMFVzYTBKQlFWbEJPMEZCVGs4c1EwRkJka0k3UVVGVFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEpRVU5OTDFBN096czdPMEZCUTBvN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5GTERSQ1FVRlpNVVVzU1VGQldpeEZRVUZyUWp0QlFVRkJPenRCUVVGQk96dEJRVU5vUWl3NFFrRkJUVUVzU1VGQlRqdEJRVVZCTEZWQlFVdDFXaXhQUVVGTUxFZEJRV1VzUlVGQlpqdEJRVU5CTEZWQlFVdERMRk5CUVV3c1IwRkJhVUlzUlVGQmFrSTdRVUZEUVN4VlFVRkxOVXNzVDBGQlRDeEhRVUZsTEV0QlFXWTdRVUZNWjBJN1FVRk5ha0k3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096dFhRVU5GTEhkQ1FVRmxNV0VzUzBGQlppeEZRVUYxUXp0QlFVRkJMRlZCUVdwQ2RXeENMRkZCUVdsQ0xIVkZRVUZPTEVsQlFVMDdPMEZCUTNKRE8wRkJRMEVzVlVGQlNTeExRVUZMUml4UFFVRk1MRU5CUVdFM2JFSXNUVUZCWWl4TFFVRjNRaXhEUVVGNFFpeEpRVUUyUWl0c1FpeFJRVUZxUXl4RlFVRXlRenRCUVVONlF5eGxRVUZQYkcxQ0xGTkJRVkE3UVVGRFJEczdRVUZGUkN4VlFVRk5iVzFDTEZOQlFWTXNSMEZCUjBRc1VVRkJVU3hIUVVGSExFdEJRVXRHTEU5QlFVd3NRMEZCWVRkc1FpeE5RVUZpTEVkQlFYTkNMRU5CUVhwQ0xFZEJRVFpDTEV0QlFVczJiRUlzVDBGQlRDeERRVUZoTjJ4Q0xFMUJRWEJGTEVOQlRuRkRMRU5CVVhKRE96dEJRVU5CTEZWQlFVbFJMRXRCUVVzc1IwRkJSeXhEUVVGYUxFVkJRV1U3UVVGRFlrRXNVVUZCUVVFc1MwRkJTeXhIUVVGSGQyeENMRk5CUVZNc1IwRkJSM2hzUWl4TFFVRmFMRWRCUVc5Q0xFTkJRVFZDTzBGQlEwUTdPMEZCUlVRc1ZVRkJTVUVzUzBGQlN5eEhRVUZITEVOQlFWSXNTVUZCWVVFc1MwRkJTeXhIUVVGSGQyeENMRk5CUVhwQ0xFVkJRVzlETzBGQlEyeERMR1ZCUVU5dWJVSXNVMEZCVUR0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHVkJRVTlYTEV0QlFWQTdRVUZEUkR0QlFVTkdPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHJRMEZCZVVJN1FVRkRka0lzVlVGQlRYbHNRaXhUUVVGVExFZEJRVWNzUzBGQlMwb3NUMEZCVEN4RFFVRmhOMnhDTEUxQlFTOUNPMEZCUTBFc1ZVRkJTV3R0UWl4blFrRkJaMElzUjBGQlJ5eERRVUYyUWl4RFFVWjFRaXhEUVVsMlFqczdRVUZEUVN4WFFVRkxMRWxCUVVsb1lpeERRVUZETEVkQlFVY3JZU3hUUVVGVExFZEJRVWNzUTBGQmVrSXNSVUZCTkVJdllTeERRVUZETEVsQlFVa3NRMEZCYWtNc1JVRkJiME5CTEVOQlFVTXNSVUZCY2tNc1JVRkJlVU03UVVGRGRrTXNXVUZCVFRCT0xFdEJRVXNzUjBGQlJ5eExRVUZMYVU0c1QwRkJUQ3hEUVVGaE0yRXNRMEZCWWl4RFFVRmtPMEZCUTBFd1RpeFJRVUZCUVN4TFFVRkxMRU5CUVVNMlF5eHZRa0ZCVGl4RFFVRXlRbmxMTEdkQ1FVRXpRaXhGUVVaMVF5eERRVWwyUXpzN1FVRkRRU3haUVVGSmRFNHNTMEZCU3l4RFFVRkRhVXdzVTBGQlRpeExRVUZ2UWt3c2QwSkJRWEJDTEVsQlFXZEVOVXNzUzBGQlN5eERRVUZEZFU0c1dVRkJNVVFzUlVGQmQwVTdRVUZEZEVWRUxGVkJRVUZCTEdkQ1FVRm5RaXhKUVVGSkxFbEJRVWwwVGl4TFFVRkxMRU5CUVVOMVRpeFpRVUZPTEVOQlFXMUNiRWtzWTBGQk0wTTdRVUZEUkR0QlFVTkdPMEZCUTBZN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3MFFrRkJiVUo2VFN4UFFVRnVRaXhGUVVFMFFqdEJRVU14UWl4aFFVRlBMRWxCUVVrNFV5eHBRa0ZCU2l4RFFVRm5RamxUTEU5QlFXaENMRU5CUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3dyUWtGQmMwSkJMRTlCUVhSQ0xFVkJRU3RDTzBGQlFVRTdPMEZCUXpkQ0xHdERRVUZwUTBFc1QwRkJha01zUTBGQlR6UlZMR2xDUVVGUU8wRkJRVUVzVlVGQlQwRXNhVUpCUVZBc2MwTkJRVEpDTEVWQlFUTkNPMEZCUlVFc1ZVRkJUWEJJTEZkQlFWY3NSMEZCUnl4RlFVRndRanRCUVVOQmIwZ3NUVUZCUVVFc2FVSkJRV2xDTEVOQlFVTnliVUlzVDBGQmJFSXNRMEZCTUVJc1ZVRkJRWE50UWl4WlFVRlpMRVZCUVVrN1FVRkRlRU55U0N4UlFVRkJRU3hYUVVGWExFTkJRVU4wV2l4SlFVRmFMRU5CUTBVc1RVRkJTU3hEUVVGRE5HZENMR3RDUVVGTUxHbEZRVUUwUWtRc1dVRkJOVUk3UVVGQk1FTjRReXhWUVVGQlFTeFRRVUZUTEVWQlFVVnlVeXhQUVVGUExFTkJRVU54VXp0QlFVRTNSQ3hYUVVSR08wRkJSMFFzVDBGS1JEdEJRVTFCTEdGQlFVOHNTVUZCU1RORkxHOUNRVUZLTEVOQlFXMUNNVTRzVDBGQmJrSXNSVUZCTkVKM1RpeFhRVUUxUWl4RFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3eVFrRkJhMEo0VGl4UFFVRnNRaXhGUVVFeVFqdEJRVUZCT3p0QlFVTjZRaXhyUTBGQk5FSkJMRTlCUVRWQ0xFTkJRVThyVlN4WlFVRlFPMEZCUVVFc1ZVRkJUMEVzV1VGQlVDeHpRMEZCYzBJc1JVRkJkRUk3UVVGRlFTeFZRVUZOTVVrc1YwRkJWeXhIUVVGSE1Fa3NXVUZCV1N4RFFVRkRibWRDTEVkQlFXSXNRMEZCYVVJc1ZVRkJRVzluUWl4WFFVRlhPMEZCUVVFc1pVRkRPVU1zVFVGQlNTeERRVUZEUml4clFrRkJURHRCUVVORk5VMHNWVUZCUVVFc1kwRkJZeXhGUVVGRmJFa3NUMEZCVHl4RFFVRkRhMGs3UVVGRU1VSXNWMEZGU3poTkxGZEJSa3c3UVVGSFJUTkRMRlZCUVVGQkxGTkJRVk1zUlVGQlJYSlRMRTlCUVU4c1EwRkJRM0ZUTzBGQlNISkNMRmRCUkRoRE8wRkJRVUVzVDBGQk5VSXNRMEZCY0VJN1FVRlJRU3hoUVVGUExFbEJRVWxxUnl4blFrRkJTaXhEUVVGbGNFMHNUMEZCWml4RlFVRjNRbkZOTEZkQlFYaENMRU5CUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERaQ1FVRnZRbkpOTEU5QlFYQkNMRVZCUVRaQ08wRkJRVUU3TzBGQlF6TkNMRzFEUVVGcFEwRXNUMEZCYWtNc1EwRkJUelJWTEdsQ1FVRlFPMEZCUVVFc1ZVRkJUMEVzYVVKQlFWQXNkVU5CUVRKQ0xFVkJRVE5DTzBGQlEwRXNhME5CUVN0Q05WVXNUMEZCTDBJc1EwRkJUelpPTEdWQlFWQTdRVUZCUVN4VlFVRlBRU3hsUVVGUUxITkRRVUY1UWl4RlFVRjZRanRCUVVOQkxHdERRVUZuUXpkT0xFOUJRV2hETEVOQlFVOXBWaXhuUWtGQlVEdEJRVUZCTEZWQlFVOUJMR2RDUVVGUUxITkRRVUV3UWl4RlFVRXhRanRCUVVWQkxGVkJRVTE2U0N4WFFVRlhMRWRCUVVjc1JVRkJjRUk3UVVGRFFXOUlMRTFCUVVGQkxHbENRVUZwUWl4RFFVRkRjbTFDTEU5QlFXeENMRU5CUVRCQ0xGVkJRVUZ6YlVJc1dVRkJXU3hGUVVGSk8wRkJRM2hEY2tnc1VVRkJRVUVzVjBGQlZ5eERRVUZEZEZvc1NVRkJXaXhEUVVORkxFMUJRVWtzUTBGQlF6Um5RaXhyUWtGQlRDeHBSVUZCTkVKRUxGbEJRVFZDTzBGQlFUQkRlRU1zVlVGQlFVRXNVMEZCVXl4RlFVRkZjbE1zVDBGQlR5eERRVUZEY1ZNN1FVRkJOMFFzVjBGRVJqdEJRVWRFTEU5QlNrUTdRVUZOUVN4aFFVRlBMRWxCUVVsNlJTeHJRa0ZCU2l4RFFVTk1OVTRzVDBGRVN5eEZRVVZNZDA0c1YwRkdTeXhGUVVkTVN5eGxRVWhMTEVWQlNVeHZTQ3huUWtGS1N5eERRVUZRTzBGQlRVUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3cyUWtGQmIwSnFWaXhQUVVGd1FpeEZRVUUyUWp0QlFVRkJPenRCUVVNelFpeHRRMEZCYVVOQkxFOUJRV3BETEVOQlFVODBWU3hwUWtGQlVEdEJRVUZCTEZWQlFVOUJMR2xDUVVGUUxIVkRRVUV5UWl4RlFVRXpRanRCUVVOQkxHMURRVUVyUWpWVkxFOUJRUzlDTEVOQlFVODJUaXhsUVVGUU8wRkJRVUVzVlVGQlQwRXNaVUZCVUN4MVEwRkJlVUlzUlVGQmVrSTdRVUZEUVN4dFEwRkJaME0zVGl4UFFVRm9ReXhEUVVGUGFWWXNaMEpCUVZBN1FVRkJRU3hWUVVGUFFTeG5Ra0ZCVUN4MVEwRkJNRUlzUlVGQk1VSTdRVUZGUVN4VlFVRk5la2dzVjBGQlZ5eEhRVUZITEVWQlFYQkNPMEZCUTBGdlNDeE5RVUZCUVN4cFFrRkJhVUlzUTBGQlEzSnRRaXhQUVVGc1FpeERRVUV3UWl4VlFVRkJjMjFDTEZsQlFWa3NSVUZCU1R0QlFVTjRRM0pJTEZGQlFVRkJMRmRCUVZjc1EwRkJRM1JhTEVsQlFWb3NRMEZEUlN4TlFVRkpMRU5CUVVNMFowSXNhMEpCUVV3c2FVVkJRVFJDUkN4WlFVRTFRanRCUVVFd1EzaERMRlZCUVVGQkxGTkJRVk1zUlVGQlJYSlRMRTlCUVU4c1EwRkJRM0ZUTzBGQlFUZEVMRmRCUkVZN1FVRkhSQ3hQUVVwRU8wRkJUVUVzWVVGQlR5eEpRVUZKT1VNc2EwSkJRVW9zUTBGRFRIWlFMRTlCUkVzc1JVRkZUSGRPTEZkQlJrc3NSVUZIVEVzc1pVRklTeXhGUVVsTWIwZ3NaMEpCU2tzc1EwRkJVRHRCUVUxRU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhGRFFVRTBRbXBXTEU5QlFUVkNMRVZCUVhGRE8wRkJRVUU3TzBGQlEyNURMR3REUVVFclFrRXNUMEZCTDBJc1EwRkJUMnRXTEdWQlFWQTdRVUZCUVN4VlFVRlBRU3hsUVVGUUxITkRRVUY1UWl4RlFVRjZRanRCUVVWQkxGVkJRVTA1UWl4VFFVRlRMRWRCUVVjc1JVRkJiRUk3UVVGRFFUaENMRTFCUVVGQkxHVkJRV1VzUTBGQlF6TnRRaXhQUVVGb1FpeERRVUYzUWl4VlFVRkJNbTFDTEdWQlFXVXNSVUZCU1R0QlFVTjZRemxDTEZGQlFVRkJMRk5CUVZNc1EwRkJRMnhtTEVsQlFWWXNRMEZEUlN4TlFVRkpMRU5CUVVNMFowSXNhMEpCUVV3c2FVVkJRMHRKTEdWQlJFdzdRVUZGUlRkRExGVkJRVUZCTEZOQlFWTXNSVUZCUlhKVExFOUJRVThzUTBGQlEzRlRPMEZCUm5KQ0xGZEJSRVk3UVVGTlJDeFBRVkJFTzBGQlUwRXNZVUZCVHl4SlFVRkpZeXd3UWtGQlNpeERRVUY1UW01VUxFOUJRWHBDTEVWQlFXdERiMVFzVTBGQmJFTXNRMEZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMQ3RDUVVGelFtcFZMRk5CUVhSQ0xFVkJRV2xEUXl4aFFVRnFReXhGUVVGblJEdEJRVU01UXp0QlFVTkJMRlZCUVUxblNTeExRVUZMTEVkQlFVY3NTMEZCUzJ0T0xGTkJRVXdzUTBGQlpXNVdMRk5CUVdZc1EwRkJaRHM3UVVGRlFTeFZRVUZKYVVrc1MwRkJTeXhMUVVGTEwxa3NVMEZCWkN4RlFVRjVRanRCUVVOMlFpeGpRVUZOTEVsQlFVa3pRaXhMUVVGS0xIbERRVU0yUW5sVExGTkJSRGRDTEhkQ1FVTnZSQ3hMUVVGTGNFVXNTMEZCVEN4RFFVRlhkRU1zUlVGRUwwUXNkVU5CUVU0N1FVRkhSQ3hQUVZJMlF5eERRVlU1UXpzN08wRkJRMEVzVlVGQlRUVkpMRWxCUVVrc1IwRkJSMVlzZDBKQlFVRXNRMEZCYjBKcFVTeGhRVUZ3UWl4RlFVRnRRMmRKTEV0QlFVc3NRMEZCUTNOTUxHRkJRVTRzUlVGQmJrTXNRMEZCWWpzN1FVRkZRU3hWUVVGSk4ybENMRWxCUVVrc1MwRkJTM1ZRTEdGQlFXSXNSVUZCTkVJN1FVRkRNVUp5VHl4UlFVRkJRU3hQUVVGUExFTkJRVU5ETEVsQlFWSXNNRUpCUTI5Q2IwOHNZVUZFY0VJc2MwTkJRelpFWjBrc1MwRkJTeXhEUVVGRGRsZ3NTVUZFYmtVc05FTkJRM2xIUVN4SlFVUjZSenRCUVVkRU96dEJRVVZFTEdGQlFVOUJMRWxCUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFRRVU5GTEdWQlFXRTdRVUZEV0N4aFFVRlBMRXRCUVVzMldpeFBRVUZhTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1UwRkRSU3hsUVVGaE8wRkJRMWdzWVVGQlR5eExRVUZMTWtzc1QwRkJUQ3hEUVVGaGVtWXNSMEZCWWl4RFFVRnBRaXhWUVVGQmQxTXNTMEZCU3p0QlFVRkJMR1ZCUVVsQkxFdEJRVXNzUTBGQlEzWllMRWxCUVZZN1FVRkJRU3hQUVVGMFFpeERRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEc5Q1FVRnBSRHRCUVVGQkxGVkJRWGhEUVN4SlFVRjNReXgxUlVGQmFrTXNWVUZCYVVNN1FVRkJRU3hWUVVGeVFtMVJMRTlCUVhGQ0xIVkZRVUZZTEVWQlFWYzdRVUZCUVN4VlFVRlFhRklzUzBGQlR6dEJRVU12UXl4VlFVRk5lV3hDTEZOQlFWTXNSMEZCUnl4TFFVRkxTaXhQUVVGTUxFTkJRV0UzYkVJc1RVRkJMMEk3UVVGRFFTeFZRVUZKTW0xQ0xGVkJRVlVzUjBGQlIyNXRRaXhMUVVGcVFpeERRVVlyUXl4RFFVa3ZRenM3UVVGRFFTeFZRVUZKUVN4TFFVRkxMRXRCUVV0WUxGTkJRVllzU1VGQmRVSlhMRXRCUVVzc1MwRkJTeXhEUVVGRExFTkJRWFJETEVWQlFYbERPMEZCUTNaRGJXMUNMRkZCUVVGQkxGVkJRVlVzUjBGQlJ5eExRVUZMWkN4UFFVRk1MRU5CUVdFM2JFSXNUVUZCTVVJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRESnRRaXhSUVVGQlFTeFZRVUZWTEVkQlFVY3NTMEZCUzBNc1kwRkJUQ3hEUVVGdlFuQnRRaXhMUVVGd1FpeEZRVUV5UWl4TFFVRXpRaXhEUVVGaU96dEJRVVZCTEZsQlFVbHRiVUlzVlVGQlZTeExRVUZMT1cxQ0xGTkJRVzVDTEVWQlFUaENPMEZCUXpWQ08wRkJRMEVzWTBGQlNWY3NTMEZCU3l4SFFVRkhMRU5CUVZvc1JVRkJaVHRCUVVOaWJXMUNMRmxCUVVGQkxGVkJRVlVzUjBGQlJ5eERRVUZpTzBGQlEwUXNWMEZHUkN4RFFVZEJPMEZCU0VFc1pVRkpTenRCUVVOSVFTeFpRVUZCUVN4VlFVRlZMRWRCUVVjc1MwRkJTMlFzVDBGQlRDeERRVUZoTjJ4Q0xFMUJRVEZDTzBGQlEwUTdPMEZCUlVSMVF5eFZRVUZCUVN4UFFVRlBMRU5CUVVORExFbEJRVklzYVVKQlExZG9ReXhMUVVSWUxHdERRVU4zUXl4TFFVRkxLMHdzUzBGQlRDeERRVUZYZEVNc1JVRkVia1FzYlVWQlF6aEhNR01zVlVGRU9VYzdRVUZIUkR0QlFVTkdMRTlCZUVJNFF5eERRVEJDTDBNN096dEJRVU5CTEZWQlFVMW9WeXhUUVVGVExFZEJRVWRvVVN4M1FrRkJRU3hEUVVGdlFsVXNTVUZCY0VJc1JVRkJNRUpyU3l4TlFVRk5MRU5CUVVORExFbEJRVkFzUTBGQldTeExRVUZMYzJFc1UwRkJha0lzUTBGQk1VSXNRMEZCYkVJN08wRkJSVUVzVlVGQlNYcHJRaXhKUVVGSkxFdEJRVXR6VUN4VFFVRmlMRVZCUVhkQ08wRkJRM1JDY0U4c1VVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNMSE5DUVVOblFtNUNMRWxCUkdoQ0xHMUZRVU0yUlhOUUxGTkJSRGRGTzBGQlIwUTdPMEZCUlVRc1ZVRkJUV2xKTEV0QlFVc3NSMEZCUnl4SlFVRkphMHdzZFVKQlFVb3NhVVZCUVhWQ2RGTXNUMEZCZGtJN1FVRkJaME51VVN4UlFVRkJRU3hKUVVGSkxFVkJRVVZ6VUR0QlFVRjBReXhUUVVGa08wRkJRMEVzVjBGQlMyMVdMRk5CUVV3c1EwRkJaVzVXTEZOQlFXWXNTVUZCTkVKcFNTeExRVUUxUWpzN1FVRkZRU3hWUVVGSkswNHNWVUZCVlN4TFFVRkxWaXhUUVVGdVFpeEZRVUU0UWp0QlFVTTFRaXhoUVVGTFNpeFBRVUZNTEVOQlFXRnVaMElzU1VGQllpeERRVUZyUW10VUxFdEJRV3hDTzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1lVRkJTMmxPTEU5QlFVd3NRMEZCWVRkbUxFMUJRV0lzUTBGQmIwSXlaMElzVlVGQmNFSXNSVUZCWjBNc1EwRkJhRU1zUlVGQmJVTXZUaXhMUVVGdVF6dEJRVU5FTEU5Qk1VTTRReXhEUVRSREwwTTdPenRCUVVOQkxGVkJRVTFwVHl4VFFVRlRMRWRCUVVjN1FVRkJRM2hzUWl4UlFVRkJRU3hKUVVGSkxFVkJRVVZ6VUN4VFFVRlFPMEZCUVd0Q2JsRXNVVUZCUVVFc1MwRkJTeXhGUVVGRmJXMUNPMEZCUVhwQ0xFOUJRV3hDTzBGQlEwRXNWMEZCU3pGaExFbEJRVXdzUTBGQlZTeExRVUZMVlN4WFFVRk1MRU5CUVdsQ1VDeE5RVUZxUWl4RFFVRjNRalpGTEZGQlFXeERMRVZCUVRSRE5GWXNVMEZCTlVNN1FVRkZRU3hoUVVGUFFTeFRRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzY1VKQlFWbDRiRUlzU1VGQldpeEZRVUZyUWp0QlFVTm9RaXhWUVVGTmRWZ3NTMEZCU3l4SFFVRkhMRXRCUVV0clRpeFRRVUZNTEVOQlFXVjZhMElzU1VGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVsMVdDeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNNRU1zVVVGQlFVRXNUMEZCVHl4RFFVRkRReXhKUVVGU0xHZERRVU13UW01Q0xFbEJSREZDTEhkQ1FVTTBReXhMUVVGTGEwd3NTMEZCVEN4RFFVRlhkRU1zUlVGRWRrUTdRVUZIUVN4bFFVRlBMRXRCUVZBN1FVRkRSRHM3UVVGRlJESlBMRTFCUVVGQkxFdEJRVXNzUTBGQlEzQkxMRTlCUVU0N08wRkJSVUVzVlVGQlRXaFBMRXRCUVVzc1IwRkJSeXhMUVVGTGNXeENMRTlCUVV3c1EwRkJZVFZtTEU5QlFXSXNRMEZCY1VJeVV5eExRVUZ5UWl4RFFVRmtPenRCUVVOQkxGZEJRVXRwVGl4UFFVRk1MRU5CUVdFM1ppeE5RVUZpTEVOQlFXOUNlRVlzUzBGQmNFSXNSVUZCTWtJc1EwRkJNMEk3TzBGQlEwRXNZVUZCVHl4TFFVRkxjMnhDTEZOQlFVd3NRMEZCWlhwclFpeEpRVUZtTEVOQlFWQXNRMEZrWjBJc1EwRm5RbWhDT3p0QlFVTkJMRmRCUVVzMFN5eEpRVUZNTEVOQlFWVXNTMEZCUzFVc1YwRkJUQ3hEUVVGcFFsQXNUVUZCYWtJc1EwRkJkMEk0UlN4WFFVRnNReXhGUVVFclF6dEJRVUZETjFBc1VVRkJRVUVzU1VGQlNTeEZRVUZLUVN4SlFVRkVPMEZCUVU5aUxGRkJRVUZCTEV0QlFVc3NSVUZCVEVFN1FVRkJVQ3hQUVVFdlF6dEJRVVZCTEdGQlFVOHNTVUZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNiVUpCUVZWaExFbEJRVllzUlVGQlowSmlMRXRCUVdoQ0xFVkJRWFZDTzBGQlEzSkNPMEZCUTBFc1ZVRkJUVzlaTEV0QlFVc3NSMEZCUnl4TFFVRkxhMDRzVTBGQlRDeERRVUZsZW10Q0xFbEJRV1lzUTBGQlpEczdRVUZGUVN4VlFVRkpkVmdzUzBGQlN5eExRVUZMTDFrc1UwRkJaQ3hGUVVGNVFqdEJRVU4yUWl4alFVRk5MRWxCUVVrelFpeExRVUZLTERaQ1FVTnBRbTFFTEVsQlJHcENMSGRDUVVOdFF5eExRVUZMYTB3c1MwRkJUQ3hEUVVGWGRFTXNSVUZFT1VNc2RVTkJRVTQ3UVVGSFJDeFBRVkp2UWl4RFFWVnlRanM3TzBGQlEwRXNWVUZCVFRCakxGVkJRVlVzUjBGQlJ5eExRVUZMUXl4alFVRk1MRU5CUVc5Q2NHMUNMRXRCUVhCQ0xFVkJRVEpDTEVsQlFUTkNMRU5CUVc1Q096dEJRVU5CTEZWQlFVMTNiRUlzVTBGQlV5eEhRVUZITEV0QlFVdElMRTlCUVV3c1EwRkJZVGRzUWl4TlFVRmlMRWRCUVhOQ0xFTkJRWGhET3p0QlFVVkJMRlZCUVVreWJVSXNWVUZCVlN4TFFVRkxPVzFDTEZOQlFXNUNMRVZCUVRoQ08wRkJRelZDTEdOQlFVMHNTVUZCU1ROQ0xFdEJRVW9zTmtKQlEybENiVVFzU1VGRWFrSXNkMEpCUTIxRExFdEJRVXRyVEN4TFFVRk1MRU5CUVZkMFF5eEZRVVE1UXl4MVFrRkROa1I2U2l4TFFVUTNSQ3gzUTBGRFowZDNiRUlzVTBGRWFFY3NZVUZCVGp0QlFVZEVPenRCUVVWRUxGVkJRVTFqTEZsQlFWa3NSMEZCUnl4TFFVRkxha0lzVDBGQlRDeERRVUZoTldZc1QwRkJZaXhEUVVGeFFqSlRMRXRCUVhKQ0xFTkJRWEpDT3p0QlFVTkJMRlZCUVVsclR5eFpRVUZaTEV0QlFVdElMRlZCUVhKQ0xFVkJRV2xETzBGQlF5OUNPMEZCUTBRc1QwRjJRbTlDTEVOQmVVSnlRanM3TzBGQlEwRXNWMEZCUzJRc1QwRkJUQ3hEUVVGaE4yWXNUVUZCWWl4RFFVRnZRamhuUWl4WlFVRndRaXhGUVVGclF5eERRVUZzUXl4RlFURkNjVUlzUTBFMFFuSkNPenM3UVVGRFFTeFZRVUZKU0N4VlFVRlZMRXRCUVV0WUxGTkJRVzVDTEVWQlFUaENPMEZCUXpWQ0xHRkJRVXRJTEU5QlFVd3NRMEZCWVc1blFpeEpRVUZpTEVOQlFXdENhMVFzUzBGQmJFSTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hoUVVGTGFVNHNUMEZCVEN4RFFVRmhOMllzVFVGQllpeERRVUZ2UWpKblFpeFZRVUZ3UWl4RlFVRm5ReXhEUVVGb1F5eEZRVUZ0UXk5T0xFdEJRVzVETzBGQlEwUTdPMEZCUlVRc1lVRkJUeXRPTEZWQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhGQ1FVRlpia29zVjBGQldpeEZRVUY1UWpsTkxFOUJRWHBDTEVWQlFXdERPMEZCUTJoRE8wRkJRMEVzVlVGQlRXdEpMRXRCUVVzc1IwRkJSeXhMUVVGTGEwNHNVMEZCVEN4RFFVRmxkRWtzVjBGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVrMVJTeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMR05CUVUwc1NVRkJTVE5DTEV0QlFVb3NLMEpCUTIxQ2MyWXNWMEZFYmtJc2QwSkJRelJETEV0QlFVdHFVaXhMUVVGTUxFTkJRVmQwUXl4RlFVUjJSQ3gxUTBGQlRqdEJRVWRFTEU5QlVpdENMRU5CVldoRE96czdRVUZEUVN4VlFVRk5OVWtzU1VGQlNTeEhRVUZIVml4M1FrRkJRU3hEUVVGdlFpdFFMRTlCUVhCQ0xFVkJRVFpDYmtZc1RVRkJUU3hEUVVGRFF5eEpRVUZRTEVOQlFWa3NTMEZCUzNOaExGTkJRV3BDTEVOQlFUZENMRU5CUVdJN08wRkJSVUVzVlVGQlNYcHJRaXhKUVVGSkxFdEJRVXR4VUN4UFFVRmlMRVZCUVhOQ08wRkJRM0JDYms4c1VVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNMSE5DUVVOblFtdFBMRTlCUkdoQ0xITkVRVU50UlhKUUxFbEJSRzVGTzBGQlIwUTdPMEZCUlVRc1lVRkJUeXhMUVVGTGVXdENMRk5CUVV3c1EwRkJaWFJKTEZkQlFXWXNRMEZCVUR0QlFVTkJMRmRCUVV0elNTeFRRVUZNTEVOQlFXVjZhMElzU1VGQlppeEpRVUYxUW5WWUxFdEJRWFpDTzBGQlEwRkJMRTFCUVVGQkxFdEJRVXNzUTBGQlEzWllMRWxCUVU0c1IwRkJZVUVzU1VGQllpeERRWEpDWjBNc1EwRjFRbWhET3p0QlFVTkJMRmRCUVVzMFN5eEpRVUZNTEVOQlFWVXNTMEZCUzFVc1YwRkJUQ3hEUVVGcFFsQXNUVUZCYWtJc1EwRkJkMElyUlN4WFFVRnNReXhGUVVFclF6dEJRVU0zUTFZc1VVRkJRVUVzVDBGQlR5eEZRVUZGSzAwc1YwRkViME03UVVGRk4wTTVUU3hSUVVGQlFTeFBRVUZQTEVWQlFVVnlVRHRCUVVadlF5eFBRVUV2UXp0QlFVdEJMR0ZCUVU5QkxFbEJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2QwSkJRV1ZCTEVsQlFXWXNSVUZCY1VJN1FVRkRia0k3UVVGRFFTeFZRVUZOZFZnc1MwRkJTeXhIUVVGSExFdEJRVXRyVGl4VFFVRk1MRU5CUVdWNmEwSXNTVUZCWml4RFFVRmtPenRCUVVWQkxGVkJRVWwxV0N4TFFVRkxMRXRCUVVzdldTeFRRVUZrTEVWQlFYbENPMEZCUTNaQ0xHTkJRVTBzU1VGQlNUTkNMRXRCUVVvc2MwTkJRekJDYlVRc1NVRkVNVUlzZDBKQlF6UkRMRXRCUVV0clRDeExRVUZNTEVOQlFWZDBReXhGUVVSMlJDeDFRMEZCVGp0QlFVZEVPenRCUVVWRUxHRkJRVTh5VHl4TFFVRkxMRU5CUVVOc1NDeE5RVUZpTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2QwSkJRV1Z5VVN4SlFVRm1MRVZCUVhGQ2NWRXNUVUZCY2tJc1JVRkJOa0oyVUN4UFFVRTNRaXhGUVVGelEzZFFMRkZCUVhSRExFVkJRV2RFTzBGQlF6bERPMEZCUTBFc1ZVRkJUV2xJTEV0QlFVc3NSMEZCUnl4TFFVRkxhMDRzVTBGQlRDeERRVUZsZW10Q0xFbEJRV1lzUTBGQlpEczdRVUZGUVN4VlFVRkpkVmdzUzBGQlN5eExRVUZMTDFrc1UwRkJaQ3hGUVVGNVFqdEJRVU4yUWl4WlFVRk5UaXhEUVVGRExIZERRVUZwUXpoQ0xFbEJRV3BETEhkQ1FVRnRSQ3hMUVVGTGEwd3NTMEZCVEN4RFFVRlhkRU1zUlVGQk9VUXNjME5CUVZBN1FVRkRRU3hsUVVGUGNFMHNiMEpCUVVFc1EwRkJaMEl3UWl4RFFVRm9RaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNZVUZCVDNGYUxFdEJRVXNzUTBGQlEzbEVMRk5CUVU0c1EwRkJaMEl6U3l4TlFVRm9RaXhGUVVGM1FuWlFMRTlCUVhoQ0xFVkJRV2xEZDFBc1VVRkJha01zUTBGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeG5RMEZCZFVKb1FpeFRRVUYyUWl4RlFVRnJRME1zWVVGQmJFTXNSVUZCYVVRN1FVRkRMME1zVlVGQlRXZEpMRXRCUVVzc1IwRkJSeXhMUVVGTGEwNHNVMEZCVEN4RFFVRmxibFlzVTBGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVscFNTeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMR05CUVUwc1NVRkJTVE5DTEV0QlFVb3NNa05CUXl0Q2VWTXNVMEZFTDBJc2QwSkJRM05FTEV0QlFVdHdSU3hMUVVGTUxFTkJRVmQwUXl4RlFVUnFSU3gxUTBGQlRqdEJRVWRFT3p0QlFVVkVMR0ZCUVU4eVR5eExRVUZMTEVOQlFVTnFSQ3h6UWtGQlRpeERRVUUyUWk5RkxHRkJRVGRDTEVOQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdsRFFVTkZSQ3hUUVVSR0xFVkJSVVZETEdGQlJrWXNSVUZIUlhWVUxGTkJTRVlzUlVGSlJYcFRMRTFCU2tZc1JVRkxSWFpRTEU5QlRFWXNSVUZOUlhkUUxGRkJUa1lzUlVGUFJUdEJRVU5CTEZWQlFVMXBTQ3hMUVVGTExFZEJRVWNzUzBGQlMydE9MRk5CUVV3c1EwRkJaVzVXTEZOQlFXWXNRMEZCWkRzN1FVRkZRU3hWUVVGSmFVa3NTMEZCU3l4TFFVRkxMMWtzVTBGQlpDeEZRVUY1UWp0QlFVTjJRaXhaUVVGTlRpeERRVUZETERoRFFVRjFRMjlTTEZOQlFYWkRMSGRDUVVFNFJDeExRVUZMY0VVc1MwRkJUQ3hEUVVGWGRFTXNSVUZCZWtVc2MwTkJRVkE3UVVGRFFTeGxRVUZQY0Uwc2IwSkJRVUVzUTBGQlowSXdRaXhEUVVGb1FpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1lVRkJUM0ZhTEV0QlFVc3NRMEZCUTNwQ0xIVkNRVUZPTEVOQlEweDJSeXhoUVVSTExFVkJSVXgxVkN4VFFVWkxMRVZCUjB4NlV5eE5RVWhMTEVWQlNVeDJVQ3hQUVVwTExFVkJTMHgzVUN4UlFVeExMRU5CUVZBN1FVRlBSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3hwUTBGQmQwSm9RaXhUUVVGNFFpeEZRVUZ0UTBNc1lVRkJia01zUlVGQmEwUjFWQ3hUUVVGc1JDeEZRVUUyUkR0QlFVTXpSQ3hWUVVGTmRrd3NTMEZCU3l4SFFVRkhMRXRCUVV0clRpeFRRVUZNTEVOQlFXVnVWaXhUUVVGbUxFTkJRV1E3TzBGQlJVRXNWVUZCU1dsSkxFdEJRVXNzUzBGQlN5OVpMRk5CUVdRc1JVRkJlVUk3UVVGRGRrSXNZMEZCVFN4SlFVRkpNMElzUzBGQlNpdzBRMEZEWjBONVV5eFRRVVJvUXl4M1FrRkRkVVFzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlJHeEZMSFZEUVVGT08wRkJSMFE3TzBGQlJVUXNZVUZCVHpKUExFdEJRVXNzUTBGQlEyMVBMSFZDUVVGT0xFTkJRVGhDYmxjc1lVRkJPVUlzUlVGQk5rTjFWQ3hUUVVFM1F5eERRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxEQkNRVUZwUWpscFFpeEpRVUZxUWl4RlFVRjFRanRCUVVOeVFqdEJRVU5CTEZWQlFVMTFXQ3hMUVVGTExFZEJRVWNzUzBGQlMydE9MRk5CUVV3c1EwRkJaWHByUWl4SlFVRm1MRU5CUVdRN08wRkJSVUVzVlVGQlNYVllMRXRCUVVzc1MwRkJTeTlaTEZOQlFXUXNSVUZCZVVJN1FVRkRka0lzWTBGQlRTeEpRVUZKTTBJc1MwRkJTaXh6UkVGRE1FTnRSQ3hKUVVReFF5eDNRa0ZETkVRc1MwRkJTMnRNTEV0QlFVd3NRMEZCVjNSRExFVkJSSFpGTEhWRFFVRk9PMEZCUjBRN08wRkJSVVFzWVVGQlR6SlBMRXRCUVVzc1EwRkJRMjlQTEZkQlFVNHNSVUZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTd3lRa0ZCYTBJemJFSXNTVUZCYkVJc1JVRkJkMEk3UVVGRGRFSTdRVUZEUVN4VlFVRk5kVmdzUzBGQlN5eEhRVUZITEV0QlFVdHJUaXhUUVVGTUxFTkJRV1Y2YTBJc1NVRkJaaXhEUVVGa096dEJRVVZCTEZWQlFVbDFXQ3hMUVVGTExFdEJRVXN2V1N4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEZsQlFVMU9MRU5CUVVNc2VVUkJRV3RFT0VJc1NVRkJiRVFzZDBKQlFXOUZMRXRCUVV0clRDeExRVUZNTEVOQlFWZDBReXhGUVVFdlJTeHpRMEZCVUR0QlFVTkJMR1ZCUVU5d1RTeHZRa0ZCUVN4RFFVRm5RakJDTEVOQlFXaENMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeGhRVUZQY1Zvc1MwRkJTeXhEUVVGRGNVOHNXVUZCVGl4RlFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4dlFrRkJWelZzUWl4SlFVRllMRVZCUVdsQ08wRkJRMlk3UVVGRFFTeFZRVUZOZFZnc1MwRkJTeXhIUVVGSExFdEJRVXRyVGl4VFFVRk1MRU5CUVdWNmEwSXNTVUZCWml4RFFVRmtPenRCUVVWQkxGVkJRVWwxV0N4TFFVRkxMRXRCUVVzdldTeFRRVUZrTEVWQlFYbENPMEZCUTNaQ0xHTkJRVTBzU1VGQlNUTkNMRXRCUVVvc09FSkJRMnRDYlVRc1NVRkViRUlzZDBKQlEyOURMRXRCUVV0clRDeExRVUZNTEVOQlFWZDBReXhGUVVRdlF5eDFRMEZCVGp0QlFVZEVPenRCUVVWRUxHRkJRVTh5VHl4TFFVRkxMRU5CUVVOd1JpeExRVUZPTEVWQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhGQ1FVRlpibE1zU1VGQldpeEZRVUZyUWp0QlFVTm9RanRCUVVOQkxGVkJRVTExV0N4TFFVRkxMRWRCUVVjc1MwRkJTMnRPTEZOQlFVd3NRMEZCWlhwclFpeEpRVUZtTEVOQlFXUTdPMEZCUlVFc1ZVRkJTWFZZTEV0QlFVc3NTMEZCU3k5WkxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJc1dVRkJUVTRzUTBGQlF5eHBRMEZCTUVJNFFpeEpRVUV4UWl4M1FrRkJORU1zUzBGQlMydE1MRXRCUVV3c1EwRkJWM1JETEVWQlFYWkVMSE5EUVVGUU8wRkJRMEVzWlVGQlQzQk5MRzlDUVVGQkxFTkJRV2RDTUVJc1EwRkJhRUlzUTBGQlVEdEJRVU5FT3p0QlFVVkVMR0ZCUVU5eFdpeExRVUZMTEVOQlFVTnVSaXhOUVVGT0xFVkJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3d3UWtGQmFVSTVReXhUUVVGcVFpeEZRVUUwUWp0QlFVTXhRanRCUVVOQkxGVkJRVTFwU1N4TFFVRkxMRWRCUVVjc1MwRkJTMnRPTEZOQlFVd3NRMEZCWlc1V0xGTkJRV1lzUTBGQlpEczdRVUZGUVN4VlFVRkphVWtzUzBGQlN5eExRVUZMTDFrc1UwRkJaQ3hGUVVGNVFqdEJRVU4yUWl4alFVRk5MRWxCUVVrelFpeExRVUZLTEhORFFVTXdRbmxUTEZOQlJERkNMSGRDUVVOcFJDeExRVUZMY0VVc1MwRkJUQ3hEUVVGWGRFTXNSVUZFTlVRc2RVTkJRVTQ3UVVGSFJEczdRVUZGUkN4aFFVRlBNazhzUzBGQlN5eERRVUZET0VZc1pVRkJZanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4MVFrRkJZeTlPTEZOQlFXUXNSVUZCZVVJN1FVRkRka0k3UVVGRFFTeFZRVUZOYVVrc1MwRkJTeXhIUVVGSExFdEJRVXRyVGl4VFFVRk1MRU5CUVdWdVZpeFRRVUZtTEVOQlFXUTdPMEZCUlVFc1ZVRkJTV2xKTEV0QlFVc3NTMEZCU3k5WkxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJc1kwRkJUU3hKUVVGSk0wSXNTMEZCU2l4dFEwRkRkVUo1VXl4VFFVUjJRaXgzUWtGRE9FTXNTMEZCUzNCRkxFdEJRVXdzUTBGQlYzUkRMRVZCUkhwRUxIVkRRVUZPTzBGQlIwUTdPMEZCUlVRc1lVRkJUekpQTEV0QlFVc3NRMEZCUTNOTUxHRkJRVTRzUlVGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxEWkNRVUZ2UW5aVUxGTkJRWEJDTEVWQlFTdENPMEZCUXpkQ08wRkJRMEVzVlVGQlRXbEpMRXRCUVVzc1IwRkJSeXhMUVVGTGEwNHNVMEZCVEN4RFFVRmxibFlzVTBGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVscFNTeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMR05CUVUwc1NVRkJTVE5DTEV0QlFVb3NNRU5CUXpoQ2VWTXNVMEZFT1VJc2QwSkJRM0ZFTEV0QlFVdHdSU3hMUVVGTUxFTkJRVmQwUXl4RlFVUm9SU3gxUTBGQlRqdEJRVWRFT3p0QlFVVkVMR0ZCUVU4eVR5eExRVUZMTEVOQlFVTjFSU3huUWtGQllqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHMUNRVUZWZUUwc1UwRkJWaXhGUVVGeFFqdEJRVU51UWp0QlFVTkJMRlZCUVUxcFNTeExRVUZMTEVkQlFVY3NTMEZCUzJ0T0xGTkJRVXdzUTBGQlpXNVdMRk5CUVdZc1EwRkJaRHM3UVVGRlFTeFZRVUZKYVVrc1MwRkJTeXhMUVVGTEwxa3NVMEZCWkN4RlFVRjVRanRCUVVOMlFpeGpRVUZOTEVsQlFVa3pRaXhMUVVGS0xDdENRVU50UW5sVExGTkJSRzVDTEhkQ1FVTXdReXhMUVVGTGNFVXNTMEZCVEN4RFFVRlhkRU1zUlVGRWNrUXNkVU5CUVU0N1FVRkhSRHM3UVVGRlJDeGhRVUZQTWs4c1MwRkJTeXhEUVVGRGRVNHNXVUZCVGl4SlFVRnpRblpPTEV0QlFVc3NRMEZCUTNWT0xGbEJRVTRzUTBGQmJVSjJTQ3hOUVVGb1JEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxEQkNRVUZwUW1wUExGTkJRV3BDTEVWQlFUUkNReXhoUVVFMVFpeEZRVUV5UXp0QlFVTjZRenRCUVVOQkxGVkJRVTFuU1N4TFFVRkxMRWRCUVVjc1MwRkJTMnRPTEZOQlFVd3NRMEZCWlc1V0xGTkJRV1lzUTBGQlpEczdRVUZGUVN4VlFVRkphVWtzUzBGQlN5eExRVUZMTDFrc1UwRkJaQ3hGUVVGNVFqdEJRVU4yUWl4alFVRk5MRWxCUVVrelFpeExRVUZLTEhWRFFVTXlRbmxUTEZOQlJETkNMSGRDUVVOclJDeExRVUZMY0VVc1MwRkJUQ3hEUVVGWGRFTXNSVUZFTjBRc2RVTkJRVTQ3UVVGSFJEczdRVUZGUkN4VlFVRk5PRklzUzBGQlN5eEhRVUZIYmtRc1MwRkJTeXhEUVVGRE1rWXNVVUZCVGl4RFFVRmxNMDRzWVVGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVsdFRDeExRVUZMTEV0QlFVdHNZeXhUUVVGa0xFVkJRWGxDTzBGQlEzWkNMR05CUVUwc1NVRkJTVE5DTEV0QlFVb3NORU5CUTJkRE1GTXNZVUZFYUVNc2RVSkJRekJFUkN4VFFVUXhSQ3gzUWtGRGFVWXNTMEZCUzNCRkxFdEJRVXdzUTBGQlYzUkRMRVZCUkRWR0xESkRRVUZPTzBGQlIwUTdPMEZCUlVRc1ZVRkJUekJETEZkQlFWQXNSMEZCYzBKdlVDeExRVUYwUWl4RFFVRlBjRkFzVjBGQlVEdEJRVVZCTEdGQlFVOXdRaXhOUVVGTkxFTkJRVU5ETEVsQlFWQXNRMEZCV1RoYUxHTkJRVm9zUlVGQk5FSnVSaXhKUVVFMVFpeERRVU5NTEZWQlFVRTNVaXhSUVVGUk8wRkJRVUVzWlVGQlNXZFlMR05CUVdNc1EwRkJRMmhZTEZGQlFVUXNRMEZCWkN4TFFVRTJRak5DTEZkQlFXcERPMEZCUVVFc1QwRkVTQ3hEUVVGUU8wRkJSMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxITkNRVU5GWjBVc1UwRkVSaXhGUVVWRlF5eGhRVVpHTEVWQlMwVTdRVUZCUVN4VlFVWkJjMWNzWVVGRlFTeDFSVUZHWjBJMVFpeGpRVUZqTEVOQlFVTkRMRTFCUlM5Q08wRkJRVUVzVlVGRVFTOVVMRTlCUTBFc2RVVkJSRlVzUlVGRFZqdEJRVU5CUVN4TlFVRkJRU3hQUVVGUExFTkJRVU51VVN4SlFVRlNMRWRCUVdVc1MwRkJTemhzUWl4eFFrRkJUQ3hEUVVFeVFuaFhMRk5CUVROQ0xFVkJRWE5EUXl4aFFVRjBReXhEUVVGbUxFTkJSRUVzUTBGSFFUczdRVUZEUVN4VlFVRkpMRU5CUVVOeVJpeE5RVUZOTEVOQlFVTnpReXhOUVVGUUxFTkJRV041V0N4alFVRmtMRVZCUVRoQ0wycENMRkZCUVRsQ0xFTkJRWFZETW14Q0xHRkJRWFpETEVOQlFVd3NSVUZCTkVRN1FVRkRNVVFzWTBGQlRTeEpRVUZKYUhCQ0xFdEJRVW9zWjBOQlEyOUNNRk1zWVVGRWNFSXNkVUpCUXpoRFJDeFRRVVE1UXl4elFrRkRiVVVzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlJEbEZMQ3RDUVVGT08wRkJSMFE3TzBGQlJVUXNWVUZCVFRKUExFdEJRVXNzUjBGQlJ5eExRVUZMYTA0c1UwRkJUQ3hEUVVGbGJsWXNVMEZCWml4RFFVRmtPMEZCUTBGaExFMUJRVUZCTEU5QlFVOHNRMEZCUTNGVExGTkJRVklzUjBGQmIwSnFUQ3hMUVVGTExFTkJRVU5wVEN4VFFVRXhRanRCUVVOQmNsTXNUVUZCUVVFc1QwRkJUeXhEUVVGRGEwa3NZMEZCVWl4SFFVRjVRbVFzUzBGQlN5eERRVUZEWXl4alFVRXZRanRCUVVOQkxGVkJRVTF4UXl4TFFVRkxMRWRCUVVjc2MwSkJRV1Z0VEN4aFFVRmhMRU5CUVVNM2JFSXNTVUZCTjBJc1IwRkJjVU50VVN4UFFVRnlReXhEUVVGa08wRkJSVUVzVlVGQlRXNVJMRWxCUVVrc1IwRkJSM1ZZTEV0QlFVc3NRMEZCUTJ0R0xGRkJRVTRzUTBGQlpTOUNMRXRCUVdZc1EwRkJZaXhEUVdaQkxFTkJhVUpCT3p0QlFVTkJMRmRCUVVzNVVDeEpRVUZNTEVOQlFWVXNTMEZCUzFVc1YwRkJUQ3hEUVVGcFFsQXNUVUZCYWtJc1EwRkJkMEpuUml4WlFVRnNReXhGUVVGblJEdEJRVU01UTFRc1VVRkJRVUVzVTBGQlV5eEZRVUZVUVN4VFFVUTRRenRCUVVVNVEwTXNVVUZCUVVFc1lVRkJZU3hGUVVGRmRsQTdRVUZHSzBJc1QwRkJhRVE3UVVGTFFTeGhRVUZQUVN4SlFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNlVUpCUVdkQ2MxQXNVMEZCYUVJc1JVRkJNa0pETEdGQlFUTkNMRVZCUVRCRE8wRkJRM2hETzBGQlEwRXNWVUZCVFdkSkxFdEJRVXNzUjBGQlJ5eExRVUZMYTA0c1UwRkJUQ3hEUVVGbGJsWXNVMEZCWml4RFFVRmtPenRCUVVWQkxGVkJRVWxwU1N4TFFVRkxMRXRCUVVzdldTeFRRVUZrTEVWQlFYbENPMEZCUTNaQ0xHTkJRVTBzU1VGQlNUTkNMRXRCUVVvc09FTkJRMnREZVZNc1UwRkViRU1zZDBKQlEzbEVMRXRCUVV0d1JTeExRVUZNTEVOQlFWZDBReXhGUVVSd1JTeDFRMEZCVGp0QlFVZEVPenRCUVVWRUxGVkJRVTF2Vnl4UFFVRlBMRWRCUVVkNlNDeExRVUZMTEVOQlFVTjNUeXhYUVVGT0xFTkJRV3RDZUZjc1lVRkJiRUlzUTBGQmFFSXNRMEZXZDBNc1EwRlplRU03TzBGQlEwRXNWVUZCU1hsUUxFOUJRVThzUzBGQlN5eEpRVUZvUWl4RlFVRnpRanRCUVVOd1FpeGhRVUZMY0ZVc1NVRkJUQ3hEUVVGVkxFdEJRVXRWTEZkQlFVd3NRMEZCYVVKUUxFMUJRV3BDTEVOQlFYZENhVVlzWlVGQmJFTXNSVUZCYlVRN1FVRkRha1JXTEZWQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGRWFVUTdRVUZGYWtSRExGVkJRVUZCTEdGQlFXRXNSVUZCWWtFN1FVRkdhVVFzVTBGQmJrUTdRVUZKUkRzN1FVRkZSQ3hoUVVGUGVWQXNUMEZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSGxDUVVGblFqRlFMRk5CUVdoQ0xFVkJRVEpDTUZjc2IwSkJRVE5DTEVWQlFXbEVReXhuUWtGQmFrUXNSVUZCYlVVN1FVRkRha1VzVlVGQlRURlBMRXRCUVVzc1IwRkJSeXhMUVVGTGEwNHNVMEZCVEN4RFFVRmxibFlzVTBGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVscFNTeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMR05CUVUwc1NVRkJTVE5DTEV0QlFVb3NiVU5CUTNWQ2JYQkNMRzlDUVVSMlFpeDFRa0ZEZDBReFZ5eFRRVVI0UkN4MVFrRkRPRVVzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlJIcEdMSFZEUVVGT08wRkJSMFE3TzBGQlJVUXNWVUZCVFRWSkxFbEJRVWtzUjBGQlIzVllMRXRCUVVzc1EwRkJRekpQTEZkQlFVNHNRMEZCYTBKR0xHOUNRVUZzUWl4RlFVRjNRME1zWjBKQlFYaERMRU5CUVdJc1EwRlVhVVVzUTBGWGFrVTdPMEZCUTBFc1YwRkJTM0ppTEVsQlFVd3NRMEZCVlN4TFFVRkxWU3hYUVVGTUxFTkJRV2xDVUN4TlFVRnFRaXhEUVVGM1FtdEdMR1ZCUVd4RExFVkJRVzFFTzBGQlEycEVXQ3hSUVVGQlFTeFRRVUZUTEVWQlFWUkJMRk5CUkdsRU8wRkJSV3BFUml4UlFVRkJRU3hQUVVGUExFVkJRVVUwVnl4dlFrRkdkME03UVVGSGFrUXpWeXhSUVVGQlFTeFBRVUZQTEVWQlFVVnlVRHRCUVVoM1F5eFBRVUZ1UkR0QlFVMUJMR0ZCUVU5QkxFbEJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4MVFrRkJZM05RTEZOQlFXUXNSVUZCZVVKRExHRkJRWHBDTEVWQlFYZERlazhzVDBGQmVFTXNSVUZCYVVSM1VDeFJRVUZxUkN4RlFVRXlSRHRCUVVGQk96dEJRVU42UkN4VlFVRk5hVWdzUzBGQlN5eEhRVUZITEV0QlFVdHJUaXhUUVVGTUxFTkJRV1Z1Vml4VFFVRm1MRU5CUVdRN08wRkJSVUVzVlVGQlNXbEpMRXRCUVVzc1MwRkJTeTlaTEZOQlFXUXNSVUZCZVVJN1FVRkRka0lzV1VGQlRVNHNRMEZCUXl4dFEwRkJORUp4VWl4aFFVRTFRaXgxUWtGQmMwUkVMRk5CUVhSRUxIVkNRVUUwUlN4TFFVRkxjRVVzUzBGQlRDeERRVUZYZEVNc1JVRkJka1lzYzBOQlFWQTdRVUZEUVN4bFFVRlBjRTBzYjBKQlFVRXNRMEZCWjBJd1FpeERRVUZvUWl4RFFVRlFPMEZCUTBRc1QwRk9kMFFzUTBGUmVrUTdPenRCUVVOQkxGZEJRVXN3VFN4SlFVRk1MRU5CUVZVc1MwRkJTMVVzVjBGQlRDeERRVUZwUWxBc1RVRkJha0lzUTBGQmQwSTBUaXhoUVVGc1F5eEZRVUZwUkR0QlFVTXZRM0pLTEZGQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGRUswTTdRVUZGTDBORExGRkJRVUZCTEdGQlFXRXNSVUZCWWtFN1FVRkdLME1zVDBGQmFrUTdRVUZMUVN4aFFVRlBaMGtzUzBGQlN5eERRVUZEYjBJc1lVRkJUaXhEUVVOTWNFb3NZVUZFU3l4RlFVVk1lazhzVDBGR1N5eEZRVWRNZDFBc1VVRklTeXhGUVVsTUxGbEJRVTA3UVVGRFNqdEJRVU5CTEdOQlFVa3NRMEZCUXpGR0xFbEJRVXdzUTBGQlZTeE5RVUZKTEVOQlFVTlZMRmRCUVV3c1EwRkJhVUpRTEUxQlFXcENMRU5CUVhkQ2FVOHNZVUZCYkVNc1JVRkJhVVE3UVVGREwwTXhTaXhWUVVGQlFTeFRRVUZUTEVWQlFWUkJMRk5CUkN0RE8wRkJSUzlEUXl4VlFVRkJRU3hoUVVGaExFVkJRV0pCTzBGQlJpdERMRk5CUVdwRU8wRkJTVVFzVDBGV1NTeEZRVmRNTDFFc1UwRllTeXhGUVZsTUxGbEJRVTA3UVVGRFNqdEJRVU5CTEdOQlFVa3NRMEZCUTI5TkxFbEJRVXdzUTBGQlZTeE5RVUZKTEVOQlFVTlZMRmRCUVV3c1EwRkJhVUpRTEUxQlFXcENMRU5CUVhkQ2EwOHNhMEpCUVd4RExFVkJRWE5FTzBGQlEzQkVNMG9zVlVGQlFVRXNVMEZCVXl4RlFVRlVRU3hUUVVSdlJEdEJRVVZ3UkVNc1ZVRkJRVUVzWVVGQllTeEZRVUZpUVR0QlFVWnZSQ3hUUVVGMFJEdEJRVWxFTEU5QmJFSkpMRVZCYlVKTUxHZENRVUZ2UXp0QlFVRkJMRmxCUVd4RGRsQXNTVUZCYTBNc1VVRkJiRU5CTEVsQlFXdERPMEZCUVVFc1dVRkJOVUl3V0N4VlFVRTBRaXhSUVVFMVFrRXNWVUZCTkVJN1FVRkJRU3haUVVGb1FrTXNWVUZCWjBJc1VVRkJhRUpCTEZWQlFXZENPenRCUVVOc1F5eFpRVUZKU2l4TFFVRkxMRU5CUVVOMVJTeG5Ra0ZCVGl4TFFVRXlRblpOTEdGQlFTOUNMRVZCUVRoRE8wRkJRelZETzBGQlEwRXNaMEpCUVVrc1EwRkJRek5GTEVsQlFVd3NRMEZCVlN4TlFVRkpMRU5CUVVOVkxGZEJRVXdzUTBGQmFVSlFMRTFCUVdwQ0xFTkJRWGRDWjA0c2FVSkJRV3hETEVWQlFYRkVPMEZCUTI1RWVra3NXVUZCUVVFc1UwRkJVeXhGUVVGVVFTeFRRVVJ0UkR0QlFVVnVSRU1zV1VGQlFVRXNZVUZCWVN4RlFVRmlRU3hoUVVadFJEdEJRVWR1UkRSWExGbEJRVUZCTEcxQ1FVRnRRaXhGUVVGRmJtMUNMRWxCU0RoQ08wRkJTVzVFTUZnc1dVRkJRVUVzVlVGQlZTeEZRVUZXUVN4VlFVcHRSRHRCUVV0dVJFTXNXVUZCUVVFc1ZVRkJWU3hGUVVGV1FUdEJRVXh0UkN4WFFVRnlSRHRCUVU5RU8wRkJRMFlzVDBFNVFra3NRMEZCVUR0QlFXZERSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTERKQ1FVRnJRbkpKTEZOQlFXeENMRVZCUVRaQ1F5eGhRVUUzUWl4RlFVRTBRemhKTEdOQlFUVkRMRVZCUVRSRUwwZ3NVVUZCTlVRc1JVRkJjMFU3UVVGQlFUczdRVUZEY0VVc1ZVRkJUV2xJTEV0QlFVc3NSMEZCUnl4TFFVRkxhMDRzVTBGQlRDeERRVUZsYmxZc1UwRkJaaXhEUVVGa096dEJRVVZCTEZWQlFVbHBTU3hMUVVGTExFdEJRVXN2V1N4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEZsQlFVMU9MRU5CUVVNc2FVUkJRVEJEYjFJc1UwRkJNVU1zZFVKQlFXZEZMRXRCUVV0d1JTeExRVUZNTEVOQlFWZDBReXhGUVVFelJTeHpRMEZCVUR0QlFVTkJMR1ZCUVU5d1RTeHZRa0ZCUVN4RFFVRm5RakJDTEVOQlFXaENMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFZRVUZKY1ZJc1lVRkJZU3hMUVVGTEwxRXNVMEZCZEVJc1JVRkJhVU03UVVGREwwSXJVU3hSUVVGQlFTeGhRVUZoTEVkQlFVZG5TU3hMUVVGTExFTkJRVU4xUlN4blFrRkJkRUk3UVVGRFJEczdRVUZGUkN4VlFVRk5PVWdzVTBGQlV5eEhRVUZIZFVRc1MwRkJTeXhEUVVGRE1rWXNVVUZCVGl4RFFVRmxNMFlzUzBGQlN5eERRVUZEZFVVc1owSkJRWEpDTEVOQlFXeENPenRCUVVWQkxGVkJRVWs1U0N4VFFVRlRMRXRCUVVzc1NVRkJiRUlzUlVGQmQwSTdRVUZEZEVJc1dVRkJUVGxXTEVWQlFVTXNhVVJCUVRCRGIxSXNVMEZCTVVNc2RVSkJRV2RGTEV0QlFVdHdSU3hMUVVGTUxFTkJRVmQwUXl4RlFVRXpSU3cyUTBGQlowZ3lSeXhoUVVGb1NDeE5RVUZRT3p0QlFVTkJMR1ZCUVU4dlV5eHZRa0ZCUVN4RFFVRm5RakJDTEVWQlFXaENMRU5CUVZBN1FVRkRSQ3hQUVVoRUxFMUJSMDhzU1VGQlNTeExRVUZMYTFjc1owSkJRVXdzUTBGQmMwSTVSU3hUUVVGMFFpeEZRVUZwUTBNc1lVRkJha01zVFVGQmIwUXNUMEZCZUVRc1JVRkJhVVU3UVVGRGRFVXNXVUZCVFhKU0xFZEJRVU1zYVVSQlFUQkRiMUlzVTBGQk1VTXNkVUpCUVdkRkxFdEJRVXR3UlN4TFFVRk1MRU5CUVZkMFF5eEZRVUV6UlN4bFFVRnJSakpITEdGQlFXeEdMREpDUVVGUU96dEJRVU5CTEdWQlFVOHZVeXh2UWtGQlFTeERRVUZuUWpCQ0xFZEJRV2hDTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hWUVVGTksyTXNUVUZCVFN4SFFVRkhMRk5CUVZSQkxFMUJRVk1zVVVGQmIwTTdRVUZCUVN4WlFVRnNRMnBpTEVsQlFXdERMRk5CUVd4RFFTeEpRVUZyUXp0QlFVRkJMRmxCUVRWQ01GZ3NWVUZCTkVJc1UwRkJOVUpCTEZWQlFUUkNPMEZCUVVFc1dVRkJhRUpETEZWQlFXZENMRk5CUVdoQ1FTeFZRVUZuUWpzN1FVRkRha1FzV1VGQlNVb3NTMEZCU3l4RFFVRkRkVVVzWjBKQlFVNHNTMEZCTWtKMlRTeGhRVUV2UWl4RlFVRTRRenRCUVVNMVF6dEJRVU5CTEdkQ1FVRkpMRU5CUVVNelJTeEpRVUZNTEVOQlFWVXNUVUZCU1N4RFFVRkRWU3hYUVVGTUxFTkJRV2xDVUN4TlFVRnFRaXhEUVVGM1FtZE9MR2xDUVVGc1F5eEZRVUZ4UkR0QlFVTnVSSHBKTEZsQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGRWJVUTdRVUZGYmtSRExGbEJRVUZCTEdGQlFXRXNSVUZCWWtFc1lVRkdiVVE3UVVGSGJrUTBWeXhaUVVGQlFTeHRRa0ZCYlVJc1JVRkJSVzV0UWl4SlFVZzRRanRCUVVsdVJEQllMRmxCUVVGQkxGVkJRVlVzUlVGQlZrRXNWVUZLYlVRN1FVRkxia1JETEZsQlFVRkJMRlZCUVZVc1JVRkJWa0U3UVVGTWJVUXNWMEZCY2tRN1FVRlBSRHRCUVVOR0xFOUJXRVFzUTBGMFFtOUZMRU5CYlVOd1JUczdPMEZCUTBFc1ZVRkJTVW9zUzBGQlN5eERRVUZEZFVVc1owSkJRVTRzUzBGQk1rSXNTVUZCTDBJc1JVRkJjVU03UVVGRGJrTjJSU3hSUVVGQlFTeExRVUZMTEVOQlFVTTFReXhsUVVGT0xFTkJRMFZZTEZOQlFWTXNRMEZCUTJoVkxFbEJSRm9zUlVGRlJYRlpMR05CUmtZc1JVRkhSUzlJTEZGQlNFWXNSVUZKUlRsU0xGTkJTa1lzUlVGTFJVRXNVMEZNUml4RlFVMUZRU3hUUVU1R0xFVkJUMFY1WXl4TlFWQkdPMEZCVTBRN08wRkJSVVFzWVVGQlQycElMRk5CUVZNc1EwRkJRelpKTEVsQlFWWXNRMEZCWlRWQ0xFMUJRV1lzUlVGQmRVSXNTVUZCZGtJc1EwRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4M1FrRkJaV3BpTEVsQlFXWXNSVUZCY1VJN1FVRkRia0lzVlVGQlRYVllMRXRCUVVzc1IwRkJSeXhMUVVGTGEwNHNVMEZCVEN4RFFVRmxlbXRDTEVsQlFXWXNRMEZCWkRzN1FVRkZRU3hWUVVGSmRWZ3NTMEZCU3l4TFFVRkxMMWtzVTBGQlpDeEZRVUY1UWp0QlFVTjJRakJETEZGQlFVRkJMRTlCUVU4c1EwRkJRME1zU1VGQlVpdzBRMEZEYzBOdVFpeEpRVVIwUXl4MVFrRkRkVVFzUzBGQlMydE1MRXRCUVV3c1EwRkJWM1JETEVWQlJHeEZPMEZCUjBFc1pVRkJUeXhMUVVGUU8wRkJRMFE3TzBGQlJVUXNWVUZCVFRKVkxFMUJRVTBzUjBGQlIyaEhMRXRCUVVzc1EwRkJRM3BETEdOQlFVNHNSVUZCWml4RFFWWnRRaXhEUVZsdVFqczdRVUZEUVN4VlFVRkplVWtzVFVGQlNpeEZRVUZaTzBGQlExWXNXVUZCVFdoUExHRkJRV0VzUjBGQlIyZEpMRXRCUVVzc1EwRkJRM1ZGTEdkQ1FVRTFRanRCUVVOQkxHRkJRVXRzVWl4SlFVRk1MRU5CUVZVc1MwRkJTMVVzVjBGQlRDeERRVUZwUWxBc1RVRkJha0lzUTBGQmQwSXJTaXhqUVVGc1F5eEZRVUZyUkR0QlFVTm9SSGhHTEZWQlFVRkJMRk5CUVZNc1JVRkJSWFJRTEVsQlJIRkRPMEZCUldoRWRWQXNWVUZCUVVFc1lVRkJZU3hGUVVGaVFUdEJRVVpuUkN4VFFVRnNSRHRCUVVsRU96dEJRVVZFTEdGQlFVOW5UeXhOUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSGxDUVVGblFtcFBMRk5CUVdoQ0xFVkJRVEpDUXl4aFFVRXpRaXhGUVVFd1EzcFBMRTlCUVRGRExFVkJRVzFFZDFBc1VVRkJia1FzUlVGQk5rUTdRVUZCUVRzN1FVRkRNMFFzVlVGQlRXbElMRXRCUVVzc1IwRkJSeXhMUVVGTGEwNHNVMEZCVEN4RFFVRmxibFlzVTBGQlppeERRVUZrT3p0QlFVVkJMRlZCUVVscFNTeExRVUZMTEV0QlFVc3ZXU3hUUVVGa0xFVkJRWGxDTzBGQlEzWkNMRmxCUVUxT0xFTkJRVU1zY1VOQlFUaENjVklzWVVGQk9VSXNkVUpCUVhkRVJDeFRRVUY0UkN4MVFrRkJPRVVzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlFYcEdMSE5EUVVGUU8wRkJRMEVzWlVGQlQzQk5MRzlDUVVGQkxFTkJRV2RDTUVJc1EwRkJhRUlzUTBGQlVEdEJRVU5FTEU5QlRqQkVMRU5CVVRORU96czdRVUZEUVN4WFFVRkxNRTBzU1VGQlRDeERRVUZWTEV0QlFVdFZMRmRCUVV3c1EwRkJhVUpRTEUxQlFXcENMRU5CUVhkQ05Fb3NaVUZCYkVNc1JVRkJiVVE3UVVGRGFrUnlSaXhSUVVGQlFTeFRRVUZUTEVWQlFWUkJMRk5CUkdsRU8wRkJSV3BFUXl4UlFVRkJRU3hoUVVGaExFVkJRV0pCTzBGQlJtbEVMRTlCUVc1RU8wRkJTMEVzWVVGQlQyZEpMRXRCUVVzc1EwRkJRelZETEdWQlFVNHNRMEZEVEhCR0xHRkJSRXNzUlVGRlRIcFBMRTlCUmtzc1JVRkhUSGRRTEZGQlNFc3NSVUZKVEN4WlFVRk5PMEZCUTBvN1FVRkRRU3hqUVVGSkxFTkJRVU14Uml4SlFVRk1MRU5CUVZVc1RVRkJTU3hEUVVGRFZTeFhRVUZNTEVOQlFXbENVQ3hOUVVGcVFpeERRVUYzUW1sUExHRkJRV3hETEVWQlFXbEVPMEZCUXk5RE1Vb3NWVUZCUVVFc1UwRkJVeXhGUVVGVVFTeFRRVVFyUXp0QlFVVXZRME1zVlVGQlFVRXNZVUZCWVN4RlFVRmlRVHRCUVVZclF5eFRRVUZxUkR0QlFVbEVMRTlCVmtrc1JVRlhUQzlSTEZOQldFc3NSVUZaVEN4WlFVRk5PMEZCUTBvN1FVRkRRU3hqUVVGSkxFTkJRVU52VFN4SlFVRk1MRU5CUVZVc1RVRkJTU3hEUVVGRFZTeFhRVUZNTEVOQlFXbENVQ3hOUVVGcVFpeERRVUYzUW10UExHdENRVUZzUXl4RlFVRnpSRHRCUVVOd1JETktMRlZCUVVGQkxGTkJRVk1zUlVGQlZFRXNVMEZFYjBRN1FVRkZjRVJETEZWQlFVRkJMR0ZCUVdFc1JVRkJZa0U3UVVGR2IwUXNVMEZCZEVRN1FVRkpSQ3hQUVd4Q1NTeEZRVzFDVEN4cFFrRkJiME03UVVGQlFTeFpRVUZzUTNaUUxFbEJRV3RETEZOQlFXeERRU3hKUVVGclF6dEJRVUZCTEZsQlFUVkNNRmdzVlVGQk5FSXNVMEZCTlVKQkxGVkJRVFJDTzBGQlFVRXNXVUZCYUVKRExGVkJRV2RDTEZOQlFXaENRU3hWUVVGblFqczdRVUZEYkVNc1dVRkJTVW9zUzBGQlN5eERRVUZEZFVVc1owSkJRVTRzUzBGQk1rSjJUU3hoUVVFdlFpeEZRVUU0UXp0QlFVTTFRenRCUVVOQkxHZENRVUZKTEVOQlFVTXpSU3hKUVVGTUxFTkJRVlVzVFVGQlNTeERRVUZEVlN4WFFVRk1MRU5CUVdsQ1VDeE5RVUZxUWl4RFFVRjNRbWRPTEdsQ1FVRnNReXhGUVVGeFJEdEJRVU51UkhwSkxGbEJRVUZCTEZOQlFWTXNSVUZCVkVFc1UwRkViVVE3UVVGRmJrUkRMRmxCUVVGQkxHRkJRV0VzUlVGQllrRXNZVUZHYlVRN1FVRkhia1EwVnl4WlFVRkJRU3h0UWtGQmJVSXNSVUZCUlc1dFFpeEpRVWc0UWp0QlFVbHVSREJZTEZsQlFVRkJMRlZCUVZVc1JVRkJWa0VzVlVGS2JVUTdRVUZMYmtSRExGbEJRVUZCTEZWQlFWVXNSVUZCVmtFN1FVRk1iVVFzVjBGQmNrUTdRVUZQUkR0QlFVTkdMRTlCT1VKSkxFTkJRVkE3UVVGblEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzZFVKQlFXTXpXQ3hKUVVGa0xFVkJRVzlDTzBGQlEyeENMRlZCUVUxMVdDeExRVUZMTEVkQlFVY3NTMEZCUzJ0T0xGTkJRVXdzUTBGQlpYcHJRaXhKUVVGbUxFTkJRV1E3TzBGQlJVRXNWVUZCU1hWWUxFdEJRVXNzUzBGQlN5OVpMRk5CUVdRc1JVRkJlVUk3UVVGRGRrSXdReXhSUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJc01rTkJRM0ZEYmtJc1NVRkVja01zZFVKQlEzTkVMRXRCUVV0clRDeExRVUZNTEVOQlFWZDBReXhGUVVScVJUdEJRVWRCTEdWQlFVOHNTMEZCVUR0QlFVTkVPenRCUVVWRUxHRkJRVTh5VHl4TFFVRkxMRU5CUVVONVFpeGhRVUZPTEVWQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkZSU3hwUWtGQlVUdEJRVU5PTEZkQlFVdGhMRTlCUVV3c1IwRkJaU3hKUVVGbU8wRkJSVUVzVlVGQlNUQkVMRTFCUVUwc1IwRkJSeXhMUVVGaU96dEJRVU5CTEZkQlFVdHBTQ3hQUVVGTUxFTkJRV0U1YkVJc1QwRkJZaXhEUVVGeFFpeFZRVUZCTUc1Q0xFTkJRVU1zUlVGQlNUdEJRVU40UWl4WlFVRkpRU3hEUVVGRExFTkJRVU5xVlN4TFFVRkdMRVZCUVVvc1JVRkJaVHRCUVVOaWIwd3NWVUZCUVVFc1RVRkJUU3hIUVVGSExFbEJRVlE3UVVGRFJEdEJRVU5HTEU5QlNrUTdPMEZCVFVFc1lVRkJUMEVzVFVGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVVkZMR3RDUVVGVE8wRkJRMUFzVjBGQlN6RkVMRTlCUVV3c1IwRkJaU3hMUVVGbU8wRkJSVUVzVlVGQlNYZE5MRTlCUVU4c1IwRkJSeXhMUVVGa096dEJRVU5CTEZkQlFVczNRaXhQUVVGTUxFTkJRV0U1YkVJc1QwRkJZaXhEUVVGeFFpeFZRVUZCTUc1Q0xFTkJRVU1zUlVGQlNUdEJRVU40UWl4WlFVRkpRU3hEUVVGRExFTkJRVU5vVlN4TlFVRkdMRVZCUVVvc1JVRkJaMEk3UVVGRFpHbFZMRlZCUVVGQkxFOUJRVThzUjBGQlJ5eEpRVUZXTzBGQlEwUTdRVUZEUml4UFFVcEVPenRCUVUxQkxHRkJRVTlCTEU5QlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxITkNRVUZoTzBGQlFVRTdPMEZCUTFnN1FVRkRTanRCUVVOQk8wRkJRMEU3UVVGRFNTeFZRVUZOYW1Jc1IwRkJSeXhIUVVGSExHZElRVUZhT3p0QlFVVkJiRUlzVFVGQlFVRXNUVUZCVFN4RFFVRkRWeXhuUWtGQlVDeERRVUYzUWs4c1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OYlZNc1VVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlEwNTBTQ3hWUVVGQlFTeEhRVUZITEVWQlFVVTdRVUZCUVN4dFFrRkJUU3hQUVVGSkxFTkJRVU56U0N4TlFVRllPMEZCUVVFN1FVRkVReXhUUVU1dFFqczdRVUZUTTBJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OT1Uwc1VVRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlEwNTNSaXhWUVVGQlFTeEhRVUZITEVWQlFVVTdRVUZCUVN4dFFrRkJUU3hQUVVGSkxFTkJRVU40Uml4TlFVRllPMEZCUVVFN1FVRkVRenRCUVdSdFFpeFBRVUUzUWp0QlFXMUNRWFpITEUxQlFVRkJMRTFCUVUwc1EwRkJRMjlJTEUxQlFWQXNRMEZCWTJ4SExFZEJRV1FzUlVGQmJVSTdRVUZEYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMTNSU3hSUVVGQlFTeFJRVUZSTEVWQlFVVXNTMEZCUzBFc1VVRkJUQ3hEUVVGallpeEpRVUZrTEVOQlFXMUNMRWxCUVc1Q0xFTkJVRTg3TzBGQlVXcENPMEZCUTA0N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OWXl4UlFVRkJRU3hYUVVGWExFVkJRVVVzUzBGQlMwRXNWMEZCVEN4RFFVRnBRbVFzU1VGQmFrSXNRMEZCYzBJc1NVRkJkRUlzUTBGa1NUczdRVUZsYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMTFXQ3hSUVVGQlFTeFRRVUZUTEVWQlFVVXNTMEZCUzBFc1UwRkJUQ3hEUVVGbGRsZ3NTVUZCWml4RFFVRnZRaXhKUVVGd1FpeERRWEpDVFRzN1FVRnpRbXBDTzBGQlEwNDdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOTlpTeFJRVUZCUVN4WFFVRlhMRVZCUVVVc1MwRkJTMEVzVjBGQlRDeERRVUZwUW1Zc1NVRkJha0lzUTBGQmMwSXNTVUZCZEVJc1EwRTFRa2s3TzBGQk9FSnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFhkWUxGRkJRVUZCTEdOQlFXTXNSVUZCUlN4TFFVRkxRU3hqUVVGTUxFTkJRVzlDZUZnc1NVRkJjRUlzUTBGQmVVSXNTVUZCZWtJc1EwRndRME03TzBGQmNVTnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFRKRExGRkJRVUZCTEdOQlFXTXNSVUZCUlN4TFFVRkxRU3hqUVVGTUxFTkJRVzlDTTBNc1NVRkJjRUlzUTBGQmVVSXNTVUZCZWtJc1EwRXpRME03TzBGQk5FTnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFhsWUxGRkJRVUZCTEdkQ1FVRm5RaXhGUVVGRkxFdEJRVXRCTEdkQ1FVRk1MRU5CUVhOQ2VsZ3NTVUZCZEVJc1EwRkJNa0lzU1VGQk0wSXNRMEZzUkVRN08wRkJiVVJxUWp0QlFVTk9PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFRUQllMRkZCUVVGQkxHbENRVUZwUWl4RlFVRkZMRXRCUVV0QkxHbENRVUZNTEVOQlFYVkNNVmdzU1VGQmRrSXNRMEZCTkVJc1NVRkJOVUlzUTBGNlJFWTdPMEZCTUVScVFqdEJRVU5PTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRUVEpZTEZGQlFVRkJMRlZCUVZVc1JVRkJSU3hMUVVGTFFTeFZRVUZNTEVOQlFXZENNMWdzU1VGQmFFSXNRMEZCY1VJc1NVRkJja0lzUTBGb1JVczdPMEZCYVVWcVFqdEJRVU5PTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRUVFJZTEZGQlFVRkJMRmRCUVZjc1JVRkJSU3hMUVVGTFFTeFhRVUZNTEVOQlFXbENOVmdzU1VGQmFrSXNRMEZCYzBJc1NVRkJkRUlzUTBGMlJVazdPMEZCZVVWcVFqdEJRVU5PTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRUVFpZTEZGQlFVRkJMR2RDUVVGblFpeEZRVUZGTEV0QlFVdEJMR2RDUVVGTUxFTkJRWE5DTjFnc1NVRkJkRUlzUTBGQk1rSXNTVUZCTTBJc1EwRXZSVVE3TzBGQlowWnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFRoQ0xGRkJRVUZCTEdGQlFXRXNSVUZCUlN4TFFVRkxRU3hoUVVGTUxFTkJRVzFDT1VJc1NVRkJia0lzUTBGQmQwSXNTVUZCZUVJc1EwRjBSa1U3TzBGQmRVWnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFRoWUxGRkJRVUZCTEcxQ1FVRnRRaXhGUVVGRkxFdEJRVXRCTEcxQ1FVRk1MRU5CUVhsQ09WZ3NTVUZCZWtJc1EwRkJPRUlzU1VGQk9VSXNRMEUzUmtvN08wRkJPRVpxUWp0QlFVTk9PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFRUWktMRkZCUVVGQkxGTkJRVk1zUlVGQlJTeExRVUZMUVN4VFFVRk1MRU5CUVdVM1NpeEpRVUZtTEVOQlFXOUNMRWxCUVhCQ0xFTkJjRWROT3p0QlFYRkhha0k3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTAxeFJpeFJRVUZCUVN4blFrRkJaMElzUlVGQlJTeExRVUZMUVN4blFrRkJUQ3hEUVVGelFuSkdMRWxCUVhSQ0xFTkJRVEpDTEVsQlFUTkNMRU5CTTBkRU96dEJRVFJIYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMW5RaXhSUVVGQlFTeFpRVUZaTEVWQlFVVXNTMEZCUzBFc1dVRkJUQ3hEUVVGclFtaENMRWxCUVd4Q0xFTkJRWFZDTEVsQlFYWkNMRU5CYkVoSE96dEJRVzFJYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMXBRaXhSUVVGQlFTeGxRVUZsTEVWQlFVVXNTMEZCUzBFc1pVRkJUQ3hEUVVGeFFtcENMRWxCUVhKQ0xFTkJRVEJDTEVsQlFURkNMRU5CZWtoQk96dEJRVEJJYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMXJRaXhSUVVGQlFTeGxRVUZsTEVWQlFVVXNTMEZCUzBFc1pVRkJUQ3hEUVVGeFFteENMRWxCUVhKQ0xFTkJRVEJDTEVsQlFURkNMRU5CYUVsQk96dEJRV3RKYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMTFSaXhSUVVGQlFTeHpRa0ZCYzBJc1JVRkJSU3hMUVVGTFFTeHpRa0ZCVEN4RFFVRTBRblpHTEVsQlFUVkNMRU5CUVdsRExFbEJRV3BETEVOQmVFbFFPenRCUVhsSmFrSTdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDB5Vnl4UlFVRkJRU3gxUWtGQmRVSXNSVUZCUlN4TFFVRkxRU3gxUWtGQlRDeERRVUUyUWpOWExFbEJRVGRDTEVOQlFXdERMRWxCUVd4RExFTkJMMGxTT3p0QlFXZEtha0k3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTAwclJ5eFJRVUZCUVN4MVFrRkJkVUlzUlVGQlJTeExRVUZMUVN4MVFrRkJUQ3hEUVVFMlFpOUhMRWxCUVRkQ0xFTkJRV3RETEVsQlFXeERMRU5CZEVwU096dEJRWGRLYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMDBTaXhSUVVGQlFTeGhRVUZoTEVWQlFVVXNTMEZCUzBFc1lVRkJUQ3hEUVVGdFFqVktMRWxCUVc1Q0xFTkJRWGRDTEVsQlFYaENMRU5CT1VwRk96dEJRV2RMYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMW5TaXhSUVVGQlFTeHBRa0ZCYVVJc1JVRkJSU3hMUVVGTFFTeHBRa0ZCVEN4RFFVRjFRbWhLTEVsQlFYWkNMRU5CUVRSQ0xFbEJRVFZDTEVOQmRFdEdPenRCUVhkTGFrSTdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDByUml4UlFVRkJRU3hqUVVGakxFVkJRVVVzUzBGQlMwRXNZMEZCVEN4RFFVRnZRaTlHTEVsQlFYQkNMRU5CUVhsQ0xFbEJRWHBDTEVOQk9VdERPenRCUVN0TGFrSTdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDAwUml4UlFVRkJRU3hsUVVGbExFVkJRVVVzUzBGQlMwRXNaVUZCVEN4RFFVRnhRalZHTEVsQlFYSkNMRU5CUVRCQ0xFbEJRVEZDTEVOQmNreEJPenRCUVhOTWFrSTdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDFwU3l4UlFVRkJRU3hoUVVGaExFVkJRVVVzUzBGQlMwRXNZVUZCVEN4RFFVRnRRbXBMTEVsQlFXNUNMRU5CUVhkQ0xFbEJRWGhDTEVOQk5VeEZPenRCUVRoTWFrSTdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDF2UkN4UlFVRkJRU3hMUVVGTExFVkJRVVVzUzBGQlMwRXNTMEZCVEN4RFFVRlhjRVFzU1VGQldDeERRVUZuUWl4SlFVRm9RaXhEUVhCTlZUczdRVUZ4VFdwQ08wRkJRMDQ3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTk5jVVFzVVVGQlFVRXNUVUZCVFN4RlFVRkZMRXRCUVV0QkxFMUJRVXdzUTBGQldYSkVMRWxCUVZvc1EwRkJhVUlzU1VGQmFrSTdRVUV6VFZNc1QwRkJia0k3UVVFMlRVUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc1owSkJRVTk0VGl4VFFVRlFMRVZCUVd0Q08wRkJRMmhDTEZWQlFVa3NRMEZCUXl4TFFVRkxhV3BDTEU5QlFVd3NRMEZCWVRkc1FpeE5RVUZzUWl4RlFVRXdRanRCUVVONFFqdEJRVU5FT3p0QlFVVkVMRlZCUVVrc1MwRkJTMnRpTEU5QlFWUXNSVUZCYTBJN1FVRkRhRUowV1N4UlFVRkJRU3hUUVVGVExFZEJRVWNzUTBGQldqdEJRVU5FTEU5QlVHVXNRMEZUYUVJN096dEJRVU5CTEZkQlFVdDFiRUlzYzBKQlFVd3NSMEZXWjBJc1EwRlphRUk3T3p0QlFVTkJMRmRCUVV0MFF5eFBRVUZNTEVOQlFXRTViRUlzVDBGQllpeERRVUZ4UWl4VlFVRkJObGtzUzBGQlN5eEZRVUZKTzBGQlF6VkNRU3hSUVVGQlFTeExRVUZMTEVOQlFVTTVUQ3hOUVVGT0xFTkJRV0ZzU3l4VFFVRmlPMEZCUTBRc1QwRkdSRHM3UVVGSlFTeHRTRUZCWVVFc1UwRkJZanRCUVVORU96czdWMEZGUkN4dFFrRkJWVHRCUVVOU0xGZEJRVXRwYWtJc1QwRkJUQ3hEUVVGaE9XeENMRTlCUVdJc1EwRkJjVUlzVlVGQlFUWlpMRXRCUVVzc1JVRkJTVHRCUVVNMVFrRXNVVUZCUVVFc1MwRkJTeXhEUVVGRGNFc3NUMEZCVGp0QlFVTkVMRTlCUmtRN08wRkJTVUVzWVVGQlR5eExRVUZMY1Znc1QwRkJXanRCUVVOQkxHRkJRVThzUzBGQlMwTXNVMEZCV2pzN1FVRkZRVHRCUVVORU96czdPMFZCZGpsRE5FSjZXanM3UVVFd09VTXZRbVFzVFVGQlRTeERRVUZEYTBRc1kwRkJVQ3hEUVVGelFuVkRMR2RDUVVGMFFpeEZRVUYzUXl4UlFVRjRReXhGUVVGclJEdEJRVU5vUkc1VExFVkJRVUZCTEV0QlFVc3NSVUZCUlN4blJVRkRSakJOTEUxQlFVMHNRMEZCUTIxRUxHTkJRVkFzUTBGQmMwSnlReXgzUWtGQmRFSXNSVUZCTWtORUxFMUJSRE5ETzBGQlJVZzJSU3hKUVVGQlFTeFJRVUZSTEVWQlFVVXNhVUpCUmxBN1FVRkhTRU1zU1VGQlFVRXNWMEZCVnl4RlFVRkZMRzlDUVVoV08wRkJTVWhETEVsQlFVRkJMRmRCUVZjc1JVRkJSU3h2UWtGS1ZqdEJRVXRJUXl4SlFVRkJRU3haUVVGWkxFVkJRVVVzY1VKQlRGZzdRVUZOU0VNc1NVRkJRVUVzWlVGQlpTeEZRVUZGTEhsQ1FVNWtPMEZCVDBoRExFbEJRVUZCTEdWQlFXVXNSVUZCUlN4M1FrRlFaRHRCUVZGSU1Fa3NTVUZCUVVFc1lVRkJZU3hGUVVGRkxHRkJVbG83UVVGVFNGb3NTVUZCUVVFc2FVSkJRV2xDTEVWQlFVVXNZVUZVYUVJN1FVRlZTR3BFTEVsQlFVRkJMR05CUVdNc1JVRkJSU3hqUVZaaU8wRkJWMGhJTEVsQlFVRkJMR1ZCUVdVc1JVRkJSU3hsUVZoa08wRkJXVWh6UlN4SlFVRkJRU3hyUWtGQmEwSXNSVUZCUlN4clFrRmFha0k3UVVGaFNFUXNTVUZCUVVFc1lVRkJZU3hGUVVGRk8wRkJZbG83UVVGRU1rTXNRMEZCYkVRN1FVRnJRa0VzWjBWQlFXVnlTaXhuUWtGQlppeEZPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF5OXJSRUU3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJMRWxCUVUxdldDeFBRVUZQTEVkQlFVYzdRVUZEWkVNc1JVRkJRVUVzVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVvc1JVRkJUeXhEUVVGUUxFTkJSRWM3UVVGRlpFTXNSVUZCUVVFc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZHTEVWQlFVc3NRMEZCVEN4RlFVRlJMRU5CUVZJc1EwRkdSenRCUVVka1F5eEZRVUZCUVN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQXNRMEZJUnp0QlFVbGtReXhGUVVGQlFTeFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJReXhEUVVGTUxFVkJRVkVzUTBGQlVpeERRVXBITzBGQlMyUkRMRVZCUVVGQkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVUXNSVUZCU1N4RFFVRktMRVZCUVU4c1EwRkJVQ3hEUVV4SE8wRkJUV1JETEVWQlFVRkJMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVWQlFVOHNRMEZCUXl4RFFVRlNPMEZCVGtjc1EwRkJhRUk3UVVGVFFTeEpRVUZOUXl4bFFVRmxMRWRCUVVjN1FVRkRkRUpETEVWQlFVRkJMRk5CUVZNc1JVRkJSU3hEUVVSWE8wRkJSWFJDUXl4RlFVRkJRU3hQUVVGUExFVkJRVVVzUTBGR1lUdEJRVWQwUWtNc1JVRkJRVUVzVVVGQlVTeEZRVUZGTEVOQlNGazdRVUZKZEVKRExFVkJRVUZCTEV0QlFVc3NSVUZCUlR0QlFVcGxMRU5CUVhoQ0xFVkJUMEU3UVVGRFFUczdRVUZEUVN4SlFVRk5ReXhYUVVGWExFZEJRVWNzUTBGRGJFSXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUTBGRWEwSXNSVUZGYkVJc1EwRkJReXhEUVVGRExFbEJRVVlzUlVGQlVTeERRVUZTTEVWQlFWY3NRMEZCV0N4RFFVWnJRaXhGUVVkc1FpeERRVUZETEVsQlFVUXNSVUZCVHl4RFFVRlFMRVZCUVZVc1EwRkJWaXhEUVVoclFpeEZRVWxzUWl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGRExFbEJRVXdzUlVGQlZ5eERRVUZZTEVOQlNtdENMRU5CUVhCQ0xFVkJUMEU3TzBGQlEwRXNTVUZCVFVNc2MwSkJRWE5DTEVkQlFVYzdRVUZETjBJc1lVRkJVeXhEUVVGRExFZEJRVVFzUlVGQlRTeEpRVUZPTEVOQlJHOUNPMEZCUlRkQ1F5eEZRVUZCUVN4VFFVRlRMRVZCUVVVc1EwRkJReXhIUVVGRUxFVkJRVTBzVFVGQlRqdEJRVVpyUWl4RFFVRXZRanRCUVV0QkxFbEJRVTFETEhOQ1FVRnpRaXhIUVVGSE8wRkJRemRDTEdGQlFWTXNRMEZCUXl4SFFVRkVMRVZCUVUwc1IwRkJUaXhEUVVSdlFqdEJRVVUzUWtNc1JVRkJRVUVzVjBGQlZ5eEZRVUZGTEVOQlFVTXNSMEZCUkN4RlFVRk5MRWxCUVU0c1EwRkdaMEk3UVVGRlNEdEJRVU14UWtNc1JVRkJRVUVzVTBGQlV5eEZRVUZGTEVOQlFVTXNSMEZCUkN4RlFVRk5MRWRCUVU0N1FVRklhMElzUTBGQkwwSXNSVUZOUVRzN1FVRkRRU3hKUVVGTlF5eGpRVUZqTEVkQlFVY3NSVUZCZGtJc1JVRkZRVHM3UVVGRFFTeEpRVUZOUXl4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGMlFqdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3U1VGRFRVTTdPenM3TzBGQlNVbzdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwVXNhME5CUTBWc1pDeEpRVVJHTEVWQmFVSkZPMEZCUVVFN08wRkJRVUVzYlVaQldFa3NSVUZYU2p0QlFVRkJMRkZCWkVWdFpDeE5RV05HTEZGQlpFVkJMRTFCWTBZN1FVRkJRU3hSUVdKRlF5eFhRV0ZHTEZGQllrVkJMRmRCWVVZN1FVRkJRU3hSUVZwRlF5eExRVmxHTEZGQldrVkJMRXRCV1VZN08wRkJRVUVzYjBaQlRra3NSVUZOU2p0QlFVRkJMR2REUVZSRk0xY3NVMEZUUmp0QlFVRkJMRkZCVkdFMFZ5eGhRVk5pTEdkRFFWUTJRaXhIUVZNM1FqdEJRVUZCTEN0Q1FWSkZhbGtzVVVGUlJqdEJRVUZCTEZGQlVsbHJXU3haUVZGYUxDdENRVkl5UWpWaExHVkJVVE5DTzBGQlFVRXNOa0pCVUVVMlF5eE5RVTlHTzBGQlFVRXNVVUZRVldkWkxGVkJUMVlzTmtKQlVIVkNMRVZCVDNaQ096dEJRVUZCTEc5R1FVUkpMRVZCUTBvN1FVRkJRU3huUTBGS1JUbFhMRk5CU1VZN1FVRkJRU3hSUVVwaEsxY3NZMEZKWWl4blEwRktPRUlzUzBGSk9VSTdRVUZCUVN3clFrRklSWEJaTEZGQlIwWTdRVUZCUVN4UlFVaFpjVmtzWVVGSFdpd3JRa0ZJTkVJdllTeGxRVWMxUWp0QlFVRkJMRFpDUVVaRk5rTXNUVUZGUmp0QlFVRkJMRkZCUmxWdFdTeFhRVVZXTERaQ1FVWjNRaXhGUVVWNFFqczdRVUZCUVRzN1FVRkRRU3c0UWtGQlRUTmtMRWxCUVU0N08wRkJSVUVzVVVGQlNTeERRVUZETEUxQlFVdExMRmRCUVV3c1EwRkJhVUoxWkN4M1FrRkJha0lzUTBGQk1FTlNMRmRCUVRGRExFTkJRVXdzUlVGQk5rUTdRVUZETTBRc1dVRkJUU3hKUVVGSmVISkNMRXRCUVVvc05FUkJRVGhFTEUxQlFVdHhUeXhMUVVGTUxFTkJRVmQwUXl4RlFVRjZSU3h4UlVGQlRqdEJRVU5FT3p0QlFVTkVMRlZCUVV0clowSXNXVUZCVEN4SFFVRnZRbFFzVjBGQmNFSTdRVUZGUVN4VlFVRkxWU3hOUVVGTUxFZEJRV05VTEV0QlFXUTdRVUZEUVN4VlFVRkxWU3hQUVVGTUxFZEJRV1ZhTEUxQlFVMHNTVUZCU1N4SlFVRjZRanRCUVVOQkxGVkJRVXRoTEdOQlFVd3NSMEZCYzBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQXNRMEZCZEVJN1FVRkRRU3hWUVVGTFF5eGxRVUZNTEVkQlFYVkNMRXRCUVhaQ08wRkJRMEVzVlVGQlMwTXNWMEZCVEN4SFFVRnRRaXhOUVVGTFFTeFhRVUZNTEVsQlFXOUNMRVZCUVhaRE8wRkJRMEVzVlVGQlMwTXNaMEpCUVV3c1IwRkJkMElzVFVGQlMwRXNaMEpCUVV3c1NVRkJlVUlzUlVGQmFrUTdRVUZEUVN4VlFVRkxReXhaUVVGTUxFZEJRVzlDTEUxQlFVdEJMRmxCUVV3c1NVRkJjVUlzUlVGQmVrTXNRMEZrUVN4RFFXZENRVHM3UVVGRFFWb3NTVUZCUVVFc1ZVRkJWU3hEUVVGREwzQkNMRTlCUVZnc1EwRkJiVUlzYVVKQlUySTdRVUZCUVN4VlFWSktjMElzU1VGUlNTeFRRVkpLUVN4SlFWRkpPMEZCUVVFc1ZVRlFTbWRWTEZOQlQwa3NVMEZRU2tFc1UwRlBTVHRCUVVGQkxGVkJUa292VEN4UlFVMUpMRk5CVGtwQkxGRkJUVWs3UVVGQlFTeFZRVXhLY1doQ0xGTkJTMGtzVTBGTVNrRXNVMEZMU1R0QlFVRkJMRlZCU2twRExGZEJTVWtzVTBGS1NrRXNWMEZKU1R0QlFVRkJMRlZCU0VwRExGVkJSMGtzVTBGSVNrRXNWVUZIU1R0QlFVRkJMRlZCUmtvM1dDeFRRVVZKTEZOQlJrcEJMRk5CUlVrN1FVRkJRU3hWUVVSS2NrSXNVVUZEU1N4VFFVUktRU3hSUVVOSk96dEJRVU5LTEZsQlFVdHRXaXhwUWtGQlRDeERRVUYxUW5wd1FpeEpRVUYyUWl4RlFVRTJRanRCUVVNelFtZFZMRkZCUVVGQkxGTkJRVk1zUlVGQlZFRXNVMEZFTWtJN1FVRkZNMEl2VEN4UlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQlJqSkNPMEZCUnpOQ2NXaENMRkZCUVVGQkxGTkJRVk1zUlVGQlZFRXNVMEZJTWtJN1FVRkpNMEpETEZGQlFVRkJMRmRCUVZjc1JVRkJXRUVzVjBGS01rSTdRVUZMTTBKRExGRkJRVUZCTEZWQlFWVXNSVUZCVmtFc1ZVRk1Na0k3UVVGTk0wSTNXQ3hSUVVGQlFTeFRRVUZUTEVWQlFVVkJMRk5CUVZNc1MwRkJTMjVVTEZOQlFXUXNSMEZCTUVKdFZDeFRRVUV4UWl4SFFVRnpRelJYTEdGQlRuUkNPMEZCVHpOQ2Fsa3NVVUZCUVVFc1VVRkJVU3hGUVVGRlFTeFJRVUZSTEV0QlFVczVVaXhUUVVGaUxFZEJRWGxDT0ZJc1VVRkJla0lzUjBGQmIwTnJXVHRCUVZCdVFpeFBRVUUzUWp0QlFWTkVMRXRCYmtKRUxFVkJha0pCTEVOQmMwTkJPenRCUVVOQlNTeEpRVUZCUVN4WFFVRlhMRU5CUVVOc2NVSXNUMEZCV2l4RFFVRnZRaXhwUWtGQk9FTTdRVUZCUVN4VlFVRXpRM05DTEVsQlFUSkRMRk5CUVRORFFTeEpRVUV5UXp0QlFVRkJMRlZCUVhKRFoxVXNVMEZCY1VNc1UwRkJja05CTEZOQlFYRkRPMEZCUVVFc1ZVRkJNVUp5UXl4VFFVRXdRaXhUUVVFeFFrRXNVMEZCTUVJN1FVRkJRU3hWUVVGbWNrSXNVVUZCWlN4VFFVRm1RU3hSUVVGbE96dEJRVU5vUlN4WlFVRkxiMW9zYTBKQlFVd3NRMEZCZDBJeGNFSXNTVUZCZUVJc1JVRkJPRUk3UVVGRE5VSm5WU3hSUVVGQlFTeFRRVUZUTEVWQlFWUkJMRk5CUkRSQ08wRkJSVFZDY2tNc1VVRkJRVUVzVTBGQlV5eEZRVUZGUVN4VFFVRlRMRXRCUVV0dVZDeFRRVUZrTEVkQlFUQkNiVlFzVTBGQk1VSXNSMEZCYzBNclZ5eGpRVVp5UWp0QlFVYzFRbkJaTEZGQlFVRkJMRkZCUVZFc1JVRkJSVUVzVVVGQlVTeExRVUZMT1ZJc1UwRkJZaXhIUVVGNVFqaFNMRkZCUVhwQ0xFZEJRVzlEY1ZrN1FVRkliRUlzVDBGQk9VSTdRVUZMUkN4TFFVNUVPMEZCZGtOQk8wRkJPRU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN1UwRkRSU3hsUVVGaE8wRkJRMWdzWVVGQlR5eExRVUZMU3l4UFFVRmFPMEZCUTBRN1UwRkZSQ3hoUVVGWFdpeE5RVUZZTEVWQlFXMUNPMEZCUTJwQ0xGZEJRVXRaTEU5QlFVd3NSMEZCWlZvc1RVRkJUU3hKUVVGSkxFbEJRWHBDTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQk1rUkZMRGhDUVVGM1FqdEJRVUZCTEZWQlFWSndiMElzU1VGQlVTeFRRVUZTUVN4SlFVRlJPMEZCUTNSQ0xGZEJRVXR0Y0VJc1YwRkJUQ3hIUVVGdFFpeExRVUZMUVN4WFFVRk1MRWxCUVc5Q0xFVkJRWFpETzBGQlEwRXNWMEZCUzBVc1dVRkJUQ3hIUVVGdlFpeExRVUZMUVN4WlFVRk1MRWxCUVhGQ0xFVkJRWHBET3p0QlFVVkJMRFJKUVVGdlFqdEJRVUZGY25CQ0xGRkJRVUZCTEVsQlFVa3NSVUZCU2tFN1FVRkJSaXhQUVVGd1FpeEZRVXB6UWl4RFFVMTBRanM3TzBGQlEwRXNWVUZCU1N4TFFVRkxiWEJDTEZkQlFVd3NRMEZCYVVKdWNFSXNTVUZCYWtJc1RVRkJNa0o0UWl4VFFVRXZRaXhGUVVFd1F6dEJRVU40UXl4aFFVRkxiWEpDTEhOQ1FVRk1MRU5CUVRSQ00zQkNMRWxCUVRWQ0xFVkJRV3RETEV0QlFVdHRjRUlzVjBGQlRDeERRVUZwUW01d1FpeEpRVUZxUWl4RFFVRnNRenRCUVVORU8wRkJRMFk3T3p0WFFVVkVMR3REUVVGblJEdEJRVUZCTEZWQlFUVkNjMUFzVTBGQk5FSXNVMEZCTlVKQkxGTkJRVFJDTzBGQlFVRXNWVUZCYWtKRExHRkJRV2xDTEZOQlFXcENRU3hoUVVGcFFqdEJRVU01UXl4WFFVRkxORm9zVjBGQlRDeEhRVUZ0UWl4TFFVRkxRU3hYUVVGTUxFbEJRVzlDTEVWQlFYWkRPMEZCUTBFc1YwRkJTMFVzV1VGQlRDeEhRVUZ2UWl4TFFVRkxRU3haUVVGTUxFbEJRWEZDTEVWQlFYcERPenRCUVVWQkxHZEtRVUYzUWp0QlFVRkZMMW9zVVVGQlFVRXNVMEZCVXl4RlFVRlVRVHRCUVVGR0xFOUJRWGhDTEVWQlNqaERMRU5CVFRsRE96czdRVUZEUVN4VlFVRkpMRXRCUVVzMldpeFhRVUZNTEVOQlFXbENOMW9zVTBGQmFrSXNUVUZCWjBORExHRkJRWEJETEVWQlFXMUVPMEZCUTJwRUxHRkJRVXR2WVN4elFrRkJUQ3hEUVVFMFFuSmhMRk5CUVRWQ0xFVkJRWFZEUXl4aFFVRjJRenRCUVVORU8wRkJRMFk3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc1owTkJRWFZDUkN4VFFVRjJRaXhGUVVGclEwTXNZVUZCYkVNc1JVRkJhVVE3UVVGREwwTXNWVUZCU1N4TFFVRkxhVUlzWTBGQlRDeERRVUZ2UW14Q0xGTkJRWEJDTEVWQlFTdENNRUlzVlVGQkwwSXNRMEZCTUVONlFpeGhRVUV4UXl4RlFVRjVSSEZDTEZGQlFUZEVMRVZCUVhWRk8wRkJRM0pGTEZsQlEwVnhWQ3hqUVVGakxFTkJRVU1zUzBGQlN5OVpMRXRCUVV3c1EwRkJWM2xGTEdkQ1FVRllMRU5CUVRSQ2VVVXNaMEpCUVRWQ0xFTkJRMkk1UlN4VFFVUmhMRVZCUldKRExHRkJSbUVzUTBGQlJDeERRVUZrTEV0QlIwOHdWU3h6UWtGS1ZDeEZRVXRGTzBGQlEwRTdRVUZEUVM5cFFpeFZRVUZCUVN4UFFVRlBMRU5CUVVORExFbEJRVklzTkVSQlEzTkViMDhzWVVGRWRFUXNkVUpCUTJkR1JDeFRRVVJvUml4MVFrRkRjMGNzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlJHcElPMEZCUjBFc1pVRkJTelJJTEdOQlFVd3NRMEZCYjBKc1FpeFRRVUZ3UWl4RlFVRXJRakJDTEZWQlFTOUNMRU5CUTBWNlFpeGhRVVJHTEVWQlJVVnhRaXhSUVVaR0xFZEJSV0VzUzBGR1lqdEJRVWRFTzBGQlEwWTdRVUZEUmp0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3p0QlFVdEZPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVORkxHZERRVUZ0UW1kYUxFMUJRVzVDTEVWQlFUSkNPMEZCUTNwQ0xGVkJRVTFETEdOQlFXTXNSMEZCUnl4TFFVRkxWQ3huUWtGQlRDeERRVUZ6UW5STExFbEJRWFJDTEVOQlFUSkNMRlZCUVVGMFppeERRVUZETzBGQlFVRXNaVUZEYWtSQkxFTkJRVU1zUTBGQlF6aHdRaXhUUVVGR0xFdEJRV2RDVFN4TlFVRk5MRU5CUVVOT0xGTkJRWFpDTEVsQlFXOURPWEJDTEVOQlFVTXNRMEZCUXl0d1FpeFhRVUZHTEV0QlFXdENTeXhOUVVGTkxFTkJRVU5NTEZkQlJGbzdRVUZCUVN4UFFVRTFRaXhEUVVGMlFqczdRVUZKUVN4VlFVRkpUU3hqUVVGS0xFVkJRVzlDTzBGQlEyeENMR1ZCUVU5QkxHTkJRVkE3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEVRc1VVRkJRVUVzVFVGQlRTeERRVUZEUlN4TlFVRlFMRWRCUVdkQ08wRkJRVVZETEZWQlFVRkJMRU5CUVVNc1JVRkJSU3hEUVVGTU8wRkJRVkUzYlVJc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlFWZ3NVMEZCYUVJN1FVRkRRVEJ0UWl4UlFVRkJRU3hOUVVGTkxFTkJRVU5KTEZWQlFWQXNSMEZCYjBJN1FVRkJSVVFzVlVGQlFVRXNRMEZCUXl4RlFVRkZMRU5CUVV3N1FVRkJVVGR0UWl4VlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGQldDeFRRVUZ3UWpzN1FVRkRRU3hoUVVGTGEyMUNMR2RDUVVGTUxFTkJRWE5DTDJ0Q0xFbEJRWFJDTEVOQlFUSkNkV3hDTEUxQlFUTkNPenRCUVVOQkxHVkJRVTlCTEUxQlFWQTdRVUZEUkR0QlFVTkdPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTdzRRa0ZCY1VJN1FVRkRia0k3UVVGRFFTeFZRVUZOU3l4alFVRmpMRWRCUVVjc1MwRkJTek5sTEZkQlFVd3NRMEZCYVVJMFpTeHBRa0ZCYWtJc1EwRkJiVU1zUzBGQlMzQkNMRmxCUVhoRExFTkJRWFpDT3p0QlFVTkJMRlZCUVUxeFFpeGpRVUZqTEVkQlFVY3NTMEZCU3pkbExGZEJRVXdzUTBGQmFVSTBaU3hwUWtGQmFrSXNRMEZCYlVNc1MwRkJTMnhDTEU5QlFYaERMRU5CUVhaQ096dEJRVU5CTEZWQlFVMXZRaXhWUVVGVkxFZEJRVWNzUTBGRGFrSkVMR05CUVdNc1EwRkJReXhEUVVGRUxFTkJRV1FzUjBGQmIwSkdMR05CUVdNc1EwRkJReXhEUVVGRUxFTkJSR3BDTEVWQlJXcENSU3hqUVVGakxFTkJRVU1zUTBGQlJDeERRVUZrTEVkQlFXOUNSaXhqUVVGakxFTkJRVU1zUTBGQlJDeERRVVpxUWl4RlFVZHFRa1VzWTBGQll5eERRVUZETEVOQlFVUXNRMEZCWkN4SFFVRnZRa1lzWTBGQll5eERRVUZETEVOQlFVUXNRMEZJYWtJc1EwRkJia0k3UVVGTlFTeGhRVUZQYm05Q0xHbERRVUZCTEVOQlFUWkNjMjlDTEZWQlFUZENMRU5CUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTdzBRa0ZCYlVJN1FVRkRha0lzVjBGQlMyaENMR2RDUVVGTUxFTkJRWE5DTVhGQ0xFOUJRWFJDTEVOQlFUaENMR2xDUVVGblFqdEJRVUZCTEZsQlFXSnZja0lzVFVGQllTeFRRVUZpUVN4TlFVRmhPMEZCUXpWRFFTeFJRVUZCUVN4TlFVRk5MRU5CUVVORExFTkJRVkFzUjBGQlZ5eERRVUZZTzBGQlEwRkVMRkZCUVVGQkxFMUJRVTBzUTBGQlF6VnRRaXhEUVVGUUxFZEJRVmNzUTBGQldEdEJRVU5FTEU5QlNFUTdRVUZKUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxEQkNRVUZwUWp0QlFVRkJPenRCUVVObU8wRkJRMEVzVlVGQlRXMXVRaXhUUVVGVExFZEJRVWNzUzBGQlN5OWxMRmRCUVV3c1EwRkJhVUkwWlN4cFFrRkJha0lzUTBGQmJVTXNTMEZCUzJ4Q0xFOUJRWGhETEVOQlFXeENPenRCUVVOQkxGVkJRVTF6UWl4VlFVRlZMRWRCUVVjc1MwRkJTMmhtTEZkQlFVd3NRMEZCYVVJMFpTeHBRa0ZCYWtJc1EwRkJiVU1zUzBGQlMzQkNMRmxCUVhoRExFTkJRVzVDTEVOQlNHVXNRMEZMWmpzN08wRkJRMEVzVjBGQlMwa3NaVUZCVEN4SFFVRjFRbkJ1UWl4cFEwRkJRU3hEUVVFMlFpeERRVU5zUkhWdlFpeFRRVUZUTEVOQlFVTXNRMEZCUkN4RFFVRlVMRWRCUVdVc1MwRkJTM0JDTEdOQlFVd3NRMEZCYjBJc1EwRkJjRUlzUTBGRWJVTXNSVUZGYkVSdlFpeFRRVUZUTEVOQlFVTXNRMEZCUkN4RFFVRlVMRWRCUVdVc1MwRkJTM0JDTEdOQlFVd3NRMEZCYjBJc1EwRkJjRUlzUTBGR2JVTXNSVUZIYkVSdlFpeFRRVUZUTEVOQlFVTXNRMEZCUkN4RFFVRlVMRWRCUVdVc1MwRkJTM0JDTEdOQlFVd3NRMEZCYjBJc1EwRkJjRUlzUTBGSWJVTXNRMEZCTjBJc1NVRkpia0lzUTBGS1NqdEJRVXRCTDJVc1RVRkJRVUVzVFVGQlRTeERRVUZEYjBnc1RVRkJVQ3hEUVVGakxFdEJRVXN5V0N4alFVRnVRaXhGUVVGdFEyOUNMRk5CUVc1RExFVkJXR1VzUTBGalpqczdRVUZEUVN4VlFVRk5SU3hsUVVGbExFZEJRVWQ2YjBJc2JVTkJRVUVzUTBGRGRFSjFiMElzVTBGQlV5eERRVUZETEVOQlFVUXNRMEZCVkN4SFFVRmxReXhWUVVGVkxFTkJRVU1zUTBGQlJDeERRVVJJTEVWQlJYUkNSQ3hUUVVGVExFTkJRVU1zUTBGQlJDeERRVUZVTEVkQlFXVkRMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJSa2dzUlVGSGRFSkVMRk5CUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUjBGQlpVTXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRklTQ3hEUVVGNFFqczdRVUZMUVN4VlFVRk5SeXhaUVVGWkxFZEJRVWNzUzBGQlMyNW1MRmRCUVV3c1EwRkJhVUp2Wml4elFrRkJha0lzUTBGRGJrSklMR1ZCUVdVc1EwRkJReXhEUVVGRUxFTkJSRWtzUlVGRmJrSkJMR1ZCUVdVc1EwRkJReXhEUVVGRUxFTkJSa2tzUTBGQmNrSXNRMEZ3UW1Vc1EwRjVRbVk3T3p0QlFVTkJMRmRCUVV0dVFpeG5Ra0ZCVEN4RFFVRnpRakZ4UWl4UFFVRjBRaXhEUVVFNFFpeHBRa0ZKZUVJN1FVRkJRU3haUVVoS05IRkNMRk5CUjBrc1UwRklTa0VzVTBGSFNUdEJRVUZCTEZsQlJrcERMRmRCUlVrc1UwRkdTa0VzVjBGRlNUdEJRVUZCTEZsQlJFcFBMRTFCUTBrc1UwRkVTa0VzVFVGRFNUczdRVUZEU2p0QlFVTkJMRmxCUVUxaExGbEJRVmtzUjBGQlJ5eE5RVUZKTEVOQlFVTnlaaXhYUVVGTUxFTkJRV2xDYzJZc2JVSkJRV3BDTEVOQlEyNUNkRUlzVTBGRWJVSXNSVUZGYmtKRExGZEJSbTFDTEVOQlFYSkNPenRCUVVsQkxGbEJRVTF6UWl4WlFVRlpMRWRCUVVjdmIwSXNlVU5CUVVFc1EwRkJRVUVzWTBGQlV5d3lRMEZCZVVJMmIwSXNXVUZCZWtJc1JVRkJPVUk3TzBGQlEwRXNXVUZCVFVjc1UwRkJVeXhIUVVGSExFMUJRVWtzUTBGQlEzaG1MRmRCUVV3c1EwRkJhVUp2Wml4elFrRkJha0lzUTBGRGFFSkhMRmxCUVZrc1EwRkJReXhEUVVGRUxFTkJSRWtzUlVGRmFFSkJMRmxCUVZrc1EwRkJReXhEUVVGRUxFTkJSa2tzUTBGQmJFSXNRMEZRU1N4RFFWbEtPenM3UVVGRFFXWXNVVUZCUVVFc1RVRkJUU3hEUVVGRFF5eERRVUZRTEVkQlFWZFZMRmxCUVZrc1EwRkJRMVlzUTBGQllpeEhRVUZwUW1Vc1UwRkJVeXhEUVVGRFppeERRVUYwUXp0QlFVTkJSQ3hSUVVGQlFTeE5RVUZOTEVOQlFVTTFiVUlzUTBGQlVDeEhRVUZYZFc1Q0xGbEJRVmtzUTBGQlEzWnVRaXhEUVVGaUxFZEJRV2xDTkc1Q0xGTkJRVk1zUTBGQlF6VnVRaXhEUVVGMFF6dEJRVU5FTEU5QmJrSkVPMEZCYjBKRU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzT0VKQlFYRkNObTVDTEZWQlFYSkNMRVZCUVdsRE8wRkJReTlDTzBGQlEwRXNWVUZCU1VFc1ZVRkJWU3hMUVVGTExFTkJRVzVDTEVWQlFYTkNPMEZCUTNCQ0xHVkJRVTg3UVVGQlJXaENMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeERRVUZNTzBGQlFWRTNiVUlzVlVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUVZnc1UwRkJVRHRCUVVORUxFOUJTamhDTEVOQlRTOUNPenM3UVVGRFFTeFZRVUZOT0c1Q0xGRkJRVkVzUjBGQlJ5eExRVUZMUXl4clFrRkJUQ3hEUVVGM1FpeExRVUZMYmtNc1dVRkJOMElzUTBGQmFrSTdPMEZCUTBFc1ZVRkJUVzlETEZWQlFWVXNSMEZCUnl4NVEwRkJTWFpFTEZkQlFWY3NRMEZCUTI5RUxGVkJRVVFzUTBGQmJFSXNRMEZCYUVJN08wRkJRMEZITEUxQlFVRkJMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVllzUjBGQlowSkdMRkZCUVdoQ08wRkJRMEVzVlVGQlRVY3NVMEZCVXl4SFFVRkhjbkJDTEhsRFFVRkJMRU5CUVVGQkxHTkJRVk1zTWtOQlFYbENiM0JDTEZWQlFYcENMRVZCUVROQ0xFTkJWaXRDTEVOQldTOUNPenRCUVVOQkxGVkJRVTFGTEZkQlFWY3NSMEZCUnl4TFFVRkxPV1lzVjBGQlRDeERRVUZwUW05bUxITkNRVUZxUWl4RFFVRjNRMU1zVTBGQlV5eERRVUZETEVOQlFVUXNRMEZCYWtRc1JVRkJjMFJCTEZOQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVM5RUxFTkJRWEJDT3p0QlFVTkJReXhOUVVGQlFTeFhRVUZYTEVOQlFVTnlRaXhEUVVGYUxFZEJRV2RDYW05Q0xHOUNRVUZCTEVOQlFXZENjM0JDTEZkQlFWY3NRMEZCUTNKQ0xFTkJRVFZDTEVWQlFTdENMRU5CUVVNc1JVRkJhRU1zUlVGQmIwTXNSVUZCY0VNc1EwRkJhRUk3UVVGRFFYRkNMRTFCUVVGQkxGZEJRVmNzUTBGQlEyeHZRaXhEUVVGYUxFZEJRV2RDY0VJc2IwSkJRVUVzUTBGQlowSnpjRUlzVjBGQlZ5eERRVUZEYkc5Q0xFTkJRVFZDTEVWQlFTdENMRU5CUVVNc1JVRkJhRU1zUlVGQmIwTXNSVUZCY0VNc1EwRkJhRUk3UVVGRlFTeGhRVUZQYTI5Q0xGZEJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzTWtKQlFXdENPV0lzVTBGQmJFSXNSVUZCTmtKNVlTeERRVUUzUWl4RlFVRm5RemR0UWl4RFFVRm9ReXhGUVVGdFF6dEJRVU5xUXl4VlFVRk5jVlVzUzBGQlN5eEhRVUZITEV0QlFVc3ZSeXhqUVVGTUxFTkJRVzlDYkVJc1UwRkJjRUlzUTBGQlpDeERRVVJwUXl4RFFVZHFRenM3UVVGRFFXbEpMRTFCUVVGQkxFdEJRVXNzUTBGQlF6aFVMRk5CUVU0c1IwRkJhMElzVDBGQlR5eEpRVUZKTTNKQ0xFbEJRVWtzUTBGQlF6UnlRaXhIUVVGTUxFTkJRVk1zUTBGQlEzWkNMRU5CUVVRc1IwRkJTeXhIUVVGa0xFTkJRVmdzUTBGQmJFSTdRVUZEUVhoVExFMUJRVUZCTEV0QlFVc3NRMEZCUTJkVkxGTkJRVTRzUjBGQmEwSXNUMEZCVHl4SlFVRkpOM0pDTEVsQlFVa3NRMEZCUXpSeVFpeEhRVUZNTEVOQlFWTXNRMEZCUTNCdlFpeERRVUZFTEVkQlFVc3NSMEZCWkN4RFFVRllMRU5CUVd4Q0xFTkJUR2xETEVOQlQycERPenRCUVVOQkxGVkJRVTF6YjBJc1JVRkJSU3hIUVVGSExFdEJRVmc3UVVGRFFTeFZRVUZOUXl4RFFVRkRMRWRCUVVjc1QwRkJWanRCUVVOQmJGVXNUVUZCUVVFc1MwRkJTeXhEUVVGRGJWVXNVMEZCVGl4SFFVRnJRa1lzUlVGQlJTeEhRVUZIUXl4RFFVRkRMRWRCUVVjeFFpeERRVUV6UWp0QlFVTkJlRk1zVFVGQlFVRXNTMEZCU3l4RFFVRkRiMVVzVTBGQlRpeEhRVUZyUWtnc1JVRkJSU3hIUVVGSFF5eERRVUZETEVkQlFVZDJiMElzUTBGQk0wSTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzTUVKQlFXbENiMDBzVTBGQmFrSXNSVUZCTkVJN1FVRkRNVUlzVlVGQlRXbEpMRXRCUVVzc1IwRkJSeXhMUVVGTEwwY3NZMEZCVEN4RFFVRnZRbXhDTEZOQlFYQkNMRU5CUVdRN1FVRkRRU3hWUVVGUmMyTXNXVUZCVWl4SFFVRjVRbkpWTEV0QlFYcENMRU5CUVZGeFZTeFpRVUZTT3p0QlFVVkJMRlZCUVVrc1MwRkJTelZETEU5QlFWUXNSVUZCYTBJN1FVRkRhRUk3UVVGRFFUUkRMRkZCUVVGQkxGbEJRVmtzUTBGQlF6ZENMRU5CUVdJc1IwRkJhVUo2Y1VJc2VVSkJRVUVzUTBGQmNVSXNSMEZCY2tJc1JVRkJNRUlzUjBGQk1VSXNRMEZCYWtJN1FVRkRRWE56UWl4UlFVRkJRU3haUVVGWkxFTkJRVU14YjBJc1EwRkJZaXhIUVVGcFFqVkVMSGxDUVVGQkxFTkJRWEZDTEVkQlFYSkNMRVZCUVRCQ0xFZEJRVEZDTEVOQlFXcENPMEZCUTBRc1QwRktSQ3hOUVVsUE8wRkJRMHc3UVVGRFFYTnpRaXhSUVVGQlFTeFpRVUZaTEVOQlFVTTNRaXhEUVVGaUxFZEJRV2xDZW5GQ0xIbENRVUZCTEVOQlFYRkNMRWRCUVhKQ0xFVkJRVEJDTEVWQlFURkNMRU5CUVdwQ08wRkJRMEZ6YzBJc1VVRkJRVUVzV1VGQldTeERRVUZETVc5Q0xFTkJRV0lzUjBGQmFVSTFSQ3g1UWtGQlFTeERRVUZ4UWl4SFFVRnlRaXhGUVVFd1FpeEZRVUV4UWl4RFFVRnFRanRCUVVORU96dEJRVVZFTEZkQlFVdDFjMElzYVVKQlFVd3NRMEZCZFVKMll5eFRRVUYyUWl4RlFVRnJRM05qTEZsQlFWa3NRMEZCUXpkQ0xFTkJRUzlETEVWQlFXdEVOa0lzV1VGQldTeERRVUZETVc5Q0xFTkJRUzlFTEVWQlpEQkNMRU5CWjBJeFFqczdPMEZCUTBFc1YwRkJTelJ2UWl4eFFrRkJUQ3hqUVVFeVFuaGpMRk5CUVROQ0xHdEVRVUY1UTNOWkxITkNRVUZ6UWl4WFFVRXZSRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3d1FrRkJhVUowV1N4VFFVRnFRaXhGUVVFMFFqdEJRVU14UWl4VlFVRk5hVWtzUzBGQlN5eEhRVUZITEV0QlFVc3ZSeXhqUVVGTUxFTkJRVzlDYkVJc1UwRkJjRUlzUTBGQlpEdEJRVU5CTEZWQlFWRjVZeXhaUVVGU0xFZEJRWGxDZUZVc1MwRkJla0lzUTBGQlVYZFZMRmxCUVZJN1FVRkRRU3hWUVVGSlF5eHhRa0ZCU2l4RFFVZ3dRaXhEUVVzeFFqczdRVUZEUVN4VlFVRkpMRU5CUVVNc1MwRkJTMmhFTEU5QlFWWXNSVUZCYlVJN1FVRkRha0puUkN4UlFVRkJRU3h4UWtGQmNVSXNSMEZCUjJ4RkxITkNRVUZ6UWl4WFFVRTVReXhEUVVScFFpeERRVWRxUWpzN1FVRkRRU3haUVVGTmJVVXNUVUZCVFN4SFFVRkhNM05DTEhsQ1FVRkJMRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMRWxCUVROQ0xFTkJRV1k3UVVGRFFTeFpRVUZOTkhOQ0xFOUJRVThzUjBGQlJ6VnpRaXg1UWtGQlFTeERRVUZ4UWl4RFFVRkRNbk5DTEUxQlFYUkNMRVZCUVRoQ1FTeE5RVUU1UWl4RFFVRm9RanRCUVVOQlJpeFJRVUZCUVN4WlFVRlpMRU5CUVVOb1F5eERRVUZpTEVkQlFXbENiVU1zVDBGQlR5eEhRVUZITEVWQlFUTkNMRU5CVG1sQ0xFTkJVV3BDT3p0QlFVTkJMRmxCUVUxRExFMUJRVTBzUjBGQlJ6ZHpRaXg1UWtGQlFTeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeEpRVUV6UWl4RFFVRm1PMEZCUTBFc1dVRkJUVGh6UWl4UFFVRlBMRWRCUVVjNWMwSXNlVUpCUVVFc1EwRkJjVUlzUTBGQlF6WnpRaXhOUVVGMFFpeEZRVUU0UWtFc1RVRkJPVUlzUTBGQmFFSTdRVUZEUVVvc1VVRkJRVUVzV1VGQldTeERRVUZETjI5Q0xFTkJRV0lzUjBGQmFVSnJjRUlzVDBGQlR5eEhRVUZITEVOQlFWWXNSMEZCWTBFc1QwRkJUeXhIUVVGSExFVkJRWGhDTEVkQlFUWkNRU3hQUVVGUExFZEJRVWNzUlVGQmVFUTdRVUZEUkN4UFFWcEVMRU5CWTBFN1FVRmtRU3hYUVdWTE8wRkJRMGc3UVVGRFFTeG5Ra0ZCVVRkVkxFdEJRVXNzUTBGQlF6aFZMR0ZCUVdRN1FVRkRSU3hsUVVGTExFTkJRVXc3UVVGRFJVd3NXVUZCUVVFc2NVSkJRWEZDTEVkQlFVZHNSU3h6UWtGQmMwSXNRMEZCUTBVc1UwRkJMME03UVVGRFFYcFJMRmxCUVVGQkxFdEJRVXNzUTBGQlF6aFZMR0ZCUVU0c1IwRkJjMEl6YzBJc1NVRkJTU3hEUVVGRFNTeE5RVUZNTEV0QlFXZENMRWxCUVdoQ0xFZEJRWFZDZDI1Q0xHVkJRV1VzUTBGQlEwY3NVVUZCZGtNc1IwRkRiRUpJTEdWQlFXVXNRMEZCUTBrc1MwRkVjRUk3UVVGRlFUczdRVUZEUml4bFFVRkxMRU5CUVV3N1FVRkRSWE5GTEZsQlFVRkJMSEZDUVVGeFFpeEhRVUZIYkVVc2MwSkJRWE5DTEVOQlFVTkZMRk5CUVM5RE8wRkJRMEY2VVN4WlFVRkJRU3hMUVVGTExFTkJRVU00VlN4aFFVRk9MRWRCUVhOQ00zTkNMRWxCUVVrc1EwRkJRMGtzVFVGQlRDeExRVUZuUWl4SlFVRm9RaXhIUVVGMVFuZHVRaXhsUVVGbExFTkJRVU5GTEU5QlFYWkRMRWRCUTJ4Q1JpeGxRVUZsTEVOQlFVTkpMRXRCUkhCQ08wRkJSVUU3TzBGQlEwWXNaVUZCU3l4RFFVRk1PMEZCUTBWelJTeFpRVUZCUVN4eFFrRkJjVUlzUjBGQlIyeEZMSE5DUVVGelFpeERRVUZEUXl4WFFVRXZRenRCUVVOQmVGRXNXVUZCUVVFc1MwRkJTeXhEUVVGRE9GVXNZVUZCVGl4SFFVRnpRak56UWl4SlFVRkpMRU5CUVVOSkxFMUJRVXdzUzBGQlowSXNSMEZCYUVJc1IwRkJjMEozYmtJc1pVRkJaU3hEUVVGRFJTeFBRVUYwUXl4SFFVTnNRa1lzWlVGQlpTeERRVUZEUnl4UlFVUndRanRCUVVWQk96dEJRVU5HTEdWQlFVc3NRMEZCVER0QlFVTkJPMEZCUTBWMVJTeFpRVUZCUVN4eFFrRkJjVUlzUjBGQlIyeEZMSE5DUVVGelFpeERRVUZEUlN4VFFVRXZRenRCUVVOQmVsRXNXVUZCUVVFc1MwRkJTeXhEUVVGRE9GVXNZVUZCVGl4SFFVRnpRak56UWl4SlFVRkpMRU5CUVVOSkxFMUJRVXdzUzBGQlowSXNSMEZCYUVJc1IwRkJjMEozYmtJc1pVRkJaU3hEUVVGRFJTeFBRVUYwUXl4SFFVTnNRa1lzWlVGQlpTeERRVUZEUnl4UlFVUndRanRCUVVWQk8wRkJja0pLT3p0QlFYZENRU3h2UTBGQmFVSXNTMEZCU3paRkxHOUNRVUZNTEVOQlFUQkNMMVVzUzBGQlN5eERRVUZET0ZVc1lVRkJhRU1zUTBGQmFrSTdRVUZCUVN4WlFVRlJkRU1zUTBGQlVpeDVRa0ZCVVVFc1EwRkJVanRCUVVGQkxGbEJRVmMzYlVJc1EwRkJXQ3g1UWtGQlYwRXNRMEZCV0RzN1FVRkRRVFp2UWl4UlFVRkJRU3haUVVGWkxFTkJRVU5vUXl4RFFVRmlMRWRCUVdsQ1FTeERRVUZxUWp0QlFVTkJaME1zVVVGQlFVRXNXVUZCV1N4RFFVRkROMjlDTEVOQlFXSXNSMEZCYVVKQkxFTkJRV3BDTzBGQlEwUTdPMEZCUlVRc1YwRkJTekp2UWl4cFFrRkJUQ3hEUVVGMVFuWmpMRk5CUVhaQ0xFVkJRV3REZVdNc1dVRkJXU3hEUVVGRGFFTXNRMEZCTDBNc1JVRkJhMFJuUXl4WlFVRlpMRU5CUVVNM2IwSXNRMEZCTDBRc1JVRndSREJDTEVOQmMwUXhRanM3TzBGQlEwRXNWMEZCU3pSdlFpeHhRa0ZCVEN4alFVRXlRbmhqTEZOQlFUTkNMR3RFUVVGNVEzTlpMSE5DUVVGelFpeERRVUZEUXl4VFFVRm9SVHM3UVVGRFFTeFhRVUZMTUVVc2NVSkJRVXdzWTBGQk1rSnFaQ3hUUVVFelFpeHJSRUZCZVVNd1l5eHhRa0ZCZWtNN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxDdENRVUZ6UWpGakxGTkJRWFJDTEVWQlFXbERhMlFzVjBGQmFrTXNSVUZCT0VORExGZEJRVGxETEVWQlFUSkVPMEZCUVVFN08wRkJRM3BFTEZWQlFVMXNWaXhMUVVGTExFZEJRVWNzUzBGQlN5OUhMR05CUVV3c1EwRkJiMEpzUWl4VFFVRndRaXhEUVVGa08wRkJRMEVzVlVGQlRXOWtMRkZCUVZFc1IwRkJSM0IwUWl4NVFrRkJRU3hEUVVGeFFtdDBRaXhYUVVGeVFpeEZRVUZyUTBNc1YwRkJiRU1zUTBGQmFrSTdPMEZCUlVFc1ZVRkJTV3hXTEV0QlFVc3NRMEZCUTI5V0xHbENRVUZXTEVWQlFUWkNPMEZCUXpOQ2NGWXNVVUZCUVVFc1MwRkJTeXhEUVVGRGIxWXNhVUpCUVU0c1EwRkJkMEl6ZGtJc1RVRkJlRUk3UVVGRFJEczdRVUZEUkhWaExFMUJRVUZCTEV0QlFVc3NRMEZCUTI5V0xHbENRVUZPTEVkQlFUQkNjblJDTEdWQlFVRXNRMEZCVjI5MFFpeFJRVUZZTEVWQlFYRkNPMEZCUXpkRE0zSkNMRkZCUVVGQkxGRkJRVkVzUlVGQlJTeHZRa0ZCVFR0QlFVRkZMR2RDUVVGSkxFTkJRVU0yY2tJc1owSkJRVXdzUTBGQmMwSjBaQ3hUUVVGMFFqdEJRVUZyUXp0QlFVUlFMRTlCUVhKQ0xFTkJRVEZDTzBGQlIwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3clFrRkJjMEpCTEZOQlFYUkNMRVZCUVdsRGEyUXNWMEZCYWtNc1JVRkJPRU5ETEZkQlFUbERMRVZCUVRKRU8wRkJRVUU3TzBGQlEzcEVMRlZCUVUxc1ZpeExRVUZMTEVkQlFVY3NTMEZCU3k5SExHTkJRVXdzUTBGQmIwSnNRaXhUUVVGd1FpeERRVUZrTzBGQlEwRXNWVUZCVFc5a0xGRkJRVkVzUjBGQlIzQjBRaXg1UWtGQlFTeERRVUZ4UW10MFFpeFhRVUZ5UWl4RlFVRnJRME1zVjBGQmJFTXNRMEZCYWtJN08wRkJSVUVzVlVGQlNXeFdMRXRCUVVzc1EwRkJRM05XTEdsQ1FVRldMRVZCUVRaQ08wRkJRek5DZEZZc1VVRkJRVUVzUzBGQlN5eERRVUZEYzFZc2FVSkJRVTRzUTBGQmQwSTNka0lzVFVGQmVFSTdRVUZEUkRzN1FVRkRSSFZoTEUxQlFVRkJMRXRCUVVzc1EwRkJRM05XTEdsQ1FVRk9MRWRCUVRCQ2RuUkNMR1ZCUVVFc1EwRkJWMjkwUWl4UlFVRllMRVZCUVhGQ08wRkJRemRETTNKQ0xGRkJRVUZCTEZGQlFWRXNSVUZCUlN4dlFrRkJUVHRCUVVGRkxHZENRVUZKTEVOQlFVTXJja0lzWjBKQlFVd3NRMEZCYzBKNFpDeFRRVUYwUWp0QlFVRnJRenRCUVVSUUxFOUJRWEpDTEVOQlFURkNPMEZCUjBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzYlVKQlFWVTRXU3hOUVVGV0xFVkJRV3RDTzBGQlEyaENMRmRCUVV0QkxFMUJRVXdzUjBGQlkwRXNUVUZCWkR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzZVVKQlFXZENjRzlDTEVsQlFXaENMRVZCUVhOQ08wRkJRM0JDTEZWQlFVa3NRMEZCUTBFc1NVRkJUQ3hGUVVGWE8wRkJRMVFzWVVGQlMyZHdRaXhQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5FT3p0QlFVVkVMRlZCUVVrc1EwRkJReXhMUVVGTFJDeE5RVUZXTEVWQlFXdENPMEZCUTJoQ0xHTkJRVTBzU1VGQlNXeHpRaXhMUVVGS0xDdEVRVUZwUlcxRUxFbEJRV3BGTEhOQ1FVRnBSaXhMUVVGTGEwd3NTMEZCVEN4RFFVRlhkRU1zUlVGQk5VWXNPRUpCUVU0N1FVRkRSRHRCUVVOR08wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNkVUpCUVdOQkxFVkJRV1FzUlVGQmEwSTdRVUZEYUVJc1ZVRkJTU3hEUVVGRFFTeEZRVUZNTEVWQlFWTTdRVUZEVUN4aFFVRkxiMmRDTEU5QlFVd3NSMEZCWlN4SlFVRm1PMEZCUTBRN08wRkJSVVFzVlVGQlNTeERRVUZETEV0QlFVdEVMRTFCUVZZc1JVRkJhMEk3UVVGRGFFSXNZMEZCVFN4SlFVRkpiSE5DTEV0QlFVb3NOa1JCUVN0RUswd3NSVUZCTDBRc2MwSkJRVFpGTEV0QlFVdHpReXhMUVVGTUxFTkJRVmQwUXl4RlFVRjRSaXc0UWtGQlRqdEJRVU5FTzBGQlEwWTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3d5UWtGRFJUQkhMRk5CUkVZc1JVRlhSVHRCUVVGQkxIVkdRVVJKTEVWQlEwbzdRVUZCUVN4dlEwRlNSVEJGTEZOQlVVWTdRVUZCUVN4VlFWSkZRU3hUUVZGR0xHbERRVkpqTEUxQlVXUTdRVUZCUVN4dFEwRlFSUzlNTEZGQlQwWTdRVUZCUVN4VlFWQkZRU3hSUVU5R0xHZERRVkJoTEVWQlQySTdRVUZCUVN4VlFVNUZjV2hDTEZOQlRVWXNWVUZPUlVFc1UwRk5SanRCUVVGQkxITkRRVXhGUXl4WFFVdEdPMEZCUVVFc1ZVRk1SVUVzVjBGTFJpeHRRMEZNWjBJc1YwRkxhRUk3UVVGQlFTeHhRMEZLUlVNc1ZVRkpSanRCUVVGQkxGVkJTa1ZCTEZWQlNVWXNhME5CU21Vc1MwRkpaanRCUVVGQkxHOURRVWhGTjFnc1UwRkhSanRCUVVGQkxGVkJTRVZCTEZOQlIwWXNhVU5CU0dOM1Z5eHpRa0ZCYzBJc1EwRkJReTlYTEhGQ1FVRjJRaXhEUVVFMlEwOHNVMEZITTBRN1FVRkJRU3hWUVVaRmNrSXNVVUZGUml4VlFVWkZRU3hSUVVWR096dEJRVU5CTzBGQlEwRm5XaXhOUVVGQlFTeFRRVUZUTEVkQlFVZEJMRk5CUVZNc1NVRkJTU3hMUVVGTGNHVXNTMEZCVEN4RFFVRlhTeXhMUVVGd1F6czdRVUZGUVN4VlFVRkpMRU5CUVVNc1MwRkJTMFFzVjBGQlRDeERRVUZwUW5Wa0xIZENRVUZxUWl4RFFVRXdRMU1zVTBGQk1VTXNRMEZCVEN4RlFVRXlSRHRCUVVONlJDeGpRVUZOTEVsQlFVbDZjMElzUzBGQlNpeHBSRUZCYlVSNVV5eFRRVUZ1UkN4cFJFRkJiVWNzUzBGQlMzQkZMRXRCUVV3c1EwRkJWM1JETEVWQlFUbEhMRzFGUVVGT08wRkJRMFFzVDBGT1JDeERRVkZCT3pzN1FVRkRRVEpuUWl4TlFVRkJRU3hYUVVGWExFZEJRVWQ0UXl4UFFVRlBMRU5CUVVOM1F5eFhRVUZFTEVOQlFWQXNTMEZCZVVJdmNVSXNVMEZCZWtJc1IwRkRWblZ2UWl4UFFVRlBMRU5CUVVOM1F5eFhRVUZFTEVOQlJFY3NSMEZGVm5oRExFOUJRVThzUTBGQlEwc3NVMEZHV2l4RFFWUkJMRU5CWVVFN08wRkJRMEVzVlVGQlRYbERMR05CUVdNc1IwRkJSeXhMUVVGTGEwUXNhMEpCUVV3c1EwRkJkMEk3UVVGRE4wTjZSQ3hSUVVGQlFTeFRRVUZUTEVWQlFWUkJMRk5CUkRaRE8wRkJSVGREUXl4UlFVRkJRU3hYUVVGWExFVkJRVmhCTzBGQlJqWkRMRTlCUVhoQ0xFTkJRWFpDTEVOQlpFRXNRMEZ0UWtFN096dEJRVU5CTEZkQlFVc3ZXQ3hoUVVGTUxFTkJRVzFDYkVNc1UwRkJia0lzUlVGQk9FSTdRVUZETlVKMVlTeFJRVUZCUVN4alFVRmpMRVZCUVdSQkxHTkJSRFJDTzBGQlJUVkNOV2hDTEZGQlFVRkJMRkZCUVZFc1JVRkJVa0VzVVVGR05FSTdRVUZITlVKdmFrSXNVVUZCUVVFc1UwRkJVeXhGUVVGRk4zTkNMRk5CU0dsQ08wRkJTVFZDSzNOQ0xGRkJRVUZCTEZOQlFWTXNSVUZCUlM5elFpeFRRVXBwUWp0QlFVczFRbXQwUWl4UlFVRkJRU3hUUVVGVExFVkJRVVZzZEVJc1UwRk1hVUk3UVVGTk5VSnRkRUlzVVVGQlFVRXNVMEZCVXl4RlFVRkZiblJDTEZOQlRtbENPMEZCVHpWQ2QzVkNMRkZCUVVGQkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVUXNSVUZCU1N4RFFVRktMRU5CVUdsQ08wRkJVVFZDUXl4UlFVRkJRU3hUUVVGVExFVkJRVVVzUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RFFWSnBRanRCUVZNMVFucEVMRkZCUVVGQkxGVkJRVlVzUlVGQlZrRXNWVUZVTkVJN1FVRlZOVUkzV0N4UlFVRkJRU3hUUVVGVExFVkJRVlJCTEZOQlZqUkNPMEZCVnpWQ2NrSXNVVUZCUVVFc1VVRkJVU3hGUVVGU1FTeFJRVmcwUWp0QlFWazFRbk5pTEZGQlFVRkJMRmxCUVZrc1JVRkJSVHRCUVVGRk4wSXNWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJRVXc3UVVGQlVUZHRRaXhWUVVGQlFTeERRVUZETEVWQlFVVTdRVUZCV0N4VFFWcGpPMEZCWVRWQ05tOUNMRkZCUVVGQkxGbEJRVmtzUlVGQlJUdEJRVUZGYUVNc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTEVOQlFVdzdRVUZCVVRkdFFpeFZRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkJXQ3hUUVdKak8wRkJZelZDYlhCQ0xGRkJRVUZCTEdGQlFXRXNSVUZCUlM5RkxHVkJRV1VzUTBGQlEwTXNVMEZrU0R0QlFXVTFRblpYTEZGQlFVRkJMRlZCUVZVc1JVRkJSU3d3UTBGQlIyZEVMRk5CUVV3c1JVRkJhVUlzUlVGQmFrSTdRVUZtYTBJc1QwRkJPVUk3UVVGcFFrRXNWMEZCUzIxV0xGZEJRVXdzUTBGQmFVSTNXaXhUUVVGcVFpeEpRVUU0UWpCRkxGTkJRVGxDTEVOQmNrTkJMRU5CZFVOQk96dEJRVU5CTEZkQlFVc3lWaXh6UWtGQlRDeERRVUUwUW5KaExGTkJRVFZDTEVWQlFYVkRNRVVzVTBGQmRrTXNSVUY0UTBFc1EwRXdRMEU3T3p0QlFVTkJMRlZCUVVsM1ZpeFZRVUZLTEVWQlFXZENPMEZCUTJRc1dVRkJUWGRETEhGQ1FVRnhRaXhIUVVGSExFdEJRVXRvUkN4UFFVRk1MRWRCUXpGQ2JFSXNjMEpCUVhOQ0xFTkJRVU5GTEZOQlJFY3NSMEZGTVVKR0xITkNRVUZ6UWl4WFFVWXhRanM3UVVGSFFTeGhRVUZMWjBVc2NVSkJRVXdzWTBGQk1rSjRZeXhUUVVFelFpeHJSRUZCZVVOeldTeHpRa0ZCYzBJc1YwRkJMMFE3TzBGQlEwRXNZVUZCU3pKRkxIRkNRVUZNTEdOQlFUSkNhbVFzVTBGQk0wSXNhMFJCUVhsRE1HTXNjVUpCUVhwRE8wRkJRMFE3UVVGRFJqdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3MFFrRkRSVEZqTEZOQlJFWXNSVUZQUlR0QlFVRkJMSFZHUVVSSkxFVkJRMG83UVVGQlFTeHZRMEZLUlRCRkxGTkJTVVk3UVVGQlFTeFZRVXBGUVN4VFFVbEdMR2xEUVVwakxFOUJTV1E3UVVGQlFTeHZRMEZJUlhKRExGTkJSMFk3UVVGQlFTeFZRVWhGUVN4VFFVZEdMR2xEUVVoamQxY3NjMEpCUVhOQ0xFTkJRVU12Vnl4eFFrRkJka0lzUTBGQk5rTlBMRk5CUnpORU8wRkJRVUVzVlVGR1JYSkNMRkZCUlVZc1ZVRkdSVUVzVVVGRlJqczdRVUZEUVR0QlFVTkJMRmRCUVV0clFpeGhRVUZNTEVOQlFXMUNiRU1zVTBGQmJrSXNSVUZCT0VJN1FVRkROVUp4UXl4UlFVRkJRU3hUUVVGVExFVkJRVlJCTEZOQlJEUkNPMEZCUlRWQ2NrSXNVVUZCUVVFc1VVRkJVU3hGUVVGU1FTeFJRVVkwUWp0QlFVYzFRbFVzVVVGQlFVRXNWVUZCVlN4RlFVRkZMREJEUVVGSFowUXNVMEZCVEN4RlFVRnBRaXhGUVVGcVFqdEJRVWhyUWl4UFFVRTVRanRCUVV0QkxGZEJRVXR4Vml4WlFVRk1MRU5CUVd0Q0wxb3NVMEZCYkVJc1NVRkJLMEl3UlN4VFFVRXZRanRCUVVORU96czdWMEZGUkN4blFrRkJUM3BUTEZOQlFWQXNSVUZCYTBJN1FVRkJRVHM3UVVGRGFFSXNjVWxCUVdGQkxGTkJRV0lzUlVGRVowSXNRMEZIYUVJN096dEJRVU5CTEZWQlFVa3NTMEZCUzNsdVFpeFBRVUZVTEVWQlFXdENPMEZCUTJoQ0xHRkJRVXRyUlN4alFVRk1PMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzWVVGQlMwTXNaMEpCUVV3N1FVRkRSRHM3UVVGRlJDeFZRVUZOUXl4WlFVRlpMRWRCUVVjeGRFSXNTVUZCU1N4RFFVRkRPRUlzUjBGQlRDeERRVUZUUkN4VFFVRlVMRVZCUVc5Q01tMUNMRkZCUVhCQ0xFbEJRV2RETEVsQlFYSkVPMEZCUTBFc1ZVRkJTVzFHTEZsQlFWa3NSMEZCUnl4TFFVRnVRaXhEUVZoblFpeERRV0ZvUWpzN1FVRkRRVzVxUWl4TlFVRkJRU3hOUVVGTkxFTkJRVU50UWl4UFFVRlFMRU5CUVdVc1MwRkJTemhrTEZkQlFYQkNMRVZCUVdsRGVuRkNMRTlCUVdwRExFTkJRWGxETEd0Q1FVRXlRanRCUVVGQk8wRkJRVUVzV1VGQmVrSTBVU3hUUVVGNVFqdEJRVUZCTEZsQlFXUjNRaXhSUVVGak96dEJRVU5zUlN4WlFVRk5XQ3hQUVVGUExFZEJRVWNzVFVGQlNTeERRVUZEU3l4alFVRk1MRU5CUVc5Q2JFSXNVMEZCY0VJc1EwRkJhRUlzUTBGRWEwVXNRMEZIYkVVN08wRkJRMEVzV1VGQlNXRXNUMEZCVHl4RFFVRkRVeXhSUVVGU0xFbEJRVzlDVkN4UFFVRlBMRU5CUVVOeFdpeFZRVUZvUXl4RlFVRTBRenRCUVVNeFEzSmFMRlZCUVVGQkxFOUJRVThzUTBGQlEzZGpMR2xDUVVGU0xFTkJRVEJDY0dkQ0xFOUJRVEZDTEVOQlFXdERhRXdzVTBGQmJFTTdRVUZEUVRSUExGVkJRVUZCTEU5QlFVOHNRMEZCUXpCakxHbENRVUZTTEVOQlFUQkNkR2RDTEU5QlFURkNMRU5CUVd0RGFFd3NVMEZCYkVNN1FVRkRSQ3hUUVZCcFJTeERRVk5zUlRzN08wRkJRMEVzV1VGQlNUUlBMRTlCUVU4c1EwRkJRMkVzVlVGQlVpeERRVUZ0UWtZc1VVRkJia0lzUlVGQk5rSkdMRkZCUVdwRExFVkJRVEpETzBGQlEzcERMR05CUVUwd1l5eFJRVUZSTEVkQlFVY3NUVUZCU1N4RFFVRkRjR2xDTEV0QlFVd3NRMEZCVjNsRkxHZENRVUZZTEVOQlFUUkNLMVlzZFVKQlFUVkNMRU5CUTJad1Z5eFRRVVJsTEVWQlEwcDNRaXhSUVVSSkxFVkJRMDBzUjBGRVRpeERRVUZxUWpzN1FVRkhRU3hqUVVGTmVXTXNVVUZCVVN4SFFVRkhMRTFCUVVrc1EwRkJRM0pwUWl4TFFVRk1MRU5CUVZkNVJTeG5Ra0ZCV0N4RFFVRTBRaXRXTEhWQ1FVRTFRaXhEUVVObWNGY3NVMEZFWlN4RlFVTktkMElzVVVGRVNTeEZRVU5OTEVkQlJFNHNRMEZCYWtJN08wRkJTVUVzWTBGQlNUQmpMRTlCUVU4c1IwRkJSM0prTEU5QlFVOHNRMEZCUXpCYUxHTkJRVklzUTBGQmRVSkRMRTFCUVhaQ0xFTkJRVGhDUXl4RFFVRTFRenRCUVVOQkxHTkJRVWt3UkN4UFFVRlBMRWRCUVVkMFpDeFBRVUZQTEVOQlFVTXdXaXhqUVVGU0xFTkJRWFZDUXl4TlFVRjJRaXhEUVVFNFFqVnRRaXhEUVVFMVF5eERRVlI1UXl4RFFWZDZRenM3UVVGRFFTeGpRVUZKTEUxQlFVa3NRMEZCUTJkdFFpeGxRVUZNTEVsQlFYZENMRU5CUVVOdFJTeFpRVUUzUWl4RlFVRXlRenRCUVVONlF5eG5Ra0ZCVFVzc1YwRkJWeXhIUVVGSGRtUXNUMEZCVHl4RFFVRkRNRm9zWTBGQlVpeERRVUYxUWtjc1ZVRkJka0lzUTBGQmEwTkVMRU5CUVhSRU8wRkJRMEVzWjBKQlFVMDBSQ3hYUVVGWExFZEJRVWQ0WkN4UFFVRlBMRU5CUVVNd1dpeGpRVUZTTEVOQlFYVkNSeXhWUVVGMlFpeERRVUZyUXpsdFFpeERRVUYwUkR0QlFVTkJMR2RDUVVGTk1IRkNMRmxCUVZrc1IwRkJSemx5UWl4M1FrRkJRU3hEUVVOdVFrRXNPRUpCUVVFc1EwRkRSU3hEUVVGRE5ISkNMRmRCUVVRc1JVRkJZME1zVjBGQlpDeERRVVJHTEVWQlJVVXNRMEZCUTBnc1QwRkJSQ3hGUVVGVlF5eFBRVUZXTEVOQlJrWXNRMEZFYlVJc1EwRkJja0k3TzBGQlQwRXNaMEpCUVVsSExGbEJRVmtzU1VGQlNUTkdMR05CUVhCQ0xFVkJRVzlETzBGQlEyeERiMFlzWTBGQlFVRXNXVUZCV1N4SFFVRkhMRWxCUVdZN1FVRkRSRHRCUVVOR096dEJRVVZFYkdRc1ZVRkJRVUVzVDBGQlR5eERRVUZETUZvc1kwRkJVaXhEUVVGMVFrY3NWVUZCZGtJc1EwRkJhME5FTEVOQlFXeERMRWRCUVhORGVVUXNUMEZCZEVNN1FVRkRRWEprTEZWQlFVRkJMRTlCUVU4c1EwRkJRekJhTEdOQlFWSXNRMEZCZFVKSExGVkJRWFpDTEVOQlFXdERPVzFDTEVOQlFXeERMRWRCUVhORGRYRkNMRTlCUVhSRExFTkJOVUo1UXl4RFFUaENla003TzBGQlEwRXNZMEZCU1hSa0xFOUJRVThzUTBGQlEzRmFMRlZCUVZvc1JVRkJkMEk3UVVGRGRFSXhia0lzV1VGQlFVRXNkMEpCUVVFc1EwRkRSU3hEUVVSR0xFVkJSVVZ4VHl4UFFVRlBMRU5CUVVNMFlpeFpRVUZTTEVOQlFYRkNhRU1zUTBGQmNrSXNSMEZCZVVJMVdpeFBRVUZQTEVOQlFVTTBZaXhaUVVGU0xFTkJRWEZDYUVNc1EwRkdhRVFzUlVGSFJUVmFMRTlCUVU4c1EwRkJRelpqTEZOQlNGWXNSVUZKUlRkakxFOUJRVThzUTBGQlEzVmlMRk5CU2xZc1JVRkxSWFppTEU5QlFVOHNRMEZCUTJ0aUxGTkJURlk3UVVGUFFXMURMRmxCUVVGQkxFOUJRVThzU1VGQlNYSmtMRTlCUVU4c1EwRkJRelpqTEZOQlFWSXNRMEZCYTBJc1EwRkJiRUlzUTBGQldEdEJRVU5CYkhKQ0xGbEJRVUZCTEhkQ1FVRkJMRU5CUTBVc1EwRkVSaXhGUVVWRmNVOHNUMEZCVHl4RFFVRkROR0lzV1VGQlVpeERRVUZ4UWpkdlFpeERRVUZ5UWl4SFFVRjVRbWxPTEU5QlFVOHNRMEZCUXpSaUxGbEJRVklzUTBGQmNVSTNiMElzUTBGR2FFUXNSVUZIUldsT0xFOUJRVThzUTBGQlF6aGpMRk5CU0ZZc1JVRkpSVGxqTEU5QlFVOHNRMEZCUTNkaUxGTkJTbFlzUlVGTFJYaGlMRTlCUVU4c1EwRkJRMjlpTEZOQlRGWTdRVUZQUVd0RExGbEJRVUZCTEU5QlFVOHNTVUZCU1hSa0xFOUJRVThzUTBGQlF6aGpMRk5CUVZJc1EwRkJhMElzUTBGQmJFSXNRMEZCV0R0QlFVTkVMRmRCYUVSM1F5eERRV3RFZWtNN096dEJRVU5CTEdOQlFVMDVjVUlzVFVGQlRTeEhRVUZIVEN4dlFrRkJRU3hEUVVGblFuTnlRaXhaUVVGWkxFZEJRVWRxWkN4UFFVRlBMRU5CUVVOc1NTeFJRVUYyUXl4RlFVRnBSQ3hEUVVGcVJDeEZRVUZ2UkN4RFFVRndSQ3hEUVVGbU8wRkJRMEYxYkVJc1ZVRkJRVUVzVDBGQlR5eEhRVUZITVhKQ0xHMUNRVUZCTEVOQlFXVjNja0lzVVVGQlppeEZRVUY1UWtVc1QwRkJla0lzUlVGQmEwTnlja0lzVFVGQmJFTXNRMEZCVmp0QlFVTkJjM0pDTEZWQlFVRkJMRTlCUVU4c1IwRkJSek55UWl4dFFrRkJRU3hEUVVGbGVYSkNMRkZCUVdZc1JVRkJlVUpGTEU5QlFYcENMRVZCUVd0RGRISkNMRTFCUVd4RExFTkJRVllzUTBGeVJIbERMRU5CZFVSNlF6czdRVUZEUVN4blFrRkJTU3hEUVVGREswa3NTMEZCVEN4RFFVRlhlVVVzWjBKQlFWZ3NRMEZCTkVKdFJ5eDFRa0ZCTlVJc1EwRkRSWGhITEZOQlJFWXNSVUZGUlhkQ0xGRkJSa1lzUlVGSFJTeEhRVWhHTEVWQlNVVXdZeXhQUVVwR096dEJRVTFCTEdkQ1FVRkpMRU5CUVVOMGFVSXNTMEZCVEN4RFFVRlhlVVVzWjBKQlFWZ3NRMEZCTkVKdFJ5eDFRa0ZCTlVJc1EwRkRSWGhITEZOQlJFWXNSVUZGUlhkQ0xGRkJSa1lzUlVGSFJTeEhRVWhHTEVWQlNVVXlZeXhQUVVwR08wRkJUVVE3UVVGRFJpeFBRUzlGUkRzN1FVRnBSa0VzVlVGQlNTeERRVUZEU2l4WlFVRkVMRWxCUVdsQ0xFTkJRVU1zUzBGQlMyNUZMR1ZCUVROQ0xFVkJRVFJETzBGQlF6RkRPMEZCUTBRc1QwRnFSMlVzUTBGdFIyaENPenM3UVVGRFFXaG1MRTFCUVVGQkxFMUJRVTBzUTBGQlEyMUNMRTlCUVZBc1EwRkJaU3hMUVVGTFoyVXNXVUZCY0VJc1JVRkJhME16Y1VJc1QwRkJiRU1zUTBGQk1FTXNhMEpCUVRKQ08wRkJRVUU3UVVGQlFTeFpRVUY2UWpSUkxGTkJRWGxDTzBGQlFVRXNXVUZCWkhkQ0xGRkJRV003TzBGQlEyNUZMRmxCUVUxclJDeFRRVUZUTEVkQlFVY3NUVUZCU1N4RFFVRkRlRVFzWTBGQlRDeERRVUZ2UW14Q0xGTkJRWEJDTEVWQlFTdENNRUlzVlVGQkwwSXNRMEZCTUVOR0xGRkJRVEZETEVOQlFXeENPenRCUVVWQkxGbEJRVWxyUkN4VFFVRlRMRU5CUVVOd1JDeFJRVUZrTEVWQlFYZENPMEZCUTNSQ0xHZENRVUZKTEVOQlFVTXhSaXhMUVVGTUxFTkJRVmQ1UlN4blFrRkJXQ3hEUVVFMFFtZEtMR0ZCUVRWQ0xFTkJRVEJEY2tvc1UwRkJNVU1zUlVGQmNVUjNRaXhSUVVGeVJEdEJRVU5FTzBGQlEwWXNUMEZPUkR0QlFVOUVPenM3VjBGRlJDeHpRa0ZCWVR0QlFVRkJPenRCUVVOWU8wRkJRMG83UVVGRFFUdEJRVU5CTzBGQlEwa3NWVUZCVFRGR0xFZEJRVWNzUjBGQlJ5eHJTVUZCV2pzN1FVRkZRV3hDTEUxQlFVRkJMRTFCUVUwc1EwRkJRMWNzWjBKQlFWQXNRMEZCZDBKUExFZEJRWGhDTEVWQlFUWkNPMEZCUXpOQ08wRkJRMDQ3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFdka0xGRkJRVUZCTEUxQlFVMHNSVUZCUlR0QlFVTk9ibE1zVlVGQlFVRXNSMEZCUnl4RlFVRkZPMEZCUVVFc2JVSkJRVTBzVFVGQlNTeERRVUZEYlZNc1RVRkJXRHRCUVVGQkxGZEJSRU03UVVGRlRteFRMRlZCUVVGQkxFZEJRVWNzUlVGQlJTeGhRVUZCYTFNc1RVRkJUU3hGUVVGSk8wRkJRVVVzYTBKQlFVa3NRMEZCUTBFc1RVRkJUQ3hIUVVGalFTeE5RVUZrTzBGQlFYTkNPMEZCUm1wRE8wRkJUbTFDTEU5QlFUZENPMEZCV1VGc1pTeE5RVUZCUVN4TlFVRk5MRU5CUVVOdlNDeE5RVUZRTEVOQlFXTnNSeXhIUVVGa0xFVkJRVzFDTzBGQlEycENPMEZCUTA0N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OY1dVc1VVRkJRVUVzYVVKQlFXbENMRVZCUVVVc1MwRkJTMEVzYVVKQlFVd3NRMEZCZFVJeFlTeEpRVUYyUWl4RFFVRTBRaXhKUVVFMVFpeERRVkJHT3p0QlFWRnFRanRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEVFRKaExGRkJRVUZCTEd0Q1FVRnJRaXhGUVVGRkxFdEJRVXRCTEd0Q1FVRk1MRU5CUVhkQ00yRXNTVUZCZUVJc1EwRkJOa0lzU1VGQk4wSXNRMEZrU0RzN1FVRmxha0k3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTAxcFppeFJRVUZCUVN4VFFVRlRMRVZCUVVVc1MwRkJTMEVzVTBGQlRDeERRVUZsYW1Zc1NVRkJaaXhEUVVGdlFpeEpRVUZ3UWl4RFFYSkNUVHM3UVVGelFtcENPMEZCUTA0N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OYTJZc1VVRkJRVUVzWlVGQlpTeEZRVUZGTEV0QlFVdEJMR1ZCUVV3c1EwRkJjVUpzWml4SlFVRnlRaXhEUVVFd1FpeEpRVUV4UWl4RFFUVkNRVHM3UVVFMlFtcENPMEZCUTA0N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OYldZc1VVRkJRVUVzWVVGQllTeEZRVUZGTEV0QlFVdEJMR0ZCUVV3c1EwRkJiVUp1Wml4SlFVRnVRaXhEUVVGM1FpeEpRVUY0UWp0QlFXNURSU3hQUVVGdVFqdEJRWE5EUVN4aFFVRlBNMFFzUjBGQlVEdEJRVU5FT3pzN1YwRjJka0pFTERKQ1FVRjVRaXRwUWl4SFFVRjZRaXhGUVVFNFFqdEJRVU0xUWl4aFFVRlBMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUlVGQlR5eERRVUZRTEVOQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4NVFrRkJkVUpCTEVkQlFYWkNMRVZCUVRSQ08wRkJRekZDTEdGQlFVOHNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVWQlFXRXNRMEZCWWl4RlFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4RFFVRnVRaXhGUVVGelFpeERRVUYwUWl4RlFVRjVRaXhEUVVGNlFpeEZRVUUwUWl4RFFVRTFRaXhGUVVFclFpeERRVUV2UWl4RlFVRnJReXhEUVVGc1F5eEZRVUZ4UXl4RFFVRnlReXhGUVVGM1F5eERRVUY0UXl4RlFVRXlReXhEUVVFelF5eEZRVUU0UXl4RFFVRTVReXhEUVVGUU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzTmtKQlFUSkNRU3hIUVVFelFpeEZRVUZ0UlR0QlFVRkJMRlZCUVc1RFF5eGhRVUZ0UXl4MVJVRkJia0p5U0N4UFFVRlBMRU5CUVVOTExGTkJRVmM3UVVGRGFrVXNWVUZCVFdsSUxGRkJRVkVzUjBGQlIzWnpRaXhuUTBGQlFTeERRVUUwUWl4TFFVRkxlWE5DTEdWQlFVd3NRMEZCY1VKS0xFZEJRWEpDTEVOQlFUVkNMRU5CUVdwQ08wRkJSVUVzWVVGQlQzSnpRaXd5UWtGQlFTeERRVUYxUW5OelFpeGhRVUYyUWl4RlFVRnpRME1zVVVGQmRFTXNRMEZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc1owTkJRVGhDU1N4TFFVRTVRaXhGUVVGeFEwTXNSMEZCY2tNc1JVRkJNRU03UVVGRGVFTXNWVUZCVFRORkxFTkJRVU1zUjBGQlIycHZRaXgzUWtGQlFTeERRVUZ2UWpSelFpeEhRVUZ3UWl4RFFVRldMRU5CUkhkRExFTkJSM2hET3p0QlFVTkJMRlZCUVUxNGNrSXNRMEZCUXl4SFFVRkhjRUlzZDBKQlFVRXNRMEZCYjBJeWMwSXNTMEZCY0VJc1NVRkJOa0lzUlVGQmRrTXNRMEZLZDBNc1EwRk5lRU03TzBGQlEwRXNZVUZCVHp0QlFVRkZNVVVzVVVGQlFVRXNRMEZCUXl4RlFVRkVRU3hEUVVGR08wRkJRVXMzYlVJc1VVRkJRVUVzUTBGQlF5eEZRVUZFUVR0QlFVRk1MRTlCUVZBN1FVRkRSRHM3TzFkQkswUkVMR3REUVVGblEybHlRaXhIUVVGb1F5eEZRVUZ4UXp0QlFVTnVReXhoUVVGUFFTeEhRVUZITEZsQlFWbHFhMElzVFVGQmRFSTdRVUZEUkRzN096dEZRV3BRYTBOakxEUkNRVUZCTEVOQlEyNURiMHdzY1VOQlJHMURMRVZCUlc1RGJFY3NOa05CUm0xRE96dEJRV3N6UW5KRExHdEZRVUZsYVZrc2MwSkJRV1k3T3p0QlF6azNRa0U3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVdGQk8wRkJRMEU3UVVGSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVTkJMRWxCUVUxM1J5eE5RVUZOTEVkQlFVYzdRVUZEWWp0QlFVTkdPMEZCUTBFN1FVRkRSWEpvUWl4RlFVRkJRU3hOUVVGTkxFVkJRVTVCTEUxQlNtRTdPMEZCUzJJN1FVRkRSanRCUVVOQk8wRkJRMFZOTEVWQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGU1lUczdRVUZUWWp0QlFVTkdPMEZCUTBFN1FVRkRSVU1zUlVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVZwaE96dEJRV0ZpTzBGQlEwWTdRVUZEUVR0QlFVTkZReXhGUVVGQlFTeFBRVUZQTEVWQlFWQkJMRTlCYUVKaE96dEJRV2xDWWp0QlFVTkdPMEZCUTBFN1FVRkRSVU1zUlVGQlFVRXNUMEZCVHl4RlFVRlFRU3hQUVhCQ1lUczdRVUZ4UW1JN1FVRkRSanRCUVVOQk8wRkJRMFZETEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzVlVGNFFtRTdPMEZCZVVKaU8wRkJRMFk3UVVGRFFUdEJRVU5GUnl4RlFVRkJRU3hYUVVGWExFVkJRVmhCTEZkQk5VSmhPenRCUVRaQ1lqdEJRVU5HTzBGQlEwRTdRVUZEUlVNc1JVRkJRVUVzVVVGQlVTeEZRVUZTUVN4UlFXaERZVHM3UVVGcFEySTdRVUZEUmp0QlFVTkJPMEZCUTBWRExFVkJRVUZCTEU5QlFVOHNSVUZCVUVFc1QwRndRMkU3TzBGQmNVTmlPMEZCUTBZN1FVRkRRVHRCUVVORlJ5eEZRVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJlRU5oT3p0QlFYbERZanRCUVVOR08wRkJRMEU3UVVGRFJVTXNSVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RVUZOUVR0QlFUVkRUeXhEUVVGbU8wRkJPRU5CTEN0RFFVRmxPMEZCUTJJN1FVRkRSanRCUVVOQk8wRkJRMFZyUWl4RlFVRkJRU3huUWtGQlowSXNSVUZCYUVKQkxIbENRVXBoT3p0QlFVdGlPMEZCUTBZN1FVRkRRVHRCUVVORk9GTXNSVUZCUVVFc1kwRkJZeXhGUVVGa1FTeDFRa0ZTWVRzN1FVRlRZanRCUVVOR08wRkJRMEU3UVVGRFJWRXNSVUZCUVVFc1YwRkJWeXhGUVVGWVFTeHBRa0ZhWVRzN1FVRmhZanRCUVVOR08wRkJRMEU3UVVGRFJUVkpMRVZCUVVGQkxHVkJRV1VzUlVGQlprRXNjVUpCYUVKaE96dEJRV2xDWWp0QlFVTkdPMEZCUTBFN1FVRkRSWGRFTEVWQlFVRkJMR05CUVdNc1JVRkJaRUVzYjBKQmNFSmhPenRCUVhGQ1lqdEJRVU5HTzBGQlEwRTdRVUZEUlhSQ0xFVkJRVUZCTEZWQlFWVXNSVUZCVmtFc1owSkJlRUpoT3p0QlFYbENZanRCUVVOR08wRkJRMEU3UVVGRFJTdEhMRVZCUVVGQkxHOUNRVUZ2UWl4RlFVRndRa0VzTUVKQk5VSmhPenRCUVRaQ1lqdEJRVU5HTzBGQlEwRTdRVUZEUlhaR0xFVkJRVUZCTEZsQlFWa3NSVUZCV2tFc2EwSkJhRU5oT3p0QlFXbERZanRCUVVOR08wRkJRMEU3UVVGRFJUSkNMRVZCUVVGQkxGbEJRVmtzUlVGQldrRXNhMEpCY0VOaE96dEJRWEZEWWp0QlFVTkdPMEZCUTBFN1FVRkRSWGhITEVWQlFVRkJMR05CUVdNc1JVRkJaRUVzZFVKQmVFTmhPMEZCTUVOaWVWWXNSVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RVEZEWVRzN1FVRXlRMkk3UVVGRFJqdEJRVU5CTzBGQlEwVjRUU3hGUVVGQlFTeGxRVUZsTEVWQlFXWkJMR1ZCT1VOaE96dEJRU3REWWp0QlFVTkdPMEZCUTBFN1FVRkRSVWNzUlVGQlFVRXNjVUpCUVhGQ0xFVkJRWEpDUVN4eFFrRnNSR0U3TzBGQmJVUmlPMEZCUTBZN1FVRkRRVHRCUVVORk1rSXNSVUZCUVVFc1kwRkJZeXhGUVVGa1FTeGpRVUZqUVR0QlFYUkVSQ3hEUVVGbUxFVTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTI1R1FUdEJRVU5CTzBGQlJVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEpRVU5OTWtzN096czdPenM3TzBGQlEwbzdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSU3h0UTBGQk5rSkRMRWxCUVRkQ0xFVkJRVzFET1hCQ0xFZEJRVzVETEVWQlFUQkVPMEZCUVVFN08wRkJRVUVzVlVGQmJFSXJjRUlzVjBGQmEwSXNkVVZCUVVvc1JVRkJTVHM3UVVGRGVFUXNWVUZCU1N4NVFrRkJUeTl3UWl4SFFVRlFMRTFCUVdVc1VVRkJaaXhKUVVFeVFrRXNSMEZCUnl4TFFVRkxMRWxCUVhaRExFVkJRVFpETzBGQlF6TkRMR05CUVUwc1NVRkJTV3hKTEV0QlFVb3NhVVJCUTI5RFozbENMRWxCUkhCRExITkRRVUZPTzBGQlIwUXNUMEZNZFVRc1EwRlBlRVE3T3p0QlFVTkJMRlZCUVUxRkxGZEJRVmNzUjBGQlJ5eExRVUZMUXl4blFrRkJUQ3hEUVVGelFtcHhRaXhIUVVGMFFpeERRVUZ3UWpzN1FVRkZRU3hWUVVGTmEzRkNMRk5CUVZNc1IwRkJSeXhEUVVGRExGTkJRVVFzUlVGQldTeFZRVUZhTEVOQlFXeENPMEZCUTBFc1ZVRkJUVU1zWVVGQllTeEhRVUZITEcxRFFVRjBRanRCUVVOQkxGVkJRVTFETEZsQlFWa3NSMEZCUnl4VlFVRnlRaXhEUVZwM1JDeERRV040UkRzN1FVRkRRU3hWUVVGTlF5eFpRVUZaTEVkQlFVY3NSVUZCY2tJN1FVRkRRU3hWUVVGSk4zZENMRTFCUVUwc1IwRkJSelIzUWl4WlFVRlpMRU5CUVVORkxFbEJRV0lzUTBGQmEwSlNMRWxCUVd4Q0xFTkJRV0k3TzBGQlJVRXNZVUZCVDNSM1FpeE5RVUZOTEV0QlFVc3NTVUZCYkVJc1JVRkJkMEk3UVVGRGRFSTJkMElzVVVGQlFVRXNXVUZCV1N4RFFVRkRMM0ZDTEVsQlFXSXNRMEZCYTBJN1FVRkRhRUpwY2tJc1ZVRkJRVUVzUzBGQlN5eEZRVUZGTDNkQ0xFMUJRVTBzUTBGQlExa3NTMEZFUlR0QlFVVm9RbTkzUWl4VlFVRkJRU3hIUVVGSExFVkJRVVZvZUVJc1RVRkJUU3hEUVVGRFdTeExRVUZRTEVkQlFXVmFMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVTRzUTBGQlZVa3NUVUZHWkR0QlFVZG9RbXQzUWl4VlFVRkJRU3hKUVVGSkxFVkJRVVYwZDBJc1RVRkJUU3hEUVVGRExFTkJRVVE3UVVGSVNTeFRRVUZzUWp0QlFVMUJRU3hSUVVGQlFTeE5RVUZOTEVkQlFVYzBkMElzV1VGQldTeERRVUZEUlN4SlFVRmlMRU5CUVd0Q1VpeEpRVUZzUWl4RFFVRlVPMEZCUTBRN08wRkJSVVFzVlVGQlRWY3NUVUZCVFN4SFFVRkhMRVZCUVdZN1FVRkRRU3hWUVVGSmNuZENMRXRCUVVzc1IwRkJSeXhEUVVGYU8wRkJRMEVzVlVGQlNYTjNRaXhqUVVGS08wRkJRMEVzVlVGQlNVTXNiMEpCUVc5Q0xFZEJRVWNzUlVGQk0wSTdRVUZEUVU0c1RVRkJRVUVzV1VGQldTeERRVUZETVhkQ0xFOUJRV0lzUTBGQmNVSXNWVUZCUVdsNFFpeFhRVUZYTEVWQlFVazdRVUZEYkVNc1dVRkJUVU1zVFVGQlRTeEhRVUZIWml4SlFVRkpMRU5CUVVOeWRVSXNTMEZCVEN4RFFVRlhja0lzUzBGQldDeEZRVUZyUW5kM1FpeFhRVUZYTEVOQlFVTk1MRXRCUVRsQ0xFTkJRV1k3TzBGQlJVRXNXVUZCU1Uwc1RVRkJUU3hMUVVGTExFVkJRV1lzUlVGQmJVSTdRVUZEYWtJN1FVRkRRVW9zVlVGQlFVRXNUVUZCVFN4RFFVRkRibkpDTEVsQlFWQXNRMEZEUlN4TFFVRkpMRU5CUVVOM2NrSXNXVUZCVEN4RFFVRnJRa1FzVFVGQmJFSXNSVUZCTUVKaUxGZEJRVEZDTEVWQlFYVkRWeXh2UWtGQmRrTXNRMEZFUmp0QlFVbEJRU3hWUVVGQlFTeHZRa0ZCYjBJc1IwRkJSeXhGUVVGMlFqdEJRVU5FT3p0QlFVVkVSQ3hSUVVGQlFTeGpRVUZqTEVkQlFVZFFMR0ZCUVdFc1EwRkJRMGNzU1VGQlpDeERRVUZ0UWswc1YwRkJWeXhEUVVGRFpDeEpRVUV2UWl4RFFVRnFRanM3UVVGRlFTeFpRVUZKV1N4alFVRmpMRXRCUVVzc1NVRkJka0lzUlVGQk5rSTdRVUZETTBJc1kwRkJUVXNzVVVGQlVTeEhRVUZIVEN4alFVRmpMRU5CUVVNc1EwRkJSQ3hEUVVFdlFqdEJRVU5CUXl4VlFVRkJRU3h2UWtGQmIwSXNRMEZCUTNKeVFpeEpRVUZ5UWl4RFFVRXdRbmx5UWl4UlFVRXhRanRCUVVORUxGTkJTRVFzVFVGSFR5eEpRVUZKTEVOQlFVTmlMRk5CUVZNc1EwRkJReTkxUWl4UlFVRldMRU5CUVcxQ2VYWkNMRmRCUVZjc1EwRkJRMlFzU1VGQkwwSXNRMEZCVEN4RlFVRXlRenRCUVVOb1JGY3NWVUZCUVVFc1RVRkJUU3hEUVVGRGJuSkNMRWxCUVZBc1EwRkJXWE55UWl4WFFVRlhMRU5CUVVOa0xFbEJRWGhDTzBGQlEwUXNVMEZ1UW1sRExFTkJjVUpzUXpzN08wRkJRMEV4ZGtJc1VVRkJRVUVzUzBGQlN5eEhRVUZIZDNkQ0xGZEJRVmNzUTBGQlEwb3NSMEZCY0VJN1FVRkRSQ3hQUVhaQ1JEdEJRWGxDUVVNc1RVRkJRVUVzVFVGQlRTeERRVUZEYm5KQ0xFbEJRVkFzUTBGRFJTeExRVUZMZDNKQ0xGbEJRVXdzUTBGQmEwSm9RaXhKUVVGSkxFTkJRVU55ZFVJc1MwRkJUQ3hEUVVGWGNrSXNTMEZCV0N4RFFVRnNRaXhGUVVGeFF6UjJRaXhYUVVGeVF5eEZRVUZyUkZjc2IwSkJRV3hFTEVOQlJFWTdRVUZKUVN4VlFVRkpTeXhWUVVGVkxFZEJRVWRRTEUxQlFVMHNRMEZCUTFFc1NVRkJVQ3hEUVVGWkxFVkJRVm9zUTBGQmFrSTdPMEZCUlVFc1ZVRkJTV3hDTEZkQlFWY3NTVUZCU1VFc1YwRkJWeXhEUVVGRGJuZENMRTFCUVZvc1IwRkJjVUlzUTBGQmVFTXNSVUZCTWtNN1FVRkRla003UVVGRFFXOTRRaXhSUVVGQlFTeFZRVUZWTEVkQlFVY3NTMEZCUzBVc01rSkJRVXdzUTBGRFdFWXNWVUZFVnl4RlFVVllha0lzVjBGR1Z5eERRVUZpTzBGQlNVUTdPMEZCUlVRc1lVRkJUMFlzYVVKQlFXbENMRU5CUVVOelFpeFpRVUZzUWl4RFFVRXJRa2dzVlVGQkwwSXNRMEZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4eFEwRkJiVU5zUWl4SlFVRnVReXhGUVVGNVEzTkNMRXRCUVhwRExFVkJRV2RFTzBGQlF6bERMRlZCUVVrc1EwRkJRMEVzUzBGQlJDeEpRVUZWUVN4TFFVRkxMRU5CUVVONGVFSXNUVUZCVGl4TFFVRnBRaXhEUVVFdlFpeEZRVUZyUXl4UFFVRlBhM2RDTEVsQlFWQTdRVUZGYkVNc1ZVRkJUVXNzWVVGQllTeEhRVUZITEc5RFFVRjBRanRCUVVOQkxGVkJRVTFETEZsQlFWa3NSMEZCUnl4VlFVRnlRaXhEUVVvNFF5eERRVTA1UXpzN1FVRkRRU3hWUVVGTmFVSXNWMEZCVnl4SFFVRkhMRVZCUVhCQ08wRkJRMEVzVlVGQlNVTXNWVUZCVlN4SFFVRkhia0lzWVVGQllTeERRVUZEUnl4SlFVRmtMRU5CUVcxQ1VpeEpRVUZ1UWl4RFFVRnFRanM3UVVGRlFTeGhRVUZQZDBJc1ZVRkJWU3hMUVVGTExFbEJRWFJDTEVWQlFUUkNPMEZCUXpGQ1JDeFJRVUZCUVN4WFFVRlhMRU5CUVVNdmNrSXNTVUZCV2l4RFFVRnBRbWR6UWl4VlFVRlZMRU5CUVVOc2VFSXNTMEZCTlVJN1FVRkRRV3Q0UWl4UlFVRkJRU3hWUVVGVkxFZEJRVWR1UWl4aFFVRmhMRU5CUVVOSExFbEJRV1FzUTBGQmJVSlNMRWxCUVc1Q0xFTkJRV0k3UVVGRFJDeFBRV0kyUXl4RFFXVTVRenM3TzBGQlEwRXNWVUZCVFU4c1dVRkJXU3hIUVVGSExFVkJRWEpDTzBGQlEwRXNWVUZCU1d0Q0xGVkJRVlVzUjBGQlIyNUNMRmxCUVZrc1EwRkJRMFVzU1VGQllpeERRVUZyUWxJc1NVRkJiRUlzUTBGQmFrSTdPMEZCUTBFc1lVRkJUM2xDTEZWQlFWVXNTMEZCU3l4SlFVRjBRaXhGUVVFMFFqdEJRVU14UW14Q0xGRkJRVUZCTEZsQlFWa3NRMEZCUXk5eFFpeEpRVUZpTEVOQlFXdENPMEZCUTJoQ2FYSkNMRlZCUVVGQkxFdEJRVXNzUlVGQlJXZENMRlZCUVZVc1EwRkJRMjU0UWl4TFFVUkdPMEZCUldoQ2IzZENMRlZCUVVGQkxFZEJRVWNzUlVGQlJXVXNWVUZCVlN4RFFVRkRibmhDTEV0QlFWZ3NSMEZCYlVKdGVFSXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJWaXhEUVVGak0zaENMRTFCUm5SQ08wRkJSMmhDYTNkQ0xGVkJRVUZCTEVsQlFVa3NSVUZCUlhsQ0xGVkJRVlVzUTBGQlF5eERRVUZFTzBGQlNFRXNVMEZCYkVJN1FVRkxRVUVzVVVGQlFVRXNWVUZCVlN4SFFVRkhia0lzV1VGQldTeERRVUZEUlN4SlFVRmlMRU5CUVd0Q1VpeEpRVUZzUWl4RFFVRmlPMEZCUTBRc1QwRjZRalpETEVOQk1rSTVRenM3TzBGQlEwRXNWVUZCU1RCQ0xGZEJRVmNzUjBGQlJ6RkNMRWxCUVVrc1EwRkJRM0oxUWl4TFFVRk1MRVZCUVd4Q08wRkJRMEUwZFVJc1RVRkJRVUVzV1VGQldTeERRVUZETVhkQ0xFOUJRV0lzUTBGQmNVSXNWVUZCUVRoNFFpeFpRVUZaTEVWQlFVazdRVUZEYmtNc1dVRkJUVU1zVlVGQlZTeEhRVUZITEVsQlFVa3hjVUlzUzBGQlNpeERRVUZWZVhGQ0xGbEJRVmtzUTBGQlF6TkNMRWxCUVdJc1EwRkJhMEpzZDBJc1RVRkJiRUlzUjBGQk1rSXNRMEZCY2tNc1JVRkJkME54ZUVJc1NVRkJlRU1zUTBGQk5rTXNSMEZCTjBNc1EwRkJia0k3UVVGRFFVOHNVVUZCUVVFc1YwRkJWeXhIUVVGSExFTkJRMXBCTEZkQlFWY3NRMEZCUXk5MlFpeExRVUZhTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDWjNkQ0xGbEJRVmtzUTBGQlEyeENMRXRCUVd4RExFTkJSRmtzUlVGRldtMUNMRlZCUmxrc1JVRkhXa1lzVjBGQlZ5eERRVUZETDNaQ0xFdEJRVm9zUTBGQmEwSm5kMElzV1VGQldTeERRVUZEYWtJc1IwRkJMMElzUTBGSVdTeEZRVWxhVXl4SlFVcFpMRU5CU1ZBc1JVRktUeXhEUVVGa08wRkJTMFFzVDBGUVJEczdRVUZUUVN4VlFVRk5WU3hyUWtGQmEwSXNSMEZCUnl4TFFVRkxReXhuUWtGQlRDeERRVUZ6UWtvc1YwRkJkRUlzUTBGQk0wSXNRMEYwUXpoRExFTkJkME01UXpzN08wRkJRMEVzVlVGQlNVc3NVMEZCVXl4SFFVRkhMRU5CUVdoQ08wRkJRMEVzVlVGQlRVTXNZVUZCWVN4SFFVRkhTQ3hyUWtGQmEwSXNRMEZCUTNKNVFpeE5RVUZ1UWl4RFFVRXdRaXhWUVVGQll5eExRVUZMTEVWQlFVazdRVUZEZGtRc1dVRkJUVEo0UWl4WlFVRlpMRWRCUTJoQ1ZpeFhRVUZYTEVOQlFVTnVVaXhUUVVGYUxFTkJRWE5DTEZWQlFVRTRVaXhUUVVGVExFVkJRVWs3UVVGRGFrTXNhVUpCUVU5SUxGTkJRVk1zU1VGQlNVY3NVMEZCWWl4SlFVRXdRalY0UWl4TFFVRkxMRWRCUVVjMGVFSXNVMEZCZWtNN1FVRkRSQ3hUUVVaRUxFMUJSVThzUTBGQlF5eERRVWhXTzBGQlNVRklMRkZCUVVGQkxGTkJRVk1zUjBGQlIzcDRRaXhMUVVGYU8wRkJRMEVzWlVGQlR5eERRVUZETW5oQ0xGbEJRVkk3UVVGRFJDeFBRVkJ4UWl4RFFVRjBRanM3UVVGVFFTeFZRVUZOUlN4blFrRkJaMElzUjBGQlJ5eExRVUZMUXl4dlFrRkJUQ3hEUVVOMlFuQkRMRWxCUkhWQ0xFVkJSWFpDWjBNc1lVRkdkVUlzUlVGSGRrSldMRXRCU0hWQ0xFTkJRWHBDT3p0QlFVMUJMR0ZCUVU5aExHZENRVUZRTzBGQlEwUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxITkNRVUZ2UW01RExFbEJRWEJDTEVWQlFUQkNPMEZCUTNoQ0xGVkJRVWtzUTBGQlEwRXNTVUZCVEN4RlFVRlhPMEZCUTFSQkxGRkJRVUZCTEVsQlFVa3NSMEZCUnl4cFFrRkJVRHRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NUVN4UlFVRkJRU3hKUVVGSkxFZEJRVWRCTEVsQlFVa3NRMEZEVW5SMlFpeFBRVVJKTEVOQlEwa3NLMEpCUkVvc1JVRkRjVU1zVTBGRWNrTXNSVUZGU2tFc1QwRkdTU3hEUVVWSkxHdERRVVpLTEVWQlJYZERMRlZCUm5oRExFTkJRVkE3UVVGSFJEczdRVUZGUkN4aFFVRlBjM1pDTEVsQlFWQTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3c0UWtGQk5FSkJMRWxCUVRWQ0xFVkJRVFJFTzBGQlFVRXNWVUZCTVVKb2NrSXNUMEZCTUVJc2RVVkJRV2hDTEVWQlFXZENPMEZCUVVFc1ZVRkJXbk56UWl4TFFVRlpMSFZGUVVGS0xFVkJRVWs3TzBGQlF6RkVMRlZCUVVrc1EwRkJRMEVzUzBGQlJDeEpRVUZWUVN4TFFVRkxMRU5CUVVONGVFSXNUVUZCVGl4TFFVRnBRaXhEUVVFelFpeEpRVUZuUXl4RFFVRkRhMFlzVDBGQmFrTXNTVUZCTkVOQkxFOUJRVThzUTBGQlEyeEdMRTFCUVZJc1MwRkJiVUlzUTBGQmJrVXNSVUZCYzBVN1FVRkRjRVVzWlVGQlQydDNRaXhKUVVGUU8wRkJRMFE3TzBGQlJVUXNWVUZCU1hGRExFMUJRVTBzUjBGQlJ5eERRVUZpTzBGQlEwRnlkRUlzVFVGQlFVRXNUMEZCVHl4RFFVRkRia1lzVDBGQlVpeERRVUZuUWl4VlFVRkJVeXhMUVVGTExFVkJRVWs3UVVGRGRrSXNXVUZCVFdkNVFpeFZRVUZWTEhsQ1FVTmthRUlzUzBGQlN5eERRVUZETjNkQ0xIVkNRVUZCTEVOQlFXMUNMRU5CUVc1Q0xFVkJRWE5DTm5kQ0xFdEJRVXNzUTBGQlEzaDRRaXhOUVVFMVFpeERRVUZFTEVOQlJGTXNVVUZCYUVJN1FVRkhRV3QzUWl4UlFVRkJRU3hKUVVGSkxFZEJRVWNzUTBGRFRFRXNTVUZCU1N4RFFVRkRjblZDTEV0QlFVd3NRMEZCVnl4RFFVRllMRVZCUVdOeVFpeExRVUZMTEVkQlFVY3JlRUlzVFVGQmRFSXNRMEZFU3l4RlFVVk1ReXhWUVVaTExFVkJSMHgwUXl4SlFVRkpMRU5CUVVOeWRVSXNTMEZCVEN4RFFVRlhja0lzUzBGQlN5eEhRVUZISzNoQ0xFMUJRVzVDTEVOQlNFc3NSVUZKVEd4Q0xFbEJTa3NzUTBGSlFTeEZRVXBCTEVOQlFWQTdRVUZMUVd0Q0xGRkJRVUZCTEUxQlFVMHNTVUZCU1VNc1ZVRkJWU3hEUVVGRGVIbENMRTFCUVhKQ08wRkJRMFFzVDBGV1JEdEJRVmxCTEdGQlFVOXJkMElzU1VGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNNRUpCUVhkQ1FTeEpRVUY0UWl4RlFVRTRRanRCUVVNMVFpeFZRVUZOZFVNc1lVRkJZU3hIUVVGSExHZENRVUYwUWp0QlFVTkJMRlZCUVUxRExHZENRVUZuUWl4SFFVRkhMRkZCUVhwQ08wRkJSVUVzVlVGQlNUbDVRaXhOUVVGTkxFZEJRVWMyZVVJc1lVRkJZU3hEUVVGREwwSXNTVUZCWkN4RFFVRnRRbElzU1VGQmJrSXNRMEZCWWp0QlFVTkJMRlZCUVUxNVF5eFpRVUZaTEVkQlFVY3NSVUZCY2tJN08wRkJRMEVzWVVGQlR5OTVRaXhOUVVGTkxFdEJRVXNzU1VGQmJFSXNSVUZCZDBJN1FVRkRkRUk3UVVGRFFTeFpRVUZOWjNwQ0xGZEJRVmNzUjBGQlIwWXNaMEpCUVdkQ0xFTkJRVU5vUXl4SlFVRnFRaXhEUVVGelFqbDNRaXhOUVVGTkxFTkJRVU1zUTBGQlJDeERRVUUxUWl4RFFVRndRanRCUVVOQkszbENMRkZCUVVGQkxGbEJRVmtzUTBGQlEycDBRaXhKUVVGaUxFTkJRMFU1Uml4TlFVRk5MRU5CUVVOWkxFdEJRVkFzUjBGQlpWb3NUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGVlNTeE5RVUY2UWl4SFFVRnJRelI1UWl4WFFVRlhMRU5CUVVNc1EwRkJSQ3hEUVVGWUxFTkJRV1UxZVVJc1RVRkVia1E3UVVGSFFVb3NVVUZCUVVFc1RVRkJUU3hIUVVGSE5ubENMR0ZCUVdFc1EwRkJReTlDTEVsQlFXUXNRMEZCYlVKU0xFbEJRVzVDTEVOQlFWUTdRVUZEUkRzN1FVRkZSQ3hoUVVGUGVVTXNXVUZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3h6UWtGQmIwSjZReXhKUVVGd1FpeEZRVUV3UWpsd1FpeEhRVUV4UWl4RlFVRXJRbmx6UWl4cFFrRkJMMElzUlVGQmEwUTdRVUZEYUVRc1ZVRkJTVE5ETEVsQlFVa3NTMEZCU3l4RlFVRmlMRVZCUVdsQ0xFOUJRVTlCTEVsQlFWQTdRVUZGYWtJc1ZVRkJUVFJETEZOQlFWTXNSMEZCUnl4dFFrRkJiRUk3UVVGRlFTeFZRVUZKUXl4aFFVRktPMEZCUTBFc1ZVRkJTVU1zWTBGQll5eEhRVUZITEVsQlFYSkNPMEZCUTBFc1ZVRkJUVU1zVjBGQlZ5eEhRVUZITDBNc1NVRkJTU3hEUVVGRGRuVkNMRXRCUVV3c1EwRkJWMjE0UWl4VFFVRllMRVZCUVhOQ01YTkNMRWRCUVhSQ0xFTkJRVEJDTEZWQlFVRjNUaXhKUVVGSkxFVkJRVWs3UVVGRGNFUnRaaXhSUVVGQlFTeGhRVUZoTEVkQlFVZHVaaXhKUVVGSkxFTkJRVU56Wml4WFFVRk1MRVZCUVdoQ096dEJRVVZCTEZsQlFVazVjMElzUjBGQlJ5eERRVUZET0Zjc1IwRkJTaXhEUVVGUk5sWXNZVUZCVWl4RFFVRktMRVZCUVRSQ08wRkJRekZDTEdOQlFVMTJRaXhMUVVGTExFZEJRVWR3Y2tJc1IwRkJSeXhEUVVGRGExSXNSMEZCU2l4RFFVRlJlV0lzWVVGQlVpeEZRVUYxUWpOelFpeEhRVUYyUWl4RFFVRXlRaXhWUVVGQloxRXNTVUZCU1N4RlFVRkpPMEZCUXk5RExHZENRVUZKTkdNc1kwRkJTaXhGUVVGdlFqdEJRVU5zUWtFc1kwRkJRVUVzWTBGQll5eEhRVUZITEV0QlFXcENPMEZCUTBFc2NVSkJRVTlJTEdsQ1FVRnBRaXhEUVVGRGRIaENMRkZCUVd4Q0xFTkJRVEpDTmxVc1NVRkJNMElzU1VGRFNDeEZRVVJITEhsQ1FVVlpRU3hKUVVaYUxGRkJRVkE3UVVGSFJDeGhRVXhFTEUxQlMwODdRVUZEVEN3eVEwRkJjMEpCTEVsQlFYUkNPMEZCUTBRN1FVRkRSaXhYUVZSaExFTkJRV1E3UVVGVlFTd3lRa0ZCVlc5aUxFdEJRVXNzUTBGQlEwZ3NTVUZCVGl4RFFVRlhMRVZCUVZnc1EwRkJWaXhUUVVFeVFucGtMRWxCUVROQ08wRkJRMFFzVTBGYVJDeE5RVmxQTzBGQlEweHZaaXhWUVVGQlFTeGpRVUZqTEVkQlFVY3NTMEZCYWtJN1FVRkRRU3hwUWtGQlQzQm1MRWxCUVZBN1FVRkRSRHRCUVVOR0xFOUJia0p0UWl4RFFVRndRanRCUVhGQ1FTeFZRVUZOZFdZc1lVRkJZU3hIUVVGSFRpeHBRa0ZCYVVJc1EwRkJRM3B6UWl4SFFVRnNRaXhEUVVGelFpeFZRVUZCWjFFc1NVRkJTU3hGUVVGSk8wRkJRMnhFTEhGRFFVRnpRa0VzU1VGQmRFSTdRVUZEUkN4UFFVWnhRaXhEUVVGMFFqdEJRVWxCTEhWQ1FVRlZLMk1zWVVGQllTeERRVUZET1VJc1NVRkJaQ3hEUVVGdFFpeEZRVUZ1UWl4RFFVRldMRk5CUVcxRE5FSXNWMEZCVnl4RFFVRkROVUlzU1VGQldpeERRVUZwUWl4RlFVRnFRaXhEUVVGdVF6dEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3d1FrRkJkMEpxY2tJc1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJc1ZVRkJUV2R4UWl4WFFVRlhMRWRCUVVjc1NVRkJTWFJVTEVkQlFVb3NSVUZCY0VJN1FVRkZRU3hWUVVGSmMxY3NTVUZCU1N4SFFVRkhMRVZCUVZnN1FVRkRRVGR1UWl4TlFVRkJRU3hOUVVGTkxFTkJRVU50UWl4UFFVRlFMRU5CUVdWMFJ5eEhRVUZtTEVWQlFXOUNja2NzVDBGQmNFSXNRMEZCTkVJc1owSkJRV3RDTzBGQlFVRTdRVUZCUVN4WlFVRm9RalJhTEVkQlFXZENPMEZCUVVFc1dVRkJXRGxoTEV0QlFWYzdPMEZCUXpWRExGbEJRVWtzUTBGQlEzVkpMRXRCUVVzc1EwRkJRMmx6UWl4UFFVRk9MRU5CUVdONE1FSXNTMEZCWkN4RFFVRk1MRVZCUVRKQ08wRkJRM3BDTEdkQ1FVRk5MRWxCUVVsWUxFdEJRVW9zYVVSQlEyOURhMGtzUjBGRWNFTXNkVU5CUTIxRmRWUXNSMEZFYmtVc2QwSkJRVTQ3UVVGSFJEczdRVUZGUkRsaExGRkJRVUZCTEV0QlFVc3NRMEZCUTJ0Q0xFOUJRVTRzUTBGQll5eFZRVUZCTmxRc1NVRkJTU3hGUVVGSk8wRkJRM0JDTEdOQlFVMXRaaXhoUVVGaExFZEJRVWR1Wml4SlFVRkpMRU5CUVVOelppeFhRVUZNTEVWQlFYUkNPMEZCUTBGRkxGVkJRVUZCTEVsQlFVa3NSMEZCUjJoRUxGZEJRVmNzUTBGQlF6bFpMRWRCUVZvc1EwRkJaMEo1WWl4aFFVRm9RaXhEUVVGUU96dEJRVVZCTEdOQlFVbExMRWxCUVVrc1MwRkJTM1o2UWl4VFFVRlVMRWxCUVhOQ0xFTkJRVU4xZWtJc1NVRkJTU3hEUVVGRE4zaENMRkZCUVV3c1EwRkJZMjlaTEVkQlFXUXNRMEZCTTBJc1JVRkJLME03UVVGRE4wTjVWeXhaUVVGQlFTeFhRVUZYTEVOQlFVTTNXU3hIUVVGYUxFTkJRV2RDZDJJc1lVRkJhRUlzWjBSQlFXMURTeXhKUVVGdVF5eEpRVUY1UTNwYUxFZEJRWHBETzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB4NVZ5eFpRVUZCUVN4WFFVRlhMRU5CUVVNM1dTeEhRVUZhTEVOQlFXZENkMklzWVVGQmFFSXNSVUZCSzBJc1EwRkJRM0JhTEVkQlFVUXNRMEZCTDBJN1FVRkRSRHRCUVVOR0xGTkJWRVE3UVVGVlJDeFBRV3BDUkR0QlFXMUNRU3hoUVVGUGVWY3NWMEZCVUR0QlFVTkVPenM3T3pzN1FVRkhTQ3huUlVGQlpVZ3NhVUpCUVdZc1JUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU0zVmtFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRKUVVOTmNVUTdRVUZEU2p0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUlN3d1FrRkJXVU1zVDBGQldpeEZRVUZ4UW5KRUxFbEJRWEpDTEVWQlFUWkRPMEZCUVVFc1VVRkJiRUp6UkN4WFFVRnJRaXgxUlVGQlNpeEZRVUZKT3p0QlFVRkJPenRCUVVNelF5eFRRVUZMUXl4UlFVRk1MRWRCUVdkQ1JpeFBRVUZvUWp0QlFVTkJMRk5CUVV0SExFdEJRVXdzUjBGQllYaEVMRWxCUVdJN1FVRkRRU3hUUVVGTGVVUXNXVUZCVEN4SFFVRnZRa2dzVjBGQmNFSTdRVUZEUVN4VFFVRkxTU3hwUWtGQlRDeEhRVUY1UWl4RFFVRjZRanM3UVVGRFFTeFRRVUZMYWxZc1RVRkJURHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMWRCUTBVc2EwSkJRWGRDTzBGQlFVRXNWVUZCYWtKc1l5eFhRVUZwUWl4MVJVRkJTQ3hEUVVGSE8wRkJRM1JDTEZkQlFVdHZlRUlzVlVGQlRDeEhRVUZyUW5CNFFpeFhRVUZzUWp0QlFVTkJMRmRCUVV0eGVFSXNWVUZCVEN4SFFVRnJRaXhEUVVGc1FqdEJRVU5CTEZkQlFVdERMRlZCUVV3c1IwRkJhMElzUTBGQmJFSTdRVUZEUVN4WFFVRkxReXhSUVVGTUxFZEJRV2RDTEV0QlFXaENPMEZCUTBFc1YwRkJTME1zVTBGQlRDeEhRVUZwUWl4TFFVRkxUaXhaUVVGTUxFTkJRV3RDT1d4Q0xFMUJRV3hDTEVWQlFXcENPenRCUVVOQkxHbERRVUZ6UWl4TFFVRkxiMjFDTEZOQlFVd3NRMEZCWlM5V0xFbEJRV1lzUlVGQmRFSTdRVUZCUVN4VlFVRlBjbVlzUzBGQlVDeDNRa0ZCVDBFc1MwRkJVRHRCUVVGQkxGVkJRV056Wml4SlFVRmtMSGRDUVVGalFTeEpRVUZrT3p0QlFVTkJMRmRCUVVzclZpeFpRVUZNTEVkQlFXOUNjakZDTEV0QlFYQkNPMEZCUTBFc1YwRkJTM014UWl4UlFVRk1MRWRCUVdkQ0xFdEJRVXRTTEZsQlFVd3NRMEZCYTBJemVrSXNUVUZCYkVJc1IwRkRXaXhMUVVGTE1ucENMRmxCUVV3c1EwRkJhMElzUzBGQlMwRXNXVUZCVEN4RFFVRnJRak42UWl4TlFVRnNRaXhIUVVFeVFpeERRVUUzUXl4RlFVRm5SREJyUWl4SlFVUndReXhIUVVWYUxFTkJSa283UVVGSFFTeFhRVUZMTVVjc1MwRkJUQ3hIUVVGaFJ5eEpRVUZpTzBGQlEwRXNWMEZCUzJsWExGRkJRVXdzUjBGQlowSXNTVUZCYUVJN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxIZENRVUZsYUhsQ0xGRkJRV1lzUlVGQmVVSkZMRTlCUVhwQ0xFVkJRV3RESzNoQ0xGZEJRV3hETEVWQlFTdERPMEZCUVVFN08wRkJRemRETEZWQlFVMTBNa0lzVTBGQlV5eEhRVUZITEZOQlFWcEJMRk5CUVZrc1EwRkJRV01zUzBGQlN5eEZRVUZKTzBGQlEzcENMR0ZCUVVrc1EwRkJRMjB4UWl4UlFVRk1MRWRCUVdkQ0xFdEJRV2hDT3p0QlFVVkJMR0ZCUVVrc1EwRkJRMUFzVVVGQlRDeERRVUZqZUc1Q0xFbEJRV1FzUTBGQmJVSXNTMEZCU1N4RFFVRkRkMjVDTEZGQlFVd3NRMEZCWXpsdFFpeFhRVUZrTEVOQlFUQkNVQ3hOUVVFeFFpeERRVUZwUTNOSUxFbEJRWEJFTEVWQlFUQkVMRXRCUVRGRU96dEJRVU5CTEdGQlFVa3NRMEZCUXl0bUxGRkJRVXdzUTBGQll6bHRRaXhYUVVGa0xFTkJRVEJDVml4SlFVRXhRaXhEUVVORkxFdEJRVWtzUTBGQlEzZHVRaXhSUVVGTUxFTkJRV001YlVJc1YwRkJaQ3hEUVVFd1FsQXNUVUZCTVVJc1EwRkJhVU56U0N4SlFVUnVReXhGUVVWRkxFdEJSa1k3TzBGQlMwRXNXVUZCU1N4UFFVRlBkRklzVVVGQlVDeExRVUZ2UWl4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUTBFc1ZVRkJRVUVzVVVGQlVTeERRVUZEZGtRc1MwRkJSQ3hEUVVGU08wRkJRMFE3UVVGRFJpeFBRVnBFT3p0QlFXTkJMRlZCUVUxaUxGRkJRVkVzUjBGQlJ5eFRRVUZZUVN4UlFVRlhMRU5CUVVGMVFpeERRVUZETEVWQlFVazdRVUZEY0VJc1lVRkJTU3hEUVVGRGVUQkNMRkZCUVV3c1IwRkJaMElzUzBGQmFFSTdPMEZCUlVFc1lVRkJTU3hEUVVGRFVDeFJRVUZNTEVOQlFXTjRia0lzU1VGQlpDeERRVUZ0UWl4TFFVRkpMRU5CUVVOM2JrSXNVVUZCVEN4RFFVRmpPVzFDTEZkQlFXUXNRMEZCTUVKUUxFMUJRVEZDTEVOQlFXbERjMGdzU1VGQmNFUXNSVUZCTUVRc1MwRkJNVVE3TzBGQlEwRXNZVUZCU1N4RFFVRkRLMllzVVVGQlRDeERRVUZqT1cxQ0xGZEJRV1FzUTBGQk1FSldMRWxCUVRGQ0xFTkJRMFVzUzBGQlNTeERRVUZEZDI1Q0xGRkJRVXdzUTBGQll6bHRRaXhYUVVGa0xFTkJRVEJDVUN4TlFVRXhRaXhEUVVGcFEzTklMRWxCUkc1RExFVkJSVVVzUzBGR1JqczdRVUZMUVc1U0xGRkJRVUZCTEU5QlFVOHNRMEZCUTNSRExFdEJRVklzVjBGRFN5eExRVUZKTEVOQlFVTXdUU3hYUVVGTUxFTkJRV2xDZEV3c1NVRkVkRUlzSzBOQlF5dEVPVUlzUTBGRUwwUTdPMEZCU1VFc1dVRkJTU3hQUVVGUEswTXNUMEZCVUN4TFFVRnRRaXhWUVVGMlFpeEZRVUZ0UXp0QlFVTnFRMEVzVlVGQlFVRXNUMEZCVHl4RFFVRkRMME1zUTBGQlJDeERRVUZRTzBGQlEwUTdRVUZEUml4UFFXaENSRHM3UVVGclFrRXNWVUZCVFhSQ0xGRkJRVkVzUjBGQlJ5eFRRVUZZUVN4UlFVRlhMRU5CUVVGWkxFdEJRVXNzUlVGQlNUdEJRVU40UWl4aFFVRkpMRU5CUVVOdE1VSXNVVUZCVEN4SFFVRm5RaXhMUVVGb1FqczdRVUZGUVN4aFFVRkpMRU5CUVVOUUxGRkJRVXdzUTBGQlkzaHVRaXhKUVVGa0xFTkJRVzFDTEV0QlFVa3NRMEZCUTNkdVFpeFJRVUZNTEVOQlFXTTViVUlzVjBGQlpDeERRVUV3UWxBc1RVRkJNVUlzUTBGQmFVTnJiMElzVTBGQmNFUXNSVUZCSzBRc1MwRkJMMFE3TzBGQlEwRXNZVUZCU1N4RFFVRkRZaXhSUVVGTUxFTkJRV001YlVJc1YwRkJaQ3hEUVVFd1FsWXNTVUZCTVVJc1EwRkRSU3hMUVVGSkxFTkJRVU4zYmtJc1VVRkJUQ3hEUVVGak9XMUNMRmRCUVdRc1EwRkJNRUpRTEUxQlFURkNMRU5CUVdsRGEyOUNMRk5CUkc1RExFVkJSVVVzUzBGR1JqczdRVUZMUVN4WlFVRkpMRTlCUVU5RUxGZEJRVkFzUzBGQmRVSXNWVUZCTTBJc1JVRkJkVU03UVVGRGNrTkJMRlZCUVVGQkxGZEJRVmNzUTBGQlEzZ3hRaXhMUVVGRUxFTkJRVmc3UVVGRFJEdEJRVU5HTEU5QldrUTdPMEZCWTBFc1YwRkJTM1V4UWl4UlFVRk1MRWRCUVdkQ0xFbEJRVWwyTWtJc1lVRkJTaXhEUVVGaFowTXNVMEZCWWl4RlFVRjNRamxDTEZOQlFYaENMRVZCUVcxRFF5eFJRVUZ1UXl4RlFVRTJRME1zVVVGQk4wTXNRMEZCYUVJN1FVRkZRU3hoUVVGUExFdEJRVXR0TWtJc1VVRkJXanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN3d1FrRkJhVUk3UVVGRFppeGhRVUZQTEV0QlFVdHdWeXhMUVVGTUxFbEJRV01zUzBGQlN6aFdMRlZCUVV3c1NVRkJiVUlzUzBGQlMwc3NVVUZCTjBNN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFRRVU5GTEdWQlFXTTdRVUZEV2l4aFFVRlBMRXRCUVV0SUxGRkJRVm83UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0VFFVTkZMR1ZCUVZjN1FVRkRWQ3hoUVVGUExFdEJRVXRPTEV0QlFWbzdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRUUVVORkxHVkJRV3RDTzBGQlEyaENMRGhEUVVGWExFdEJRVXRETEZsQlFXaENPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUczdPenRUUVVORkxHVkJRWFZDTzBGQlEzSkNMR0ZCUVU4c1MwRkJTME1zYVVKQlFVd3NSMEZCZVVJc1NVRkJhRU03UVVGRFJEdFRRVVZFTEdGQlFYRkNja0lzVFVGQmNrSXNSVUZCTmtJN1FVRkRNMElzVjBGQlMzRkNMR2xDUVVGTUxFZEJRWGxDY2tJc1RVRkJUU3hIUVVGSExFbEJRV3hETEVOQlJESkNMRU5CUTJFN1FVRkRla003UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNaMEpCUVU4NWRrSXNWMEZCVUN4RlFVRnZRanRCUVVOc1FpeFZRVUZKTEVOQlFVTXNTMEZCUzNWNFFpeFJRVUZXTEVWQlFXOUNPMEZCUTJ4Q08wRkJRMFFzVDBGSWFVSXNRMEZMYkVJN096dEJRVU5CTEZkQlFVdEdMRlZCUVV3c1IwRkJhMEp5ZUVJc1YwRkJWeXhIUVVGSExFdEJRVXR2ZUVJc1ZVRkJja003TzBGQlJVRXNWVUZCU1N4RFFVRkRMRXRCUVVzM1ZpeExRVUZXTEVWQlFXbENPMEZCUTJZN1FVRkRRU3hsUVVORkxFTkJRVU1zUzBGQlMwRXNTMEZCVGl4SlFVTkJMRXRCUVV0clZ5eFpRVUZNTEVOQlFXdENlRkFzU1VGQmJFSXNSMEZCZVVJc1MwRkJTMnRRTEdsQ1FVRTVRaXhKUVVGdFJDeExRVUZMUlN4VlFVWXhSQ3hGUVVkRk8wRkJRMEVzWlVGQlMwd3NVVUZCVEN4RFFVRmplRzVDTEVsQlFXUXNRMEZEUlN4TFFVRkxkMjVDTEZGQlFVd3NRMEZCWXpsdFFpeFhRVUZrTEVOQlFUQkNVQ3hOUVVFeFFpeERRVUZwUXl4TFFVRkxPRzVDTEZsQlFVd3NRMEZCYTBKTExFbEJRVzVFTEVOQlJFWXNSVUZGUlR0QlFVTkZReXhaUVVGQlFTeE5RVUZOTEVWQlFVVXNTVUZFVmp0QlFVVkZjR1VzV1VGQlFVRXNTVUZCU1N4RlFVRkZMRXRCUVVzNFpEdEJRVVppTEZkQlJrWTdPMEZCVDBFc2MwTkJRWE5DTEV0QlFVdEVMRk5CUVV3c1EwRkJaUzlXTEVsQlFXWXNSVUZCZEVJN1FVRkJRU3hqUVVGUGNtWXNTMEZCVUN4NVFrRkJUMEVzUzBGQlVEdEJRVUZCTEdOQlFXTnpaaXhKUVVGa0xIbENRVUZqUVN4SlFVRmtPenRCUVVWQkxHVkJRVXNyVml4WlFVRk1MRWRCUVc5Q2NqRkNMRXRCUVhCQ08wRkJRMEVzWlVGQlMyMW1MRXRCUVV3c1IwRkJZVWNzU1VGQllqdEJRVU5FTzBGQlEwWXNUMEV4UW1sQ0xFTkJORUpzUWpzN08wRkJRMEVzVlVGQlNTeExRVUZMYzFjc1kwRkJUQ3hGUVVGS0xFVkJRVEpDTzBGQlEzcENMR0ZCUVVzdlowSXNTVUZCVERzN1FVRkRRU3hoUVVGTGFVd3NUVUZCVER0QlFVTkVPMEZCUTBZN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHTkJRVXRzWXl4WFFVRk1MRVZCUVd0Q1RDeFJRVUZzUWl4RlFVRTBRa1VzVDBGQk5VSXNSVUZCY1VNcmVFSXNWMEZCY2tNc1JVRkJhMFE3UVVGRGFFUXNWMEZCU3pGV0xFMUJRVXdzUTBGQldXeGpMRmRCUVZvN08wRkJRMEVzVjBGQlMzVjRRaXhSUVVGTUxFZEJRV2RDTEVsQlFXaENPenRCUVVWQkxGZEJRVXRRTEZGQlFVd3NRMEZCWTNodVFpeEpRVUZrTEVOQlFXMUNMRXRCUVV0M2JrSXNVVUZCVEN4RFFVRmpPVzFDTEZkQlFXUXNRMEZCTUVKUUxFMUJRVEZDTEVOQlFXbERiVWdzU1VGQmNFUXNSVUZCTUVRc1NVRkJNVVE3TzBGQlEwRXNWMEZCUzJ0blFpeFJRVUZNTEVOQlFXTTViVUlzVjBGQlpDeERRVUV3UWxZc1NVRkJNVUlzUTBGQkswSXNTMEZCUzNkdVFpeFJRVUZNTEVOQlFXTTViVUlzVjBGQlpDeERRVUV3UWxBc1RVRkJNVUlzUTBGQmFVTnRTQ3hKUVVGb1JTeEZRVUZ6UlN4SlFVRjBSVHM3UVVGRlFTeGhRVUZQTEV0QlFVdHRhRUlzWTBGQlRDeERRVUZ2UW5SNVFpeFJRVUZ3UWl4RlFVRTRRa1VzVDBGQk9VSXNSVUZCZFVNcmVFSXNWMEZCZGtNc1EwRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdWQlFVMDFlRUlzVjBGQlRpeEZRVUZ0UWp0QlFVTnFRaXhYUVVGTGRYaENMRkZCUVV3c1IwRkJaMElzUzBGQmFFSTdRVUZEUVN4WFFVRkxSQ3hWUVVGTUxFZEJRV3RDZEhoQ0xGZEJRV3hDT3p0QlFVVkJMRmRCUVV0bmVFSXNVVUZCVEN4RFFVRmplRzVDTEVsQlFXUXNRMEZCYlVJc1MwRkJTM2R1UWl4UlFVRk1MRU5CUVdNNWJVSXNWMEZCWkN4RFFVRXdRbEFzVFVGQk1VSXNRMEZCYVVOdlNDeExRVUZ3UkN4RlFVRXlSQ3hKUVVFelJEczdRVUZEUVN4WFFVRkxhV2RDTEZGQlFVd3NRMEZCWXpsdFFpeFhRVUZrTEVOQlFUQkNWaXhKUVVFeFFpeERRVU5GTEV0QlFVdDNia0lzVVVGQlRDeERRVUZqT1cxQ0xGZEJRV1FzUTBGQk1FSlFMRTFCUVRGQ0xFTkJRV2xEYjBnc1MwRkVia01zUlVGRlJTeEpRVVpHTzBGQlNVUTdRVUZGUkR0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMR2RDUVVGUEwxRXNWMEZCVUN4RlFVRnZRa3dzVVVGQmNFSXNSVUZCT0VKRkxFOUJRVGxDTEVWQlFYVkRLM2hDTEZkQlFYWkRMRVZCUVc5RU8wRkJRMnhFTzBGQlEwRXNWVUZCU1N4RFFVRkRMRXRCUVV0RUxGRkJRVllzUlVGQmIwSTdRVUZEYkVJc1lVRkJTM3BXTEUxQlFVd3NRMEZCV1d4akxGZEJRVm83TzBGQlEwRXNZVUZCUzJsNVFpeGpRVUZNTEVOQlFXOUNkSGxDTEZGQlFYQkNMRVZCUVRoQ1JTeFBRVUU1UWl4RlFVRjFReXQ0UWl4WFFVRjJRenRCUVVORU96dEJRVVZFTEZkQlFVdE1MRkZCUVV3c1IwRkJaMElzU1VGQmFFSTdRVUZEUVN4WFFVRkxTQ3hWUVVGTUxFbEJRVzFDY0hoQ0xGZEJRVmNzUjBGQlJ5eExRVUZMYzNoQ0xGVkJRWFJET3p0QlFVVkJMRmRCUVV0T0xGRkJRVXdzUTBGQlkzaHVRaXhKUVVGa0xFTkJRVzFDTEV0QlFVdDNia0lzVVVGQlRDeERRVUZqT1cxQ0xGZEJRV1FzUTBGQk1FSlFMRTFCUVRGQ0xFTkJRV2xEY1Vnc1RVRkJjRVFzUlVGQk5FUXNTVUZCTlVRN08wRkJRMEVzVjBGQlMyZG5RaXhSUVVGTUxFTkJRV001YlVJc1YwRkJaQ3hEUVVFd1FsWXNTVUZCTVVJc1EwRkRSU3hMUVVGTGQyNUNMRkZCUVV3c1EwRkJZemx0UWl4WFFVRmtMRU5CUVRCQ1VDeE5RVUV4UWl4RFFVRnBRM0ZJTEUxQlJHNURMRVZCUlVVc1NVRkdSanM3UVVGTFFTeGhRVUZQTEV0QlFVc3laMElzVVVGQldqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPenM3TzFkQlEwVXNhMEpCUVZNN1FVRkRVQ3hWUVVGSkxFdEJRVXRCTEZGQlFWUXNSVUZCYlVJN1FVRkRha0lzWVVGQlMwRXNVVUZCVEN4RFFVRmpMekZDTEUxQlFXUTdPMEZCUTBFc1lVRkJTeXN4UWl4UlFVRk1MRWRCUVdkQ0xFbEJRV2hDTzBGQlEwUTdPMEZCUlVRc1YwRkJTMG9zVVVGQlRDeEhRVUZuUWl4TFFVRm9RanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CT3pzN08xZEJRMFVzWjBKQlFVODdRVUZEVEN4VlFVRkpMRXRCUVV0SkxGRkJRVlFzUlVGQmJVSTdRVUZEYWtJc1lVRkJTMEVzVVVGQlRDeERRVUZqZWpGQ0xFOUJRV1E3TzBGQlEwRXNZVUZCUzNreFFpeFJRVUZNTEVkQlFXZENMRWxCUVdoQ08wRkJRMFE3TzBGQlJVUXNWMEZCUzBvc1VVRkJUQ3hIUVVGblFpeExRVUZvUWp0QlFVTkVPenM3T3pzN1FVRkhTQ3cyUkVGQlpWWXNZMEZCWml4Rk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRMMU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wbEJRMDF4UWpzN096czdRVUZEU2p0QlFVTkdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBVc2EwSkJRVmx3UWl4UFFVRmFMRVZCUVhGQ2NrUXNTVUZCY2tJc1JVRkJNRVE3UVVGQlFUczdRVUZCUVN4UlFVRXZRbk5FTEZkQlFTdENMSFZGUVVGcVFpeEZRVUZwUWp0QlFVRkJMRkZCUVdKdlFpeFhRVUZoT3p0QlFVRkJPenRCUVVONFJDdzRRa0ZCVFhKQ0xFOUJRVTRzUlVGQlpYSkVMRWxCUVdZc1JVRkJjVUp6UkN4WFFVRnlRanRCUVVOQkxGVkJRVXR4UWl4TlFVRk1MRWRCUVdORUxGZEJRVmNzUTBGQlEwVXNTMEZCTVVJc1EwRkdkMFFzUTBGSmVFUTdPMEZCUTBFc1ZVRkJTMFFzVFVGQlRDeERRVUZaUlN4UFFVRmFMRWRCUVhOQ0xGbEJRVTA3UVVGRE1VSXNXVUZCUzBNc1kwRkJUQ3hIUVVGelFpeEpRVUYwUWp0QlFVTkVMRXRCUmtRN08wRkJSMEVzVlVGQlMwRXNZMEZCVEN4SFFVRnpRaXhKUVVGMFFqdEJRVkozUkR0QlFWTjZSRHM3T3p0WFFVVkVMREJDUVVGcFFqdEJRVU5tTEdGQlFVOHNTMEZCUzBFc1kwRkJUQ3d3UmtGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMU5CUTBVc1pVRkJXVHRCUVVOV0xHRkJRVThzUzBGQlMwZ3NUVUZCV2p0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRUUVVORkxHVkJRV0U3UVVGRFdDeGhRVUZQTEV0QlFVdEJMRTFCUVV3c1EwRkJXVWtzVFVGQmJrSTdRVUZEUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHM3VTBGRFJTeGhRVUZYUVN4TlFVRllMRVZCUVcxQ08wRkJRMnBDTEZkQlFVdEtMRTFCUVV3c1EwRkJXVWtzVFVGQldpeEhRVUZ4UWtFc1RVRkJja0k3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4elFrRkJZVHRCUVVGQk96dEJRVU5ZTEZWQlFVa3NTMEZCUzNKQ0xHbENRVUZNTEVkQlFYbENMRU5CUVRkQ0xFVkJRV2RETzBGQlF6bENMR0ZCUVV0cFFpeE5RVUZNTEVOQlFWbHdlVUlzVjBGQldpeEhRVUV3UWl4TFFVRkxiWGhDTEdsQ1FVRXZRanRCUVVOQmMwSXNVVUZCUVVFc1ZVRkJWU3hEUVVGRExGbEJRVTA3UVVGRFppeGpRVUZKTEUxQlFVa3NRMEZCUTJ4Q0xGRkJRVlFzUlVGQmJVSTdRVUZEYWtJc2EwSkJRVWtzUTBGQlEyRXNUVUZCVEN4RFFVRlpjSGxDTEZkQlFWb3NSMEZEUlN4RFFVRkRMRTFCUVVrc1EwRkJRM0Y0UWl4VlFVRk1MRWRCUVd0Q0xFMUJRVWtzUTBGQlEwWXNhVUpCUVhoQ0xFbEJRVFpETEVsQlJDOURPenRCUVVWQkxHdENRVUZKTEVOQlFVTnBRaXhOUVVGTUxFTkJRVmwwYUVJc1NVRkJXanRCUVVORU8wRkJRMFlzVTBGT1V5eEZRVTFRTEVOQlFVTXNTMEZCUzNGblFpeHBRa0ZPUXl4RFFVRldPMEZCVDBRc1QwRlVSQ3hOUVZOUE8wRkJRMHdzWVVGQlMybENMRTFCUVV3c1EwRkJXWEI1UWl4WFFVRmFMRWRCUVRCQ0xFTkJRVEZDT3p0QlFVTkJMR0ZCUVV0dmVVSXNUVUZCVEN4RFFVRlpkR2hDTEVsQlFWbzdRVUZEUkR0QlFVTkdPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxIVkNRVUZqTzBGQlFVRTdPMEZCUTFvc1YwRkJTM05vUWl4TlFVRk1MRU5CUVZsMGFFSXNTVUZCV2l4SFFVRnRRamRUTEVsQlFXNUNMRU5CUVhkQ0xGbEJRVTA3UVVGRE5VSXNXVUZCU1N4RFFVRkRMRTFCUVVrc1EwRkJRM042UWl4UlFVRldMRVZCUVc5Q08wRkJRMnhDTEdkQ1FVRkpMRU5CUVVOaExFMUJRVXdzUTBGQldYSm9RaXhMUVVGYU8wRkJRMFE3UVVGRFJpeFBRVXBFTzBGQlMwUTdPenRYUVVWRUxHTkJRVXN2VVN4WFFVRk1MRVZCUVd0Q1RDeFJRVUZzUWl4RlFVRTBRa1VzVDBGQk5VSXNSVUZCY1VNcmVFSXNWMEZCY2tNc1JVRkJhMFE3UVVGRGFFUXNWMEZCUzFjc1kwRkJUQ3hIUVVGelFpeExRVUYwUWpzN1FVRkRRU3hYUVVGTFJ5eFZRVUZNT3p0QlFVVkJMREJHUVVGclFqRjVRaXhYUVVGc1FpeEZRVUVyUWt3c1VVRkJMMElzUlVGQmVVTkZMRTlCUVhwRExFVkJRV3RFSzNoQ0xGZEJRV3hFTzBGQlEwUTdPenRYUVVWRUxHVkJRVTAxZUVJc1YwRkJUaXhGUVVGdFFqdEJRVU5xUWl4WFFVRkxNbmxDTEZkQlFVdzdPMEZCUTBFc2IwWkJRVmt6ZVVJc1YwRkJXanRCUVVORU96czdWMEZGUkN4blFrRkJUMEVzVjBGQlVDeEZRVUZ2UWt3c1VVRkJjRUlzUlVGQk9FSkZMRTlCUVRsQ0xFVkJRWFZESzNoQ0xGZEJRWFpETEVWQlFXOUVPMEZCUTJ4RUxGZEJRVXRYTEdOQlFVd3NSMEZCYzBJc1MwRkJkRUk3TzBGQlEwRXNWMEZCUzBnc1RVRkJUQ3hEUVVGWmRHaENMRWxCUVZvN08wRkJSVUVzTkVaQlFXOUNPVkVzVjBGQmNFSXNSVUZCYVVOTUxGRkJRV3BETEVWQlFUSkRSU3hQUVVFelF5eEZRVUZ2UkN0NFFpeFhRVUZ3UkR0QlFVTkVPenM3VjBGRlJDeHJRa0ZCVXp0QlFVTlFMRmRCUVV0bExGZEJRVXc3TzBGQlEwRTdRVUZEUkRzN08xZEJSVVFzWjBKQlFVODdRVUZEVEN4WFFVRkxRU3hYUVVGTU96dEJRVU5CTEZkQlFVdFFMRTFCUVV3c1EwRkJXWEI1UWl4WFFVRmFMRWRCUVRCQ0xFTkJRVEZDT3p0QlFVTkJPMEZCUTBRN096czdSVUZ1U0d0Q05uZENPenRCUVhOSWNrSXNjVVJCUVdWeFFpeE5RVUZtTEVVN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzQkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3TzBGQlEwRXNTVUZCVFZVc1QwRkJUeXhIUVVGSExFTkJRVU1zVlVGQlJDeEZRVUZoTEZGQlFXSXNRMEZCYUVJN1FVRkRRU3hKUVVGTlF5eFpRVUZaTEVkQlFVY3NRMEZCUXl4TFFVRkVMRVZCUVZFc1dVRkJVaXhGUVVGelFpeExRVUYwUWl4RFFVRnlRanRCUVVOQkxFbEJRVTFETEdWQlFXVXNSMEZCUnl4RFFVRkRMRlZCUVVRc1JVRkJZU3hOUVVGaUxFVkJRWEZDTEZGQlFYSkNMRVZCUVN0Q0xFMUJRUzlDTEVOQlFYaENPMEZCUTBFc1NVRkJUVU1zVjBGQlZ5eEhRVUZITzBGQlEyeENReXhGUVVGQlFTeEhRVUZITEVWQlFVVTdRVUZEU0VNc1NVRkJRVUVzUzBGQlN5eEZRVUZGTEVOQlFVTXNUVUZCUkN4RlFVRlRMRTlCUVZRc1JVRkJhMElzVDBGQmJFSXNSVUZCTWtJc1QwRkJNMElzUTBGRVNqdEJRVVZJUXl4SlFVRkJRU3hSUVVGUkxFVkJRVVU3UVVGRFVrTXNUVUZCUVVFc1VVRkJVU3hGUVVGRkxFMUJSRVk3UVVGRlVrTXNUVUZCUVVFc1RVRkJUU3hGUVVGRk8wRkJSa0U3UVVGR1VDeEhRVVJoTzBGQlVXeENReXhGUVVGQlFTeEhRVUZITEVWQlFVVTdRVUZEU0Vvc1NVRkJRVUVzUzBGQlN5eEZRVUZGTEVOQlFVTXNUVUZCUkN4RlFVRlRMRTlCUVZRc1EwRkVTanRCUVVWSVF5eEpRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRkRVa01zVFVGQlFVRXNVVUZCVVN4RlFVRkZMRTFCUkVZN1FVRkZVa01zVFVGQlFVRXNUVUZCVFN4RlFVRkZPMEZCUmtFN1FVRkdVRHRCUVZKaExFTkJRWEJDTzBGQlowSkJUQ3hYUVVGWExFTkJRVU5QTEZWQlFWb3NSMEZCZVVKUUxGZEJRVmNzUTBGQlEwTXNSMEZCY2tNN1FVRkRRU3hKUVVGSlR5eFZRVUZLTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wbEJRMDFET3pzN096dEJRVU5LTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBVc2RVTkJRMFV6Y0VJc1NVRkVSaXhGUVdGRk8wRkJRVUU3TzBGQlFVRXNVVUZZUVd0R0xFOUJWMEVzZFVWQldGVTdRVUZEVWpCclFpeE5RVUZCUVN4TFFVRkxMRVZCUVVWeU1rSXNVMEZFUXp0QlFVVlNjekpDTEUxQlFVRkJMRTFCUVUwc1JVRkJSWFF5UWl4VFFVWkJPMEZCUjFKMU1rSXNUVUZCUVVFc1VVRkJVU3hGUVVGRmRqSkNMRk5CU0VZN1FVRkpVbmN5UWl4TlFVRkJRU3hYUVVGWExFVkJRVVVzUzBGS1REdEJRVXRTUXl4TlFVRkJRU3hWUVVGVkxFVkJRVVY2TWtJc1UwRk1TanRCUVUxU1oxY3NUVUZCUVVFc1owSkJRV2RDTEVWQlFVVXNRMEZPVmp0QlFVOVNNR2RDTEUxQlFVRkJMR3RDUVVGclFpeEZRVUZGTEVsQlVGbzdRVUZSVW5SQ0xFMUJRVUZCTEUxQlFVMHNSVUZCUlN4RFFWSkJPMEZCVTFKMVFpeE5RVUZCUVN4UlFVRlJMRVZCUVVVN1FVRlVSaXhMUVZkV096dEJRVUZCT3p0QlFVTkJMRGhDUVVGTmJIRkNMRWxCUVU0N1FVRkZRU3hWUVVGTGJYRkNMRmxCUVV3c1IwRkJiMElzUlVGQmNFSTdRVUZEUVN4VlFVRkxReXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNPMEZCUTBFc1ZVRkJTME1zWlVGQlRDeEhRVUYxUWl4SlFVRjJRanRCUVVOQkxGVkJRVXRETEZsQlFVd3NSMEZCYjBJc1MwRkJjRUk3UVVGRFFTeFZRVUZMTDJkQ0xHZENRVUZNTEVkQlFYZENPVlFzVFVGQlRTeERRVUZETWxrc1MwRkJVQ3hEUVVGaE0xa3NUVUZCVFN4RFFVRkRlVkFzVDBGQlR5eERRVUZEY1VVc1owSkJRVlFzUTBGQmJrSXNTVUZEY0VJc1EwRkViMElzUjBGRmNFSTVWQ3hOUVVGTkxFTkJRVU41VUN4UFFVRlBMRU5CUVVOeFJTeG5Ra0ZCVkN4RFFVWldPMEZCUjBFc1ZVRkJTekJuUWl4clFrRkJUQ3hIUVVFd1FuZ3dRaXhOUVVGTkxFTkJRVU15V1N4TFFVRlFMRU5CUVdFeldTeE5RVUZOTEVOQlFVTjVVQ3hQUVVGUExFTkJRVU1yYTBJc2EwSkJRVlFzUTBGQmJrSXNTVUZEZEVJc1EwRkVjMElzUjBGRmRFSjRNRUlzVFVGQlRTeERRVUZEZVZBc1QwRkJUeXhEUVVGREsydENMR3RDUVVGVUxFTkJSbFk3UVVGSFFTeFZRVUZMZEVJc1RVRkJUQ3hIUVVGamJIcENMRTFCUVUwc1EwRkJRekpaTEV0QlFWQXNRMEZCWVROWkxFMUJRVTBzUTBGQlEzbFFMRTlCUVU4c1EwRkJRM2xxUWl4TlFVRlVMRU5CUVc1Q0xFbEJRMVlzUTBGRVZTeEhRVVZXYkhwQ0xFMUJRVTBzUTBGQlEzbFFMRTlCUVU4c1EwRkJRM2xxUWl4TlFVRlVMRU5CUmxZN1FVRkhRU3hWUVVGTE5FSXNVMEZCVEN4SFFVRnBRbkpzUWl4UFFVRlBMRU5CUVVObmJFSXNVVUZCVWl4SlFVRnZRaXhMUVVGeVF6dEJRVU5CTEZWQlFVdHlZaXhUUVVGTUxFZEJRV2xDTzBGQlEyWTRXaXhOUVVGQlFTeE5RVUZOTEVWQlFVVndNMElzY1VKQlFVRTdRVUZFVHl4TFFVRnFRanRCUVVkQkxGVkJRVXRwTlVJc1lVRkJUQ3hIUVVGeFFpeExRVUZ5UWl4RFFYQkNRU3hEUVhOQ1FUczdRVUZEUVN4VlFVRkxReXhOUVVGTUxFZEJRV04yYkVJc1QwRkJUeXhEUVVGRE1HdENMRXRCUVZJc1NVRkJhVUlzVFVGQlMzWndRaXhYUVVGTUxFTkJRV2xDY1hGQ0xHTkJRV3BDTEVOQlFXZERReXhQUVVFdlJEdEJRVU5CTEZWQlFVdERMRk5CUVV3c1IwRkRSVEZzUWl4UFFVRlBMRU5CUVVNMGEwSXNVVUZCVWl4SlFVRnZRaXhOUVVGTGVuQkNMRmRCUVV3c1EwRkJhVUp4Y1VJc1kwRkJha0lzUTBGQlowTkhMRmxCUkhSRU8wRkJSVUVzVlVGQlMwTXNUMEZCVEN4SFFVRmxMMElzVDBGQlR5eERRVUZET1hwQ0xGRkJRVklzUTBGQmFVSnBVU3hQUVVGUExFTkJRVU15YTBJc1RVRkJla0lzU1VGRFdETnJRaXhQUVVGUExFTkJRVU15YTBJc1RVRkVSeXhIUVVWWUxFMUJRVXQ0Y0VJc1YwRkJUQ3hEUVVGcFFuRnhRaXhqUVVGcVFpeERRVUZuUTBzc1RVRkdjRU03UVVGSFFTeFZRVUZMUXl4WlFVRk1MRWRCUVc5Q2FFTXNXVUZCV1N4RFFVRkRMM3BDTEZGQlFXSXNRMEZCYzBKcFVTeFBRVUZQTEVOQlFVTTJhMElzVjBGQk9VSXNTVUZEYUVJM2EwSXNUMEZCVHl4RFFVRkRObXRDTEZkQlJGRXNSMEZGYUVJc1RVRkJTekZ3UWl4WFFVRk1MRU5CUVdsQ2NYRkNMR05CUVdwQ0xFTkJRV2REVHl4WlFVWndRenRCUVVkQkxGVkJRVXRETEZkQlFVd3NSMEZCYlVKb1F5eFhRVUZYTEVOQlFVTXNUVUZCU3poQ0xGbEJRVTRzUTBGQldDeERRVUVyUWpWQ0xFdEJRUzlDTEVOQlFYRkRiakJDTEZGQlFYSkRMRU5CUTJwQ2FWRXNUMEZCVHl4RFFVRkRPR3RDTEZWQlJGTXNTVUZIWmpsclFpeFBRVUZQTEVOQlFVTTRhMElzVlVGSVR5eEhRVWxtTEUxQlFVc3pjRUlzVjBGQlRDeERRVUZwUW5GeFFpeGpRVUZxUWl4RFFVRm5RMU1zVlVGS2NFTTdRVUZvUTBFN1FVRnhRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3UVVFeVJrVTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMFVzYlVKQlFXOUNPMEZCUTJ4Q0xGVkJRVWtzUzBGQlMyWXNZMEZCVkN4RlFVRjVRanRCUVVOMlFpeGxRVUZQTEV0QlFVdEJMR05CUVV3c1EwRkJiMEo0Unl4SlFVRXpRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdWQlFVOHNTVUZCVUR0QlFVTkVPMEZCUTBZN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xTkJRMFVzWlVGQmRVSTdRVUZEY2tJc1lVRkJUeXhMUVVGTE1FUXNhVUpCUVZvN1FVRkRSRHRUUVVWRUxHRkJRWEZDY2tJc1RVRkJja0lzUlVGQk5rSTdRVUZETTBJc1YwRkJTM0ZDTEdsQ1FVRk1MRWRCUVhsQ2NrSXNUVUZCZWtJN08wRkJSVUVzVlVGQlNTeExRVUZMYlVVc1kwRkJWQ3hGUVVGNVFqdEJRVU4yUWl4aFFVRkxRU3hqUVVGTUxFTkJRVzlDTjJkQ0xHZENRVUZ3UWl4SFFVRjFRekJqTEUxQlFYWkRPMEZCUTBRN1FVRkRSanRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFRRVU5GTEdWQlFYbENPMEZCUTNaQ0xHRkJRVThzUzBGQlMyMUdMRzFDUVVGTUxFZEJRVEpDTEVsQlFXeERPMEZCUTBRN1UwRkZSQ3hoUVVGMVFtNW9RaXhSUVVGMlFpeEZRVUZwUXp0QlFVTXZRaXhYUVVGTGJXaENMRzFDUVVGTUxFZEJRVEpDYm1oQ0xGRkJRVkVzUjBGQlJ5eEpRVUYwUXp0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPMEZCWlVVN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRSU3cyUWtGQlowSTBaaXhOUVVGb1FpeEZRVUYzUWp0QlFVTjBRanRCUVVOQkxGVkJRMFZCTEUxQlFVMHNTMEZCUzNReVFpeFRRVUZZTEVsQlEwRXNTMEZCU3poTkxGZEJRVXdzUTBGQmFVSm5ja0lzVjBGQmFrSXNSMEZCSzBJc1MwRkJTMmh5UWl4WFFVRk1MRU5CUVdsQ2FYSkNMSGRDUVVac1JDeEZRVWRGTzBGQlEwRjZRaXhSUVVGQlFTeE5RVUZOTEVkQlFVY3NTMEZCUzNod1FpeFhRVUZNTEVOQlFXbENjWEZDTEdOQlFXcENMRU5CUVdkRFN5eE5RVUY2UXp0QlFVTkVPenRCUVVWRUxHRkJRVTlzUWl4TlFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSGxDUVVGblFqQkNMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzUkNMRlZCUVVsQkxFMUJRVTBzUzBGQlMyZzBRaXhUUVVGWUxFbEJRWGRDTEVOQlFVTjVNVUlzV1VGQldTeERRVUZETDNwQ0xGRkJRV0lzUTBGQmMwSnpNa0lzVFVGQmRFSXNRMEZCTjBJc1JVRkJORVE3UVVGRE1VUkJMRkZCUVVGQkxFMUJRVTBzUjBGQlJ5eExRVUZMYkhKQ0xGZEJRVXdzUTBGQmFVSnhjVUlzWTBGQmFrSXNRMEZCWjBOUExGbEJRWHBETzBGQlEwUTdPMEZCUlVRc1lVRkJUMDBzVFVGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeDFRa0ZCWTBNc1NVRkJaQ3hGUVVGdlFqdEJRVU5zUWp0QlFVTkJMRlZCUTBWQkxFbEJRVWtzUzBGQlMybzBRaXhUUVVGVUxFbEJRMEVzUTBGQlF6SXhRaXhYUVVGWExFTkJRVU1zUzBGQlN6aENMRmxCUVU0c1EwRkJXQ3hEUVVFclFqVkNMRXRCUVM5Q0xFTkJRWEZEYmpCQ0xGRkJRWEpETEVOQlFUaERkVEpDTEVsQlFUbERMRU5CUmtnc1JVRkhSVHRCUVVOQlFTeFJRVUZCUVN4SlFVRkpMRWRCUVVkMFF5eFhRVUZYTEVOQlFVTXNTMEZCU3poQ0xGbEJRVTRzUTBGQldDeERRVUVyUWpOQ0xGRkJRUzlDTEVOQlFYZERMRXRCUVV0NVFpeFBRVUUzUXl4RFFVRlFPMEZCUTBRN08wRkJSVVFzWVVGQlQxVXNTVUZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4M1FrRkJaVU1zVDBGQlppeEZRVUYzUWp0QlFVTjBRaXhWUVVGTk4wSXNTMEZCU3l4SFFVRkhMRXRCUVV0MmNFSXNWMEZCVEN4RFFVRnBRbkZ5UWl4WlFVRnFRaXhEUVVFNFFqZFlMRWxCUVRsQ0xFTkJRVzFETEZWQlFVRTFZaXhEUVVGRE8wRkJRVUVzWlVGQlNVRXNRMEZCUXl4RFFVRkRNSHBDTEVWQlFVWXNTMEZCVTBZc1QwRkJZanRCUVVGQkxFOUJRWEJETEVOQlFXUXNRMEZFYzBJc1EwRkhkRUk3TzBGQlEwRXNWVUZCU1RkQ0xFdEJRVXNzUzBGQlMzSXlRaXhUUVVGV0xFbEJRWFZDTEVOQlFVTnhNa0lzUzBGQlN5eERRVUZEWjBNc1owSkJRVTRzUTBGQmRVSXpNa0lzVVVGQmRrSXNRMEZCWjBNc1MwRkJTell4UWl4UFFVRnlReXhEUVVFMVFpeEZRVUV5UlR0QlFVTjZSVmNzVVVGQlFVRXNUMEZCVHl4SFFVRkhMRXRCUVV0d2NrSXNWMEZCVEN4RFFVRnBRbkZ4UWl4alFVRnFRaXhEUVVGblEwTXNUMEZCTVVNN1FVRkRSRHM3UVVGRlJDeGhRVUZQWXl4UFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMREpDUVVGclFqTkNMRkZCUVd4Q0xFVkJRVFJDTzBGQlFVRTdPMEZCUXpGQ0xGVkJRVTFHTEV0QlFVc3NSMEZCUnl4TFFVRkxkbkJDTEZkQlFVd3NRMEZCYVVKeGNrSXNXVUZCYWtJc1EwRkJPRUkzV0N4SlFVRTVRaXhEUVVGdFF5eFZRVUZCTldJc1EwRkJRenRCUVVGQkxHVkJRVWxCTEVOQlFVTXNRMEZCUXpCNlFpeEZRVUZHTEV0QlFWTXNUVUZCU1N4RFFVRkRiRUlzVFVGQmJFSTdRVUZCUVN4UFFVRndReXhEUVVGa08wRkJRMEVzVlVGQlRXOUNMRmxCUVZrc1IwRkJSeXhMUVVGTGVISkNMRmRCUVV3c1EwRkJhVUo1Y2tJc1pVRkJha0lzUTBGQmFVTm9ReXhSUVVGcVF5eERRVUZ5UWl4RFFVWXdRaXhEUVVreFFqczdRVUZEUVN4VlFVRk5hVU1zWTBGQll5eEhRVUZITEVOQlFVTnVReXhMUVVGTExFTkJRVU52UXl4WlFVRlFMRU5CUVhaQ096dEJRVU5CTEZWQlFVbHdReXhMUVVGTExFTkJRVU54UXl4MVFrRkJWaXhGUVVGdFF6dEJRVU5xUTBZc1VVRkJRVUVzWTBGQll5eERRVUZETTNsQ0xFbEJRV1lzVDBGQlFUSjVRaXhqUVVGakxHZEVRVUZUYmtNc1MwRkJTeXhEUVVGRGNVTXNkVUpCUVdZc1JVRkJaRHRCUVVORUxFOUJVbmxDTEVOQlZURkNPenM3UVVGRFFTeFZRVUZKTEVOQlFVTkdMR05CUVdNc1EwRkJRemt5UWl4UlFVRm1MRU5CUVhkQ05ESkNMRmxCUVhoQ0xFTkJRVXdzUlVGQk5FTTdRVUZETVVNdlFpeFJRVUZCUVN4UlFVRlJMRWRCUVVjc1MwRkJTM3B3UWl4WFFVRk1MRU5CUVdsQ05uSkNMRzlDUVVGcVFpeERRVUZ6UTNSRExFdEJRVXNzUTBGQlEyOURMRmxCUVRWRExFTkJRVmc3UVVGRFJEczdRVUZGUkN4aFFVRlBiRU1zVVVGQlVEdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2NVSkJRVms3UVVGRFZqdEJRVU5CTEZkQlFVdG5RaXhQUVVGTUxFZEJRV1VzUzBGQlMzRkNMR1ZCUVV3c1EwRkJjVUlzUzBGQlMzSkNMRTlCUVRGQ0xFTkJRV1k3UVVGRFFTeFhRVUZMUlN4WlFVRk1MRWRCUVc5Q0xFdEJRVXR2UWl4bFFVRk1MRU5CUVhGQ0xFdEJRVXR3UWl4WlFVRXhRaXhEUVVGd1FqdEJRVU5CTEZkQlFVdEZMRmRCUVV3c1IwRkJiVUlzUzBGQlMyMUNMR0ZCUVV3c1EwRkJiVUlzUzBGQlMyNUNMRmRCUVhoQ0xFTkJRVzVDTzBGQlEwRXNWMEZCUzFRc1RVRkJUQ3hIUVVGakxFdEJRVXMyUWl4alFVRk1MRU5CUVc5Q0xFdEJRVXMzUWl4TlFVRjZRaXhEUVVGa08wRkJRMEVzVjBGQlMwY3NVMEZCVEN4SFFVRnBRaXhMUVVGTE1rSXNhVUpCUVV3c1EwRkJkVUlzUzBGQlN6TkNMRk5CUVRWQ0xFTkJRV3BDTzBGQlEwRXNWMEZCUzA0c1dVRkJUQ3hIUVVGdlFpeEpRVUZ3UWp0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeHpRa0ZCWVR0QlFVTllPMEZCUTBFc1ZVRkJTU3hMUVVGTGFuRkNMRmRCUVV3c1EwRkJhVUp0YzBJc1QwRkJha0lzU1VGQk5FSXNRMEZCUXl4TFFVRkxiRU1zV1VGQmRFTXNSVUZCYjBRN1FVRkRiRVFzWVVGQlMyMURMRk5CUVV3N1FVRkRSQ3hQUVVwVkxFTkJUVmc3T3p0QlFVTkJMR0ZCUVU4N1FVRkRUREZDTEZGQlFVRkJMRTFCUVUwc1JVRkJSU3hMUVVGTFJDeFBRVVJTTzBGQlJVeEhMRkZCUVVGQkxGbEJRVmtzUlVGQlJTeExRVUZMUkN4WlFVWmtPMEZCUjB4SExGRkJRVUZCTEZWQlFWVXNSVUZCUlN4TFFVRkxSQ3hYUVVoYU8wRkJTVXhRTEZGQlFVRkJMRTlCUVU4c1JVRkJSU3hMUVVGTFJpeE5RVXBVTzBGQlMweDFRaXhSUVVGQlFTeFpRVUZaTEVWQlFVVXNTMEZCU3pOeVFpeFhRVUZNTEVOQlFXbENlWEpDTEdWQlFXcENMRU5CUVdsRExFdEJRVXRzUWl4VFFVRjBRenRCUVV4VUxFOUJRVkE3UVVGUFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNkVUpCUVdOcVRTeE5RVUZrTEVWQlFYbERPMEZCUVVFN08wRkJRVUVzVlVGQmJrSXJUaXhaUVVGdFFpeDFSVUZCU2l4RlFVRkpPenRCUVVOMlF5eFZRVUZOUXl4aFFVRmhMRWRCUVVjc1MwRkJTME1zVlVGQlRDeEZRVUYwUWpzN1FVRkRRU3hWUVVGSkxFTkJRVU5xVHl4TlFVRk1MRVZCUVdFN1FVRkRXQ3hsUVVGUFowOHNZVUZCVUR0QlFVTkVPenRCUVVWRUxGZEJRVXR5UXl4WlFVRk1MRWRCUVc5Q0xFdEJRWEJDTzBGQlEwRXNWVUZCVFhWRExHZENRVUZuUWl4SFFVRkhlR2hDTEVsQlFVa3NRMEZCUTJsRExGTkJRVXdzUTBGQlpYRm1MR0ZCUVdZc1EwRkJla0lzUTBGUWRVTXNRMEZUZGtNN08wRkJRMEVzVlVGQlNXaFBMRTFCUVUwc1EwRkJRMjlOTEUxQlFWZ3NSVUZCYlVJN1FVRkRha0lzWVVGQlMwUXNUMEZCVEN4SFFVRmxiazBzVFVGQlRTeERRVUZEYjAwc1RVRkJkRUk3UVVGRFJEczdRVUZGUkN4VlFVRkpjRTBzVFVGQlRTeERRVUZEYjB3c1YwRkJXQ3hGUVVGM1FqdEJRVU4wUWl4aFFVRkxhVUlzV1VGQlRDeEhRVUZ2UW5KTkxFMUJRVTBzUTBGQlEyOU1MRmRCUVROQ08wRkJRMFE3TzBGQlJVUXNWVUZCU1hCTUxFMUJRVTBzUTBGQlEzZE5MRlZCUVZnc1JVRkJkVUk3UVVGRGNrSXNZVUZCUzBRc1YwRkJUQ3hIUVVGdFFuWk5MRTFCUVUwc1EwRkJRM2ROTEZWQlFURkNPMEZCUTBRN08wRkJSVVFzVlVGQlNYaE5MRTFCUVUwc1EwRkJRMmROTEU5QlFWZ3NSVUZCYjBJN1FVRkRiRUlzWVVGQlMwWXNUVUZCVEN4SFFVRmpPVXdzVFVGQlRTeERRVUZEWjAwc1QwRkJja0k3UVVGRFJEczdRVUZGUkN4VlFVRkphRTBzVFVGQlRTeERRVUZEYlU4c1VVRkJXQ3hGUVVGeFFqdEJRVU51UWl4aFFVRkxiRU1zVTBGQlRDeEhRVUZwUW1wTkxFMUJRVTBzUTBGQlEyMVBMRkZCUVhoQ08wRkJRMFFzVDBFMVFuTkRMRU5CT0VKMlF6czdPMEZCUTBFc1ZVRkJUVU1zVjBGQlZ5eEhRVUZITEV0QlFVdElMRlZCUVV3c1JVRkJjRUlzUTBFdlFuVkRMRU5CYVVOMlF6czdPMEZCUTBFc1ZVRkJUVWtzVTBGQlV5eEhRVUZITTJoQ0xFbEJRVWtzUTBGQlEybERMRk5CUVV3c1EwRkJaWGxtTEZkQlFXWXNRMEZCYkVJN08wRkJRMEVzVlVGQlNVWXNaMEpCUVdkQ0xFdEJRVXRITEZOQlFYcENMRVZCUVc5RE8wRkJRMnhETEdGQlFVc3hReXhaUVVGTUxFZEJRVzlDTEVsQlFYQkNPMEZCUTBFc1pVRkJUM2xETEZkQlFWQTdRVUZEUkN4UFFYUkRjME1zUTBGM1EzWkRPenM3UVVGRFFUbDBRaXhOUVVGQlFTeE5RVUZOTEVOQlFVTnRRaXhQUVVGUUxFTkJRV1VzUzBGQlN5dHdRaXhaUVVGd1FpeEZRVUZyUXpFeVFpeFBRVUZzUXl4RFFVRXdReXhuUWtGQmIwSTdRVUZCUVR0QlFVRkJMRmxCUVd4Q2JYZENMRWxCUVd0Q08wRkJRVUVzV1VGQlduTkZMRTFCUVZrN08wRkJRelZFTzBGQlEwRXNXVUZCU1hkRkxGbEJRVmtzUTBGQlEzb3pRaXhSUVVGaUxFTkJRWE5DTW5WQ0xFbEJRWFJDTEVOQlFVb3NSVUZCYVVNN1FVRkRMMEk3UVVGRFJEczdRVUZGUkN4WlFVRk5jVW9zWlVGQlpTeEhRVUZITldoQ0xFbEJRVWtzUTBGQlEybERMRk5CUVV3c1EwRkJaVFJoTEUxQlFVMHNRMEZCUTNaS0xFMUJRWFJDTEVOQlFYaENMRU5CVGpSRUxFTkJVVFZFT3p0QlFVTkJMRmxCUVVselR5eGxRVUZsTEV0QlFVdEVMRk5CUVhoQ0xFVkJRVzFETzBGQlEycERMR2RDUVVGSkxFTkJRVU5GTEdGQlFVd3NRMEZCYlVKMFNpeEpRVUZ1UWl4RlFVRjVRbTFLTEZkQlFYcENPMEZCUTBRN1FVRkRSaXhQUVZwRU8wRkJZMEVzWVVGQlQwRXNWMEZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3gxUWtGQlkyNUtMRWxCUVdRc1JVRkJiMEpxUml4TlFVRndRaXhGUVVFeVF6dEJRVUZCT3p0QlFVRkJMRlZCUVdab1pDeExRVUZsTEhWRlFVRlFMRXRCUVU4N1FVRkRla01zVlVGQlRYVnRRaXhOUVVGTkxFZEJRVWNzUzBGQlMybERMRmxCUVV3c1EwRkJhMEoyUnl4SlFVRnNRaXhMUVVFeVFpeEZRVUV4UXl4RFFVUjVReXhEUVVWNlF6czdRVUZEUVN4VlFVTkZMRU5CUVVOcWFVSXNTMEZCUkN4SlFVTkJaMlFzVFVGQlRTeExRVUZMY0hKQ0xGTkJSRmdzU1VGRlFUSXdRaXhOUVVGTkxFTkJRVU4yU2l4TlFVWlFMRWxCUjBGMFZDeEpRVUZKTEVOQlFVTnBReXhUUVVGTUxFTkJRV1Z4VWl4TlFVRm1MRTFCUVRKQ2RGUXNTVUZCU1N4RFFVRkRhVU1zVTBGQlRDeERRVUZsTkdFc1RVRkJUU3hEUVVGRGRrb3NUVUZCZEVJc1EwRktOMElzUlVGTFJUdEJRVU5CTEdWQlFVOTFTaXhOUVVGUU8wRkJRMFFzVDBGV2QwTXNRMEZaZWtNN096dEJRVU5CTEZWQlFVMXBSaXhYUVVGWExFZEJRVWNzYzBaQlEyWjRUeXhOUVVSWk8wRkJSV1o1VHl4UlFVRkJRU3hKUVVGSkxFVkJRVVY0U2l4SlFVWlRPMEZCUjJaNVNpeFJRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRklTeXhSUVVGcVFqczdRVUZMUVN4VlFVRk5ReXhuUWtGQlowSXNSMEZCUnl4elJrRkRjRUpJTEZkQlJHbENPMEZCUlhCQ2JFTXNVVUZCUVVFc1dVRkJXU3hGUVVGRkxFMUJSazA3UVVGSGNFSnpReXhSUVVGQlFTeGxRVUZsTEVWQlFVVjBSVHRCUVVoSExGRkJRWFJDTEVOQmJFSjVReXhEUVhkQ2VrTTdPenRCUVVOQlppeE5RVUZCUVN4TlFVRk5MRU5CUVVOMlNpeE5RVUZRTEVkQlFXZENRU3hOUVVGb1FqdEJRVU5CZFVvc1RVRkJRVUVzVFVGQlRTeERRVUZEYWxvc1QwRkJVQ3hIUVVGcFFqbGhMRTlCUVU4c1EwRkJReXRoTEVkQlFWSXNRMEZCV1N4RFFVTXpRaXhMUVVGTGMyVXNjMEpCUVV3c1EwRkJORUpHTEdkQ1FVRTFRaXhEUVVReVFpeEZRVVV6UWl4TFFVRkxSeXhuUWtGQlRDeERRVUZ6UWs0c1YwRkJkRUlzUTBGR01rSXNRMEZCV2l4RlFVZGtMelJDTEVsQlNHTXNRMEZIVkN4VlFVRkJjelZDTEU5QlFVOHNSVUZCU1R0QlFVTnFRaXhsUVVGUExFMUJRVWtzUTBGQlEwTXNZVUZCVEN4aFFVRkpMRWRCUVdVdlNpeEpRVUZtTEhWRVFVRjNRamhLTEU5QlFYaENMRWRCUVZnN1FVRkRSQ3hQUVV4blFpeERRVUZxUWp0QlFVMUJMRmRCUVV0MlJDeFpRVUZNTEVOQlFXdENka2NzU1VGQmJFSXNTVUZCTUVKelJTeE5RVUV4UWp0QlFVVkJMR0ZCUVU5QkxFMUJRVkE3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEhWQ1FVRmpkRVVzU1VGQlpDeEZRVUZ2UW5ORUxGZEJRWEJDTEVWQlFXbERiMElzVjBGQmFrTXNSVUZCT0VNN1FVRkROVU1zWVVGQlR5eEpRVUZKUkN4elFrRkJTaXhEUVVGWExFbEJRVmdzUlVGQmFVSjZSU3hKUVVGcVFpeEZRVUYxUW5ORUxGZEJRWFpDTEVWQlFXOURiMElzVjBGQmNFTXNRMEZCVUR0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNNRUpCUVdsQ2MwWXNUVUZCYWtJc1JVRkJlVUk3UVVGQlFUczdRVUZEZGtJc1lVRkJUeXhKUVVGSmNqaENMR0ZCUVVvc1EwRkJZU3hWUVVGRFl5eFBRVUZFTEVWQlFWVkRMRTFCUVZZc1JVRkJjVUk3UVVGRGRrTXNZMEZCU1N4RFFVRkRLMDRzVjBGQlRDeERRVUZwUWxNc1VVRkJha0lzUTBGQk1FSXJjMElzVTBGQk1VSXNRMEZCYjBORExITkNRVUZ3UXl4RFFVTkZSaXhOUVVSR0xFVkJSVVVzVlVGQlUybzJRaXhMUVVGVUxFVkJRV2RDYnpaQ0xFZEJRV2hDTEVWQlFYRkNPMEZCUTI1Q0xHTkJRVWtzUTBGQlEzQTJRaXhMUVVGTUxFVkJRVms3UVVGRFZuUkNMRmxCUVVGQkxFOUJRVThzUTBGQlF6dEJRVUZETURkQ0xHTkJRVUZCTEVkQlFVY3NSVUZCU0VFN1FVRkJSQ3hoUVVGRUxFTkJRVkE3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEhvM1FpeFpRVUZCUVN4TlFVRk5MRU5CUVVOeFFpeExRVUZFTEVOQlFVNDdRVUZEUkR0QlFVTkdMRk5CVWtnN1FVRlZSQ3hQUVZoTkxFTkJRVkE3UVVGWlJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxHZERRVUYxUW1rMlFpeE5RVUYyUWl4RlFVRXJRanRCUVVGQk96dEJRVU0zUWl4aFFVRlBMRXRCUVV0MmRFSXNWMEZCVEN4RFFVRnBRbE1zVVVGQmFrSXNRMEZCTUVKcmRFSXNTMEZCTVVJc1EwRkRTa01zWjBKQlJFa3NRMEZEWVV3c1RVRkVZaXhGUVVWS00yVXNUMEZHU1N4SFFVZEtOMkVzU1VGSVNTeERRVWRETEZWQlFVRmtMRTFCUVUwc1JVRkJTVHRCUVVOa08wRkJRMEVzV1VGQlRUUTJRaXhWUVVGVkxFZEJRVWMzYVVJc1NVRkJTU3hEUVVGRGFVTXNVMEZCVEN4RFFVRmxhR0VzVFVGQlRTeERRVUZETmpaQ0xGZEJRWFJDTEVOQlFXNUNPMEZCUTBFc1dVRkJUVU1zU1VGQlNTeEhRVUZITDJsQ0xFbEJRVWtzUTBGQlEwTXNTMEZCVEN4RFFVRlhOR2xDTEZWQlFWZ3NRMEZCWWp0QlFVTkJMRmxCUVUxSExFOUJRVThzUjBGQlIwUXNTVUZCU1N4RFFVRkRSU3hKUVVGTUxFTkJRVlY0TUVJc1IwRkJWaXhEUVVGakxGVkJRVUYyUml4RFFVRkRPMEZCUVVFc2FVSkJRVWxuTmtJc1RVRkJUU3hEUVVGRFF5eFpRVUZRTEVOQlFXOUNhalpDTEVOQlFYQkNMRU5CUVVvN1FVRkJRU3hUUVVGbUxFVkJRVEpEZDNkQ0xFbEJRVE5ETEVOQlFXZEVMRVZCUVdoRUxFTkJRV2hDTzBGQlJVRXNXVUZCVFRCS0xGTkJRVk1zUjBGQlJ6dEJRVU5vUW5CdVFpeFZRVUZCUVN4UlFVRlJMRVZCUVVVc1JVRkVUVHRCUVVWb1FrTXNWVUZCUVVFc1NVRkJTU3hGUVVGRkxFVkJSbFU3UVVGSGFFSkRMRlZCUVVGQkxFMUJRVTBzUlVGQlJTeEZRVWhSTzBGQlNXaENReXhWUVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZLVlN4VFFVRnNRanRCUVUxQkxGbEJRVTFyYmtJc1dVRkJXU3hIUVVGSE8wRkJRMjVDY201Q0xGVkJRVUZCTEZGQlFWRXNSVUZCUlN4SlFVUlRPMEZCUlc1Q1F5eFZRVUZCUVN4SlFVRkpMRVZCUVVVc1NVRkdZVHRCUVVkdVFrTXNWVUZCUVVFc1RVRkJUU3hGUVVGRkxFbEJTRmM3UVVGSmJrSkRMRlZCUVVGQkxFbEJRVWtzUlVGQlJUdEJRVXBoTEZOQlFYSkNMRU5CV21Nc1EwRnRRbVE3TzBGQlEwRXNXVUZCVFcxdVFpeFhRVUZYTEVkQlFVY3NPRU5CUVVsT0xFOUJRVThzUTBGQlEwOHNVVUZCVWl4RFFVRnBRaXh0UWtGQmFrSXNRMEZCU2l4RlFVRXlRemt3UWl4SFFVRXpReXhEUVVOc1FpeFZRVUZCZWtVc1MwRkJTeXhGUVVGSk8wRkJRMUFzWTBGQlRYbFZMRWxCUVVrc1IwRkJSM1ZDTEVsQlFVa3NRMEZCUTBNc1MwRkJUQ3hEUVVGWGFsY3NTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJhRUlzUTBGQllpeERRVVJQTEVOQlIxQTdPMEZCUTBFc1kwRkJUWGMxUWl4UlFVRlJMRWRCUVVkS0xGTkJRVk1zUTBGQlF6TnJRaXhKUVVGSkxFTkJRVU50WlN4SlFVRk9MRU5CUVZRc1EwRkJjVUoyTUVJc1RVRkJkRU03TzBGQlEwRXNZMEZCU1cwM1FpeFJRVUZSTEVkQlFVY3NRMEZCWml4RlFVRnJRanRCUVVOb1FpeG5Ra0ZCVFVNc1VVRkJVU3hIUVVGSFRDeFRRVUZUTEVOQlFVTXphMElzU1VGQlNTeERRVUZEYldVc1NVRkJUaXhEUVVGVUxFTkJRWEZDTkVjc1VVRkJVU3hIUVVGSExFTkJRV2hETEVOQlFXcENPMEZCUTBGRExGbEJRVUZCTEZGQlFWRXNRMEZCUXpkclFpeFJRVUZVTEVkQlFXOUNTQ3hKUVVGSkxFTkJRVU56VHl4SlFVRk1MRWRCUVZrd1Z5eFJRVUZSTEVOQlFVTXhWeXhKUVVGNlF6dEJRVU5FT3p0QlFVVkVjVmNzVlVGQlFVRXNVMEZCVXl4RFFVRkRNMnRDTEVsQlFVa3NRMEZCUTIxbExFbEJRVTRzUTBGQlZDeERRVUZ4UWpkMVFpeEpRVUZ5UWl4RFFVRXdRakJSTEVsQlFURkNPMEZCUTBFMGEwSXNWVUZCUVVFc1dVRkJXU3hEUVVGRE5XdENMRWxCUVVrc1EwRkJRMjFsTEVsQlFVNHNRMEZCV2l4SFFVRXdRbTVsTEVsQlFURkNPMEZCUTBFc2FVSkJRVTlCTEVsQlFWQTdRVUZEUkN4VFFXUnBRaXhEUVVGd1FpeERRWEJDWXl4RFFYRkRaRHM3TzBGQlEwRXNXVUZCVFdsc1FpeFJRVUZSTEVkQlFVY3NSVUZCYWtJN08wRkJRMEVzV1VGQlNVd3NXVUZCV1N4RFFVRkRjbTVDTEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDTUc1Q0xGVkJRVUZCTEZGQlFWRXNRMEZCUXpNeFFpeEpRVUZVTEVOQlFXTnpNVUlzV1VGQldTeERRVUZEY201Q0xGRkJRV0lzUTBGQmMwSXJVU3hKUVVGd1F6dEJRVU5FT3p0QlFVTkVMRmxCUVVselZ5eFpRVUZaTEVOQlFVTndia0lzU1VGQmFrSXNSVUZCZFVJN1FVRkRja0o1YmtJc1ZVRkJRVUVzVVVGQlVTeERRVUZETXpGQ0xFbEJRVlFzUTBGQlkzTXhRaXhaUVVGWkxFTkJRVU53YmtJc1NVRkJZaXhEUVVGclFqaFJMRWxCUVdoRE8wRkJRMFE3TzBGQlEwUXNXVUZCU1hOWExGbEJRVmtzUTBGQlEyNXVRaXhOUVVGcVFpeEZRVUY1UWp0QlFVTjJRbmR1UWl4VlFVRkJRU3hSUVVGUkxFTkJRVU16TVVJc1NVRkJWQ3hEUVVGamN6RkNMRmxCUVZrc1EwRkJRMjV1UWl4TlFVRmlMRU5CUVc5Q05sRXNTVUZCYkVNN1FVRkRSRHM3UVVGRFJDeFpRVUZKYzFjc1dVRkJXU3hEUVVGRGJHNUNMRWxCUVdwQ0xFVkJRWFZDTzBGQlEzSkNkVzVDTEZWQlFVRkJMRkZCUVZFc1EwRkJRek14UWl4SlFVRlVMRU5CUVdOek1VSXNXVUZCV1N4RFFVRkRiRzVDTEVsQlFXSXNRMEZCYTBJMFVTeEpRVUZvUXp0QlFVTkVPenRCUVVORUxGbEJRVTAwVnl4UFFVRlBMRWRCUVVkMk5rSXNTVUZCU1N4RFFVRkRLMElzUjBGQlRDeFBRVUZCTDBJc1NVRkJTU3hGUVVGUmN6WkNMRkZCUVZJc1EwRkJjRUlzUTBGdVJHTXNRMEZ4UkdRN08wRkJRMEVzV1VGQlNVd3NXVUZCV1N4RFFVRkRjbTVDTEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDY1c1Q0xGVkJRVUZCTEZsQlFWa3NRMEZCUTNKdVFpeFJRVUZpTEVOQlFYTkNORU1zVVVGQmRFSXNSMEZCYVVONFZpeEpRVUZKTEVOQlFVTXJRaXhIUVVGTUxFTkJReTlDTEUxQlFVa3NRMEZCUXpRd1FpeHRRa0ZFTUVJc1JVRkZMMEkwUkN4UFFVRlBMRWRCUVVkT0xGbEJRVmtzUTBGQlEzSnVRaXhSUVVGaUxFTkJRWE5DSzFFc1NVRkdSQ3hEUVVGcVF6dEJRVWxFT3p0QlFVTkVMRmxCUVVselZ5eFpRVUZaTEVOQlFVTndia0lzU1VGQmFrSXNSVUZCZFVJN1FVRkRja0p2YmtJc1ZVRkJRVUVzV1VGQldTeERRVUZEY0c1Q0xFbEJRV0lzUTBGQmEwSXlReXhSUVVGc1FpeEhRVUUyUW5oV0xFbEJRVWtzUTBGQlF5dENMRWRCUVV3c1EwRkRNMElzVFVGQlNTeERRVUZETkRCQ0xHMUNRVVJ6UWl4RlFVVXpRalJFTEU5QlFVOHNSMEZCUjA0c1dVRkJXU3hEUVVGRGNHNUNMRWxCUVdJc1EwRkJhMEk0VVN4SlFVWkVMRU5CUVRkQ08wRkJTVVE3TzBGQlEwUXNXVUZCU1hOWExGbEJRVmtzUTBGQlEyNXVRaXhOUVVGcVFpeEZRVUY1UWp0QlFVTjJRbTF1UWl4VlFVRkJRU3haUVVGWkxFTkJRVU51YmtJc1RVRkJZaXhEUVVGdlFqQkRMRkZCUVhCQ0xFZEJRU3RDZUZZc1NVRkJTU3hEUVVGREswSXNSMEZCVEN4RFFVTTNRaXhOUVVGSkxFTkJRVU0wTUVJc2JVSkJSSGRDTEVWQlJUZENORVFzVDBGQlR5eEhRVUZIVGl4WlFVRlpMRU5CUVVOdWJrSXNUVUZCWWl4RFFVRnZRalpSTEVsQlJrUXNRMEZCTDBJN1FVRkpSRHM3UVVGRFJDeFpRVUZKYzFjc1dVRkJXU3hEUVVGRGJHNUNMRWxCUVdwQ0xFVkJRWFZDTzBGQlEzSkNhMjVDTEZWQlFVRkJMRmxCUVZrc1EwRkJRMnh1UWl4SlFVRmlMRU5CUVd0Q2VVTXNVVUZCYkVJc1IwRkJOa0o0Vml4SlFVRkpMRU5CUVVNclFpeEhRVUZNTEVOQlF6TkNMRTFCUVVrc1EwRkJRelF3UWl4dFFrRkVjMElzUlVGRk0wSTBSQ3hQUVVGUExFZEJRVWRPTEZsQlFWa3NRMEZCUTJ4dVFpeEpRVUZpTEVOQlFXdENORkVzU1VGR1JDeERRVUUzUWp0QlFVbEVPenRCUVVWRUxHVkJRVTkxVnl4WFFVRlFPMEZCUTBRc1QwRnVSa2tzUTBGQlVEdEJRVzlHUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNiMEpCUVZjdlN5eEpRVUZZTEVWQlFXbENha1lzVFVGQmFrSXNSVUZCZVVJN1FVRkRka0k3UVVGRFFTeFZRVUZKTEVOQlFVTXNTMEZCUzNSbExGZEJRVXdzUTBGQmFVSnRjMElzVDBGQmRFSXNSVUZCSzBJN1FVRkROMElzV1VGQlRYWTFRaXhEUVVGRExFZEJRVWNzZVVOQlFWWTdRVUZEUVN4bFFVRlBNVUlzYjBKQlFVRXNRMEZCWjBJd1FpeERRVUZvUWl4RFFVRlFPMEZCUTBRc1QwRk1jMElzUTBGUGRrSTdPenRCUVVOQkxGVkJRVWtzUTBGQlF6SjNRaXhKUVVGTUxFVkJRVmM3UVVGRFZDeFpRVUZOTTNkQ0xFZEJRVU1zUjBGQlJ5eHZRMEZCVmp0QlFVTkJMR1ZCUVU4eFFpeHZRa0ZCUVN4RFFVRm5RakJDTEVkQlFXaENMRU5CUVZBN1FVRkRSQ3hQUVZoelFpeERRV0YyUWpzN08wRkJRMEV5ZDBJc1RVRkJRVUVzU1VGQlNTeEhRVUZIUkN4elEwRkJRU3hEUVVFclFrTXNTVUZCTDBJc1EwRkJVRHRCUVVOQmFrWXNUVUZCUVVFc1RVRkJUU3hIUVVGSExFdEJRVXR6VVN4aFFVRk1MRU5CUVcxQ2RGRXNUVUZCYmtJc1JVRkJNa0pwUml4SlFVRXpRaXhEUVVGVU8wRkJSVUVzWVVGQlR5eExRVUZMYzBvc1lVRkJUQ3hEUVVGdFFuUktMRWxCUVc1Q0xFVkJRWGxDYWtZc1RVRkJla0lzUlVGQmFVTXhVQ3hQUVVGNFF6dEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc2MwSkJRV0U3UVVGQlFUczdRVUZEV0R0QlFVTktPMEZCUTBFN1FVRkRRVHRCUVVOSkxGVkJRVTA1VHl4SFFVRkhMRWRCUVVjc2FVcEJRVm83TzBGQlJVRnNRaXhOUVVGQlFTeE5RVUZOTEVOQlFVTnZTQ3hOUVVGUUxFTkJRV05zUnl4SFFVRmtMRVZCUVcxQ08wRkJRMnBDTzBGQlEwNDdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOTk9FY3NVVUZCUVVFc1NVRkJTU3hGUVVGRkxFdEJRVXRCTEVsQlFVd3NRMEZCVlc1RUxFbEJRVllzUTBGQlpTeEpRVUZtTEVOQlVGYzdPMEZCVVdwQ08wRkJRMDQ3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTk5iMFFzVVVGQlFVRXNTMEZCU3l4RlFVRkZMRXRCUVV0QkxFdEJRVXdzUTBGQlYzQkVMRWxCUVZnc1EwRkJaMElzU1VGQmFFSXNRMEZrVlRzN1FVRmxha0k3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTAxeFJDeFJRVUZCUVN4TlFVRk5MRVZCUVVVc1MwRkJTMEVzVFVGQlRDeERRVUZaY2tRc1NVRkJXaXhEUVVGcFFpeEpRVUZxUWl4RFFYSkNVenM3UVVGelFtcENPMEZCUTA0N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5OYzBRc1VVRkJRVUVzU1VGQlNTeEZRVUZGTEV0QlFVdEJMRWxCUVV3c1EwRkJWWFJFTEVsQlFWWXNRMEZCWlN4SlFVRm1MRU5CTlVKWE96dEJRVFpDYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMXZja0lzVVVGQlFVRXNVMEZCVXl4RlFVRkZMRXRCUVV0QkxGTkJRVXdzUTBGQlpYQnlRaXhKUVVGbUxFTkJRVzlDTEVsQlFYQkNMRU5CYmtOTk96dEJRVzlEYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMXhja0lzVVVGQlFVRXNVMEZCVXl4RlFVRkZMRXRCUVV0QkxGTkJRVXdzUTBGQlpYSnlRaXhKUVVGbUxFTkJRVzlDTEVsQlFYQkNMRU5CTVVOTk96dEJRVEpEYWtJN1FVRkRUanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwMXpja0lzVVVGQlFVRXNWMEZCVnl4RlFVRkZMRXRCUVV0QkxGZEJRVXdzUTBGQmFVSjBja0lzU1VGQmFrSXNRMEZCYzBJc1NVRkJkRUlzUTBGcVJFazdPMEZCYTBScVFqdEJRVU5PTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRUWFZ5UWl4UlFVRkJRU3haUVVGWkxFVkJRVVVzUzBGQlMwRXNXVUZCVEN4RFFVRnJRblp5UWl4SlFVRnNRaXhEUVVGMVFpeEpRVUYyUWp0QlFYaEVSeXhQUVVGdVFqdEJRVEpFUVRkRkxFMUJRVUZCTEUxQlFVMHNRMEZCUTFjc1owSkJRVkFzUTBGQmQwSlBMRWRCUVhoQ0xFVkJRVFpDTzBGQlF6TkNPMEZCUTA0N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFRXOUtMRkZCUVVGQkxHZENRVUZuUWl4RlFVRkZPMEZCUTJoQ2VVSXNWVUZCUVVFc1IwRkJSeXhGUVVGRk8wRkJRVUVzYlVKQlFVMHNUVUZCU1N4RFFVRkRla0lzWjBKQlFWZzdRVUZCUVN4WFFVUlhPMEZCUldoQ01FSXNWVUZCUVVFc1IwRkJSeXhGUVVGRkxHRkJRVUZuWWl4TlFVRk5MRVZCUVVrN1FVRkRZaXhyUWtGQlNTeERRVUZETVdNc1owSkJRVXdzUjBGQmQwSXdZeXhOUVVGNFFqdEJRVU5FTzBGQlNtVTdRVUZPVXl4UFFVRTNRanRCUVdOQkxHRkJRVTg1YkVJc1IwRkJVRHRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFRRVXRGTEdWQlFXRTdRVUZEV0N4aFFVRlBMRXRCUVV0dGRrSXNUMEZCV2p0QlFVTkVPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0VFFXSkZMR0ZCUVZjelJ5eE5RVUZZTEVWQlFXMUNPMEZCUTJwQ0xGZEJRVXN5Unl4UFFVRk1MRWRCUVdWNk5FSXNiMEpCUVVFc1EwRkJaMEk0ZUVJc1RVRkJhRUlzUTBGQlpqdEJRVU5FT3pzN1UwRlpSQ3hsUVVGdlFqdEJRVU5zUWl4aFFVRlBMRXRCUVVzNVdpeFRRVUZNTEVOQlFXVTRXaXhOUVVGbUxFbEJRWGxDTEV0QlFVczVXaXhUUVVGTUxFTkJRV1U0V2l4TlFVRm1MRU5CUVhOQ2RqSkNMRTlCUVhSRU8wRkJRMFE3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNjVUpCUVZrN1FVRkRWaXhoUVVGUExFdEJRVXQxTWtJc1RVRkJXanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3h0UWtGQlZVRXNUVUZCVml4RlFVRjVRenRCUVVGQkxGVkJRWFpDT1hsQ0xFOUJRWFZDTEhWRlFVRmlMRU5CUVdFN1FVRkJRU3hWUVVGV2QxQXNVVUZCVlRzN1FVRkRka01zVlVGQlNTeExRVUZMYTNGQ0xHRkJRVlFzUlVGQmQwSTdRVUZEZEVJc1lVRkJTekZuUWl4VFFVRk1MRU5CUVdVNFdpeE5RVUZtTEVOQlFYTkNOVEpDTEUxQlFYUkNPMEZCUTBRN08wRkJSVVEwTWtJc1RVRkJRVUVzVFVGQlRTeEhRVUZIT1hoQ0xHOUNRVUZCTEVOQlFXZENPSGhDTEUxQlFXaENMRU5CUVZRN1FVRkRRU3hYUVVGTE9Wb3NVMEZCVEN4RFFVRmxPRm9zVFVGQlppeEhRVUYzUWpGaExESkRRVUZCTEVOQlEzUkNMRWxCUkhOQ0xFVkJSWFJDTEZGQlJuTkNMRVZCUjNSQ01HRXNUVUZJYzBJc1JVRkpkRUk3UVVGQlF6bDVRaXhSUVVGQlFTeFBRVUZQTEVWQlFWQkJMRTlCUVVRN1FVRkJWWGRRTEZGQlFVRkJMRkZCUVZFc1JVRkJVa0U3UVVGQlZpeFBRVXB6UWl4RFFVRjRRanRCUVU5QkxHRkJRVThzUzBGQlMzZEtMRk5CUVV3c1EwRkJaVGhhTEUxQlFYUkNPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08xZEJRMFVzZFVKQlFXTTdRVUZEV2l4WFFVRkxOa0lzWVVGQlRDeEhRVUZ4UWl4SlFVRnlRanRCUVVWQkxHRkJRVThzUzBGQlN5dEZMR0ZCUVZvN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VjBGRFJTeDNRa0ZCWlR0QlFVTmlMRmRCUVVzdlJTeGhRVUZNTEVkQlFYRkNMRXRCUVhKQ08wRkJSVUVzWVVGQlR5eExRVUZMSzBVc1lVRkJXanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dFhRVU5GTEdkQ1FVRlBhalZDTEZOQlFWQXNSVUZCYTBJN1FVRkRhRUlzVlVGQlNTeERRVUZETEV0QlFVdHJNRUlzWVVGQlZpeEZRVUY1UWp0QlFVTjJRaXhoUVVGTE0ySXNVMEZCVEN4RFFVRmxPRm9zVFVGQlppeERRVUZ6UW5KdVFpeFBRVUYwUWl4RFFVRTRRbWhNTEZOQlFUbENPMEZCUTBRN08wRkJSVVFzVlVGQlNTeExRVUZMT0hwQ0xHTkJRVXdzU1VGQmRVSXNTMEZCUzBFc1kwRkJUQ3hEUVVGdlFtOUdMRTlCUVM5RExFVkJRWGRFTzBGQlEzUkVMR0ZCUVV0d1JpeGpRVUZNTEVOQlFXOUNla0lzVFVGQmNFSXNSMEZCTmtJc1MwRkJTekpITEU5QlFXeERPenRCUVVOQkxHRkJRVXRzUml4alFVRk1MRU5CUVc5Q05YQkNMRTFCUVhCQ0xFTkJRVEpDTEV0QlFVdFFMRXRCUVV3c1EwRkJWM0pNTEVkQlFYUkRPenRCUVVOQkxITktRVUZoTUVJc1UwRkJZanRCUVVORU8wRkJRMFk3UVVGRlJEdEJRVU5HTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc01rSkJRV3RDTkhoQ0xFMUJRV3hDTEVWQlFUQkNPMEZCUTNoQ1FTeE5RVUZCUVN4TlFVRk5MRU5CUVVNelpTeG5Ra0ZCVUN4SFFVRXdRaXhMUVVGTEsyUXNhVUpCUVM5Q08wRkJRMEVzVjBGQlN6aERMR05CUVV3c1IwRkJjMEpzUXl4TlFVRjBRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRYUVVORkxITkNRVUZoZEVVc1NVRkJZaXhGUVVGdFFtcEdMRTFCUVc1Q0xFVkJRV2RFTzBGQlFVRTdPMEZCUVVFc1ZVRkJja0oyVHl4VlFVRnhRaXgxUlVGQlVpeE5RVUZST3p0QlFVTTVRenRCUVVOQkxGVkJRVWwzVkN4SlFVRkpMRXRCUVV0eWQwSXNVMEZCVkN4SlFVRnpRalpqTEZWQlFWVXNTMEZCU3l4UlFVRnlReXhKUVVGcFJDeExRVUZMWjJFc1kwRkJNVVFzUlVGQk1FVTdRVUZEZUVWNFJ5eFJRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTM2RITEdOQlFVd3NRMEZCYjBKNFJ5eEpRVUV6UWp0QlFVTkVPenRCUVVWRUxGVkJRVTAyVEN4alFVRmpMRWRCUVVjc1MwRkJTM0JHTEdWQlFVd3NTVUZCZDBJN1FVRkROME53YWtJc1VVRkJRVUVzU1VGQlNTeEZRVUZGTEVsQlFVa3hWaXhoUVVGS0xFTkJRMHBuUXl4VFFVUkpMRVZCUlVvc1dVRkJUVHRCUVVOS2F6aENMRlZCUVVGQkxHTkJRV01zUTBGQlEzWklMRTFCUVdZc1EwRkJjMEp1TWtJc1RVRkJkRUk3UVVGRFJDeFRRVXBITEVWQlMwb3NXVUZCVFR0QlFVTktNRGxDTEZWQlFVRkJMR05CUVdNc1EwRkJRM1pJTEUxQlFXWXNRMEZCYzBKdU1rSXNUVUZCZEVJN1FVRkRSQ3hUUVZCSExFVkJVVW9zV1VGQlRUdEJRVU5LTURsQ0xGVkJRVUZCTEdOQlFXTXNRMEZCUTNaSUxFMUJRV1lzUTBGQmMwSnVNa0lzVFVGQmRFSTdRVUZEUkN4VFFWWkhMRU5CUkhWRE8wRkJZVGREYlRKQ0xGRkJRVUZCTEUxQlFVMHNSVUZCUlN4SlFVRkpNekpDTEdGQlFVbzdRVUZpY1VNc1QwRkJMME03UVVGbFFTeFhRVUZMT0RSQ0xHVkJRVXdzUjBGQmRVSnZSaXhqUVVGMlFqczdRVUZGUVN4WFFVRkxReXhWUVVGTUxFTkJRV2RDT1V3c1NVRkJhRUlzUlVGQmMwSnFSaXhOUVVGMFFpeEZRVU5IZG5GQ0xFbEJSRWdzUTBGRFVTeFZRVUZCT0hwQ0xFMUJRVTBzUlVGQlNUdEJRVU5rTzBGQlEwRXNXVUZCU1N4RFFVRkRkVWdzWTBGQll5eERRVUZEZUc5Q0xFbEJRV1lzUTBGQmIwSTNWU3hQUVVGNlFpeEZRVUZyUXp0QlFVTm9RenRCUVVORUxGTkJSa1FzVFVGRlR5eEpRVUZKTEUxQlFVa3NRMEZCUTJrMFFpeGxRVUZNTEV0QlFYbENiMFlzWTBGQk4wSXNSVUZCTmtNN1FVRkRiRVE3UVVGRFFVRXNWVUZCUVVFc1kwRkJZeXhEUVVGRGVHOUNMRWxCUVdZc1EwRkJiMEpzVml4TlFVRndRanRCUVVOQk8wRkJRMFFzVTBGU1lTeERRVlZrT3pzN1FVRkRRU3haUVVGTkswUXNVVUZCVVN4SFFVRkhMRk5CUVZoQkxGRkJRVmNzUjBGQlRUdEJRVU55UWl4blFrRkJTU3hEUVVGRGN6QkNMR05CUVV3c1IwRkJjMElzU1VGQmRFSTdRVUZEUVN4blFrRkJTU3hEUVVGRFF5eGxRVUZNTEVkQlFYVkNMRWxCUVhaQ08wRkJRMFFzVTBGSVJDeERRVmhqTEVOQlowSmtPenM3UVVGRFFTeFpRVUZKTEUxQlFVa3NRMEZCUTBRc1kwRkJUQ3hKUVVGMVFpeE5RVUZKTEVOQlFVTkJMR05CUVV3c1EwRkJiMEp2Uml4UFFVRXZReXhGUVVGM1JEdEJRVU4wUkN4alFVRkpjR1lzVlVGQlZTeExRVUZMTEUxQlFXNUNMRVZCUVRKQ08wRkJRM3BDTEd0Q1FVRkpMRU5CUVVObllTeGpRVUZNTEVOQlFXOUNjalJDTEUxQlFYQkNPMEZCUTBRc1YwRkdSQ3hOUVVWUExFbEJRMHh4WlN4VlFVRlZMRXRCUVVzc1VVRkJaaXhKUVVOQkxFMUJRVWtzUTBGQlEyZGhMR05CUVV3c1EwRkJiMEkxUWl4TFFVRndRaXhMUVVFNFFrNHNUVUZCVFN4RFFVRkRUU3hMUVVab1F5eEZRVWRNTzBGQlEwRXNhMEpCUVVrc1EwRkJRelJDTEdOQlFVd3NRMEZCYjBKeU5FSXNUVUZCY0VJN1FVRkRSRHRCUVVOR096dEJRVVZFTEdOQlFVa3NRMEZCUXpRNVFpeHBRa0ZCVEN4RFFVRjFRbnBJTEUxQlFYWkNMRVZCTlVKakxFTkJPRUprT3pzN1FVRkRRWFZJTEZGQlFVRkJMR05CUVdNc1EwRkJRM1pJTEUxQlFXWXNSMEZCZDBKQkxFMUJRVTBzUTBGQlF6bFlMRlZCUVVRc1EwRkJUaXhEUVVOMFFpeE5RVUZKTEVOQlFVTnVVU3hMUVVGTUxFTkJRVmR5VEN4SFFVUlhMRVZCUlhSQ2EwSXNVVUZHYzBJc1JVRkhkRUpCTEZGQlNITkNMRVZCU1hSQ1FTeFJRVXB6UWl4RFFVRjRRanRCUVUxQk1qVkNMRkZCUVVGQkxHTkJRV01zUTBGQlEzWklMRTFCUVdZc1EwRkRSemw2UWl4SlFVUklMRU5CUTFFc1dVRkJUVHRCUVVOV0xHTkJRVWx4TjBJc1kwRkJZeXhEUVVGRGRrZ3NUVUZCWml4RFFVRnpRbW95UWl4UlFVRXhRaXhGUVVGdlF6dEJRVU5zUTNjNVFpeFpRVUZCUVN4alFVRmpMRU5CUVVONGIwSXNTVUZCWml4RFFVRnZRalZWTEU5QlFYQkNPMEZCUTBRc1YwRkdSQ3hOUVVWUE8wRkJRMHh2T1VJc1dVRkJRVUVzWTBGQll5eERRVUZEZUc5Q0xFbEJRV1lzUTBGQmIwSnNWaXhOUVVGd1FqdEJRVU5FTzBGQlEwWXNVMEZRU0N4WFFWRlRMRlZCUVVFMFFpeExRVUZMTEVWQlFVazdRVUZEWkRnM1FpeFZRVUZCUVN4alFVRmpMRU5CUVVONGIwSXNTVUZCWml4RFFVRnZRak5WTEUxQlFYQkNMRU5CUVRKQ2NVSXNTMEZCTTBJN1FVRkRSQ3hUUVZaSU8wRkJWMFFzVDBGcVJFZ3NWMEZyUkZNc1ZVRkJRVllzUTBGQlF5eEZRVUZKTzBGQlExWkJMRkZCUVVGQkxFTkJRVU1zYjBKQlFXRnRaQ3hWUVVGaUxIRkNRVUZyUTNkVUxFbEJRV3hETEhOQ1FVRnJSQ3hOUVVGSkxFTkJRVU0xYWtJc1NVRkJUQ3hEUVVGVmNrTXNSVUZCTlVRc1pVRkJiVVV4U3l4RFFVRnVSU3hEUVVGRU8wRkJRMEYzT0VJc1VVRkJRVUVzWTBGQll5eERRVUZEZUc5Q0xFbEJRV1lzUTBGQmIwSXpWU3hOUVVGd1FpeERRVUV5UWxjc1EwRkJNMEk3UVVGRFJDeFBRWEpFU0RzN1FVRjFSRUVzWVVGQlQzYzRRaXhqUVVGakxFTkJRVU40YjBJc1NVRkJkRUk3UVVGRFJEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3hqUVVGTE1tTXNTVUZCVEN4RlFVRlhha1lzVFVGQldDeEZRVUZ0UWp0QlFVTnFRaXhoUVVGUExFdEJRVXRwVWl4WlFVRk1MRU5CUVd0Q2FFMHNTVUZCYkVJc1JVRkJkMEpxUml4TlFVRjRRaXhGUVVGblF5eE5RVUZvUXl4RFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3T3pzN1YwRkRSU3hwUWtGQlVUdEJRVU5PTEZWQlFVa3NTMEZCUzNsTUxHTkJRVXdzU1VGQmRVSXNTMEZCUzBFc1kwRkJUQ3hEUVVGdlFtOUdMRTlCUVM5RExFVkJRWGRFTzBGQlEzUkVMR0ZCUVV0d1JpeGpRVUZNTEVOQlFXOUNiR3BDTEV0QlFYQkNMRU5CUVRCQ0xFdEJRVXRxU0N4TFFVRk1MRU5CUVZkeVRDeEhRVUZ5UXp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTWNVSXNVVUZCUVVFc1QwRkJUeXhEUVVGRFF5eEpRVUZTTEhWRFFVTnBReXhMUVVGTE9Fb3NTVUZCVEN4RFFVRlZja01zUlVGRU0wTTdRVUZIUkR0QlFVTkdPMEZCUlVRN1FVRkRSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdWMEZEUlN4blFrRkJUMmx0UWl4SlFVRlFMRVZCUVdGcVJpeE5RVUZpTEVWQlFYRkNPMEZCUTI1Q0xHRkJRVThzUzBGQlMybFNMRmxCUVV3c1EwRkJhMEpvVFN4SlFVRnNRaXhGUVVGM1FtcEdMRTFCUVhoQ0xFVkJRV2RETEZGQlFXaERMRU5CUVZBN1FVRkRSRHRCUVVWRU8wRkJRMFk3UVVGRFFUczdPenRYUVVORkxHZENRVUZQTzBGQlEwd3NWVUZCU1N4TFFVRkxlVXdzWTBGQlRDeEpRVUYxUWl4TFFVRkxRU3hqUVVGTUxFTkJRVzlDYjBZc1QwRkJMME1zUlVGQmQwUTdRVUZEZEVRc1lVRkJTM0JHTEdOQlFVd3NRMEZCYjBKb2FrSXNTVUZCY0VJN08wRkJRMEVzWVVGQlMyZHFRaXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNPMEZCUTBRc1QwRklSQ3hOUVVkUE8wRkJRMHh1TUVJc1VVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNMSE5EUVVOblF5eExRVUZMT0Vvc1NVRkJUQ3hEUVVGVmNrTXNSVUZFTVVNN1FVRkhSRHRCUVVOR096czdWMEZGUkN4dFFrRkJWVHRCUVVOU0xGVkJRVWtzUzBGQlMzbHpRaXhqUVVGTUxFbEJRWFZDTEV0QlFVdEJMR05CUVV3c1EwRkJiMEp2Uml4UFFVRXZReXhGUVVGM1JEdEJRVU4wUkN4aFFVRkxjRVlzWTBGQlRDeERRVUZ2UW1ocVFpeEpRVUZ3UWp0QlFVTkVPenRCUVVWRUxHRkJRVThzUzBGQlN5dHBRaXhaUVVGYU96dEJRVVZCTzBGQlEwUTdPenRYUVhBM1FrUXNNa0pCUVhsQ05rUXNTMEZCZWtJc1JVRkJaME5JTEZOQlFXaERMRVZCUVRKRFowTXNUMEZCTTBNc1JVRkJiMFE3UVVGQlFUczdRVUZEYkVRN1FVRkRRU3hWUVVORk4wSXNTMEZCU3l4TFFVRkxlalpDTEZOQlFWWXNTVUZEUVhNMlFpeFRRVUZUTEV0QlFVdDBOa0lzVTBGRVpDeEpRVVZCY3poQ0xFOUJRVThzUzBGQlMzUTRRaXhUUVVoa0xFVkJTVVU3UVVGRFFTeGpRVUZOTEVsQlFVa3pRaXhMUVVGS0xFTkJRMG9zZDBWQlJFa3NRMEZCVGp0QlFVZEVMRTlCVm1sRUxFTkJXV3hFT3pzN1FVRkRRU3hWUVVGSmJ6aENMRXRCUVVzc1EwRkJRM0pRTEUxQlFWWXNSVUZCYTBJN1FVRkRhRUp4VUN4UlFVRkJRU3hMUVVGTExFTkJRVU55VUN4TlFVRk9MRU5CUVdGdFVpeGxRVUZpTEVkQlFTdENMRXRCUVV0RExHOUNRVUZNTEVOQlF6ZENMMElzUzBGQlN5eERRVUZEY2xBc1RVRkJUaXhEUVVGaGJWSXNaVUZFWjBJc1EwRkJMMEk3UVVGSFJEczdRVUZEUkN4VlFVRkpha01zVTBGQlV5eERRVUZEYlVNc1QwRkJWaXhKUVVGeFFtNURMRk5CUVZNc1EwRkJRMjFETEU5QlFWWXNRMEZCYTBKeVVpeE5RVUV6UXl4RlFVRnRSRHRCUVVOcVJHdFFMRkZCUVVGQkxGTkJRVk1zUTBGQlEyMURMRTlCUVZZc1EwRkJhMEp5VWl4TlFVRnNRaXhEUVVGNVFtMVNMR1ZCUVhwQ0xFZEJRVEpETEV0QlFVdERMRzlDUVVGTUxFTkJRM3BEYkVNc1UwRkJVeXhEUVVGRGJVTXNUMEZCVml4RFFVRnJRbkpTTEUxQlFXeENMRU5CUVhsQ2JWSXNaVUZFWjBJc1EwRkJNME03UVVGSFJEczdRVUZGUkN4WFFVRkxSeXhSUVVGTUxFZEJRV2RDTEV0QlFXaENMRU5CZUVKclJDeERRVEJDYkVRN08wRkJRMEVzVjBGQlMyNTJRaXhSUVVGTUxFTkJRV05yZEVJc1MwRkJaQ3hIUVVGelFrRXNTMEZCZEVJN1FVRkRRU3hYUVVGTGJIUkNMRkZCUVV3c1EwRkJZeXR6UWl4VFFVRmtMRWRCUVRCQ1FTeFRRVUV4UWp0QlFVTkJia1VzVFVGQlFVRXNWVUZCVlN4SFFVRkhiVWNzVDBGQllpeERRVGRDYTBRc1EwRXJRbXhFT3p0QlFVTkJMRlZCUVUxTExHVkJRV1VzUjBGQlJ5eExRVUZMZUVVc1dVRkJOMEk3UVVGRFFYZEZMRTFCUVVGQkxHVkJRV1VzUTBGQlEzZzRRaXhOUVVGb1FpeEhRVUY1UWl4RFFVRjZRanRCUVVWQkxGVkJRVTE1T0VJc2EwSkJRV3RDTEVkQlFVY3NTMEZCUzNKRkxHVkJRV2hETzBGQlEwRTNjMElzVFVGQlFVRXNUVUZCVFN4RFFVRkRReXhKUVVGUUxFTkJRVmxwZUVJc2EwSkJRVm9zUlVGQlowTXhPRUlzVDBGQmFFTXNRMEZCZDBNc1ZVRkJRWE5DTEVsQlFVa3NSVUZCU1R0QlFVTTVReXhsUVVGUGJ6ZENMR3RDUVVGclFpeERRVUZEY0RkQ0xFbEJRVVFzUTBGQmVrSTdRVUZEUkN4UFFVWkVPMEZCU1VFc1ZVRkJUWEUzUWl4elFrRkJjMElzUjBGQlJ5eExRVUZMYkVVc2IwSkJRWEJETzBGQlEwRnFkRUlzVFVGQlFVRXNUVUZCVFN4RFFVRkRReXhKUVVGUUxFTkJRVmxyZUVJc2MwSkJRVm9zUlVGQmIwTXpPRUlzVDBGQmNFTXNRMEZCTkVNc1ZVRkJRWE5DTEVsQlFVa3NSVUZCU1R0QlFVTnNSQ3hsUVVGUGNUZENMSE5DUVVGelFpeERRVUZEY2pkQ0xFbEJRVVFzUTBGQk4wSTdRVUZEUkN4UFFVWkVMRVZCZWtOclJDeERRVFpEYkVRN08wRkJRMEVzVlVGQlRYTTNRaXhaUVVGWkxFZEJRVWNzUzBGQlN5OUZMSGRDUVVFeFFqdEJRVVZCTEdGQlFVOHNTMEZCUzNoeFFpeFJRVUZNTEVOQlFXTnJkRUlzUzBGQlpDeERRVU5LYzBNc1kwRkVTU3hIUVVWS2NtaENMRTlCUmtrc1IwRkhTamRoTEVsQlNFa3NRMEZIUXl4VlFVRkJiVGhDTEZGQlFWRXNSVUZCU1R0QlFVTm9RaXhaUVVGTlF5eFJRVUZSTEVkQlFVY3NSVUZCYWtJN1FVRkZRVVFzVVVGQlFVRXNVVUZCVVN4RFFVRkRSU3hOUVVGVUxFTkJRV2RDYURsQ0xFOUJRV2hDTEVOQlFYZENMRlZCUVVGdE1rSXNTMEZCU3l4RlFVRkpPMEZCUXk5Q0xHTkJRMFZCTEV0QlFVc3NRMEZCUTJkRExHZENRVUZPTEVOQlFYVkNNekpDTEZGQlFYWkNMRU5CUVdkRExGVkJRV2hETEV0QlEwRTBOa0lzVDBGQlR5eEpRVUZKVVN4WlFVWmlMRVZCUjBVN1FVRkRRVWdzV1VGQlFVRXNaVUZCWlN4RFFVRkRPVEpDTEVsQlFXaENMRU5CUVhGQ2QzZENMRXRCUVhKQ08wRkJRMFE3TzBGQlJVUnpSeXhWUVVGQlFTeGxRVUZsTEVOQlFVTjZPRUlzVDBGQmFFSXNRMEZCZDBJc1ZVRkJRVzB5UWl4TFFVRkxMRVZCUVVrN1FVRkRMMEoxUnl4WlFVRkJRU3hyUWtGQmEwSXNRMEZCUTNaSExFdEJRVXNzUTBGQlEybENMRmxCUVZBc1EwRkJiRUlzUjBGQmVVTnFRaXhMUVVGTExFTkJRVU52UXl4WlFVRXZRenRCUVVOQmQwVXNXVUZCUVVFc1VVRkJVU3hEUVVGRE5VY3NTMEZCU3l4RFFVRkRiME1zV1VGQlVDeERRVUZTTEVkQlFTdENjRU1zUzBGQlN5eERRVUZEYVVJc1dVRkJja003UVVGRFJDeFhRVWhFTzBGQlNVUXNVMEZhUkR0QlFXTkJOWEpDTEZGQlFVRkJMRTFCUVUwc1EwRkJRMjFDTEU5QlFWQXNRMEZCWlN0MlFpeHJRa0ZCWml4RlFVRnRRekU0UWl4UFFVRnVReXhEUVVFeVF5eHBRa0ZCYTBJN1FVRkJRVHRCUVVGQkxHTkJRV2hDYzBJc1NVRkJaMEk3UVVGQlFTeGpRVUZXTWpkQ0xFbEJRVlU3TzBGQlF6TkVUaXhWUVVGQlFTeHpRa0ZCYzBJc1EwRkJRMDBzU1VGQlJDeERRVUYwUWl4SFFVRXJRak0zUWl4SlFVRXZRanRCUVVORUxGTkJSa1FzUlVGcVFtZENMRU5CY1VKb1FqczdRVUZEUVN4alFVRkpMRU5CUVVOck4wSXNVVUZCVEN4SFFVRm5RaXhKUVVGb1FqczdRVUZEUVN4alFVRkpMRU5CUVVOMGQwSXNTVUZCVEN4RFFVRlZMRTFCUVVrc1EwRkJRMGNzVFVGQlRDeERRVUZaTm5kQ0xFdEJRWFJDTzBGQlEwUXNUMEV6UWtrc1EwRkJVRHRCUVRSQ1JEdEJRVVZFTzBGQlEwWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1UwRkRSU3hsUVVGeFFqdEJRVU51UWl4aFFVRlBMRXRCUVV0V0xGRkJRVm83UVVGRFJEczdPMWRCZVVSRUxEaENRVUUwUWxjc1owSkJRVFZDTEVWQlFUaERPMEZCUXpWRExGVkJRVTFETEhOQ1FVRnpRaXhIUVVGSExEaENRVUV2UWpzN1FVRkZRU3hWUVVGSlJDeG5Ra0ZCWjBJc1NVRkJTU3hKUVVGNFFpeEZRVUU0UWp0QlFVTTFRaXhsUVVGUFF5eHpRa0ZCVUR0QlFVTkVPenRCUVVWRUxGVkJRVWxFTEdkQ1FVRm5RaXhEUVVGRGFqTkNMRTlCUVdwQ0xFTkJRWGxDYXpOQ0xITkNRVUY2UWl4TlFVRnhSQ3hEUVVGRExFTkJRVEZFTEVWQlFUWkVPMEZCUXpORUxHVkJRVTlFTEdkQ1FVRlFPMEZCUTBRN08wRkJSVVFzWVVGQlQwRXNaMEpCUVdkQ0xFTkJRVU5GTEUxQlFXcENMRU5CUVhkQ0xFZEJRWGhDTEVWQlFUWkNSQ3h6UWtGQk4wSXNRMEZCVUR0QlFVTkVPenM3TzBWQmFGQjFRemwzUWpzN1FVRXdaME14UTJRc1RVRkJUU3hEUVVGRFZ5eG5Ra0ZCVUN4RFFVRjNRaXR3UWl3eVFrRkJlRUlzUlVGQmNVUTdRVUZEYmtRd1FpeEZRVUZCUVN4WFFVRlhMRVZCUVVVN1FVRkRXSEpuUWl4SlFVRkJRU3hIUVVGSExFVkJRVVU3UVVGQlFTeGhRVUZOTUdVc1ZVRkJUanRCUVVGQk8wRkJSRTBzUjBGRWMwTTdRVUZKYmtRMFFpeEZRVUZCUVN4M1FrRkJkMElzUlVGQlJUdEJRVU40UWk4MFFpeEpRVUZCUVN4TFFVRkxMRVZCUVVVc1QwRkVhVUk3UVVGRmVFSnpUaXhKUVVGQlFTeFJRVUZSTEVWQlFVVTdRVUZHWXl4SFFVcDVRanRCUVZGdVJEWnhRaXhGUVVGQlFTeGpRVUZqTEVWQlFVVTdRVUZEWkc0MFFpeEpRVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRUSGMwUWl4TlFVRkJRU3hOUVVGTkxFVkJRVVVzVlVGRVNEdEJRVVZNWjBjc1RVRkJRVUVzV1VGQldTeEZRVUZGTEVWQlJsUTdRVUZIVERsR0xFMUJRVUZCTEZsQlFWa3NSVUZCUlN4TFFVaFVPMEZCU1V4RkxFMUJRVUZCTEZWQlFWVXNSVUZCUlN4UFFVcFFPMEZCUzB4cFF5eE5RVUZCUVN4SlFVRkpMRVZCUVVVc1JVRk1SRHRCUVUxTVF5eE5RVUZCUVN4UlFVRlJMRVZCUVVVc1RVRk9URHRCUVU5TU1VTXNUVUZCUVVFc1QwRkJUeXhGUVVGRkxFdEJVRW83UVVGUlRIRkNMRTFCUVVGQkxGbEJRVmtzUlVGQlJTeFBRVkpVTzBGQlUweHVRaXhOUVVGQlFTeFpRVUZaTEVWQlFVVTdRVUZVVkN4TFFVUlBPMEZCV1dSb2NrSXNTVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJXa2tzUjBGU2JVTTdRVUZ6UW01RU5uSkNMRVZCUVVGQkxGbEJRVmtzUlVGQlJUdEJRVU5hYmpWQ0xFbEJRVUZCTEV0QlFVc3NSVUZCUlN4RlFVUkxPMEZCUlZwelRpeEpRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRkdSU3hIUVhSQ2NVTTdRVUV3UW01RWFYTkNMRVZCUVVGQkxHVkJRV1VzUlVGQlJUdEJRVU5tZGpWQ0xFbEJRVUZCTEV0QlFVc3NSVUZCUlN4RlFVUlJPMEZCUldaelRpeEpRVUZCUVN4UlFVRlJMRVZCUVVVN1FVRkdTeXhIUVRGQ2EwTTdRVUU0UW01RWNYTkNMRVZCUVVGQkxHOUNRVUZ2UWl4RlFVRkZPMEZCUTNCQ016VkNMRWxCUVVGQkxFdEJRVXNzUlVGQlJTeEZRVVJoTzBGQlJYQkNjMDRzU1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUmxVc1IwRTVRalpDTzBGQmEwTnVSRzkzUWl4RlFVRkJRU3hSUVVGUkxFVkJRVVU3UVVGRFVqRTVRaXhKUVVGQlFTeExRVUZMTEVWQlFVVXNTMEZFUXp0QlFVVlNjMDRzU1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUmtZc1IwRnNRM2xETzBGQmMwTnVSRU1zUlVGQlFVRXNUVUZCVFN4RlFVRkZPMEZCUTA1MlRpeEpRVUZCUVN4TFFVRkxMRVZCUVVVc2MwWkJRMFl3VFN4TlFVRk5MRU5CUVVOdFJDeGpRVUZRTEVOQlFYTkNkVzVDTERKQ1FVRjBRaXhGUVVGdFJEZHdRaXhOUVVSdVJEdEJRVVZJTm5kQ0xFMUJRVUZCTEV0QlFVc3NSVUZCUlN4alFVWktPMEZCUjBneGNFSXNUVUZCUVVFc1NVRkJTU3hGUVVGRkxHRkJTRWc3UVVGSlNFTXNUVUZCUVVFc1MwRkJTeXhGUVVGRkxHTkJTa283UVVGTFNFTXNUVUZCUVVFc1RVRkJUU3hGUVVGRkxHVkJURXc3UVVGTlNEWm5RaXhOUVVGQlFTeFRRVUZUTEVWQlFVVXNhMEpCVGxJN1FVRlBTRFZuUWl4TlFVRkJRU3hKUVVGSkxFVkJRVVVzWVVGUVNEdEJRVkZJUXl4TlFVRkJRU3hSUVVGUkxFVkJRVVVzYVVKQlVsQTdRVUZUU0VNc1RVRkJRVUVzU1VGQlNTeEZRVUZGTEdGQlZFZzdRVUZWU0VNc1RVRkJRVUVzVFVGQlRTeEZRVUZGTEdWQlZrdzdRVUZYU0VNc1RVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQldFZzdRVUZFUXl4SFFYUkRNa003UVVGeFJHNUVNVWNzUlVGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUTFKMlR5eEpRVUZCUVN4TFFVRkxMRVZCUVVVc2MwWkJRMFl3VFN4TlFVRk5MRU5CUVVOdFJDeGpRVUZRTEVOQlFYTkNkVzVDTERKQ1FVRjBRaXhGUVVGdFJEZHZRaXhSUVVSdVJEdEJRVVZJYTNSQ0xFMUJRVUZCTEV0QlFVc3NSVUZCUlhvMlFpeFRRVVpLTzBGQlIwaHpOa0lzVFVGQlFVRXNVMEZCVXl4RlFVRkZkRFpDTzBGQlNGSTdRVUZFUnp0QlFYSkVlVU1zUTBGQmNrUTdRVUU0UkVFc01FVkJRV1Z2TWtJc01rSkJRV1lzUlRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzcHpRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEpRVU5OTTJsQ096czdPenRCUVVOS0xHbERRVUZ4UWp0QlFVRkJPenRCUVVGQk96dEJRVUZCTEhORFFVRk9ibFVzU1VGQlRUdEJRVUZPUVN4TlFVRkJRU3hKUVVGTk8wRkJRVUU3TzBGQlEyNUNMRzlFUVVGVFFTeEpRVUZVTzBGQlJVRXNWVUZCUzIwclFpeFJRVUZNTEVkQlFXZENMRXRCUVdoQ096dEJRVU5CTEZWQlFVdERMR2RDUVVGTU96dEJRVU5CTEZWQlFVdERMRzlDUVVGTU96dEJRVXh0UWp0QlFVMXdRanRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TzFkQlEwVXNORUpCUVcxQ08wRkJRMnBDTEZkQlFVdERMR0ZCUVV3c1IwRkJjVUlzU1VGQlNVTXNXVUZCU2l4RlFVRnlRanRCUVVORU8wRkJSVVE3UVVGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzFkQlEwVXNaME5CUVhWQ08wRkJRVUU3TzBGQlEzSkNMRlZCUVVrc1MwRkJTMFFzWVVGQlZDeEZRVUYzUWp0QlFVTjBRaXhoUVVGTFFTeGhRVUZNTEVOQlFXMUNSU3hoUVVGdVFpeEhRVUZ0UXl4WlFVRk5PMEZCUTNaRExHTkJRVWtzVFVGQlNTeERRVUZEUml4aFFVRk1MRU5CUVcxQ01XaENMRXRCUVc1Q0xFdEJRVFpDTEZOQlFXcERMRVZCUVRSRE8wRkJRekZETEd0Q1FVRkpMRU5CUVVOMWFFSXNVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MR3RDUVVGSkxFTkJRVU5CTEZGQlFVd3NSMEZCWjBJc1MwRkJhRUk3UVVGRFFTODJRaXhaUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJc1EwRkRSU3gzVEVGRVJqdEJRVWRFTzBGQlEwWXNVMEZVUkRzN1FVRlhRU3hoUVVGTGFUZENMR0ZCUVV3c1EwRkJiVUpGTEdGQlFXNUNPMEZCUTBRN1FVRkRSanRCUVVWRU8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMWRCUTBVc01FSkJRV2xDZWtRc1RVRkJha0lzUlVGQmVVSTdRVUZCUVRzN1FVRkRka0lzWVVGQlR5eG5TVUZCZFVKQkxFMUJRWFpDTEVWQlFTdENlRFZDTEVsQlFTOUNMRU5CUVc5RExGVkJRVUZrTEUxQlFVMHNSVUZCU1R0QlFVTnVSQ3haUVVGUGVUWkNMRWRCUVZBc1IwRkJZM28yUWl4TlFVRmtMRU5CUVU5NU5rSXNSMEZCVUN4RFFVUnRSQ3hEUVVkdVJEczdRVUZEUVN4WlFVRk5ka1lzUzBGQlN5eEhRVUZITEVsQlFVazRTU3hMUVVGS0xFTkJRVlYyUkN4SFFVRldMRU5CUVdRN1FVRkRRWFpHTEZGQlFVRkJMRXRCUVVzc1EwRkJReXRKTEVsQlFVNHNSMEZCWVN4TlFVRkpMRU5CUVVOQkxFbEJRV3hDTzBGQlEwRXZTU3hSUVVGQlFTeExRVUZMTEVOQlFVTm5TaXhYUVVGT0xFZEJRVzlDTEZkQlFYQkNPMEZCUTBGb1NpeFJRVUZCUVN4TFFVRkxMRU5CUVVOcFNpeFBRVUZPTEVkQlFXZENMRTFCUVdoQ08wRkJRMEZ1SzBJc1VVRkJRVUVzVFVGQlRTeERRVUZEYXpGQ0xFdEJRVkFzUjBGQlpVRXNTMEZCWmp0QlFVVkJMR1ZCUVU4c1NVRkJTWEl3UWl4UFFVRktMRU5CUVZrc1ZVRkJRVGxDTEU5QlFVOHNSVUZCU1R0QlFVTTFRanRCUVVOQmJUSkNMRlZCUVVGQkxFdEJRVXNzUTBGQlEycHhRaXhuUWtGQlRpeERRVUYxUWl4blFrRkJka0lzUlVGQmVVTXNXVUZCVFR0QlFVTTNRMnhOTEZsQlFVRkJMRTlCUVU4c1EwRkJRMmxDTEUxQlFVUXNRMEZCVUR0QlFVTkVMRmRCUmtRc1JVRkdORUlzUTBGTk5VSTdPMEZCUTBGdkswSXNWVUZCUVVFc1VVRkJVU3hEUVVGRFF5eEpRVUZVTEVOQlFXTkRMRmRCUVdRc1EwRkJNRUp3U2l4TFFVRXhRanRCUVVOQlFTeFZRVUZCUVN4TFFVRkxMRU5CUVVOeFNpeEpRVUZPTzBGQlEwUXNVMEZVVFN4RFFVRlFPMEZCVlVRc1QwRndRazBzUTBGQlVEdEJRWEZDUkR0QlFVVkVPMEZCUTBZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0WFFVTkZMSFZDUVVGamFrOHNTVUZCWkN4RlFVRnZRbk5FTEZkQlFYQkNMRVZCUVdsRGIwSXNWMEZCYWtNc1JVRkJPRU03UVVGRE5VTXNZVUZCVHl4SlFVRkpSQ3hqUVVGS0xFTkJRVmNzU1VGQldDeEZRVUZwUW5wRkxFbEJRV3BDTEVWQlFYVkNjMFFzVjBGQmRrSXNSVUZCYjBOdlFpeFhRVUZ3UXl4RFFVRlFPMEZCUTBRN1FVRkZSRHRCUVVOR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3VTBGRFJTeGxRVUZqTzBGQlExb3NZVUZCVHl4TFFVRkxNRWtzVVVGQldqdEJRVU5FTzBGQlJVUTdRVUZEUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1YwRkRSU3gxUWtGQll6dEJRVUZCT3p0QlFVTmFMRlZCUVUwdmFFSXNUMEZCVHl4SFFVRkhMRWxCUVVreFpDeGhRVUZLTEVOQlFXRXNWVUZCUTJNc1QwRkJSQ3hGUVVGVlF5eE5RVUZXTEVWQlFYRkNPMEZCUTJoRUxHTkJRVWtzUTBGQlF6WXJRaXhoUVVGTUxFTkJRMGRvY1VJc1RVRkVTQ3hIUVVWSEwxTXNTVUZHU0N4RFFVVlJMRmxCUVUwN1FVRkRWaXhuUWtGQlNTeERRVUZETkRoQ0xGRkJRVXdzUjBGQlowSXNTVUZCYUVJN1FVRkRRVE1yUWl4VlFVRkJRU3hQUVVGUE8wRkJRMUlzVTBGTVNDeFhRVTFUTEZWQlFVRlpMRU5CUVVNc1JVRkJTVHRCUVVOV0xHZENRVUZKTEVOQlFVTXJPVUlzVVVGQlRDeEhRVUZuUWl4TFFVRm9RanRCUVVOQk1TdENMRlZCUVVGQkxFMUJRVTBzUTBGQlExY3NRMEZCUkN4RFFVRk9PMEZCUTBRc1UwRlVTRHRCUVZWRUxFOUJXR1VzUTBGQmFFSTdRVUZaUVN4aFFVRlBaMk1zVDBGQlVEdEJRVU5FT3pzN1YwRkZSQ3h6UWtGQllUSlZMRWxCUVdJc1JVRkJiVUpxUml4TlFVRnVRaXhGUVVGblJEdEJRVUZCT3p0QlFVRkJMRlZCUVhKQ2RrOHNWVUZCY1VJc2RVVkJRVklzVFVGQlVUdEJRVU01UXl4VlFVRk5jV1lzWTBGQll5eEhRVUZITzBGQlEzSkNlRzlDTEZGQlFVRkJMRWxCUVVrc1JVRkJSU3hKUVVGSk1WWXNZVUZCU2l4RFFVTktaME1zVTBGRVNTeEZRVVZLTEZsQlFVMDdRVUZCUldzNFFpeFZRVUZCUVN4alFVRmpMRU5CUVVOMlNDeE5RVUZtTEVOQlFYTkNiakpDTEUxQlFYUkNPMEZCUVdsRExGTkJSbkpETEVWQlIwb3NXVUZCVFR0QlFVRkZNRGxDTEZWQlFVRkJMR05CUVdNc1EwRkJRM1pJTEUxQlFXWXNRMEZCYzBKdU1rSXNUVUZCZEVJN1FVRkJhVU1zVTBGSWNrTXNSVUZKU2l4WlFVRk5PMEZCUVVVd09VSXNWVUZCUVVFc1kwRkJZeXhEUVVGRGRrZ3NUVUZCWml4RFFVRnpRbTR5UWl4TlFVRjBRanRCUVVGcFF5eFRRVXB5UXl4RFFVUmxPMEZCVDNKQ2JUSkNMRkZCUVVGQkxFMUJRVTBzUlVGQlJTeEpRVUZKTXpKQ0xHRkJRVW83UVVGUVlTeFBRVUYyUWp0QlFWTkJMRmRCUVVzNE5FSXNaVUZCVEN4SFFVRjFRbTlHTEdOQlFYWkNMRU5CVmpoRExFTkJXVGxET3p0QlFVTkJMRmRCUVV0eFF5eFhRVUZNTEVkQlFXMUNNVGxDTEVsQlFXNUNMRU5CUVhkQ0xGbEJRVTA3UVVGRE5VSTdRVUZEUVN4WlFVRkpMRU5CUVVOeE4wSXNZMEZCWXl4RFFVRkRlRzlDTEVsQlFXWXNRMEZCYjBJM1ZTeFBRVUY2UWl4RlFVRnJRenRCUVVOb1F6dEJRVU5FTEZOQlJrUXNRMEZIUVR0QlFVaEJMR0ZCU1Vzc1NVRkJTU3hOUVVGSkxFTkJRVU5wTkVJc1pVRkJUQ3hMUVVGNVFtOUdMR05CUVRkQ0xFVkJRVFpETzBGQlEyaEVRU3hWUVVGQlFTeGpRVUZqTEVOQlFVTjRiMElzU1VGQlppeERRVUZ2UW14V0xFMUJRWEJDTzBGQlEwRTdRVUZEUkN4VFFWUXlRaXhEUVZjMVFqczdPMEZCUTBFc1dVRkJTU3hOUVVGSkxFTkJRVU5wTDBJc1VVRkJWQ3hGUVVGdFFqdEJRVU5xUWl3d1NVRkJiVUp3VGl4SlFVRnVRaXhGUVVGNVFtcEdMRTFCUVhwQ0xFVkJRV2xEZGs4c1ZVRkJha003UVVGRFJDeFRRVVpFTEVOQlIwRTdRVUZJUVN4aFFVbExPMEZCUTBoeFppeFZRVUZCUVN4alFVRmpMRU5CUVVOdU9VSXNUVUZCWml4RFFVTkZMRWxCUVVsV0xFdEJRVW9zYTBKQlExbDNaU3hWUVVSYUxEWkNRVU41UXl4TlFVRkpMRU5CUVVOdVVTeExRVUZNTEVOQlFWZDBReXhGUVVSd1JDeHpTVUZFUmp0QlFVdEVPMEZCUTBZc1QwRjJRa1E3UVVGNVFrRXNZVUZCVHpoNFFpeGpRVUZqTEVOQlFVTjRiMElzU1VGQmRFSTdRVUZEUkRzN08xZEJSVVFzWTBGQlN6SmpMRWxCUVV3c1JVRkJWMnBHTEUxQlFWZ3NSVUZCYlVJN1FVRkRha0lzWVVGQlR5eExRVUZMYVZJc1dVRkJUQ3hEUVVGclFtaE5MRWxCUVd4Q0xFVkJRWGRDYWtZc1RVRkJlRUlzUlVGQlowTXNUVUZCYUVNc1EwRkJVRHRCUVVORU96czdWMEZGUkN4blFrRkJUMmxHTEVsQlFWQXNSVUZCWVdwR0xFMUJRV0lzUlVGQmNVSTdRVUZEYmtJc1lVRkJUeXhMUVVGTGFWSXNXVUZCVEN4RFFVRnJRbWhOTEVsQlFXeENMRVZCUVhkQ2FrWXNUVUZCZUVJc1JVRkJaME1zVVVGQmFFTXNRMEZCVUR0QlFVTkVPenM3VjBGRlJDeHpRa0ZCWVR0QlFVRkJPenRCUVVOWUxGVkJRVTE0WlN4SFFVRkhMRWRCUVVjc2VVaEJRVm83TzBGQlJVRnNRaXhOUVVGQlFTeE5RVUZOTEVOQlFVTlhMR2RDUVVGUUxFTkJRWGRDVHl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UWp0QlFVTk9PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMDAwZUVJc1VVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlExQXZiVUlzVlVGQlFVRXNSMEZCUnl4RlFVRkZPMEZCUVVFc2JVSkJRVTBzVFVGQlNTeERRVUZEWjIxQ0xGRkJRVmc3UVVGQlFUdEJRVVJGTzBGQlRtdENMRTlCUVRkQ08wRkJWMEVzWVVGQlR6ZDNRaXhIUVVGUU8wRkJRMFE3T3pzN1JVRTFUQ3RDZDNCQ096dEJRU3RNYkVNc2EwVkJRV1V6YVVJc2JVSkJRV1lzUlRzN1FVTjZUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNPRU5CUVdVN1FVRkRZanRCUVVOR08wRkJRMEU3UVVGRFJUSnBRaXhGUVVGQlFTd3lRa0ZCTWtJc1JVRkJNMEpCTEcxRFFVcGhPenRCUVV0aU8wRkJRMFk3UVVGRFFUdEJRVU5GTTJsQ0xFVkJRVUZCTEcxQ1FVRnRRaXhGUVVGdVFrRXNNa0pCVW1FN08wRkJVMkk3UVVGRFJqdEJRVU5CTzBGQlEwVXlZeXhGUVVGQlFTeHBRa0ZCYVVJc1JVRkJha0pCTEhsQ1FWcGhPenRCUVdGaU8wRkJRMFk3UVVGRFFUdEJRVU5GY1VRc1JVRkJRVUVzWTBGQll5eEZRVUZrUVN4elFrRm9RbUU3TzBGQmFVSmlPMEZCUTBZN1FVRkRRVHRCUVVORmNVSXNSVUZCUVVFc1RVRkJUU3hGUVVGT1FTeGpRVUZOUVR0QlFYQkNUeXhEUVVGbUxFVTdPMEZEV0VFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJMRWxCUVZFelJTeFhRVUZTTEVkQllYRkNjMDhzWlVGaWNrSTdRVUZCUVN4SlFVTkZkSFJDTEhGQ1FVUkdMRWRCWVhGQ2MzUkNMSGxDUVdKeVFqdEJRVUZCTEVsQlJVVm9XaXh0UWtGR1JpeEhRV0Z4UW1kYUxIVkNRV0p5UWp0QlFVRkJMRWxCUjBWNFlTeHRRa0ZJUml4SFFXRnhRbmRoTEhWQ1FXSnlRanRCUVVGQkxFbEJTVVU1WVN4dlFrRktSaXhIUVdGeFFqaGhMSGRDUVdKeVFqdEJRVUZCTEVsQlMwVXpZU3d3UWtGTVJpeEhRV0Z4UWpKaExEaENRV0p5UWp0QlFVRkJMRWxCVFVWb1lTeG5Ra0ZPUml4SFFXRnhRbWRoTEc5Q1FXSnlRanRCUVVGQkxFbEJUMFUxYVVJc2IwSkJVRVlzUjBGaGNVSTBhVUlzZDBKQlluSkNPMEZCUVVFc1NVRlJSWEJtTEcxQ1FWSkdMRWRCWVhGQ2IyWXNkVUpCWW5KQ08wRkJRVUVzU1VGVFJURm5RaXhsUVZSR0xFZEJZWEZDTUdkQ0xHMUNRV0p5UWp0QlFVRkJMRWxCVlVVeldpeDVRa0ZXUml4SFFXRnhRakphTERaQ1FXSnlRanRCUVVGQkxFbEJWMFZzWml4cFFrRllSaXhIUVdGeFFtdG1MSEZDUVdKeVFqdEJRVUZCTEVsQldVVjJaQ3hwUWtGYVJpeEhRV0Z4UW5Wa0xIRkNRV0p5UWp0QlFVRkJMRWxCWVVVdmFrSXNiVUpCWWtZc1IwRmhjVUlyYWtJc2RVSkJZbkpDTzBGQlpVRTdRVUZEUVN4SlFVTkZja2tzWjBOQlJFWXNSMEZOVFhOSkxHMURRVTVPTzBGQlFVRXNTVUZGUldweVFpeDNRa0ZHUml4SFFVMU5hWEpDTERKQ1FVNU9PMEZCUVVFc1NVRkhSWFJQTEhOQ1FVaEdMRWRCVFUxelR5eDVRa0ZPVGp0QlFVRkJMRWxCU1VWcVRDeHRRa0ZLUml4SFFVMU5hVXdzYzBKQlRrNDdRVUZCUVN4SlFVdEZOVW9zVjBGTVJpeEhRVTFOTkVvc1kwRk9UanRCUVZGQkxESkRRVUZsTzBGQlEySTdRVUZEUmp0QlFVTkJPMEZCUTBWNE1FSXNSVUZCUVVFc1IwRkJSeXhGUVVGSVFTeEhRVXBoT3p0QlFVdGlPMEZCUTBZN1FVRkRRVHRCUVVORmNFb3NSVUZCUVVFc1MwRkJTeXhGUVVGTVFTeFZRVkpoT3p0QlFWTmlPMEZCUTBZN1FVRkRRVHRCUVVORmQwTXNSVUZCUVVFc1UwRkJVeXhGUVVGVVFTeGpRVnBoT3p0QlFXRmlPMEZCUTBZN1FVRkRRVHRCUVVORmRFWXNSVUZCUVVFc1VVRkJVU3hGUVVGU1FTeGhRV2hDWVRzN1FVRnBRbUk3UVVGRFJqdEJRVU5CTzBGQlEwVnRUU3hGUVVGQlFTeFRRVUZUTEVWQlFWUkJMR05CY0VKaE96dEJRWEZDWWp0QlFVTkdPMEZCUTBFN1FVRkRSWEZFTEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzWlVGNFFtRTdPMEZCZVVKaU8wRkJRMFk3UVVGRFFUdEJRVU5GYjBnc1JVRkJRVUVzWTBGQll5eEZRVUZrUVN4dFFrRTFRbUU3TzBGQk5rSmlPMEZCUTBZN1FVRkRRVHRCUVVORmFVVXNSVUZCUVVFc1kwRkJZeXhGUVVGa1FTeHRRa0ZvUTJFN08wRkJhVU5pTzBGQlEwWTdRVUZEUVR0QlFVTkZPRkVzUlVGQlFVRXNjMEpCUVhOQ0xFVkJRWFJDUVN3eVFrRndRMkU3TzBGQmNVTmlPMEZCUTBZN1FVRkRRVHRCUVVORmVsWXNSVUZCUVVFc1owSkJRV2RDTEVWQlFXaENRU3huUWtGNFEyRTdPMEZCZVVOaU8wRkJRMFk3UVVGRFFUdEJRVU5GWjBVc1JVRkJRVUVzYlVKQlFXMUNMRVZCUVc1Q1FTeHRRa0UxUTJFN08wRkJOa05pTzBGQlEwWTdRVUZEUVR0QlFVTkZjVkVzUlVGQlFVRXNUMEZCVHl4RlFVRlFRU3hQUVdoRVlUczdRVUZwUkdJN1FVRkRSanRCUVVOQk8wRkJRMFZ3V0N4RlFVRkJRU3huUWtGQlowSXNSVUZCYUVKQkxIRkNRWEJFWVRzN1FVRnhSRm83UVVGRFNEdEJRVU5CTzBGQlEwVTRVeXhGUVVGQlFTeGpRVUZqTEVWQlFXUkJMRzFDUVhoRVlUczdRVUY1UkZvN1FVRkRTRHRCUVVOQk8wRkJRMFZSTEVWQlFVRkJMRmRCUVZjc1JVRkJXRUVzWjBKQk5VUmhPenRCUVRaRVdqdEJRVU5JTzBGQlEwRTdRVUZEUlRWSkxFVkJRVUZCTEdWQlFXVXNSVUZCWmtFc2IwSkJhRVZoT3p0QlFXbEZXanRCUVVOSU8wRkJRMEU3UVVGRFJYZEVMRVZCUVVGQkxHTkJRV01zUlVGQlpFRXNiVUpCY0VWaE96dEJRWEZGV2p0QlFVTklPMEZCUTBFN1FVRkRSWFJDTEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzWlVGNFJXRTdPMEZCZVVWYU8wRkJRMGc3UVVGRFFUdEJRVU5GSzBjc1JVRkJRVUVzYjBKQlFXOUNMRVZCUVhCQ1FTeDVRa0UxUldFN08wRkJOa1ZhTzBGQlEwZzdRVUZEUVR0QlFVTkZka1lzUlVGQlFVRXNXVUZCV1N4RlFVRmFRU3hwUWtGb1JtRTdPMEZCYVVaYU8wRkJRMGc3UVVGRFFUdEJRVU5GTWtJc1JVRkJRVUVzV1VGQldTeEZRVUZhUVN4cFFrRndSbUU3TzBGQmNVWmFPMEZCUTBnN1FVRkRRVHRCUVVORmVFY3NSVUZCUVVFc1kwRkJZeXhGUVVGa1FTeHRRa0Y0Um1FN1FVRXdSbUo1Vml4RlFVRkJRU3hOUVVGTkxFVkJRVTVCTEZkQk1VWmhPenRCUVRKR1dqdEJRVU5JTzBGQlEwRTdRVUZEUlhoTkxFVkJRVUZCTEdWQlFXVXNSVUZCWmtFc2IwSkJPVVpoT3p0QlFTdEdXanRCUVVOSU8wRkJRMEU3UVVGRFJVY3NSVUZCUVVFc2NVSkJRWEZDTEVWQlFYSkNRU3d3UWtGc1IyRTdPMEZCYlVkYU8wRkJRMGc3UVVGRFFUdEJRVU5GTWtJc1JVRkJRVUVzWTBGQll5eEZRVUZrUVN4dFFrRjBSMkU3UVVGM1IxbzdPMEZCUTBFN1FVRkRTRHRCUVVOQk8wRkJRMFV5VVN4RlFVRkJRU3d5UWtGQk1rSXNSVUZCTTBKQkxHZERRVFZIWVRzN1FVRTJSMkk3UVVGRFJqdEJRVU5CTzBGQlEwVXphVUlzUlVGQlFVRXNiVUpCUVcxQ0xFVkJRVzVDUVN4M1FrRm9TR0U3TzBGQmFVaGlPMEZCUTBZN1FVRkRRVHRCUVVORk1tTXNSVUZCUVVFc2FVSkJRV2xDTEVWQlFXcENRU3h6UWtGd1NHRTdPMEZCY1VoaU8wRkJRMFk3UVVGRFFUdEJRVU5GY1VRc1JVRkJRVUVzWTBGQll5eEZRVUZrUVN4dFFrRjRTR0U3TzBGQk1FaGlPMEZCUTBZN1FVRkRRVHRCUVVOSGNVSXNSVUZCUVVFc1RVRkJUU3hGUVVGT1FTeFhRVUZOUVR0QlFUZElUU3hEUVVGbUlpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2U0U5VFZGOURUMUpGTHk0dmMzSmpMMk52Y21VdlJHVm1aWEp5WldRdWFuTS9Oamc0WlNJc0luZGxZbkJoWTJzNkx5OUlUMU5VWDBOUFVrVXZMaTl6Y21NdlkyOXlaUzlWZEdsc2N5NXFjejlpWmpJMElpd2lkMlZpY0dGamF6b3ZMMGhQVTFSZlEwOVNSUzh1TDNOeVl5OWpiM0psTDAxaGRHaFZkR2xzY3k1cWN6ODRNV1UzSWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMGh2YzNSRmJuWnBjbTl1YldWdWRDNXFjejh4TlRGa0lpd2lkMlZpY0dGamF6b3ZMMGhQVTFSZlEwOVNSUzh1TDNOeVl5OWpiM0psTDAxbGMzTmxibWRsY2k1cWN6OWtNREEySWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMEZpYzNSeVlXTjBTRzl6ZEVabFlYUjFjbVV1YW5NL01qTTJaU0lzSW5kbFluQmhZMnM2THk5SVQxTlVYME5QVWtVdkxpOXpjbU12WTI5eVpTOUliM04wVDJKcVpXTjBMbXB6UHpjMVpUY2lMQ0ozWldKd1lXTnJPaTh2U0U5VFZGOURUMUpGTHk0dmMzSmpMMk52Y21VdllXNXBiWEJoWTJzdlJXRnphVzVuTG1welB6VTRObU1pTENKM1pXSndZV05yT2k4dlNFOVRWRjlEVDFKRkx5NHZjM0pqTDJOdmNtVXZSbVZoZEhWeVpVUmxjR1Z1WkdWdWRFbHVkR1Z5Wm1GalpTNXFjejh3Tm1KaUlpd2lkMlZpY0dGamF6b3ZMMGhQVTFSZlEwOVNSUzh1TDNOeVl5OWpiM0psTDJGdWFXMXdZV05yTDBGdWFXMWhkR2x2YmtabFlYUjFjbVZFWlhCbGJtUmxiblJKYm5SbGNtWmhZMlV1YW5NL05tVTJNeUlzSW5kbFluQmhZMnM2THk5SVQxTlVYME5QVWtVdkxpOXpjbU12WTI5eVpTOWhibWx0Y0dGamF5OU5ZVzVoWjJWa1FXNXBiV0YwYVc5dVRHRjVaWEpKYm5SbGNtWmhZMlV1YW5NL05EZGtOU0lzSW5kbFluQmhZMnM2THk5SVQxTlVYME5QVWtVdkxpOXpjbU12WTI5eVpTOWhkM053WVdOckwxUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVkVaWEJsYm1SbGJuUkpiblJsY21aaFkyVXVhbk0vWW1OaFpDSXNJbmRsWW5CaFkyczZMeTlJVDFOVVgwTlBVa1V2TGk5emNtTXZZMjl5WlM5TWFYQnplVzVqUm1WaGRIVnlaUzVxY3o4NFpETmhJaXdpZDJWaWNHRmphem92TDBoUFUxUmZRMDlTUlM4dUwzTnlZeTlqYjNKbEwyRjNjM0JoWTJzdlUxTk5URk53WldWamFHMWhjbXRKYm5SbGNtWmhZMlV1YW5NL1kyRTNOQ0lzSW5kbFluQmhZMnM2THk5SVQxTlVYME5QVWtVdkxpOXpjbU12WTI5eVpTOUhaWE4wZFhKbFJtVmhkSFZ5WlM1cWN6OWtZak01SWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMkZ1YVcxd1lXTnJMMEZ1YVcxaGRHbHZibFYwYVd4ekxtcHpQekV4TkRnaUxDSjNaV0p3WVdOck9pOHZTRTlUVkY5RFQxSkZMeTR2YzNKakwyTnZjbVV2WVc1cGJYQmhZMnN2YzNSaGRHVXZRV0p6ZEhKaFkzUlRkR0YwWlM1cWN6OHlaamczSWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMkZ1YVcxd1lXTnJMM04wWVhSbEwxUnlZVzV6YVhScGIyNVRkR0YwWlM1cWN6ODVaVGMzSWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMkZ1YVcxd1lXTnJMMEZ1YVcxaGRHbHZibEJzWVhsbGNrbHVkR1Z5Wm1GalpTNXFjejgzTXpObElpd2lkMlZpY0dGamF6b3ZMMGhQVTFSZlEwOVNSUzh1TDNOeVl5OWpiM0psTDJGdWFXMXdZV05yTDNOMFlYUmxMMU4wWVhSbFEyOXVkR0ZwYm1WeVNXNTBaWEptWVdObExtcHpQekkyTlRraUxDSjNaV0p3WVdOck9pOHZTRTlUVkY5RFQxSkZMeTR2YzNKakwyTnZjbVV2WVc1cGJYQmhZMnN2YzNSaGRHVXZVWFZsZFdWVGRHRjBaUzVxY3o4d1l6UmhJaXdpZDJWaWNHRmphem92TDBoUFUxUmZRMDlTUlM4dUwzTnlZeTlqYjNKbEwyRnVhVzF3WVdOckwzTjBZWFJsTDBGaWMzUnlZV04wUW14bGJtUlRkR0YwWlM1cWN6ODJOamszSWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMkZ1YVcxd1lXTnJMM04wWVhSbEwwWnlaV1ZDYkdWdVpGTjBZWFJsTG1welAyUTJOelVpTENKM1pXSndZV05yT2k4dlNFOVRWRjlEVDFKRkx5NHZjM0pqTDJOdmNtVXZZVzVwYlhCaFkyc3ZjM1JoZEdVdlFteGxibVF4WkZOMFlYUmxMbXB6UDJFM05ESWlMQ0ozWldKd1lXTnJPaTh2U0U5VFZGOURUMUpGTHk0dmMzSmpMMk52Y21VdllXNXBiWEJoWTJzdmMzUmhkR1V2UW14bGJtUXlaRk4wWVhSbExtcHpQemd4TmpNaUxDSjNaV0p3WVdOck9pOHZTRTlUVkY5RFQxSkZMeTR2YzNKakwyTnZjbVV2WVc1cGJYQmhZMnN2UVc1cGJXRjBhVzl1VEdGNVpYSXVhbk0vWW1WbFl5SXNJbmRsWW5CaFkyczZMeTlJVDFOVVgwTlBVa1V2TGk5emNtTXZZMjl5WlM5aGJtbHRjR0ZqYXk5emRHRjBaUzlUYVc1bmJHVlRkR0YwWlM1cWN6ODBaakUwSWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMkZ1YVcxd1lXTnJMM04wWVhSbEwxSmhibVJ2YlVGdWFXMWhkR2x2YmxOMFlYUmxMbXB6UHpRME9UTWlMQ0ozWldKd1lXTnJPaTh2U0U5VFZGOURUMUpGTHk0dmMzSmpMMk52Y21VdllXNXBiWEJoWTJzdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlM1cWN6OWxZbVJsSWl3aWQyVmljR0ZqYXpvdkwwaFBVMVJmUTA5U1JTOHVMM055WXk5amIzSmxMMUJ2YVc1MFQyWkpiblJsY21WemRFWmxZWFIxY21VdWFuTS9aR1ZsTlNJc0luZGxZbkJoWTJzNkx5OUlUMU5VWDBOUFVrVXZMaTl6Y21NdlkyOXlaUzloYm1sdGNHRmpheTlwYm1SbGVDNXFjejg1WVRFeUlpd2lkMlZpY0dGamF6b3ZMMGhQVTFSZlEwOVNSUzh1TDNOeVl5OWpiM0psTDJGM2MzQmhZMnN2VkdWNGRGUnZVM0JsWldOb1ZYUnBiSE11YW5NL056VTFaQ0lzSW5kbFluQmhZMnM2THk5SVQxTlVYME5QVWtVdkxpOXpjbU12WTI5eVpTOWhkM053WVdOckwwRmljM1J5WVdOMFUzQmxaV05vTG1welB6ZG1NV01pTENKM1pXSndZV05yT2k4dlNFOVRWRjlEVDFKRkx5NHZjM0pqTDJOdmNtVXZZWGR6Y0dGamF5OVRjR1ZsWTJndWFuTS9NbUUwTVNJc0luZGxZbkJoWTJzNkx5OUlUMU5VWDBOUFVrVXZMaTl6Y21NdlkyOXlaUzloZDNOd1lXTnJMMEZpYzNSeVlXTjBWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaUzVxY3o4ek5ERm1JaXdpZDJWaWNHRmphem92TDBoUFUxUmZRMDlTUlM4dUwzTnlZeTlqYjNKbEwyRjNjM0JoWTJzdlZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTNXFjejgxWVRnMUlpd2lkMlZpY0dGamF6b3ZMMGhQVTFSZlEwOVNSUzh1TDNOeVl5OWpiM0psTDJGM2MzQmhZMnN2YVc1a1pYZ3Vhbk0vTTJGbE1DSXNJbmRsWW5CaFkyczZMeTlJVDFOVVgwTlBVa1V2TGk5emNtTXZZMjl5WlM5cGJtUmxlQzVxY3o5ak4ySXlJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklFTnZjSGx5YVdkb2RDQkJiV0Y2YjI0dVkyOXRMQ0JKYm1NdUlHOXlJR2wwY3lCaFptWnBiR2xoZEdWekxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh5WEc0dkx5QlRVRVJZTFV4cFkyVnVjMlV0U1dSbGJuUnBabWxsY2pvZ1RVbFVMVEJjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJVYUdVZ1luVnBiSFF0YVc0Z1kyeGhjM01nWm05eUlHRnplVzVqYUhKdmJtOTFjeUJRY205dGFYTmxjeTVjY2x4dUlDb2dRR1Y0ZEdWeWJtRnNJRkJ5YjIxcGMyVmNjbHh1SUNvZ1FITmxaU0JvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlLWVhaaFUyTnlhWEIwTDFKbFptVnlaVzVqWlM5SGJHOWlZV3hmVDJKcVpXTjBjeTlRY205dGFYTmxYSEpjYmlBcUwxeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFRWdVSEp2YldselpTQnZZbXBsWTNRZ2RHaGhkQ0JqWVc0Z1ltVWdjbVZ6YjJ4MlpXUXNJSEpsYW1WamRHVmtJRzl5SUdOaGJtTmxiR1ZrSUdGMElHRnVlU0IwYVcxbElHSjVJSFJvWlZ4eVhHNGdLaUIxYzJWeUxseHlYRzRnS2x4eVhHNGdLaUJBWlhoMFpXNWtjeUJsZUhSbGNtNWhiRHBRY205dGFYTmxYSEpjYmlBcUwxeHlYRzVqYkdGemN5QkVaV1psY25KbFpDQmxlSFJsYm1SeklGQnliMjFwYzJVZ2UxeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdXMlY0WldOMWRHRmliR1U5S0NrZ1BUNGdlMzFkSUMwZ1ZHaGxJR1oxYm1OMGFXOXVJSFJ2SUdKbElHVjRaV04xZEdWa0lHSjVJSFJvWlZ4eVhHNGdJQ0FxSUdOdmJuTjBjblZqZEc5eUxDQmtkWEpwYm1jZ2RHaGxJSEJ5YjJObGMzTWdiMllnWTI5dWMzUnlkV04wYVc1bklIUm9aU0J3Y205dGFYTmxMaUJVYUdVZ2MybG5ibUYwZFhKbFhISmNiaUFnSUNvZ2IyWWdkR2hwY3lCcGN5QmxlSEJsWTNSbFpDQjBieUJpWlRvZ1pYaGxZM1YwWVdKc1pTZ2dJSEpsYzI5c2RYUnBiMjVHZFc1akxDQnlaV3BsWTNScGIyNUdkVzVqTENCallXNWpaV3hzWVhScGIyNUdkVzVqSUNrdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVVbVZ6YjJ4MlpTQXRJRTl3ZEdsdmJtRnNJR1oxYm1OMGFXOXVJSFJ2SUdWNFpXTjFkR1VnYjI1alpTQjBhR1VnY0hKdmJXbHpaVnh5WEc0Z0lDQXFJR2x6SUhKbGMyOXNkbVZrTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCdmJsSmxhbVZqZENBdElFOXdkR2x2Ym1Gc0lHWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdiMjVqWlNCMGFHVWdjSEp2YldselpWeHlYRzRnSUNBcUlHbHpJSEpsYW1WamRHVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0J2YmtOaGJtTmxiQ0F0SUU5d2RHbHZibUZzSUdaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUhWelpYSWdZMkZ1WTJWc2MxeHlYRzRnSUNBcUlIUm9aU0J3Y205dGFYTmxMaUJEWVc1alpXeHBibWNnY21WemRXeDBjeUJwYmlCMGFHVWdjSEp2YldselpTQm9ZWFpwYm1jZ1lTQnpkR0YwZFhNZ2IyWWdKM0psYzI5c2RtVmtKeTVjY2x4dUlDQWdLaTljY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWhsZUdWamRYUmhZbXhsSUQwZ0tDa2dQVDRnZTMwc0lHOXVVbVZ6YjJ4MlpTd2diMjVTWldwbFkzUXNJRzl1UTJGdVkyVnNLU0I3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWNFpXTjFkR0ZpYkdVZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1kzSmxZWFJsSUc1bGR5QkVaV1psY25KbFpDNGdSWGhsWTNWMFlXSnNaU0J0ZFhOMElHSmxJR0VnWm5WdVkzUnBiMjR1WUZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjI1U1pYTnZiSFpsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnYjI1U1pYTnZiSFpsSUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjY2x4dUlDQWdJQ0FnSUNCZ1EyRnVibTkwSUdOeVpXRjBaU0J1WlhjZ1JHVm1aWEp5WldRdUlFOXVVbVZ6YjJ4MlpTQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNHVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiMjVTWldwbFkzUWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQnZibEpsYW1WamRDQWhQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hISmNiaUFnSUNBZ0lDQWdZRU5oYm01dmRDQmpjbVZoZEdVZ2JtVjNJRVJsWm1WeWNtVmtMaUJQYmxKbGFtVmpkQ0J0ZFhOMElHSmxJR0VnWm5WdVkzUnBiMjR1WUZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjI1RFlXNWpaV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhSNWNHVnZaaUJ2YmtOaGJtTmxiQ0FoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVOaGJtNXZkQ0JqY21WaGRHVWdibVYzSUVSbFptVnljbVZrTGlCUGJrTmhibU5sYkNCdGRYTjBJR0psSUdFZ1puVnVZM1JwYjI0dVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUd4bGRDQnlaWE03WEhKY2JpQWdJQ0JzWlhRZ2NtVnFPMXh5WEc0Z0lDQWdiR1YwSUdOaGJtTmxiRHRjY2x4dUlDQWdJR052Ym5OMElITjBZWFIxY3lBOUlIdGNjbHh1SUNBZ0lDQWdjbVZ6YjJ4MlpXUTZJR1poYkhObExGeHlYRzRnSUNBZ0lDQnlaV3BsWTNSbFpEb2dabUZzYzJVc1hISmNiaUFnSUNBZ0lHTmhibU5sYkdWa09pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ2NHVnVaR2x1WnpvZ2RISjFaU3hjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ2MzVndaWElvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQXZMeUJUZEc5eVpTQjBhR1VnY21WemIyeDJaWEpjY2x4dUlDQWdJQ0FnY21WeklEMGdkbUZzZFdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwZFhNdWNHVnVaR2x1WnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYzNSaGRIVnpMbkpsYzI5c2RtVmtJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhOMFlYUjFjeTV3Wlc1a2FXNW5JRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2YmxKbGMyOXNkbVVnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQnZibEpsYzI5c2RtVW9kbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLSFpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ2NtVnFaV04wWlhKY2NseHVJQ0FnSUNBZ2NtVnFJRDBnZG1Gc2RXVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMGRYTXVjR1Z1WkdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkSFZ6TG5KbGFtVmpkR1ZrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lITjBZWFIxY3k1d1pXNWthVzVuSUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmJsSmxhbVZqZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTQTlJRzl1VW1WcVpXTjBLSFpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBLSFpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ1kyRnVZMlZzWlhKY2NseHVJQ0FnSUNBZ1kyRnVZMlZzSUQwZ2RtRnNkV1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoemRHRjBkWE11Y0dWdVpHbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjM1JoZEhWekxtTmhibU5sYkdWa0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSMWN5NXdaVzVrYVc1bklEMGdabUZzYzJVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZia05oYm1ObGJDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUc5dVEyRnVZMlZzS0haaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNoMllXeDFaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdVblZ1SUhSb1pTQmxlR1ZqZFhSaFlteGxJSGRwZEdnZ1kzVnpkRzl0SUhKbGMyOXNkbVZ5SUdGdVpDQnlaV3BsWTNSbGNseHlYRzRnSUNBZ0lDQmxlR1ZqZFhSaFlteGxLSEpsY3l3Z2NtVnFMQ0JqWVc1alpXd3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmYzNSaGRIVnpJRDBnYzNSaGRIVnpPMXh5WEc0Z0lDQWdkR2hwY3k1ZmNtVnpiMngyWlNBOUlISmxjenRjY2x4dUlDQWdJSFJvYVhNdVgzSmxhbVZqZENBOUlISmxhanRjY2x4dUlDQWdJSFJvYVhNdVgyTmhibU5sYkNBOUlHTmhibU5sYkR0Y2NseHVJQ0FnSUhSb2FYTXVYMlY0WldOMWRHRmliR1VnUFNCbGVHVmpkWFJoWW14bE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCMGFHVWdjbVZ6YjJ4MlpXUWdjM1JoZEdVZ2IyWWdkR2hsSUhCeWIyMXBjMlV1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WaFpHOXViSGxjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnY21WemIyeDJaV1FvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjM1JoZEhWekxuSmxjMjlzZG1Wa08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCMGFHVWdjbVZxWldOMFpXUWdjM1JoZEdVZ2IyWWdkR2hsSUhCeWIyMXBjMlV1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WaFpHOXViSGxjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnY21WcVpXTjBaV1FvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjM1JoZEhWekxuSmxhbVZqZEdWa08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCMGFHVWdZMkZ1WTJWc1pXUWdjM1JoZEdVZ2IyWWdkR2hsSUhCeWIyMXBjMlV1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WaFpHOXViSGxjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnWTJGdVkyVnNaV1FvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjM1JoZEhWekxtTmhibU5sYkdWa08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCMGFHVWdjR1Z1WkdsdVp5QnpkR0YwWlNCdlppQjBhR1VnY0hKdmJXbHpaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WldGa2IyNXNlVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0J3Wlc1a2FXNW5LQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBZWFIxY3k1d1pXNWthVzVuTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JtOXlZMlVnZEdobElIQnliMjFwYzJVZ2RHOGdjbVZ6YjJ4MlpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN1lXNTVQWDBnZG1Gc2RXVWdMU0JXWVd4MVpTQjBieUJ3WVhOeklIUnZJSFJvWlNCeVpYTnZiSFpsY2k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0aGJubDlJQzBnVkdobElISmxkSFZ5YmlCMllXeDFaU0J2WmlCMGFHVWdjbVZ6YjJ4MlpYSWdablZ1WTNScGIyNHVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NtVnpiMngyWlNoMllXeDFaU2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxjMjlzZG1Vb2RtRnNkV1VwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JtOXlZMlVnZEdobElIQnliMjFwYzJVZ2RHOGdjbVZxWldOMExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0aGJuazlmU0IyWVd4MVpTQXRJRlpoYkhWbElIUnZJSEJoYzNNZ2RHOGdkR2hsSUhKbGFtVmpkR1Z5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTJGdWVYMGdMU0JVYUdVZ2NtVjBkWEp1SUhaaGJIVmxJRzltSUhSb1pTQnlaV3BsWTNSbGNpQm1kVzVqZEdsdmJpNWNjbHh1SUNBZ0tpOWNjbHh1SUNCeVpXcGxZM1FvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpXcGxZM1FvZG1Gc2RXVXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUm05eVkyVWdkR2hsSUhCeWIyMXBjMlVnZEc4Z2NtVnpiMngyWlNCaGJtUWdjMlYwSUhSb1pTQmpZVzVqWld4bFpDQnpkR0YwWlNCMGJ5QjBjblZsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRoYm5rOWZTQjJZV3gxWlNBdElGWmhiSFZsSUhSdklIQmhjM01nZEc4Z2RHaGxJR05oYm1ObGJHeGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRoYm5sOUlDMGdWR2hsSUhKbGRIVnliaUIyWVd4MVpTQnZaaUIwYUdVZ1kyRnVZMlZzYkdWeUlHWjFibU4wYVc5dUxseHlYRzRnSUNBcUwxeHlYRzRnSUdOaGJtTmxiQ2gyWVd4MVpTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOaGJtTmxiQ2gyWVd4MVpTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTZFc0Z2RHaGxJSEJ5YjIxcGMyVWdablZ1WTNScGIyNGdkRzhnZEhKNUlIUnZJSEpsYzI5c2RtVWdkR2hsSUhCeWIyMXBjMlV1SUZCeWIyMXBjMlVnYlhWemRDQmlaVnh5WEc0Z0lDQXFJSEJsYm1ScGJtY3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5NHVMbUZ1ZVgwZ1lYSm5jeUF0SUU5d2RHbHZibUZzSUdGeVozVnRaVzUwY3lCMGJ5QndZWE56SUdGbWRHVnlJSEpsYzI5c2RtVWdZVzVrSUhKbGFtVmpkQzVjY2x4dUlDQWdLaTljY2x4dUlDQmxlR1ZqZFhSbEtDNHVMbUZ5WjNNcElIdGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxuQmxibVJwYm1jcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlpYaGxZM1YwWVdKc1pTaDBhR2x6TGw5eVpYTnZiSFpsTENCMGFHbHpMbDl5WldwbFkzUXNJSFJvYVhNdVgyTmhibU5sYkN3Z0xpNHVZWEpuY3lrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlNaWFIxY200Z1lTQmpZVzVqWld4bFpDQmtaV1psY25KbFpDQndjbTl0YVhObExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0aGJuazlmU0IyWVd4MVpTQXRJRlpoYkhWbElIUnZJR05oYm1ObGJDQjBhR1VnY0hKdmJXbHpaU0IzYVhSb0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwUmxabVZ5Y21Wa2ZWeHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJqWVc1alpXd29kbUZzZFdVcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dSR1ZtWlhKeVpXUW9LRjl5WlhOdmJIWmxMQ0JmY21WcVpXTjBMQ0JqWVc1alpXd3BJRDArSUh0Y2NseHVJQ0FnSUNBZ1kyRnVZMlZzS0haaGJIVmxLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVjBkWEp1SUdFZ2JtVjNJRVJsWm1WeWNtVmtJSEJ5YjIxcGMyVWdkR2hoZENCM2FXeHNJSEpsYzI5c2RtVWdiM0lnY21WcVpXTjBJRzl1WTJVZ1lXeHNJSEJ5YjIxcGMyVnpYSEpjYmlBZ0lDb2dhVzRnZEdobElHbHVjSFYwSUdGeWNtRjVJR2hoZG1VZ1ltVmxiaUJ5WlhOdmJIWmxaQ0J2Y2lCdmJtVWdjSEp2YldselpTQnBjeUJqWVc1alpXeGxaQ0J2Y2lCeVpXcGxZM1JsWkM1Y2NseHVJQ0FnS2lCUWNtOXRhWE5sY3lCcGJpQjBhR1VnWVhKeVlYa2dkR2hoZENCaGNtVWdSR1ZtWlhKeVpXUWdjSEp2YldselpYTWdkMmxzYkNCaVpTQnRZVzUxWVd4c2VTQnlaWE52YkhabFpDeGNjbHh1SUNBZ0tpQnlaV3BsWTNSbFpDQnZjaUJqWVc1alpXeGxaQ0IzYUdWdUlHTmhiR3hwYm1jZ2NtVnpiMngyWlN3Z2NtVnFaV04wSUc5eUlHTmhibU5sYkNCdmJpQjBhR1VnY21WMGRYSnVJSEJ5YjIxcGMyVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4aGJuaytmU0JwZEdWeVlXSnNaU0F0SUVGdUlHbDBaWEpoWW14bElITjFZMmdnWVhNZ1lXNGdZWEp5WVhrdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVVbVZ6YjJ4MlpTQXRJRTl3ZEdsdmJtRnNJR1oxYm1OMGFXOXVJSFJ2SUdWNFpXTjFkR1VnYjI1alpTQjBhR1VnY0hKdmJXbHpaVnh5WEc0Z0lDQXFJR2x6SUhKbGMyOXNkbVZrTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCdmJsSmxhbVZqZENBdElFOXdkR2x2Ym1Gc0lHWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdiMjVqWlNCMGFHVWdjSEp2YldselpWeHlYRzRnSUNBcUlHbHpJSEpsYW1WamRHVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0J2YmtOaGJtTmxiQ0F0SUU5d2RHbHZibUZzSUdaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUhWelpYSWdZMkZ1WTJWc2MxeHlYRzRnSUNBcUlIUm9aU0J3Y205dGFYTmxMaUJEWVc1alpXeHBibWNnY21WemRXeDBjeUJwYmlCMGFHVWdjSEp2YldselpTQm9ZWFpwYm1jZ1lTQnpkR0YwZFhNZ2IyWWdKMk5oYm1ObGJHVmtKeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJRVJsWm1WeWNtVmtYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdGc2JDaHBkR1Z5WVdKc1pTd2diMjVTWlhOdmJIWmxMQ0J2YmxKbGFtVmpkQ3dnYjI1RFlXNWpaV3dwSUh0Y2NseHVJQ0FnSUdsbUlDaHBkR1Z5WVdKc1pTQTlQU0J1ZFd4c0lIeDhJSFI1Y0dWdlppQnBkR1Z5WVdKc1pWdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZElDRTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hISmNiaUFnSUNBZ0lHeGxkQ0JsSUQwZ1lFTmhibTV2ZENCbGVHVmpkWFJsSUVSbFptVnljbVZrTG1Gc2JDNGdSbWx5YzNRZ1lYSm5kVzFsYm5RZ2JYVnpkQ0JpWlNCcGRHVnlZV0pzWlM1Z08xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmJsSmxhbVZqZENBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHVWdQU0J2YmxKbGFtVmpkQ2hsS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJsWm1WeWNtVmtMbkpsYW1WamRDaGxLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0JoY25KaGVTQTlJRnN1TGk1cGRHVnlZV0pzWlYwN1hISmNiaUFnSUNCamIyNXpkQ0JrWldabGNuSmxaQ0E5SUdGeWNtRjVMbVpwYkhSbGNpaHBkR1Z0SUQwK0lHbDBaVzBnYVc1emRHRnVZMlZ2WmlCRVpXWmxjbkpsWkNrN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2JtVjNJRVJsWm1WeWNtVmtLRnh5WEc0Z0lDQWdJQ0IxYm1SbFptbHVaV1FzWEhKY2JpQWdJQ0FnSUhKbGMyOXNkbVZXWVd4MVpTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1pHVm1aWEp5WldRdVptOXlSV0ZqYUNocGRHVnRJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2wwWlcwdWNtVnpiMngyWlNoeVpYTnZiSFpsVm1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJR1JsWm1WeWNtVmtMbXhsYm1kMGFDQTlJREE3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjI1U1pYTnZiSFpsSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2IyNVNaWE52YkhabEtISmxjMjlzZG1WV1lXeDFaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabFZtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0JsY25KdmNpQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1pHVm1aWEp5WldRdVptOXlSV0ZqYUNocGRHVnRJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2wwWlcwdWNtVnFaV04wS0dWeWNtOXlLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0JrWldabGNuSmxaQzVzWlc1bmRHZ2dQU0F3TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5dVVtVnFaV04wSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2IyNVNaV3BsWTNRb1pYSnliM0lwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNCallXNWpaV3hXWVd4MVpTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1pHVm1aWEp5WldRdVptOXlSV0ZqYUNocGRHVnRJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2wwWlcwdVkyRnVZMlZzS0dOaGJtTmxiRlpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQmtaV1psY25KbFpDNXNaVzVuZEdnZ1BTQXdPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzl1UTJGdVkyVnNJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYjI1RFlXNWpaV3dvWTJGdVkyVnNWbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGdVkyVnNWbUZzZFdVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FwTzF4eVhHNWNjbHh1SUNBZ0lHTnZibk4wSUc1MWJVbDBaVzF6SUQwZ1lYSnlZWGt1YkdWdVozUm9PMXh5WEc0Z0lDQWdZMjl1YzNRZ2FYUmxiVlJ5WVdOclpYSWdQU0I3WEhKY2JpQWdJQ0FnSUdaaGFXeGxaRG9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJRzUxYlZKbGMyOXNkbVZrT2lBd0xGeHlYRzRnSUNBZ0lDQnlaWE52YkhWMGFXOXVjem9nVzExY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmhjbkpoZVM1bWIzSkZZV05vS0NocGRHVnRMQ0JwYm1SbGVDa2dQVDRnZTF4eVhHNGdJQ0FnSUNCcFppQW9hWFJsYlZSeVlXTnJaWEl1Wm1GcGJHVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRW9hWFJsYlNCcGJuTjBZVzVqWlc5bUlGQnliMjFwYzJVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYVhSbGJWUnlZV05yWlhJdWNtVnpiMngxZEdsdmJuTmJhVzVrWlhoZElEMGdhWFJsYlR0Y2NseHVJQ0FnSUNBZ0lDQnBkR1Z0VkhKaFkydGxjaTV1ZFcxU1pYTnZiSFpsWkNBclBTQXhPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVhSbGJWUnlZV05yWlhJdWJuVnRVbVZ6YjJ4MlpXUWdQVDA5SUc1MWJVbDBaVzF6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVjbVZ6YjJ4MlpTaHBkR1Z0VkhKaFkydGxjaTV5WlhOdmJIVjBhVzl1Y3lrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdhWFJsYlM1MGFHVnVLRnh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYUmxiVlJ5WVdOclpYSXVabUZwYkdWa0lDWW1JQ0ZwZEdWdExtTmhibU5sYkdWa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzFVY21GamEyVnlMbkpsYzI5c2RYUnBiMjV6VzJsdVpHVjRYU0E5SUhaaGJIVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0VkhKaFkydGxjaTV1ZFcxU1pYTnZiSFpsWkNBclBTQXhPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbDBaVzFVY21GamEyVnlMbTUxYlZKbGMyOXNkbVZrSUQwOVBTQnVkVzFKZEdWdGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXlaWE52YkhabEtHbDBaVzFVY21GamEyVnlMbkpsYzI5c2RYUnBiMjV6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doYVhSbGJWUnlZV05yWlhJdVptRnBiR1ZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsMFpXMVVjbUZqYTJWeUxtWmhhV3hsWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNWpZVzVqWld3b2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdaWEp5YjNJZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwZEdWdFZISmhZMnRsY2k1bVlXbHNaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJWUnlZV05yWlhJdVptRnBiR1ZrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuSmxhbVZqZENobGNuSnZjaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFUmxabVZ5Y21Wa08xeHlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdRVzFoZW05dUxtTnZiU3dnU1c1akxpQnZjaUJwZEhNZ1lXWm1hV3hwWVhSbGN5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjY2x4dUx5OGdVMUJFV0MxTWFXTmxibk5sTFVsa1pXNTBhV1pwWlhJNklFMUpWQzB3WEhKY2JtbHRjRzl5ZENCRVpXWmxjbkpsWkNCbWNtOXRJQ2RqYjNKbEwwUmxabVZ5Y21Wa0p6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkJJR052Ykd4bFkzUnBiMjRnYjJZZ2RYTmxablZzSUdkbGJtVnlhV01nWm5WdVkzUnBiMjV6TGx4eVhHNGdLbHh5WEc0Z0tpQkFhR2xrWldOdmJuTjBjblZqZEc5eVhISmNiaUFxTDF4eVhHNWpiR0Z6Y3lCVmRHbHNjeUI3WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUhOMFlYUnBZMXh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dSMlZ1WlhKaGRHVWdZU0IxYm1seGRXVWdhV1JjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUZEhKcGJtZDlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdOeVpXRjBaVWxrS0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNkNGVIaDRlSGg0ZUhoNGVIZzBlSGg0ZVhoNGVIaDRlSGg0ZUhoNGVIaDRlQ2N1Y21Wd2JHRmpaU2d2VzNoNVhTOW5MQ0JqSUQwK0lIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2NtRnVaRzl0VG5WdFltVnlJRDBnVFdGMGFDNW1iRzl2Y2lnb1JHRjBaUzV1YjNjb0tTQXJJRTFoZEdndWNtRnVaRzl0S0NrZ0tpQXhOaWtnSlNBeE5pazdYSEpjYmlBZ0lDQWdJR2xtSUNoaklEMDlQU0FuZUNjcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbUZ1Wkc5dFRuVnRZbVZ5TG5SdlUzUnlhVzVuS0RFMktUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0F2THlCVFpYUWdZbWwwSURZZ1lXNWtJRGNnZEc4Z01DQmhibVFnTVZ4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnS0NoeVlXNWtiMjFPZFcxaVpYSWdKaUF3ZURNcElId2dNSGc0S1M1MGIxTjBjbWx1WnlneE5pazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVCemRHRjBhV05jY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRU5vWldOcklHRWdibUZ0WlNCemRISnBibWNnWVdkaGFXNXpkQ0JoYmlCaGNuSmhlU0J2WmlCemRISnBibWR6SUhSdklHUmxkR1Z5YldsdVpTQnBaaUJwZENCcGN5QjFibWx4ZFdVdVhISmNiaUFnSUNvZ1NXWWdhWFFnYVhOdUozUXNJR0Z3Y0dWdVpDQnBibU55WlcxbGJuUmxaQ0IwY21GcGJHbHVaeUJwYm5SbFoyVnljeUIwYnlCMGFHVWdaVzVrSUc5bUlIUm9aU0J1WVcxbFhISmNiaUFnSUNvZ2RXNTBhV3dnYVhRZ2FYTWdkVzVwY1hWbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVWdMU0JUZEhKcGJtY2dibUZ0WlNCMGJ5QnRZV3RsSUhWdWFYRjFaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeHpkSEpwYm1jK1BYMGdibUZ0WlVGeWNtRjVJQzBnUVhKeVlYa2diMllnYzNSeWFXNW5JRzVoYldWeklIUnZJR05vWldOcklHRm5ZV2x1Y3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHZGxkRlZ1YVhGMVpVNWhiV1VvYm1GdFpTd2dibUZ0WlVGeWNtRjVJRDBnVzEwcElIdGNjbHh1SUNBZ0lDOHZJRWxtSUhSb1pTQnVZVzFsSUdsemJpZDBJR2x1SUhSb1pTQmhjbkpoZVNCeVpYUjFjbTRnYVhRZ2NtbG5hSFFnWVhkaGVWeHlYRzRnSUNBZ2FXWWdLQ0Z1WVcxbFFYSnlZWGt1YVc1amJIVmtaWE1vYm1GdFpTa3BJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRzVoYldVN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2JtRnRaVk5sZENBOUlHNWxkeUJUWlhRb2JtRnRaVUZ5Y21GNUtUdGNjbHh1WEhKY2JpQWdJQ0F2THlCVFpYQmhjbUYwWlNCMGFHVWdibUZ0WlNCcGJuUnZJSE4wY21sdVp5QmhibVFnZEhKaGFXeHBibWNnYm5WdFltVnljMXh5WEc0Z0lDQWdZMjl1YzNRZ2JXRjBZMmhIY205MWNDQTlJRzVoYldVdWJXRjBZMmdvTDF4Y1pDb2tMeWs3WEhKY2JpQWdJQ0JqYjI1emRDQjdhVzVrWlhoOUlEMGdiV0YwWTJoSGNtOTFjRHRjY2x4dUlDQWdJR052Ym5OMElHSmhjMlZPWVcxbElEMGdibUZ0WlM1emJHbGpaU2d3TENCcGJtUmxlQ2s3WEhKY2JpQWdJQ0JzWlhRZ2FXNWpjbVZ0Wlc1MElEMGdUblZ0WW1WeUtHMWhkR05vUjNKdmRYQmJNRjBwTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRVpwYm1RZ2RHaGxJR2hwWjJobGMzUWdkSEpoYVd4cGJtY2diblZ0WW1WeUlIWmhiSFZsSUdadmNpQjBhR1VnWW1GelpTQnZaaUIwYUdVZ2JtRnRaVnh5WEc0Z0lDQWdibUZ0WlZObGRDNW1iM0pGWVdOb0tITmxkRTVoYldVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQnpaWFJOWVhSamFFZHliM1Z3SUQwZ2MyVjBUbUZ0WlM1dFlYUmphQ2d2WEZ4a0tpUXZLVHRjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2h6WlhST1lXMWxMbk5zYVdObEtEQXNJSE5sZEUxaGRHTm9SM0p2ZFhBdWFXNWtaWGdwSUQwOVBTQmlZWE5sVG1GdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5sZEVsdVkzSmxiV1Z1ZENBOUlFNTFiV0psY2loelpYUk5ZWFJqYUVkeWIzVndXekJkS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxkRWx1WTNKbGJXVnVkQ0ErSUdsdVkzSmxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVc1amNtVnRaVzUwSUQwZ2MyVjBTVzVqY21WdFpXNTBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1NXNWpjbVZ0Wlc1MElIUm9aU0JvYVdkb1pYTjBJSFJ5WVdsc2FXNW5JRzUxYldKbGNpQmhibVFnWVhCd1pXNWtJSFJ2SUhSb1pTQnVZVzFsWEhKY2JpQWdJQ0J5WlhSMWNtNGdZQ1I3WW1GelpVNWhiV1Y5Skh0cGJtTnlaVzFsYm5RZ0t5QXhmV0E3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCU1pYUjFjbTRnWVNCa1pXWmxjbkpsWkNCd2NtOXRhWE5sSUhSb1lYUWdkMmxzYkNCM1lXbDBJR0VnWjJsMlpXNGdiblZ0WW1WeUlHOW1JSE5sWTI5dVpITWdZbVZtYjNKbFhISmNiaUFnSUNvZ2NtVnpiMngyYVc1bkxpQlFZWE56SUdSbGJIUmhJSFJwYldVZ2FXNGdiV2xzYkdselpXTnZibVJ6SUhSdklIUm9aU0JrWldabGNuSmxaQ0J3Y205dGFYTmxKM01nWlhobFkzVjBaVnh5WEc0Z0lDQXFJRzFsZEdodlpDQnBiaUJoYmlCMWNHUmhkR1VnYkc5dmNDQjBieUJ3Y205bmNtVnpjeUIwYVcxbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0elpXTnZibVJ6UFRCZElDMGdUblZ0WW1WeUlHOW1JSE5sWTI5dVpITWdkRzhnZDJGcGRDQmlaV1p2Y21VZ2NtVnpiMngyYVc1bkxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ2IzQjBhVzl1Y3lBdElFOXdkR2x2Ym1Gc0lHOXdkR2x2Ym5NZ2IySnFaV04wWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnVzI5d2RHbHZibk11YjI1R2FXNXBjMmhkSUMwZ1EyRnNiR0poWTJzZ2RHOGdaWGhsWTNWMFpTQnZibU5sSUhSb1pTQjNZV2wwSUhScGJXVmNjbHh1SUNBZ0tpQnBjeUJ0WlhRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXdkR2x2Ym5NdWIyNVFjbTluY21WemN5QXRJRU5oYkd4aVlXTnJJSFJ2SUdWNFpXTjFkR1VnWldGamFDQjBhVzFsSUhSb1pTQjNZV2wwWEhKY2JpQWdJQ29nZEdsdFpTQndjbTluY21WemMyVnpJSFJ2ZDJGeVpITWdkR2hsSUhSaGNtZGxkQ0J1ZFcxaVpYSWdiMllnYzJWamIyNWtjeTRnVkdobElHRnRiM1Z1ZENCdlppQndjbTluY21WemMxeHlYRzRnSUNBcUlHRnpJR0VnTUMweElIQmxjbU5sYm5SaFoyVWdhWE1nY0dGemMyVmtJR0Z6SUdGdUlHRnlaM1Z0Wlc1MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQnZjSFJwYjI1ekxtOXVRMkZ1WTJWc0lDMGdRMkZzYkdKaFkyc2dkRzhnWlhobFkzVjBaU0JwWmlCMGFHVWdkWE5sY2lCallXNWpaV3h6WEhKY2JpQWdJQ29nZEdobElIZGhhWFFnWW1WbWIzSmxJR052YlhCc1pYUnBiMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUc5d2RHbHZibk11YjI1RmNuSnZjaUF0SUVOaGJHeGlZV05ySUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUhkaGFYUWdjM1J2Y0hOY2NseHVJQ0FnS2lCaVpXTmhkWE5sSUdGdUlHVnljbTl5SUdseklHVnVZMjkxYm5SbGNtVmtMaUJVYUdVZ1pYSnliM0lnYldWemMyRm5aU0JwY3lCd1lYTnpaV1FnWVhNZ1lTQndZWEpoYldWMFpYSXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSR1ZtWlhKeVpXUjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUhkaGFYUW9jMlZqYjI1a2N5QTlJREFzSUh0dmJrWnBibWx6YUN3Z2IyNVFjbTluY21WemN5d2diMjVEWVc1alpXd3NJRzl1UlhKeWIzSjlJRDBnZTMwcElIdGNjbHh1SUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0J6WldOdmJtUnpJR2x6SUc1MWJXVnlhV05jY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYzJWamIyNWtjeUFoUFQwZ0oyNTFiV0psY2ljcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4eVhHNGdJQ0FnSUNBZ0lHQkpiblpoYkdsa0lITmxZMjl1WkhNZ2RtRnNkV1VnSkh0elpXTnZibVJ6ZlNCbWIzSWdkMkZwZEM0Z1JHVm1ZWFZzZEdsdVp5QjBieUF3TG1CY2NseHVJQ0FnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUhObFkyOXVaSE1nUFNBd08xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUZKbGMyOXNkbVVnYVcxdFpXUnBZWFJsYkhrZ2FXWWdkR2hsSUhkaGFYUWdkR2x0WlNCcGN5QnViM1FnWjNKbFlYUmxjaUIwYUdGdUlEQmNjbHh1SUNBZ0lHbG1JQ2h6WldOdmJtUnpJRHc5SURBcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2YmtacGJtbHphQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUc5dVJtbHVhWE5vS0NrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJFWldabGNuSmxaQzV5WlhOdmJIWmxLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2JHVjBJR04xY25KbGJuUlVhVzFsSUQwZ01EdGNjbHh1SUNBZ0lHTnZibk4wSUhSdmRHRnNWR2x0WlNBOUlITmxZMjl1WkhNZ0tpQXhNREF3T3lBdkx5QmpiMjUyWlhKMElIUnZJRzFwYkd4cGMyVmpiMjVrYzF4eVhHNWNjbHh1SUNBZ0lDOHZJRVY0WldOMWRHRmliR1VnZEc4Z2NHRnpjeUIwYnlCRVpXWmxjbkpsWkN3Z2JXVmhiblFnZEc4Z1ltVWdjblZ1SUdsdUlHRnVJSFZ3WkdGMFpTQnNiMjl3WEhKY2JpQWdJQ0JqYjI1emRDQnZibFZ3WkdGMFpTQTlJQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXNJRjlqWVc1alpXd3NJR1JsYkhSaFZHbHRaU0E5SURBcElEMCtJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1pXeDBZVlJwYldVZ0lUMDlJQ2R1ZFcxaVpYSW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlNBOUlHNWxkeUJGY25KdmNpaGNjbHh1SUNBZ0lDQWdJQ0FnSUdCSmJuWmhiR2xrSUhCeWIzQmxjblI1SUhkaGFYUWdaR1ZzZEdGVWFXMWxMaUJFWld4MFlWUnBiV1VnYlhWemRDQmlaU0JoSUc1MWJXSmxjaTVnWEhKY2JpQWdJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aU2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0F2THlCTllXdGxJSE4xY21VZ2RHbHRaU0JvWVhNZ2NHRnpjMlZrWEhKY2JpQWdJQ0FnSUdsbUlDaGtaV3gwWVZScGJXVWdQVDA5SURBcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDOHZJRk5wWjI1aGJDQndjbTluY21WemMxeHlYRzRnSUNBZ0lDQmpkWEp5Wlc1MFZHbHRaU0FyUFNCa1pXeDBZVlJwYldVN1hISmNiaUFnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBWR2x0WlNBOElEQXBJSHRjY2x4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVkdsdFpTQTlJREE3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjI1UWNtOW5jbVZ6Y3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHOXVVSEp2WjNKbGMzTW9UV0YwYUM1dGFXNG9ZM1Z5Y21WdWRGUnBiV1VnTHlCMGIzUmhiRlJwYldVc0lERXBLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdMeThnVTJsbmJtRnNJR052YlhCc1pYUnBiMjRnYjI1alpTQjBhVzFsSUdseklIVndYSEpjYmlBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVkdsdFpTQStQU0IwYjNSaGJGUnBiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkVaV1psY25KbFpDaHZibFZ3WkdGMFpTd2diMjVHYVc1cGMyZ3NJRzl1UlhKeWIzSXNJRzl1UTJGdVkyVnNLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FnS2lCSFpYUWdZU0J5WVc1a2IyMGdabXh2WVhRZ2JuVnRZbVZ5SUdKbGRIZGxaVzRnWVNCdGFXNGdLR2x1WTJ4MWMybDJaU2tnWVc1a0lHMWhlQ0FvWlhoamJIVnphWFpsS1NCMllXeDFaVnh5WEc0Z0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdiV2x1SUcxcGJtbHRkVzBnZG1Gc2RXVmNjbHh1SUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHMWhlQ0J0WVhocGJYVnRJSFpoYkhWbFhISmNiaUFnSUNBcUlFQnlaWFIxY201eklIdG1iRzloZEgxY2NseHVJQ0FnSUNvdlhISmNiaUFnYzNSaGRHbGpJR2RsZEZKaGJtUnZiVVpzYjJGMEtHMXBiaXdnYldGNEtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1RXRjBhQzV5WVc1a2IyMG9LU0FxSUNodFlYZ2dMU0J0YVc0cElDc2diV2x1TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNBcUlFZGxkQ0JoSUhKaGJtUnZiU0JwYm5SbFoyVnlJRzUxYldKbGNpQmlaWFIzWldWdUlHRWdiV2x1SUNocGJtTnNkWE5wZG1VcElHRnVaQ0J0WVhnZ0tHVjRZMngxYzJsMlpTa2dkbUZzZFdWY2NseHVJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUcxcGJpQnRhVzVwYlhWdElIWmhiSFZsWEhKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J0WVhnZ2JXRjRhVzExYlNCMllXeDFaVnh5WEc0Z0lDQWdLaUJBY21WMGRYSnVjeUI3YVc1MFpXZGxjbjFjY2x4dUlDQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHZGxkRkpoYm1SdmJVbHVkQ2h0YVc0c0lHMWhlQ2tnZTF4eVhHNGdJQ0FnYldsdUlEMGdUV0YwYUM1alpXbHNLRzFwYmlrN1hISmNiaUFnSUNCdFlYZ2dQU0JOWVhSb0xtWnNiMjl5S0cxaGVDazdYSEpjYmlBZ0lDQnlaWFIxY200Z1RXRjBhQzVtYkc5dmNpaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ0tHMWhlQ0F0SUcxcGJpa3BJQ3NnYldsdU8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1ZYUnBiSE03WEhKY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCQmJXRjZiMjR1WTI5dExDQkpibU11SUc5eUlHbDBjeUJoWm1acGJHbGhkR1Z6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHlYRzR2THlCVFVFUllMVXhwWTJWdWMyVXRTV1JsYm5ScFptbGxjam9nVFVsVUxUQmNjbHh1WTI5dWMzUWdVbUZrYVdGdVZHOUVaV2R5WldVZ1BTQXhPREFnTHlCTllYUm9MbEJKTzF4eVhHNWpiMjV6ZENCRVpXZHlaV1ZVYjFKaFpHbGhiaUE5SUUxaGRHZ3VVRWtnTHlBeE9EQTdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRU0JqYjJ4c1pXTjBhVzl1SUc5bUlIVnpaV1oxYkNCdFlYUm9JR1oxYm1OMGFXOXVjeTVjY2x4dUlDcGNjbHh1SUNvZ1FHaHBaR1ZqYjI1emRISjFZM1J2Y2x4eVhHNGdLaTljY2x4dVkyeGhjM01nVFdGMGFGVjBhV3h6SUh0Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGIyNTJaWEowSUhSb1pTQm5hWFpsYmlCaGJtZHNaU0JtY205dElISmhaR2xoYm5NZ2RHOGdaR1ZuY21WbGN5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCeVlXUnBZVzV6SUMwZ1FXNW5iR1VnYVc0Z2NtRmthV0Z1Y3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0dWRXMWlaWEo5SUMwZ1FXNW5iR1VnYVc0Z1pHVm5jbVZsY3k1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdkRzlFWldkeVpXVnpLSEpoWkdsaGJuTXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQnlZV1JwWVc1eklDb2dVbUZrYVdGdVZHOUVaV2R5WldVN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRiMjUyWlhKMElIUm9aU0JuYVhabGJpQmhibWRzWlNCbWNtOXRJR1JsWjNKbFpYTWdkRzhnY21Ga2FXRnVjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmtaV2R5WldWeklDMGdRVzVuYkdVZ2FXNGdaR1ZuY21WbGN5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdHVkVzFpWlhKOUlDMGdRVzVuYkdVZ2FXNGdjbUZrYVdGdWN5NWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nZEc5U1lXUnBZVzV6S0dSbFozSmxaWE1wSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJrWldkeVpXVnpJQ29nUkdWbmNtVmxWRzlTWVdScFlXNDdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJNYVc1bFlYSnNlU0JwYm5SbGNuQnZiR0YwWlNCaVpYUjNaV1Z1SUhSM2J5QjJZV3gxWlhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWm5KdmJTQXRJRk4wWVhKMElIWmhiSFZsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IwYnlBdElGUmhjbWRsZENCMllXeDFaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdabUZqZEc5eUlDMGdNQzB4SUdGdGIzVnVkQ0IwYnlCcGJuUmxjbkJ2YkdGMFpTQmlaWFIzWldWdUlHWnliMjBnWVc1a0lIUnZMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYkdWeWNDaG1jbTl0TENCMGJ5d2dabUZqZEc5eUtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1puSnZiU0FySUNoMGJ5QXRJR1p5YjIwcElDb2dabUZqZEc5eU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRMnhoYlhBZ1lTQnVkVzFpWlhJZ1ltVjBkMlZsYmlBeUlIWmhiSFZsY3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IyWVd4MVpTQXRJRlpoYkhWbElIUnZJR05zWVcxd0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCYmJXbHVQVEJkSUMwZ1RXbHVkVzExYlNCMllXeDFaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjFoZUQweFhTQXRJRTFoZUdsdGRXMGdkbUZzZFdVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JuVnRZbVZ5ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QmpiR0Z0Y0NoMllXeDFaU3dnYldsdUlEMGdNQ3dnYldGNElEMGdNU2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRTFoZEdndWJXRjRLRzFwYml3Z1RXRjBhQzV0YVc0b2RtRnNkV1VzSUcxaGVDa3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTJGc1kzVnNZWFJsY3lCMGFHVWdZMnh2YzJWemRDQndiMmx1ZENCdmJpQmhJR2RwZG1WdUlESkVJR3hwYm1VZ2MyVm5aVzFsYm5SY2NseHVJQ0FnS2lCbWNtOXRJR0VnWjJsMlpXNGdNa1FnY0c5cGJuUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4dWRXMWlaWEkrZlNCaElDMGdSbWx5YzNRZ2NHOXBiblFnYjI0Z2JHbHVaU0J6WldkdFpXNTBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBHNTFiV0psY2o1OUlHSWdMU0JUWldOdmJtUWdjRzlwYm5RZ2IyNGdiR2x1WlNCelpXZHRaVzUwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRzUxYldKbGNqNTlJSEFnTFNBeVJDQndiMmx1ZEM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0QmNuSmhlUzQ4Ym5WdFltVnlQbjFjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1kyeHZjMlZ6ZEZCdmFXNTBUMjVNYVc1bEtHRXNJR0lzSUhBcElIdGNjbHh1SUNBZ0lHTnZibk4wSUdScGMzUlRjWElnUFNCTllYUm9WWFJwYkhNdVpHbHpkR0Z1WTJWVGNYVmhjbVZrS0dFc0lHSXBPMXh5WEc1Y2NseHVJQ0FnSUM4dklFeHBibVVnYzJWbmJXVnVkQ0JwY3lCaElITnBibWRzWlNCd2IybHVkRnh5WEc0Z0lDQWdhV1lnS0dScGMzUlRjWElnUFQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR0U3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnZENBOVhISmNiaUFnSUNBZ0lDZ29jRnN3WFNBdElHRmJNRjBwSUNvZ0tHSmJNRjBnTFNCaFd6QmRLU0FySUNod1d6RmRJQzBnWVZzeFhTa2dLaUFvWWxzeFhTQXRJR0ZiTVYwcEtTQXZJR1JwYzNSVGNYSTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElIQnZhVzUwSUQwZ1d5NHVMbUZkTzF4eVhHNGdJQ0FnYVdZZ0tIUWdQaUF4S1NCN1hISmNiaUFnSUNBZ0lIQnZhVzUwSUQwZ1d5NHVMbUpkTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMElENGdNQ2tnZTF4eVhHNGdJQ0FnSUNCd2IybHVkQ0E5SUZ0aFd6QmRJQ3NnZENBcUlDaGlXekJkSUMwZ1lWc3dYU2tzSUdGYk1WMGdLeUIwSUNvZ0tHSmJNVjBnTFNCaFd6RmRLVjA3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhCdmFXNTBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QjBhR1VnWkdsemRHRnVZMlVnYzNGMVlYSmxaQ0JtYjNJZ2RIZHZJREpFSUhCdmFXNTBjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeHVkVzFpWlhJK2ZTQmhJQzBnTWtRZ2NHOXBiblF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhiblZ0WW1WeVBuMGdZaUF0SURKRUlIQnZhVzUwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTI1MWJXSmxjbjFjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1pHbHpkR0Z1WTJWVGNYVmhjbVZrS0dFc0lHSXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9ZVnN3WFNBdElHSmJNRjBwSUNvZ0tHRmJNRjBnTFNCaVd6QmRLU0FySUNoaFd6RmRJQzBnWWxzeFhTa2dLaUFvWVZzeFhTQXRJR0piTVYwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dWSEpwWVc1bmRXeGhkR1Z6SUdFZ2MyVjBJRzltSURKRUlIQnZhVzUwY3lCMWMybHVaeUJoYmlCcGJYQnNaVzFsYm5SaGRHbHZibHh5WEc0Z0lDQXFJRzltSUhSb1pTQkNiM2Q1WlhJdFYyRjBjMjl1SUdsdVkzSmxiV1Z1ZEdGc0lFUmxiR0YxYm1GNUlIUnlhV0Z1WjNWc1lYUnBiMjR1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeEJjbkpoZVM0OGJuVnRZbVZ5UGo1OUlIWmxjblJwWTJWeklDMGdRWEp5WVhrZ2IyWWdNa1FnY0c5cGJuUnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNUxqeEJjbkpoZVR4dWRXMWlaWEkrUG4wZ0xTQkJjbkpoZVNCdlppQjBjbWxoYm1kc1pTQnBibVJwWTJWekxseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJuWlhSRVpXeGhkVzVoZVZSeWFXRnVaM1ZzWVhScGIyNG9kbVZ5ZEdsalpYTXBJSHRjY2x4dUlDQWdJR2xtSUNnaGRtVnlkR2xqWlhNZ2ZId2dkbVZ5ZEdsalpYTXViR1Z1WjNSb0lEd2dNeWtnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ1lFTmhibTV2ZENCblpYUWdaR1ZzWVhWdVlYa2dkSEpwWVc1bmRXeGhkR2x2YmlCbWIzSWdjRzlwYm5SeklDUjdkbVZ5ZEdsalpYTjlMaUJKYm5CMWRDQnRkWE4wSUdOdmJuUmhhVzRnWVhRZ2JHVmhjM1FnZEdoeVpXVWdjRzlwYm5SekxtQmNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCc1pYUWdiV2x1V0NBOUlFNTFiV0psY2k1UVQxTkpWRWxXUlY5SlRrWkpUa2xVV1R0Y2NseHVJQ0FnSUd4bGRDQnRhVzVaSUQwZ1RuVnRZbVZ5TGxCUFUwbFVTVlpGWDBsT1JrbE9TVlJaTzF4eVhHNGdJQ0FnYkdWMElHMWhlRmdnUFNCT2RXMWlaWEl1VGtWSFFWUkpWa1ZmU1U1R1NVNUpWRms3WEhKY2JpQWdJQ0JzWlhRZ2JXRjRXU0E5SUU1MWJXSmxjaTVPUlVkQlZFbFdSVjlKVGtaSlRrbFVXVHRjY2x4dVhISmNiaUFnSUNCMlpYSjBhV05sY3k1bWIzSkZZV05vS0hZZ1BUNGdlMXh5WEc0Z0lDQWdJQ0J0YVc1WUlEMGdkbHN3WFNBOElHMXBibGdnUHlCMld6QmRJRG9nYldsdVdEdGNjbHh1SUNBZ0lDQWdiV2x1V1NBOUlIWmJNVjBnUENCdGFXNVpJRDhnZGxzeFhTQTZJRzFwYmxrN1hISmNiaUFnSUNBZ0lHMWhlRmdnUFNCMld6QmRJRDRnYldGNFdDQS9JSFpiTUYwZ09pQnRZWGhZTzF4eVhHNGdJQ0FnSUNCdFlYaFpJRDBnZGxzeFhTQStJRzFoZUZrZ1B5QjJXekZkSURvZ2JXRjRXVHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lHTnZibk4wSUdSWUlEMGdiV0Y0V0NBdElHMXBibGc3WEhKY2JpQWdJQ0JqYjI1emRDQmtXU0E5SUcxaGVGa2dMU0J0YVc1Wk8xeHlYRzRnSUNBZ1kyOXVjM1FnYldsa1dDQTlJQ2h0YVc1WUlDc2diV0Y0V0NrZ0x5QXlPMXh5WEc0Z0lDQWdZMjl1YzNRZ2JXbGtXU0E5SUNodGFXNVpJQ3NnYldGNFdTa2dMeUF5TzF4eVhHNGdJQ0FnWTI5dWMzUWdaRTFoZUNBOUlHUllJRDRnWkZrZ1B5QmtXQ0E2SUdSWk8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElITjFjR1Z5U1c1a2FXTmxjeUE5SUZ0Y2NseHVJQ0FnSUNBZ2RtVnlkR2xqWlhNdWJHVnVaM1JvTEZ4eVhHNGdJQ0FnSUNCMlpYSjBhV05sY3k1c1pXNW5kR2dnS3lBeExGeHlYRzRnSUNBZ0lDQjJaWEowYVdObGN5NXNaVzVuZEdnZ0t5QXlMRnh5WEc0Z0lDQWdYVHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0IyWlhKMGMxZHBkR2hUZFhCbGNpQTlJRnRjY2x4dUlDQWdJQ0FnTGk0dWRtVnlkR2xqWlhNc1hISmNiaUFnSUNBZ0lGdHRhV1JZSUMwZ01qQWdLaUJrVFdGNExDQnRhV1JaSUMwZ1pFMWhlRjBzWEhKY2JpQWdJQ0FnSUZ0dGFXUllMQ0J0YVdSWklDc2dNakFnS2lCa1RXRjRYU3hjY2x4dUlDQWdJQ0FnVzIxcFpGZ2dLeUF5TUNBcUlHUk5ZWGdzSUcxcFpGa2dMU0JrVFdGNFhTeGNjbHh1SUNBZ0lGMDdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdjM1Z3WlhKVGIzSjBaV1JKYm1ScFkyVnpJRDBnVFdGMGFGVjBhV3h6TG5OdmNuUlFiMmx1ZEhORFExY29YSEpjYmlBZ0lDQWdJSE4xY0dWeVNXNWthV05sY3l4Y2NseHVJQ0FnSUNBZ2RtVnlkSE5YYVhSb1UzVndaWEpjY2x4dUlDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnYzNWd1pYSlVjbWxoYm1kc1pTQTlJSHRjY2x4dUlDQWdJQ0FnYVc1a2FXTmxjem9nYzNWd1pYSlRiM0owWldSSmJtUnBZMlZ6TEZ4eVhHNGdJQ0FnSUNCbFpHZGxjem9nVzF4eVhHNGdJQ0FnSUNBZ0lGdHpkWEJsY2xOdmNuUmxaRWx1WkdsalpYTmJNRjBzSUhOMWNHVnlVMjl5ZEdWa1NXNWthV05sYzFzeFhWMHNYSEpjYmlBZ0lDQWdJQ0FnVzNOMWNHVnlVMjl5ZEdWa1NXNWthV05sYzFzeFhTd2djM1Z3WlhKVGIzSjBaV1JKYm1ScFkyVnpXekpkWFN4Y2NseHVJQ0FnSUNBZ0lDQmJjM1Z3WlhKVGIzSjBaV1JKYm1ScFkyVnpXekpkTENCemRYQmxjbE52Y25SbFpFbHVaR2xqWlhOYk1GMWRMRnh5WEc0Z0lDQWdJQ0JkTEZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCMGNtbGhibWRzWlhNZ1BTQmJjM1Z3WlhKVWNtbGhibWRzWlYwN1hISmNibHh5WEc0Z0lDQWdkbVZ5ZEhOWGFYUm9VM1Z3WlhJdVptOXlSV0ZqYUNnb2JtVjNWbVZ5ZEN3Z2JtVjNTVzVrWlhncElEMCtJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdhVzUyWVd4cFpGUnlhV0Z1WjJ4bGN5QTlJRnRkTzF4eVhHNGdJQ0FnSUNCMGNtbGhibWRzWlhNdVptOXlSV0ZqYUNoMGNtbGhibWRzWlNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHlYRzRnSUNBZ0lDQWdJQ0FnVFdGMGFGVjBhV3h6TG1selVHOXBiblJKYmtOcGNtTjFiVU5wY21Oc1pTaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtVnlkSE5YYVhSb1UzVndaWEpiZEhKcFlXNW5iR1V1YVc1a2FXTmxjMXN3WFYwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUnpWMmwwYUZOMWNHVnlXM1J5YVdGdVoyeGxMbWx1WkdsalpYTmJNVjFkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWlhKMGMxZHBkR2hUZFhCbGNsdDBjbWxoYm1kc1pTNXBibVJwWTJWeld6SmRYU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzVm1WeWRGeHlYRzRnSUNBZ0lDQWdJQ0FnS1Z4eVhHNGdJQ0FnSUNBZ0lDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXNTJZV3hwWkZSeWFXRnVaMnhsY3k1d2RYTm9LSFJ5YVdGdVoyeGxLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnWW05MWJtUnBibWRRYjJ4NUlEMGdXMTA3WEhKY2JpQWdJQ0FnSUdsdWRtRnNhV1JVY21saGJtZHNaWE11Wm05eVJXRmphQ2gwY21saGJtZHNaU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdkSEpwWVc1bmJHVXVaV1JuWlhNdVptOXlSV0ZqYUNobFpHZGxJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR3hsZENCamIzVnVkQ0E5SURBN1hISmNiaUFnSUNBZ0lDQWdJQ0JwYm5aaGJHbGtWSEpwWVc1bmJHVnpMbVp2Y2tWaFkyZ29iM1JvWlhKVWNtbGhibWRzWlNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwY21saGJtZHNaU0FoUFQwZ2IzUm9aWEpVY21saGJtZHNaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5MGFHVnlWSEpwWVc1bmJHVXVaV1JuWlhNdVptOXlSV0ZqYUNodmRHaGxja1ZrWjJVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWldSblpWc3dYU0E5UFQwZ2IzUm9aWEpGWkdkbFd6QmRJQ1ltSUdWa1oyVmJNVjBnUFQwOUlHOTBhR1Z5UldSblpWc3hYU2tnZkh4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLR1ZrWjJWYk1WMGdQVDA5SUc5MGFHVnlSV1JuWlZzd1hTQW1KaUJsWkdkbFd6QmRJRDA5UFNCdmRHaGxja1ZrWjJWYk1WMHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5RZ0t6MGdNVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1kyOTFiblFnUFQwOUlEQXBJR0p2ZFc1a2FXNW5VRzlzZVM1d2RYTm9LR1ZrWjJVcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsdWRtRnNhV1JVY21saGJtZHNaWE11Wm05eVJXRmphQ2gwY21saGJtZHNaU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdkSEpwWVc1bmJHVnpMbk53YkdsalpTaDBjbWxoYm1kc1pYTXVhVzVrWlhoUFppaDBjbWxoYm1kc1pTa3NJREVwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdKdmRXNWthVzVuVUc5c2VTNW1iM0pGWVdOb0tHVmtaMlVnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElITnZjblJsWkVsdVpHbGpaWE1nUFNCTllYUm9WWFJwYkhNdWMyOXlkRkJ2YVc1MGMwTkRWeWhjY2x4dUlDQWdJQ0FnSUNBZ0lGdGxaR2RsV3pCZExDQmxaR2RsV3pGZExDQnVaWGRKYm1SbGVGMHNYSEpjYmlBZ0lDQWdJQ0FnSUNCMlpYSjBjMWRwZEdoVGRYQmxjbHh5WEc0Z0lDQWdJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSeWFXRnVaMnhsY3k1d2RYTm9LSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbHVaR2xqWlhNNklITnZjblJsWkVsdVpHbGpaWE1zWEhKY2JpQWdJQ0FnSUNBZ0lDQmxaR2RsY3pvZ1cxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCYmMyOXlkR1ZrU1c1a2FXTmxjMXN3WFN3Z2MyOXlkR1ZrU1c1a2FXTmxjMXN4WFYwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUZ0emIzSjBaV1JKYm1ScFkyVnpXekZkTENCemIzSjBaV1JKYm1ScFkyVnpXekpkWFN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnVzNOdmNuUmxaRWx1WkdsalpYTmJNbDBzSUhOdmNuUmxaRWx1WkdsalpYTmJNRjFkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdYU3hjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCMGNtbGhibWRzWlhOVWIxSmxiVzkyWlNBOUlGdGRPMXh5WEc0Z0lDQWdkSEpwWVc1bmJHVnpMbVp2Y2tWaFkyZ29kSEpwWVc1bmJHVWdQVDRnZTF4eVhHNGdJQ0FnSUNCMGNtbGhibWRzWlM1cGJtUnBZMlZ6TG1admNrVmhZMmdvYVc1a1pYZ2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZFhCbGNrbHVaR2xqWlhNdWFXNWpiSFZrWlhNb2FXNWtaWGdwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwY21saGJtZHNaWE5VYjFKbGJXOTJaUzV3ZFhOb0tIUnlhV0Z1WjJ4bEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnZEhKcFlXNW5iR1Z6Vkc5U1pXMXZkbVV1Wm05eVJXRmphQ2gwY21saGJtZHNaU0E5UGlCN1hISmNiaUFnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnZEhKcFlXNW5iR1Z6TG1sdVpHVjRUMllvZEhKcFlXNW5iR1VwTzF4eVhHNGdJQ0FnSUNCcFppQW9hVzVrWlhnZ0lUMDlJQzB4S1NCN1hISmNiaUFnSUNBZ0lDQWdkSEpwWVc1bmJHVnpMbk53YkdsalpTaHBibVJsZUN3Z01TazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCMGNtbGhibWRzWlhNdWJXRndLSFJ5YVdGdVoyeGxJRDArSUhSeWFXRnVaMnhsTG1sdVpHbGpaWE1wTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JHVjBaWEp0YVc1bGN5QnBaaUJoSUdkcGRtVnVJREpFSUhCdmFXNTBJR2x6SUhkcGRHaHBiaUIwYUdVZ1kybGpjblZ0WTJseVkyeGxYSEpjYmlBZ0lDb2daR1ZtYVc1bFpDQmllU0IwYUhKbFpTQXlSQ0J3YjJsdWRITXVJRlJvWlNCMGNtbGhibWRzWlNCd2IybHVkSE1nYlhWemRDQmlaU0JwYmx4eVhHNGdJQ0FxSUdOdmRXNTBaWEl0WTJ4dlkydDNhWE5sSUc5eVpHVnlJR0VnTFQ0Z1lpQXRQaUJqTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhiblZ0WW1WeVBuMGdZU0F0SUVacGNuTjBJSFJ5YVdGdVoyeGxJSEJ2YVc1MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGt1UEc1MWJXSmxjajU5SUdJZ0xTQlRaV052Ym1RZ2RISnBZVzVuYkdVZ2NHOXBiblF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhiblZ0WW1WeVBuMGdZeUF0SUZSb2FYSmtJSFJ5YVdGdVoyeGxJSEJ2YVc1MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGt1UEc1MWJXSmxjajU5SUhBZ0xTQXlSQ0J3YjJsdWRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJwYzFCdmFXNTBTVzVEYVhKamRXMURhWEpqYkdVb1lTd2dZaXdnWXl3Z2NDa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ1lYZ2dQU0JoV3pCZElDMGdjRnN3WFR0Y2NseHVJQ0FnSUdOdmJuTjBJR0Y1SUQwZ1lWc3hYU0F0SUhCYk1WMDdYSEpjYmlBZ0lDQmpiMjV6ZENCaWVDQTlJR0piTUYwZ0xTQndXekJkTzF4eVhHNGdJQ0FnWTI5dWMzUWdZbmtnUFNCaVd6RmRJQzBnY0ZzeFhUdGNjbHh1SUNBZ0lHTnZibk4wSUdONElEMGdZMXN3WFNBdElIQmJNRjA3WEhKY2JpQWdJQ0JqYjI1emRDQmplU0E5SUdOYk1WMGdMU0J3V3pGZE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQW9YSEpjYmlBZ0lDQWdJQ2hoZUNBcUlHRjRJQ3NnWVhrZ0tpQmhlU2tnS2lBb1luZ2dLaUJqZVNBdElHTjRJQ29nWW5rcElDMWNjbHh1SUNBZ0lDQWdJQ0FvWW5nZ0tpQmllQ0FySUdKNUlDb2dZbmtwSUNvZ0tHRjRJQ29nWTNrZ0xTQmplQ0FxSUdGNUtTQXJYSEpjYmlBZ0lDQWdJQ0FnS0dONElDb2dZM2dnS3lCamVTQXFJR041S1NBcUlDaGhlQ0FxSUdKNUlDMGdZbmdnS2lCaGVTa2dQbHh5WEc0Z0lDQWdJQ0F3WEhKY2JpQWdJQ0FwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JHVjBaWEp0YVc1bGN5QnBaaUJoSUdkcGRtVnVJREpFSUhCdmFXNTBJR2x6SUhkcGRHaHBiaUJoSUdkcGRtVnVJSFJ5YVdGdVoyeGxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ1lTQXRJRVpwY25OMElIUnlhV0Z1WjJ4bElIQnZhVzUwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRzUxYldKbGNqNTlJR0lnTFNCVFpXTnZibVFnZEhKcFlXNW5iR1VnY0c5cGJuUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ1l5QXRJRlJvYVhKa0lIUnlhV0Z1WjJ4bElIQnZhVzUwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRzUxYldKbGNqNTlJSEFnTFNBeVJDQndiMmx1ZEM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QnBjMUJ2YVc1MFNXNVVjbWxoYm1kc1pTaGhMQ0JpTENCakxDQndLU0I3WEhKY2JpQWdJQ0JqYjI1emRDQmtaVzV2YlNBOUlDaGlXekZkSUMwZ1kxc3hYU2tnS2lBb1lWc3dYU0F0SUdOYk1GMHBJQ3NnS0dOYk1GMGdMU0JpV3pCZEtTQXFJQ2hoV3pGZElDMGdZMXN4WFNrN1hISmNiaUFnSUNCamIyNXpkQ0JoVm1Gc0lEMWNjbHh1SUNBZ0lDQWdLQ2hpV3pGZElDMGdZMXN4WFNrZ0tpQW9jRnN3WFNBdElHTmJNRjBwSUNzZ0tHTmJNRjBnTFNCaVd6QmRLU0FxSUNod1d6RmRJQzBnWTFzeFhTa3BJQzhnWkdWdWIyMDdYSEpjYmlBZ0lDQmpiMjV6ZENCaVZtRnNJRDFjY2x4dUlDQWdJQ0FnS0Noald6RmRJQzBnWVZzeFhTa2dLaUFvY0Zzd1hTQXRJR05iTUYwcElDc2dLR0ZiTUYwZ0xTQmpXekJkS1NBcUlDaHdXekZkSUMwZ1kxc3hYU2twSUM4Z1pHVnViMjA3WEhKY2JpQWdJQ0JqYjI1emRDQmpWbUZzSUQwZ01TQXRJR0ZXWVd3Z0xTQmlWbUZzTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlBb1hISmNiaUFnSUNBZ0lHRldZV3dnUGowZ01DQW1KaUJoVm1Gc0lEdzlJREVnSmlZZ1lsWmhiQ0ErUFNBd0lDWW1JR0pXWVd3Z1BEMGdNU0FtSmlCalZtRnNJRDQ5SURBZ0ppWWdZMVpoYkNBOFBTQXhYSEpjYmlBZ0lDQXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QjBhR1VnYzI5eWRHVmtJR2x1WkdsalpYTWdiMllnWVNCbmFYWmxiaUJ6WlhRZ2IyWWdNa1FnY0c5cGJuUnpJR2x1WEhKY2JpQWdJQ29nWTI5MWJuUmxjaTFqYkc5amEzZHBjMlVnYjNKa1pYSXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4dWRXMWlaWEkrZlNCcGJtUnBZMlZ6SUMwZ1RHbHpkQ0J2WmlCcGJtUnBZMlZ6TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRUZ5Y21GNUxqeHVkVzFpWlhJK1BuMGdkbVZ5ZEdsalpYTWdMU0JNYVhOMElHOW1JREpFSUhCdmFXNTBjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVTNDhRWEp5WVhrdVBHNTFiV0psY2o0K2ZTQXRJRXhwYzNRZ2IyWWdjMjl5ZEdWa0lHbHVaR2xqWlhNdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSE52Y25SUWIybHVkSE5EUTFjb2FXNWthV05sY3l3Z2RtVnlkR2xqWlhNcElIdGNjbHh1SUNBZ0lHTnZibk4wSUdObGJuUnliMmxrSUQwZ1d6QXNJREJkTzF4eVhHNGdJQ0FnYVc1a2FXTmxjeTVtYjNKRllXTm9LR2x1WkdWNElEMCtJSHRjY2x4dUlDQWdJQ0FnWTJWdWRISnZhV1JiTUYwZ0t6MGdkbVZ5ZEdsalpYTmJhVzVrWlhoZFd6QmRPMXh5WEc0Z0lDQWdJQ0JqWlc1MGNtOXBaRnN4WFNBclBTQjJaWEowYVdObGMxdHBibVJsZUYxYk1WMDdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQWdJR05sYm5SeWIybGtXekJkSUM4OUlHbHVaR2xqWlhNdWJHVnVaM1JvTzF4eVhHNGdJQ0FnWTJWdWRISnZhV1JiTVYwZ0x6MGdhVzVrYVdObGN5NXNaVzVuZEdnN1hISmNibHh5WEc0Z0lDQWdhVzVrYVdObGN5NXpiM0owS0NoaExDQmlLU0E5UGlCN1hISmNiaUFnSUNBZ0lHTnZibk4wSUdKV1lXd2dQU0JOWVhSb0xtRjBZVzR5S0Z4eVhHNGdJQ0FnSUNBZ0lIWmxjblJwWTJWelcySmRXekZkSUMwZ1kyVnVkSEp2YVdSYk1WMHNYSEpjYmlBZ0lDQWdJQ0FnZG1WeWRHbGpaWE5iWWwxYk1GMGdMU0JqWlc1MGNtOXBaRnN3WFZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ0lDQmpiMjV6ZENCaFZtRnNJRDBnVFdGMGFDNWhkR0Z1TWloY2NseHVJQ0FnSUNBZ0lDQjJaWEowYVdObGMxdGhYVnN4WFNBdElHTmxiblJ5YjJsa1d6RmRMRnh5WEc0Z0lDQWdJQ0FnSUhabGNuUnBZMlZ6VzJGZFd6QmRJQzBnWTJWdWRISnZhV1JiTUYxY2NseHVJQ0FnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJoVm1Gc0lDMGdZbFpoYkR0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnBibVJwWTJWek8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRMkZqYkhWaGRHVnpJSFJvWlNCaGNtVmhJRzltSUdFZ2RISnBZVzVuYkdWY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVManh1ZFcxaVpYSStmU0JoSUMwZ1JtbHljM1FnZEhKcFlXNW5iR1VnY0c5cGJuUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ1lpQXRJRk5sWTI5dVpDQjBjbWxoYm1kc1pTQndiMmx1ZEM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVManh1ZFcxaVpYSStmU0JqSUMwZ1ZHaHBjbVFnZEhKcFlXNW5iR1VnY0c5cGJuUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiblZ0WW1WeWZWeHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUIwY21saGJtZHNaVUZ5WldFb1lTd2dZaXdnWXlrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0Z4eVhHNGdJQ0FnSUNBb1lWc3dYU0FxSUNoaVd6RmRJQzBnWTFzeFhTa2dLeUJpV3pCZElDb2dLR05iTVYwZ0xTQmhXekZkS1NBcklHTmJNRjBnS2lBb1lWc3hYU0F0SUdKYk1WMHBLU0FxSURBdU5WeHlYRzRnSUNBZ0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsZEhWeWJpQjBhR1VnYldGbmJtbDBkV1JsSUc5bUlHRWdaMmwyWlc0Z2RtVmpkRzl5SUdGeWNtRjVMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ2RtVmpkRzl5SUMwZ1FYSnlZWGtnWTI5dWMybHpkR2x1WnlCdlppQnVkVzFpWlhKekxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyNTFiV0psY24xY2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdaMlYwVm1WamRHOXlUV0ZuYm1sMGRXUmxLSFpsWTNSdmNpa2dlMXh5WEc0Z0lDQWdhV1lnS0NFb2RtVmpkRzl5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwS1NCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2NseHVJQ0FnSUNBZ0lDQmdRMkZ1Ym05MElHZGxkQ0J0WVdkdWFYUjFaR1VnWm05eUlIWmxZM1J2Y2lBa2UzWmxZM1J2Y24wdUlFbHVjSFYwSUcxMWMzUWdZbVVnWVc0Z1FYSnlZWGtnYm5WdFltVnljeTVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2NtVmtkV05sY2lBOUlDaGhZMk4xYlhWc1lYUnZjaXdnWTNWeWNtVnVkRlpoYkhWbEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kzVnljbVZ1ZEZaaGJIVmxJQ0U5UFNBbmJuVnRZbVZ5SnlrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNjbHh1SUNBZ0lDQWdJQ0FnSUdCRFlXNXViM1FnWjJWMElHMWhaMjVwZEhWa1pTQm1iM0lnZG1WamRHOXlJQ1I3ZG1WamRHOXlmUzRnUVd4c0lHbDBaVzF6SUdsdUlIUm9aU0JwYm5CMWRDQkJjbkpoZVNCdGRYTjBJR0psSUc1MWJXSmxjbk11WUZ4eVhHNGdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lISmxkSFZ5YmlCaFkyTjFiWFZzWVhSdmNpQXJJQ2hqZFhKeVpXNTBWbUZzZFdVZ0tpb2dNaWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjM0Z5ZENoMlpXTjBiM0l1Y21Wa2RXTmxLSEpsWkhWalpYSXNJREFwS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5YmlCMGFHVWdaRzkwSUhCeWIyUjFZM1FnWW1WMGQyVmxiaUIwZDI4Z2RtVmpkRzl5Y3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRzUxYldKbGNqNTlJSFpsWTNSdmNrRWdMU0JCY25KaGVTQmpiMjV6YVhOMGFXNW5JRzltSUc1MWJXSmxjbk11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhiblZ0WW1WeVBuMGdkbVZqZEc5eVFpQXRJRUZ5Y21GNUlHTnZibk5wYzNScGJtY2diMllnYm5WdFltVnljeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHR1ZFcxaVpYSjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdkbGRFUnZkRkJ5YjJSMVkzUW9kbVZqZEc5eVFTd2dkbVZqZEc5eVFpa2dlMXh5WEc0Z0lDQWdhV1lnS0NFb2RtVmpkRzl5UVNCcGJuTjBZVzVqWlc5bUlFRnljbUY1S1NCOGZDQWhLSFpsWTNSdmNrSWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTa2dmSHdnZG1WamRHOXlRUzVzWlc1bmRHZ2dJVDA5SUhabFkzUnZja0l1YkdWdVozUm9LU0I3WEhKY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnUTJGdWJtOTBJR2RsZENCa2IzUWdjSEp2WkhWamRDQmlaWFIzWldWdUlDUjdkbVZqZEc5eVFYMGdZVzVrSUNSN2RtVmpkRzl5UW4wdUlFbHVjSFYwY3lCdGRYTjBJR0psSUhabFkzUnZjbk1nYjJZZ2RHaGxJSE5oYldVZ2JHVnVaM1JvTG1BcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR3hsZENCeVpYTjFiSFFnUFNBd08xeHlYRzRnSUNBZ2RtVmpkRzl5UVM1bWIzSkZZV05vS0NoMllXeDFaVUVzSUdsdVpHVjRLU0E5UGlCN1hISmNiaUFnSUNBZ0lHTnZibk4wSUhaaGJIVmxRaUE5SUhabFkzUnZja0piYVc1a1pYaGRPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlVFZ0lUMDlJQ2R1ZFcxaVpYSW5JSHg4SUhSNWNHVnZaaUIyWVd4MVpVSWdJVDA5SUNkdWRXMWlaWEluS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQkRZVzV1YjNRZ1oyVjBJR1J2ZENCd2NtOWtkV04wSUdKbGRIZGxaVzRnSkh0MlpXTjBiM0pCZlNCaGJtUWdKSHQyWldOMGIzSkNmUzRnVm1WamRHOXljeUJ0ZFhOMElHOXViSGtnWTI5dWMybHpkQ0J2WmlCdWRXMWxjbWxqSUhaaGJIVmxjeTVnS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnY21WemRXeDBJQ3M5SUhaaGJIVmxRU0FxSUhaaGJIVmxRanRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCU1pYUjFjbTRnZEdobElHRnVaMnhsSUdsdUlISmhaR2xoYm5NZ1ltVjBkMlZsYmlCMlpXTjBiM0pCSUdGdVpDQjJaV04wYjNKQ0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlUzQ4Ym5WdFltVnlQbjBnZG1WamRHOXlRU0F0SUVGeWNtRjVJR052Ym5OcGMzUnBibWNnYjJZZ2JuVnRZbVZ5Y3k1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVManh1ZFcxaVpYSStmU0IyWldOMGIzSkNJQzBnUVhKeVlYa2dZMjl1YzJsemRHbHVaeUJ2WmlCdWRXMWlaWEp6TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTI1MWJXSmxjbjFjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1oyVjBRVzVuYkdWQ1pYUjNaV1Z1S0habFkzUnZja0VzSUhabFkzUnZja0lwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJRzV2Y20xaGJFRWdQU0IwYUdsekxtNXZjbTFoYkdsNlpWWmxZM1J2Y2loYkxpNHVkbVZqZEc5eVFWMHBPMXh5WEc0Z0lDQWdZMjl1YzNRZ2JtOXliV0ZzUWlBOUlIUm9hWE11Ym05eWJXRnNhWHBsVm1WamRHOXlLRnN1TGk1MlpXTjBiM0pDWFNrN1hISmNiaUFnSUNCamIyNXpkQ0JrYjNRZ1BTQjBhR2x6TG1kbGRFUnZkRkJ5YjJSMVkzUW9ibTl5YldGc1FTd2dibTl5YldGc1FpazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRTFoZEdndVlXTnZjeWgwYUdsekxtTnNZVzF3S0dSdmRDd2dMVEVzSURFcEtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRTExYkhScGNHeDVJR0VnTTNneklISnZkR0YwYVc5dUlHMWhkSEpwZUNCM2FYUm9JR0VnZG1WamRHOXlNeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBHNTFiV0psY2o1OUlIWmxZM1J2Y2pNZ0xTQkJjbkpoZVNCamIyNXphWE4wYVc1bklHOW1JRE1nYm5WdFltVnljeUJ5WlhCeVpYTmxiblJwYm1kY2NseHVJQ0FnS2lCaElHUnBjbVZqZEdsdmJpQjJaV04wYjNJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlUzQ4Ym5WdFltVnlQbjBnYldGMGNtbDRNeUF0SUVGdUlHRnljbUY1SUc5bUlEa2diblZ0WW1WeWN5QnlaWEJ5WlhObGJuUnBibWNnWVNCeWIzZGNjbHh1SUNBZ0tpQnRZV3B2Y2lCeWIzUmhkR2x2YmlCdFlYUnlhWGd1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVhKeVlYa3VQRzUxYldKbGNqNTlJQzBnUVc0Z1lYSnlZWGtnYjJZZ015QnVkVzFpWlhKeklISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2JtVjNJR1JwY21WamRHbHZibHh5WEc0Z0lDQXFJRzltSUhSb1pTQjJaV04wYjNJdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSEp2ZEdGMFpWWmxZM1J2Y2loMlpXTjBiM0l6TENCdFlYUnlhWGd6S1NCN1hISmNiaUFnSUNCcFppQW9JU2gyWldOMGIzSXpJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BYSEpjYmlBZ0lDQWdJSHg4SUhabFkzUnZjak11YkdWdVozUm9JQ0U5UFNBelhISmNiaUFnSUNBZ0lIeDhJQ0YyWldOMGIzSXpMbVYyWlhKNUtIWWdQVDRnZEhsd1pXOW1JSFlnUFQwOUlDZHVkVzFpWlhJbktTa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVOaGJtNXZkQ0J5YjNSaGRHVWdkbVZqZEc5eUlDUjdkbVZqZEc5eU0zMGdZbmtnY205MFlYUnBiMjRnYldGMGNtbDRJQ1I3YldGMGNtbDRNMzB1SUVsdWNIVjBJSFpsWTNSdmNpQnRkWE4wSUdKbElHRnVJR0Z5Y21GNUlHOW1JRE1nYm5WdFltVnljeTVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhV1lnS0NFb2JXRjBjbWw0TXlCcGJuTjBZVzVqWlc5bUlFRnljbUY1S1Z4eVhHNGdJQ0FnSUNCOGZDQnRZWFJ5YVhnekxteGxibWQwYUNBaFBUMGdPVnh5WEc0Z0lDQWdJQ0I4ZkNBaGJXRjBjbWw0TXk1bGRtVnllU2gySUQwK0lIUjVjR1Z2WmlCMklEMDlQU0FuYm5WdFltVnlKeWtwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ2NtOTBZWFJsSUhabFkzUnZjaUFrZTNabFkzUnZjak45SUdKNUlISnZkR0YwYVc5dUlHMWhkSEpwZUNBa2UyMWhkSEpwZUROOUxpQkpibkIxZENCdFlYUnlhWGd6SUcxMWMzUWdZbVVnWVc0Z1lYSnlZWGtnYjJZZ09TQnVkVzFpWlhKekxtQmNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0I0SUQwZ2JXRjBjbWw0TTFzd1hTQXFJSFpsWTNSdmNqTmJNRjFjY2x4dUlDQWdJQ0FnS3lCdFlYUnlhWGd6V3pOZElDb2dkbVZqZEc5eU0xc3hYVnh5WEc0Z0lDQWdJQ0FySUcxaGRISnBlRE5iTmwwZ0tpQjJaV04wYjNJeld6SmRPMXh5WEc0Z0lDQWdZMjl1YzNRZ2VTQTlJRzFoZEhKcGVETmJNVjBnS2lCMlpXTjBiM0l6V3pCZFhISmNiaUFnSUNBZ0lDc2diV0YwY21sNE0xczBYU0FxSUhabFkzUnZjak5iTVYxY2NseHVJQ0FnSUNBZ0t5QnRZWFJ5YVhneld6ZGRJQ29nZG1WamRHOXlNMXN5WFR0Y2NseHVJQ0FnSUdOdmJuTjBJSG9nUFNCdFlYUnlhWGd6V3pKZElDb2dkbVZqZEc5eU0xc3dYVnh5WEc0Z0lDQWdJQ0FySUcxaGRISnBlRE5iTlYwZ0tpQjJaV04wYjNJeld6RmRYSEpjYmlBZ0lDQWdJQ3NnYldGMGNtbDRNMXM0WFNBcUlIWmxZM1J2Y2pOYk1sMDdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRnQ0TENCNUxDQjZYVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUU1dmNtMWhiR2w2WlNCaElHZHBkbVZ1SUhabFkzUnZjaUJoY25KaGVTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGt1UEc1MWJXSmxjajU5SUhabFkzUnZjaUF0SUVGeWNtRjVJR052Ym5OcGMzUnBibWNnYjJZZ2JuVnRZbVZ5Y3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0QmNuSmhlUzQ4Ym5WdFltVnlQbjBnVkdobElHOXlhV2RwYm1Gc0lIWmxZM1J2Y2lCM2FYUm9JRzV2Y20xaGJHbDZaV1FnZG1Gc2RXVnpMQ0JtYjNJZ1kyaGhhVzVwYm1jdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRzV2Y20xaGJHbDZaVlpsWTNSdmNpaDJaV04wYjNJcElIdGNjbHh1SUNBZ0lHTnZibk4wSUcxaFoyNXBkSFZrWlNBOUlIUm9hWE11WjJWMFZtVmpkRzl5VFdGbmJtbDBkV1JsS0habFkzUnZjaWs3WEhKY2JseHlYRzRnSUNBZ2FXWWdLRzFoWjI1cGRIVmtaU0E5UFQwZ01Da2dlMXh5WEc0Z0lDQWdJQ0IyWldOMGIzSXVabWxzYkNnd0tWeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2RtVmpkRzl5TG1admNrVmhZMmdvS0haaGJIVmxMQ0JwYm1SbGVDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lIWmxZM1J2Y2x0cGJtUmxlRjBnUFNCMllXeDFaU0F2SUcxaFoyNXBkSFZrWlR0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFpsWTNSdmNqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRVY0ZEhKaFkzUWdkR2hsSURONE15QnliM1JoZEdsdmJpQnRZWFJ5YVhnZ1puSnZiU0JoSUdkcGRtVnVJRFI0TkNCMGNtRnVjMlp2Y20xaGRHbHZiaUJ0WVhSeWFYZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4dWRXMWlaWEkrZlNCdFlYUnlhWGcwSUMwZ1FXNGdZWEp5WVhrZ2IyWWdNVFlnYm5WdFltVnljeUJ5WlhCeVpYTmxiblJwYm1jZ1lTQnliM2RjY2x4dUlDQWdLaUJ0WVdwdmNpQjBjbUZ1YzJadmNtMWhkR2x2YmlCdFlYUnlhWGd1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVhKeVlYa3VQRzUxYldKbGNqNTlJQzBnUVc0Z1lYSnlZWGtnYjJZZ09TQnVkVzFpWlhKeklISmxjSEpsYzJWdWRHbHVaeUJoSUhKdmR5QnRZV3B2Y2x4eVhHNGdJQ0FxSUhKdmRHRjBhVzl1SUcxaGRISnBlQzVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1oyVjBVbTkwWVhScGIyNU5ZWFJ5YVhnb2JXRjBjbWw0TkNrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0VvYldGMGNtbDROQ0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLVnh5WEc0Z0lDQWdJQ0I4ZkNCdFlYUnlhWGcwTG14bGJtZDBhQ0FoUFQwZ01UWmNjbHh1SUNBZ0lDQWdmSHdnSVcxaGRISnBlRFF1WlhabGNua29kaUE5UGlCMGVYQmxiMllnZGlBOVBUMGdKMjUxYldKbGNpY3BLU0I3WEhKY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjY2x4dUlDQWdJQ0FnSUNCZ1EyRnVibTkwSUdOdmJuWmxjblFnYldGMGNtbDRJQ1I3YldGMGNtbDROSDBnZEc4Z1lTQnliM1JoZEdsdmJpQnRZWFJ5YVhndUlFbHVjSFYwSUcxaGRISnBlQ0J0ZFhOMElHSmxJR0Z1SUdGeWNtRjVJRzltSURFMklHNTFiV0psY25NdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklFVjRkSEpoWTNRZ2MyTmhiR1ZjY2x4dUlDQWdJR052Ym5OMElITmpZV3hsV0NBOUlERWdMeUFvZEdocGN5NW5aWFJXWldOMGIzSk5ZV2R1YVhSMVpHVW9iV0YwY21sNE5DNXpiR2xqWlNnd0xDQTBLU2tnZkh3Z01TazdYSEpjYmlBZ0lDQmpiMjV6ZENCelkyRnNaVmtnUFNBeElDOGdLSFJvYVhNdVoyVjBWbVZqZEc5eVRXRm5ibWwwZFdSbEtHMWhkSEpwZURRdWMyeHBZMlVvTkN3Z09Da3BJSHg4SURFcE8xeHlYRzRnSUNBZ1kyOXVjM1FnYzJOaGJHVmFJRDBnTVNBdklDaDBhR2x6TG1kbGRGWmxZM1J2Y2sxaFoyNXBkSFZrWlNodFlYUnlhWGcwTG5Oc2FXTmxLRGdzSURFeUtTa2dmSHdnTVNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlGdGNjbHh1SUNBZ0lDQWdiV0YwY21sNE5Gc3dYU0FxSUhOallXeGxXQ3dnYldGMGNtbDRORnN4WFNBcUlITmpZV3hsV0N3Z2JXRjBjbWw0TkZzeVhTQXFJSE5qWVd4bFdDeGNjbHh1SUNBZ0lDQWdiV0YwY21sNE5GczBYU0FxSUhOallXeGxXU3dnYldGMGNtbDRORnMxWFNBcUlITmpZV3hsV1N3Z2JXRjBjbWw0TkZzMlhTQXFJSE5qWVd4bFdTeGNjbHh1SUNBZ0lDQWdiV0YwY21sNE5GczRYU0FxSUhOallXeGxXaXdnYldGMGNtbDRORnM1WFNBcUlITmpZV3hsV2l3Z2JXRjBjbWw0TkZzeE1GMGdLaUJ6WTJGc1pWcGNjbHh1SUNBZ0lGMDdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdZVzRnWVhKeVlYa2dZMjl1ZEdGcGJtbHVaeUIwYUdVZ2MzQm9aWEpwWTJGc0lHTnZiM0prYVc1aGRHVnpJRzltSUhSb1pTQm5hWFpsYmlCallYSjBaWE5wWVc1Y2NseHVJQ0FnS2lCNGVYb2dZMjl2Y21ScGJtRjBaWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIZ2dMU0JRYjNOcGRHbHZiaUJoYkc5dVp5QjBhR1VnZUNCaGVHbHpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjVJQzBnVUc5emFYUnBiMjRnWVd4dmJtY2dkR2hsSUhrZ1lYaHBjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdlaUF0SUZCdmMybDBhVzl1SUdGc2IyNW5JSFJvWlNCNklHRjRhWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVhKeVlYa3VQRzUxYldKbGNqNTlJQzBnUVc0Z1lYSnlZWGtnWTI5dWMybHpkR2x1WnlCdlppQjBhSEpsWlNCdWRXMWlaWEpsY3lCM2FHVnlaU0JwYm1SbGVGeHlYRzRnSUNBcUlEQWdjbVZ3Y21WelpXNTBjeUIwYUdVZ2NtRmthWFZ6TENCcGJtUmxlQ0F4SUhKbGNISmxjMlZ1ZEhNZ2RHaGxJSFpsY25ScFkyRnNMM0J2YkdGeUlHRnVaMnhsSUdsdUlISmhaR2xoYm5OY2NseHVJQ0FnS2lCaGJtUWdhVzVrWlhnZ01pQnlaWEJ5WlhObGJuUnpJSFJvWlNCb2IzSnBlbTl1ZEdGc0wyRjZhVzExZEdoaGJDQmhibWRzWlNCcGJpQnlZV1JwWVc1ekxseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJqWVhKMFpYTnBZVzVVYjFOd2FHVnlhV05oYkNoNExDQjVMQ0I2S1NCN1hISmNiaUFnSUNCamIyNXpkQ0J5SUQwZ2RHaHBjeTVuWlhSV1pXTjBiM0pOWVdkdWFYUjFaR1VvVzNnc0lIa3NJSHBkS1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJTWlhSMWNtNGdhV1JsYm5ScGRIa2dhV1lnZEdobElIWmxZM1J2Y2lCb1lYTWdibThnYkdWdVozUm9YSEpjYmlBZ0lDQnBaaUFvY2lBOVBUMGdNQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnV3pBc0lEQXNJREJkTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCYlhISmNiaUFnSUNBZ0lISXNYSEpjYmlBZ0lDQWdJRTFoZEdndVlXTnZjeWgwYUdsekxtTnNZVzF3S0hrZ0x5QnlMQ0F0SURFc0lERXBLU3hjY2x4dUlDQWdJQ0FnVFdGMGFDNWhkR0Z1TWloNExDQjZLU3hjY2x4dUlDQWdJRjA3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSGNtRmtkV0ZzYkhrZ1kyaGhibWRsSUdFZ2RtRnNkV1VnYjJZZ1lTQnVkVzFsY21saklIQnliM0JsY25SNUlIUnZkMkZ5WkhNZ1lTQm5iMkZzSUc5MlpYSWdkR2x0WlNCMWMybHVaMXh5WEc0Z0lDQXFJR0VnWTNKcGRHbGpZV3hzZVNCa1lXMXdaV1FnYzNCeWFXNW5JR1oxYm1OMGFXOXVMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHTjFjbkpsYm5SV1lXeDFaU0F0SUZSb1pTQnpkR0Z5ZEdsdVp5QjJZV3gxWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnZEdGeVoyVjBWbUZzZFdVdElGUm9aU0JuYjJGc0lIWmhiSFZsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRzUxYldKbGNqNTlJRnQyWVd4MVpWTjBiM0psSUQwZ1d6QXNJREJkWFNBdElFRnVJRUZ5Y21GNUlHTnZibk5wYzNScGJtY2diMllnZEhkdlhISmNiaUFnSUNvZ2JuVnRZbVZ5Y3lCM2FHVnlaU0IwYUdVZ1ptbHljM1FnYm5WdFltVnlJR2h2YkdSeklIUm9aU0J5WlhOMWJIUWdkbUZzZFdVZ1lXNWtJSFJvWlNCelpXTnZibVFnYUc5c1pITmNjbHh1SUNBZ0tpQjBhR1VnZG1Wc2IyTnBkSGtnZEdoaGRDQnlaWE4xYkhSbFpDQnBiaUIwYUdGMElIWmhiSFZsTGlCVWFHVWdjMkZ0WlNCaGNuSmhlU0J6YUc5MWJHUWdZbVVnY0hKdmRtbGtaV1JjY2x4dUlDQWdLaUIzYVhSb0lHVmhZMmdnWTJGc2JDQjBieUIwYUdseklHWjFibU4wYVc5dUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCYlpHVnNkR0ZVYVcxbElEMGdNV1V0TjEwZ0xTQlVhR1VnZEdsdFpTQnphVzVqWlNCMGFHVWdiR0Z6ZENCallXeHNJSFJ2SUhSb2FYTWdablZ1WTNScGIyNWNjbHh1SUNBZ0tpQnBiaUJ6WldOdmJtUnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJjMjF2YjNSb1ZHbHRaU0E5SURBdU0xMGdMU0JVYUdVZ1lYQndjbTk0YVcxaGRHVWdZVzF2ZFc1MElHOW1JSFJwYldVZ2FXNGdjMlZqYjI1a2MxeHlYRzRnSUNBcUlHbDBJSE5vYjNWc1pDQjBZV3RsSUhSdklISmxZV05vSUhSb1pTQjBZWEpuWlhRZ2RtRnNkV1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR0WVhoVGNHVmxaQ0E5SURGbE4xMGdMU0JCSUdOc1lXMXdhVzVuSUhaaGJIVmxJR1p2Y2lCMGFHVWdiV0Y0YVcxMWJTQnpjR1ZsWkNCMGFHVmNjbHh1SUNBZ0tpQjJZV3gxWlNCallXNGdZMmhoYm1kbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1TGp4dWRXMWlaWEkrZlNBdElGUm9aU0IyWVd4MVpWTjBiM0psSUdGeWNtRjVMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCa1lXMXdWbUZzZFdVb1hISmNiaUFnSUNCamRYSnlaVzUwVm1Gc2RXVXNYSEpjYmlBZ0lDQjBZWEpuWlhSV1lXeDFaU3hjY2x4dUlDQWdJSFpoYkhWbFUzUnZjbVVnUFNCYk1Dd2dNRjBzWEhKY2JpQWdJQ0JrWld4MFlWUnBiV1VnUFNBeFpTMDNMRnh5WEc0Z0lDQWdjMjF2YjNSb1ZHbHRaU0E5SURBdU15eGNjbHh1SUNBZ0lHMWhlRk53WldWa0lEMGdNV1UzWEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0J6Ylc5dmRHaFVhVzFsSUQwZ1RXRjBhQzV0WVhnb01DNHdNREF4TENCemJXOXZkR2hVYVcxbEtUdGNjbHh1SUNBZ0lHUmxiSFJoVkdsdFpTQTlJRTFoZEdndWJXRjRLREZsTFRjc0lHUmxiSFJoVkdsdFpTazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1JtbHVaQ0IwYUdVZ1pHVnNkR0VnWW1WMGQyVmxiaUIyWVd4MVpYTWdZVzVrSUhWelpTQnBkQ0IwYnlCbGMzUnBiV0YwWlNCMGFHVWdjSEpsZG1sdmRYTWdkbUZzZFdWY2NseHVJQ0FnSUdOdmJuTjBJR05zWVcxd1ZHbHRaU0E5SUcxaGVGTndaV1ZrSUNvZ2MyMXZiM1JvVkdsdFpUdGNjbHh1SUNBZ0lHTnZibk4wSUdSbGJIUmhWbUZzZFdVZ1BTQmpkWEp5Wlc1MFZtRnNkV1VnTFNCMFlYSm5aWFJXWVd4MVpUdGNjbHh1SUNBZ0lHTnZibk4wSUdOc1lXMXdSR1ZzZEdGV1lXeDFaU0E5SUhSb2FYTXVZMnhoYlhBb1pHVnNkR0ZXWVd4MVpTd2dMV05zWVcxd1ZHbHRaU3dnWTJ4aGJYQlVhVzFsS1R0Y2NseHVJQ0FnSUdOdmJuTjBJR3hoYzNSV1lXeDFaU0E5SUdOMWNuSmxiblJXWVd4MVpTQXRJR05zWVcxd1JHVnNkR0ZXWVd4MVpUdGNjbHh1WEhKY2JpQWdJQ0F2THlCRFlXeGpkV3hoZEdVZ1pHRnRjR2x1WnlCbVlXTjBiM0p6WEhKY2JpQWdJQ0JqYjI1emRDQmtNU0E5SURJZ0x5QnpiVzl2ZEdoVWFXMWxPMXh5WEc0Z0lDQWdZMjl1YzNRZ1pESWdQU0JrTVNBcUlHUmxiSFJoVkdsdFpUdGNjbHh1SUNBZ0lHTnZibk4wSUdReklEMGdNU0F2SUNneElDc2daRElnS3lBd0xqVWdLaUJrTWlBcUtpQXlJQ3NnTUM0eU5TQXFJR1F5SUNvcUlETXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ1pEUWdQU0FvZG1Gc2RXVlRkRzl5WlZzeFhTQXJJR1F4SUNvZ1kyeGhiWEJFWld4MFlWWmhiSFZsS1NBcUlHUmxiSFJoVkdsdFpUdGNjbHh1WEhKY2JpQWdJQ0F2THlCRVlXMXdJSFJvWlNCMFlYSm5aWFFnZG1Gc2RXVWdZVzVrSUhWd1pHRjBaU0IwYUdVZ2RtVnNiMk5wZEhsY2NseHVJQ0FnSUhaaGJIVmxVM1J2Y21WYk1GMGdQU0JzWVhOMFZtRnNkV1VnS3lBb1kyeGhiWEJFWld4MFlWWmhiSFZsSUNzZ1pEUXBJQ29nWkRNN1hISmNiaUFnSUNCMllXeDFaVk4wYjNKbFd6RmRJRDBnS0haaGJIVmxVM1J2Y21WYk1WMGdMU0JrTVNBcUlHUTBLU0FxSUdRek8xeHlYRzVjY2x4dUlDQWdJQzh2SUZCeVpYWmxiblFnYjNabGNuTm9iMjkwYVc1blhISmNiaUFnSUNCcFppQW9kR0Z5WjJWMFZtRnNkV1VnTFNCamRYSnlaVzUwVm1Gc2RXVWdQaUF3SUQwOVBTQjJZV3gxWlZOMGIzSmxXekJkSUQ0Z2RHRnlaMlYwVm1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnZG1Gc2RXVlRkRzl5WlZzd1hTQTlJSFJoY21kbGRGWmhiSFZsTzF4eVhHNGdJQ0FnSUNCMllXeDFaVk4wYjNKbFd6RmRJRDBnS0haaGJIVmxVM1J2Y21WYk1GMGdMU0IwWVhKblpYUldZV3gxWlNrZ0x5QmtaV3gwWVZScGJXVTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbFUzUnZjbVU3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JOWVhSb1ZYUnBiSE03WEhKY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCQmJXRjZiMjR1WTI5dExDQkpibU11SUc5eUlHbDBjeUJoWm1acGJHbGhkR1Z6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHlYRzR2THlCVFVFUllMVXhwWTJWdWMyVXRTV1JsYm5ScFptbGxjam9nVFVsVUxUQmNjbHh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYVcxd2IzSjBMM0J5WldabGNpMWtaV1poZFd4MExXVjRjRzl5ZENBcUwxeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFbHVaR2xqWVhSbGN5QjBhR1VnZEhsd1pTQnZaaUJvYjNOMElHSjFhV3hrTGx4eVhHNGdLbHh5WEc0Z0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4eVhHNGdLaTljY2x4dVkyOXVjM1FnWlc1MklEMGdKMk52Y21Vbk8xeHlYRzVjY2x4dVpYaHdiM0owSUh0bGJuWjlPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhWdVpHVnljMk52Y21VdFpHRnVaMnhsSUNvdlhISmNibWx0Y0c5eWRDQlZkR2xzY3lCbWNtOXRJQ2N1TDFWMGFXeHpKenRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJEYkdGemN5QjBhR0YwSUdOaGJpQmxlR1ZqZFhSbElHWjFibU4wYVc5dWN5QjNhR1Z1SUd4dlkyRnNJRzFsYzNOaFoyVnpJR0Z5WlNCeVpXTmxhWFpsWkM0Z1RHOWpZV3dnYldWemMyRm5aWE5jY2x4dUlDb2dZWEpsSUhCeVpXWnBlR1ZrSUhkcGRHZ2dkR2hsSUdsdWMzUmhibU5sSjNNZ2FXUXVYSEpjYmlBcVhISmNiaUFxSUVCaGJHbGhjeUJqYjNKbEwwMWxjM05sYm1kbGNseHlYRzRnS2x4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTJOdmNtVXZUV1Z6YzJWdVoyVnlmU0JIYkc5aVlXeE5aWE56Wlc1blpYSWdMU0JCSUcxbGMzTmxibWRsY2lCMGFHRjBJR05oYmlCaVpTQjFjMlZrSUdadmNseHlYRzRnS2lCbmJHOWlZV3dnYldWemMyRm5hVzVuTGlCWGFHVnVJSFZ6YVc1bklITjBZWFJwWXlCc2FYTjBaVzRnWVc1a0lHVnRhWFFnYldWMGFHOWtjeUIwYUdWNUlHRnlaU0JsZUdWamRYUmxaRnh5WEc0Z0tpQnZiaUIwYUdseklHMWxjM05sYm1kbGNpNWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdFBZbXBsWTNSOUlFVldSVTVVVXlBdElFSjFhV3gwTFdsdUlHVjJaVzUwY3lCMGFHRjBJSFJvWlNCTlpYTnpaVzVuWlhJZ1pXMXBkSE11WEhKY2JpQXFMMXh5WEc1amJHRnpjeUJOWlhOelpXNW5aWElnZTF4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVCamIyNXpkSEoxWTNSdmNseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0aGJuazlmU0JwWkNBdElFbGtJR1p2Y2lCMGFHVWdiMkpxWldOMExpQkpaaUJ1YjI1bElHbHpJSEJ5YjNacFpHVmtJR0VnYm1WM0lHbGtJSGRwYkd4Y2NseHVJQ0FnS2lCaVpTQmpjbVZoZEdWa0xpQkpaQ0J6YUc5MWJHUWdZbVVnWVdKc1pTQjBieUJpWlNCeVpYQnlaWE5sYm5SbFpDQmhjeUJoSUhOMGNtbHVaeTVjY2x4dUlDQWdLaTljY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwWkNrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmYVdRZ1BTQnBaQ0FoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdhV1FnT2lCVmRHbHNjeTVqY21WaGRHVkpaQ2dwTzF4eVhHNGdJQ0FnZEdocGN5NWZaR2x6Y0dGMFkyaGxjaUE5SUhkcGJtUnZkenRjY2x4dUlDQWdJSFJvYVhNdVgyTmhiR3hpWVdOcmN5QTlJSHQ5TzF4eVhHNGdJQ0FnZEdocGN5NWZaWFpsYm5STWFYTjBaVzVsY25NZ1BTQjdmVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkR2hsSUhOMGNtbHVaeUJwWkNCdlppQjBhR1VnYjJKcVpXTjBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsWVdSdmJteDVYSEpjYmlBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2FXUW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJRY21WbWFYZ2dZU0J0WlhOellXZGxJSGRwZEdnZ2RHaGxJR2x1YzNSaGJtTmxJR2xrTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRaWE56WVdkbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjlqY21WaGRHVk1iMk5oYkUxbGMzTmhaMlVvYldWemMyRm5aU2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJR0FrZTNSb2FYTXVhV1I5TGlSN2JXVnpjMkZuWlgxZ08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwZFhKdUlHRWdablZ1WTNScGIyNGdkR2hoZENCM2FXeHNJR05oYkd3Z1lTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJpQmhibVFnYzNWd2NHeDVJSFJvWlNCbGRtVnVkQ2R6WEhKY2JpQWdJQ29nWkdWMFlXbHNJSEJ5YjNCbGNuUjVJR0Z6SUdGdUlHRnlaM1Z0Wlc1MExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaGJHeGlZV05yWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3Um5WdVkzUnBiMjU5WEhKY2JpQWdJQ292WEhKY2JpQWdYMk55WldGMFpVeHBjM1JsYm1WeUtHTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1pTQTlQaUI3WEhKY2JpQWdJQ0FnSUd4bGRDQjJZV3gxWlR0Y2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNobExtUmxkR0ZwYkNBaFBUMGdiblZzYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoYkhWbElEMGdaUzVrWlhSaGFXdzdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHTmhiR3hpWVdOcktIWmhiSFZsS1R0Y2NseHVJQ0FnSUgwN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRjbVZoZEdVZ1lXNGdaWFpsYm5RZ2IySnFaV04wSUdGdVpDQnpaVzVrSUdsMElIUnZJR3hwYzNSbGJtVnljeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JXVnpjMkZuWlNBdElFVjJaVzUwSUhSNWNHVWdibUZ0WlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTJGdWVUMTlJSFpoYkhWbElDMGdWbUZzZFdVZ2RHOGdjMlZ1WkNCMGJ5QnNhWE4wWlc1bGNuTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRM1Z6ZEc5dFJYWmxiblI5WEhKY2JpQWdJQ292WEhKY2JpQWdYMk55WldGMFpVVjJaVzUwS0cxbGMzTmhaMlVzSUhaaGJIVmxLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVOMWMzUnZiVVYyWlc1MEtHMWxjM05oWjJVc0lIdGtaWFJoYVd3NklIWmhiSFZsZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlNaV2RwYzNSbGNpQmhiaUJsZG1WdWRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYldWemMyRm5aU0F0SUVWMlpXNTBJSFI1Y0dVZ2JtRnRaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JzYVhOMFpXNWxjaUF0SUVFZ2JHbHpkR1Z1WlhJZ1puVnVZM1JwYjI0Z1oyVnVaWEpoZEdWa0lIVnphVzVuSUY5amNtVmhkR1ZNYVhOMFpXNWxjaTVjY2x4dUlDQWdLaTljY2x4dUlDQmZZV1JrVEdsemRHVnVaWElvYldWemMyRm5aU3dnYkdsemRHVnVaWElwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYMlJwYzNCaGRHTm9aWEl1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjY2x4dUlDQWdJQ0FnZEdocGN5NWZZM0psWVhSbFRHOWpZV3hOWlhOellXZGxLRzFsYzNOaFoyVXBMRnh5WEc0Z0lDQWdJQ0JzYVhOMFpXNWxjbHh5WEc0Z0lDQWdLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZWdWNtVm5hWE4wWlhJZ1lXNGdaWFpsYm5RdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzFsYzNOaFoyVWdMU0JGZG1WdWRDQjBlWEJsSUc1aGJXVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdiR2x6ZEdWdVpYSWdMU0JCSUd4cGMzUmxibVZ5SUdaMWJtTjBhVzl1SUdkbGJtVnlZWFJsWkNCMWMybHVaeUJmWTNKbFlYUmxUR2x6ZEdWdVpYSXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gzSmxiVzkyWlV4cGMzUmxibVZ5S0cxbGMzTmhaMlVzSUd4cGMzUmxibVZ5S1NCN1hISmNiaUFnSUNCMGFHbHpMbDlrYVhOd1lYUmphR1Z5TG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1hISmNiaUFnSUNBZ0lIUm9hWE11WDJOeVpXRjBaVXh2WTJGc1RXVnpjMkZuWlNodFpYTnpZV2RsS1N4Y2NseHVJQ0FnSUNBZ2JHbHpkR1Z1WlhKY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkZlR1ZqZFhSbElHRWdablZ1WTNScGIyNGdkMmhsYmlCaElHMWxjM05oWjJVZ2FYTWdjbVZqWldsMlpXUWdabTl5SUhSb2FYTWdiMkpxWldOMExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUcxbGMzTmhaMlVnTFNCVWFHVWdiV1Z6YzJGblpTQjBieUJzYVhOMFpXNGdabTl5TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaGJHeGlZV05ySUMwZ1JuVnVZM1JwYjI0Z2RHOGdaWGhsWTNWMFpTQnZibU5sSUhSb1pTQnRaWE56WVdkbElHbHpJSEpsWTJWcGRtVmtMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHeHBjM1JsYmxSdktHMWxjM05oWjJVc0lHTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYSEpjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNjbHh1SUNBZ0lDQWdJQ0JnUTJGdWJtOTBJR0ZrWkNCc2FYTjBaVzVsY2lCbWIzSWdKSHR0WlhOellXZGxmU0J2YmlBa2UzUm9hWE11YVdSOUxpQkRZV3hzWW1GamF5QnRkWE4wSUdKbElHRWdablZ1WTNScGIyNHVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWpZV3hzWW1GamEzTmJiV1Z6YzJGblpWMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5allXeHNZbUZqYTNOYmJXVnpjMkZuWlYwZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZaWFpsYm5STWFYTjBaVzVsY25OYmJXVnpjMkZuWlYwZ1BTQmJYVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0JzYVhOMFpXNWxjaUE5SUhSb2FYTXVYMk55WldGMFpVeHBjM1JsYm1WeUtHTmhiR3hpWVdOcktUdGNjbHh1SUNBZ0lIUm9hWE11WDJOaGJHeGlZV05yYzF0dFpYTnpZV2RsWFM1d2RYTm9LR05oYkd4aVlXTnJLVHRjY2x4dUlDQWdJSFJvYVhNdVgyVjJaVzUwVEdsemRHVnVaWEp6VzIxbGMzTmhaMlZkTG5CMWMyZ29iR2x6ZEdWdVpYSXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMkZrWkV4cGMzUmxibVZ5S0cxbGMzTmhaMlVzSUd4cGMzUmxibVZ5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGQnlaWFpsYm5RZ1lTQm1kVzVqZEdsdmJpQm1jbTl0SUdKbGFXNW5JR1Y0WldOMWRHVmtJSGRvWlc0Z1lTQnRaWE56WVdkbElHbHpJSEpsWTJWcGRtVmtJR1p2Y2lCMGFHbHpYSEpjYmlBZ0lDb2diMkpxWldOMExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUcxbGMzTmhaMlVnTFNCVWFHVWdiV1Z6YzJGblpTQjBieUJ6ZEc5d0lHeHBjM1JsYm1sdVp5Qm1iM0l1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUdOaGJHeGlZV05ySUMwZ1QzQjBhVzl1WVd3Z1kyRnNiR0poWTJzZ2RHOGdjbVZ0YjNabExpQkpaaUJ1YjI1bElHbHpJR1JsWm1sdVpXUXNYSEpjYmlBZ0lDb2djbVZ0YjNabElHRnNiQ0JqWVd4c1ltRmphM01nWm05eUlIUm9aU0J0WlhOellXZGxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBiM0JNYVhOMFpXNXBibWNvYldWemMyRm5aU3dnWTJGc2JHSmhZMnNwSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5allXeHNZbUZqYTNOYmJXVnpjMkZuWlYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dOaGJHeGlZV05ySUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnTHk4Z1NXWWdibThnWTJGc2JHSmhZMnNnZDJGeklHUmxabWx1WldRc0lHTmhiR3dnYzNSdmNFeHBjM1JsYm1sdVp5QnZiaUJoYkd3Z1kyRnNiR0poWTJ0eklHWnZjaUIwYUdVZ2JXVnpjMkZuWlZ4eVhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdkR2hwY3k1ZlkyRnNiR0poWTJ0elcyMWxjM05oWjJWZExteGxibWQwYUNBdElERTdJR2tnUGlBdE1Uc2dhUzB0S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHOXdUR2x6ZEdWdWFXNW5LRzFsYzNOaFoyVXNJSFJvYVhNdVgyTmhiR3hpWVdOcmMxdHRaWE56WVdkbFhWdHBYU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCSlppQmhJR05oYkd4aVlXTnJJSGRoY3lCa1pXWnBibVZrTENCdFlXdGxJSE4xY21VZ2FYUW5jeUJoSUd4cGMzUmxibVZ5WEhKY2JpQWdJQ0JqYjI1emRDQnBibVJsZUNBOUlIUm9hWE11WDJOaGJHeGlZV05yYzF0dFpYTnpZV2RsWFM1cGJtUmxlRTltS0dOaGJHeGlZV05yS1R0Y2NseHVJQ0FnSUdsbUlDaHBibVJsZUNBOVBUMGdMVEVwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTnZibk4wSUd4cGMzUmxibVZ5SUQwZ2RHaHBjeTVmWlhabGJuUk1hWE4wWlc1bGNuTmJiV1Z6YzJGblpWMWJhVzVrWlhoZE8xeHlYRzRnSUNBZ2RHaHBjeTVmY21WdGIzWmxUR2x6ZEdWdVpYSW9iV1Z6YzJGblpTd2diR2x6ZEdWdVpYSXBPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMk5oYkd4aVlXTnJjMXR0WlhOellXZGxYUzV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPMXh5WEc0Z0lDQWdkR2hwY3k1ZlpYWmxiblJNYVhOMFpXNWxjbk5iYldWemMyRm5aVjB1YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjY2x4dVhISmNiaUFnSUNCcFppQW9kR2hwY3k1ZlkyRnNiR0poWTJ0elcyMWxjM05oWjJWZExteGxibWQwYUNBOVBUMGdNQ2tnZTF4eVhHNGdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZZMkZzYkdKaFkydHpXMjFsYzNOaFoyVmRPMXh5WEc0Z0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZlpYWmxiblJNYVhOMFpXNWxjbk5iYldWemMyRm5aVjA3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRVpTMXlaV2RwYzNSbGNpQmpZV3hzWW1GamF5aHpLU0JtY205dElHSmxhVzVuSUdWNFpXTjFkR1ZrSUhkb1pXNGdiV1Z6YzJGblpYTWdiV0YwWTJocGJtY2dkR2hsSUdkcGRtVnVYSEpjYmlBZ0lDb2djbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJR0Z5WlNCeVpXTmxhWFpsWkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WblpYaHdmU0J5WldkbGVIQWdMU0J5WldkbGVIQWdMU0JVYUdVZ2NtVm5kV3hoY2lCbGVIQnlaWE56YVc5dUlIUnZJR1pwYkhSbGNpQnRaWE56WVdkbGN5QjNhWFJvTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCallXeHNZbUZqYXlBdElFOXdkR2x2Ym1Gc0lHTmhiR3hpWVdOcklIUnZJSEpsYlc5MlpTNGdTV1lnYm05dVpTQnBjeUJrWldacGJtVmtMRnh5WEc0Z0lDQXFJSEpsYlc5MlpTQmhiR3dnWTJGc2JHSmhZMnR6SUdadmNpQnRaWE56WVdkbGN5QnRZWFJqYUdsdVp5QjBhR1VnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1TGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wYjNCTWFYTjBaVzVwYm1kQ2VWSmxaMlY0Y0NoeVpXZGxlSEFzSUdOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNCamIyNXpkQ0J0WlhOellXZGxjeUE5SUU5aWFtVmpkQzVyWlhsektIUm9hWE11WDJOaGJHeGlZV05yY3lrdVptbHNkR1Z5S0cxbGMzTmhaMlVnUFQ0Z2NtVm5aWGh3TG5SbGMzUW9iV1Z6YzJGblpTa3BPMXh5WEc1Y2NseHVJQ0FnSUcxbGMzTmhaMlZ6TG1admNrVmhZMmdvYldWemMyRm5aU0E5UGlCN1hISmNiaUFnSUNBZ0lIUm9hWE11YzNSdmNFeHBjM1JsYm1sdVp5aHRaWE56WVdkbExDQmpZV3hzWW1GamF5azdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZCeVpYWmxiblFnWVc1NUlHWjFibU4wYVc5dWN5Qm1jbTl0SUdKbGFXNW5JR1Y0WldOMWRHVmtJSGRvWlc0Z1lXNTVJRzFsYzNOaFoyVWdhWE1nY21WalpXbDJaV1FnWm05eVhISmNiaUFnSUNvZ2RHaHBjeUJ2WW1wbFkzUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUnZjRXhwYzNSbGJtbHVaMVJ2UVd4c0tDa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2JXVnpjMkZuWlhNZ1BTQlBZbXBsWTNRdWEyVjVjeWgwYUdsekxsOWpZV3hzWW1GamEzTXBPMXh5WEc1Y2NseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQnRaWE56WVdkbGN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0Z0xURTdJR2t0TFNrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5OMGIzQk1hWE4wWlc1cGJtY29iV1Z6YzJGblpYTmJhVjBwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1UyVnVaQ0JoSUcxbGMzTmhaMlVzSUdOaGRYTnBibWNnYkdsemRHVnVaWElnWm5WdVkzUnBiMjV6SUdadmNpQjBhR1VnYldWemMyRm5aU0J2YmlCMGFHbHpJRzlpYW1WamRGeHlYRzRnSUNBcUlIUnZJR0psSUdWNFpXTjFkR1ZrTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzFsYzNOaFoyVWdMU0JVYUdVZ2JXVnpjMkZuWlNCMGJ5QmxiV2wwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3WVc1NVBYMGdkbUZzZFdVZ0xTQlBjSFJwYjI1aGJDQmhjbWQxYldWdWRDQjBieUJ3WVhOeklIUnZJR3hwYzNSbGJtVnlJR05oYkd4aVlXTnJjeTVjY2x4dUlDQWdLaTljY2x4dUlDQmxiV2wwS0cxbGMzTmhaMlVzSUhaaGJIVmxLU0I3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmWTJGc2JHSmhZMnR6VzIxbGMzTmhaMlZkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUcxbGMzTmhaMlVnUFNCMGFHbHpMbDlqY21WaGRHVk1iMk5oYkUxbGMzTmhaMlVvYldWemMyRm5aU2s3WEhKY2JpQWdJQ0JqYjI1emRDQmxkbVZ1ZENBOUlIUm9hWE11WDJOeVpXRjBaVVYyWlc1MEtHMWxjM05oWjJVc0lIWmhiSFZsS1R0Y2NseHVJQ0FnSUhSb2FYTXVYMlJwYzNCaGRHTm9aWEl1WkdsemNHRjBZMmhGZG1WdWRDaGxkbVZ1ZENrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkZlR1ZqZFhSbElHRWdablZ1WTNScGIyNGdkMmhsYmlCaElHMWxjM05oWjJVZ2FYTWdjbVZqWldsMlpXUWdabTl5SUhSb1pTQm5iRzlpWVd3Z1RXVnpjMlZ1WjJWeUlHbHVjM1JoYm1ObExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FITjBZWFJwWTF4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzFsYzNOaFoyVWdMU0JVYUdVZ2JXVnpjMkZuWlNCMGJ5QnNhWE4wWlc0Z1ptOXlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05oYkd4aVlXTnJJQzBnUm5WdVkzUnBiMjRnZEc4Z1pYaGxZM1YwWlNCdmJtTmxJSFJvWlNCdFpYTnpZV2RsSUdseklISmxZMlZwZG1Wa0xseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJzYVhOMFpXNVVieWh0WlhOellXZGxMQ0JqWVd4c1ltRmpheXdnYldWemMyVnVaMlZ5S1NCN1hISmNiaUFnSUNCMGFHbHpMa2RzYjJKaGJFMWxjM05sYm1kbGNpNXNhWE4wWlc1VWJ5aHRaWE56WVdkbExDQmpZV3hzWW1GamF5d2diV1Z6YzJWdVoyVnlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZCeVpYWmxiblFnWVNCbWRXNWpkR2x2YmlCbWNtOXRJR0psYVc1bklHVjRaV04xZEdWa0lIZG9aVzRnWVNCdFpYTnpZV2RsSUdseklISmxZMlZwZG1Wa0lHWnZjaUIwYUdWY2NseHVJQ0FnS2lCbmJHOWlZV3dnVFdWemMyVnVaMlZ5SUdsdWMzUmhibU5sTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhOMFlYUnBZMXh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHMWxjM05oWjJVZ0xTQlVhR1VnYldWemMyRm5aU0IwYnlCemRHOXdJR3hwYzNSbGJtbHVaeUJtYjNJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHTmhiR3hpWVdOcklDMGdUM0IwYVc5dVlXd2dZMkZzYkdKaFkyc2dkRzhnY21WdGIzWmxMaUJKWmlCdWIyNWxJR2x6SUdSbFptbHVaV1FzWEhKY2JpQWdJQ29nY21WdGIzWmxJR0ZzYkNCallXeHNZbUZqYTNNZ1ptOXlJSFJvWlNCdFpYTnpZV2RsTGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QnpkRzl3VEdsemRHVnVhVzVuS0cxbGMzTmhaMlVzSUdOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNCMGFHbHpMa2RzYjJKaGJFMWxjM05sYm1kbGNpNXpkRzl3VEdsemRHVnVhVzVuS0cxbGMzTmhaMlVzSUdOaGJHeGlZV05yS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFUmxMWEpsWjJsemRHVnlJR05oYkd4aVlXTnJLSE1wSUdaeWIyMGdZbVZwYm1jZ1pYaGxZM1YwWldRZ2IyNGdkR2hsSUdkc2IySmhiQ0J0WlhOelpXNW5aWEp5SUdsdWMzUmhibU5sWEhKY2JpQWdJQ29nZDJobGJpQnRaWE56WVdkbGN5QnRZWFJqYUdsdVp5QjBhR1VnWjJsMlpXNGdjbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJR0Z5WlNCeVpXTmxhWFpsWkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WblpYaHdmU0J5WldkbGVIQWdMU0J5WldkbGVIQWdMU0JVYUdVZ2NtVm5kV3hoY2lCbGVIQnlaWE56YVc5dUlIUnZJR1pwYkhSbGNpQnRaWE56WVdkbGN5QjNhWFJvTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCallXeHNZbUZqYXlBdElFOXdkR2x2Ym1Gc0lHTmhiR3hpWVdOcklIUnZJSEpsYlc5MlpTNGdTV1lnYm05dVpTQnBjeUJrWldacGJtVmtMRnh5WEc0Z0lDQXFJSEpsYlc5MlpTQmhiR3dnWTJGc2JHSmhZMnR6SUdadmNpQnRaWE56WVdkbGN5QnRZWFJqYUdsdVp5QjBhR1VnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1TGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QnpkRzl3VEdsemRHVnVhVzVuUW5sU1pXZGxlSEFvY21WblpYaHdMQ0JqWVd4c1ltRmpheWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiV1Z6YzJGblpYTWdQU0JQWW1wbFkzUXVhMlY1Y3loMGFHbHpMa2RzYjJKaGJFMWxjM05sYm1kbGNpNWZZMkZzYkdKaFkydHpLUzVtYVd4MFpYSW9YSEpjYmlBZ0lDQWdJRzFsYzNOaFoyVWdQVDRnY21WblpYaHdMblJsYzNRb2JXVnpjMkZuWlNsY2NseHVJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdiV1Z6YzJGblpYTXVabTl5UldGamFDaHRaWE56WVdkbElEMCtJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NXpkRzl3VEdsemRHVnVhVzVuS0cxbGMzTmhaMlVzSUdOaGJHeGlZV05yS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVSEpsZG1WdWRDQmhibmtnWm5WdVkzUnBiMjV6SUdaeWIyMGdZbVZwYm1jZ1pYaGxZM1YwWldRZ2QyaGxiaUJoYm5rZ2JXVnpjMkZuWlNCcGN5QnlaV05sYVhabFpDQm1iM0pjY2x4dUlDQWdLaUIwYUdVZ1oyeHZZbUZzSUUxbGMzTmxibWRsY2lCcGJuTjBZVzVqWlM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCemRHRjBhV05jY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ2MzUnZjRXhwYzNSbGJtbHVaMVJ2UVd4c0tDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1SGJHOWlZV3hOWlhOelpXNW5aWEl1YzNSdmNFeHBjM1JsYm1sdVoxUnZRV3hzS0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRaVzVrSUdFZ2JXVnpjMkZuWlN3Z1kyRjFjMmx1WnlCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NZ1ptOXlJSFJvWlNCdFpYTnpZV2RsSUc5dUlIUm9aU0JuYkc5aVlXd2dUV1Z6YzJWdVoyVnlYSEpjYmlBZ0lDb2dhVzV6ZEdGdVkyVWdkRzhnWW1VZ1pYaGxZM1YwWldRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWMzUmhkR2xqWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV1Z6YzJGblpTQXRJRlJvWlNCdFpYTnpZV2RsSUhSdklHVnRhWFF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRoYm5rOWZTQjJZV3gxWlNBdElFOXdkR2x2Ym1Gc0lHRnlaM1Z0Wlc1MElIUnZJSEJoYzNNZ2RHOGdiR2x6ZEdWdVpYSWdZMkZzYkdKaFkydHpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCbGJXbDBLRzFsYzNOaFoyVXNJSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQjBhR2x6TGtkc2IySmhiRTFsYzNObGJtZGxjaTVsYldsMEtHMWxjM05oWjJVc0lIWmhiSFZsS1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0UxbGMzTmxibWRsY2l3Z2UxeHlYRzRnSUVkc2IySmhiRTFsYzNObGJtZGxjam9nZTF4eVhHNGdJQ0FnZG1Gc2RXVTZJRzVsZHlCTlpYTnpaVzVuWlhJb0tTeGNjbHh1SUNBZ0lIZHlhWFJoWW14bE9pQm1ZV3h6WlN4Y2NseHVJQ0I5TEZ4eVhHNGdJRVZXUlU1VVV6b2dlMXh5WEc0Z0lDQWdkbUZzZFdVNklIdDlMRnh5WEc0Z0lDQWdkM0pwZEdGaWJHVTZJR1poYkhObExGeHlYRzRnSUgwc1hISmNibjBwTzF4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdUV1Z6YzJWdVoyVnlPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNibWx0Y0c5eWRDQk5aWE56Wlc1blpYSWdabkp2YlNBblkyOXlaUzlOWlhOelpXNW5aWEluTzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVKaGMyVWdZMnhoYzNNZ1ptOXlJR0ZzYkNCb2IzTjBJR1psWVhSMWNtVnpMaUJMWldWd2N5QmhJSEpsWm1WeVpXNWpaU0IwYnlCMGFHVWdhRzl6ZENCdlltcGxZM1FnYldGdVlXZHBibWRjY2x4dUlDb2dkR2hsSUdabFlYUjFjbVV1WEhKY2JpQXFYSEpjYmlBcUlFQmhZbk4wY21GamRGeHlYRzRnS2x4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTA5aWFtVmpkSDBnUlZaRlRsUlRJQzBnUW5WcGJIUXRhVzRnYldWemMyRm5aWE1nZEdoaGRDQjBhR1VnWm1WaGRIVnlaU0JsYldsMGN5NGdWMmhsYmlCMGFHVmNjbHh1SUNvZ1ptVmhkSFZ5WlNCcGN5QmhaR1JsWkNCMGJ5QmhJSHRBYkdsdWF5QmpiM0psTDBodmMzUlBZbXBsWTNSOUxDQmxkbVZ1ZENCdVlXMWxjeUIzYVd4c0lHSmxJSEJ5WldacGVHVmtJR0o1SUhSb1pWeHlYRzRnS2lCdVlXMWxJRzltSUhSb1pTQm1aV0YwZFhKbElHTnNZWE56SUNzZ0p5NG5MbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdXMFZXUlU1VVV5NTFjR1JoZEdVOWIyNVZjR1JoZEdWZElDMGdUV1Z6YzJGblpTQjBhR0YwSUdseklHVnRhWFIwWldRZ1lXWjBaWEpjY2x4dUlDb2daV0ZqYUNCallXeHNJSFJ2SUZ0MWNHUmhkR1ZkZTBCc2FXNXJJRUZpYzNSeVlXTjBTRzl6ZEVabFlYUjFjbVVqZFhCa1lYUmxmUzVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRQWW1wbFkzUjlJRk5GVWxaSlEwVlRJQzBnUVc1NUlFRlhVeUJ6WlhKMmFXTmxjeUIwYUdGMElHRnlaU0J1WldObGMzTmhjbmtnWm05eUlIUm9aVnh5WEc0Z0tpQm1aV0YwZFhKbElIUnZJR1oxYm1OMGFXOXVMbHh5WEc0Z0tpOWNjbHh1WTJ4aGMzTWdRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaU0I3WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUdOdmJuTjBjblZqZEc5eVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTJOdmNtVXZTRzl6ZEU5aWFtVmpkSDBnYUc5emRDQXRJRlJvWlNCSWIzTjBUMkpxWldOMElHMWhibUZuYVc1bklIUm9aU0JtWldGMGRYSmxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLR2h2YzNRcElIdGNjbHh1SUNBZ0lIUm9hWE11WDJodmMzUWdQU0JvYjNOME8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRV1JrY3lCaElHNWhiV1Z6Y0dGalpTQjBieUIwYUdVZ2FHOXpkQ0IzYVhSb0lIUm9aU0J1WVcxbElHOW1JSFJvWlNCbVpXRjBkWEpsSUhSdklHTnZiblJoYVc0Z2NISnZjR1Z5ZEdsbGMxeHlYRzRnSUNBcUlHRnVaQ0J0WlhSb2IyUnpJR1p5YjIwZ2RHaGxJR1psWVhSMWNtVWdkR2hoZENCMWMyVnljeUJ2WmlCMGFHVWdhRzl6ZENCdVpXVmtJR0ZqWTJWemN5QjBieTVjY2x4dUlDQWdLaTljY2x4dUlDQnBibk4wWVd4c1FYQnBLQ2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdaWFpsYm5SeklEMGdlMzA3WEhKY2JpQWdJQ0JqYjI1emRDQmhjR2tnUFNCN1JWWkZUbFJUT2lCbGRtVnVkSE45TzF4eVhHNWNjbHh1SUNBZ0lDOHZJRUZrWkNCMGFHVWdZMnhoYzNNZ2JtRnRaU0IwYnlCbGRtVnVkQ0J1WVcxbGMxeHlYRzRnSUNBZ1QySnFaV04wTG1WdWRISnBaWE1vZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVGVmtWT1ZGTXBMbVp2Y2tWaFkyZ29LRnR1WVcxbExDQjJZV3gxWlYwcElEMCtJSHRjY2x4dUlDQWdJQ0FnWlhabGJuUnpXMjVoYldWZElEMGdZQ1I3ZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbGZTNGtlM1poYkhWbGZXQTdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDlvYjNOMFczUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaVjBnUFNCaGNHazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR0Z3YVR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFZGxkSE1nZEdobElHaHZjM1FnZEdoaGRDQnRZVzVoWjJWeklIUm9aU0JtWldGMGRYSmxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsWVdSdmJteDVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJR2h2YzNRb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUc5emREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ2RHaGxJR1Z1WjJsdVpTQnZkMjVsY2lCdlltcGxZM1FnYjJZZ2RHaGxJR2h2YzNRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVmhaRzl1YkhsY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2IzZHVaWElvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZhRzl6ZEM1dmQyNWxjanRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUV4cGMzUmxiaUIwYnlCaElHWmxZWFIxY21VZ2JXVnpjMkZuWlNCbWNtOXRJSFJvWlNCb2IzTjBJRzlpYW1WamRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdFpYTnpZV2RsSUMwZ1RXVnpjMkZuWlNCMGJ5QnNhWE4wWlc0Z1ptOXlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05oYkd4aVlXTnJJQzBnVkdobElHTmhiR3hpWVdOcklIUnZJR1Y0WldOMWRHVWdkMmhsYmlCMGFHVWdiV1Z6YzJGblpTQnBjeUJ5WldObGFYWmxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQnNhWE4wWlc1VWJ5aHRaWE56WVdkbExDQmpZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmFHOXpkQzVzYVhOMFpXNVVieWh0WlhOellXZGxMQ0JqWVd4c1ltRmpheWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCTWFYTjBaVzRnZEc4Z1lTQm1aV0YwZFhKbElHMWxjM05oWjJVZ1puSnZiU0IwYUdVZ1oyeHZZbUZzSUcxbGMzTmxibWRsY2k0Z1JtVmhkSFZ5WlNCdFpYTnpZV2RsY3lCM2FXeHNYSEpjYmlBZ0lDb2dZbVVnY0hKbFptbDRaV1FnZDJsMGFDQjBhR1VnWTJ4aGMzTWdibUZ0WlNCdlppQjBhR1VnWm1WaGRIVnlaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRaWE56WVdkbElDMGdUV1Z6YzJGblpTQjBieUJzYVhOMFpXNGdabTl5TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaGJHeGlZV05ySUMwZ1ZHaGxJR05oYkd4aVlXTnJJSFJ2SUdWNFpXTjFkR1VnZDJobGJpQjBhR1VnYldWemMyRm5aU0JwY3lCeVpXTmxhWFpsWkM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdiR2x6ZEdWdVZHOG9iV1Z6YzJGblpTd2dZMkZzYkdKaFkyc3BJSHRjY2x4dUlDQWdJRzFsYzNOaFoyVWdQU0JnSkh0MGFHbHpMbTVoYldWOUxpUjdiV1Z6YzJGblpYMWdPMXh5WEc0Z0lDQWdUV1Z6YzJWdVoyVnlMbXhwYzNSbGJsUnZLRzFsYzNOaFoyVXNJR05oYkd4aVlXTnJLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZOMGIzQWdiR2x6ZEdWdWFXNW5JSFJ2SUdFZ2JXVnpjMkZuWlNCbWNtOXRJSFJvWlNCb2IzTjBJRzlpYW1WamRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdFpYTnpZV2RsSUMwZ1RXVnpjMkZuWlNCMGJ5QnpkRzl3SUd4cGMzUmxibWx1WnlCbWIzSXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJR05oYkd4aVlXTnJJQzBnVDNCMGFXOXVZV3dnWTJGc2JHSmhZMnNnZEc4Z2NtVnRiM1psTGlCSlppQnViMjVsSUdseklHUmxabWx1WldRc1hISmNiaUFnSUNvZ2NtVnRiM1psSUdGc2JDQmpZV3hzWW1GamEzTWdabTl5SUhSb1pTQnRaWE56WVdkbExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMGIzQk1hWE4wWlc1cGJtY29iV1Z6YzJGblpTd2dZMkZzYkdKaFkyc3BJSHRjY2x4dUlDQWdJSFJvYVhNdVgyaHZjM1F1YzNSdmNFeHBjM1JsYm1sdVp5aHRaWE56WVdkbExDQmpZV3hzWW1GamF5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUZEc5d0lHeHBjM1JsYm1sdVp5QjBieUJoSUcxbGMzTmhaMlVnWm5KdmJTQjBhR1VnWjJ4dlltRnNJRzFsYzNObGJtZGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnRaWE56WVdkbElDMGdUV1Z6YzJGblpTQjBieUJ6ZEc5d0lHeHBjM1JsYm1sdVp5Qm1iM0l1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUdOaGJHeGlZV05ySUMwZ1QzQjBhVzl1WVd3Z1kyRnNiR0poWTJzZ2RHOGdjbVZ0YjNabExpQkpaaUJ1YjI1bElHbHpJR1JsWm1sdVpXUXNYSEpjYmlBZ0lDb2djbVZ0YjNabElHRnNiQ0JqWVd4c1ltRmphM01nWm05eUlIUm9aU0J0WlhOellXZGxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCemRHOXdUR2x6ZEdWdWFXNW5LRzFsYzNOaFoyVXNJR05oYkd4aVlXTnJLU0I3WEhKY2JpQWdJQ0J0WlhOellXZGxJRDBnWUNSN2RHaHBjeTV1WVcxbGZTNGtlMjFsYzNOaFoyVjlZRHRjY2x4dUlDQWdJRTFsYzNObGJtZGxjaTV6ZEc5d1RHbHpkR1Z1YVc1bktHMWxjM05oWjJVc0lHTmhiR3hpWVdOcktUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk4wYjNBZ2JHbHpkR1Z1YVc1bklIUnZJR0VnYldWemMyRm5aU0J0WVhSamFHbHVaeUIwYUdVZ1oybDJaVzRnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1SUdaeWIyMGdkR2hsWEhKY2JpQWdJQ29nYUc5emRDQnZZbXBsWTNRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFoyVjRjSDBnY21WblpYaHdJQzBnVkdobElISmxaM1ZzWVhJZ1pYaHdjbVZ6YzJsdmJpQjBieUJ6ZEc5d0lHeHBjM1JsYm1sdVp5Qm1iM0l1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUdOaGJHeGlZV05ySUMwZ1QzQjBhVzl1WVd3Z1kyRnNiR0poWTJzZ2RHOGdjbVZ0YjNabExpQkpaaUJ1YjI1bElHbHpJR1JsWm1sdVpXUXNYSEpjYmlBZ0lDb2djbVZ0YjNabElHRnNiQ0JqWVd4c1ltRmphM01nWm05eUlIUm9aU0J0WlhOellXZGxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBiM0JNYVhOMFpXNXBibWRDZVZKbFoyVjRjQ2h5WldkbGVIQXNJR05oYkd4aVlXTnJLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOW9iM04wTG5OMGIzQk1hWE4wWlc1cGJtZENlVkpsWjJWNGNDaHlaV2RsZUhBc0lHTmhiR3hpWVdOcktUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk4wYjNBZ2JHbHpkR1Z1YVc1bklIUnZJR0VnYldWemMyRm5aU0J0WVhSamFHbHVaeUIwYUdVZ1oybDJaVzRnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1SUdaeWIyMGdkR2hsWEhKY2JpQWdJQ29nWjJ4dlltRnNJRzFsYzNObGJtZGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdVbVZuWlhod2ZTQnlaV2RsZUhBZ0xTQlVhR1VnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1SUhSdklITjBiM0FnYkdsemRHVnVhVzVuSUdadmNpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdZMkZzYkdKaFkyc2dMU0JQY0hScGIyNWhiQ0JqWVd4c1ltRmpheUIwYnlCeVpXMXZkbVV1SUVsbUlHNXZibVVnYVhNZ1pHVm1hVzVsWkN4Y2NseHVJQ0FnS2lCeVpXMXZkbVVnWVd4c0lHTmhiR3hpWVdOcmN5Qm1iM0lnZEdobElHMWxjM05oWjJVdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSE4wYjNCTWFYTjBaVzVwYm1kQ2VWSmxaMlY0Y0NoeVpXZGxlSEFzSUdOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNCeVpXZGxlSEFnUFNCdVpYY2dVbVZuUlhod0tHQmVKSHQwYUdsekxtNWhiV1Y5TGlSN2NtVm5aWGh3TG5OdmRYSmpaUzV5WlhCc1lXTmxLQzljWEY0dkxDQW5KeWw5WUNrN1hISmNiaUFnSUNCTlpYTnpaVzVuWlhJdWMzUnZjRXhwYzNSbGJtbHVaMEo1VW1WblpYaHdLSEpsWjJWNGNDd2dZMkZzYkdKaFkyc3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTNSdmNDQnNhWE4wWlc1cGJtY2dkRzhnWVd4c0lHMWxjM05oWjJWekxseHlYRzRnSUNBcUwxeHlYRzRnSUhOMGIzQk1hWE4wWlc1cGJtZFViMEZzYkNncElIdGNjbHh1SUNBZ0lIUm9hWE11WDJodmMzUXVjM1J2Y0V4cGMzUmxibWx1WjFSdlFXeHNLQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVGRHOXdJR3hwYzNSbGJtbHVaeUIwYnlCaGJHd2dabVZoZEhWeVpTQnRaWE56WVdkbGN5NWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYzNSdmNFeHBjM1JsYm1sdVoxUnZRV3hzS0NrZ2UxeHlYRzRnSUNBZ1RXVnpjMlZ1WjJWeUxuTjBiM0JNYVhOMFpXNXBibWRDZVZKbFoyVjRjQ2h1WlhjZ1VtVm5SWGh3S0dCZUpIdDBhR2x6TG01aGJXVjlMbUFwS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFVnRhWFFnWm1WaGRIVnlaU0J0WlhOellXZGxjeUJtY205dElIUm9aU0JvYjNOMExpQkdaV0YwZFhKbElHMWxjM05oWjJWeklIZHBiR3dnWW1VZ2NISmxabWw0WldRZ2QybDBhRnh5WEc0Z0lDQXFJSFJvWlNCamJHRnpjeUJ1WVcxbElHOW1JSFJvWlNCbVpXRjBkWEpsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzFsYzNOaFoyVWdMU0JVYUdVZ2JXVnpjMkZuWlNCMGJ5QmxiV2wwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3WVc1NVBYMGdkbUZzZFdVZ0xTQlBjSFJwYjI1aGJDQndZWEpoYldWMFpYSWdkRzhnY0dGemN5QjBieUJzYVhOMFpXNWxjaUJqWVd4c1ltRmphM011WEhKY2JpQWdJQ292WEhKY2JpQWdaVzFwZENodFpYTnpZV2RsTENCMllXeDFaU2tnZTF4eVhHNGdJQ0FnYldWemMyRm5aU0E5SUdBa2UzUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaWDB1Skh0dFpYTnpZV2RsZldBN1hISmNiaUFnSUNCMGFHbHpMbDlvYjNOMExtVnRhWFFvYldWemMyRm5aU3dnZG1Gc2RXVXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUlcxcGRDQm1aV0YwZFhKbElHMWxjM05oWjJWeklHWnliMjBnZEdobElHZHNiMkpoYkNCdFpYTnpaVzVuWlhJdUlFWmxZWFIxY21VZ2JXVnpjMkZuWlhNZ2QybHNiQ0JpWlNCd2NtVm1hWGhsWkZ4eVhHNGdJQ0FxSUhkcGRHZ2dkR2hsSUdOc1lYTnpJRzVoYldVZ2IyWWdkR2hsSUdabFlYUjFjbVV1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiV1Z6YzJGblpTQXRJRlJvWlNCdFpYTnpZV2RsSUhSdklHVnRhWFF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRoYm5rOWZTQjJZV3gxWlNBdElFOXdkR2x2Ym1Gc0lIQmhjbUZ0WlhSbGNpQjBieUJ3WVhOeklIUnZJR3hwYzNSbGJtVnlJR05oYkd4aVlXTnJjeTVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1pXMXBkQ2h0WlhOellXZGxMQ0IyWVd4MVpTa2dlMXh5WEc0Z0lDQWdiV1Z6YzJGblpTQTlJR0FrZTNSb2FYTXVibUZ0WlgwdUpIdHRaWE56WVdkbGZXQTdYSEpjYmlBZ0lDQk5aWE56Wlc1blpYSXVaVzFwZENodFpYTnpZV2RsTENCMllXeDFaU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsY3lCbFlXTm9JSFJwYldVZ2RHaGxJR2h2YzNRZ2FYTWdkWEJrWVhSbFpDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCa1pXeDBZVlJwYldVZ0xTQkJiVzkxYm5RZ2IyWWdkR2x0WlNCemFXNWpaU0IwYUdVZ2JHRnpkQ0JvYjNOMElIVndaR0YwWlNCM1lYTmNjbHh1SUNBZ0tpQmpZV3hzWldRdVhISmNiaUFnSUNvdlhISmNiaUFnZFhCa1lYUmxLR1JsYkhSaFZHbHRaU2tnZTF4eVhHNGdJQ0FnZEdocGN5NWxiV2wwS0hSb2FYTXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUlRMblZ3WkdGMFpTd2daR1ZzZEdGVWFXMWxLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOc1pXRnVJSFZ3SUc5dVkyVWdkR2hsSUdabFlYUjFjbVVnYVhNZ2JtOGdiRzl1WjJWeUlHbHVJSFZ6WlM0Z1VtVnRiM1psSUhSb1pTQm1aV0YwZFhKbElHNWhiV1Z6Y0dGalpWeHlYRzRnSUNBcUlHWnliMjBnZEdobElHaHZjM1FnWVc1a0lISmxiVzkyWlNCeVpXWmxjbVZ1WTJVZ2RHOGdkR2hsSUdodmMzUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1pHbHpZMkZ5WkNncElIdGNjbHh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLSFJvYVhNdVgyaHZjM1JiZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbFhTa3VabTl5UldGamFDaHVZVzFsSUQwK0lIdGNjbHh1SUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WDJodmMzUmJkR2hwY3k1amIyNXpkSEoxWTNSdmNpNXVZVzFsWFZ0dVlXMWxYVHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbDlvYjNOMFczUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaVjA3WEhKY2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmFHOXpkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVGd2NHeHBaWE1nWVNCelpYRjFaVzVqWlNCdlppQnRhWGhwYmlCamJHRnpjeUJtWVdOMGIzSjVJR1oxYm1OMGFXOXVjeUIwYnlCMGFHbHpJR05zWVhOeklHRnVaRnh5WEc0Z0lDQXFJSEpsZEhWeWJuTWdkR2hsSUhKbGMzVnNkQzRnUldGamFDQm1kVzVqZEdsdmJpQnBjeUJsZUhCbFkzUmxaQ0IwYnlCeVpYUjFjbTRnWVNCamJHRnpjeUIwYUdGMFhISmNiaUFnSUNvZ1pYaDBaVzVrY3lCMGFHVWdZMnhoYzNNZ2FYUWdkMkZ6SUdkcGRtVnVMaUJVYUdVZ1puVnVZM1JwYjI1eklHRnlaU0JoY0hCc2FXVmtJR2x1SUhSb1pTQnZjbVJsY2x4eVhHNGdJQ0FxSUhSb1lYUWdjR0Z5WVcxbGRHVnljeUJoY21VZ1oybDJaVzRzSUcxbFlXNXBibWNnZEdoaGRDQjBhR1VnWm1seWMzUWdabUZqZEc5eWVTQjNhV3hzWEhKY2JpQWdJQ29nWlhoMFpXNWtJSFJvYVhNZ1ltRnpaU0JqYkdGemN5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN0xpNHVSblZ1WTNScGIyNTlJRzFwZUdsdVEyeGhjM05HWVdOMGIzSnBaWE1nUTJ4aGMzTWdabUZqZEc5eWVTQm1kVzVqZEdsdmJuTWdkR2hoZENCM2FXeHNYSEpjYmlBZ0lDb2dZbVVnWVhCd2JHbGxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHREYkdGemMzMGdRU0JqYkdGemN5QjBhR0YwSUdseklIUm9aU0J5WlhOMWJIUWdiMllnWVhCd2JIbHBibWNnZEdobElHWmhZM1J2Y25rZ1puVnVZM1JwYjI1ekxseHlYRzRnSUNBcUlGUm9aU0J5WlhOMWJIUnBibWNnWTJ4aGMzTWdkMmxzYkNCaGJIZGhlWE1nYVc1b1pYSnBkQ0JtY205dElFRmljM1J5WVdOMFNHOXpkRVpsWVhSMWNtVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUcxcGVDZ3VMaTV0YVhocGJrTnNZWE56Um1GamRHOXlhV1Z6S1NCN1hISmNiaUFnSUNCc1pYUWdVbVZ6ZFd4MFEyeGhjM01nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUcxcGVHbHVRMnhoYzNOR1lXTjBiM0pwWlhNdVptOXlSV0ZqYUNodGFYaHBia05zWVhOelJtRmpkRzl5ZVNBOVBpQjdYSEpjYmlBZ0lDQWdJRkpsYzNWc2RFTnNZWE56SUQwZ2JXbDRhVzVEYkdGemMwWmhZM1J2Y25rb1VtVnpkV3gwUTJ4aGMzTXBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUZKbGMzVnNkRU5zWVhOek8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb1FXSnpkSEpoWTNSSWIzTjBSbVZoZEhWeVpTd2dlMXh5WEc0Z0lFVldSVTVVVXpvZ2UxeHlYRzRnSUNBZ2RtRnNkV1U2SUh0Y2NseHVJQ0FnSUNBZ2RYQmtZWFJsT2lBbmIyNVZjR1JoZEdVbkxGeHlYRzRnSUNBZ2ZTeGNjbHh1SUNBZ0lIZHlhWFJoWW14bE9pQm1ZV3h6WlN4Y2NseHVJQ0I5TEZ4eVhHNGdJRk5GVWxaSlEwVlRPaUI3WEhKY2JpQWdJQ0IyWVd4MVpUb2dlMzBzWEhKY2JpQWdJQ0IzY21sMFlXSnNaVG9nWm1Gc2MyVXNYSEpjYmlBZ2ZTeGNjbHh1ZlNrN1hISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCWW5OMGNtRmpkRWh2YzNSR1pXRjBkWEpsTzF4eVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1FXMWhlbTl1TG1OdmJTd2dTVzVqTGlCdmNpQnBkSE1nWVdabWFXeHBZWFJsY3k0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNjbHh1THk4Z1UxQkVXQzFNYVdObGJuTmxMVWxrWlc1MGFXWnBaWEk2SUUxSlZDMHdYSEpjYm1sdGNHOXlkQ0JOWlhOelpXNW5aWElnWm5KdmJTQW5ZWEJ3TDAxbGMzTmxibWRsY2ljN1hISmNibWx0Y0c5eWRDQkJZbk4wY21GamRFaHZjM1JHWldGMGRYSmxJR1p5YjIwZ0p5NHZRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaU2M3WEhKY2JtbHRjRzl5ZENCVmRHbHNjeUJtY205dElDY3VMMVYwYVd4ekp6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQlBZbXBsWTNRZ2RHaGhkQ0J0WVc1aFoyVnpJR0ZqWTJWemN5QjBieUJoYkd3Z1NHOXpkQ0JtWldGMGRYSmxjeTRnUTI5dWRHRnBibk1nWVNCeVpXWmxjbVZ1WTJVZ2RHOWNjbHh1SUNvZ1pXNW5hVzVsTFhOd1pXTnBabWxqSUhacGMzVmhiSE1nYVdZZ1lYQndiR2xqWVdKc1pTNWNjbHh1SUNwY2NseHVJQ29nUUdWNGRHVnVaSE1nWTI5eVpTOU5aWE56Wlc1blpYSmNjbHh1SUNvZ1FHRnNhV0Z6SUdOdmNtVXZTRzl6ZEU5aWFtVmpkRnh5WEc0Z0tseHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwOWlhbVZqZEgwZ1JWWkZUbFJUSUMwZ1FuVnBiSFF0YVc0Z2JXVnpjMkZuWlhNZ2RHaGhkQ0IwYUdVZ1RXVnpjMlZ1WjJWeUlHVnRhWFJ6TGx4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzBWV1JVNVVVeTUxY0dSaGRHVTlKMjl1VlhCa1lYUmxKMTBnTFNCTlpYTnpZV2RsSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0JoWm5SbGNseHlYRzRnS2lCbFlXTm9JR05oYkd3Z2RHOGdXM1Z3WkdGMFpWMTdRR3hwYm1zZ1kyOXlaUzlJYjNOMFQySnFaV04wSTNWd1pHRjBaWDB1WEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JiUlZaRlRsUlRMbUZrWkVabFlYUjFjbVU5SjI5dVFXUmtSbVZoZEhWeVpTZGRJQzBnVFdWemMyRm5aU0IwYUdGMElHbHpJR1Z0YVhSMFpXUmNjbHh1SUNvZ1lXWjBaWElnWldGamFDQmpZV3hzSUhSdklGdGhaR1JHWldGMGRYSmxYWHRBYkdsdWF5QmpiM0psTDBodmMzUlBZbXBsWTNRallXUmtSbVZoZEhWeVpYMHVYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQmJSVlpGVGxSVExuSmxiVzkyWlVabFlYUjFjbVU5SjI5dVVtVnRiM1psUm1WaGRIVnlaU2RkSUMwZ1RXVnpjMkZuWlNCMGFHRjBJR2x6SUdWdGFYUjBaV1JjY2x4dUlDb2dZV1owWlhJZ1pXRmphQ0JqWVd4c0lIUnZJRnR5WlcxdmRtVkdaV0YwZFhKbFhYdEFiR2x1YXlCamIzSmxMMGh2YzNSUFltcGxZM1FqY21WdGIzWmxSbVZoZEhWeVpYMHVYSEpjYmlBcUwxeHlYRzVqYkdGemN5QkliM04wVDJKcVpXTjBJR1Y0ZEdWdVpITWdUV1Z6YzJWdVoyVnlJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBWTI5dWMzUnlkV04wYjNKY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBQWDBnYjNCMGFXOXVjeUF0SUU5d2RHbHZibk1nWm05eUlIUm9aU0JvYjNOMExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ2IzQjBhVzl1Y3k1dmQyNWxjaUF0SUU5d2RHbHZibUZzSUdWdVoybHVaUzF6Y0dWamFXWnBZeUJ2ZDI1bGNpQnZaaUIwYUdVZ2FHOXpkQzVjY2x4dUlDQWdLaTljY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWg3YjNkdVpYSWdQU0I3ZlgwZ1BTQjdmU2tnZTF4eVhHNGdJQ0FnTHk4Z1NXWWdZVzRnYjNkdVpYSWdhWE1nYzNCbFkybG1hV1ZrTENCMWMyVWdhWFJ6SUdsa0lHWnZjaUJ0WlhOellXZHBibWRjY2x4dUlDQWdJSE4xY0dWeUtHOTNibVZ5TG1sa0tUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXZkMjVsY2lBOUlHOTNibVZ5TzF4eVhHNGdJQ0FnZEdocGN5NWZabVZoZEhWeVpYTWdQU0I3ZlR0Y2NseHVJQ0FnSUhSb2FYTXVYM2RoYVhSeklEMGdXMTA3WEhKY2JpQWdJQ0IwYUdsekxsOXNZWE4wVlhCa1lYUmxJRDBnZEdocGN5NXViM2M3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSFpYUnpJSFJvWlNCbGJtZHBibVVnYjNkdVpYSWdiMkpxWldOMElHOW1JSFJvWlNCb2IzTjBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsWVdSdmJteDVYSEpjYmlBZ0lDb2dRSFI1Y0dVZ2UwOWlhbVZqZEgxY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2IzZHVaWElvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZiM2R1WlhJN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQmpkWEp5Wlc1MElIUnBiV1VnYVc0Z2JXbHNiR2x6WldOdmJtUnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsWVdSdmJteDVYSEpjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2JtOTNLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRVJoZEdVdWJtOTNLQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSFpYUnpJSFJvWlNCaGJXOTFiblFnYjJZZ2RHbHRaU0JwYmlCdGFXeHNhWE5sWTI5dVpITWdjMmx1WTJVZ2RYQmtZWFJsSUhkaGN5QnNZWE4wSUdOaGJHeGxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WldGa2IyNXNlVnh5WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElHUmxiSFJoVkdsdFpTZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmR5QXRJSFJvYVhNdVgyeGhjM1JWY0dSaGRHVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJVYUdseklHWjFibU4wYVc5dUlITm9iM1ZzWkNCaVpTQmpZV3hzWldRZ2FXNGdkR2hsSUdWdVoybHVaU2R6SUhKbGJtUmxjaUJzYjI5d0xpQkZlR1ZqZFhSbGN5QjFjR1JoZEdWY2NseHVJQ0FnS2lCc2IyOXdjeUJtYjNJZ1lXeHNJR1psWVhSMWNtVnpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lIVndaR0YwWlNncElIdGNjbHh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblJVYVcxbElEMGdkR2hwY3k1dWIzYzdYSEpjYmlBZ0lDQmpiMjV6ZENCa2RDQTlJSFJvYVhNdVpHVnNkR0ZVYVcxbE8xeHlYRzVjY2x4dUlDQWdJQzh2SUZCeWIyZHlaWE56SUhOMGIzSmxaQ0IzWVdsMGMxeHlYRzRnSUNBZ2RHaHBjeTVmZDJGcGRITXVabTl5UldGamFDaDNZV2wwSUQwK0lIdGNjbHh1SUNBZ0lDQWdkMkZwZEM1bGVHVmpkWFJsS0dSMEtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUM4dklGVndaR0YwWlNCaGJHd2dabVZoZEhWeVpYTmNjbHh1SUNBZ0lFOWlhbVZqZEM1MllXeDFaWE1vZEdocGN5NWZabVZoZEhWeVpYTXBMbVp2Y2tWaFkyZ29abVZoZEhWeVpTQTlQaUI3WEhKY2JpQWdJQ0FnSUdabFlYUjFjbVV1ZFhCa1lYUmxLR1IwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQzh2SUU1dmRHbG1lU0JzYVhOMFpXNWxjbk1nWVc0Z2RYQmtZWFJsSUc5alkzVnlaV1JjY2x4dUlDQWdJSFJvYVhNdVpXMXBkQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZXUlU1VVV5NTFjR1JoZEdVc0lHUjBLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDlzWVhOMFZYQmtZWFJsSUQwZ1kzVnljbVZ1ZEZScGJXVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdZU0JrWldabGNuSmxaQ0J3Y205dGFYTmxJSFJvWVhRZ2QybHNiQ0IzWVdsMElHRWdaMmwyWlc0Z2JuVnRZbVZ5SUc5bUlITmxZMjl1WkhNZ1ltVm1iM0psWEhKY2JpQWdJQ29nY21WemIyeDJhVzVuTGlCVWFHVWdhRzl6ZENCM2FXeHNJR052Ym5ScGJuVnZkWE5zZVNCMWNHUmhkR1VnZEdobElIZGhhWFFnY0hKdmJXbHpaU0JrZFhKcGJtY2dkR2hsWEhKY2JpQWdJQ29nZFhCa1lYUmxJR3h2YjNBZ2RXNTBhV3dnYVhRZ2NtVnpiMngyWlhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzNObFkyOXVaSE05TUYwZ0xTQk9kVzFpWlhJZ2IyWWdjMlZqYjI1a2N5QjBieUIzWVdsMElHSmxabTl5WlNCeVpYTnZiSFpwYm1jdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1E5ZlNCdmNIUnBiMjV6SUMwZ1QzQjBhVzl1WVd3Z2IzQjBhVzl1Y3lCdlltcGxZM1JjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JiYjNCMGFXOXVjeTV2YmtacGJtbHphRjBnTFNCRFlXeHNZbUZqYXlCMGJ5QmxlR1ZqZFhSbElHOXVZMlVnZEdobElIZGhhWFFnZEdsdFpWeHlYRzRnSUNBcUlHbHpJRzFsZEM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1UFgwZ2IzQjBhVzl1Y3k1dmJsQnliMmR5WlhOeklDMGdRMkZzYkdKaFkyc2dkRzhnWlhobFkzVjBaU0JsWVdOb0lIUnBiV1VnZEdobElIZGhhWFJjY2x4dUlDQWdLaUIwYVcxbElIQnliMmR5WlhOelpYTWdkRzkzWVhKa2N5QjBhR1VnZEdGeVoyVjBJRzUxYldKbGNpQnZaaUJ6WldOdmJtUnpMaUJVYUdVZ1lXMXZkVzUwSUc5bUlIQnliMmR5WlhOelhISmNiaUFnSUNvZ1lYTWdZU0F3TFRFZ2NHVnlZMlZ1ZEdGblpTQnBjeUJ3WVhOelpXUWdZWE1nWVc0Z1lYSm5kVzFsYm5RdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXdkR2x2Ym5NdWIyNURZVzVqWld3Z0xTQkRZV3hzWW1GamF5QjBieUJsZUdWamRYUmxJR2xtSUhSb1pTQjFjMlZ5SUdOaGJtTmxiSE5jY2x4dUlDQWdLaUIwYUdVZ2QyRnBkQ0JpWldadmNtVWdZMjl0Y0d4bGRHbHZiaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjNCMGFXOXVjeTV2YmtWeWNtOXlJQzBnUTJGc2JHSmhZMnNnZEc4Z1pYaGxZM1YwWlNCcFppQjBhR1VnZDJGcGRDQnpkRzl3YzF4eVhHNGdJQ0FxSUdKbFkyRjFjMlVnWVc0Z1pYSnliM0lnYVhNZ1pXNWpiM1Z1ZEdWeVpXUXVJRlJvWlNCbGNuSnZjaUJ0WlhOellXZGxJR2x6SUhCaGMzTmxaQ0JoY3lCaElIQmhjbUZ0WlhSbGNpNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEVaV1psY25KbFpIMWNjbHh1SUNBZ0tpOWNjbHh1SUNCM1lXbDBLSE5sWTI5dVpITXNJSHR2YmtacGJtbHphQ3dnYjI1UWNtOW5jbVZ6Y3l3Z2IyNURZVzVqWld3c0lHOXVSWEp5YjNKOUlEMGdlMzBwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSGRoYVhRZ1BTQlZkR2xzY3k1M1lXbDBLSE5sWTI5dVpITXNJSHR2YmtacGJtbHphQ3dnYjI1UWNtOW5jbVZ6Y3l3Z2IyNURZVzVqWld3c0lHOXVSWEp5YjNKOUtUdGNjbHh1SUNBZ0lIUm9hWE11WDNkaGFYUnpMbkIxYzJnb2QyRnBkQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdUMjVqWlNCMGFHVWdkMkZwZENCd2NtOXRhWE5sSUdseklHNXZJR3h2Ym1kbGNpQndaVzVrYVc1bklISmxiVzkyWlNCcGRDQm1jbTl0SUhSb1pTQjNZV2wwY3lCaGNuSmhlVnh5WEc0Z0lDQWdZMjl1YzNRZ2IyNURiMjF3YkdWMFpTQTlJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmQyRnBkSE11YzNCc2FXTmxLSFJvYVhNdVgzZGhhWFJ6TG1sdVpHVjRUMllvZDJGcGRDa3NJREVwTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhkaGFYUXVkR2hsYmlodmJrTnZiWEJzWlhSbExDQnZia052YlhCc1pYUmxLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnZDJGcGREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWx1YzNSaGJuUnBZWFJsSUdFZ2JtVjNJRWh2YzNRZ1ptVmhkSFZ5WlNCaGJtUWdjM1J2Y21VZ2FYUXVJRVpsWVhSMWNtVnpJRzExYzNRZ2FXNW9aWEpwZENCbWNtOXRYSEpjYmlBZ0lDb2dRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRMnhoYzNOOUlFWmxZWFIxY21WRGJHRnpjeUF0SUVOc1lYTnpJSFJvWVhRZ2QybHNiQ0JwYm5OMFlXNTBhV0YwWlNCMGFHVWdabVZoZEhWeVpTNGdUWFZ6ZEZ4eVhHNGdJQ0FxSUdWNGRHVnVaQ0I3UUd4cGJtc2dRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaWDB1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JiWm05eVkyVTlabUZzYzJWZElDMGdWMmhsZEdobGNpQnZjaUJ1YjNRZ2RHOGdiM1psY25keWFYUmxJR0Z1SUdWNGFYTjBhVzVuWEhKY2JpQWdJQ29nWm1WaGRIVnlaU0JwWmlCdmJtVWdiMllnZEdocGN5QjBlWEJsSUdGc2NtVmhaSGtnWlhocGMzUnpJRzl1SUhSb1pTQnZZbXBsWTNRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN0xpNHVZVzU1ZlNCaGNtZHpJQzBnUVdSa2FYUnBiMjVoYkNCaGNtZDFiV1Z1ZEhNZ2RHOGdjR0Z6Y3lCMGJ5QjBhR1VnUm1WaGRIVnlaVU5zWVhOelhISmNiaUFnSUNvZ1kyOXVjM1J5ZFdOMGIzSXVJRlJvWlNCSWIzTjBUMkpxWldOMElIZHBiR3dnWVd4M1lYbHpJR0psSUhCaGMzTmxaQ0JoY3lCMGFHVWdabWx5YzNRZ1lYSm5kVzFsYm5RdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ0xTQlhhR1YwYUdWeUlHOXlJRzV2ZENCaElHWmxZWFIxY21VZ2QyRnpJSE4xWTJObGMzTm1kV3hzZVNCaFpHUmxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQmhaR1JHWldGMGRYSmxLRVpsWVhSMWNtVkRiR0Z6Y3l3Z1ptOXlZMlVnUFNCbVlXeHpaU3dnTGk0dVlYSm5jeWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdhVzV3ZFhSVWVYQmxJRDBnZEhsd1pXOW1JRVpsWVhSMWNtVkRiR0Z6Y3p0Y2NseHVYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElFWmxZWFIxY21WRGJHRnpjeUJqWVc0Z1ltVWdaWGhsWTNWMFpXUmNjbHh1SUNBZ0lHbG1JQ2hwYm5CMWRGUjVjR1VnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnWVdSa0lHWmxZWFIxY21VZ2RHOGdhRzl6ZENBa2UzUm9hWE11YVdSOUxpQkdaV0YwZFhKbFEyeGhjM01nYlhWemRDQmlaU0JoSUdOc1lYTnpMbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjBhR1VnWm1WaGRIVnlaU0JwY3lCaElHaHZjM1FnWm1WaGRIVnlaVnh5WEc0Z0lDQWdaV3h6WlNCcFppQW9JU2hHWldGMGRYSmxRMnhoYzNNdWNISnZkRzkwZVhCbElHbHVjM1JoYm1ObGIyWWdRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaU2twSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1lXUmtJR1psWVhSMWNtVWdKSHRHWldGMGRYSmxRMnhoYzNNdWJtRnRaWDBnZEc4Z2FHOXpkQ0FrZTNSb2FYTXVhV1I5TGlCR1pXRjBkWEpsUTJ4aGMzTWdiWFZ6ZENCbGVIUmxibVFnUVdKemRISmhZM1JJYjNOMFJtVmhkSFZ5WlM1Z1hISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1EyaGxZMnNnYVdZZ2RHaGxJRVpsWVhSMWNtVkRiR0Z6Y3lCaGJISmxZV1I1SUdWNGFYTjBjeUJ2YmlCMGFHbHpJRzlpYW1WamRGeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyWmxZWFIxY21WelcwWmxZWFIxY21WRGJHRnpjeTV1WVcxbFhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2htYjNKalpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNjbHh1SUNBZ0lDQWdJQ0FnSUdCR1pXRjBkWEpsSUNSN1JtVmhkSFZ5WlVOc1lYTnpMbTVoYldWOUlHRnNjbVZoWkhrZ1pYaHBjM1J6SUc5dUlHaHZjM1FnSkh0MGFHbHpMbWxrZlM0Z1JYaHBjM1JwYm1jZ1ptVmhkSFZ5WlNCM2FXeHNJR0psSUc5MlpYSjNjbWwwZEdWdUxtQmNjbHh1SUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2NseHVJQ0FnSUNBZ0lDQWdJR0JHWldGMGRYSmxJQ1I3Um1WaGRIVnlaVU5zWVhOekxtNWhiV1Y5SUdGc2NtVmhaSGtnWlhocGMzUnpJRzl1SUdodmMzUWdKSHQwYUdsekxtbGtmUzRnVlhObElDZG1iM0pqWlNjZ1lYSm5kVzFsYm5RZ2RHOGdiM1psY25keWFYUmxJSFJvWlNCbVpXRjBkWEpsTG1CY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdTVzVwZEdsaGJHbDZaU0IwYUdVZ1ptVmhkSFZ5WlZ4eVhHNGdJQ0FnWTI5dWMzUWdabVZoZEhWeVpTQTlJRzVsZHlCR1pXRjBkWEpsUTJ4aGMzTW9kR2hwY3l3Z0xpNHVZWEpuY3lrN1hISmNiaUFnSUNCbVpXRjBkWEpsTG1sdWMzUmhiR3hCY0drb0tUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOW1aV0YwZFhKbGMxdEdaV0YwZFhKbFEyeGhjM011Ym1GdFpWMGdQU0JtWldGMGRYSmxPMXh5WEc0Z0lDQWdkR2hwY3k1bGJXbDBLSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVSVlpGVGxSVExtRmtaRVpsWVhSMWNtVXNJRVpsWVhSMWNtVkRiR0Z6Y3k1dVlXMWxLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsYlc5MlpTQmhJR1psWVhSMWNtVWdabkp2YlNCMGFHVWdiMkpxWldOMExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhSNWNHVk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdkSGx3WlNCdlppQm1aV0YwZFhKbElIUnZJSEpsYlc5MlpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQXRJRmRvWlhSb1pYSWdiM0lnYm05MElHRWdabVZoZEhWeVpTQjNZWE1nYzNWalkyVnpjMloxYkd4NUlISmxiVzkyWldRdVhISmNiaUFnSUNvdlhISmNiaUFnY21WdGIzWmxSbVZoZEhWeVpTaDBlWEJsVG1GdFpTa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMlpsWVhSMWNtVnpXM1I1Y0dWT1lXMWxYU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloY2NseHVJQ0FnSUNBZ0lDQmdSbVZoZEhWeVpTQnZaaUIwZVhCbElDUjdkSGx3WlU1aGJXVjlJR1J2WlhNZ2JtOTBJR1Y0YVhOMElHOXVJR2h2YzNRZ0pIdDBhR2x6TG1sa2ZTNGdUbThnWm1WaGRIVnlaU0IzYVd4c0lHSmxJSEpsYlc5MlpXUXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQXZMeUJTWlcxdmRtVWdkR2hsSUdabFlYUjFjbVZjY2x4dUlDQWdJQ0FnZEdocGN5NWxiV2wwS0hSb2FYTXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUlRMbkpsYlc5MlpVWmxZWFIxY21Vc0lIUjVjR1ZPWVcxbEtUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlptVmhkSFZ5WlhOYmRIbHdaVTVoYldWZExtUnBjMk5oY21Rb0tUdGNjbHh1SUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WDJabFlYUjFjbVZ6VzNSNWNHVk9ZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1NXNWthV05oZEdVZ2QyaGxkR2hsY2lCaElITndaV05wWm1sbFpDQm1aV0YwZFhKbElHbHpJR2x1YzNSaGJHeGxaQ0J2YmlCMGFHVWdhRzl6ZEM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IwZVhCbFRtRnRaU0F0SUU1aGJXVWdiMllnZEdobElIUjVjR1VnYjJZZ1ptVmhkSFZ5WlNCMGJ5QnNiMjlySUdadmNpNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHlYRzRnSUNBcUwxeHlYRzRnSUdoaGMwWmxZWFIxY21Vb2RIbHdaVTVoYldVcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlBaElYUm9hWE11WDJabFlYUjFjbVZ6VzNSNWNHVk9ZVzFsWFR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFeHBjM1FnZEdobElHNWhiV1Z6SUc5bUlIUm9aU0JtWldGMGRYSmxjeUJwYm5OMFlXeHNaV1FnYjI0Z2RHaGxJR2h2YzNRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGt1UEhOMGNtbHVaejU5WEhKY2JpQWdJQ292WEhKY2JpQWdiR2x6ZEVabFlYUjFjbVZ6S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektIUm9hWE11WDJabFlYUjFjbVZ6S1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hJYjNOMFQySnFaV04wTENBblJWWkZUbFJUSnl3Z2UxeHlYRzRnSUhaaGJIVmxPaUI3WEhKY2JpQWdJQ0F1TGk1UFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9TRzl6ZEU5aWFtVmpkQ2t1UlZaRlRsUlRMRnh5WEc0Z0lDQWdkWEJrWVhSbE9pQW5iMjVWY0dSaGRHVW5MRnh5WEc0Z0lDQWdZV1JrUm1WaGRIVnlaVG9nSjI5dVFXUmtSbVZoZEhWeVpTY3NYSEpjYmlBZ0lDQnlaVzF2ZG1WR1pXRjBkWEpsT2lBbmIyNVNaVzF2ZG1WR1pXRjBkWEpsSnl4Y2NseHVJQ0I5TEZ4eVhHNGdJSGR5YVhSaFlteGxPaUJtWVd4elpTeGNjbHh1ZlNrN1hISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJYjNOMFQySnFaV04wTzF4eVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1FXMWhlbTl1TG1OdmJTd2dTVzVqTGlCdmNpQnBkSE1nWVdabWFXeHBZWFJsY3k0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNjbHh1THk4Z1UxQkVXQzFNYVdObGJuTmxMVWxrWlc1MGFXWnBaWEk2SUUxSlZDMHdYSEpjYmk4cUtseHlYRzRnS2lCQWRIbHdaV1JsWmlCN1QySnFaV04wZlNCRllYTnBibWRQWW1wbFkzUWdUMkpxWldOMElHTnZiblJoYVc1cGJtY2daV0Z6YVc1bklHWjFibU4wYVc5dWMxeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwWjFibU4wYVc5dWZTQkpiaUF0SUVWaGMybHVaeUFuU1c0bklHWjFibU4wYVc5dUxpQlRhRzkxYkdRZ2RYTmxJSFJvWlNCemFXZHVZWFIxY21VZ0tHczZiblZ0WW1WeUtUcHVkVzFpWlhJdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN1JuVnVZM1JwYjI1OUlFOTFkQ0F0SUVWaGMybHVaeUFuVDNWMEp5Qm1kVzVqZEdsdmJpNGdVMmh2ZFd4a0lIVnpaU0IwYUdVZ2MybG5ibUYwZFhKbElDaHJPbTUxYldKbGNpazZiblZ0WW1WeUxseHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwWjFibU4wYVc5dWZTQkpiazkxZENBdElFVmhjMmx1WnlBblNXNVBkWFFuSUdaMWJtTjBhVzl1TGlCVGFHOTFiR1FnZFhObElIUm9aU0J6YVdkdVlYUjFjbVVnS0dzNmJuVnRZbVZ5S1RwdWRXMWlaWEl1WEhKY2JpQXFMMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRXhwYm1WaGNpQkZZWE5wYm1kY2NseHVJQ29nUUhSNWNHVWdlMFZoYzJsdVowOWlhbVZqZEgxY2NseHVJQ292WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JNYVc1bFlYSWdQU0I3WEhKY2JpQWdUbTl1WlNocktTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2F6dGNjbHh1SUNCOUxGeHlYRzRnSUVsdUtHc3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQnJPMXh5WEc0Z0lIMHNYSEpjYmlBZ1QzVjBLR3NwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJyTzF4eVhHNGdJSDBzWEhKY2JpQWdTVzVQZFhRb2F5a2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHczdYSEpjYmlBZ2ZTeGNjbHh1ZlR0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCUmRXRmtjbUYwYVdNZ1JXRnphVzVuWEhKY2JpQXFJRUIwZVhCbElIdEZZWE5wYm1kUFltcGxZM1I5WEhKY2JpQXFMMXh5WEc1bGVIQnZjblFnWTI5dWMzUWdVWFZoWkhKaGRHbGpJRDBnZTF4eVhHNGdJRWx1S0dzcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCcklDb2dhenRjY2x4dUlDQjlMRnh5WEc0Z0lFOTFkQ2hyS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYXlBcUlDZ3lJQzBnYXlrN1hISmNiaUFnZlN4Y2NseHVJQ0JKYms5MWRDaHJLU0I3WEhKY2JpQWdJQ0JySUNvOUlESTdYSEpjYmlBZ0lDQnBaaUFvYXlBOElERXBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJREF1TlNBcUlHc2dLaUJyTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJQzB3TGpVZ0tpQW9MUzFySUNvZ0tHc2dMU0F5S1NBdElERXBPMXh5WEc0Z0lIMHNYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EzVmlhV01nUldGemFXNW5YSEpjYmlBcUlFQjBlWEJsSUh0RllYTnBibWRQWW1wbFkzUjlYSEpjYmlBcUwxeHlYRzVsZUhCdmNuUWdZMjl1YzNRZ1EzVmlhV01nUFNCN1hISmNiaUFnU1c0b2F5a2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHc2dLaUJySUNvZ2F6dGNjbHh1SUNCOUxGeHlYRzRnSUU5MWRDaHJLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdMUzFySUNvZ2F5QXFJR3NnS3lBeE8xeHlYRzRnSUgwc1hISmNiaUFnU1c1UGRYUW9heWtnZTF4eVhHNGdJQ0FnYXlBcVBTQXlPMXh5WEc0Z0lDQWdhV1lnS0dzZ1BDQXhLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUF3TGpVZ0tpQnJJQ29nYXlBcUlHczdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYXlBdFBTQXlPMXh5WEc0Z0lDQWdjbVYwZFhKdUlEQXVOU0FxSUNocklDb2dheUFxSUdzZ0t5QXlLVHRjY2x4dUlDQjlMRnh5WEc1OU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlGRjFZWEowYVdNZ1JXRnphVzVuWEhKY2JpQXFJRUIwZVhCbElIdEZZWE5wYm1kUFltcGxZM1I5WEhKY2JpQXFMMXh5WEc1bGVIQnZjblFnWTI5dWMzUWdVWFZoY25ScFl5QTlJSHRjY2x4dUlDQkpiaWhyS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYXlBcUlHc2dLaUJySUNvZ2F6dGNjbHh1SUNCOUxGeHlYRzRnSUU5MWRDaHJLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdNU0F0SUMwdGF5QXFJR3NnS2lCcklDb2dhenRjY2x4dUlDQjlMRnh5WEc0Z0lFbHVUM1YwS0dzcElIdGNjbHh1SUNBZ0lHc2dLajBnTWp0Y2NseHVJQ0FnSUdsbUlDaHJJRHdnTVNrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z01DNDFJQ29nYXlBcUlHc2dLaUJySUNvZ2F6dGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JySUMwOUlESTdYSEpjYmlBZ0lDQnlaWFIxY200Z0xUQXVOU0FxSUNocklDb2dheUFxSUdzZ0tpQnJJQzBnTWlrN1hISmNiaUFnZlN4Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJSZFdsdWRHbGpJRVZoYzJsdVoxeHlYRzRnS2lCQWRIbHdaU0I3UldGemFXNW5UMkpxWldOMGZWeHlYRzRnS2k5Y2NseHVaWGh3YjNKMElHTnZibk4wSUZGMWFXNTBhV01nUFNCN1hISmNiaUFnU1c0b2F5a2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHc2dLaUJySUNvZ2F5QXFJR3NnS2lCck8xeHlYRzRnSUgwc1hISmNiaUFnVDNWMEtHc3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQXRMV3NnS2lCcklDb2dheUFxSUdzZ0tpQnJJQ3NnTVR0Y2NseHVJQ0I5TEZ4eVhHNGdJRWx1VDNWMEtHc3BJSHRjY2x4dUlDQWdJR3NnS2owZ01qdGNjbHh1SUNBZ0lHbG1JQ2hySUR3Z01Ta2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNQzQxSUNvZ2F5QXFJR3NnS2lCcklDb2dheUFxSUdzN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdheUF0UFNBeU8xeHlYRzRnSUNBZ2NtVjBkWEp1SURBdU5TQXFJQ2hySUNvZ2F5QXFJR3NnS2lCcklDb2dheUFySURJcE8xeHlYRzRnSUgwc1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVTJsdWRYTnZhV1JoYkNCRllYTnBibWRjY2x4dUlDb2dRSFI1Y0dVZ2UwVmhjMmx1WjA5aWFtVmpkSDFjY2x4dUlDb3ZYSEpjYm1WNGNHOXlkQ0JqYjI1emRDQlRhVzUxYzI5cFpHRnNJRDBnZTF4eVhHNGdJRWx1S0dzcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlBeElDMGdUV0YwYUM1amIzTW9LR3NnS2lCTllYUm9MbEJKS1NBdklESXBPMXh5WEc0Z0lIMHNYSEpjYmlBZ1QzVjBLR3NwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJOWVhSb0xuTnBiaWdvYXlBcUlFMWhkR2d1VUVrcElDOGdNaWs3WEhKY2JpQWdmU3hjY2x4dUlDQkpiazkxZENocktTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z01DNDFJQ29nS0RFZ0xTQk5ZWFJvTG1OdmN5aE5ZWFJvTGxCSklDb2dheWtwTzF4eVhHNGdJSDBzWEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dSWGh3YjI1bGJuUnBZV3dnUldGemFXNW5YSEpjYmlBcUlFQjBlWEJsSUh0RllYTnBibWRQWW1wbFkzUjlYSEpjYmlBcUwxeHlYRzVsZUhCdmNuUWdZMjl1YzNRZ1JYaHdiMjVsYm5ScFlXd2dQU0I3WEhKY2JpQWdTVzRvYXlrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUdzZ1BUMDlJREFnUHlBd0lEb2dNVEF5TkNBcUtpQW9heUF0SURFcE8xeHlYRzRnSUgwc1hISmNiaUFnVDNWMEtHc3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQnJJRDA5UFNBeElEOGdNU0E2SURFZ0xTQXlJQ29xSUNndE1UQWdLaUJyS1R0Y2NseHVJQ0I5TEZ4eVhHNGdJRWx1VDNWMEtHc3BJSHRjY2x4dUlDQWdJR2xtSUNocklEMDlQU0F3S1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBd08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLR3NnUFQwOUlERXBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJREU3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2F5QXFQU0F5TzF4eVhHNGdJQ0FnYVdZZ0tHc2dQQ0F4S1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBd0xqVWdLaUF4TURJMElDb3FJQ2hySUMwZ01TazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z01DNDFJQ29nS0Mwb01pQXFLaUFvTFRFd0lDb2dLR3NnTFNBeEtTa3BJQ3NnTWlrN1hISmNiaUFnZlN4Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJEYVhKamRXeGhjaUJGWVhOcGJtZGNjbHh1SUNvZ1FIUjVjR1VnZTBWaGMybHVaMDlpYW1WamRIMWNjbHh1SUNvdlhISmNibVY0Y0c5eWRDQmpiMjV6ZENCRGFYSmpkV3hoY2lBOUlIdGNjbHh1SUNCSmJpaHJLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdNU0F0SUUxaGRHZ3VjM0Z5ZENneElDMGdheUFxSUdzcE8xeHlYRzRnSUgwc1hISmNiaUFnVDNWMEtHc3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQk5ZWFJvTG5OeGNuUW9NU0F0SUMwdGF5QXFJR3NwTzF4eVhHNGdJSDBzWEhKY2JpQWdTVzVQZFhRb2F5a2dlMXh5WEc0Z0lDQWdheUFxUFNBeU8xeHlYRzRnSUNBZ2FXWWdLR3NnUENBeEtTQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQXRNQzQxSUNvZ0tFMWhkR2d1YzNGeWRDZ3hJQzBnYXlBcUlHc3BJQzBnTVNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdheUF0UFNBeU8xeHlYRzRnSUNBZ2NtVjBkWEp1SURBdU5TQXFJQ2hOWVhSb0xuTnhjblFvTVNBdElHc2dLaUJyS1NBcklERXBPMXh5WEc0Z0lIMHNYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1JXeGhjM1JwWXlCRllYTnBibWRjY2x4dUlDb2dRSFI1Y0dVZ2UwVmhjMmx1WjA5aWFtVmpkSDFjY2x4dUlDb3ZYSEpjYm1WNGNHOXlkQ0JqYjI1emRDQkZiR0Z6ZEdsaklEMGdlMXh5WEc0Z0lFbHVLR3NwSUh0Y2NseHVJQ0FnSUd4bGRDQnpPMXh5WEc0Z0lDQWdiR1YwSUdFZ1BTQXdMakU3WEhKY2JpQWdJQ0JqYjI1emRDQndJRDBnTUM0ME8xeHlYRzVjY2x4dUlDQWdJR2xtSUNocklEMDlQU0F3S1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBd08xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2xtSUNocklEMDlQU0F4S1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBeE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2xtSUNnaFlTQjhmQ0JoSUR3Z01Ta2dlMXh5WEc0Z0lDQWdJQ0JoSUQwZ01UdGNjbHh1SUNBZ0lDQWdjeUE5SUhBZ0x5QTBPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdjeUE5SUNod0lDb2dUV0YwYUM1aGMybHVLREVnTHlCaEtTa2dMeUFvTWlBcUlFMWhkR2d1VUVrcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR3NnTFQwZ01UdGNjbHh1SUNBZ0lISmxkSFZ5YmlBdEtHRWdLaUF5SUNvcUlDZ3hNQ0FxSUdzcElDb2dUV0YwYUM1emFXNG9LQ2hySUMwZ2N5a2dLaUFvTWlBcUlFMWhkR2d1VUVrcEtTQXZJSEFwS1R0Y2NseHVJQ0I5TEZ4eVhHNGdJRTkxZENocktTQjdYSEpjYmlBZ0lDQnNaWFFnY3p0Y2NseHVJQ0FnSUd4bGRDQmhJRDBnTUM0eE8xeHlYRzRnSUNBZ1kyOXVjM1FnY0NBOUlEQXVORHRjY2x4dVhISmNiaUFnSUNCcFppQW9heUE5UFQwZ01Da2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNRHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9heUE5UFQwZ01Ta2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdNVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9JV0VnZkh3Z1lTQThJREVwSUh0Y2NseHVJQ0FnSUNBZ1lTQTlJREU3WEhKY2JpQWdJQ0FnSUhNZ1BTQndJQzhnTkR0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUhNZ1BTQW9jQ0FxSUUxaGRHZ3VZWE5wYmlneElDOGdZU2twSUM4Z0tESWdLaUJOWVhSb0xsQkpLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnWVNBcUlESWdLaW9nS0MweE1DQXFJR3NwSUNvZ1RXRjBhQzV6YVc0b0tDaHJJQzBnY3lrZ0tpQW9NaUFxSUUxaGRHZ3VVRWtwS1NBdklIQXBJQ3NnTVR0Y2NseHVJQ0I5TEZ4eVhHNGdJRWx1VDNWMEtHc3BJSHRjY2x4dUlDQWdJR3hsZENCek8xeHlYRzRnSUNBZ2JHVjBJR0VnUFNBd0xqRTdYSEpjYmlBZ0lDQmpiMjV6ZENCd0lEMGdNQzQwTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hySUQwOVBTQXdLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUF3TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hySUQwOVBTQXhLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUF4TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doWVNCOGZDQmhJRHdnTVNrZ2UxeHlYRzRnSUNBZ0lDQmhJRDBnTVR0Y2NseHVJQ0FnSUNBZ2N5QTlJSEFnTHlBME8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2N5QTlJQ2h3SUNvZ1RXRjBhQzVoYzJsdUtERWdMeUJoS1NrZ0x5QW9NaUFxSUUxaGRHZ3VVRWtwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHc2dLajBnTWp0Y2NseHVJQ0FnSUdsbUlDaHJJRHdnTVNrZ2UxeHlYRzRnSUNBZ0lDQnJJQzA5SURFN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBb1hISmNiaUFnSUNBZ0lDQWdMVEF1TlNBcUlDaGhJQ29nTWlBcUtpQW9NVEFnS2lCcktTQXFJRTFoZEdndWMybHVLQ2dvYXlBdElITXBJQ29nS0RJZ0tpQk5ZWFJvTGxCSktTa2dMeUJ3S1NsY2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JySUMwOUlERTdYSEpjYmlBZ0lDQnlaWFIxY200Z0tGeHlYRzRnSUNBZ0lDQmhJQ29nTWlBcUtpQW9MVEV3SUNvZ2F5a2dLaUJOWVhSb0xuTnBiaWdvS0dzZ0xTQnpLU0FxSUNneUlDb2dUV0YwYUM1UVNTa3BJQzhnY0NrZ0tpQXdMalVnS3lBeFhISmNiaUFnSUNBcE8xeHlYRzRnSUgwc1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUW1GamF5QkZZWE5wYm1kY2NseHVJQ29nUUhSNWNHVWdlMFZoYzJsdVowOWlhbVZqZEgxY2NseHVJQ292WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JDWVdOcklEMGdlMXh5WEc0Z0lFbHVLR3NwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSE1nUFNBeExqY3dNVFU0TzF4eVhHNGdJQ0FnY21WMGRYSnVJR3NnS2lCcklDb2dLQ2h6SUNzZ01Ta2dLaUJySUMwZ2N5azdYSEpjYmlBZ2ZTeGNjbHh1SUNCUGRYUW9heWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdjeUE5SURFdU56QXhOVGc3WEhKY2JpQWdJQ0J5WlhSMWNtNGdMUzFySUNvZ2F5QXFJQ2dvY3lBcklERXBJQ29nYXlBcklITXBJQ3NnTVR0Y2NseHVJQ0I5TEZ4eVhHNGdJRWx1VDNWMEtHc3BJSHRjY2x4dUlDQWdJR052Ym5OMElITWdQU0F4TGpjd01UVTRJQ29nTVM0MU1qVTdYSEpjYmlBZ0lDQnJJQ285SURJN1hISmNiaUFnSUNCcFppQW9heUE4SURFcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlEQXVOU0FxSUNocklDb2dheUFxSUNnb2N5QXJJREVwSUNvZ2F5QXRJSE1wS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnJJQzA5SURJN1hISmNiaUFnSUNCeVpYUjFjbTRnTUM0MUlDb2dLR3NnS2lCcklDb2dLQ2h6SUNzZ01Ta2dLaUJySUNzZ2N5a2dLeUF5S1R0Y2NseHVJQ0I5TEZ4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUp2ZFc1alpTQkZZWE5wYm1kY2NseHVJQ29nUUhSNWNHVWdlMFZoYzJsdVowOWlhbVZqZEgxY2NseHVJQ292WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JDYjNWdVkyVWdQU0I3WEhKY2JpQWdTVzRvYXlrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SURFZ0xTQkNiM1Z1WTJVdVQzVjBLREVnTFNCcktUdGNjbHh1SUNCOUxGeHlYRzRnSUU5MWRDaHJLU0I3WEhKY2JpQWdJQ0JwWmlBb2F5QThJREVnTHlBeUxqYzFLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUEzTGpVMk1qVWdLaUJySUNvZ2F6dGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9heUE4SURJZ0x5QXlMamMxS1NCN1hISmNiaUFnSUNBZ0lHc2dMVDBnTVM0MU8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z055NDFOakkxSUNvZ0tHc2dMeUF5TGpjMUtTQXFJR3NnS3lBd0xqYzFPMXh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hySUR3Z01pNDFJQzhnTWk0M05Ta2dlMXh5WEc0Z0lDQWdJQ0JySUMwOUlESXVNalU3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUEzTGpVMk1qVWdLaUFvYXlBdklESXVOelVwSUNvZ2F5QXJJREF1T1RNM05UdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHc2dMVDBnTWk0Mk1qVTdYSEpjYmlBZ0lDQnlaWFIxY200Z055NDFOakkxSUNvZ0tHc2dMeUF5TGpjMUtTQXFJR3NnS3lBd0xqazRORE0zTlR0Y2NseHVJQ0I5TEZ4eVhHNGdJRWx1VDNWMEtHc3BJSHRjY2x4dUlDQWdJR2xtSUNocklEd2dNQzQxS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCQ2IzVnVZMlV1U1c0b2F5QXFJRElwSUNvZ01DNDFPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlFSnZkVzVqWlM1UGRYUW9heUFxSURJZ0xTQXhLU0FxSURBdU5TQXJJREF1TlR0Y2NseHVJQ0I5TEZ4eVhHNTlPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNibHh5WEc0dktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCdWJ5MTFiblZ6WldRdGRtRnljeUFxTDF4eVhHNHZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnRZWGd0WTJ4aGMzTmxjeTF3WlhJdFptbHNaU0FxTDF4eVhHNXBiWEJ2Y25RZ1NHOXpkRTlpYW1WamRDQm1jbTl0SUNkamIzSmxMMGh2YzNSUFltcGxZM1FuTzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVOc1lYTnpJR1poWTNSdmNua2dhVzUwWlhKbVlXTmxJR1p2Y2lCbVpXRjBkWEpsY3lCMGFHRjBJR0Z5WlNCa1pYQmxibVJsYm5RZ2IyNGdiM1JvWlhJZ1ptVmhkSFZ5WlhNZ1ltVnBibWRjY2x4dUlDb2djSEpsYzJWdWRDQnZiaUIwYUdVZ2FHOXpkQzRnUlhabGJuUWdaR1Z3Wlc1a1pXNWphV1Z6SUhkcGJHd2dZbVVnYkdsemRHVnVaV1FnWm05eUlIZG9aVzRnWVNCbVpXRjBkWEpsSUc5bVhISmNiaUFxSUcxaGRHTm9hVzVuSUhSNWNHVWdhWE1nWVdSa1pXUWdkRzhnZEdobElHaHZjM1FnWVc1a0lIZHBiR3dnYzNSdmNDQmlaV2x1WnlCc2FYTjBaVzVsWkNCbWIzSWdkMmhsYmlCdmJtVmNjbHh1SUNvZ2FYTWdjbVZ0YjNabFpDNGdTV1lnZEdobElHWmxZWFIxY21VZ2FYTWdZV3h5WldGa2VTQndjbVZ6Wlc1MElIZG9aVzRnWTI5dWMzUnlkV04wWldRc0lHVjJaVzUwY3lCM2FXeHNYSEpjYmlBcUlHSmxJR3hwYzNSbGJtVmtJR1p2Y2lCeWFXZG9kQ0JoZDJGNUxseHlYRzRnS2x4eVhHNGdLaUJBYVc1MFpYSm1ZV05sWEhKY2JpQXFYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdUMkpxWldOMGZTQkZWa1ZPVkY5RVJWQkZUa1JGVGtOSlJWTWdMU0JGZG1WdWRITWdkR2hoZENCMGFHVWdabVZoZEhWeVpTQnphRzkxYkdRZ2MzUmhjblF2YzNSdmNGeHlYRzRnS2lCc2FYTjBaVzVwYm1jZ1ptOXlJSGRvWlc0Z1lTQm1aV0YwZFhKbElHOW1JSFI1Y0dVZ1JtVmhkSFZ5WlU1aGJXVWdhWE1nWVdSa1pXUXZjbVZ0YjNabFpDQm1jbTl0SUhSb1pTQm9iM04wTGx4eVhHNGdLaUJGZG1WdWRDQmtaWEJsYm1SbGJtTnBaWE1nYzJodmRXeGtJR1p2Ykd4dmR5QjBhR1VnYzJsbmJtRjBkWEpsT2x4eVhHNGdLaUFnZXlCR1pXRjBkWEpsVG1GdFpUb2dleUJsZG1WdWRFNWhiV1U2SUdOaGJHeGlZV05yVG1GdFpTd2dMaTR1SUgwc0lDNHVMaUI5WEhKY2JpQXFMMXh5WEc1amJHRnpjeUJHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUZEdGeWRDQnNhWE4wWlc1cGJtY2dabTl5SUdWMlpXNTBJR1JsY0dWdVpHVnVZMmxsY3lCMGFHRjBJRzFoZEdOb0lIUm9aU0JuYVhabGJpQm1aV0YwZFhKbElIUjVjR1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUjVjR1ZPWVcxbElDMGdkSGx3WlNCdlppQm1aV0YwZFhKbElIUnZJR3hwYzNSbGJpQm1iM0l1WEhKY2JpQWdJQ292WEhKY2JpQWdYMjl1Um1WaGRIVnlaVUZrWkdWa0tIUjVjR1ZPWVcxbEtTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVGRHOXdJR3hwYzNSbGJtbHVaeUJtYjNJZ1pYWmxiblFnWkdWd1pXNWtaVzVqYVdWeklIUm9ZWFFnYldGMFkyZ2dkR2hsSUdkcGRtVnVJR1psWVhSMWNtVWdkSGx3WlM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkSGx3WlU1aGJXVWdMU0IwZVhCbElHOW1JR1psWVhSMWNtVWdkRzhnYzNSdmNDQnNhWE4wWlc1cGJtY2dabTl5TGx4eVhHNGdJQ0FxTDF4eVhHNGdJRjl2YmtabFlYUjFjbVZTWlcxdmRtVmtLSFI1Y0dWT1lXMWxLU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFZWFZuYldWdWRITWdlMEJzYVc1cklFRmljM1J5WVdOMFNHOXpkRVpsWVhSMWNtVWpaR2x6WTJGeVpIMWNjbHh1SUNBZ0tpOWNjbHh1SUNCa2FYTmpZWEprS0NrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUdOc1lYTnpJSFJvWVhRZ2FXMXdiR1Z0Wlc1MGN5QjdRR3hwYm1zZ1JtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlgwZ1lXNWtJR1Y0ZEdWdVpITmNjbHh1SUNBZ0tpQmhJSE53WldOcFptbGxaQ0JpWVhObElHTnNZWE56TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHREYkdGemMzMGdRbUZ6WlVOc1lYTnpJQzBnVkdobElHTnNZWE56SUhSdklHVjRkR1Z1WkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBOc1lYTnpmU0JCSUdOc1lYTnpJSFJvWVhRZ1pYaDBaVzVrY3lCZ1FtRnpaVU5zWVhOellDQmhibVFnYVcxd2JHVnRaVzUwY3lCN1FHeHBibXNnUm1WaGRIVnlaVVJsY0dWdVpHVnVkRWx1ZEdWeVptRmpaWDB1WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklFMXBlR2x1S0VKaGMyVkRiR0Z6Y3lrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnUm1WaGRIVnlaVVJsY0dWdVpHVnVkRTFwZUdsdUlEMGdZMnhoYzNNZ1pYaDBaVzVrY3lCQ1lYTmxRMnhoYzNNZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhvYjNOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9hRzl6ZENrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQ0E5SUdodmMzUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRTV2SUc1bFpXUWdkRzhnYkdsemRHVnVJR1p2Y2lCbGRtVnVkSE1nYVdZZ2RHaGxJRzFwZUdsdUlHbHpJR2x1SUhSb1pTQndjbTkwYjNSNWNHVWdZMmhoYVc0Z2JYVnNkR2x3YkdVZ2RHbHRaWE5jY2x4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgybHVhWFJwWVd4cGVtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtbDBhV0ZzYVhwbFpDQTlJSFJ5ZFdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVM1JoY25RZ2JHbHpkR1Z1YVc1bklHWnZjaUJtWldGMGRYSmxJR1YyWlc1MGMxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiMjVHWldGMGRYSmxRV1JrWldRZ1BTQjBhR2x6TGw5dmJrWmxZWFIxY21WQlpHUmxaQzVpYVc1a0tIUm9hWE1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIyNUdaV0YwZFhKbFVtVnRiM1psWkNBOUlIUm9hWE11WDI5dVJtVmhkSFZ5WlZKbGJXOTJaV1F1WW1sdVpDaDBhR2x6S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvYjNOMExteHBjM1JsYmxSdktGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCSWIzTjBUMkpxWldOMExrVldSVTVVVXk1aFpHUkdaV0YwZFhKbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl2YmtabFlYUjFjbVZCWkdSbFpGeHlYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaHZjM1F1YkdsemRHVnVWRzhvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRWh2YzNSUFltcGxZM1F1UlZaRlRsUlRMbkpsYlc5MlpVWmxZWFIxY21Vc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjl1Um1WaGRIVnlaVkpsYlc5MlpXUmNjbHh1SUNBZ0lDQWdJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdVbVZuYVhOMFpYSWdabVZoZEhWeVpYTWdkR2hoZENCaGJISmxZV1I1SUdWNGFYTjBYSEpjYmlBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVldSVTVVWDBSRlVFVk9SRVZPUTBsRlV5a3VabTl5UldGamFDaDBlWEJsVG1GdFpTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlvYjNOMFczUjVjR1ZPWVcxbFhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1R1pXRjBkWEpsUVdSa1pXUW9kSGx3WlU1aGJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJRjl2YmtabFlYUjFjbVZCWkdSbFpDaDBlWEJsVG1GdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVldSVTVVWDBSRlVFVk9SRVZPUTBsRlUxdDBlWEJsVG1GdFpWMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWFpsYm5SeklEMGdkR2hwY3k1amIyNXpkSEoxWTNSdmNpNUZWa1ZPVkY5RVJWQkZUa1JGVGtOSlJWTmJkSGx3WlU1aGJXVmRPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNWxiblJ5YVdWektHVjJaVzUwY3lrdVptOXlSV0ZqYUNnb1cyVjJaVzUwVG1GdFpTd2dZMkZzYkdKaFkydGRLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTmJZMkZzYkdKaFkydGRJRDBnZEdocGMxdGpZV3hzWW1GamExMHVZbWx1WkNoMGFHbHpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQzVzYVhOMFpXNVVieWhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9iM04wVzNSNWNHVk9ZVzFsWFM1RlZrVk9WRk5iWlhabGJuUk9ZVzFsWFN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpXMk5oYkd4aVlXTnJYVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JmYjI1R1pXRjBkWEpsVW1WdGIzWmxaQ2gwZVhCbFRtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZXUlU1VVgwUkZVRVZPUkVWT1EwbEZVMXQwZVhCbFRtRnRaVjBnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhabGJuUnpJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVGVmtWT1ZGOUVSVkJGVGtSRlRrTkpSVk5iZEhsd1pVNWhiV1ZkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVsYm5SeWFXVnpLR1YyWlc1MGN5a3VabTl5UldGamFDZ29XMlYyWlc1MFRtRnRaU3dnWTJGc2JHSmhZMnRkS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJodmMzUXVjM1J2Y0V4cGMzUmxibWx1WnloY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvYjNOMFczUjVjR1ZPWVcxbFhTNUZWa1ZPVkZOYlpYWmxiblJPWVcxbFhTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6VzJOaGJHeGlZV05yWFZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCa2FYTmpZWEprS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUZOMGIzQWdiR2x6ZEdWdWFXNW5JR1p2Y2lCbVpXRjBkWEpsSUdWMlpXNTBjMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmh2YzNRdWMzUnZjRXhwYzNSbGJtbHVaeWhjY2x4dUlDQWdJQ0FnSUNBZ0lFaHZjM1JQWW1wbFkzUXVSVlpGVGxSVExtRmtaRVpsWVhSMWNtVXNYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl2YmtabFlYUjFjbVZCWkdSbFpGeHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYUc5emRDNXpkRzl3VEdsemRHVnVhVzVuS0Z4eVhHNGdJQ0FnSUNBZ0lDQWdTRzl6ZEU5aWFtVmpkQzVGVmtWT1ZGTXVjbVZ0YjNabFJtVmhkSFZ5WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVSbVZoZEhWeVpWSmxiVzkyWldSY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJUZEc5d0lHeHBjM1JsYm1sdVp5QjBieUJtWldGMGRYSmxMWE53WldOcFptbGpJR1YyWlc1MGMxeHlYRzRnSUNBZ0lDQWdJRTlpYW1WamRDNXJaWGx6S0hSb2FYTXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUmZSRVZRUlU1RVJVNURTVVZUS1M1bWIzSkZZV05vS0hSNWNHVk9ZVzFsSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5b2IzTjBXM1I1Y0dWT1lXMWxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5dVJtVmhkSFZ5WlZKbGJXOTJaV1FvZEhsd1pVNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCemRYQmxjaTVrYVhOallYSmtLQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ1JWWkZUbFJmUkVWUVJVNUVSVTVEU1VWVElEMGdRbUZ6WlVOc1lYTnpMa1ZXUlU1VVgwUkZVRVZPUkVWT1EwbEZVeUI4ZkNCN2ZUdGNjbHh1WEhKY2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aEdaV0YwZFhKbFJHVndaVzVrWlc1MFRXbDRhVzRzSUh0Y2NseHVJQ0FnSUNBZ1JWWkZUbFJmUkVWUVJVNUVSVTVEU1VWVE9pQjdYSEpjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDNHVMa1ZXUlU1VVgwUkZVRVZPUkVWT1EwbEZVeXhjY2x4dUlDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCR1pXRjBkWEpsUkdWd1pXNWtaVzUwVFdsNGFXNDdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUlhabGJuUWdaR1Z3Wlc1a1pXNWphV1Z6SUhOb2IzVnNaQ0JtYjJ4c2IzY2dkR2hsSUhOcFoyNWhkSFZ5WlRwY2NseHVJQ29nZTF4eVhHNGdLaUFnUm1WaGRIVnlaVTVoYldVNklIdGNjbHh1SUNvZ0lDQWdMeThnUlhabGJuUnpJSFJvWVhRZ2RHaGxJR1psWVhSMWNtVWdjMmh2ZFd4a0lITjBZWEowTDNOMGIzQWdiR2x6ZEdWdWFXNW5JR1p2Y2lCM2FHVnVJR0VnWm1WaGRIVnlaVnh5WEc0Z0tpQWdJQ0F2THlCdlppQjBlWEJsSUVabFlYUjFjbVZPWVcxbElHbHpJR0ZrWkdWa0wzSmxiVzkyWldRZ1puSnZiU0IwYUdVZ2FHOXpkRnh5WEc0Z0tpQWdJQ0I3WEhKY2JpQXFJQ0FnSUNBZ1pYWmxiblJPWVcxbE9pQmpZV3hzWW1GamEwNWhiV1VzWEhKY2JpQXFJQ0FnSUNBZ0xpNHVYSEpjYmlBcUlDQWdJSDBzWEhKY2JpQXFJQ0I5WEhKY2JpQXFJSDFjY2x4dUlDb3ZYSEpjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLRVpsWVhSMWNtVkVaWEJsYm1SbGJuUkpiblJsY21aaFkyVXNJSHRjY2x4dUlDQkZWa1ZPVkY5RVJWQkZUa1JGVGtOSlJWTTZJSHRjY2x4dUlDQWdJSFpoYkhWbE9pQjdmU3hjY2x4dUlDQWdJSGR5YVhSaFlteGxPaUJtWVd4elpTeGNjbHh1SUNCOUxGeHlYRzU5S1R0Y2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVpsWVhSMWNtVkVaWEJsYm1SbGJuUkpiblJsY21aaFkyVTdYSEpjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JCYldGNmIyNHVZMjl0TENCSmJtTXVJRzl5SUdsMGN5QmhabVpwYkdsaGRHVnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4eVhHNHZMeUJUVUVSWUxVeHBZMlZ1YzJVdFNXUmxiblJwWm1sbGNqb2dUVWxVTFRCY2NseHVYSEpjYmk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUc1dkxYVnVkWE5sWkMxMllYSnpJQ292WEhKY2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHMWhlQzFqYkdGemMyVnpMWEJsY2kxbWFXeGxJQ292WEhKY2JtbHRjRzl5ZENCR1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sSUdaeWIyMGdKMk52Y21VdlJtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlNjN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EyeGhjM01nWm1GamRHOXllU0JwYm5SbGNtWmhZMlVnWm05eUlHWmxZWFIxY21WeklIUm9ZWFFnWVhKbElHUmxjR1Z1WkdWdWRDQnZiaUIwYUdVZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdLaUJpWldsdVp5QndjbVZ6Wlc1MElHOXVJSFJvWlNCb2IzTjBMaUJNWVhsbGNpQmhibVFnWVc1cGJXRjBhVzl1SUdWMlpXNTBjeUIzYVd4c0lHRjFkRzl0WVhScFkyRnNiSGtnWW1WY2NseHVJQ29nYkdsemRHVnVaV1FnWm05eUlHOXVZMlVnWVNCQmJtbHRZWFJwYjI1R1pXRjBkWEpsSUdseklHRmtaR1ZrSUhSdklIUm9aU0JvYjNOMElHRnVaQ0J6ZEc5d2NHVmtJRzl1WTJVZ2FYUmNjbHh1SUNvZ2FYTWdjbVZ0YjNabFpDNWNjbHh1SUNwY2NseHVJQ29nUUdsdWRHVnlabUZqWlZ4eVhHNGdLaUJBWlhoMFpXNWtjeUJHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxYSEpjYmlBcVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN1QySnFaV04wZlNCRlZrVk9WRjlFUlZCRlRrUkZUa05KUlZNZ0xTQkZkbVZ1ZEhNZ2RHaGhkQ0IwYUdVZ1ptVmhkSFZ5WlNCemFHOTFiR1FnYzNSaGNuUXZjM1J2Y0Z4eVhHNGdLaUJzYVhOMFpXNXBibWNnWm05eUlIZG9aVzRnWVNCbVpXRjBkWEpsSUc5bUlIUjVjR1VnUm1WaGRIVnlaVTVoYldVZ2FYTWdZV1JrWldRdmNtVnRiM1psWkNCbWNtOXRJSFJvWlNCb2IzTjBMbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMDlpYW1WamRIMGdSVlpGVGxSZlJFVlFSVTVFUlU1RFNVVlRMa0Z1YVcxaGRHbHZia1psWVhSMWNtVWdMU0JGZG1WdWRITWdkR2hoZENCaGNtVmNjbHh1SUNvZ2MzQmxZMmxtYVdNZ2RHOGdkR2hsSUVGdWFXMWhkR2x2YmtabFlYUjFjbVV1WEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JiUlZaRlRsUmZSRVZRUlU1RVJVNURTVVZUTGtGdWFXMWhkR2x2YmtabFlYUjFjbVV1WVdSa1RHRjVaWEk5SjE5dmJreGhlV1Z5UVdSa1pXUW5YU0F0WEhKY2JpQXFJRlJvWlNCdVlXMWxJRzltSUhSb1pTQnRaWFJvYjJRZ2RHaGhkQ0IzYVd4c0lHSmxJR1Y0WldOMWRHVmtJSGRvWlc0Z1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlNCaFpHUk1ZWGxsY2x4eVhHNGdLaUJsZG1WdWRITWdZWEpsSUdWdGFYUjBaV1F1WEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JiUlZaRlRsUmZSRVZRUlU1RVJVNURTVVZUTGtGdWFXMWhkR2x2YmtabFlYUjFjbVV1Y21WdGIzWmxUR0Y1WlhJOUoxOXZia3hoZVdWeVVtVnRiM1psWkNkZElDMWNjbHh1SUNvZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUcxbGRHaHZaQ0IwYUdGMElIZHBiR3dnWW1VZ1pYaGxZM1YwWldRZ2QyaGxiaUJCYm1sdFlYUnBiMjVHWldGMGRYSmxJSEpsYlc5MlpVeGhlV1Z5WEhKY2JpQXFJR1YyWlc1MGN5QmhjbVVnWlcxcGRIUmxaQzVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnRGVmtWT1ZGOUVSVkJGVGtSRlRrTkpSVk11UVc1cGJXRjBhVzl1Um1WaGRIVnlaUzV5Wlc1aGJXVk1ZWGxsY2owblgyOXVUR0Y1WlhKU1pXNWhiV1ZrSjEwZ0xWeHlYRzRnS2lCVWFHVWdibUZ0WlNCdlppQjBhR1VnYldWMGFHOWtJSFJvWVhRZ2QybHNiQ0JpWlNCbGVHVmpkWFJsWkNCM2FHVnVJRUZ1YVcxaGRHbHZia1psWVhSMWNtVWdjbVZ1WVcxbFRHRjVaWEpjY2x4dUlDb2daWFpsYm5SeklHRnlaU0JsYldsMGRHVmtMbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdXMFZXUlU1VVgwUkZVRVZPUkVWT1EwbEZVeTVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbUZrWkVGdWFXMWhkR2x2YmowblgyOXVRVzVwYldGMGFXOXVRV1JrWldRblhTQXRYSEpjYmlBcUlGUm9aU0J1WVcxbElHOW1JSFJvWlNCdFpYUm9iMlFnZEdoaGRDQjNhV3hzSUdKbElHVjRaV04xZEdWa0lIZG9aVzRnUVc1cGJXRjBhVzl1Um1WaGRIVnlaU0JoWkdSQmJtbHRZWFJwYjI1Y2NseHVJQ29nWlhabGJuUnpJR0Z5WlNCbGJXbDBkR1ZrTGx4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzBWV1JVNVVYMFJGVUVWT1JFVk9RMGxGVXk1QmJtbHRZWFJwYjI1R1pXRjBkWEpsTG5KbGJXOTJaVUZ1YVcxaGRHbHZiajBuWDI5dVFXNXBiV0YwYVc5dVVtVnRiM1psWkNkZElDMWNjbHh1SUNvZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUcxbGRHaHZaQ0IwYUdGMElIZHBiR3dnWW1VZ1pYaGxZM1YwWldRZ2QyaGxiaUJCYm1sdFlYUnBiMjVHWldGMGRYSmxJSEpsYlc5MlpVRnVhVzFoZEdsdmJseHlYRzRnS2lCbGRtVnVkSE1nWVhKbElHVnRhWFIwWldRdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJmUkVWUVJVNUVSVTVEU1VWVExrRnVhVzFoZEdsdmJrWmxZWFIxY21VdWNtVnVZVzFsUVc1cGJXRjBhVzl1UFNkZmIyNUJibWx0WVhScGIyNVNaVzVoYldWa0oxMGdMVnh5WEc0Z0tpQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ2JXVjBhRzlrSUhSb1lYUWdkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDQjNhR1Z1SUVGdWFXMWhkR2x2YmtabFlYUjFjbVVnY21WdVlXMWxRVzVwYldGMGFXOXVYSEpjYmlBcUlHVjJaVzUwY3lCaGNtVWdaVzFwZEhSbFpDNWNjbHh1SUNvdlhISmNibU5zWVhOeklFRnVhVzFoZEdsdmJrWmxZWFIxY21WRVpYQmxibVJsYm5SSmJuUmxjbVpoWTJVZ1pYaDBaVzVrY3lCR1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sSUh0Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsWkNCM2FHVnVJR0Z1YVcxaGRHbHZiaUJzWVhsbGNpQmhaR1JsWkNCbGRtVnVkSE1nWVhKbElHTmhkV2RvZEM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdibUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUlIUm9ZWFFnZDJGeklHRmtaR1ZrTGx4eVhHNGdJQ0FxTDF4eVhHNGdJRjl2Ymt4aGVXVnlRV1JrWldRb2UyNWhiV1Y5S1NCN2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJGZUdWamRYUmxaQ0IzYUdWdUlHRnVhVzFoZEdsdmJpQnNZWGxsY2lCeVpXMXZkbVZrSUdWMlpXNTBjeUJoY21VZ1kyRjFaMmgwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHaGhkQ0IzWVhNZ2NtVnRiM1psWkM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JmYjI1TVlYbGxjbEpsYlc5MlpXUW9lMjVoYldWOUtTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsWkNCM2FHVnVJR0Z1YVcxaGRHbHZiaUJzWVhsbGNpQnlaVzVoYldWa0lHVjJaVzUwY3lCaGNtVWdZMkYxWjJoMExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2YkdST1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnZEdoaGRDQjNZWE1nY21WdVlXMWxaQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdibVYzVG1GdFpTQXRJRTVsZHlCdVlXMWxJRzltSUhSb1pTQnNZWGxsY2k1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JmYjI1TVlYbGxjbEpsYm1GdFpXUW9lMjlzWkU1aGJXVXNJRzVsZDA1aGJXVjlLU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkZlR1ZqZFhSbFpDQjNhR1Z1SUdGdWFXMWhkR2x2YmlCaFpHUmxaQ0JsZG1WdWRITWdZWEpsSUdOaGRXZG9kQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCaGJpQmhibWx0WVhScGIyNGdkMkZ6SUdGa1pHVmtJSFJ2TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JoYm1sdFlYUnBiMjVPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnWVc1cGJXRjBhVzl1SUhSb1lYUWdkMkZ6SUdGa1pHVmtMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXZia0Z1YVcxaGRHbHZia0ZrWkdWa0tIdHNZWGxsY2s1aGJXVXNJR0Z1YVcxaGRHbHZiazVoYldWOUtTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsWkNCM2FHVnVJR0Z1YVcxaGRHbHZiaUJ5WlcxdmRtVmtJR1YyWlc1MGN5QmhjbVVnWTJGMVoyaDBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCc1lYbGxjazVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JzWVhsbGNpQjBhR0YwSUdGdUlHRnVhVzFoZEdsdmJpQjNZWE1nY21WdGIzWmxaQ0JtY205dExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCaGJtbHRZWFJwYjI1T1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUlIUm9ZWFFnZDJGeklISmxiVzkyWldRdVhISmNiaUFnSUNvdlhISmNiaUFnWDI5dVFXNXBiV0YwYVc5dVVtVnRiM1psWkNoN2JHRjVaWEpPWVcxbExDQmhibWx0WVhScGIyNU9ZVzFsZlNrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUlhobFkzVjBaV1FnZDJobGJpQmhibWx0WVhScGIyNGdjbVZ1WVcxbFpDQmxkbVZ1ZEhNZ1lYSmxJR05oZFdkb2RDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdGNVpYSk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHaGhkQ0JoYmlCaGJtbHRZWFJwYjI0Z1ltVnNiMjVuY3lCMGJ5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IyeGtUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR0Z1YVcxaGRHbHZiaUIwYUdGMElIZGhjeUJ5Wlc1aGJXVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVaWGRPWVcxbElDMGdUbVYzSUc1aGJXVWdiMllnZEdobElHRnVhVzFoZEdsdmJpNWNjbHh1SUNBZ0tpOWNjbHh1SUNCZmIyNUJibWx0WVhScGIyNVNaVzVoYldWa0tIdHNZWGxsY2s1aGJXVXNJRzlzWkU1aGJXVXNJRzVsZDA1aGJXVjlLU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRjbVZoZEdWeklHRWdZMnhoYzNNZ2RHaGhkQ0JwYlhCc1pXMWxiblJ6SUh0QWJHbHVheUJCYm1sdFlYUnBiMjVHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxmVnh5WEc0Z0lDQXFJR0Z1WkNCbGVIUmxibVJ6SUdFZ2MzQmxZMmxtYVdWa0lHSmhjMlVnWTJ4aGMzTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwTnNZWE56ZlNCQ1lYTmxRMnhoYzNNZ0xTQlVhR1VnWTJ4aGMzTWdkRzhnWlhoMFpXNWtMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdRMnhoYzNOOUlFRWdZMnhoYzNNZ2RHaGhkQ0JsZUhSbGJtUnpJR0JDWVhObFEyeGhjM05nSUdGdVpDQnBiWEJzWlcxbGJuUnpJSHRBYkdsdWF5QkJibWx0WVhScGIyNUdaV0YwZFhKbFJHVndaVzVrWlc1MFNXNTBaWEptWVdObGZTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nVFdsNGFXNG9RbUZ6WlVOc1lYTnpLU0I3WEhKY2JpQWdJQ0JqYjI1emRDQlFZWEpsYm5SRGJHRnpjeUE5SUVabFlYUjFjbVZFWlhCbGJtUmxiblJKYm5SbGNtWmhZMlV1VFdsNGFXNG9RbUZ6WlVOc1lYTnpLVHRjY2x4dUlDQWdJR052Ym5OMElFRnVhVzFoZEdsdmJrWmxZWFIxY21WRVpYQmxibVJsYm5STmFYaHBiaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdVR0Z5Wlc1MFEyeGhjM01nZTF4eVhHNGdJQ0FnSUNCZmIyNU1ZWGxsY2tGa1pHVmtLSHR1WVcxbGZTa2dlMzFjY2x4dVhISmNiaUFnSUNBZ0lGOXZia3hoZVdWeVVtVnRiM1psWkNoN2JtRnRaWDBwSUh0OVhISmNibHh5WEc0Z0lDQWdJQ0JmYjI1TVlYbGxjbEpsYm1GdFpXUW9lMjlzWkU1aGJXVXNJRzVsZDA1aGJXVjlLU0I3ZlZ4eVhHNWNjbHh1SUNBZ0lDQWdYMjl1UVc1cGJXRjBhVzl1UVdSa1pXUW9lMnhoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1VG1GdFpYMHBJSHQ5WEhKY2JseHlYRzRnSUNBZ0lDQmZiMjVCYm1sdFlYUnBiMjVTWlcxdmRtVmtLSHRzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVjlLU0I3ZlZ4eVhHNWNjbHh1SUNBZ0lDQWdYMjl1UVc1cGJXRjBhVzl1VW1WdVlXMWxaQ2g3YkdGNVpYSk9ZVzFsTENCdmJHUk9ZVzFsTENCdVpYZE9ZVzFsZlNrZ2UzMWNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9RVzVwYldGMGFXOXVSbVZoZEhWeVpVUmxjR1Z1WkdWdWRFMXBlR2x1TENCN1hISmNiaUFnSUNBZ0lFVldSVTVVWDBSRlVFVk9SRVZPUTBsRlV6b2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQXVMaTVRWVhKbGJuUkRiR0Z6Y3k1RlZrVk9WRjlFUlZCRlRrUkZUa05KUlZNc1hISmNiaUFnSUNBZ0lDQWdJQ0F1TGk1QmJtbHRZWFJwYjI1R1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sTGtWV1JVNVVYMFJGVUVWT1JFVk9RMGxGVXl4Y2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lCbVlXeHpaU3hjY2x4dUlDQWdJQ0FnZlN4Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQkJibWx0WVhScGIyNUdaV0YwZFhKbFJHVndaVzVrWlc1MFRXbDRhVzQ3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhCYm1sdFlYUnBiMjVHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxMQ0I3WEhKY2JpQWdSVlpGVGxSZlJFVlFSVTVFUlU1RFNVVlRPaUI3WEhKY2JpQWdJQ0IyWVd4MVpUb2dlMXh5WEc0Z0lDQWdJQ0JCYm1sdFlYUnBiMjVHWldGMGRYSmxPaUI3WEhKY2JpQWdJQ0FnSUNBZ1lXUmtUR0Y1WlhJNklDZGZiMjVNWVhsbGNrRmtaR1ZrSnl4Y2NseHVJQ0FnSUNBZ0lDQnlaVzF2ZG1WTVlYbGxjam9nSjE5dmJreGhlV1Z5VW1WdGIzWmxaQ2NzWEhKY2JpQWdJQ0FnSUNBZ2NtVnVZVzFsVEdGNVpYSTZJQ2RmYjI1TVlYbGxjbEpsYm1GdFpXUW5MRnh5WEc0Z0lDQWdJQ0FnSUdGa1pFRnVhVzFoZEdsdmJqb2dKMTl2YmtGdWFXMWhkR2x2YmtGa1pHVmtKeXhjY2x4dUlDQWdJQ0FnSUNCeVpXMXZkbVZCYm1sdFlYUnBiMjQ2SUNkZmIyNUJibWx0WVhScGIyNVNaVzF2ZG1Wa0p5eGNjbHh1SUNBZ0lDQWdJQ0J5Wlc1aGJXVkJibWx0WVhScGIyNDZJQ2RmYjI1QmJtbHRZWFJwYjI1U1pXNWhiV1ZrSnl4Y2NseHVJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQjNjbWwwWVdKc1pUb2dabUZzYzJVc1hISmNiaUFnZlN4Y2NseHVmU2s3WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkJibWx0WVhScGIyNUdaV0YwZFhKbFJHVndaVzVrWlc1MFNXNTBaWEptWVdObE8xeHlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdRVzFoZW05dUxtTnZiU3dnU1c1akxpQnZjaUJwZEhNZ1lXWm1hV3hwWVhSbGN5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjY2x4dUx5OGdVMUJFV0MxTWFXTmxibk5sTFVsa1pXNTBhV1pwWlhJNklFMUpWQzB3WEhKY2JseHlYRzR2S2lCbGMyeHBiblF0WkdsellXSnNaU0J1YnkxMWJuVnpaV1F0ZG1GeWN5QXFMMXh5WEc0dktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCdFlYZ3RZMnhoYzNObGN5MXdaWEl0Wm1sc1pTQXFMMXh5WEc1cGJYQnZjblFnUVc1cGJXRjBhVzl1Um1WaGRIVnlaVVJsY0dWdVpHVnVkRWx1ZEdWeVptRmpaU0JtY205dElDZGpiM0psTDJGdWFXMXdZV05yTDBGdWFXMWhkR2x2YmtabFlYUjFjbVZFWlhCbGJtUmxiblJKYm5SbGNtWmhZMlVuTzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVOc1lYTnpJR1poWTNSdmNua2dhVzUwWlhKbVlXTmxJR1p2Y2lCMGFHRjBJR3RsWlhCeklIUnlZV05ySUc5bUlHeGhlV1Z5Y3lCaGJtUWdZVzVwYldGMGFXOXVjeUJ2YmlCaElHaHZjM1F1WEhKY2JpQXFJRlJ5WVdOclpXUWdZWE56WlhSeklHRnlaU0J0WVhKclpXUWdZWE1nYVc1aFkzUnBkbVVnZFc1MGFXd2diR0Y1WlhKeklHRnVaQ0JoYm1sdFlYUnBiMjV6SUhkcGRHZ2diV0YwWTJocGJtZGNjbHh1SUNvZ2JtRnRaWE1nWVhKbElHUmxkR1ZqZEdWa0lHRnpJSEJ5WlhObGJuUWdiMjRnZEdobElHaHZjM1F1WEhKY2JpQXFYSEpjYmlBcUlFQnBiblJsY21aaFkyVmNjbHh1SUNvZ1FHVjRkR1Z1WkhNZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlZ4eVhHNGdLbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMDlpYW1WamRIMGdSRVZHUVZWTVZGOU1RVmxGVWw5UFVGUkpUMDVUSUMwZ1JHVm1ZWFZzZENCdmNIUnBiMjV6SUhSdklIVnpaU0IzYUdWdUlHVjRaV04xZEdsdVoxeHlYRzRnS2lCN1FHeHBibXNnUVc1cGJXRjBhVzl1VEdGNVpYSjlJRzFsZEdodlpITXVYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdiblZ0WW1WeWZTQmJSRVZHUVZWTVZGOU1RVmxGVWw5UFVGUkpUMDVUTG1Kc1pXNWtWR2x0WlQwd0xqVmRJQzBnUkdWbVlYVnNkQ0IwYVcxbElHbHVJSE5sWTI5dVpITmNjbHh1SUNvZ2RHOGdkWE5sSUhkb1pXNGdaWGhsWTNWMGFXNW5JSHRBYkdsdWF5QkJibWx0WVhScGIyNU1ZWGxsY2k1elpYUkNiR1Z1WkZkbGFXZG9kSDB1WEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0JiUkVWR1FWVk1WRjlNUVZsRlVsOVBVRlJKVDA1VExtRnVhVzFoZEdsdmJuTTllMzFkSUMwZ1RXRndjeUJoYm1sdFlYUnBiMjRnYm1GdFpYTmNjbHh1SUNvZ2RHOGdaR1ZtWVhWc2RDQnZjSFJwYjI1eklHOWlhbVZqZEhNZ2RHOGdkWE5sSUdadmNpQnRZVzVoWjJWa0lHRnVhVzFoZEdsdmJuTXVYSEpjYmlBcUwxeHlYRzVqYkdGemN5Qk5ZVzVoWjJWa1FXNXBiV0YwYVc5dVRHRjVaWEpKYm5SbGNtWmhZMlVnWlhoMFpXNWtjeUJCYm1sdFlYUnBiMjVHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUZEdGeWRDQjBjbUZqYTJsdVp5QnJaV1Z3YVc1bklIUnlZV05ySUc5bUlIZG9aWFJvWlhJZ1lTQnNZWGxsY2lCM2FYUm9JSFJvWlNCbmFYWmxiaUJ1WVcxbElHbHpJSEJ5WlhObGJuUmNjbHh1SUNBZ0tpQnZiaUIwYUdVZ2FHOXpkQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHOGdhMlZsY0NCMGNtRmpheUJ2Wmk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDE5SUc5d2RHbHZibk1nTFNCUGNIUnBiMjV6SUdadmNpQjBhR1VnYkdGNVpYSXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhJOWZTQnZjSFJwYjI1ekxtSnNaVzVrVkdsdFpTQXRJRVJsWm1GMWJIUWdZVzF2ZFc1MElHOW1JSFJwYldVZ2RHOGdkWE5sSUhkb1pXNWNjbHh1SUNBZ0tpQnRZVzVwY0hWc1lYUnBibWNnYkdGNVpYSWdkMlZwWjJoMGN5QnZiaUIwYUdseklHeGhlV1Z5TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCdmNIUnBiMjV6TG1WaGMybHVaMFp1SUMwZ1JHVm1ZWFZzZENCbFlYTnBibWNnWm5WdVkzUnBiMjRnZEc4Z2RYTmxJSGRvWlc1Y2NseHVJQ0FnS2lCdFlXNXBjSFZzWVhScGJtY2diR0Y1WlhJZ2QyVnBaMmgwY3lCdmJpQjBhR2x6SUd4aGVXVnlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMFBYMGdiM0IwYVc5dWN5NWhibWx0WVhScGIyNXpJQzBnUVc1cGJXRjBhVzl1Y3lCMGJ5QnJaV1Z3SUhSeVlXTnJJRzltSUc5dUlIUm9aU0JzWVhsbGNpNWNjbHh1SUNBZ0tpQkJibWx0WVhScGIyNXpJR0Z5WlNCeVpYQnlaWE5sYm5SbFpDQmhjeUJyWlhrdmRtRnNkV1VnY0dGcGNuTWdiMllnWVc1cGJXRjBhVzl1SUc1aGJXVnpJR0Z1WkNCMGFHVnBjbHh5WEc0Z0lDQXFJRzl3ZEdsdmJuTXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NtVm5hWE4wWlhKTVlYbGxjaWh1WVcxbExDQnZjSFJwYjI1eklEMGdlMzBwSUh0OVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk4wWVhKMElIUnlZV05yYVc1bklHdGxaWEJwYm1jZ2RISmhZMnNnYjJZZ2QyaGxkR2hsY2lCaGJpQmhibWx0WVhScGIyNGdkMmwwYUNCMGFHVWdaMmwyWlc0Z2JtRnRaU0JwYzF4eVhHNGdJQ0FxSUhCeVpYTmxiblFnYjI0Z2RHaGxJR2h2YzNRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdGNVpYSk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHaGhkQ0IzYVd4c0lHOTNiaUIwYUdVZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCaGJtbHRZWFJwYjI1T1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUlIUnZJR3RsWlhBZ2RISmhZMnNnYjJZdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1E5ZlNCdmNIUnBiMjV6SUMwZ1QzQjBhVzl1Y3lCbWIzSWdkR2hsSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J5WldkcGMzUmxja0Z1YVcxaGRHbHZiaWhzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVXNJRzl3ZEdsdmJuTWdQU0I3ZlNrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTJWMElHeGhlV1Z5SUhkbGFXZG9kSE1nYjI0Z2RISmhZMnRsWkNCc1lYbGxjbk11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYm1GdFpVWnBiSFJsY2lBdElGQnlaV1JwWTJGMFpTQm1kVzVqZEdsdmJpQjBieUIwWlhOMElHVmhZMmdnZEhKaFkydGxaQ0JzWVhsbGNseHlYRzRnSUNBcUlIZHBkR2d1SUVKNUlHUmxabUYxYkhRZ1lXeHNJR3hoZVdWeWN5QjNhV3hzSUhCaGMzTXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIZGxhV2RvZENBdElGZGxhV2RvZENCMllXeDFaU0IwYnlCelpYUWdiMjRnYkdGNVpYSnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeVBYMGdjMlZqYjI1a2N5QXRJRTUxYldKbGNpQnZaaUJ6WldOdmJtUnpJR2wwSUhkcGJHd2dkR0ZyWlNCMGJ5QnlaV0ZqYUNCMGFHVWdkMlZwWjJoMFhISmNiaUFnSUNvZ2IyNGdaV0ZqYUNCc1lYbGxjaTRnU1dZZ2RXNWtaV1pwYm1Wa0xDQmxZV05vSUd4aGVXVnljeWNnWW14bGJtUlVhVzFsSUc5d2RHbHZiaUJwY3lCMWMyVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0JsWVhOcGJtZEdiaUF0SUVWaGMybHVaeUJtZFc1amRHbHZiaUIwYnlCMWMyVWdkMmhsYmlCelpYUjBhVzVuSUhkbGFXZG9kRnh5WEc0Z0lDQXFJRzl1SUdWaFkyZ2diR0Y1WlhJdUlFbG1JSFZ1WkdWbWFXNWxaQ3dnWldGamFDQnNZWGxsY25NbklHVmhjMmx1WjBadUlHOXdkR2x2YmlCcGN5QjFjMlZrTGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE5sZEV4aGVXVnlWMlZwWjJoMGN5aHVZVzFsUm1sc2RHVnlJRDBnS0NrZ1BUNGdkSEoxWlN3Z2QyVnBaMmgwTENCelpXTnZibVJ6TENCbFlYTnBibWRHYmlrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTJWMElHRnNiQ0IwY21GamEyVmtJR3hoZVdWeWN5Y2dkMlZwWjJoMGN5QjBieUF4TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSTlmU0J6WldOdmJtUnpJQzBnVG5WdFltVnlJRzltSUhObFkyOXVaSE1nYVhRZ2QybHNiQ0IwWVd0bElIUnZJSEpsWVdOb0lIUm9aU0IzWldsbmFIUmNjbHh1SUNBZ0tpQnZiaUJsWVdOb0lHeGhlV1Z5TGlCSlppQjFibVJsWm1sdVpXUXNJR1ZoWTJnZ2JHRjVaWEp6SnlCaWJHVnVaRlJwYldVZ2IzQjBhVzl1SUdseklIVnpaV1F1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUdWaGMybHVaMFp1SUMwZ1JXRnphVzVuSUdaMWJtTjBhVzl1SUhSdklIVnpaU0IzYUdWdUlITmxkSFJwYm1jZ2QyVnBaMmgwWEhKY2JpQWdJQ29nYjI0Z1pXRmphQ0JzWVhsbGNpNGdTV1lnZFc1a1pXWnBibVZrTENCbFlXTm9JR3hoZVdWeWN5Y2daV0Z6YVc1blJtNGdiM0IwYVc5dUlHbHpJSFZ6WldRdVhISmNiaUFnSUNvdlhISmNiaUFnWlc1aFlteGxLSE5sWTI5dVpITXNJR1ZoYzJsdVowWnVLU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRaWFFnWVd4c0lIUnlZV05yWldRZ2JHRjVaWEp6SnlCM1pXbG5hSFJ6SUhSdklEQXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY2oxOUlITmxZMjl1WkhNZ0xTQk9kVzFpWlhJZ2IyWWdjMlZqYjI1a2N5QnBkQ0IzYVd4c0lIUmhhMlVnZEc4Z2NtVmhZMmdnZEdobElIZGxhV2RvZEZ4eVhHNGdJQ0FxSUc5dUlHVmhZMmdnYkdGNVpYSXVJRWxtSUhWdVpHVm1hVzVsWkN3Z1pXRmphQ0JzWVhsbGNuTW5JR0pzWlc1a1ZHbHRaU0J2Y0hScGIyNGdhWE1nZFhObFpDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdaV0Z6YVc1blJtNGdMU0JGWVhOcGJtY2dablZ1WTNScGIyNGdkRzhnZFhObElIZG9aVzRnYzJWMGRHbHVaeUIzWldsbmFIUmNjbHh1SUNBZ0tpQnZiaUJsWVdOb0lHeGhlV1Z5TGlCSlppQjFibVJsWm1sdVpXUXNJR1ZoWTJnZ2JHRjVaWEp6SnlCbFlYTnBibWRHYmlCdmNIUnBiMjRnYVhNZ2RYTmxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQmthWE5oWW14bEtITmxZMjl1WkhNc0lHVmhjMmx1WjBadUtTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ1kyeGhjM01nZEdoaGRDQnBiWEJzWlcxbGJuUnpJSHRBYkdsdWF5Qk5ZVzVoWjJWa1FXNXBiV0YwYVc5dVRHRjVaWEpKYm5SbGNtWmhZMlY5WEhKY2JpQWdJQ29nWVc1a0lHVjRkR1Z1WkhNZ1lTQnpjR1ZqYVdacFpXUWdZbUZ6WlNCamJHRnpjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRMnhoYzNOOUlFSmhjMlZEYkdGemN5QXRJRlJvWlNCamJHRnpjeUIwYnlCbGVIUmxibVF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHREYkdGemMzMGdRU0JqYkdGemN5QjBhR0YwSUdWNGRHVnVaSE1nWUVKaGMyVkRiR0Z6YzJBZ1lXNWtJR2x0Y0d4bGJXVnVkSE1nZTBCc2FXNXJJRTFoYm1GblpXUkJibWx0WVhScGIyNU1ZWGxsY2tsdWRHVnlabUZqWlgwdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRTFwZUdsdUtFSmhjMlZEYkdGemN5a2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ1VHRnlaVzUwUTJ4aGMzTWdQU0JCYm1sdFlYUnBiMjVHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxMazFwZUdsdUtFSmhjMlZEYkdGemN5azdYSEpjYmlBZ0lDQmpiMjV6ZENCTllXNWhaMlZrUVc1cGJXRjBhVzl1VEdGNVpYSk5hWGhwYmlBOUlHTnNZWE56SUdWNGRHVnVaSE1nVUdGeVpXNTBRMnhoYzNNZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZEhKMVkzUnZjaWd1TGk1aGNtZHpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2MzVndaWElvTGk0dVlYSm5jeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk1nUFNCN2ZUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1gyOXVSbVZoZEhWeVpVRmtaR1ZrS0hSNWNHVk9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdjM1Z3WlhJdVgyOXVSbVZoZEhWeVpVRmtaR1ZrS0hSNWNHVk9ZVzFsS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1ZPWVcxbElDRTlQU0FuUVc1cGJXRjBhVzl1Um1WaGRIVnlaU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk1nUFNCMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKeklIeDhJSHQ5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRVpYUmxZM1FnYm1WM0lHeGhlV1Z5YzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJodmMzUXVRVzVwYldGMGFXOXVSbVZoZEhWeVpTNXNZWGxsY25NdVptOXlSV0ZqYUNodVlXMWxJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVUR0Y1WlhKQlpHUmxaQ2g3Ym1GdFpYMHBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCZmIyNUdaV0YwZFhKbFVtVnRiM1psWkNoMGVYQmxUbUZ0WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4xY0dWeUxsOXZia1psWVhSMWNtVlNaVzF2ZG1Wa0tIUjVjR1ZPWVcxbEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWT1lXMWxJQ0U5UFNBblFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFoYm1GblpXUk1ZWGxsY25NZ1BTQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpJSHg4SUh0OU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkVaV0ZqZEdsMllYUmxJSFJvWlNCc1lYbGxjbk5jY2x4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpLUzVtYjNKRllXTm9LRzVoYldVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1TVlYbGxjbEpsYlc5MlpXUW9lMjVoYldWOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWDI5dVRHRjVaWEpCWkdSbFpDaDdibUZ0WlgwcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCTllYSnJJSFJvWlNCc1lYbGxjaUJoY3lCaFkzUnBkbVVnYVdZZ2FYUWdhWE1nYldGdVlXZGxaRnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMjVoYldWZElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk5iYm1GdFpWMHVhWE5CWTNScGRtVWdQU0IwY25WbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJRVJsZEdWamRDQnVaWGNnWVc1cGJXRjBhVzl1YzF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbWRsZEVGdWFXMWhkR2x2Ym5Nb2JtRnRaU2t1Wm05eVJXRmphQ2hoYm1sdFRtRnRaU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjl1UVc1cGJXRjBhVzl1UVdSa1pXUW9lMnhoZVdWeVRtRnRaVG9nYm1GdFpTd2dZVzVwYldGMGFXOXVUbUZ0WlRvZ1lXNXBiVTVoYldWOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdYMjl1VEdGNVpYSlNaVzF2ZG1Wa0tIdHVZVzFsZlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUVSbFlXTjBhWFpoZEdVZ2RHaGxJR3hoZVdWeUlHbG1JR2wwSUdseklHMWhibUZuWldSY2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0dVlXMWxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKelcyNWhiV1ZkTG1selFXTjBhWFpsSUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVmhZM1JwZG1GMFpTQjBhR1VnWVc1cGJXRjBhVzl1YzF4eVhHNGdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0dVlXMWxYUzVoYm1sdFlYUnBiMjV6S1M1bWIzSkZZV05vS0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFRtRnRaU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1QmJtbHRZWFJwYjI1U1pXMXZkbVZrS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhlV1Z5VG1GdFpUb2dibUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrNWhiV1U2SUdGdWFXMU9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1gyOXVUR0Y1WlhKU1pXNWhiV1ZrS0h0dmJHUk9ZVzFsTENCdVpYZE9ZVzFsZlNrZ2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHeGhlV1Z5VDNCMGFXOXVjeUE5SUhSb2FYTXVYMjFoYm1GblpXUk1ZWGxsY25OYmIyeGtUbUZ0WlYwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklGSmxjR3hoWTJVZ2RHaGxJR3hoZVdWeUlHdGxlU0IzYVhSb0lIUm9aU0J1WlhjZ2JtRnRaVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHNZWGxsY2s5d2RHbHZibk1nSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVYMjFoYm1GblpXUk1ZWGxsY25OYmIyeGtUbUZ0WlYwN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXRZVzVoWjJWa1RHRjVaWEp6VzI1bGQwNWhiV1ZkSUQwZ2JHRjVaWEpQY0hScGIyNXpPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWDI5dVFXNXBiV0YwYVc5dVFXUmtaV1FvZTJ4aGVXVnlUbUZ0WlN3Z1lXNXBiV0YwYVc5dVRtRnRaWDBwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJOWVhKcklIUm9aU0JoYm1sdFlYUnBiMjRnWVhNZ1lXTjBhWFpsSUdsbUlHbDBJR2x6SUcxaGJtRm5aV1JjY2x4dUlDQWdJQ0FnSUNCcFppQW9YSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKelcyeGhlV1Z5VG1GdFpWMGdJVDA5SUhWdVpHVm1hVzVsWkNBbUpseHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0c1lYbGxjazVoYldWZExtRnVhVzFoZEdsdmJuTmJZVzVwYldGMGFXOXVUbUZ0WlYwZ0lUMDlJSFZ1WkdWbWFXNWxaRnh5WEc0Z0lDQWdJQ0FnSUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0c1lYbGxjazVoYldWZExtRnVhVzFoZEdsdmJuTmJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrNWhiV1ZjY2x4dUlDQWdJQ0FnSUNBZ0lGMHVhWE5CWTNScGRtVWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdYMjl1UVc1cGJXRjBhVzl1VW1WdGIzWmxaQ2g3YkdGNVpYSk9ZVzFsTENCaGJtbHRZWFJwYjI1T1lXMWxmU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRVJsWVdOMGFYWmhkR1VnZEdobElHRnVhVzFoZEdsdmJpQnBaaUJwZENCcGN5QnRZVzVoWjJWa1hISmNiaUFnSUNBZ0lDQWdhV1lnS0Z4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJXRnVZV2RsWkV4aGVXVnljMXRzWVhsbGNrNWhiV1ZkSUNFOVBTQjFibVJsWm1sdVpXUWdKaVpjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDIxaGJtRm5aV1JNWVhsbGNuTmJiR0Y1WlhKT1lXMWxYUzVoYm1sdFlYUnBiMjV6VzJGdWFXMWhkR2x2Yms1aGJXVmRJQ0U5UFNCMWJtUmxabWx1WldSY2NseHVJQ0FnSUNBZ0lDQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDIxaGJtRm5aV1JNWVhsbGNuTmJiR0Y1WlhKT1lXMWxYUzVoYm1sdFlYUnBiMjV6VzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVPWVcxbFhISmNiaUFnSUNBZ0lDQWdJQ0JkTG1selFXTjBhWFpsSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCZmIyNUJibWx0WVhScGIyNVNaVzVoYldWa0tIdHNZWGxsY2s1aGJXVXNJRzlzWkU1aGJXVXNJRzVsZDA1aGJXVjlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLRnh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWmNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFoYm1GblpXUk1ZWGxsY25OYmJHRjVaWEpPWVcxbFhTNWhibWx0WVhScGIyNXpXMjlzWkU1aGJXVmRJQ0U5UFNCMWJtUmxabWx1WldSY2NseHVJQ0FnSUNBZ0lDQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJRkpsY0d4aFkyVWdkR2hsSUdGdWFXMWhkR2x2YmlCclpYa2dkMmwwYUNCMGFHVWdibVYzSUc1aGJXVmNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0Z1YVcxUGNIUnBiMjV6SUQwZ2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRMbUZ1YVcxaGRHbHZibk5iWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzlzWkU1aGJXVmNjbHh1SUNBZ0lDQWdJQ0FnSUYwN1hISmNiaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmJXRnVZV2RsWkV4aGVXVnljMXRzWVhsbGNrNWhiV1ZkTG1GdWFXMWhkR2x2Ym5OYmIyeGtUbUZ0WlYwN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXRZVzVoWjJWa1RHRjVaWEp6VzJ4aGVXVnlUbUZ0WlYwdVlXNXBiV0YwYVc5dWMxdHVaWGRPWVcxbFhTQTlJR0Z1YVcxUGNIUnBiMjV6TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2NtVm5hWE4wWlhKTVlYbGxjaWh1WVcxbExDQnZjSFJwYjI1eklEMGdlMzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJUZEdGeWRDQjNhWFJvSUdSbFptRjFiSFFnYjNCMGFXOXVjeUJtYjNJZ1pXRmphQ0J1WlhjZ2JHRjVaWEpjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmJXRnVZV2RsWkV4aGVXVnljMXR1WVcxbFhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXRZVzVoWjJWa1RHRjVaWEp6VzI1aGJXVmRJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1MGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtSRlJrRlZURlJmVEVGWlJWSmZUMUJVU1U5T1V5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dWN6b2dlMzBzWEhKY2JpQWdJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsSUdGc2JDQnZjSFJwYjI1eklHVjRZMlZ3ZENCaGJtbHRZWFJwYjI1elhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEpQY0hScGIyNXpJRDBnZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0dVlXMWxYVHRjY2x4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2V5NHVMbTl3ZEdsdmJuTjlPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR0Z1YVcxaGRHbHZiazl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpMbUZ1YVcxaGRHbHZibk1nZkh3Z2UzMDdYSEpjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJRzl3ZEdsdmJuTXVZVzVwYldGMGFXOXVjenRjY2x4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLR3hoZVdWeVQzQjBhVzl1Y3l3Z2IzQjBhVzl1Y3lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFTm9aV05ySUhkb1pYUm9aWElnZEdobElHeGhlV1Z5SUdOaGJpQmlaU0J0WVc1cGNIVnNZWFJsWkNCdWIzZGNjbHh1SUNBZ0lDQWdJQ0JzWVhsbGNrOXdkR2x2Ym5NdWFYTkJZM1JwZG1VZ1BWeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhRzl6ZEM1QmJtbHRZWFJwYjI1R1pXRjBkWEpsSUNFOVBTQjFibVJsWm1sdVpXUWdKaVpjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJodmMzUXVRVzVwYldGMGFXOXVSbVZoZEhWeVpTNXNZWGxsY25NdWFXNWpiSFZrWlhNb2JtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZKbFoybHpkR1Z5SUhSb1pTQmhibWx0WVhScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9ZVzVwYldGMGFXOXVUM0IwYVc5dWN5a3VabTl5UldGamFDZ29XMkZ1YVcxT1lXMWxMQ0JoYm1sdFQzQjBhVzl1YzEwcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WbmFYTjBaWEpCYm1sdFlYUnBiMjRvYm1GdFpTd2dZVzVwYlU1aGJXVXNJR0Z1YVcxUGNIUnBiMjV6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdjbVZuYVhOMFpYSkJibWx0WVhScGIyNG9iR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbExDQnZjSFJwYjI1eklEMGdlMzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJTWldkcGMzUmxjaUIwYUdVZ2JHRjVaWElnYVdZZ2FYUWdhR0Z6YmlkMElHSmxaVzRnY21WbmFYTjBaWEpsWkNCNVpYUmNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZuYVhOMFpYSk1ZWGxsY2loc1lYbGxjazVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnVlhCa1lYUmxJR0Z1YVcxaGRHbHZiaUJ2Y0hScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZVzVwYlU5d2RHbHZibk1nUFZ4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJXRnVZV2RsWkV4aGVXVnljMXRzWVhsbGNrNWhiV1ZkTG1GdWFXMWhkR2x2Ym5OYllXNXBiV0YwYVc5dVRtRnRaVjBnZkh3Z2UzMDdYSEpjYmlBZ0lDQWdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaGhibWx0VDNCMGFXOXVjeXdnYjNCMGFXOXVjeWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRMbUZ1YVcxaGRHbHZibk5iWVc1cGJXRjBhVzl1VG1GdFpWMGdQU0JoYm1sdFQzQjBhVzl1Y3p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGxZMnNnZDJobGRHaGxjaUIwYUdVZ1lXNXBiV0YwYVc5dUlHTmhiaUJpWlNCdFlXNXBjSFZzWVhSbFpDQnViM2RjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKelcyeGhlV1Z5VG1GdFpWMHVZVzVwYldGMGFXOXVjMXRoYm1sdFlYUnBiMjVPWVcxbFhTNXBjMEZqZEdsMlpTQTlYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKelcyeGhlV1Z5VG1GdFpWMHVhWE5CWTNScGRtVWdKaVpjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJodmMzUXVRVzVwYldGMGFXOXVSbVZoZEhWeVpTNW5aWFJCYm1sdFlYUnBiMjV6S0d4aGVXVnlUbUZ0WlNrdWFXNWpiSFZrWlhNb1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2Yms1aGJXVmNjbHh1SUNBZ0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhObGRFeGhlV1Z5VjJWcFoyaDBjeWh1WVcxbFJtbHNkR1Z5SUQwZ0tDa2dQVDRnZEhKMVpTd2dkMlZwWjJoMExDQnpaV052Ym1SekxDQmxZWE5wYm1kR2Jpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3hoZVdWeVRtRnRaWE1nUFNCUFltcGxZM1F1YTJWNWN5aDBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpLUzVtYVd4MFpYSW9ibUZ0WlVacGJIUmxjaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hoZVdWeVRtRnRaWE11Wm05eVJXRmphQ2h1WVcxbElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUd4aGVXVnlUM0IwYVc5dWN5QTlJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk5iYm1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlUM0IwYVc5dWN5NXBjMEZqZEdsMlpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b2IzTjBMa0Z1YVcxaGRHbHZia1psWVhSMWNtVXVjMlYwVEdGNVpYSlhaV2xuYUhRb1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IzWldsbmFIUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZqYjI1a2N5QWhQVDBnZFc1a1pXWnBibVZrSUQ4Z2MyVmpiMjVrY3lBNklHeGhlV1Z5VDNCMGFXOXVjeTVpYkdWdVpGUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWldGemFXNW5SbTRnZkh3Z2JHRjVaWEpQY0hScGIyNXpMbVZoYzJsdVowWnVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1Z1WVdKc1pTaHpaV052Ym1SekxDQmxZWE5wYm1kR2Jpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVEdGNVpYSlhaV2xuYUhSektIVnVaR1ZtYVc1bFpDd2dNU3dnYzJWamIyNWtjeXdnWldGemFXNW5SbTRwTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JrYVhOaFlteGxLSE5sWTI5dVpITXNJR1ZoYzJsdVowWnVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSTVlYbGxjbGRsYVdkb2RITW9kVzVrWldacGJtVmtMQ0F3TENCelpXTnZibVJ6TENCbFlYTnBibWRHYmlrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdsdWMzUmhiR3hCY0drb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZWEJwSUQwZ2MzVndaWEl1YVc1emRHRnNiRUZ3YVNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLR0Z3YVN3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WbmFYTjBaWEpNWVhsbGNqb2dkR2hwY3k1eVpXZHBjM1JsY2t4aGVXVnlMbUpwYm1Rb2RHaHBjeWtzWEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV2RwYzNSbGNrRnVhVzFoZEdsdmJqb2dkR2hwY3k1eVpXZHBjM1JsY2tGdWFXMWhkR2x2Ymk1aWFXNWtLSFJvYVhNcExGeHlYRzRnSUNBZ0lDQWdJQ0FnYzJWMFRHRjVaWEpYWldsbmFIUnpPaUIwYUdsekxuTmxkRXhoZVdWeVYyVnBaMmgwY3k1aWFXNWtLSFJvYVhNcExGeHlYRzRnSUNBZ0lDQWdJQ0FnWlc1aFlteGxPaUIwYUdsekxtVnVZV0pzWlM1aWFXNWtLSFJvYVhNcExGeHlYRzRnSUNBZ0lDQWdJQ0FnWkdsellXSnNaVG9nZEdocGN5NWthWE5oWW14bExtSnBibVFvZEdocGN5a3NYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJoY0drN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9UV0Z1WVdkbFpFRnVhVzFoZEdsdmJreGhlV1Z5VFdsNGFXNHNJSHRjY2x4dUlDQWdJQ0FnUkVWR1FWVk1WRjlNUVZsRlVsOVBVRlJKVDA1VE9pQjdYSEpjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJRTFoYm1GblpXUkJibWx0WVhScGIyNU1ZWGxsY2tsdWRHVnlabUZqWlM1RVJVWkJWVXhVWDB4QldVVlNYMDlRVkVsUFRsTXNYSEpjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUdaaGJITmxMRnh5WEc0Z0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlFMWhibUZuWldSQmJtbHRZWFJwYjI1TVlYbGxjazFwZUdsdU8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb1RXRnVZV2RsWkVGdWFXMWhkR2x2Ymt4aGVXVnlTVzUwWlhKbVlXTmxMQ0I3WEhKY2JpQWdSRVZHUVZWTVZGOU1RVmxGVWw5UFVGUkpUMDVUT2lCN1hISmNiaUFnSUNCMllXeDFaVG9nZTJKc1pXNWtWR2x0WlRvZ01DNDFMQ0JoYm1sdFlYUnBiMjV6T2lCN2ZYMHNYSEpjYmlBZ0lDQjNjbWwwWVdKc1pUb2dabUZzYzJVc1hISmNiaUFnZlN4Y2NseHVmU2s3WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQk5ZVzVoWjJWa1FXNXBiV0YwYVc5dVRHRjVaWEpKYm5SbGNtWmhZMlU3WEhKY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCQmJXRjZiMjR1WTI5dExDQkpibU11SUc5eUlHbDBjeUJoWm1acGJHbGhkR1Z6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHlYRzR2THlCVFVFUllMVXhwWTJWdWMyVXRTV1JsYm5ScFptbGxjam9nVFVsVUxUQmNjbHh1WEhKY2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHMWhlQzFqYkdGemMyVnpMWEJsY2kxbWFXeGxJQ292WEhKY2JtbHRjRzl5ZENCR1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sSUdaeWIyMGdKMk52Y21VdlJtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlNjN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EyeGhjM01nWm1GamRHOXllU0JwYm5SbGNtWmhZMlVnWm05eUlHWmxZWFIxY21WeklIUm9ZWFFnWVhKbElHUmxjR1Z1WkdWdWRDQnZiaUIwYUdVZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpWeHlYRzRnS2lCaVpXbHVaeUJ3Y21WelpXNTBJRzl1SUhSb1pTQm9iM04wTGlCVGNHVmxZMmdnWlhabGJuUnpJSGRwYkd3Z1lYVjBiMjFoZEdsallXeHNlU0JpWlNCc2FYTjBaVzVsWkNCbWIzSWdiMjVqWlNCaFhISmNiaUFxSUZSbGVIUlViMU53WldWamFFWmxZWFIxY21VZ2FYTWdZV1JrWldRZ2RHOGdkR2hsSUdodmMzUWdZVzVrSUhOMGIzQndaV1FnYjI1alpTQnBkQ0JwY3lCeVpXMXZkbVZrTGx4eVhHNGdLbHh5WEc0Z0tpQkFhVzUwWlhKbVlXTmxYSEpjYmlBcUlFQmxlSFJsYm1SeklFWmxZWFIxY21WRVpYQmxibVJsYm5SSmJuUmxjbVpoWTJWY2NseHVJQ3BjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRQWW1wbFkzUjlJRVZXUlU1VVgwUkZVRVZPUkVWT1EwbEZVeUF0SUVWMlpXNTBjeUIwYUdGMElIUm9aU0JtWldGMGRYSmxJSE5vYjNWc1pDQnpkR0Z5ZEM5emRHOXdYSEpjYmlBcUlHeHBjM1JsYm1sdVp5Qm1iM0lnZDJobGJpQmhJR1psWVhSMWNtVWdiMllnZEhsd1pTQkdaV0YwZFhKbFRtRnRaU0JwY3lCaFpHUmxaQzl5WlcxdmRtVmtJR1p5YjIwZ2RHaGxJR2h2YzNRdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN1QySnFaV04wZlNCRlZrVk9WRjlFUlZCRlRrUkZUa05KUlZNdVZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTQXRJRVYyWlc1MGN5QjBhR0YwSUdGeVpWeHlYRzRnS2lCemNHVmphV1pwWXlCMGJ5QjBhR1VnVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlM1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUZ0RlZrVk9WRjlFUlZCRlRrUkZUa05KUlZNdVZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTNXdiR0Y1UFNkZmIyNVFiR0Y1SjEwZ0xWeHlYRzRnS2lCVWFHVWdibUZ0WlNCdlppQjBhR1VnYldWMGFHOWtJSFJvWVhRZ2QybHNiQ0JpWlNCbGVHVmpkWFJsWkNCM2FHVnVJRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVnY0d4aGVWeHlYRzRnS2lCbGRtVnVkSE1nWVhKbElHVnRhWFIwWldRdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJmUkVWUVJVNUVSVTVEU1VWVExsUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVXVjR0YxYzJVOUoxOXZibEJoZFhObEoxMGdMVnh5WEc0Z0tpQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ2JXVjBhRzlrSUhSb1lYUWdkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDQjNhR1Z1SUZSbGVIUlViMU53WldWamFFWmxZWFIxY21VZ2NHRjFjMlZjY2x4dUlDb2daWFpsYm5SeklHRnlaU0JsYldsMGRHVmtMbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdXMFZXUlU1VVgwUkZVRVZPUkVWT1EwbEZVeTVVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsTG5KbGMzVnRaVDBuWDI5dVVtVnpkVzFsSjEwZ0xWeHlYRzRnS2lCVWFHVWdibUZ0WlNCdlppQjBhR1VnYldWMGFHOWtJSFJvWVhRZ2QybHNiQ0JpWlNCbGVHVmpkWFJsWkNCM2FHVnVJRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVnY21WemRXMWxYSEpjYmlBcUlHVjJaVzUwY3lCaGNtVWdaVzFwZEhSbFpDNWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkY5RVJWQkZUa1JGVGtOSlJWTXVWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaUzV6ZEc5d1BTZGZiMjVUZEc5d0oxMGdMVnh5WEc0Z0tpQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ2JXVjBhRzlrSUhSb1lYUWdkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDQjNhR1Z1SUZSbGVIUlViMU53WldWamFFWmxZWFIxY21VZ2MzUnZjRnh5WEc0Z0tpQmxkbVZ1ZEhNZ1lYSmxJR1Z0YVhSMFpXUXVYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQmJSVlpGVGxSZlJFVlFSVTVFUlU1RFNVVlRMbFJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVV1YzJWdWRHVnVZMlU5SjE5dmJsTmxiblJsYm1ObEoxMGdMVnh5WEc0Z0tpQlVhR1VnYm1GdFpTQnZaaUIwYUdVZ2JXVjBhRzlrSUhSb1lYUWdkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDQjNhR1Z1SUZSbGVIUlViMU53WldWamFFWmxZWFIxY21VZ2MyVnVkR1Z1WTJWY2NseHVJQ29nWlhabGJuUnpJR0Z5WlNCbGJXbDBkR1ZrTGx4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzBWV1JVNVVYMFJGVUVWT1JFVk9RMGxGVXk1VVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbExuZHZjbVE5SjE5dmJsZHZjbVFuWFNBdFhISmNiaUFxSUZSb1pTQnVZVzFsSUc5bUlIUm9aU0J0WlhSb2IyUWdkR2hoZENCM2FXeHNJR0psSUdWNFpXTjFkR1ZrSUhkb1pXNGdWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaU0IzYjNKa1hISmNiaUFxSUdWMlpXNTBjeUJoY21VZ1pXMXBkSFJsWkM1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUZ0RlZrVk9WRjlFUlZCRlRrUkZUa05KUlZNdVZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTNTJhWE5sYldVOUoxOXZibFpwYzJWdFpTZGRJQzFjY2x4dUlDb2dWR2hsSUc1aGJXVWdiMllnZEdobElHMWxkR2h2WkNCMGFHRjBJSGRwYkd3Z1ltVWdaWGhsWTNWMFpXUWdkMmhsYmlCVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbElIWnBjMlZ0WlZ4eVhHNGdLaUJsZG1WdWRITWdZWEpsSUdWdGFYUjBaV1F1WEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JiUlZaRlRsUmZSRVZRUlU1RVJVNURTVVZUTGxSbGVIUlViMU53WldWamFFWmxZWFIxY21VdWMzTnRiRDBuWDI5dVUzTnRiQ2RkSUMxY2NseHVJQ29nVkdobElHNWhiV1VnYjJZZ2RHaGxJRzFsZEdodlpDQjBhR0YwSUhkcGJHd2dZbVVnWlhobFkzVjBaV1FnZDJobGJpQlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxJSE56Yld4Y2NseHVJQ29nWlhabGJuUnpJR0Z5WlNCbGJXbDBkR1ZrTGx4eVhHNGdLaTljY2x4dVkyeGhjM01nVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlNCbGVIUmxibVJ6SUVabFlYUjFjbVZFWlhCbGJtUmxiblJKYm5SbGNtWmhZMlVnZTF4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVWNFpXTjFkR1ZrSUhkb1pXNGdjM0JsWldOb0lIQnNZWGtnWlhabGJuUnpJR0Z5WlNCallYVm5hSFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXZibEJzWVhrb0tTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsWkNCM2FHVnVJSE53WldWamFDQndZWFZ6WlNCbGRtVnVkSE1nWVhKbElHTmhkV2RvZEM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ292WEhKY2JpQWdYMjl1VUdGMWMyVW9LU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkZlR1ZqZFhSbFpDQjNhR1Z1SUhOd1pXVmphQ0J5WlhOMWJXVWdaWFpsYm5SeklHRnlaU0JqWVhWbmFIUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcUwxeHlYRzRnSUY5dmJsSmxjM1Z0WlNncElIdDlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVWNFpXTjFkR1ZrSUhkb1pXNGdjM0JsWldOb0lITjBiM0FnWlhabGJuUnpJR0Z5WlNCallYVm5hSFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXZibE4wYjNBb0tTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsWkNCM2FHVnVJSE53WldWamFDQnpaVzUwWlc1alpTQmxkbVZ1ZEhNZ1lYSmxJR05oZFdkb2RDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNvdlhISmNiaUFnWDI5dVUyVnVkR1Z1WTJVb0tTQjdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRmVHVmpkWFJsWkNCM2FHVnVJSE53WldWamFDQjNiM0prSUdWMlpXNTBjeUJoY21VZ1kyRjFaMmgwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLaTljY2x4dUlDQmZiMjVYYjNKa0tDa2dlMzFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JYaGxZM1YwWldRZ2QyaGxiaUJ6Y0dWbFkyZ2dkbWx6WlcxbElHVjJaVzUwY3lCaGNtVWdZMkYxWjJoMExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2k5Y2NseHVJQ0JmYjI1V2FYTmxiV1VvS1NCN2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJGZUdWamRYUmxaQ0IzYUdWdUlITndaV1ZqYUNCemMyMXNJR1YyWlc1MGN5QmhjbVVnWTJGMVoyaDBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNjbHh1SUNBZ0tpOWNjbHh1SUNCZmIyNVRjMjFzS0NrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUdOc1lYTnpJSFJvWVhRZ2FXMXdiR1Z0Wlc1MGN5QjdRR3hwYm1zZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpVUmxjR1Z1WkdWdWRFbHVkR1Z5Wm1GalpYMWNjbHh1SUNBZ0tpQmhibVFnWlhoMFpXNWtjeUJoSUhOd1pXTnBabWxsWkNCaVlYTmxJR05zWVhOekxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0RGJHRnpjMzBnUW1GelpVTnNZWE56SUMwZ1ZHaGxJR05zWVhOeklIUnZJR1Y0ZEdWdVpDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY200Z2UwTnNZWE56ZlNCQklHTnNZWE56SUhSb1lYUWdaWGgwWlc1a2N5QmdRbUZ6WlVOc1lYTnpZQ0JoYm1RZ2FXMXdiR1Z0Wlc1MGN5QjdRR3hwYm1zZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpVUmxjR1Z1WkdWdWRFbHVkR1Z5Wm1GalpYMHVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUUxcGVHbHVLRUpoYzJWRGJHRnpjeWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdVR0Z5Wlc1MFEyeGhjM01nUFNCR1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sTGsxcGVHbHVLRUpoYzJWRGJHRnpjeWs3WEhKY2JpQWdJQ0JqYjI1emRDQlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxSR1Z3Wlc1a1pXNTBUV2w0YVc0Z1BTQmpiR0Z6Y3lCbGVIUmxibVJ6SUZCaGNtVnVkRU5zWVhOeklIdGNjbHh1SUNBZ0lDQWdYMjl1VUd4aGVTZ3BJSHQ5WEhKY2JseHlYRzRnSUNBZ0lDQmZiMjVRWVhWelpTZ3BJSHQ5WEhKY2JseHlYRzRnSUNBZ0lDQmZiMjVTWlhOMWJXVW9LU0I3ZlZ4eVhHNWNjbHh1SUNBZ0lDQWdYMjl1VTNSdmNDZ3BJSHQ5WEhKY2JseHlYRzRnSUNBZ0lDQmZiMjVUWlc1MFpXNWpaU2dwSUh0OVhISmNibHh5WEc0Z0lDQWdJQ0JmYjI1WGIzSmtLQ2tnZTMxY2NseHVYSEpjYmlBZ0lDQWdJRjl2YmxacGMyVnRaU2dwSUh0OVhISmNibHh5WEc0Z0lDQWdJQ0JmYjI1VGMyMXNLQ2tnZTMxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpVUmxjR1Z1WkdWdWRFMXBlR2x1TENCN1hISmNiaUFnSUNBZ0lFVldSVTVVWDBSRlVFVk9SRVZPUTBsRlV6b2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQXVMaTVRWVhKbGJuUkRiR0Z6Y3k1RlZrVk9WRjlFUlZCRlRrUkZUa05KUlZNc1hISmNiaUFnSUNBZ0lDQWdJQ0F1TGk1VVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbFJHVndaVzVrWlc1MFNXNTBaWEptWVdObExrVldSVTVVWDBSRlVFVk9SRVZPUTBsRlV5eGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsUkdWd1pXNWtaVzUwVFdsNGFXNDdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aFVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxMQ0I3WEhKY2JpQWdSVlpGVGxSZlJFVlFSVTVFUlU1RFNVVlRPaUI3WEhKY2JpQWdJQ0IyWVd4MVpUb2dlMXh5WEc0Z0lDQWdJQ0JVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsT2lCN1hISmNiaUFnSUNBZ0lDQWdjR3hoZVRvZ0oxOXZibEJzWVhrbkxGeHlYRzRnSUNBZ0lDQWdJSEJoZFhObE9pQW5YMjl1VUdGMWMyVW5MRnh5WEc0Z0lDQWdJQ0FnSUhKbGMzVnRaVG9nSjE5dmJsSmxjM1Z0WlNjc1hISmNiaUFnSUNBZ0lDQWdjM1J2Y0RvZ0oxOXZibE4wYjNBbkxGeHlYRzRnSUNBZ0lDQWdJSE5sYm5SbGJtTmxPaUFuWDI5dVUyVnVkR1Z1WTJVbkxGeHlYRzRnSUNBZ0lDQWdJSGR2Y21RNklDZGZiMjVYYjNKa0p5eGNjbHh1SUNBZ0lDQWdJQ0IyYVhObGJXVTZJQ2RmYjI1V2FYTmxiV1VuTEZ4eVhHNGdJQ0FnSUNBZ0lITnpiV3c2SUNkZmIyNVRjMjFzSnl4Y2NseHVJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQjNjbWwwWVdKc1pUb2dabUZzYzJVc1hISmNiaUFnZlN4Y2NseHVmU2s3WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNibWx0Y0c5eWRDQk5ZWFJvVlhScGJITWdabkp2YlNBbkxpOU5ZWFJvVlhScGJITW5PMXh5WEc1cGJYQnZjblFnZTFGMVlXUnlZWFJwWTMwZ1puSnZiU0FuTGk5aGJtbHRjR0ZqYXk5RllYTnBibWNuTzF4eVhHNXBiWEJ2Y25RZ1RXRnVZV2RsWkVGdWFXMWhkR2x2Ymt4aGVXVnlTVzUwWlhKbVlXTmxJR1p5YjIwZ0p5NHZZVzVwYlhCaFkyc3ZUV0Z1WVdkbFpFRnVhVzFoZEdsdmJreGhlV1Z5U1c1MFpYSm1ZV05sSnp0Y2NseHVhVzF3YjNKMElGUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVkVaWEJsYm1SbGJuUkpiblJsY21aaFkyVWdabkp2YlNBbkxpOWhkM053WVdOckwxUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVkVaWEJsYm1SbGJuUkpiblJsY21aaFkyVW5PMXh5WEc1cGJYQnZjblFnUVdKemRISmhZM1JJYjNOMFJtVmhkSFZ5WlNCbWNtOXRJQ2N1TDBGaWMzUnlZV04wU0c5emRFWmxZWFIxY21Vbk8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFUmxabUYxYkhRZ2JXRndjR2x1WnlCdlppQlFiMnhzZVNCMmFYTmxiV1VnYm1GdFpYTWdkRzhnWVc1cGJXRjBhVzl1SUc5d2RHbHZibk1nYjJKcVpXTjBjeTVjY2x4dUlDcGNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdFBZbXBsWTNSOUlGdHphV3c5ZTI1aGJXVTZJQ2R6YVd3bmZWMWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdFBZbXBsWTNSOUlGdHdQWHR1WVcxbE9pQW5jQ2NzSUc5MlpYSnlhV1JsVjJWcFoyaDBPaUF3TGpsOVhWeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwOWlhbVZqZEgwZ1czUTllMjVoYldVNklDZDBKeXdnWW14bGJtUlVhVzFsT2lBd0xqSjlYVnh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMDlpYW1WamRIMGdXMU05ZTI1aGJXVTZJQ2RUSjMxZFhISmNiaUFxSUVCd2NtOXdaWEowZVNCN1QySnFaV04wZlNCYlZEMTdibUZ0WlRvZ0oxUW5mVjFjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRQWW1wbFkzUjlJRnRtUFh0dVlXMWxPaUFuWmljc0lHOTJaWEp5YVdSbFYyVnBaMmgwT2lBd0xqYzFmVjFjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRQWW1wbFkzUjlJRnRyUFh0dVlXMWxPaUFuYXlkOVhWeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwOWlhbVZqZEgwZ1cyazllMjVoYldVNklDZHBKMzFkWEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0JiY2oxN2JtRnRaVG9nSjNJbmZWMWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdFBZbXBsWTNSOUlGdHpQWHR1WVcxbE9pQW5jeWNzSUdKc1pXNWtWR2x0WlRvZ01DNHlOWDFkWEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0JiZFQxN2JtRnRaVG9nSjNVbmZWMWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdFBZbXBsWTNSOUlGdEFQWHR1WVcxbE9pQW5RQ2Q5WFZ4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTA5aWFtVmpkSDBnVzJFOWUyNWhiV1U2SUNkaEozMWRYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdUMkpxWldOMGZTQmJaVDE3Ym1GdFpUb2dKMlVuTENCaWJHVnVaRlJwYldVNklEQXVNbjFkWEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0JiUlQxN2JtRnRaVG9nSjBVbmZWMWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdFBZbXBsWTNSOUlGdHZQWHR1WVcxbE9pQW5ieWQ5WFZ4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTA5aWFtVmpkSDBnVzA4OWUyNWhiV1U2SUNkUEozMWRYSEpjYmlBcUwxeHlYRzVqYjI1emRDQkVaV1poZFd4MFZtbHpaVzFsVFdGd0lEMGdlMXh5WEc0Z0lITnBiRG9nZTI1aGJXVTZJQ2R6YVd3bmZTeGNjbHh1SUNCd09pQjdibUZ0WlRvZ0ozQW5MQ0J2ZG1WeWNtbGtaVmRsYVdkb2REb2dNQzQ1ZlN4Y2NseHVJQ0IwT2lCN2JtRnRaVG9nSjNRbkxDQmliR1Z1WkZScGJXVTZJREF1TW4wc1hISmNiaUFnVXpvZ2UyNWhiV1U2SUNkVEozMHNYSEpjYmlBZ1ZEb2dlMjVoYldVNklDZFVKMzBzWEhKY2JpQWdaam9nZTI1aGJXVTZJQ2RtSnl3Z2IzWmxjbkpwWkdWWFpXbG5hSFE2SURBdU56VjlMRnh5WEc0Z0lHczZJSHR1WVcxbE9pQW5heWQ5TEZ4eVhHNGdJR2s2SUh0dVlXMWxPaUFuYVNkOUxGeHlYRzRnSUhJNklIdHVZVzFsT2lBbmNpZDlMRnh5WEc0Z0lITTZJSHR1WVcxbE9pQW5jeWNzSUdKc1pXNWtWR2x0WlRvZ01DNHlOWDBzWEhKY2JpQWdkVG9nZTI1aGJXVTZJQ2QxSjMwc1hISmNiaUFnSjBBbk9pQjdibUZ0WlRvZ0owQW5mU3hjY2x4dUlDQmhPaUI3Ym1GdFpUb2dKMkVuZlN4Y2NseHVJQ0JsT2lCN2JtRnRaVG9nSjJVbkxDQmliR1Z1WkZScGJXVTZJREF1TW4wc1hISmNiaUFnUlRvZ2UyNWhiV1U2SUNkRkozMHNYSEpjYmlBZ2J6b2dlMjVoYldVNklDZHZKMzBzWEhKY2JpQWdUem9nZTI1aGJXVTZJQ2RQSjMwc1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVEdsd2MzbHVZeUJqYjI1MGNtOXNjeUIwZDI4Z2RIbHdaWE1nYjJZZ2JXOTJaVzFsYm5RNklHbGtiR1VnWVc1cGJXRjBhVzl1SUhSb1lYUWdjMmh2ZFd4a0lIQnNZWGtnZDJocGJHVmNjbHh1SUNvZ2MzQmxaV05vSUdseklIQnNZWGxwYm1jZ1lXNWtJSFpwYzJWdFpTQmhibWx0WVhScGIyNXpJR052Y25KbGMzQnZibVJwYm1jZ2RHOGdVRzlzYkhrZ2RtbHpaVzFsY3lCM2FHOXpaVnh5WEc0Z0tpQjNaV2xuYUhSeklITm9iM1ZzWkNCaVpTQjBkWEp1WldRZ2IyNGdZVzVrSUc5bVppQmhjeUIwYUdWNUlHRnlaU0JsYm1OdmRXNTBaWEpsWkNCcGJpQjBhR1VnVUc5c2JIa2dVMU5OVEZ4eVhHNGdLaUIwY21GdWMyTnlhWEIwTGlCTVlYbGxjbk1nYjNkdVpXUWdZbmtnZEdocGN5Qm1aV0YwZFhKbElIZHBiR3dnWW1VZ1pXNWhZbXhsWkNCM2FHbHNaU0J6Y0dWbFkyZ2dhWE1nY0d4aGVXbHVaMXh5WEc0Z0tpQmhibVFnWkdsellXSnNaV1FnYjI1alpTQnBkQ0J6ZEc5d2N5NWNjbHh1SUNwY2NseHVJQ29nUUdWNGRHVnVaSE1nUVdKemRISmhZM1JJYjNOMFJtVmhkSFZ5WlZ4eVhHNGdLaUJBWVd4cFlYTWdZMjl5WlM5TWFYQnplVzVqUm1WaGRIVnlaVnh5WEc0Z0tpQkFhVzF3YkdWdFpXNTBjeUJVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sWEhKY2JpQXFJRUJwYlhCc1pXMWxiblJ6SUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpWeHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1RHbHdjM2x1WTBabFlYUjFjbVVnWlhoMFpXNWtjeUJCWW5OMGNtRmpkRWh2YzNSR1pXRjBkWEpsTG0xcGVDaGNjbHh1SUNCVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbFJHVndaVzVrWlc1MFNXNTBaWEptWVdObExrMXBlR2x1TEZ4eVhHNGdJRTFoYm1GblpXUkJibWx0WVhScGIyNU1ZWGxsY2tsdWRHVnlabUZqWlM1TmFYaHBibHh5WEc0cElIdGNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFZMjl1YzNSeWRXTjBiM0pjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdZMjl5WlM5SWIzTjBUMkpxWldOMGZTQm9iM04wSUMwZ1NHOXpkQ0IwYUdGMElHOTNibk1nZEdobElHWmxZWFIxY21VdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1E5ZlNCMmFYTmxiV1ZQY0hScGIyNXpJQzBnVDNCMGFXOXVjeUJtYjNJZ2RHaGxJSFpwYzJWdFpTQnNZWGxsY25NdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0MmFYTmxiV1ZQY0hScGIyNXpMbUpzWlc1a1ZHbHRaVDB3TGpFMVhTQXRJRVJsWm1GMWJIUWdZVzF2ZFc1MElHOW1JSFJwYldVZ2FYUmNjbHh1SUNBZ0tpQjNhV3hzSUhSaGEyVWdkRzhnYldGdWFYQjFiR0YwWlNCbFlXTm9JR1p5WldWQ2JHVnVaQ0IzWldsbmFIUWdiMjRnZEdobElIWnBjMlZ0WlNCemRHRjBaWE11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnQyYVhObGJXVlBjSFJwYjI1ekxtUmxZMkY1VW1GMFpUMTdZVzF2ZFc1ME9pQXVOU3dnYzJWamIyNWtjem9nTGpWOVhTQXRJRUZ1SUc5aWFtVmpkRnh5WEc0Z0lDQXFJR1JsYzJOeWFXSnBibWNnZEdobElEQXRNU0JtWVdOMGIzSWdkbWx6WlcxbElIZGxhV2RvZENCM2FXeHNJR1JsWTJGNUlHbG1JSFJvWlNCMmFYTmxiV1VnWkhWeVlYUnBiMjRnYVhOY2NseHVJQ0FnS2lCc2IyNW5aWElnZEdoaGJpQjBhR1VnWW14bGJtUlVhVzFsSUdGdVpDQjBhR1VnYm5WdFltVnlJRzltSUhObFkyOXVaSE1nYVhRZ2QyOTFiR1FnZEdGclpTQjBieUJrWldOaGVWeHlYRzRnSUNBcUlHSjVJSFJvWVhRZ1ptRmpkRzl5TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JiZG1selpXMWxUM0IwYVc5dWN5NWxZWE5wYm1kR2JqMVJkV0ZrY21GMGFXTXVTVzVQZFhSZElDMGdSR1ZtWVhWc2RDQmxZWE5wYm1jZ1puVnVZM1JwYjI1Y2NseHVJQ0FnS2lCMGJ5QjFjMlVnZDJobGJpQnRZVzVwY0hWc1lYUnBibWNnZG1selpXMWxJR1p5WldWQ2JHVnVaQ0IzWldsbmFIUnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBFOWlhbVZqZEQ1OUlGdDJhWE5sYldWUGNIUnBiMjV6TGk1c1lYbGxjbk05VzExZElDMGdRVzRnWVhKeVlYa2diMllnYkdGNVpYSWdiM0IwYVc5dWMxeHlYRzRnSUNBcUlHOWlhbVZqZEhNZ2RHOGdjbVZuYVhOMFpYSWdZWE1nZG1selpXMWxJR3hoZVdWeWN5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEQxOUlIUmhiR3RwYm1kUGNIUnBiMjV6SUMwZ1QzQjBhVzl1Y3lCbWIzSWdkR2hsSUhSaGJHdHBibWNnYkdGNVpYSnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJkR0ZzYTJsdVowOXdkR2x2Ym5NdVlteGxibVJVYVcxbFBUQXVOelZkSUMwZ1JHVm1ZWFZzZENCaGJXOTFiblFnYjJZZ2RHbHRaU0IwYjF4eVhHNGdJQ0FxSUdWdVlXSnNaU0JoYm1RZ1pHbHpZV0pzWlNCMGFHVWdkR0ZzYTJsdVp5QnBaR3hsSUd4aGVXVnljMXh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJkR0ZzYTJsdVowOXdkR2x2Ym5NdVpXRnphVzVuUm00OVVYVmhaSEpoZEdsakxrbHVUM1YwWFNBdElFUmxabUYxYkhRZ1pXRnphVzVuWEhKY2JpQWdJQ29nWm5WdVkzUnBiMjRnZEc4Z2RYTmxJSGRvWlc0Z2JXRnVhWEIxYkdGMGFXNW5JSGRsYVdkb2RITWdiMjRnZEdobElIUmhiR3RwYm1jZ2FXUnNaU0JzWVhsbGNuTXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OFQySnFaV04wUG4wZ1czUmhiR3RwYm1kUGNIUnBiMjV6TG14aGVXVnljejFiWFYwZ0xTQkJiaUJoY25KaGVTQnZaaUJzWVhsbGNpQnZjSFJwYjI1elhISmNiaUFnSUNvZ2IySnFaV04wY3lCMGJ5QnlaV2RwYzNSbGNpQmhjeUIwWVd4cmFXNW5JR3hoZVdWeWN5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1czWnBjMlZ0WlV4bFlXUlVhVzFsUFM0d05qZGRJQzBnVkdobElHRnRiM1Z1ZENCdlppQjBhVzFsSUhSdklHbHVjM1J5ZFdOMElIUm9aVnh5WEc0Z0lDQXFJRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVnZEc4Z1pXMXBkQ0J6Y0dWbFkyaHRZWEpyY3lCaVpXWnZjbVVnWldGamFDQnZibVVuY3lCaFkzUjFZV3dnZEdsdFpYTjBZVzF3WEhKY2JpQWdJQ29nYVhNZ2NtVmhZMmhsWkM0Z1ZHaHBjeUIzYVd4c0lITmxkQ0IwYUdVZ0ozTndaV1ZqYUUxaGNtdFBabVp6WlhRbklIWmhjbWxoWW14bElHOXVJSFJvWlNCVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbExseHlYRzRnSUNBcUwxeHlYRzRnSUdOdmJuTjBjblZqZEc5eUtGeHlYRzRnSUNBZ2FHOXpkQ3hjY2x4dUlDQWdJSHRjY2x4dUlDQWdJQ0FnWW14bGJtUlVhVzFsT2lCMmFYTmxiV1ZDYkdWdVpGUnBiV1VnUFNBd0xqRTFMRnh5WEc0Z0lDQWdJQ0JrWldOaGVWSmhkR1U2SUh0aGJXOTFiblFnUFNBd0xqVXNJSE5sWTI5dVpITWdQU0F3TGpWOUlEMGdlMzBzWEhKY2JpQWdJQ0FnSUdWaGMybHVaMFp1T2lCMmFYTmxiV1ZGWVhOcGJtZEdiaUE5SUZGMVlXUnlZWFJwWXk1SmJrOTFkQ3hjY2x4dUlDQWdJQ0FnYkdGNVpYSnpPaUIyYVhObGJXVk1ZWGxsY25NZ1BTQmJYU3hjY2x4dUlDQWdJSDBnUFNCN2ZTeGNjbHh1SUNBZ0lIdGNjbHh1SUNBZ0lDQWdZbXhsYm1SVWFXMWxPaUIwWVd4cmFXNW5RbXhsYm1SVWFXMWxJRDBnTUM0M05TeGNjbHh1SUNBZ0lDQWdaV0Z6YVc1blJtNDZJSFJoYkd0cGJtZEZZWE5wYm1kR2JpQTlJRkYxWVdSeVlYUnBZeTVKYms5MWRDeGNjbHh1SUNBZ0lDQWdiR0Y1WlhKek9pQjBZV3hyYVc1blRHRjVaWEp6SUQwZ1cxMHNYSEpjYmlBZ0lDQjlJRDBnZTMwc1hISmNiaUFnSUNCMmFYTmxiV1ZNWldGa1ZHbHRaU0E5SURBdU1EWTNYSEpjYmlBZ0tTQjdYSEpjYmlBZ0lDQnpkWEJsY2lob2IzTjBLVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDkyYVhObGJXVk1ZWGxsY25NZ1BTQjdmVHRjY2x4dUlDQWdJSFJvYVhNdVgzUmhiR3RwYm1kTVlYbGxjbk1nUFNCN2ZUdGNjbHh1SUNBZ0lIUm9hWE11ZG1selpXMWxUR1ZoWkZScGJXVWdQU0IyYVhObGJXVk1aV0ZrVkdsdFpUdGNjbHh1WEhKY2JpQWdJQ0F2THlCU1pXZHBjM1JsY2lCMGFHVWdkbWx6WlcxbElHeGhlV1Z5YzF4eVhHNGdJQ0FnZG1selpXMWxUR0Y1WlhKekxtWnZja1ZoWTJnb0tIdHVZVzFsTENCaGJtbHRZWFJwYjI0c0lIWnBjMlZ0WlUxaGNDQTlJRVJsWm1GMWJIUldhWE5sYldWTllYQjlLU0E5UGlCN1hISmNiaUFnSUNBZ0lIUm9hWE11Y21WbmFYTjBaWEpXYVhObGJXVk1ZWGxsY2lodVlXMWxMQ0I3WEhKY2JpQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dUxGeHlYRzRnSUNBZ0lDQWdJSFpwYzJWdFpVMWhjQ3hjY2x4dUlDQWdJQ0FnSUNCa1pXTmhlVkpoZEdVNklIdGhiVzkxYm5Rc0lITmxZMjl1WkhOOUxGeHlYRzRnSUNBZ0lDQWdJR0pzWlc1a1ZHbHRaVG9nZG1selpXMWxRbXhsYm1SVWFXMWxMRnh5WEc0Z0lDQWdJQ0FnSUdWaGMybHVaMFp1T2lCMmFYTmxiV1ZGWVhOcGJtZEdiaXhjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0F2THlCU1pXZHBjM1JsY2lCMGFHVWdkR0ZzYTJsdVp5QnNZWGxsY25OY2NseHVJQ0FnSUhSaGJHdHBibWRNWVhsbGNuTXVabTl5UldGamFDZ29lMjVoYldVc0lHRnVhVzFoZEdsdmJuMHBJRDArSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV5WldkcGMzUmxjbFJoYkd0cGJtZE1ZWGxsY2lodVlXMWxMQ0I3WEhKY2JpQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dUxGeHlYRzRnSUNBZ0lDQWdJR0pzWlc1a1ZHbHRaVG9nZEdGc2EybHVaMEpzWlc1a1ZHbHRaU3hjY2x4dUlDQWdJQ0FnSUNCbFlYTnBibWRHYmpvZ2RHRnNhMmx1WjBWaGMybHVaMFp1TEZ4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUlc1emRYSmxJSFJvWVhRZ2NtVm5hWE4wWlhKbFpDQjJhWE5sYldVZ1lXNXBiV0YwYVc5dWN5QmhjbVVnUm5KbFpVSnNaVzVrVTNSaGRHVnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCc1lYbGxjazVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JzWVhsbGNpQjBhR0YwSUdOdmJuUmhhVzV6SUhSb1pTQjJhWE5sYldVZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCaGJtbHRZWFJwYjI1T1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcUwxeHlYRzRnSUY5eVpXZHBjM1JsY2xacGMyVnRaVUZ1YVcxaGRHbHZiaWhzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVXBJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKelcyeGhlV1Z5VG1GdFpWMHVZVzVwYldGMGFXOXVjMXRoYm1sdFlYUnBiMjVPWVcxbFhTNXBjMEZqZEdsMlpTa2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbWRsZEVGdWFXMWhkR2x2YmxSNWNHVW9YSEpjYmlBZ0lDQWdJQ0FnSUNCc1lYbGxjazVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0JoYm1sdFlYUnBiMjVPWVcxbFhISmNiaUFnSUNBZ0lDQWdLU0FoUFQwZ0oyWnlaV1ZDYkdWdVpDZGNjbHh1SUNBZ0lDQWdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdWMkZ5YmlCaGJtUWdaR1ZoWTNScGRtRjBaU0JwWmlCMGFHVWdjbVZuYVhOMFpYSmxaQ0J6ZEdGMFpTQnBjeUJ1YjNRZ1puSmxaVUpzWlc1a1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdZRU5oYm01dmRDQnlaV2RwYzNSbGNpQk1hWEJ6ZVc1aklIWnBjMlZ0WlNCaGJtbHRZWFJwYjI0Z0pIdGhibWx0WVhScGIyNU9ZVzFsZlNCdmJpQnNZWGxsY2lBa2UyeGhlV1Z5VG1GdFpYMGdabTl5SUdodmMzUWdKSHQwYUdsekxsOW9iM04wTG1sa2ZTNGdWbWx6WlcxbElHRnVhVzFoZEdsdmJuTWdiWFZ6ZENCaVpTQnZaaUIwZVhCbElDZG1jbVZsUW14bGJtUW5MbUJjY2x4dUlDQWdJQ0FnSUNBcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk5iYkdGNVpYSk9ZVzFsWFM1aGJtbHRZWFJwYjI1elcxeHlYRzRnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1VG1GdFpWeHlYRzRnSUNBZ0lDQWdJRjB1YVhOQlkzUnBkbVVnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QkRhR1ZqYXlCcFppQjBhR1VnWW14bGJtUlhaV2xuYUhSeklHTmhiaUJpWlNCdFlXNXBjSFZzWVhSbFpDQnViM2RjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0IzWldsbmFIUk9ZVzFsY3lBOUlIUm9hWE11WDJodmMzUXVRVzVwYldGMGFXOXVSbVZoZEhWeVpTNW5aWFJCYm1sdFlYUnBiMjVDYkdWdVpFNWhiV1Z6S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dVRtRnRaVnh5WEc0Z0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UzWnBjMlZ0WlUxaGNIMGdQU0IwYUdsekxsOXRZVzVoWjJWa1RHRjVaWEp6VzJ4aGVXVnlUbUZ0WlYwdVlXNXBiV0YwYVc5dWMxdGNjbHh1SUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2Yms1aGJXVmNjbHh1SUNBZ0lDQWdJQ0JkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVkbUZzZFdWektIWnBjMlZ0WlUxaGNDa3VabTl5UldGamFDaDJhWE5sYldWUGNIUnBiMjV6SUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhacGMyVnRaVTl3ZEdsdmJuTXVhWE5CWTNScGRtVWdQU0IzWldsbmFIUk9ZVzFsY3k1cGJtTnNkV1JsY3loMmFYTmxiV1ZQY0hScGIyNXpMbTVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkpaaUIwYUdVZ1lXUmtaV1FnWm1WaGRIVnlaU0JwY3lCVVpYaDBWRzlUY0dWbFkyZ3NJSFZ3WkdGMFpTQnBkSE1nYzNCbFpXTm9UV0Z5YTA5bVpuTmxkQ0IyWVhKcFlXSnNaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RIbHdaVTVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0IwZVhCbElHOW1JR1psWVhSMWNtVWdkR2hoZENCM1lYTWdZV1JrWldRdVhISmNiaUFnSUNvdlhISmNiaUFnWDI5dVJtVmhkSFZ5WlVGa1pHVmtLSFI1Y0dWT1lXMWxLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOTJhWE5sYldWTVlYbGxjbk1nUFNCMGFHbHpMbDkyYVhObGJXVk1ZWGxsY25NZ2ZId2dlMzA3WEhKY2JpQWdJQ0IwYUdsekxsOTBZV3hyYVc1blRHRjVaWEp6SUQwZ2RHaHBjeTVmZEdGc2EybHVaMHhoZVdWeWN5QjhmQ0I3ZlR0Y2NseHVYSEpjYmlBZ0lDQnpkWEJsY2k1ZmIyNUdaV0YwZFhKbFFXUmtaV1FvZEhsd1pVNWhiV1VwTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2gwZVhCbFRtRnRaU0E5UFQwZ0oxUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVW5LU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVYMmh2YzNRdVZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTNXpjR1ZsWTJodFlYSnJUMlptYzJWMElEMWNjbHh1SUNBZ0lDQWdJQ0F0ZEdocGN5NWZkbWx6WlcxbFRHVmhaRlJwYldVZ2ZId2dNRHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl2Ymt4aGVXVnlRV1JrWldRb2UyNWhiV1Y5S1NCN1hISmNiaUFnSUNCemRYQmxjaTVmYjI1TVlYbGxja0ZrWkdWa0tIdHVZVzFsZlNrN1hISmNibHh5WEc0Z0lDQWdMeThnVm1Gc2FXUmhkR1VnZEdobElIWnBjMlZ0WlNCaGJtbHRZWFJwYjI1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5MmFYTmxiV1ZNWVhsbGNuTmJibUZ0WlYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl5WldkcGMzUmxjbFpwYzJWdFpVRnVhVzFoZEdsdmJpaHVZVzFsTENCMGFHbHpMbDkyYVhObGJXVk1ZWGxsY25OYmJtRnRaVjBwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnWDI5dVFXNXBiV0YwYVc5dVFXUmtaV1FvZTJ4aGVXVnlUbUZ0WlN3Z1lXNXBiV0YwYVc5dVRtRnRaWDBwSUh0Y2NseHVJQ0FnSUhOMWNHVnlMbDl2YmtGdWFXMWhkR2x2YmtGa1pHVmtLSHRzWVhsbGNrNWhiV1Y5S1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJXWVd4cFpHRjBaU0IwYUdVZ2RtbHpaVzFsSUdGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDNacGMyVnRaVXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRJRDA5UFNCaGJtbHRZWFJwYjI1T1lXMWxLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVYM0psWjJsemRHVnlWbWx6WlcxbFFXNXBiV0YwYVc5dUtHeGhlV1Z5VG1GdFpTd2dkR2hwY3k1ZmRtbHpaVzFsVEdGNVpYSnpXMnhoZVdWeVRtRnRaVjBwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnWDI5dVVHeGhlU2dwSUh0Y2NseHVJQ0FnSUM4dklGUjFjbTRnYjI0Z2RHaGxJR3hoZVdWeUlIZGxhV2RvZEhOY2NseHVJQ0FnSUhSb2FYTXVaVzVoWW14bEtDazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1UyVjBJSFJvWlNCamRYSnlaVzUwSUdGdWFXMWhkR2x2Ym5OY2NseHVJQ0FnSUZ0MGFHbHpMbDkyYVhObGJXVk1ZWGxsY25Nc0lIUm9hWE11WDNSaGJHdHBibWRNWVhsbGNuTmRMbVp2Y2tWaFkyZ29iR0Y1WlhKeklEMCtJSHRjY2x4dUlDQWdJQ0FnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9iR0Y1WlhKektTNW1iM0pGWVdOb0tDaGJiR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbFhTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXRZVzVoWjJWa1RHRjVaWEp6VzJ4aGVXVnlUbUZ0WlYwdVlXNXBiV0YwYVc5dWMxdGhibWx0WVhScGIyNU9ZVzFsWFM1cGMwRmpkR2wyWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhRzl6ZEM1QmJtbHRZWFJwYjI1R1pXRjBkWEpsTG5KbGMzVnRaVUZ1YVcxaGRHbHZiaWhzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl2YmxCaGRYTmxLQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NWZiMjVUZEc5d0tDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmZiMjVTWlhOMWJXVW9LU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXZibEJzWVhrb0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lGOXZibE4wYjNBb0tTQjdYSEpjYmlBZ0lDQXZMeUJVZFhKdUlHOW1aaUIwYUdVZ2JHRjVaWElnZDJWcFoyaDBjMXh5WEc0Z0lDQWdkR2hwY3k1a2FYTmhZbXhsS0NrN1hISmNibHh5WEc0Z0lDQWdMeThnVUdGMWMyVWdkR2hsSUdOMWNuSmxiblFnWVc1cGJXRjBhVzl1YzF4eVhHNGdJQ0FnVzNSb2FYTXVYM1pwYzJWdFpVeGhlV1Z5Y3l3Z2RHaHBjeTVmZEdGc2EybHVaMHhoZVdWeWMxMHVabTl5UldGamFDaHNZWGxsY25NZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaVzUwY21sbGN5aHNZWGxsY25NcExtWnZja1ZoWTJnb0tGdHNZWGxsY2s1aGJXVXNJR0Z1YVcxaGRHbHZiazVoYldWZEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk5iYkdGNVpYSk9ZVzFsWFM1aGJtbHRZWFJwYjI1elcyRnVhVzFoZEdsdmJrNWhiV1ZkTG1selFXTjBhWFpsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOW9iM04wTGtGdWFXMWhkR2x2YmtabFlYUjFjbVV1Y0dGMWMyVkJibWx0WVhScGIyNG9iR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJYYUdWdUlIWnBjMlZ0WlNCbGRtVnVkSE1nWVhKbElHTmhkV2RvZEN3Z2RIVnliaUJ2YmlCM1pXbG5hSFFnYjJZZ2RHaGxJRzVsZHlCMmFYTmxiV1VnWm05eUlIUm9aU0JrZFhKaGRHbHZibHh5WEc0Z0lDQXFJRzltSUhSb1pTQnpjR1ZsWTJnZ2JXRnlheXdnZEdobGJpQjBkWEp1SUhkbGFXZG9kQ0JpWVdOcklHOW1aaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1pYWmxiblFnTFNCRmRtVnVkQ0JrWVhSaElIQmhjM05sWkNCbWNtOXRJSFJvWlNCemNHVmxZMmd1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1YyWlc1MExtMWhjbXNnTFNCVGNHVmxZMmh0WVhKcklHOWlhbVZqZEM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JoYzNsdVl5QmZiMjVXYVhObGJXVW9lMjFoY210OUtTQjdYSEpjYmlBZ0lDQlBZbXBsWTNRdVpXNTBjbWxsY3loMGFHbHpMbDkyYVhObGJXVk1ZWGxsY25NcExtWnZja1ZoWTJnb0tGdHNZWGxsY2s1aGJXVXNJR0Z1YVcxT1lXMWxYU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHeGhlV1Z5SUdOaGJpQmlaU0J0WVc1cGNIVnNZWFJsWkZ4eVhHNGdJQ0FnSUNCamIyNXpkQ0I3YVhOQlkzUnBkbVVzSUhacGMyVnRaVTFoY0gwZ1BTQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMnhoZVdWeVRtRnRaVjB1WVc1cGJXRjBhVzl1YzF0Y2NseHVJQ0FnSUNBZ0lDQmhibWx0VG1GdFpWeHlYRzRnSUNBZ0lDQmRPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzBGamRHbDJaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnTHk4Z1ZHRnJaU0IyWVhKcFlXSnNaWE1nWm5KdmJTQjBhR1VnZG1selpXMWxJR2xtSUhSb1pYa2daWGhwYzNRZ1lXNWtJR1JsWm1GMWJIUWdkRzhnZEdobElHeGhlV1Z5WEhKY2JpQWdJQ0FnSUdOdmJuTjBJSHRjY2x4dUlDQWdJQ0FnSUNCdVlXMWxPaUIyYVhObGJXVXNYSEpjYmlBZ0lDQWdJQ0FnYVhOQlkzUnBkbVU2SUdselZtbHpaVzFsUVdOMGFYWmxMRnh5WEc0Z0lDQWdJQ0FnSUdSbFkyRjVVbUYwWlN4Y2NseHVJQ0FnSUNBZ0lDQmliR1Z1WkZScGJXVXNYSEpjYmlBZ0lDQWdJQ0FnWldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUNBZ2IzWmxjbkpwWkdWWFpXbG5hSFFzWEhKY2JpQWdJQ0FnSUgwZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnTGk0dWRHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRMRnh5WEc0Z0lDQWdJQ0FnSUM0dUxuWnBjMlZ0WlUxaGNGdHRZWEpyTG5aaGJIVmxYU3hjY2x4dUlDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJR052Ym5OMElIWnBjMlZ0WlU1aGJXVnpJRDBnZEdocGN5NWZhRzl6ZEM1QmJtbHRZWFJwYjI1R1pXRjBkWEpsTG1kbGRFRnVhVzFoZEdsdmJrSnNaVzVrVG1GdFpYTW9YSEpjYmlBZ0lDQWdJQ0FnYkdGNVpYSk9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lHRnVhVzFPWVcxbFhISmNiaUFnSUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUc1bGR5QjJhWE5sYldVZ2FHRnpJR0Z1SUdGamRHbDJaU0JtY21WbFFteGxibVFnZDJWcFoyaDBYSEpjYmlBZ0lDQWdJR2xtSUNnaGFYTldhWE5sYldWQlkzUnBkbVVnZkh3Z0lYWnBjMlZ0WlU1aGJXVnpMbWx1WTJ4MVpHVnpLSFpwYzJWdFpTa3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQzh2SUVacGJtUWdkR2hsSUhCbFlXc2dkMlZwWjJoMElHWnZjaUIwYUdVZ2RtbHpaVzFsSUdGdVpDQjBhR1VnWVcxdmRXNTBJRzltSUhScGJXVWdhWFFnYzJodmRXeGtYSEpjYmlBZ0lDQWdJQzh2SUhSaGEyVWdkRzhnY21WaFkyZ2dhWFJjY2x4dUlDQWdJQ0FnYkdWMElIZGxhV2RvZENBOUlERTdYSEpjYmlBZ0lDQWdJR052Ym5OMElHUjFjbUYwYVc5dUlEMGdiV0Z5YXk1a2RYSmhkR2x2YmlBdklERXdNREE3WEhKY2JpQWdJQ0FnSUdsbUlDaGtkWEpoZEdsdmJpQThJR0pzWlc1a1ZHbHRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4bGNuQkdZV04wYjNJZ1BTQmliR1Z1WkZScGJXVWdQaUF3SUQ4Z1pIVnlZWFJwYjI0Z0x5QmliR1Z1WkZScGJXVWdPaUF4TzF4eVhHNGdJQ0FnSUNBZ0lIZGxhV2RvZENBOVhISmNiaUFnSUNBZ0lDQWdJQ0J2ZG1WeWNtbGtaVmRsYVdkb2RDQWhQVDBnZFc1a1pXWnBibVZrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnYjNabGNuSnBaR1ZYWldsbmFIUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ09pQk5ZWFJvVlhScGJITXViR1Z5Y0Nnd0xDQXhMQ0JzWlhKd1JtRmpkRzl5S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQmpiMjV6ZENCaWJHVnVaRWx1VkdsdFpTQTlJRTFoZEdndWJXbHVLR1IxY21GMGFXOXVMQ0JpYkdWdVpGUnBiV1VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnUm1sdVpDQjBhR1VnWVcxdmRXNTBJR0Z1WkNCMGFXMWxJSFpwYzJWdFpTQjNhV3hzSUdKbElHaGxiR1FnWm05eVhISmNiaUFnSUNBZ0lHTnZibk4wSUdodmJHUlVhVzFsSUQwZ1pIVnlZWFJwYjI0Z0xTQmliR1Z1WkZScGJXVTdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9hRzlzWkZScGJXVWdQQ0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnVUdWeVptOXliU0JwYmlBdFBpQnZkWFFnWVc1cGJXRjBhVzl1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVc1cGJXRjBaVk5wYlhCc1pWWnBjMlZ0WlNoY2NseHVJQ0FnSUNBZ0lDQWdJR3hoZVdWeVRtRnRaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lHRnVhVzFPWVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnZG1selpXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2QyVnBaMmgwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdZbXhsYm1SSmJsUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQmliR1Z1WkZScGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNCbFlYTnBibWRHYmx4eVhHNGdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiR1Z5Y0VaaFkzUnZjaUE5WEhKY2JpQWdJQ0FnSUNBZ0lDQmtaV05oZVZKaGRHVXVjMlZqYjI1a2N5QStJREFnUHlCb2IyeGtWR2x0WlNBdklHUmxZMkY1VW1GMFpTNXpaV052Ym1SeklEb2dNVHRjY2x4dUlDQWdJQ0FnSUNBdkx5QlFaWEptYjNKdElHbHVJQzArSUdodmJHUWdMVDRnYjNWMElHRnVhVzFoZEdsdmJseHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHUmxZMkY1VjJWcFoyaDBJRDBnVFdGMGFGVjBhV3h6TG14bGNuQW9YSEpjYmlBZ0lDQWdJQ0FnSUNCM1pXbG5hSFFzWEhKY2JpQWdJQ0FnSUNBZ0lDQjNaV2xuYUhRZ0tpQmtaV05oZVZKaGRHVXVZVzF2ZFc1MExGeHlYRzRnSUNBZ0lDQWdJQ0FnVFdGMGFDNXRhVzRvTVN3Z2JHVnljRVpoWTNSdmNpbGNjbHh1SUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGdWFXMWhkR1ZJWld4a1ZtbHpaVzFsS0Z4eVhHNGdJQ0FnSUNBZ0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1lXNXBiVTVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0IyYVhObGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNCM1pXbG5hSFFzWEhKY2JpQWdJQ0FnSUNBZ0lDQmtaV05oZVZkbGFXZG9kQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lHSnNaVzVrU1c1VWFXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2FHOXNaRlJwYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0JpYkdWdVpGUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQmxZWE5wYm1kR2JseHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRVzVwYldGMFpTQmhJSFpwYzJWdFpTQmliR1Z1WkNCM1pXbG5hSFFnZEc5M1lYSmtjeUJoSUhaaGJIVmxJR0Z1WkNCMGFHVnVJR0poWTJzZ2RHOGdlbVZ5Ynk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0Y1WlhKT1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnZEdoaGRDQmpiMjUwWVdsdWN5QjBhR1VnZG1selpXMWxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUdaeVpXVmliR1Z1WkNCaGJtbHRZWFJwYjI0Z2RHaGhkQ0JqYjI1MFlXbHVjMXh5WEc0Z0lDQXFJSFJvWlNCMmFYTmxiV1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFpwYzJWdFpVNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQmliR1Z1WkNCM1pXbG5hSFFnZEc4Z2JXRnVhWEIxYkdGMFpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2QyVnBaMmgwSUMwZ1VHVmhheUIzWldsbmFIUWdkRzhnWVc1cGJXRjBaU0IwYjNkaGNtUnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmliR1Z1WkVsdVZHbHRaU0F0SUVGdGIzVnVkQ0J2WmlCMGFXMWxJR2wwSUhOb2IzVnNaQ0IwWVd0bElIUnZJSEpsWVdOb0lIUm9aVnh5WEc0Z0lDQXFJSEJsWVdzZ2QyVnBaMmgwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JpYkdWdVpFOTFkRlJwYldVZ0xTQkJiVzkxYm5RZ2IyWWdkR2x0WlNCcGRDQnphRzkxYkdRZ2RHRnJaU0IwYnlCaGJtbHRZWFJsSUdKaFkydGNjbHh1SUNBZ0tpQjBieUI2WlhKdklHRm1kR1Z5SUhKbFlXTm9hVzVuSUhSb1pTQndaV0ZySUhkbGFXZG9kQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JsWVhOcGJtZEdiaUF0SUVWaGMybHVaeUJtZFc1amRHbHZiaUIwYnlCMWMyVWdaSFZ5YVc1bklHRnVhVzFoZEdsdmJpNWNjbHh1SUNBZ0tpOWNjbHh1SUNCZllXNXBiV0YwWlZOcGJYQnNaVlpwYzJWdFpTaGNjbHh1SUNBZ0lHeGhlV1Z5VG1GdFpTeGNjbHh1SUNBZ0lHRnVhVzFPWVcxbExGeHlYRzRnSUNBZ2RtbHpaVzFsVG1GdFpTeGNjbHh1SUNBZ0lIQmxZV3RYWldsbmFIUXNYSEpjYmlBZ0lDQmliR1Z1WkVsdVZHbHRaU3hjY2x4dUlDQWdJR0pzWlc1a1QzVjBWR2x0WlN4Y2NseHVJQ0FnSUdWaGMybHVaMFp1WEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0F2THlCQmJtbHRZWFJsSUhSdmQyRnlaSE1nZEdobElIQmxZV3NnZG1Gc2RXVmNjbHh1SUNBZ0lHTnZibk4wSUhkbGFXZG9kRkJ5YjIxcGMyVWdQU0IwYUdsekxsOW9iM04wTGtGdWFXMWhkR2x2YmtabFlYUjFjbVV1YzJWMFFXNXBiV0YwYVc5dVFteGxibVJYWldsbmFIUW9YSEpjYmlBZ0lDQWdJR3hoZVdWeVRtRnRaU3hjY2x4dUlDQWdJQ0FnWVc1cGJVNWhiV1VzWEhKY2JpQWdJQ0FnSUhacGMyVnRaVTVoYldVc1hISmNiaUFnSUNBZ0lIQmxZV3RYWldsbmFIUXNYSEpjYmlBZ0lDQWdJR0pzWlc1a1NXNVVhVzFsTEZ4eVhHNGdJQ0FnSUNCbFlYTnBibWRHYmx4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJCYm1sdFlYUmxJR0poWTJzZ2RHOGdlbVZ5YnlCcFppQjBhR1Z5WlNCM1lYTWdibThnZDJWcFoyaDBJR2x1ZEdWeWNuVndkR2x2Ymx4eVhHNGdJQ0FnZDJWcFoyaDBVSEp2YldselpTNTBhR1Z1S0NncElEMCtJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tDRjNaV2xuYUhSUWNtOXRhWE5sTG1OaGJtTmxiR1ZrS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbk5sZEVGdWFXMWhkR2x2YmtKc1pXNWtWMlZwWjJoMEtGeHlYRzRnSUNBZ0lDQWdJQ0FnYkdGNVpYSk9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdZVzVwYlU1aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNCMmFYTmxiV1ZPWVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnTUN4Y2NseHVJQ0FnSUNBZ0lDQWdJR0pzWlc1a1QzVjBWR2x0WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVowWnVYSEpjYmlBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJCYm1sdFlYUmxJR0VnZG1selpXMWxJR0pzWlc1a0lIZGxhV2RvZENCMGIzZGhjbVJ6SUdFZ2RtRnNkV1VnWVc1a0lIUm9aVzRnWW1GamF5QjBieUI2WlhKdkxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JzWVhsbGNrNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQnNZWGxsY2lCMGFHRjBJR052Ym5SaGFXNXpJSFJvWlNCMmFYTmxiV1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR0Z1YVcxT1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ1puSmxaV0pzWlc1a0lHRnVhVzFoZEdsdmJpQjBhR0YwSUdOdmJuUmhhVzV6WEhKY2JpQWdJQ29nZEdobElIWnBjMlZ0WlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZG1selpXMWxUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR0pzWlc1a0lIZGxhV2RvZENCMGJ5QnRZVzVwY0hWc1lYUmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQndaV0ZyVjJWcFoyaDBJQzBnVUdWaGF5QjNaV2xuYUhRZ2RHOGdZVzVwYldGMFpTQjBiM2RoY21SekxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCa1pXTmhlVmRsYVdkb2RDQXRJRmRsYVdkb2RDQjBieUJoYm1sdFlYUmxJSFJ2ZDJGeVpITWdZV1owWlhJZ2NtVmhZMmhwYm1jZ2RHaGxYSEpjYmlBZ0lDb2djR1ZoYXlCM1pXbG5hSFF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR0pzWlc1a1NXNVVhVzFsSUMwZ1FXMXZkVzUwSUc5bUlIUnBiV1VnYVhRZ2MyaHZkV3hrSUhSaGEyVWdkRzhnY21WaFkyZ2dkR2hsWEhKY2JpQWdJQ29nY0dWaGF5QjNaV2xuYUhRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdodmJHUlVhVzFsSUMwZ1FXMXZkVzUwSUc5bUlIUnBiV1VnYVhRZ2MyaHZkV3hrSUhSaGEyVWdkRzhnY21WaFkyZ2dkR2hsSUdSbFkyRjVYSEpjYmlBZ0lDb2dkMlZwWjJoMElHRm1kR1Z5SUhSb1pTQndaV0ZySUhkbGFXZG9kQ0JvWVhNZ1ltVmxiaUJ5WldGamFHVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmliR1Z1WkU5MWRGUnBiV1VnTFNCQmJXOTFiblFnYjJZZ2RHbHRaU0JwZENCemFHOTFiR1FnZEdGclpTQjBieUJoYm1sdFlYUmxJR0poWTJ0Y2NseHVJQ0FnS2lCMGJ5QjZaWEp2SUdGbWRHVnlJSEpsWVdOb2FXNW5JSFJvWlNCa1pXTmhlU0IzWldsbmFIUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdaV0Z6YVc1blJtNGdMU0JGWVhOcGJtY2dablZ1WTNScGIyNGdkRzhnZFhObElHUjFjbWx1WnlCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNvdlhISmNiaUFnWVhONWJtTWdYMkZ1YVcxaGRHVklaV3hrVm1selpXMWxLRnh5WEc0Z0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdZVzVwYlU1aGJXVXNYSEpjYmlBZ0lDQjJhWE5sYldWT1lXMWxMRnh5WEc0Z0lDQWdjR1ZoYTFkbGFXZG9kQ3hjY2x4dUlDQWdJR1JsWTJGNVYyVnBaMmgwTEZ4eVhHNGdJQ0FnWW14bGJtUkpibFJwYldVc1hISmNiaUFnSUNCb2IyeGtWR2x0WlN4Y2NseHVJQ0FnSUdKc1pXNWtUM1YwVkdsdFpTeGNjbHh1SUNBZ0lHVmhjMmx1WjBadVhISmNiaUFnS1NCN1hISmNiaUFnSUNBdkx5QkJibWx0WVhSbElIUnZkMkZ5WkhNZ2RHaGxJSEJsWVdzZ2RtRnNkV1ZjY2x4dUlDQWdJR052Ym5OMElITjBZWEowVUhKdmJXbHpaU0E5SUhSb2FYTXVYMmh2YzNRdVFXNXBiV0YwYVc5dVJtVmhkSFZ5WlM1elpYUkJibWx0WVhScGIyNUNiR1Z1WkZkbGFXZG9kQ2hjY2x4dUlDQWdJQ0FnYkdGNVpYSk9ZVzFsTEZ4eVhHNGdJQ0FnSUNCaGJtbHRUbUZ0WlN4Y2NseHVJQ0FnSUNBZ2RtbHpaVzFsVG1GdFpTeGNjbHh1SUNBZ0lDQWdjR1ZoYTFkbGFXZG9kQ3hjY2x4dUlDQWdJQ0FnWW14bGJtUkpibFJwYldVc1hISmNiaUFnSUNBZ0lHVmhjMmx1WjBadVhISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJR0YzWVdsMElITjBZWEowVUhKdmJXbHpaVHRjY2x4dVhISmNiaUFnSUNCcFppQW9JWE4wWVhKMFVISnZiV2x6WlM1allXNWpaV3hsWkNrZ2UxeHlYRzRnSUNBZ0lDQXZMeUJCYm1sdFlYUmxJSFJ2ZDJGeVpITWdkR2hsSUdSbFkyRjVJSFpoYkhWbElHbG1JSFJvWlhKbElIZGhjeUJ1YnlCM1pXbG5hSFFnYVc1MFpYSnlkWEIwYVc5dVhISmNiaUFnSUNBZ0lHTnZibk4wSUdodmJHUlFjbTl0YVhObElEMGdkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbk5sZEVGdWFXMWhkR2x2YmtKc1pXNWtWMlZwWjJoMEtGeHlYRzRnSUNBZ0lDQWdJR3hoZVdWeVRtRnRaU3hjY2x4dUlDQWdJQ0FnSUNCaGJtbHRUbUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQjJhWE5sYldWT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUdSbFkyRjVWMlZwWjJoMExGeHlYRzRnSUNBZ0lDQWdJR2h2YkdSVWFXMWxMRnh5WEc0Z0lDQWdJQ0FnSUdWaGMybHVaMFp1WEhKY2JpQWdJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdJQ0JoZDJGcGRDQm9iMnhrVUhKdmJXbHpaVHRjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2doYUc5c1pGQnliMjFwYzJVdVkyRnVZMlZzWldRcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCQmJtbHRZWFJsSUdKaFkyc2dkRzhnZW1WeWJ5QnBaaUIwYUdWeVpTQjNZWE1nYm04Z2QyVnBaMmgwSUdsdWRHVnljblZ3ZEdsdmJseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyaHZjM1F1UVc1cGJXRjBhVzl1Um1WaGRIVnlaUzV6WlhSQmJtbHRZWFJwYjI1Q2JHVnVaRmRsYVdkb2RDaGNjbHh1SUNBZ0lDQWdJQ0FnSUd4aGVXVnlUbUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJR0Z1YVcxT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2RtbHpaVzFsVG1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0FnSURBc1hISmNiaUFnSUNBZ0lDQWdJQ0JpYkdWdVpFOTFkRlJwYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0JsWVhOcGJtZEdibHh5WEc0Z0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ1lXNWtJSE5sZEhNZ2RHaGxJR0Z0YjNWdWRDQnZaaUIwYVcxbElHbHVJSE5sWTI5dVpITWdkRzhnYm1WbllYUnBkbVZzZVNCdlptWnpaWFFnYzNCbFpXTm9iV0Z5YTF4eVhHNGdJQ0FxSUdWdGFYTnphVzl1SUdKNUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnZG1selpXMWxUR1ZoWkZScGJXVW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRtbHpaVzFsVEdWaFpGUnBiV1U3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6WlhRZ2RtbHpaVzFsVEdWaFpGUnBiV1VvYzJWamIyNWtjeWtnZTF4eVhHNGdJQ0FnZEdocGN5NWZkbWx6WlcxbFRHVmhaRlJwYldVZ1BTQnpaV052Ym1Sek8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbDlvYjNOMExsUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZhRzl6ZEM1VVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbExuTndaV1ZqYUcxaGNtdFBabVp6WlhRZ1BTQXRjMlZqYjI1a2N6dGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk4wWVhKMElHdGxaWEJwYm1jZ2RISmhZMnNnYjJZZ1lXNGdZVzVwYldGMGFXOXVJR3hoZVdWeUlIUm9ZWFFnYjNkdWN5QmhJR1p5WldWQ2JHVnVaQ0JoYm1sdFlYUnBiMjVjY2x4dUlDQWdLaUIzYVhSb0lHSnNaVzVrVjJWcFoyaDBjeUJqYjNKeVpYTndiMjVrYVc1bklIUnZJSFpwYzJWdFpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkRzhnYTJWbGNDQjBjbUZqYXlCdlppNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEQxOUlHOXdkR2x2Ym5NZ0xTQlBjSFJwYjI1eklHWnZjaUIwYUdVZ2JHRjVaWEl1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRnR2Y0hScGIyNXpMbUZ1YVcxaGRHbHZiajBuZG1selpXMWxjeWRkSUMwZ1RtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJRzl1SUhSb1pWeHlYRzRnSUNBcUlHeGhlV1Z5SUhSb1lYUWdkMmxzYkNCaVpTQndiR0Y1WldRZ1pIVnlhVzVuSUhOd1pXVmphQzRnVkdocGN5QmhibWx0WVhScGIyNGdiWFZ6ZENCaVpTQnZaaUIwZVhCbFhISmNiaUFnSUNvZ1puSmxaVUpzWlc1a0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ1pHVmpZWGxTWVhSbFhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0a1pXTmhlVkpoZEdVdVlXMXZkVzUwUFRBdU5WMGdMU0JVYUdVZ2NHVnlZMlZ1ZEdGblpTQjBieUJrWldOeVpXRnpaU0IwYUdVZ2RtbHpaVzFsSjNOY2NseHVJQ0FnS2lCd1pXRnJJSFpoYkhWbElHSjVJRzkyWlhJZ2RHbHRaU0J2Ym1ObElIUm9aU0J3WldGcklIWmhiSFZsSUdoaGN5QmlaV1Z1SUhKbFlXTm9aV1F1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnRrWldOaGVWSmhkR1V1YzJWamIyNWtjejB3TGpWZElDMGdWR2hsSUdGdGIzVnVkQ0J2WmlCMGFXMWxJR2x1SUhObFkyOXVaSE1nZEc5Y2NseHVJQ0FnS2lCa1pXTnlaV0Z6WlNCMGFHVWdkbWx6WlcxbEozTWdkMlZwWjJoMElHOXVZMlVnYVhRZ2FHRnpJSEpsWVdOb1pXUWdhWFJ6SUhCbFlXc2dkbUZzZFdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEk5ZlNCYmIzQjBhVzl1Y3k1aWJHVnVaRlJwYldVOVcweHBjSE41Ym1OR1pXRjBkWEpsTGtSRlJrRlZURlJmVEVGWlJWSmZUMUJVU1U5T1V5NWliR1Z1WkZScGJXVmRlMEJzYVc1cklFeHBjSE41Ym1OR1pXRjBkWEpsSTBSRlJrRlZURlJmVEVGWlJWSmZUMUJVU1U5T1V5TmliR1Z1WkZScGJXVjlYU0F0WEhKY2JpQWdJQ29nUkdWbVlYVnNkQ0JoYlc5MWJuUWdiMllnZEdsdFpTQjBieUIxYzJVZ2QyaGxiaUJ0WVc1cGNIVnNZWFJwYm1jZ1lXNXBiV0YwYVc5dUlHSnNaVzVrVjJWcFoyaDBjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjNCMGFXOXVjeTVsWVhOcGJtZEdiaUF0SUVSbFptRjFiSFFnWldGemFXNW5JR1oxYm1OMGFXOXVJSFJ2SUhWelpTQjNhR1Z1WEhKY2JpQWdJQ29nYldGdWFYQjFiR0YwYVc1bklHRnVhVzFoZEdsdmJpQmliR1Z1WkZkbGFXZG9kSE11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRnR2Y0hScGIyNXpMblpwYzJWdFpVMWhjRDFFWldaaGRXeDBWbWx6WlcxbFRXRndYU0F0SUU5aWFtVmpkQ0JqYjI1MFlXbHVhVzVuSUd0bGVTOTJZV3gxWlNCd1lXbHljeUJ2Wmx4eVhHNGdJQ0FxSUZCdmJHeDVJSFpwYzJWdFpTQnVZVzFsY3lCdFlYQndaV1FnZEc4Z2IySnFaV04wY3lCamIyNTBZV2x1YVc1bklIUm9aU0J1WVcxbElHOW1JSFJvWlNCamIzSnlaWE53YjI1a2FXNW5YSEpjYmlBZ0lDb2dZVzVwYldGMGFXOXVJR0pzWlc1a1YyVnBaMmgwSUdGdVpDQmhibmtnYjNSb1pYSWdZVzVwYldGMGFXOXVJRzl3ZEdsdmJuTWdkRzhnZFhObElITjFZMmdnWVhNZ2RtbHpaVzFsWEhKY2JpQWdJQ29nYzNCbFkybG1hV01nWW14bGJtUWdkR2x0WlhNZ1lXNWtJR1ZoYzJsdVp5Qm1kVzVqZEdsdmJuTXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NtVm5hWE4wWlhKV2FYTmxiV1ZNWVhsbGNpaGNjbHh1SUNBZ0lHeGhlV1Z5VG1GdFpTeGNjbHh1SUNBZ0lIdGNjbHh1SUNBZ0lDQWdZVzVwYldGMGFXOXVJRDBnSjNacGMyVnRaWE1uTEZ4eVhHNGdJQ0FnSUNCa1pXTmhlVkpoZEdVZ1BTQjdZVzF2ZFc1ME9pQXdMalVzSUhObFkyOXVaSE02SURBdU5YMHNYSEpjYmlBZ0lDQWdJR0pzWlc1a1ZHbHRaU0E5SUV4cGNITjVibU5HWldGMGRYSmxMa1JGUmtGVlRGUmZURUZaUlZKZlQxQlVTVTlPVXk1aWJHVnVaRlJwYldVc1hISmNiaUFnSUNBZ0lHVmhjMmx1WjBadUxGeHlYRzRnSUNBZ0lDQjJhWE5sYldWTllYQWdQU0JFWldaaGRXeDBWbWx6WlcxbFRXRndMRnh5WEc0Z0lDQWdmU0E5SUh0OVhISmNiaUFnS1NCN1hISmNiaUFnSUNBdkx5QlNaV2RwYzNSbGNpQjBhR1VnYkdGNVpYSWdZVzVrSUdGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnZEdocGN5NXlaV2RwYzNSbGNreGhlV1Z5S0d4aGVXVnlUbUZ0WlN3Z2UxeHlYRzRnSUNBZ0lDQmtaV05oZVZKaGRHVXNYSEpjYmlBZ0lDQWdJR0pzWlc1a1ZHbHRaU3hjY2x4dUlDQWdJQ0FnWldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUdGdWFXMWhkR2x2Ym5NNklIdGJZVzVwYldGMGFXOXVYVG9nZTNacGMyVnRaVTFoY0gxOUxGeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ0lDQjBhR2x6TGw5MmFYTmxiV1ZNWVhsbGNuTmJiR0Y1WlhKT1lXMWxYU0E5SUdGdWFXMWhkR2x2Ymp0Y2NseHVYSEpjYmlBZ0lDQXZMeUJXWVd4cFpHRjBaU0IwYUdVZ2RtbHpaVzFsSUdGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnZEdocGN5NWZjbVZuYVhOMFpYSldhWE5sYldWQmJtbHRZWFJwYjI0b2JHRjVaWEpPWVcxbExDQmhibWx0WVhScGIyNHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTNSaGNuUWdhMlZsY0dsdVp5QjBjbUZqYXlCdlppQmhiaUJoYm1sdFlYUnBiMjRnYkdGNVpYSWdkR2hoZENCamIyNTBZV2x1Y3lCaElHeHZiM0JwYm1jZ1lXNXBiV0YwYVc5dVhISmNiaUFnSUNvZ2RHOGdZbVVnY0d4aGVXVmtJR1IxY21sdVp5QnpjR1ZsWTJndVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdGNVpYSk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHOGdhMlZsY0NCMGNtRmpheUJ2Wmk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDE5SUc5d2RHbHZibk1nTFNCUGNIUnBiMjV6SUdadmNpQjBhR1VnYkdGNVpYSXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHZjSFJwYjI1ekxtRnVhVzFoZEdsdmJqMG5jM1JoYm1SZmRHRnNheWRkSUMwZ1RtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJRzl1SUhSb1pWeHlYRzRnSUNBcUlHeGhlV1Z5SUhSb1lYUWdkMmxzYkNCaVpTQndiR0Y1WldRZ1pIVnlhVzVuSUhOd1pXVmphQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjl3ZEdsdmJuTXVZbXhsYm1SVWFXMWxQVnRNYVhCemVXNWpSbVZoZEhWeVpTNUVSVVpCVlV4VVgweEJXVVZTWDA5UVZFbFBUbE11WW14bGJtUlVhVzFsWFh0QWJHbHVheUJNYVhCemVXNWpSbVZoZEhWeVpTTkVSVVpCVlV4VVgweEJXVVZTWDA5UVZFbFBUbE1qWW14bGJtUlVhVzFsZlYwZ0xWeHlYRzRnSUNBcUlFUmxabUYxYkhRZ1lXMXZkVzUwSUc5bUlIUnBiV1VnZEc4Z2RYTmxJSGRvWlc0Z2JXRnVhWEIxYkdGMGFXNW5JSFJvWlNCc1lYbGxjaWR6SUhkbGFXZG9kSE11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUc5d2RHbHZibk11WldGemFXNW5SbTRnTFNCRVpXWmhkV3gwSUdWaGMybHVaeUJtZFc1amRHbHZiaUIwYnlCMWMyVWdkMmhsYmx4eVhHNGdJQ0FxSUcxaGJtbHdkV3hoZEdsdVp5QjBhR1VnYkdGNVpYSW5jeUIzWldsbmFIUnpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lISmxaMmx6ZEdWeVZHRnNhMmx1WjB4aGVXVnlLRnh5WEc0Z0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdlMXh5WEc0Z0lDQWdJQ0JoYm1sdFlYUnBiMjRnUFNBbmMzUmhibVJmZEdGc2F5Y3NYSEpjYmlBZ0lDQWdJR0pzWlc1a1ZHbHRaU0E5SUV4cGNITjVibU5HWldGMGRYSmxMa1JGUmtGVlRGUmZURUZaUlZKZlQxQlVTVTlPVXk1aWJHVnVaRlJwYldVc1hISmNiaUFnSUNBZ0lHVmhjMmx1WjBadUxGeHlYRzRnSUNBZ2ZTQTlJSHQ5WEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0F2THlCU1pXZHBjM1JsY2lCMGFHVWdiR0Y1WlhJZ1lXNWtJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdkR2hwY3k1eVpXZHBjM1JsY2t4aGVXVnlLR3hoZVdWeVRtRnRaU3dnZTF4eVhHNGdJQ0FnSUNCaWJHVnVaRlJwYldVc1hISmNiaUFnSUNBZ0lHVmhjMmx1WjBadUxGeHlYRzRnSUNBZ0lDQmhibWx0WVhScGIyNXpPaUI3VzJGdWFXMWhkR2x2YmwwNklIdDlmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNGdJQ0FnZEdocGN5NWZkR0ZzYTJsdVoweGhlV1Z5YzF0c1lYbGxjazVoYldWZElEMGdZVzVwYldGMGFXOXVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUVdSa2N5QmhJRzVoYldWemNHRmpaU0IwYnlCMGFHVWdhRzl6ZENCM2FYUm9JSFJvWlNCdVlXMWxJRzltSUhSb1pTQm1aV0YwZFhKbElIUnZJR052Ym5SaGFXNGdjSEp2Y0dWeWRHbGxjMXh5WEc0Z0lDQXFJR0Z1WkNCdFpYUm9iMlJ6SUdaeWIyMGdkR2hsSUdabFlYUjFjbVVnZEdoaGRDQjFjMlZ5Y3lCdlppQjBhR1VnYUc5emRDQnVaV1ZrSUdGalkyVnpjeUIwYnk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCelpXVWdUR2x3YzNsdVkwWmxZWFIxY21WY2NseHVJQ0FnS2k5Y2NseHVJQ0JwYm5OMFlXeHNRWEJwS0NrZ2UxeHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJBYVc1dVpYSmNjbHh1SUNBZ0lDQXFJRUJ1WVcxbGMzQmhZMlVnVEdsd2MzbHVZMFpsWVhSMWNtVmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZMjl1YzNRZ1lYQnBJRDBnYzNWd1pYSXVhVzV6ZEdGc2JFRndhU2dwTzF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUV4cGNITjVibU5HWldGMGRYSmxYSEpjYmlBZ0lDQWdLaUJBYm1GdFpTQnlaV2RwYzNSbGNreGhlV1Z5WEhKY2JpQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJSY2NseHVJQ0FnSUNBcUlFQnpaV1VnVFdGdVlXZGxaRUZ1YVcxaGRHbHZia3hoZVdWeVNXNTBaWEptWVdObEkzSmxaMmx6ZEdWeVRHRjVaWEpjY2x4dUlDQWdJQ0FxTDF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nUUcxbGJXSmxjbTltSUV4cGNITjVibU5HWldGMGRYSmxYSEpjYmlBZ0lDQWdLaUJBYm1GdFpTQnlaV2RwYzNSbGNrRnVhVzFoZEdsdmJseHlYRzRnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdLaUJBYzJWbElFMWhibUZuWldSQmJtbHRZWFJwYjI1TVlYbGxja2x1ZEdWeVptRmpaU055WldkcGMzUmxja0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ292WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJBYldWdFltVnliMllnVEdsd2MzbHVZMFpsWVhSMWNtVmNjbHh1SUNBZ0lDQXFJRUJ1WVcxbElITmxkRXhoZVdWeVYyVnBaMmgwYzF4eVhHNGdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0tpQkFjMlZsSUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpTTnpaWFJNWVhsbGNsZGxhV2RvZEhOY2NseHVJQ0FnSUNBcUwxeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FHMWxiV0psY205bUlFeHBjSE41Ym1OR1pXRjBkWEpsWEhKY2JpQWdJQ0FnS2lCQWJtRnRaU0JsYm1GaWJHVmNjbHh1SUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ29nUUhObFpTQk5ZVzVoWjJWa1FXNXBiV0YwYVc5dVRHRjVaWEpKYm5SbGNtWmhZMlVqWlc1aFlteGxYSEpjYmlBZ0lDQWdLaTljY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJNYVhCemVXNWpSbVZoZEhWeVpWeHlYRzRnSUNBZ0lDb2dRRzVoYldVZ1pHbHpZV0pzWlZ4eVhHNGdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0tpQkFjMlZsSUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpTTmthWE5oWW14bFhISmNiaUFnSUNBZ0tpOWNjbHh1WEhKY2JpQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtHRndhU3dnZTF4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUV4cGNITjVibU5HWldGMGRYSmxYSEpjYmlBZ0lDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1kyOXlaUzlNYVhCemVXNWpSbVZoZEhWeVpTTnlaV2RwYzNSbGNsWnBjMlZ0WlV4aGVXVnlYSEpjYmlBZ0lDQWdJQ0FxTDF4eVhHNGdJQ0FnSUNCeVpXZHBjM1JsY2xacGMyVnRaVXhoZVdWeU9pQjBhR2x6TG5KbFoybHpkR1Z5Vm1selpXMWxUR0Y1WlhJdVltbHVaQ2gwYUdsektTeGNjbHh1SUNBZ0lDQWdMeW9xWEhKY2JpQWdJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQk1hWEJ6ZVc1alJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJR052Y21VdlRHbHdjM2x1WTBabFlYUjFjbVVqY21WbmFYTjBaWEpVWVd4cmFXNW5UR0Y1WlhKY2NseHVJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJSEpsWjJsemRHVnlWR0ZzYTJsdVoweGhlV1Z5T2lCMGFHbHpMbkpsWjJsemRHVnlWR0ZzYTJsdVoweGhlV1Z5TG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQk1hWEJ6ZVc1alJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0tpQkFibUZ0WlNCMmFYTmxiV1ZNWldGa1ZHbHRaVnh5WEc0Z0lDQWdJQ29nUUhObFpTQmpiM0psTDB4cGNITjVibU5HWldGMGRYSmxJM1pwYzJWdFpVeGxZV1JVYVcxbFhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hoY0drc0lDZDJhWE5sYldWTVpXRmtWR2x0WlNjc0lIdGNjbHh1SUNBZ0lDQWdaMlYwT2lBb0tTQTlQaUIwYUdsekxuWnBjMlZ0WlV4bFlXUlVhVzFsTEZ4eVhHNGdJQ0FnSUNCelpYUTZJSE5sWTI5dVpITWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1selpXMWxUR1ZoWkZScGJXVWdQU0J6WldOdmJtUnpPMXh5WEc0Z0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHRndhVHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRXhwY0hONWJtTkdaV0YwZFhKbE8xeHlYRzVsZUhCdmNuUWdlMFJsWm1GMWJIUldhWE5sYldWTllYQjlPMXh5WEc0aUxDSXZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTExYm5WelpXUXRkbUZ5Y3lBcUwxeHlYRzR2THlCRGIzQjVjbWxuYUhRZ1FXMWhlbTl1TG1OdmJTd2dTVzVqTGlCdmNpQnBkSE1nWVdabWFXeHBZWFJsY3k0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNjbHh1THk4Z1UxQkVXQzFNYVdObGJuTmxMVWxrWlc1MGFXWnBaWEk2SUUxSlZDMHdYSEpjYmx4eVhHNHZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnRZWGd0WTJ4aGMzTmxjeTF3WlhJdFptbHNaU0FxTDF4eVhHNHZLaUJsYzJ4cGJuUXRaR2x6WVdKc1pTQnVieTFsYlhCMGVTQXFMMXh5WEc1cGJYQnZjblFnVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlNCbWNtOXRJQ2RqYjNKbEwyRjNjM0JoWTJzdlZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpVUmxjR1Z1WkdWdWRFbHVkR1Z5Wm1GalpTYzdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRMnhoYzNNZ1ptRmpkRzl5ZVNCcGJuUmxjbVpoWTJVZ1ptOXlJSFJvWVhRZ2NtVm5hWE4wWlhKeklHTmhiR3hpWVdOcklHMWxkR2h2WkNCM2FHVnVJR0VnYzNOdGJDQnpjR1ZsWTJodFlYSnJJR1YyWlc1MElHbHpJR1Z0YVhSMFpXUXVYSEpjYmlBcVhISmNiaUFxSUVCcGJuUmxjbVpoWTJWY2NseHVJQ29nUUdWNGRHVnVaSE1nVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlZ4eVhHNGdLaTljY2x4dVkyeGhjM01nVTFOTlRGTndaV1ZqYUcxaGNtdEpiblJsY21aaFkyVWdaWGgwWlc1a2N5QlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJYYUdWdUlITnpiV3dnWlhabGJuUnpJR0Z5WlNCallYVm5hSFFzSUhSb2FYTWdkMmxzYkNCMGNua2dkRzhnY0dGeWMyVWdkR2hsSUhOd1pXVmphQ0J0WVhKcklIWmhiSFZsSUdGdVpDQmxlR1ZqZFhSbElHRnVlU0JtZFc1amRHbHZiaUIzYUdsamFDQnRaV1YwY3lCamNtbDBaWEpwWVNCa1pXWnBibVZrSUdsdUlIUm9aU0IyWVd4MVpTNWNjbHh1SUNBZ0tpQlRjR1ZsWTJnZ2JXRnlheUIyWVd4MVpTQjNhV3hzSUdKbElIUnlaV0YwWldRZ1lYTWdjM1J5YVc1bmFXWnBaV1FnYW5OdmJpQm1iM0p0WVhRZ1kyOXVkR0ZwYm1sdVp5QnlaWEYxYVhKbFpDQm1aV0YwZFhKbElHNWhiV1VzSUdaMWJtTjBhVzl1SUc1aGJXVWdZVzVrSUdGeVozVnRaVzUwSUdGeWNtRjVJSFJ2SUhCaGMzTWdhVzR1WEhKY2JpQWdJQ29nUlhoaGJYQnNaU0J6Y0dWbFkyZ2diV0Z5YXlCMllXeDFaU0J0YVdkb2RDQnNiMjlySUd4cGEyVTZJQ2Q3WENKbVpXRjBkWEpsWENJNlhDSkhaWE4wZFhKbFJtVmhkSFZ5WlZ3aUxDQmNJbTFsZEdodlpGd2lPbHdpYzNkcGRHTm9WRzlIWlhOMGRYSmxYQ0lzSUZ3aVlYSm5jMXdpT2x0Y0ltZGxibkpwWTBGY0lpd2dNQzQxWFgwblhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR1YyWlc1MElDMGdSWFpsYm5RZ1pHRjBZU0J3WVhOelpXUWdabkp2YlNCMGFHVWdjM0JsWldOb0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCbGRtVnVkQzV0WVhKcklDMGdVM0JsWldOb2JXRnlheUJ2WW1wbFkzUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gyOXVVM050YkNoN2JXRnlhMzBwSUh0OVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU55WldGMFpYTWdZU0JqYkdGemN5QjBhR0YwSUdsdGNHeGxiV1Z1ZEhNZ2UwQnNhVzVySUZOVFRVeFRjR1ZsWTJodFlYSnJTVzUwWlhKbVlXTmxmVnh5WEc0Z0lDQXFJR0Z1WkNCbGVIUmxibVJ6SUdFZ2MzQmxZMmxtYVdWa0lHSmhjMlVnWTJ4aGMzTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwTnNZWE56ZlNCQ1lYTmxRMnhoYzNNZ0xTQlVhR1VnWTJ4aGMzTWdkRzhnWlhoMFpXNWtMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdRMnhoYzNOOUlFRWdZMnhoYzNNZ2RHaGhkQ0JsZUhSbGJtUnpJR0JDWVhObFEyeGhjM05nSUdGdVpDQnBiWEJzWlcxbGJuUnpJSHRBYkdsdWF5QlRVMDFNVTNCbFpXTm9iV0Z5YTBsdWRHVnlabUZqWlgwdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRTFwZUdsdUtFSmhjMlZEYkdGemN5a2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ1VHRnlaVzUwUTJ4aGMzTWdQU0JVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsUkdWd1pXNWtaVzUwU1c1MFpYSm1ZV05sTGsxcGVHbHVLRUpoYzJWRGJHRnpjeWs3WEhKY2JpQWdJQ0JqYjI1emRDQlRVMDFNVTNCbFpXTm9UV0Z5YTAxcGVHbHVJRDBnWTJ4aGMzTWdaWGgwWlc1a2N5QlFZWEpsYm5SRGJHRnpjeUI3WEhKY2JpQWdJQ0FnSUY5dmJsTnpiV3dvZTIxaGNtdDlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUh0bVpXRjBkWEpsTENCdFpYUm9iMlFzSUdGeVozTjlJRDBnU2xOUFRpNXdZWEp6WlNodFlYSnJMblpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJuTjBjblZqZEc5eUxtNWhiV1VnUFQwOUlHWmxZWFIxY21VcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTJGc2JHSmhZMnNnUFNCMGFHbHpXMjFsZEdodlpGMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ltRmpheUFtSmlCMGVYQmxiMllnWTJGc2JHSmhZMnNnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheTVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhnUm5WdVkzUnBiMjRnSkh0dFpYUm9iMlI5SUdSdlpYTWdibTkwSUdWNGFYTjBJSGRwZEdocGJpQm1aV0YwZFhKbElDUjdabVZoZEhWeVpYMWdLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDaGxLU0I3ZlZ4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQlRVMDFNVTNCbFpXTm9UV0Z5YTAxcGVHbHVPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVMU5OVEZOd1pXVmphRzFoY210SmJuUmxjbVpoWTJVN1hISmNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkJiV0Y2YjI0dVkyOXRMQ0JKYm1NdUlHOXlJR2wwY3lCaFptWnBiR2xoZEdWekxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh5WEc0dkx5QlRVRVJZTFV4cFkyVnVjMlV0U1dSbGJuUnBabWxsY2pvZ1RVbFVMVEJjY2x4dWFXMXdiM0owSUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpTQm1jbTl0SUNjdUwyRnVhVzF3WVdOckwwMWhibUZuWldSQmJtbHRZWFJwYjI1TVlYbGxja2x1ZEdWeVptRmpaU2M3WEhKY2JtbHRjRzl5ZENCVFUwMU1VM0JsWldOb2JXRnlhMGx1ZEdWeVptRmpaU0JtY205dElDY3VMMkYzYzNCaFkyc3ZVMU5OVEZOd1pXVmphRzFoY210SmJuUmxjbVpoWTJVbk8xeHlYRzVwYlhCdmNuUWdRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaU0JtY205dElDY3VMMEZpYzNSeVlXTjBTRzl6ZEVabFlYUjFjbVVuTzF4eVhHNXBiWEJ2Y25RZ1JHVm1aWEp5WldRZ1puSnZiU0FuTGk5RVpXWmxjbkpsWkNjN1hISmNibWx0Y0c5eWRDQlZkR2xzY3lCbWNtOXRJQ2N1TDFWMGFXeHpKenRjY2x4dVhISmNibU52Ym5OMElFUmxabUYxYkhSSFpYTjBkWEpsVjI5eVpITWdQU0I3WEhKY2JpQWdZbWxuT2lCYlhISmNiaUFnSUNBbllXUmtKeXhjY2x4dUlDQWdJQ2RoWW05MlpTY3NYSEpjYmlBZ0lDQW5ZWFYwYUc5eWFYUjVKeXhjY2x4dUlDQWdJQ2RpYVdjbkxGeHlYRzRnSUNBZ0oyTnZkbVZ5Snl4Y2NseHVJQ0FnSUNkbWRXeHNKeXhjY2x4dUlDQWdJQ2RtYkhrbkxGeHlYRzRnSUNBZ0oyZHliM2NuTEZ4eVhHNGdJQ0FnSjJkeWIzZDBhQ2NzWEhKY2JpQWdJQ0FuYUdsbmFDY3NYSEpjYmlBZ0lDQW5hSFZuWlNjc1hISmNiaUFnSUNBbmFXNWpjbVZoYzJVbkxGeHlYRzRnSUNBZ0oyMWhhbTl5Snl4Y2NseHVJQ0FnSUNkdFlXcHZjbWwwZVNjc1hISmNiaUFnSUNBbmJHRnlaMlVuTEZ4eVhHNGdJQ0FnSjJ4bFlXUmxjaWNzWEhKY2JpQWdJQ0FuYkc5MEp5eGNjbHh1SUNBZ0lDZHlZV2x6WlNjc1hISmNiaUFnSUNBbmNtbHpaU2NzWEhKY2JpQWdJQ0FuZEdGc2JDY3NYSEpjYmlBZ1hTeGNjbHh1SUNCb1pXRnlkRG9nVzF4eVhHNGdJQ0FnSjJGalkyVndkQ2NzWEhKY2JpQWdJQ0FuWVdSdGFYUW5MRnh5WEc0Z0lDQWdKMkpsYkdsbGRtVW5MRnh5WEc0Z0lDQWdKMk5oY21VbkxGeHlYRzRnSUNBZ0oyWmxaV3hwYm1jbkxGeHlYRzRnSUNBZ0oyWmxaV3duTEZ4eVhHNGdJQ0FnSjJaeWFXVnVaQ2NzWEhKY2JpQWdJQ0FuWjNKaGRHVm1kV3duTEZ4eVhHNGdJQ0FnSjJoaGNIQjVKeXhjY2x4dUlDQWdJQ2RvWldGeWRDY3NYSEpjYmlBZ0lDQW5hSFZ0WVc0bkxGeHlYRzRnSUNBZ0ozQmhhVzRuTEZ4eVhHNGdJQ0FnSjNOaGRtVW5MRnh5WEc0Z0lDQWdKM05oWm1VbkxGeHlYRzRnSUNBZ0oydHBibVFuTEZ4eVhHNGdJQ0FnSjJ4dmRtVW5MRnh5WEc0Z0lGMHNYSEpjYmlBZ2FXNDZJRnRjY2x4dUlDQWdJQ2RwYm1Oc2RXUmxKeXhjY2x4dUlDQWdJQ2RwYm1Oc2RXUnBibWNuTEZ4eVhHNGdJQ0FnSjJsdWMybGtaU2NzWEhKY2JpQWdJQ0FuYVc1MGJ5Y3NYSEpjYmlBZ0lDQW5ibTkzSnl4Y2NseHVJQ0FnSUNkdVpXRnlKeXhjY2x4dUlDQWdJQ2R1WldGeVpYTjBKeXhjY2x4dUlDQWdJQ2RqYkc5elpYTjBKeXhjY2x4dUlDQWdJQ2QwYUdWeVpXbHVKeXhjY2x4dUlDQWdJQ2QzYVhSb2FXNG5MRnh5WEc0Z0lGMHNYSEpjYmlBZ2JXRnVlVG9nVzF4eVhHNGdJQ0FnSjJGc2JDY3NYSEpjYmlBZ0lDQW5ZV3gzWVhsekp5eGNjbHh1SUNBZ0lDZGhibmtuTEZ4eVhHNGdJQ0FnSjJGdWVXOXVaU2NzWEhKY2JpQWdJQ0FuWVcxdmJtY25MRnh5WEc0Z0lDQWdKMkZ5WldFbkxGeHlYRzRnSUNBZ0oyRnliM1Z1WkNjc1hISmNiaUFnSUNBblltVmhkWFJwWm5Wc0p5eGNjbHh1SUNBZ0lDZGxiblJwY21VbkxGeHlYRzRnSUNBZ0oyVnVkbWx5YjI1dFpXNTBKeXhjY2x4dUlDQWdJQ2RsYm5acGNtOXViV1Z1ZEhNbkxGeHlYRzRnSUNBZ0oyVnVkbWx5YjI1dFpXNTBZV3duTEZ4eVhHNGdJQ0FnSjJWMlpYSjVZbTlrZVNjc1hISmNiaUFnSUNBblpYWmxjbmx2Ym1VbkxGeHlYRzRnSUNBZ0oyVjJaWEo1ZEdocGJtY25MRnh5WEc0Z0lDQWdKMkYxWkdsbGJtTmxKeXhjY2x4dUlDQWdJQ2QwYjNSaGJDY3NYSEpjYmlBZ0lDQW5aM0p2ZFhBbkxGeHlYRzRnSUNBZ0oyZHliM1Z3Y3ljc1hISmNiaUFnSUNBbmJXbHNiR2x2Ymljc1hISmNiaUFnSUNBbmJXbHNiR2x2Ym5NbkxGeHlYRzRnSUNBZ0oyOTBhR1Z5Y3ljc1hISmNiaUFnSUNBblltbHNiR2x2Ymljc1hISmNiaUFnSUNBblltbHNiR2x2Ym5NbkxGeHlYRzRnSUNBZ0oyaDFibVJ5WldRbkxGeHlYRzRnSUNBZ0oyaDFibVJ5WldSekp5eGNjbHh1SUNBZ0lDZHRZVzU1Snl4Y2NseHVJQ0FnSUNkMGFHOTFjMkZ1WkNjc1hISmNiaUFnSUNBbmRHaHZkWE5oYm1Sekp5eGNjbHh1SUNBZ0lDZDNiM0pzWkNjc1hISmNiaUFnSUNBbmQyOXliR1J6Snl4Y2NseHVJQ0FnSUNkdmRYUnphV1JsSnl4Y2NseHVJQ0FnSUNkeVpYWmxZV3duTEZ4eVhHNGdJRjBzWEhKY2JpQWdiVzkyWlcxbGJuUTZJRnRjY2x4dUlDQWdJQ2RoZDJGNUp5eGNjbHh1SUNBZ0lDZGhZM0p2YzNNbkxGeHlYRzRnSUNBZ0oyRm9aV0ZrSnl4Y2NseHVJQ0FnSUNkaGJHOXVaeWNzWEhKY2JpQWdJQ0FuWm1GeUp5eGNjbHh1SUNBZ0lDZG1ZWE4wSnl4Y2NseHVJQ0FnSUNkbWIyeHNiM2NuTEZ4eVhHNGdJQ0FnSjJkdkp5eGNjbHh1SUNBZ0lDZHNaV0YyWlNjc1hISmNiaUFnSUNBbmJXOTJaU2NzWEhKY2JpQWdJQ0FuYlc5MlpXMWxiblFuTEZ4eVhHNGdJQ0FnSjNSb2NtOTFaMmduTEZ4eVhHNGdJQ0FnSjNSb2NtOTFaMmh2ZFhRbkxGeHlYRzRnSUNBZ0ozUnZkMkZ5WkNjc1hISmNiaUFnSUNBbmRISmhkbVZzSnl4Y2NseHVJQ0FnSUNkMGRYSnVaV1FuTEZ4eVhHNGdJQ0FnSjNCaGMzTmxaQ2NzWEhKY2JpQWdYU3hjY2x4dUlDQnZibVU2SUZ0Y2NseHVJQ0FnSUNkemFXNW5iR1VuTEZ4eVhHNGdJQ0FnSjI5dVpTY3NYSEpjYmlBZ0lDQW5iMjVqWlNjc1hISmNiaUFnSUNBblptbHljM1FuTEZ4eVhHNGdJQ0FnSjJacGNuTjBiSGtuTEZ4eVhHNGdJQ0FnSjI5dWJIa25MRnh5WEc0Z0lDQWdKM052Ykc4bkxGeHlYRzRnSUNBZ0ozZGhjbTVsWkNjc1hISmNiaUFnSUNBbmRISjFiSGtuTEZ4eVhHNGdJQ0FnSjNWd0p5eGNjbHh1SUNBZ0lDZGhiRzl1WlNjc1hISmNiaUFnWFN4Y2NseHVJQ0JoWjJkeVpYTnphWFpsT2lCYlhISmNiaUFnSUNBbmNHOTNaWEluTEZ4eVhHNGdJQ0FnSjNCdmQyVnljeWNzWEhKY2JpQWdJQ0FuY0c5M1pYSm1kV3duTEZ4eVhHNGdJQ0FnSjJGemMyVnlkQ2NzWEhKY2JpQWdJQ0FuWVhOelpYSjBhWFpsSnl4Y2NseHVJQ0FnSUNkemRISnZibWNuTEZ4eVhHNGdJQ0FnSjNOMGNtOXVaMlZ5Snl4Y2NseHVJQ0FnSUNkemRISnZibWRsYzNRbkxGeHlYRzRnSUNBZ0ozTjBjbVZ1WjNSb0p5eGNjbHh1SUNBZ0lDZG1iR1Y0Snl4Y2NseHVJQ0FnSUNka1lXNW5KeXhjY2x4dUlDQWdJQ2RrWVcxdUp5eGNjbHh1SUNBZ0lDZGtZVzF1YVhRbkxGeHlYRzRnSUNBZ0oyUmhjbTRuTEZ4eVhHNGdJQ0FnSjNOb2RXTnJjeWNzWEhKY2JpQWdJQ0FuWkc5b0p5eGNjbHh1SUNBZ0lDZGtjbUYwSnl4Y2NseHVJQ0FnSUNkaGJtZHllU2NzWEhKY2JpQWdJQ0FuWVc1bmNtbGxjaWNzWEhKY2JpQWdJQ0FuWVc1bmNtbGxjM1FuTEZ4eVhHNGdJQ0FnSjJGblozSmxjM05wZG1VbkxGeHlYRzRnSUNBZ0oyRnVibTk1WldRbkxGeHlYRzRnSUNBZ0oyRnVibTk1YVc1bkp5eGNjbHh1SUNBZ0lDZGhkSFJoWTJzbkxGeHlYRzRnSUNBZ0oyRjBkR0ZqYTJsdVp5Y3NYSEpjYmlBZ0lDQW5iMlptWlc1elpTY3NYSEpjYmlBZ0lDQW5iMlptWlc1emFYWmxKeXhjY2x4dUlDQWdJQ2RpWVhSMGJHVW5MRnh5WEc0Z0lGMHNYSEpjYmlBZ2VXOTFPaUJiSjNsdmRTY3NJQ2Q1WVd4c0p5d2dYQ0o1SjJGc2JGd2lMQ0FuZVc5MWNpY3NJQ2Q1YjNWeWN5Y3NJQ2QwYUc5MUp5d2dKM1JvZVNkZExGeHlYRzRnSUdSbFptVnVjMlU2SUZ0Y2NseHVJQ0FnSUNka1pXWmxibk5sSnl4Y2NseHVJQ0FnSUNkbVpXRnlKeXhjY2x4dUlDQWdJQ2R5WlhCMWJITmxaQ2NzWEhKY2JpQWdJQ0FuYzJOaGNtVmtKeXhjY2x4dUlDQWdJQ2R6WTJGeWVTY3NYSEpjYmlBZ0lDQW5jMk5oY21sbGNpY3NYSEpjYmlBZ0lDQW5jMk5oY21sbGMzUW5MRnh5WEc0Z0lDQWdKMlpsWVhKbWRXd25MRnh5WEc0Z0lDQWdKMkZtY21GcFpDY3NYSEpjYmlBZ0lDQW5ZMjkzWlhJbkxGeHlYRzRnSUNBZ0oyTnZkMlZ5Y3ljc1hISmNiaUFnSUNBblkyOTNaWEpwYm1jbkxGeHlYRzRnSUNBZ0oyaHBaR1Z2ZFhNbkxGeHlYRzRnSUNBZ0oyUnZiMjFsWkNjc1hISmNiaUFnSUNBbmRHVnljbWxtYVdWa0p5eGNjbHh1SUNBZ0lDZDBaWEp5YVdaNUp5eGNjbHh1SUNBZ0lDZDBaWEp5YVdaNWFXNW5KeXhjY2x4dUlDQWdJQ2QwWlhKeWFXWnBaWE1uTEZ4eVhHNGdJQ0FnSjNOd2IyOXJlU2NzWEhKY2JpQWdJQ0FuYzNCdmIydHBaWEluTEZ4eVhHNGdJQ0FnSjNOd2IyOXJhV1Z6ZENjc1hISmNiaUFnWFN4Y2NseHVJQ0IzWVhabE9pQmJYSEpjYmlBZ0lDQW5hR1ZzYkc4bkxGeHlYRzRnSUNBZ0oyaHBKeXhjY2x4dUlDQWdJQ2RvYVhsaEp5eGNjbHh1SUNBZ0lDZG9iM2RrZVNjc1hISmNiaUFnSUNBbmQyVnNZMjl0WlNjc1hISmNiaUFnSUNBbllXeHZhR0VuTEZ4eVhHNGdJQ0FnSjJobGVXRW5MRnh5WEc0Z0lDQWdKMmhsZVNjc1hISmNiaUFnSUNBbllubGxKeXhjY2x4dUlDQWdJQ2RuYjI5a1lubGxKeXhjY2x4dUlDQWdJQ2RvYjJ4aEp5eGNjbHh1SUNBZ0lDZGhaR2x2Y3ljc1hISmNiaUFnSUNBblkyaGhieWNzWEhKY2JpQWdYU3hjY2x4dUlDQnpaV3htT2lCYkoyMTVKeXdnSjBrbkxDQW5iWGx6Wld4bUp5d2dKM05sYkdZbkxDQmNJa2tuZG1WY0lpd2dKMGwyWlNjc0lDZHRaU2NzSUNkdGFXNWxKeXdnSjI5M2JpZGRMRnh5WEc1OU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFZGxjM1IxY21VZ1lXeHNiM2R6SUhsdmRTQjBieUJ3YkdGNUlHRnVhVzFoZEdsdmJuTWdiMjRnWkdWdFlXNWtJRzl1SUc5dVpTQnZjaUJ0YjNKbElHeGhlV1Z5Y3lCbWNtOXRJSE5qY21sd2RGeHlYRzRnS2lCdmNpQnpjMjFzTGlCSlppQm5aWE4wZFhKbElHbHpJSEJzWVhsbFpDQjBhR0YwSUdseklHRWdVWFZsZFdWVGRHRjBaU3dnZEdobElIRjFaWFZsSUhkcGJHd2dZWFYwYjIxaGRHbGpZV3hzZVZ4eVhHNGdLaUJpWlNCd2NtOW5jbVZ6YzJWa0lHRm1kR1Z5SUdFZ1oybDJaVzRnYUc5c1pDQjBhVzFsSUdsbUlHRWdiRzl2Y0dsdVp5QnhkV1YxWldRZ2MzUmhkR1VnYVhNZ2NtVmhZMmhsWkM0Z1IyVnpkSFZ5WlZ4eVhHNGdLaUJzWVhsbGNuTWdZMkZ1SUc5d2RHbHZibUZzYkhrZ1ltVWdZWFYwYjIxaGRHbGpZV3hzZVNCa2FYTmhZbXhsWkNCM2FHVnVJRzV2SUdkbGMzUjFjbVVnWVc1cGJXRjBhVzl1SUdselhISmNiaUFxSUdsdUlIQnliMmR5WlhOekxseHlYRzRnS2x4eVhHNGdLaUJBWlhoMFpXNWtjeUJCWW5OMGNtRmpkRWh2YzNSR1pXRjBkWEpsWEhKY2JpQXFJRUJwYlhCc1pXMWxiblJ6SUZOVFRVeFRjR1ZsWTJodFlYSnJTVzUwWlhKbVlXTmxYSEpjYmlBcUlFQnBiWEJzWlcxbGJuUnpJRTFoYm1GblpXUkJibWx0WVhScGIyNU1ZWGxsY2tsdWRHVnlabUZqWlZ4eVhHNGdLaTljY2x4dVkyeGhjM01nUjJWemRIVnlaVVpsWVhSMWNtVWdaWGgwWlc1a2N5QkJZbk4wY21GamRFaHZjM1JHWldGMGRYSmxMbTFwZUNoY2NseHVJQ0JUVTAxTVUzQmxaV05vYldGeWEwbHVkR1Z5Wm1GalpTNU5hWGhwYml4Y2NseHVJQ0JOWVc1aFoyVmtRVzVwYldGMGFXOXVUR0Y1WlhKSmJuUmxjbVpoWTJVdVRXbDRhVzVjY2x4dUtTQjdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRR052Ym5OMGNuVmpkRzl5WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMk52Y21VdlNHOXpkRTlpYW1WamRIMGdhRzl6ZENBdElFaHZjM1FnYjJKcVpXTjBJSFJvWVhRZ2IzZHVjeUIwYUdVZ1ptVmhkSFZ5WlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDE5SUc5d2RHbHZibk1nTFNCUGNIUnBiMjVoYkNCdmNIUnBiMjV6SUdadmNpQjBhR1VnWm1WaGRIVnlaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjl3ZEdsdmJuTXVhRzlzWkZScGJXVWdQU0F6WFNBdElFRnRiM1Z1ZENCdlppQjBhVzFsSUdsdUlITmxZMjl1WkhNZ2RHaGhkQ0J0ZFhOMFhISmNiaUFnSUNvZ1pXeGhjSE5sSUdKbFptOXlaU0JoWkhaaGJtTnBibWNnWVNCblpYTjBkWEpsSUhSb1lYUW5jeUJoSUh0QWJHbHVheUJSZFdWMVpWTjBZWFJsZlNCM2FHVnVJSFJvWlNCamRYSnlaVzUwWEhKY2JpQWdJQ29nYzNSaGRHVWdhVzRnZEdobElIRjFaWFZsSUdseklITmxkQ0IwYnlCc2IyOXdJR2x1Wm1sdWFYUmxiSGt1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR2Y0hScGIyNXpMbTFwYm1sdGRXMUpiblJsY25aaGJDQTlJREF1TWpWZElDMGdWR2hsSUcxcGJtbHRkVzBnWVcxdmRXNTBJRzltSUhScGJXVmNjbHh1SUNBZ0tpQnBiaUJ6WldOdmJtUnpJSFJvWVhRZ2JYVnpkQ0JsYkdGd2MyVWdZbVZtYjNKbElHRnViM1JvWlhJZ1oyVnpkSFZ5WlNCallXNGdZbVVnY0d4aGVXVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdiR0Y1WlhKeklDMGdRVzRnYjJKcVpXTjBJSFJvWVhRZ2JXRndjeUJzWVhsbGNpQnVZVzFsY3lCMGJ5QnNZWGxsY2lCdmNIUnBiMjV6TGx4eVhHNGdJQ0FxSUZSb1pYTmxJR0Z5WlNCMGFHVWdiR0Y1WlhKeklIUm9ZWFFnZDJsc2JDQmlaU0J5WldkcGMzUmxjbVZrSUdGeklIUnlZV05yWldRZ1oyVnpkSFZ5WlNCc1lYbGxjbk11SUZObFpWeHlYRzRnSUNBcUlIdEFiR2x1YXlCTllXNWhaMlZrUVc1cGJXRjBhVzl1VEdGNVpYSkpiblJsY21aaFkyVWpjbVZuYVhOMFpYSk1ZWGxsY24wZ1ptOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNWNjbHh1SUNBZ0tpQnZiaUJsZUhCbFkzUmxaQ0JtYjNKdFlYUWdabTl5SUdWaFkyZ2diR0Y1WlhJZ2IzQjBhVzl1Y3lCdlltcGxZM1F1WEhKY2JpQWdJQ292WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvYUc5emRDd2dlMmh2YkdSVWFXMWxJRDBnTXl3Z2JXbHVhVzExYlVsdWRHVnlkbUZzSUQwZ01Td2diR0Y1WlhKeklEMGdlMzE5SUQwZ2UzMHBJSHRjY2x4dUlDQWdJSE4xY0dWeUtHaHZjM1FwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YUc5c1pGUnBiV1VnUFNCb2IyeGtWR2x0WlR0Y2NseHVJQ0FnSUhSb2FYTXViV2x1YVcxMWJVbHVkR1Z5ZG1Gc0lEMGdiV2x1YVcxMWJVbHVkR1Z5ZG1Gc08xeHlYRzVjY2x4dUlDQWdJQzh2SUZKbFoybHpkR1Z5SUhSb1pTQm5aWE4wZFhKbElHeGhlV1Z5YzF4eVhHNGdJQ0FnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9iR0Y1WlhKektTNW1iM0pGWVdOb0tDaGJibUZ0WlN3Z2IzQjBhVzl1Y3lBOUlIdDlYU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5KbFoybHpkR1Z5VEdGNVpYSW9ibUZ0WlN3Z2IzQjBhVzl1Y3lrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsZEhWeWJpQmhJSFpoYkdsa0lHaHZiR1FnZEdsdFpTQjJZV3gxWlM0Z1NXWWdhRzlzWkNCMGFXMWxJR2x6YmlkMElHUmxabWx1WldRZ1ptOXlJSFJvWlNCaGJtbHRZWFJwYjI0c1hISmNiaUFnSUNvZ2RISjVJSFJ2SUhWelpTQjBhR1VnYUc5c1pDQjBhVzFsSUdadmNpQjBhR1VnYkdGNVpYSXVJRWxtSUhSb1lYUW5jeUJ1YjNRZ1pHVm1hVzVsWkN3Z1ptRnNiQ0JpWVdOcklIUnZYSEpjYmlBZ0lDb2dkR2hsSUdodmJHUWdkR2x0WlNCbWIzSWdkR2hsSUdabFlYUjFjbVV1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHeGhlV1Z5SUMwZ1RXRnVZV2RsWkNCc1lYbGxjaUJ2Y0hScGIyNXpJRzlpYW1WamRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1lXNXBiV0YwYVc5dUlDMGdUV0Z1WVdkbFpDQmhibWx0WVhScGIyNGdiM0IwYVc5dWN5QnZZbXBsWTNRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JuVnRZbVZ5ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjluWlhSSWIyeGtWR2x0WlNoc1lYbGxjaXdnWVc1cGJXRjBhVzl1S1NCN1hISmNiaUFnSUNCamIyNXpkQ0JzWVhsbGNraHZiR1JVYVcxbElEMWNjbHh1SUNBZ0lDQWdiR0Y1WlhJdWFHOXNaRlJwYldVZ0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUd4aGVXVnlMbWh2YkdSVWFXMWxJRG9nZEdocGN5NW9iMnhrVkdsdFpUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdZVzVwYldGMGFXOXVMbWh2YkdSVWFXMWxJQ0U5UFNCMWJtUmxabWx1WldSY2NseHVJQ0FnSUNBZ1B5QmhibWx0WVhScGIyNHVhRzlzWkZScGJXVmNjbHh1SUNBZ0lDQWdPaUJzWVhsbGNraHZiR1JVYVcxbE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwZFhKdUlHRWdkbUZzYVdRZ2JXbHVhVzExYlNCcGJuUmxjblpoYkNCMllXeDFaUzRnU1dZZ2JXbHVhVzExYlNCcGJuUmxjblpoYkNCcGMyNG5kQ0JrWldacGJtVmtJR1p2Y2x4eVhHNGdJQ0FxSUhSb1pTQmhibWx0WVhScGIyNHNJSFJ5ZVNCMGJ5QjFjMlVnZEdobElHMXBibWx0ZFcwZ2FXNTBaWEoyWVd3Z1ptOXlJSFJvWlNCc1lYbGxjaTRnU1dZZ2RHaGhkQ2R6SUc1dmRGeHlYRzRnSUNBcUlHUmxabWx1WldRc0lHWmhiR3dnWW1GamF5QjBieUIwYUdVZ2JXbHVhVzExYlNCcGJuUmxjblpoYkNCbWIzSWdkR2hsSUdabFlYUjFjbVV1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHeGhlV1Z5SUMwZ1RXRnVZV2RsWkNCc1lYbGxjaUJ2Y0hScGIyNXpJRzlpYW1WamRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1lXNXBiV0YwYVc5dUlDMGdUV0Z1WVdkbFpDQmhibWx0WVhScGIyNGdiM0IwYVc5dWN5QnZZbXBsWTNRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JuVnRZbVZ5ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjluWlhSTmFXNXBiWFZ0U1c1MFpYSjJZV3dvYkdGNVpYSXNJR0Z1YVcxaGRHbHZiaWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhKTmFXNXBiWFZ0U1c1MFpYSjJZV3dnUFZ4eVhHNGdJQ0FnSUNCc1lYbGxjaTV0YVc1cGJYVnRTVzUwWlhKMllXd2dJVDA5SUhWdVpHVm1hVzVsWkZ4eVhHNGdJQ0FnSUNBZ0lEOGdiR0Y1WlhJdWJXbHVhVzExYlVsdWRHVnlkbUZzWEhKY2JpQWdJQ0FnSUNBZ09pQjBhR2x6TG0xcGJtbHRkVzFKYm5SbGNuWmhiRHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnWVc1cGJXRjBhVzl1TG0xcGJtbHRkVzFKYm5SbGNuWmhiQ0FoUFQwZ2RXNWtaV1pwYm1Wa1hISmNiaUFnSUNBZ0lEOGdZVzVwYldGMGFXOXVMbTFwYm1sdGRXMUpiblJsY25aaGJGeHlYRzRnSUNBZ0lDQTZJR3hoZVdWeVRXbHVhVzExYlVsdWRHVnlkbUZzTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1EyRnNiR0poWTJzZ1ptOXlJSHRBYkdsdWF5QmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqY0d4aGVVNWxlSFJCYm1sdFlYUnBiMjU5SUdWMlpXNTBMaUJKWmlCMGFHVmNjbHh1SUNBZ0tpQmxkbVZ1ZENCcGN5QmxiV2wwZEdWa0lHWnZjaUJoSUcxaGJtRm5aV1FnWVc1cGJXRjBhVzl1SUdGdVpDQjBhR1VnYm1WM0lIRjFaWFZsWkNCemRHRjBaU0JqWVc1dWIzUmNjbHh1SUNBZ0tpQmhaSFpoYm1ObElHOXVJR2wwY3lCdmQyNHNJSE4wWVhKMElHRWdibVYzSUhScGJXVnlJSEJ5YjIxcGMyVWdkR2hoZENCM2FXeHNJR0ZrZG1GdVkyVWdkR2hsSUhGMVpYVmxYSEpjYmlBZ0lDb2diMjVqWlNCcGRDQnlaWE52YkhabGN5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjNCMGFXOXVjeUF0SUU5d2RHbHZibk1nYjJKcVpXTjBJSEJoYzNObFpDQm1jbTl0SUhCc1lYbE9aWGgwUVc1cGJXRjBhVzl1SUdWMlpXNTBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnNZWGxsY2s1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCc1lYbGxjaUIwYUdGMElHOTNibk1nZEdobElIRjFaWFZsSUhOMFlYUmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0WVhScGIyNU9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdjWFZsZFdVZ2MzUmhkR1VnWVc1cGJXRjBhVzl1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnWTJGdVFXUjJZVzVqWlNBdElGZG9aWFJvWlhJZ2IzSWdibTkwSUhSb1pTQmpkWEp5Wlc1MElITjBZWFJsSUdsdUlIUm9aU0J4ZFdWMVpWeHlYRzRnSUNBcUlHTmhiaUJoWkhaaGJtTmxJRzl1SUdsMGN5QnZkMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0JwYzFGMVpYVmxSVzVrSUMwZ1YyaGxkR2hsY2lCMGFHVWdZM1Z5Y21WdWRDQnpkR0YwWlNCcGJpQjBhR1VnY1hWbGRXVWdhWE1nZEdobElHeGhjM1JjY2x4dUlDQWdLaUJ6ZEdGMFpTQnBiaUIwYUdVZ2NYVmxkV1V1WEhKY2JpQWdJQ292WEhKY2JpQWdYMjl1VG1WNGRDaDdiR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbExDQmpZVzVCWkhaaGJtTmxMQ0JwYzFGMVpYVmxSVzVrZlNrZ2UxeHlYRzRnSUNBZ0x5OGdSWGhwZENCcFppQjBhR2x6SUdsemJpZDBJR0VnYldGdVlXZGxaQ0JzWVhsbGNseHlYRzRnSUNBZ1kyOXVjM1FnYkdGNVpYSWdQU0IwYUdsekxsOXRZVzVoWjJWa1RHRjVaWEp6VzJ4aGVXVnlUbUZ0WlYwN1hISmNiaUFnSUNCcFppQW9iR0Y1WlhJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdSWGhwZENCcFppQnBkQ0JwYzI0bmRDQmhJRzFoYm1GblpXUWdZVzVwYldGMGFXOXVYSEpjYmlBZ0lDQmpiMjV6ZENCaGJtbHRZWFJwYjI0Z1BTQnNZWGxsY2k1aGJtbHRZWFJwYjI1elcyRnVhVzFoZEdsdmJrNWhiV1ZkTzF4eVhHNGdJQ0FnYVdZZ0tHRnVhVzFoZEdsdmJpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMeUJUZEdGeWRDQmhJRzVsZHlCMGFXMWxjaUJtYjNJZ2JHOXZjR2x1WnlCemRHRjBaWE1nZEdoaGRDQmhjbVZ1SjNRZ2RHaGxJR1Z1WkNCdlppQjBhR1VnY1hWbGRXVmNjbHh1SUNBZ0lHbG1JQ2doWTJGdVFXUjJZVzVqWlNBbUppQWhhWE5SZFdWMVpVVnVaQ0FtSmlCc1lYbGxjaTVqZFhKeVpXNTBSMlZ6ZEhWeVpTQTlQVDBnWVc1cGJXRjBhVzl1VG1GdFpTa2dlMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQm9iMnhrVkdsdFpTQTlJSFJvYVhNdVgyZGxkRWh2YkdSVWFXMWxLR3hoZVdWeUxDQmhibWx0WVhScGIyNHBPMXh5WEc0Z0lDQWdJQ0JzWVhsbGNpNW9iMnhrVkdsdFpYSXVZMkZ1WTJWc0tDazdYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5QlRhMmx3SUhSdklIUm9aU0J1WlhoMElHRnVhVzFoZEdsdmJpQnlhV2RvZENCaGQyRjVJR2xtSUdodmJHUWdkR2x0WlNCcGN5QjZaWEp2WEhKY2JpQWdJQ0FnSUdsbUlDaG9iMnhrVkdsdFpTQThQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbkJzWVhsT1pYaDBRVzVwYldGMGFXOXVLR3hoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1VG1GdFpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDOHZJRmRoYVhRZ1ptOXlJSFJvWlNCbmFYWmxiaUJvYjJ4a0lIUnBiV1VnWW1WbWIzSmxJSEJ5YjJkeVpYTnphVzVuWEhKY2JpQWdJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUd4aGVXVnlMbWh2YkdSVWFXMWxjaUE5SUZWMGFXeHpMbmRoYVhRb2FHOXNaRlJwYldVc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUc5dVJtbHVhWE5vT2lBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVGa2RtRnVZMlVnZEdobElIRjFaWFZsSUhSdklIUm9aU0J1WlhoMElITjBZWFJsWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1lYbGxjaTVqZFhKeVpXNTBSMlZ6ZEhWeVpTQTlQVDBnWVc1cGJXRjBhVzl1VG1GdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaHZjM1F1UVc1cGJXRjBhVzl1Um1WaGRIVnlaUzV3YkdGNVRtVjRkRUZ1YVcxaGRHbHZiaWhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlUbUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrNWhiV1ZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEWVd4c1ltRmpheUJtYjNJZ2UwQnNhVzVySUdOdmNtVXZRVzVwYldGMGFXOXVSbVZoZEhWeVpTTnpkRzl3UVc1cGJXRjBhVzl1ZlNCbGRtVnVkQzRnU1dZZ2RHaGxYSEpjYmlBZ0lDb2daWFpsYm5RZ2FYTWdaVzFwZEhSbFpDQm1iM0lnWVNCdFlXNWhaMlZrSUdGdWFXMWhkR2x2YmlCallXNWpaV3dnZEdobElHeGhlV1Z5SjNNZ2MzUnZjbVZrSUhScGJXVnljeTVjY2x4dUlDQWdLaUJKWmlCMGFHVWdiR0Y1WlhJZ2FYTWdjMlYwSUhSdklHRjFkRzh0WkdsellXSnNaU0J6WlhRZ2FYUnpJSGRsYVdkb2RDQjBieUF3TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdUM0IwYVc5dWN5QnZZbXBsWTNRZ2NHRnpjMlZrSUdaeWIyMGdjR3hoZVU1bGVIUkJibWx0WVhScGIyNGdaWFpsYm5RdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd4aGVXVnlUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUlIUm9ZWFFnYjNkdWN5QjBhR1VnYzNSdmNIQmxaQ0JoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR0Z1YVcxaGRHbHZiazVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JoYm1sdFlYUnBiMjRnZEdoaGRDQjNZWE1nYzNSdmNIQmxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQmZiMjVUZEc5d0tIdHNZWGxsY2s1aGJXVXNJR0Z1YVcxaGRHbHZiazVoYldWOUtTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHeGhlV1Z5SUdseklHMWhibUZuWldSY2NseHVJQ0FnSUdOdmJuTjBJR3hoZVdWeUlEMGdkR2hwY3k1ZmJXRnVZV2RsWkV4aGVXVnljMXRzWVhsbGNrNWhiV1ZkTzF4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjBhR1VnWVc1cGJXRjBhVzl1SUdseklHMWhibUZuWldSY2NseHVJQ0FnSUdOdmJuTjBJR0Z1YVcxaGRHbHZiaUE5SUd4aGVXVnlMbUZ1YVcxaGRHbHZibk5iWVc1cGJXRjBhVzl1VG1GdFpWMDdYSEpjYmlBZ0lDQnBaaUFvWVc1cGJXRjBhVzl1SUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnWVc1cGJXRjBhVzl1VG1GdFpTQTlQVDBnYkdGNVpYSXVZM1Z5Y21WdWRFZGxjM1IxY21VcElIdGNjbHh1SUNBZ0lDQWdiR0Y1WlhJdVkzVnljbVZ1ZEVkbGMzUjFjbVVnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0JzWVhsbGNpNXdiR0Y1VkdsdFpYSWdQU0J1ZFd4c08xeHlYRzRnSUNBZ0lDQnNZWGxsY2k1b2IyeGtWR2x0WlhJdVkyRnVZMlZzS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCVWRYSnVJRzltWmlCc1lYbGxjaUIzWldsbmFIUmNjbHh1SUNBZ0lDQWdhV1lnS0d4aGVXVnlMbUYxZEc5RWFYTmhZbXhsS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUk1ZWGxsY2xkbGFXZG9kSE1vYm1GdFpTQTlQaUJ1WVcxbElEMDlQU0JzWVhsbGNrNWhiV1VzSURBcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmZiMjVCYm1sdFlYUnBiMjVCWkdSbFpDaDdiR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbGZTa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2JHRjVaWElnUFNCMGFHbHpMbDl0WVc1aFoyVmtUR0Y1WlhKelcyeGhlV1Z5VG1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdZVzVwYldGMGFXOXVJRDBnYkdGNVpYSXVZVzVwYldGMGFXOXVjMXRoYm1sdFlYUnBiMjVPWVcxbFhUdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklGSmxaMmx6ZEdWeUlIUm9aU0JoYm1sdFlYUnBiMjRnWVhNZ1lXTjBhWFpsSUdsbUlHbDBJR2x6SUhWdWJXRnVZV2RsWkZ4eVhHNGdJQ0FnSUNCcFppQW9ZVzVwYldGMGFXOXVJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxaMmx6ZEdWeVFXNXBiV0YwYVc5dUtHeGhlV1Z5VG1GdFpTd2dZVzVwYldGMGFXOXVUbUZ0WlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdMeThnVFdGeWF5QjBhR1VnWVc1cGJXRjBhVzl1SUdGeklHRmpkR2wyWlNCcFppQnBkQ0JwY3lCdFlXNWhaMlZrWEhKY2JpQWdJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUdGdWFXMWhkR2x2Ymk1cGMwRmpkR2wyWlNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUhKbFoybHpkR1Z5VEdGNVpYSW9ibUZ0WlN3Z2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpNXlaV2RwYzNSbGNreGhlV1Z5S0c1aGJXVXNJSHRjY2x4dUlDQWdJQ0FnTGk0dWIzQjBhVzl1Y3l4Y2NseHVJQ0FnSUNBZ2FHOXNaRlJwYldWeU9pQkVaV1psY25KbFpDNXlaWE52YkhabEtDa3NYSEpjYmlBZ0lDQWdJSEJzWVhsVWFXMWxjam9nYm5Wc2JDeGNjbHh1SUNBZ0lDQWdZM1Z5Y21WdWRFZGxjM1IxY21VNklHNTFiR3dzWEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0dVlXMWxYUzVwYzBGamRHbDJaU2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDlvYjNOMExrRnVhVzFoZEdsdmJrWmxZWFIxY21VdVoyVjBRVzVwYldGMGFXOXVjeWh1WVcxbEtTNW1iM0pGWVdOb0tHRnVhVzBnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUVGMWRHOXRZWFJwWTJGc2JIa2djbVZuYVhOMFpYSWdZV3hzSUdGdWFXMWhkR2x2Ym5NZ2IyNGdkR2hsSUd4aGVXVnlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDIxaGJtRm5aV1JNWVhsbGNuTmJibUZ0WlYwdVlXNXBiV0YwYVc5dWMxdGhibWx0WFNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFoybHpkR1Z5UVc1cGJXRjBhVzl1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMjVoYldWZExtRnVhVzFoZEdsdmJuTmJZVzVwYlYxY2NseHVJQ0FnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEpsWjJsemRHVnlRVzVwYldGMGFXOXVLR3hoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1VG1GdFpTd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hISmNiaUFnSUNBdkx5QlVjbmtnZEc4Z1ptRnNiQ0JpWVdOcklIUnZJR0VnWkdWbVlYVnNkQ0IzYjNKa0lHRnljbUY1WEhKY2JpQWdJQ0JwWmlBb0lTaHZjSFJwYjI1ekxuZHZjbVJ6SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUNZbUlDRW9iM0IwYVc5dWN5NTNiM0prY3lCcGJuTjBZVzVqWlc5bUlGTmxkQ2twSUh0Y2NseHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1M2IzSmtjeUE5SUVSbFptRjFiSFJIWlhOMGRYSmxWMjl5WkhOYllXNXBiV0YwYVc5dVRtRnRaVjBnZkh3Z1cxMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYzNWd1pYSXVjbVZuYVhOMFpYSkJibWx0WVhScGIyNG9iR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbExDQnZjSFJwYjI1ektUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU55WldGMFpTQmhiaUJ2WW1wbFkzUWdkR2hoZENCdFlYQnpJSE56Yld3Z2JXRnlheUJ6ZVc1MFlYZ2djbVZ4ZFdseVpXUWdkRzhnY0d4aGVTQmxZV05vSUdkbGMzUjFjbVVnZEc5Y2NseHVJQ0FnS2lCMGFHVWdkMjl5WkhNZ1lYSnlZWGtnWVhOemIyTnBZWFJsWkNCM2FYUm9JR1ZoWTJnZ1oyVnpkSFZ5WlM0Z1YyOXlaSE1nWVhKeVlYbHpJR0Z5WlNCa1pXWnBibVZrSUdGMElIZG9aVzVjY2x4dUlDQWdLaUIwYUdVZ1oyVnpkSFZ5WlNCaGJtbHRZWFJwYjI0Z2FYTWdjbVZuYVhOMFpYSmxaQzRnUjJWemRIVnlaWE1nZDJsMGFHOTFkQ0JoYzNOdlkybGhkR1ZrSUhkdmNtUnpJSGRwYkd4Y2NseHVJQ0FnS2lCaVpTQmxlR05zZFdSbFpDQm1jbTl0SUhSb1pTQnlaWE4xYkhRdUlGUm9aU0J5WlhOMWJIUnBibWNnYjJKcVpXTjBJR05oYmlCaVpTQjFjMlZrSUdGeklHRnVJR2x1Y0hWMFhISmNiaUFnSUNvZ1ptOXlJSHRBYkdsdWF5QlVaWGgwVkc5VGNHVmxZMmhWZEdsc2N5NWhkWFJ2UjJWdVpYSmhkR1ZUVTAxTVRXRnlhM045SUhSdklIVndaR0YwWlNCaElITndaV1ZqYUNCemRISnBibWRjY2x4dUlDQWdLaUIzYVhSb0lIUm9aU0J0WVhKcmRYQWdjbVZ4ZFdseVpXUWdkRzhnY0d4aGVTQm5aWE4wZFhKbGN5QjBhVzFsWkNCM2FYUm9JSFJvWldseUlHRnpjMjlqYVdGMFpXUWdkMjl5WkhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR055WldGMFpVZGxjM1IxY21WTllYQW9LU0I3WEhKY2JpQWdJQ0JqYjI1emRDQm5aWE4wZFhKbFRXRndJRDBnZTMwN1hISmNibHh5WEc0Z0lDQWdUMkpxWldOMExtVnVkSEpwWlhNb2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWN5a3VabTl5UldGamFDZ29XMnhoZVdWeVRtRnRaU3dnZTJGdWFXMWhkR2x2Ym5OOVhTa2dQVDRnZTF4eVhHNGdJQ0FnSUNCUFltcGxZM1F1Wlc1MGNtbGxjeWhoYm1sdFlYUnBiMjV6S1M1bWIzSkZZV05vS0Z4eVhHNGdJQ0FnSUNBZ0lDaGJYSEpjYmlBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1T1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2UyaHZiR1JVYVcxbExDQnRhVzVwYlhWdFNXNTBaWEoyWVd3c0lIZHZjbVJ6TENCMGNtRnVjMmwwYVc5dVZHbHRaWDBzWEhKY2JpQWdJQ0FnSUNBZ1hTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnVDI1c2VTQnpkRzl5WlNCblpYTjBkWEpsY3lCMGFHRjBJR2hoZG1VZ1lXNTVJR0Z6YzI5amFXRjBaV1FnZDI5eVpITmNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDNiM0prY3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiM0IwYVc5dWN5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F1TGk0b2FHOXNaRlJwYldVZ0ppWWdleUJvYjJ4a1ZHbHRaU0I5S1N4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdUxpNG9iV2x1YVcxMWJVbHVkR1Z5ZG1Gc0lDWW1JSHNnYldsdWFXMTFiVWx1ZEdWeWRtRnNJSDBwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM0dUxpaDBjbUZ1YzJsMGFXOXVWR2x0WlNBbUppQjdJSFJ5WVc1emFYUnBiMjVVYVcxbElIMHBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYa2dQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1WaGRIVnlaVG9nZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxkR2h2WkRvZ0ozQnNZWGxIWlhOMGRYSmxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21kek9pQmJiR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbExDQnZjSFJwYjI1elhTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2RsYzNSMWNtVk5ZWEJiU2xOUFRpNXpkSEpwYm1kcFpua29hMlY1S1YwZ1BTQjNiM0prY3p0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnWjJWemRIVnlaVTFoY0R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFTnlaV0YwWlNCaGJpQmhjbkpoZVNCMGFHRjBJR052Ym5SaGFXNXpJSE56Yld3Z2JXRnlheUJ6ZVc1MFlYZ2djbVZ4ZFdseVpXUWdkRzhnY0d4aGVTQmxZV05vSUdkbGMzUjFjbVZjY2x4dUlDQWdLaUIwYUdGMElHUnZaWE1nYm05MElHaGhkbVVnWVc1NUlHRnpjMjlqYVdGMFpXUWdkMjl5WkhNdUlGUm9aU0J5WlhOMWJIUnBibWNnWVhKeVlYa2dZMkZ1SUdKbElIVnpaV1FnWVhOY2NseHVJQ0FnS2lCaGJpQnBibkIxZENCbWIzSWdlMEJzYVc1cklGUmxlSFJVYjFOd1pXVmphRlYwYVd4ekxtRjFkRzlIWlc1bGNtRjBaVk5UVFV4TllYSnJjMzBnYjNKY2NseHVJQ0FnS2lCN1FHeHBibXNnVkdWNGRGUnZVM0JsWldOb1ZYUnBiSE11WVdSa1RXRnlhM05VYjFWdWJXRnlhMlZrVTJWdWRHVnVZMlZ6ZlNCMGJ5QjFjR1JoZEdVZ1lTQnpjR1ZsWTJoY2NseHVJQ0FnS2lCemRISnBibWNnZDJsMGFDQjBhR1VnYldGeWEzVndJSEpsY1hWcGNtVmtJSFJ2SUhCc1lYa2djbUZ1Wkc5dElHZGxjM1IxY21WeklHRjBJR1ZoWTJnZ2RXNXRZWEpyWldSY2NseHVJQ0FnS2lCelpXNTBaVzVqWlNCcGJpQjBhR1VnYzNSeWFXNW5MbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGMzUnlhVzVuUGoxOUlHeGhlV1Z5Y3lBdElFRnVJR0Z5Y21GNUlHOW1JRzVoYldWeklHOW1JRzFoYm1GblpXUWdiR0Y1WlhKeklIUnZJR2RsYm1WeVlYUmxYSEpjYmlBZ0lDb2diV0Z5YTNNZ1ptOXlMaUJKWmlCMWJtUmxabWx1WldRc0lIVnpaU0JoYkd3Z2JXRnVZV2RsWkNCc1lYbGxjbk11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVhKeVlYa3VQSE4wY21sdVp6NTlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1kzSmxZWFJsUjJWdVpYSnBZMGRsYzNSMWNtVkJjbkpoZVNoc1lYbGxjbk1wSUh0Y2NseHVJQ0FnSUdOdmJuTjBJR2RsYm1WeWFXTkhaWE4wZFhKbGN5QTlJRnRkTzF4eVhHNGdJQ0FnYkdGNVpYSnpJRDBnYkdGNVpYSnpJSHg4SUU5aWFtVmpkQzVyWlhsektIUm9hWE11WDIxaGJtRm5aV1JNWVhsbGNuTXBPMXh5WEc1Y2NseHVJQ0FnSUd4aGVXVnljeTVtYjNKRllXTm9LR3hoZVdWeVRtRnRaU0E5UGlCN1hISmNiaUFnSUNBZ0lHTnZibk4wSUd4aGVXVnlJRDBnZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0c1lYbGxjazVoYldWZE8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0JzWVhsbGNpQnBjeUJ0WVc1aFoyVmtYSEpjYmlBZ0lDQWdJR2xtSUNnaGJHRjVaWElwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUU5aWFtVmpkQzVsYm5SeWFXVnpLR3hoZVdWeUxtRnVhVzFoZEdsdmJuTXBMbVp2Y2tWaFkyZ29YSEpjYmlBZ0lDQWdJQ0FnS0Z0Y2NseHVJQ0FnSUNBZ0lDQWdJR0Z1YVcxaGRHbHZiazVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0I3SUdodmJHUlVhVzFsTENCdGFXNXBiWFZ0U1c1MFpYSjJZV3dzSUhkdmNtUnpMQ0IwY21GdWMybDBhVzl1VkdsdFpTQjlMRnh5WEc0Z0lDQWdJQ0FnSUYwcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJRTl1YkhrZ2MzUnZjbVVnWjJWemRIVnlaWE1nZEdoaGRDQmtiMjRuZENCb1lYWmxJR0Z1ZVNCaGMzTnZZMmxoZEdWa0lIZHZjbVJ6WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVhkdmNtUnpMbXhsYm1kMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdmNIUnBiMjV6SUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDNHVMaWhvYjJ4a1ZHbHRaU0FtSmlCN0lHaHZiR1JVYVcxbElIMHBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzR1TGlodGFXNXBiWFZ0U1c1MFpYSjJZV3dnSmlZZ2V5QnRhVzVwYlhWdFNXNTBaWEoyWVd3Z2ZTa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMaTR1S0hSeVlXNXphWFJwYjI1VWFXMWxJQ1ltSUhzZ2RISmhibk5wZEdsdmJsUnBiV1VnZlNrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVNBOUlFcFRUMDR1YzNSeWFXNW5hV1o1S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVpXRjBkWEpsT2lCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a09pQW5jR3hoZVVkbGMzUjFjbVVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVozTTZJRnRzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVXNJRzl3ZEdsdmJuTmRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haMlZ1WlhKcFkwZGxjM1IxY21WekxtbHVZMngxWkdWektHdGxlU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpXNWxjbWxqUjJWemRIVnlaWE11Y0hWemFDaHJaWGtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR2RsYm1WeWFXTkhaWE4wZFhKbGN6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkJzWVhrZ1lTQnRZVzVoWjJWa0lHZGxjM1IxY21VZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd4aGVXVnlUbUZ0WlNBdElGUm9aU0J1WVcxbElHOW1JSFJvWlNCc1lYbGxjaUIwYUdGMElHTnZiblJoYVc1eklIUm9aU0JuWlhOMGRYSmxYSEpjYmlBZ0lDb2dZVzVwYldGMGFXOXVMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0WVhScGIyNU9ZVzFsSUMwZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUdkbGMzUjFjbVVnWVc1cGJXRjBhVzl1TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBQWDBnYjNCMGFXOXVjeUF0SUU5d2RHbHZibUZzSUdkbGMzUjFjbVVnYjNCMGFXOXVjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNqMTlJRzl3ZEdsdmJuTXVhRzlzWkZScGJXVWdMU0JVYUdseklHOXdkR2x2YmlCdmJteDVJR0Z3Y0d4cFpYTWdkRzhnZTBCc2FXNXJJRkYxWlhWbFUzUmhkR1Y5WEhKY2JpQWdJQ29nWjJWemRIVnlaWE11SUZkb1pXNGdZU0JSZFdWMVpWTjBZWFJsSUdkbGMzUjFjbVVnY0hKdlozSmxjM05sY3lCMGJ5QmhJR3h2YjNCcGJtY2djM1JoZEdVc0lIUm9hWE1nYjNCMGFXOXVYSEpjYmlBZ0lDb2daR1ZtYVc1bGN5Qm9iM2NnYldGdWVTQnpaV052Ym1SeklITm9iM1ZzWkNCbGJHRndjMlVnWW1WbWIzSmxJRzF2ZG1sdVp5QjBhR1VnY1hWbGRXVWdabTl5ZDJGeVpDNGdTV1pjY2x4dUlDQWdLaUIxYm1SbFptbHVaV1FzSUdsMElIZHBiR3dnWm1Gc2JDQmlZV05ySUdacGNuTjBJSFJ2SUhSb1pTQm9iMnhrVkdsdFpTQmtaV1pwYm1Wa0lHbHVJSFJvWlNCdmNIUnBiMjV6SUhkb1pXNWNjbHh1SUNBZ0tpQjBhR1VnWjJWemRIVnlaU0JoYm1sdFlYUnBiMjRnZDJGeklISmxaMmx6ZEdWeVpXUWdZVzVrSUhSb1pXNGdkRzhnZEdobElHaHZiR1JVYVcxbElHUmxabWx1WldRZ2IyNGdkR2hsWEhKY2JpQWdJQ29nWm1WaGRIVnlaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNqMTlJRzl3ZEdsdmJuTXViV2x1YVcxMWJVbHVkR1Z5ZG1Gc0lDMGdWR2hsSUcxcGJtbHRkVzBnWVcxdmRXNTBJRzltSUhScGJXVWdkR2hoZEZ4eVhHNGdJQ0FxSUcxMWMzUWdhR0YyWlNCbGJHRndjMlZrSUhOcGJtTmxJSFJvWlNCc1lYTjBJSFJwYldVZ1lTQm5aWE4wZFhKbElIZGhjeUJ3YkdGNVpXUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NHeGhlVWRsYzNSMWNtVW9YSEpjYmlBZ0lDQnNZWGxsY2s1aGJXVXNYSEpjYmlBZ0lDQmhibWx0WVhScGIyNU9ZVzFsTEZ4eVhHNGdJQ0FnZTJodmJHUlVhVzFsTENCdGFXNXBiWFZ0U1c1MFpYSjJZV3dzSUhSeVlXNXphWFJwYjI1VWFXMWxMQ0JtYjNKalpTQTlJR1poYkhObGZTQTlJSHQ5WEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0F2THlCTllXdGxJSE4xY21VZ2RHaGxJR0Z1YVcxaGRHbHZiaUJwY3lCeVpXZHBjM1JsY21Wa1hISmNiaUFnSUNCcFppQW9YSEpjYmlBZ0lDQWdJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk5iYkdGNVpYSk9ZVzFsWFNBOVBUMGdkVzVrWldacGJtVmtJSHg4WEhKY2JpQWdJQ0FnSUhSb2FYTXVYMjFoYm1GblpXUk1ZWGxsY25OYmJHRjVaWEpPWVcxbFhTNWhibWx0WVhScGIyNXpXMkZ1YVcxaGRHbHZiazVoYldWZElEMDlQU0IxYm1SbFptbHVaV1JjY2x4dUlDQWdJQ2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbkpsWjJsemRHVnlRVzVwYldGMGFXOXVLR3hoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1VG1GdFpTd2dlMXh5WEc0Z0lDQWdJQ0FnSUdodmJHUlVhVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lHMXBibWx0ZFcxSmJuUmxjblpoYkN4Y2NseHVJQ0FnSUNBZ0lDQjBjbUZ1YzJsMGFXOXVWR2x0WlN4Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMnhoZVdWeVRtRnRaVjA3WEhKY2JpQWdJQ0JqYjI1emRDQmhibWx0WVhScGIyNGdQU0JzWVhsbGNpNWhibWx0WVhScGIyNXpXMkZ1YVcxaGRHbHZiazVoYldWZE8xeHlYRzVjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCMGFHVWdZVzVwYldGMGFXOXVJR2x6SUdGamRHbDJaVnh5WEc0Z0lDQWdhV1lnS0NGaGJtbHRZWFJwYjI0dWFYTkJZM1JwZG1VcElIdGNjbHh1SUNBZ0lDQWdMeThnUTNKbFlYUmxJSGRoY201cGJtY2diV1Z6YzJGblpTQmlZWE5sWkNCdmJpQjNhR2xqYUNCdlltcGxZM1FnWkc5bGMyNG5kQ0JsZUdsemRDQjVaWFJjY2x4dUlDQWdJQ0FnWTI5dWMzUWdkSGx3WlU1aGJXVWdQU0JzWVhsbGNpNXBjMEZqZEdsMlpTQS9JQ2RoYm1sdFlYUnBiMjRuSURvZ0oyeGhlV1Z5Snp0Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnYldWemMyRm5aU0E5SUdCVGEybHdjR2x1WnlCblpYTjBkWEpsSUNSN1lXNXBiV0YwYVc5dVRtRnRaWDBnYjI0Z2JHRjVaWElnSkh0c1lYbGxjazVoYldWOUlHWnZjaUJvYjNOMElDUjdkR2hwY3k1ZmFHOXpkQzVwWkgwdUlFNXZJQ1I3ZEhsd1pVNWhiV1Y5SUdWNGFYTjBjeUIzYVhSb0lIUm9hWE1nYm1GdFpTQjVaWFF1WUR0Y2NseHVYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUVSbFptVnljbVZrTG1OaGJtTmxiQ2g3Y21WaGMyOXVPaUFuYVc1aFkzUnBkbVVuTENCMllXeDFaVG9nZEhsd1pVNWhiV1Y5S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMeUJEYUdWamF5QnBaaUIwYUdVZ1oyVnpkSFZ5WlNCcGN5QmhiSEpsWVdSNUlIQnNZWGxwYm1kY2NseHVJQ0FnSUdOdmJuTjBJSHRqZFhKeVpXNTBSMlZ6ZEhWeVpYMGdQU0JzWVhsbGNqdGNjbHh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBSMlZ6ZEhWeVpTQTlQVDBnWVc1cGJXRjBhVzl1VG1GdFpTQW1KaUFoWm05eVkyVXBJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdiV1Z6YzJGblpTQTlJR0JUYTJsd2NHbHVaeUJuWlhOMGRYSmxJQ1I3WVc1cGJXRjBhVzl1VG1GdFpYMGdiMjRnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUdadmNpQm9iM04wSUNSN2RHaHBjeTVmYUc5emRDNXBaSDB1SUZSb1pTQm5aWE4wZFhKbElHbHpJR0ZzY21WaFpIa2djR3hoZVdsdVp5NGdWWE5sSUc5d2RHbHZibk11Wm05eVkyVWdkRzhnWm05eVkyVWdkR2hsSUdkbGMzUjFjbVVnY21Wd2JHRjVMQ0IzYUdsamFDQnRZWGtnY21WemRXeDBJR2x1SUdFZ2FHRnlaQ0IwY21GdWMybDBhVzl1TG1BN1hISmNibHh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b2JXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCRVpXWmxjbkpsWkM1allXNWpaV3dvZTNKbFlYTnZiam9nSjNCc1lYbHBibWNuTENCMllXeDFaVG9nWVc1cGJXRjBhVzl1VG1GdFpYMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklGVndaR0YwWlNCaGJtbHRZWFJwYjI0Z2IzQjBhVzl1YzF4eVhHNGdJQ0FnYVdZZ0tHaHZiR1JVYVcxbElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ1lXNXBiV0YwYVc5dUxtaHZiR1JVYVcxbElEMGdhRzlzWkZScGJXVTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHMXBibWx0ZFcxSmJuUmxjblpoYkNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUdGdWFXMWhkR2x2Ymk1dGFXNXBiWFZ0U1c1MFpYSjJZV3dnUFNCdGFXNXBiWFZ0U1c1MFpYSjJZV3c3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0J0YVc1cGJYVnRTVzUwWlhKMllXd2dQU0IwYUdsekxsOW5aWFJOYVc1cGJYVnRTVzUwWlhKMllXd29iR0Y1WlhJc0lHRnVhVzFoZEdsdmJpazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1EyaGxZMnNnZEdobElHbHVkR1Z5ZG1Gc1hISmNiaUFnSUNCcFppQW9JV1p2Y21ObElDWW1JR3hoZVdWeUxuQnNZWGxVYVcxbGNpQWhQVDBnYm5Wc2JDQW1KaUJzWVhsbGNpNXdiR0Y1VkdsdFpYSWdQQ0J0YVc1cGJYVnRTVzUwWlhKMllXd3BJSHRjY2x4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHlYRzRnSUNBZ0lDQWdJR0JUYTJsd2NHbHVaeUJuWlhOMGRYSmxJQ1I3WVc1cGJXRjBhVzl1VG1GdFpYMGdiMjRnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUdadmNpQm9iM04wSUNSN2RHaHBjeTVmYUc5emRDNXBaSDB1SUUxcGJtbHRkVzBnYVc1MFpYSjJZV3dnSkh0dGFXNXBiWFZ0U1c1MFpYSjJZV3g5SUdoaGN5QnViM1FnWW1WbGJpQnRaWFF1WUZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdVkyRnVZMlZzS0h0Y2NseHVJQ0FnSUNBZ0lDQnlaV0Z6YjI0NklDZHRhVzVwYlhWdFNXNTBaWEoyWVd3bkxGeHlYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQnRhVzVwYlhWdFNXNTBaWEoyWVd3Z0xTQnNZWGxsY2k1d2JHRjVWR2x0WlhJc1hISmNiaUFnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklGQnNZWGtnZEdobElHRnVhVzFoZEdsdmJseHlYRzRnSUNBZ2JHRjVaWEl1WTNWeWNtVnVkRWRsYzNSMWNtVWdQU0JoYm1sdFlYUnBiMjVPWVcxbE8xeHlYRzRnSUNBZ2JHRjVaWEl1Y0d4aGVWUnBiV1Z5SUQwZ01EdGNjbHh1SUNBZ0lHeGhlV1Z5TG1odmJHUlVhVzFsY2k1allXNWpaV3dvS1R0Y2NseHVJQ0FnSUdsbUlDaHNZWGxsY2k1aGRYUnZSR2x6WVdKc1pTa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRXhoZVdWeVYyVnBaMmgwY3lodVlXMWxJRDArSUc1aGJXVWdQVDA5SUd4aGVXVnlUbUZ0WlN3Z01TazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyaHZjM1F1UVc1cGJXRjBhVzl1Um1WaGRIVnlaUzV3YkdGNVFXNXBiV0YwYVc5dUtGeHlYRzRnSUNBZ0lDQnNZWGxsY2s1aGJXVXNYSEpjYmlBZ0lDQWdJR0Z1YVcxaGRHbHZiazVoYldVc1hISmNiaUFnSUNBZ0lIUnlZVzV6YVhScGIyNVVhVzFsWEhKY2JpQWdJQ0FwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnZFhCa1lYUmxLR1JsYkhSaFZHbHRaU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSXVkWEJrWVhSbEtHUmxiSFJoVkdsdFpTazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1NXNWpjbVZ0Wlc1MElIUm9aU0IwYVcxbGNuTmNjbHh1SUNBZ0lFOWlhbVZqZEM1bGJuUnlhV1Z6S0hSb2FYTXVYMjFoYm1GblpXUk1ZWGxsY25NcExtWnZja1ZoWTJnb0tGdHVZVzFsTENCdmNIUnBiMjV6WFNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JwWmlBb2IzQjBhVzl1Y3k1cGMwRmpkR2wyWlNBbUppQWhkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbWRsZEZCaGRYTmxaQ2h1WVcxbEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11YUc5c1pGUnBiV1Z5TG1WNFpXTjFkR1VvWkdWc2RHRlVhVzFsS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWNHeGhlVlJwYldWeUlDRTlQU0J1ZFd4c0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG5Cc1lYbFVhVzFsY2lBclBTQmtaV3gwWVZScGJXVWdMeUF4TURBd08xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCcGJuTjBZV3hzUVhCcEtDa2dlMXh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQWFXNXVaWEpjY2x4dUlDQWdJQ0FxSUVCdVlXMWxjM0JoWTJVZ1IyVnpkSFZ5WlVabFlYUjFjbVZjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWTI5dWMzUWdZWEJwSUQwZ2MzVndaWEl1YVc1emRHRnNiRUZ3YVNncE8xeHlYRzVjY2x4dUlDQWdJRTlpYW1WamRDNWhjM05wWjI0b1lYQnBMQ0I3WEhKY2JpQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdLaUJBYldWdFltVnliMllnUjJWemRIVnlaVVpsWVhSMWNtVmNjbHh1SUNBZ0lDQWdJQ29nUUdsdWMzUmhibU5sWEhKY2JpQWdJQ0FnSUNBcUlFQnRaWFJvYjJSY2NseHVJQ0FnSUNBZ0lDb2dRSE5sWlNCSFpYTjBkWEpsUm1WaGRIVnlaU05qY21WaGRHVkhaWE4wZFhKbFRXRndYSEpjYmlBZ0lDQWdJQ0FxTDF4eVhHNGdJQ0FnSUNCamNtVmhkR1ZIWlhOMGRYSmxUV0Z3T2lCMGFHbHpMbU55WldGMFpVZGxjM1IxY21WTllYQXVZbWx1WkNoMGFHbHpLU3hjY2x4dUlDQWdJQ0FnTHlvcVhISmNiaUFnSUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJIWlhOMGRYSmxSbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUVkbGMzUjFjbVZHWldGMGRYSmxJMk55WldGMFpVZGxibVZ5YVdOSFpYTjBkWEpsUVhKeVlYbGNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUdOeVpXRjBaVWRsYm1WeWFXTkhaWE4wZFhKbFFYSnlZWGs2SUhSb2FYTXVZM0psWVhSbFIyVnVaWEpwWTBkbGMzUjFjbVZCY25KaGVTNWlhVzVrS0hSb2FYTXBMRnh5WEc0Z0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRWRsYzNSMWNtVkdaV0YwZFhKbFhISmNiaUFnSUNBZ0lDQXFJRUJwYm5OMFlXNWpaVnh5WEc0Z0lDQWdJQ0FnS2lCQWJXVjBhRzlrWEhKY2JpQWdJQ0FnSUNBcUlFQnpaV1VnUjJWemRIVnlaVVpsWVhSMWNtVWpjR3hoZVVkbGMzUjFjbVZjY2x4dUlDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lIQnNZWGxIWlhOMGRYSmxPaUIwYUdsekxuQnNZWGxIWlhOMGRYSmxMbUpwYm1Rb2RHaHBjeWtzWEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0VkbGMzUjFjbVZHWldGMGRYSmxMQ0I3WEhKY2JpQWdSRVZHUVZWTVZGOU1RVmxGVWw5UFVGUkpUMDVUT2lCN1hISmNiaUFnSUNCMllXeDFaVG9nZTF4eVhHNGdJQ0FnSUNBdUxpNUhaWE4wZFhKbFJtVmhkSFZ5WlM1RVJVWkJWVXhVWDB4QldVVlNYMDlRVkVsUFRsTXNYSEpjYmlBZ0lDQWdJR0YxZEc5RWFYTmhZbXhsT2lCMGNuVmxMRnh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJSGR5YVhSaFlteGxPaUJtWVd4elpTeGNjbHh1SUNCOUxGeHlYRzRnSUVWV1JVNVVYMFJGVUVWT1JFVk9RMGxGVXpvZ2UxeHlYRzRnSUNBZ2RtRnNkV1U2SUh0Y2NseHVJQ0FnSUNBZ0xpNHVSMlZ6ZEhWeVpVWmxZWFIxY21VdVJWWkZUbFJmUkVWUVJVNUVSVTVEU1VWVExGeHlYRzRnSUNBZ0lDQkJibWx0WVhScGIyNUdaV0YwZFhKbE9pQjdYSEpjYmlBZ0lDQWdJQ0FnTGk0dVIyVnpkSFZ5WlVabFlYUjFjbVV1UlZaRlRsUmZSRVZRUlU1RVJVNURTVVZUTGtGdWFXMWhkR2x2YmtabFlYUjFjbVVzWEhKY2JpQWdJQ0FnSUNBZ2NHeGhlVTVsZUhSQmJtbHRZWFJwYjI0NklDZGZiMjVPWlhoMEp5eGNjbHh1SUNBZ0lDQWdJQ0J6ZEc5d1FXNXBiV0YwYVc5dU9pQW5YMjl1VTNSdmNDY3NYSEpjYmlBZ0lDQWdJQ0FnYVc1MFpYSnlkWEIwUVc1cGJXRjBhVzl1T2lBblgyOXVVM1J2Y0NkY2NseHVJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ2ZTeGNjbHh1ZlNrN1hISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JIWlhOMGRYSmxSbVZoZEhWeVpUdGNjbHh1Wlhod2IzSjBJSHRFWldaaGRXeDBSMlZ6ZEhWeVpWZHZjbVJ6ZlR0Y2NseHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFRnRZWHB2Ymk1amIyMHNJRWx1WXk0Z2IzSWdhWFJ6SUdGbVptbHNhV0YwWlhNdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYSEpjYmk4dklGTlFSRmd0VEdsalpXNXpaUzFKWkdWdWRHbG1hV1Z5T2lCTlNWUXRNRnh5WEc1cGJYQnZjblFnUkdWbVpYSnlaV1FnWm5KdmJTQW5ZMjl5WlM5RVpXWmxjbkpsWkNjN1hISmNibWx0Y0c5eWRDQlZkR2xzY3lCbWNtOXRJQ2RqYjNKbEwxVjBhV3h6Snp0Y2NseHVhVzF3YjNKMElFMWhkR2hWZEdsc2N5Qm1jbTl0SUNkamIzSmxMMDFoZEdoVmRHbHNjeWM3WEhKY2JtbHRjRzl5ZENCN1RHbHVaV0Z5ZlNCbWNtOXRJQ2N1TDBWaGMybHVaeWM3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUVNCamIyeHNaV04wYVc5dUlHOW1JSFZ6WldaMWJDQmhibWx0WVhScGIyNGdablZ1WTNScGIyNXpMbHh5WEc0Z0tseHlYRzRnS2lCQWFHbGtaV052Ym5OMGNuVmpkRzl5WEhKY2JpQXFMMXh5WEc1amJHRnpjeUJCYm1sdFlYUnBiMjVWZEdsc2N5QjdYSEpjYmlBZ2MzUmhkR2xqSUd4bGNuQW9abkp2YlN3Z2RHOHNJR1poWTNSdmNpa2dlMXh5WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dCQmJtbHRZWFJwYjI1VmRHbHNjeTVzWlhKd0lHbHpJR0psYVc1bklHUmxjSEpsWTJGMFpXUXVJRlZ6WlNCTllYUm9WWFJwYkhNdWJHVnljQ0JwYm5OMFpXRmtMbUFwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCTllYUm9WWFJwYkhNdWJHVnljQ2htY205dExDQjBieXdnWm1GamRHOXlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOc1lXMXdJR0VnYm5WdFltVnlJR0psZEhkbFpXNGdNaUIyWVd4MVpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RtRnNkV1VnTFNCV1lXeDFaU0IwYnlCamJHRnRjQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjFwYmowd1hTQXRJRTFwYm5WdGRXMGdkbUZzZFdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0dFlYZzlNVjBnTFNCTllYaHBiWFZ0SUhaaGJIVmxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nWTJ4aGJYQW9kbUZzZFdVc0lHMXBiaUE5SURBc0lHMWhlQ0E5SURFcElIdGNjbHh1SUNBZ0lHTnZibk52YkdVdWQyRnliaWhnUVc1cGJXRjBhVzl1VlhScGJITXVZMnhoYlhBZ2FYTWdZbVZwYm1jZ1pHVndjbVZqWVhSbFpDNGdWWE5sSUUxaGRHaFZkR2xzY3k1amJHRnRjQ0JwYm5OMFpXRmtMbUFwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCTllYUm9WWFJwYkhNdVkyeGhiWEFvZG1Gc2RXVXNJRzFwYml3Z2JXRjRLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGRIVnliaUJoSUdSbFptVnljbVZrSUhCeWIyMXBjMlVnZEdoaGRDQmpZVzRnWW1VZ2RYTmxaQ0IwYnlCMWNHUmhkR1VnZEdobElIWmhiSFZsSUc5bUlHRWdiblZ0WlhKcFkxeHlYRzRnSUNBcUlIQnliM0JsY25SNUlHOW1JSFJvYVhNZ2IySnFaV04wSUc5MlpYSWdkR2x0WlM0Z1VHRnpjeUJrWld4MFlTQjBhVzFsSUdsdUlHMXBiR3hwYzJWamIyNWtjeUIwYnlCMGFHVmNjbHh1SUNBZ0tpQmtaV1psY25KbFpDQndjbTl0YVhObEozTWdaWGhsWTNWMFpTQnRaWFJvYjJRZ2FXNGdZVzRnZFhCa1lYUmxJR3h2YjNBZ2RHOGdZVzVwYldGMFpTQjBhR1VnY0hKdmNHVnlkSGxjY2x4dUlDQWdLaUIwYjNkaGNtUnpJSFJvWlNCMFlYSm5aWFFnZG1Gc2RXVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2NISnZjR1Z5ZEhsUGQyNWxjaUF0SUU5aWFtVmpkQ0IwYUdGMElHTnZiblJoYVc1eklIUm9aU0J3Y205d1pYSjBlU0IwYnlCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhCeWIzQmxjblI1VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUhCeWIzQmxjblI1SUhSdklHRnVhVzFoZEdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhSaGNtZGxkRlpoYkhWbElDMGdWR0Z5WjJWMElIWmhiSFZsSUhSdklISmxZV05vTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBQWDBnYjNCMGFXOXVjeUF0SUU5d2RHbHZibUZzSUc5d2RHbHZibk1nYjJKcVpXTjBYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHZjSFJwYjI1ekxuTmxZMjl1WkhNOU1GMGdMU0JPZFcxaVpYSWdiMllnYzJWamIyNWtjeUJwZENCM2FXeHNJSFJoYTJVZ2RHOGdjbVZoWTJoY2NseHVJQ0FnS2lCMGFHVWdkR0Z5WjJWMElIWmhiSFZsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUZ0dmNIUnBiMjV6TG1WaGMybHVaMFp1UFV4cGJtVmhjaTVKYms5MWRGMGdMU0JGWVhOcGJtY2dablZ1WTNScGIyNGdkRzhnZFhObElHWnZjaUJoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnVzI5d2RHbHZibk11YjI1R2FXNXBjMmhkSUMwZ1EyRnNiR0poWTJzZ2RHOGdaWGhsWTNWMFpTQnZibU5sSUhSb1pTQmhibWx0WVhScGIyNGdZMjl0Y0d4bGRHVnpMbHh5WEc0Z0lDQXFJRlJvWlNCMFlYSm5aWFFnZG1Gc2RXVWdhWE1nY0dGemMyVmtJR0Z6SUdFZ2NHRnlZVzFsZEdWeUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQnZjSFJwYjI1ekxtOXVVSEp2WjNKbGMzTWdMU0JEWVd4c1ltRmpheUIwYnlCbGVHVmpkWFJsSUdWaFkyZ2dkR2x0WlNCMGFHVWdZVzVwYldGMGFXOXVYSEpjYmlBZ0lDb2djSEp2Y0dWeWRIa2dhWE1nZFhCa1lYUmxaQ0JrZFhKcGJtY2dkR2hsSUdGdWFXMWhkR2x2Ymk0Z1ZHaGxJSEJ5YjNCbGNuUjVKM01nZG1Gc2RXVWdZWFFnZEdobElIUnBiV1VnYjJaY2NseHVJQ0FnS2lCMGFHVWdkWEJrWVhSbElHbHpJSEJoYzNObFpDQmhjeUJoSUhCaGNtRnRaWFJsY2k1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1UFgwZ2IzQjBhVzl1Y3k1dmJrTmhibU5sYkNBdElFTmhiR3hpWVdOcklIUnZJR1Y0WldOMWRHVWdhV1lnZEdobElIVnpaWElnWTJGdVkyVnNjeUIwYUdWY2NseHVJQ0FnS2lCaGJtbHRZWFJwYjI0Z1ltVm1iM0psSUdOdmJYQnNaWFJwYjI0dUlGUm9aU0JoYm1sdFlYUnBiMjRnY0hKdmNHVnlkSGtuY3lCMllXeDFaU0JoZENCMGFHVWdkR2x0WlNCdlpseHlYRzRnSUNBcUlHTmhibU5sYkNCcGN5QndZWE56WldRZ1lYTWdZU0J3WVhKaGJXVjBaWEl1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUc5d2RHbHZibk11YjI1RmNuSnZjaUF0SUVOaGJHeGlZV05ySUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUdGdWFXMWhkR2x2YmlCemRHOXdjMXh5WEc0Z0lDQXFJR0psWTJGMWMyVWdZVzRnWlhKeWIzSWdhWE1nWlc1amIzVnVkR1Z5WldRdUlGUm9aU0JsY25KdmNpQnRaWE56WVdkbElHbHpJSEJoYzNObFpDQmhjeUJoSUhCaGNtRnRaWFJsY2k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0RVpXWmxjbkpsWkgwZ1VtVnpiMngyWlhNZ2QybDBhQ0IwYUdVZ2NISnZjR1Z5ZEhrbmN5QjJZV3gxWlNCdmJtTmxJR2wwSUhKbFlXTm9aWE1nZEdobFhISmNiaUFnSUNvZ2RHRnlaMlYwSUhaaGJIVmxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCcGJuUmxjbkJ2YkdGMFpWQnliM0JsY25SNUtGeHlYRzRnSUNBZ2NISnZjR1Z5ZEhsUGQyNWxjaXhjY2x4dUlDQWdJSEJ5YjNCbGNuUjVUbUZ0WlN4Y2NseHVJQ0FnSUhSaGNtZGxkRlpoYkhWbExGeHlYRzRnSUNBZ2UzTmxZMjl1WkhNZ1BTQXdMQ0JsWVhOcGJtZEdiaXdnYjI1R2FXNXBjMmdzSUc5dVVISnZaM0psYzNNc0lHOXVRMkZ1WTJWc0xDQnZia1Z5Y205eWZTQTlJSHQ5WEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0F2THlCTllXdGxJSE4xY21VZ2NISnZjR1Z5ZEhrZ2FYTWdZVzRnYjJKcVpXTjBYSEpjYmlBZ0lDQnBaaUFvSVNod2NtOXdaWEowZVU5M2JtVnlJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBLU2tnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JsSUQwZ2JtVjNJRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQWdJR0JEWVc1dWIzUWdhVzUwWlhKd2IyeGhkR1VnY0hKdmNHVnlkSGtnSkh0d2NtOXdaWEowZVU1aGJXVjlMaUJRY205d1pYSjBlU0J2ZDI1bGNpQnRkWE4wSUdKbElHRnVJRzlpYW1WamRDNWdYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzl1UlhKeWIzSWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNjbHh1SUNBZ0lDQWdJQ0J2YmtWeWNtOXlLR1VwTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSR1ZtWlhKeVpXUXVjbVZxWldOMEtHVXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQndjbTl3WlhKMGVTQnBjeUJ1ZFcxbGNtbGpYSEpjYmlBZ0lDQnBaaUFvVG5WdFltVnlMbWx6VG1GT0tFNTFiV0psY2lod2NtOXdaWEowZVU5M2JtVnlXM0J5YjNCbGNuUjVUbUZ0WlYwcEtTa2dlMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQmxJRDBnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ2FXNTBaWEp3YjJ4aGRHVWdjSEp2Y0dWeWRIa2dKSHR3Y205d1pYSjBlVTVoYldWOUxpQlFjbTl3WlhKMGVTQnRkWE4wSUdKbElHNTFiV1Z5YVdNdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZia1Z5Y205eUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hISmNiaUFnSUNBZ0lDQWdiMjVGY25KdmNpaGxLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmxabVZ5Y21Wa0xuSmxhbVZqZENobEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCTllXdGxJSE4xY21VZ2RHaGxJSFJoY21kbGRDQjJZV3gxWlNCcGN5QnVkVzFsY21salhISmNiaUFnSUNCcFppQW9UblZ0WW1WeUxtbHpUbUZPS0U1MWJXSmxjaWgwWVhKblpYUldZV3gxWlNrcEtTQjdYSEpjYmlBZ0lDQWdJR052Ym5OMElHVWdQU0J1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ1lFTmhibTV2ZENCcGJuUmxjbkJ2YkdGMFpTQndjbTl3WlhKMGVTQWtlM0J5YjNCbGNuUjVUbUZ0WlgwZ2RHOGdkbUZzZFdVZ0pIdDBZWEpuWlhSV1lXeDFaWDB1SUZSaGNtZGxkQ0IyWVd4MVpTQnRkWE4wSUdKbElHNTFiV1Z5YVdNdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZia1Z5Y205eUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hISmNiaUFnSUNBZ0lDQWdiMjVGY25KdmNpaGxLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmxabVZ5Y21Wa0xuSmxhbVZqZENobEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCU1pYTnZiSFpsSUdsdGJXVmthV0YwWld4NUlHbG1JSFJvWlNCMFlYSm5aWFFnYUdGeklHRnNjbVZoWkhrZ1ltVmxiaUJ5WldGamFHVmtYSEpjYmlBZ0lDQmpiMjV6ZENCemRHRnlkRlpoYkhWbElEMGdjSEp2Y0dWeWRIbFBkMjVsY2x0d2NtOXdaWEowZVU1aGJXVmRPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaHpkR0Z5ZEZaaGJIVmxJRDA5UFNCMFlYSm5aWFJXWVd4MVpTa2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5dVJtbHVhWE5vSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2IyNUdhVzVwYzJnb2RHRnlaMlYwVm1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdWNtVnpiMngyWlNoMFlYSm5aWFJXWVd4MVpTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1JHVm1ZWFZzZENCMGJ5QnNhVzVsWVhJZ2FXNTBaWEp3YjJ4aGRHbHZibHh5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJsWVhOcGJtZEdiaUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb1pXRnphVzVuUm00Z0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhjY2x4dUlDQWdJQ0FnSUNBZ0lHQkpiblpoYkdsa0lIQnliM0JsY25SNUlHbHVkR1Z5Y0c5c1lYUnBiMjRnWldGemFXNW5SbTR1SUVSbFptRjFiSFJwYm1jZ2RHOGdiR2x1WldGeUlHbHVkR1Z5Y0c5c1lYUnBiMjR1WUZ4eVhHNGdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHVmhjMmx1WjBadUlEMGdUR2x1WldGeUxrbHVUM1YwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTnZibk4wSUdsdWRHVnljRzlzWVhSdmNpQTlJRlYwYVd4ekxuZGhhWFFvYzJWamIyNWtjeXdnZTF4eVhHNGdJQ0FnSUNCdmJrWnBibWx6YURvZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lIQnliM0JsY25SNVQzZHVaWEpiY0hKdmNHVnlkSGxPWVcxbFhTQTlJSFJoY21kbGRGWmhiSFZsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5dVJtbHVhWE5vSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnZia1pwYm1semFDaDBZWEpuWlhSV1lXeDFaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0J2YmtOaGJtTmxiRG9nS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IyNURZVzVqWld3Z1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJRzl1UTJGdVkyVnNLSEJ5YjNCbGNuUjVUM2R1WlhKYmNISnZjR1Z5ZEhsT1lXMWxYU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0J2YmxCeWIyZHlaWE56T2lCd2NtOW5jbVZ6Y3lBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnliM0JsY25SNVQzZHVaWEpiY0hKdmNHVnlkSGxPWVcxbFhTQWhQVDBnZEdGeVoyVjBWbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklFTmhiR04xYkdGMFpTQjBhR1VnYkdWeWNDQm1ZV04wYjNKY2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVmhjMlZHWVdOMGIzSWdQU0JsWVhOcGJtZEdiaWh3Y205bmNtVnpjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbFlYTmxSbUZqZEc5eUlDRTlQU0FuYm5WdFltVnlKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmxJRDBnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdCSmJuWmhiR2xrSUhCeWIzQmxjblI1SUdsdWRHVnljRzlzWVhScGIyNGdaV0Z6YVc1blJtNHVJRVZoYzJsdVowWnVJRzExYzNRZ2NtVjBkWEp1SUdFZ2JuVnRZbVZ5TG1CY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1MFpYSndiMnhoZEc5eUxuSmxhbVZqZENobEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0IwYUdVZ2RtRnNkV1ZjY2x4dUlDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVQzZHVaWEpiY0hKdmNHVnlkSGxPWVcxbFhTQTlJRTFoZEdoVmRHbHNjeTVzWlhKd0tGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJXWVd4MVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXRnpaVVpoWTNSdmNseHlYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRk5wWjI1aGJDQndjbTluY21WemMxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjI1UWNtOW5jbVZ6Y3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiMjVRY205bmNtVnpjeWh3Y205d1pYSjBlVTkzYm1WeVczQnliM0JsY25SNVRtRnRaVjBwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdVMmxuYm1Gc0lHTnZiWEJzWlhScGIyNGdiMjVqWlNCMGFXMWxJR2x6SUhWd1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIyZHlaWE56SUQwOVBTQXhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGVVOTNibVZ5VzNCeWIzQmxjblI1VG1GdFpWMGdQU0IwWVhKblpYUldZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJR2x1ZEdWeWNHOXNZWFJ2Y2k1eVpYTnZiSFpsS0hSaGNtZGxkRlpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lHOXVSWEp5YjNJc1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdhVzUwWlhKd2IyeGhkRzl5TzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnUVc1cGJXRjBhVzl1VlhScGJITTdYSEpjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JCYldGNmIyNHVZMjl0TENCSmJtTXVJRzl5SUdsMGN5QmhabVpwYkdsaGRHVnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4eVhHNHZMeUJUVUVSWUxVeHBZMlZ1YzJVdFNXUmxiblJwWm1sbGNqb2dUVWxVTFRCY2NseHVhVzF3YjNKMElFUmxabVZ5Y21Wa0lHWnliMjBnSjJOdmNtVXZSR1ZtWlhKeVpXUW5PMXh5WEc1cGJYQnZjblFnVFdGMGFGVjBhV3h6SUdaeWIyMGdKMk52Y21VdlRXRjBhRlYwYVd4ekp6dGNjbHh1YVcxd2IzSjBJRUZ1YVcxaGRHbHZibFYwYVd4eklHWnliMjBnSnk0dUwwRnVhVzFoZEdsdmJsVjBhV3h6Snp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQ1lYTmxJR05zWVhOeklHWnZjaUJoSUhOMFlYUmxJR2x1SUc5MWNpQmhibWx0WVhScGIyNGdjM2x6ZEdWdExseHlYRzRnS2x4eVhHNGdLaUJBWVdKemRISmhZM1JjY2x4dUlDb3ZYSEpjYm1Oc1lYTnpJRUZpYzNSeVlXTjBVM1JoZEdVZ2UxeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNROWZTQnZjSFJwYjI1eklDMGdUM0IwYVc5dWN5Qm1iM0lnZEdobElHRnVhVzFoZEdsdmJpQnpkR0YwWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaejE5SUc5d2RHbHZibk11Ym1GdFpTQXRJRTVoYldVZ1ptOXlJSFJvWlNCaGJtbHRZWFJwYjI0Z2MzUmhkR1V1SUU1aGJXVnpJRzExYzNRZ1ltVmNjbHh1SUNBZ0tpQjFibWx4ZFdVZ1ptOXlJSFJvWlNCamIyNTBZV2x1WlhJZ2RHaGxJSE4wWVhSbElHbHpJR0Z3Y0d4cFpXUWdkRzhnWVc1a0lITm9iM1ZzWkNCaVpTQjJZV3hwWkdGMFpXUWdZWFJjY2x4dUlDQWdLaUIwYUdVZ1kyOXVkR0ZwYm1WeUlHeGxkbVZzTGlCSlppQnVieUJ1WVcxbElHbHpJR2RwZG1WdUlHbDBJSGRwYkd3Z1pHVm1ZWFZzZENCMGJ5QjBhR1VnWTI5dWMzUnlkV04wYjNKY2NseHVJQ0FnS2lCdVlXMWxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdkMlZwWjJoMGZTQmJiM0IwYVc5dWN5NTNaV2xuYUhROU1GMGdMU0JVYUdVZ01DMHhJR0Z0YjNWdWRDQnZaaUJwYm1ac2RXVnVZMlVnZEdobElITjBZWFJsSUhkcGJHd2dhR0YyWlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2lodmNIUnBiMjV6SUQwZ2UzMHBJSHRjY2x4dUlDQWdJSFJvYVhNdWJtRnRaU0E5WEhKY2JpQWdJQ0FnSUc5d2RHbHZibk11Ym1GdFpTQWhQVDBnZFc1a1pXWnBibVZrSUQ4Z2IzQjBhVzl1Y3k1dVlXMWxJRG9nZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTV1WVcxbE8xeHlYRzRnSUNBZ2RHaHBjeTVmZDJWcFoyaDBJRDFjY2x4dUlDQWdJQ0FnYjNCMGFXOXVjeTUzWldsbmFIUWdJVDA5SUhWdVpHVm1hVzVsWkZ4eVhHNGdJQ0FnSUNBZ0lEOGdUV0YwYUZWMGFXeHpMbU5zWVcxd0tHOXdkR2x2Ym5NdWQyVnBaMmgwTENBd0xDQXhLVnh5WEc0Z0lDQWdJQ0FnSURvZ01EdGNjbHh1SUNBZ0lIUm9hWE11WDJsdWRHVnlibUZzVjJWcFoyaDBJRDBnZEdocGN5NWZkMlZwWjJoME8xeHlYRzRnSUNBZ2RHaHBjeTVmY0dGMWMyVmtJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NWZjSEp2YldselpYTWdQU0I3WEhKY2JpQWdJQ0FnSUdacGJtbHphRG9nUkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTEZ4eVhHNGdJQ0FnSUNCM1pXbG5hSFE2SUVSbFptVnljbVZrTG5KbGMyOXNkbVVvS1N4Y2NseHVJQ0FnSUNBZ2NHeGhlVG9nUkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTEZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5d2JHRjVRMkZzYkdKaFkydHpJRDBnZTF4eVhHNGdJQ0FnSUNCdmJrWnBibWx6YURvZ2RXNWtaV1pwYm1Wa0xGeHlYRzRnSUNBZ0lDQnZia1Z5Y205eU9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJRzl1UTJGdVkyVnNPaUIxYm1SbFptbHVaV1FzWEhKY2JpQWdJQ0I5TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVjBjeUIzYUdWMGFHVnlJRzl5SUc1dmRDQjBhR1VnYzNSaGRHVWdhWE1nWTNWeWNtVnVkR3g1SUhCaGRYTmxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElIQmhkWE5sWkNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl3WVhWelpXUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklHRnVaQ0J6WlhSeklIUm9aU0IxYzJWeUlHUmxabWx1WldRZ2QyVnBaMmgwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUWdkMlZwWjJoMEtDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNkbGFXZG9kRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE5sZENCM1pXbG5hSFFvZDJWcFoyaDBLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOTNaV2xuYUhRZ1BTQk5ZWFJvVlhScGJITXVZMnhoYlhBb2QyVnBaMmgwTENBd0xDQXhLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHaGxJSGRsYVdkb2RDQnBjeUJqZFhKeVpXNTBiSGtnWW1WcGJtY2dZVzVwYldGMFpXUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNjbHh1SUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2QyVnBaMmgwVUdWdVpHbHVaeWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbTl0YVhObGN5NTNaV2xuYUhRZ0ppWWdkR2hwY3k1ZmNISnZiV2x6WlhNdWQyVnBaMmgwTG5CbGJtUnBibWM3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVmNHUmhkR1Z6SUhSb1pTQjFjMlZ5SUdSbFptbHVaV1FnZDJWcFoyaDBJRzkyWlhJZ2RHbHRaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQjNaV2xuYUhRZ0xTQlVhR1VnZEdGeVoyVjBJSGRsYVdkb2RDQjJZV3gxWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzNObFkyOXVaSE05TUYwZ0xTQlVhR1VnWVcxdmRXNTBJRzltSUhScGJXVWdhWFFnZDJsc2JDQjBZV3RsSUhSdklISmxZV05vSUhSb1pWeHlYRzRnSUNBcUlIUmhjbWRsZENCM1pXbG5hSFF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUdWaGMybHVaMFp1SUMwZ1ZHaGxJR1ZoYzJsdVp5Qm1kVzVqZEdsdmJpQjBieUIxYzJVZ1ptOXlJR2x1ZEdWeWNHOXNZWFJwYjI0dVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JHVm1aWEp5WldSOVhISmNiaUFnSUNvdlhISmNiaUFnYzJWMFYyVnBaMmgwS0hkbGFXZG9kQ3dnYzJWamIyNWtjeUE5SURBc0lHVmhjMmx1WjBadUtTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5d2NtOXRhWE5sY3k1M1pXbG5hSFF1WTJGdVkyVnNLQ2s3WEhKY2JpQWdJQ0IzWldsbmFIUWdQU0JOWVhSb1ZYUnBiSE11WTJ4aGJYQW9kMlZwWjJoMEtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NTNaV2xuYUhRZ1BTQkJibWx0WVhScGIyNVZkR2xzY3k1cGJuUmxjbkJ2YkdGMFpWQnliM0JsY25SNUtGeHlYRzRnSUNBZ0lDQjBhR2x6TEZ4eVhHNGdJQ0FnSUNBbmQyVnBaMmgwSnl4Y2NseHVJQ0FnSUNBZ2QyVnBaMmgwTEZ4eVhHNGdJQ0FnSUNCN2MyVmpiMjVrY3l3Z1pXRnphVzVuUm01OVhISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5d2NtOXRhWE5sY3k1M1pXbG5hSFE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSFpYUnpJSFJvWlNCcGJuUmxjbTVoYkNCM1pXbG5hSFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WaFpHOXViSGxjY2x4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRDQnBiblJsY201aGJGZGxhV2RvZENncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm5SbGNtNWhiRmRsYVdkb2REdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRTExYkhScGNHeHBaWE1nZEdobElIVnpaWElnZDJWcFoyaDBJR0o1SUdFZ1ptRmpkRzl5SUhSdklHUmxkR1Z5YldsdVpTQjBhR1VnYVc1MFpYSnVZV3dnZDJWcFoyaDBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHWmhZM1J2Y2lBdElEQXRNU0J0ZFd4MGFYQnNhV1Z5SUhSdklHRndjR3g1SUhSdklIUm9aU0IxYzJWeUlIZGxhV2RvZEM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0IxY0dSaGRHVkpiblJsY201aGJGZGxhV2RvZENobVlXTjBiM0lwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYMmx1ZEdWeWJtRnNWMlZwWjJoMElEMGdkR2hwY3k1ZmQyVnBaMmgwSUNvZ1ptRmpkRzl5TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsSUdGdWVTQjJZV3gxWlhNZ2RHaGhkQ0J1WldWa0lIUnZJR0psSUdWMllXeDFZWFJsWkNCbGRtVnllU0JtY21GdFpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCa1pXeDBZVlJwYldVZ0xTQlVhVzFsSUdsdUlHMXBiR3hwYzJWamIyNWtjeUJ6YVc1alpTQjBhR1VnYkdGemRDQjFjR1JoZEdVdVhISmNiaUFnSUNvdlhISmNiaUFnZFhCa1lYUmxLR1JsYkhSaFZHbHRaU2tnZTF4eVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5d1lYVnpaV1FwSUh0Y2NseHVJQ0FnSUNBZ1QySnFaV04wTG5aaGJIVmxjeWgwYUdsekxsOXdjbTl0YVhObGN5a3VabTl5UldGamFDaHdjbTl0YVhObElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNCd2NtOXRhWE5sTG1WNFpXTjFkR1VvWkdWc2RHRlVhVzFsS1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUZEdGeWRDQndiR0Y1WW1GamF5QnZaaUIwYUdVZ2MzUmhkR1VnWm5KdmJTQjBhR1VnWW1WbmFXNXVhVzVuTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUc5dVJtbHVhWE5vSUMwZ1JuVnVZM1JwYjI0Z2RHOGdaWGhsWTNWMFpTQjNhR1Z1SUhSb1pTQnpkR0YwWlNCbWFXNXBjMmhsY3k1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1UFgwZ2IyNUZjbkp2Y2lBdElFWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdhV1lnZEdobElITjBZWFJsSUdWdVkyOTFiblJsY25OY2NseHVJQ0FnS2lCaGJpQmxjbkp2Y2lCa2RYSnBibWNnY0d4aGVXSmhZMnN1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUc5dVEyRnVZMlZzSUMwZ1JuVnVZM1JwYjI0Z2RHOGdaWGhsWTNWMFpTQnBaaUJ3YkdGNVltRmpheUJwY3lCallXNWpaV3hsWkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0RVpXWmxjbkpsWkgxY2NseHVJQ0FnS2k5Y2NseHVJQ0J3YkdGNUtHOXVSbWx1YVhOb0xDQnZia1Z5Y205eUxDQnZia05oYm1ObGJDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmNHRjFjMlZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0IwYUdsekxsOXdiR0Y1UTJGc2JHSmhZMnR6TG05dVJtbHVhWE5vSUQwZ2IyNUdhVzVwYzJnN1hISmNiaUFnSUNCMGFHbHpMbDl3YkdGNVEyRnNiR0poWTJ0ekxtOXVSWEp5YjNJZ1BTQnZia1Z5Y205eU8xeHlYRzRnSUNBZ2RHaHBjeTVmY0d4aGVVTmhiR3hpWVdOcmN5NXZia05oYm1ObGJDQTlJRzl1UTJGdVkyVnNPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVnpMbkJzWVhrZ1BTQnVaWGNnUkdWbVpYSnlaV1FvZFc1a1pXWnBibVZrTENCdmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNURZVzVqWld3cE8xeHlYRzRnSUNBZ2RHaHBjeTVmY0hKdmJXbHpaWE11Wm1sdWFYTm9JRDBnUkdWbVpYSnlaV1F1WVd4c0tGdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmNISnZiV2x6WlhNdWNHeGhlU3hjY2x4dUlDQWdJQ0FnZEdocGN5NWZjSEp2YldselpYTXVkMlZwWjJoMExGeHlYRzRnSUNBZ1hTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzQnliMjFwYzJWekxtWnBibWx6YUR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGQmhkWE5sSUhCc1lYbGlZV05ySUc5bUlIUm9aU0J6ZEdGMFpTNGdWR2hwY3lCd2NtVjJaVzUwY3lCd1pXNWthVzVuSUhCeWIyMXBjMlZ6SUdaeWIyMGdZbVZwYm1jZ1pYaGxZM1YwWldRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0J3WVhWelpTZ3BJSHRjY2x4dUlDQWdJSFJvYVhNdVgzQmhkWE5sWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxjM1Z0WlNCd2JHRjVZbUZqYXlCdlppQjBhR1VnYzNSaGRHVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdiMjVHYVc1cGMyZ2dMU0JHZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUhkb1pXNGdkR2hsSUhOMFlYUmxJR1pwYm1semFHVnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0J2YmtWeWNtOXlJQzBnUm5WdVkzUnBiMjRnZEc4Z1pYaGxZM1YwWlNCcFppQjBhR1VnYzNSaGRHVWdaVzVqYjNWdWRHVnljMXh5WEc0Z0lDQXFJR0Z1SUdWeWNtOXlJR1IxY21sdVp5QndiR0Y1WW1GamF5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdiMjVEWVc1alpXd2dMU0JHZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUdsbUlIQnNZWGxpWVdOcklHbHpJR05oYm1ObGJHVmtMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMFJsWm1WeWNtVmtmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lISmxjM1Z0WlNodmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNURZVzVqWld3cElIdGNjbHh1SUNBZ0lIUm9hWE11WDNCaGRYTmxaQ0E5SUdaaGJITmxPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNISnZiV2x6WlhNdWNHeGhlUzV3Wlc1a2FXNW5LU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVYM0JzWVhsRFlXeHNZbUZqYTNNdWIyNUdhVzVwYzJnZ1BTQnZia1pwYm1semFDQjhmQ0IwYUdsekxsOXdiR0Y1UTJGc2JHSmhZMnR6TG05dVJtbHVhWE5vTzF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl3YkdGNVEyRnNiR0poWTJ0ekxtOXVSWEp5YjNJZ1BTQnZia1Z5Y205eUlIeDhJSFJvYVhNdVgzQnNZWGxEWVd4c1ltRmphM011YjI1RmNuSnZjanRjY2x4dUlDQWdJQ0FnZEdocGN5NWZjR3hoZVVOaGJHeGlZV05yY3k1dmJrTmhibU5sYkNBOUlHOXVRMkZ1WTJWc0lIeDhJSFJvYVhNdVgzQnNZWGxEWVd4c1ltRmphM011YjI1RFlXNWpaV3c3WEhKY2JseHlYRzRnSUNBZ0lDQjBhR2x6TGw5d2NtOXRhWE5sY3k1d2JHRjVJRDBnYm1WM0lFUmxabVZ5Y21Wa0tGeHlYRzRnSUNBZ0lDQWdJSFZ1WkdWbWFXNWxaQ3hjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YkdGNVEyRnNiR0poWTJ0ekxtOXVSbWx1YVhOb0xGeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnNZWGxEWVd4c1ltRmphM011YjI1RmNuSnZjaXhjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YkdGNVEyRnNiR0poWTJ0ekxtOXVRMkZ1WTJWc1hISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzQnliMjFwYzJWekxtWnBibWx6YUNBOUlFUmxabVZ5Y21Wa0xtRnNiQ2hiWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKdmJXbHpaWE11Y0d4aGVTeGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NTNaV2xuYUhRc1hISmNiaUFnSUNBZ0lGMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbTl0YVhObGN5NW1hVzVwYzJnN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRZVzVqWld3Z2NHeGhlV0poWTJzZ2IyWWdkR2hsSUhOMFlYUmxJR0Z1WkNCallXNWpaV3dnWVc1NUlIQmxibVJwYm1jZ2NISnZiV2x6WlhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0JqWVc1alpXd29LU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXdZWFZ6WldRZ1BTQjBjblZsTzF4eVhHNWNjbHh1SUNBZ0lFOWlhbVZqZEM1MllXeDFaWE1vZEdocGN5NWZjSEp2YldselpYTXBMbVp2Y2tWaFkyZ29jSEp2YldselpTQTlQaUI3WEhKY2JpQWdJQ0FnSUhCeWIyMXBjMlV1WTJGdVkyVnNLQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZOMGIzQWdjR3hoZVdKaFkyc2diMllnZEdobElITjBZWFJsSUdGdVpDQnlaWE52YkhabElHRnVlU0J3Wlc1a2FXNW5JSEJ5YjIxcGMyVnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUnZjQ2dwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM0JoZFhObFpDQTlJSFJ5ZFdVN1hISmNibHh5WEc0Z0lDQWdUMkpxWldOMExuWmhiSFZsY3loMGFHbHpMbDl3Y205dGFYTmxjeWt1Wm05eVJXRmphQ2h3Y205dGFYTmxJRDArSUh0Y2NseHVJQ0FnSUNBZ2NISnZiV2x6WlM1eVpYTnZiSFpsS0NrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFTmhibU5sYkNCaGJua2djR1Z1WkdsdVp5QndjbTl0YVhObGN5QmhibVFnY21WdGIzWmxJSEpsWm1WeVpXNWpaU0IwYnlCMGFHVnRMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHUnBjMk5oY21Rb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TG1OaGJtTmxiQ2dwTzF4eVhHNWNjbHh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbDl3Y205dGFYTmxjenRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVadmNtTmxJSFJvWlNCcGJuUmxjbTVoYkNCM1pXbG5hSFFnZEc4Z01DNGdVMmh2ZFd4a0lHSmxJR05oYkd4bFpDQmlaV1p2Y21VZ2MzZHBkR05vYVc1bklHOXlJSFJ5WVc1emFYUnBiMjVwYm1kY2NseHVJQ0FnS2lCMGJ5QmhJRzVsZHlCemRHRjBaUzVjY2x4dUlDQWdLaTljY2x4dUlDQmtaV0ZqZEdsMllYUmxLQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NTFjR1JoZEdWSmJuUmxjbTVoYkZkbGFXZG9kQ2d3S1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGaWMzUnlZV04wVTNSaGRHVTdYSEpjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JCYldGNmIyNHVZMjl0TENCSmJtTXVJRzl5SUdsMGN5QmhabVpwYkdsaGRHVnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4eVhHNHZMeUJUVUVSWUxVeHBZMlZ1YzJVdFNXUmxiblJwWm1sbGNqb2dUVWxVTFRCY2NseHVhVzF3YjNKMElFUmxabVZ5Y21Wa0lHWnliMjBnSjJOdmNtVXZSR1ZtWlhKeVpXUW5PMXh5WEc1cGJYQnZjblFnUVdKemRISmhZM1JUZEdGMFpTQm1jbTl0SUNjdUwwRmljM1J5WVdOMFUzUmhkR1VuTzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVOc1lYTnpJR1p2Y2lCemJXOXZkR2dnZEhKaGJuTnBkR2x2Ym1sdVp5QmlaWFIzWldWdUlITjBZWFJsY3lCdmJpQmhiaUJoYm1sdFlYUnBiMjRnYkdGNVpYSXVYSEpjYmlBcVhISmNiaUFxSUVCbGVIUmxibVJ6SUVGaWMzUnlZV04wVTNSaGRHVmNjbHh1SUNvdlhISmNibU5zWVhOeklGUnlZVzV6YVhScGIyNVRkR0YwWlNCbGVIUmxibVJ6SUVGaWMzUnlZV04wVTNSaGRHVWdlMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTWdQU0I3ZlNrZ2UxeHlYRzRnSUNBZ2MzVndaWElvYjNCMGFXOXVjeWs3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmZEc4Z1BTQnVkV3hzTzF4eVhHNGdJQ0FnZEdocGN5NWZabkp2YlNBOUlGdGRPMXh5WEc0Z0lDQWdkR2hwY3k1ZmQyVnBaMmgwVUhKdmJXbHpaU0E5SUVSbFptVnljbVZrTG5KbGMyOXNkbVVvS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRDQnBiblJsY201aGJGZGxhV2RvZENncElIdGNjbHh1SUNBZ0lDOHZJRVpwYm1RZ2RHaGxJR052YldKcGJtVmtJSGRsYVdkb2RDQnZaaUJoYkd3Z2MzVmlMWE4wWVhSbGMxeHlYRzRnSUNBZ2JHVjBJSFJ2ZEdGc1YyVnBaMmgwSUQwZ01EdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmZEc4cElIdGNjbHh1SUNBZ0lDQWdkRzkwWVd4WFpXbG5hSFFnS3owZ2RHaHBjeTVmZEc4dWQyVnBaMmgwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDJaeWIyMHVabTl5UldGamFDaHpkR0YwWlNBOVBpQjdYSEpjYmlBZ0lDQWdJSFJ2ZEdGc1YyVnBaMmgwSUNzOUlITjBZWFJsTG5kbGFXZG9kRHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCMGIzUmhiRmRsYVdkb2RDQXFJSFJvYVhNdVgybHVkR1Z5Ym1Gc1YyVnBaMmgwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnZFhCa1lYUmxTVzUwWlhKdVlXeFhaV2xuYUhRb1ptRmpkRzl5S1NCN1hISmNiaUFnSUNCemRYQmxjaTUxY0dSaGRHVkpiblJsY201aGJGZGxhV2RvZENobVlXTjBiM0lwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDJaeWIyMHVabTl5UldGamFDaHpkR0YwWlNBOVBpQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbExuVndaR0YwWlVsdWRHVnlibUZzVjJWcFoyaDBLSFJvYVhNdVgybHVkR1Z5Ym1Gc1YyVnBaMmgwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbDkwYnlrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5MGJ5NTFjR1JoZEdWSmJuUmxjbTVoYkZkbGFXZG9kQ2gwYUdsekxsOXBiblJsY201aGJGZGxhV2RvZENrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlZjR1JoZEdVZ2MzVmlMWE4wWVhSbGN5QjBhR1VnZEhKaGJuTnBkR2x2YmlCcGN5QmpiMjUwY205c2JHbHVaeUJoYm1RZ2MzUmhjblFnYm1WM0lIZGxhV2RvZEZ4eVhHNGdJQ0FxSUdGdWFXMWhkR2x2Ym5NZ2IyNGdaV0ZqYUNCdmJtVXVJRlJvYVhNZ2MyaHZkV3hrSUdKbElHTmhiR3hsWkNCbFlXTm9JSFJwYldVZ2RHaGxJR04xY25KbGJuUWdjM1JoZEdVZ2IyWmNjbHh1SUNBZ0tpQmhiaUJoYm1sdFlYUnBiMjRnYkdGNVpYSWdaMlYwY3lCMWNHUmhkR1ZrSUhSdklHRWdibVYzSUhaaGJIVmxJR0Z1WkNCaElIUnlZVzV6YVhScGIyNGdkR2x0WlNCbmNtVmhkR1Z5WEhKY2JpQWdJQ29nZEdoaGRDQjZaWEp2SUdseklITndaV05wWm1sbFpDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGt1UEVGaWMzUnlZV04wVTNSaGRHVStmU0JiWTNWeWNtVnVkRk4wWVhSbGN6MWJYVjBnTFNCVGRHRjBaWE1nZDJodmMyVWdkMlZwWjJoMElIWmhiSFZsYzF4eVhHNGdJQ0FxSUhkcGJHd2dZbVVnWVc1cGJXRjBaV1FnZEc4Z01DNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRmljM1J5WVdOMFUzUmhkR1U5ZlNCMFlYSm5aWFJUZEdGMFpTQXRJRk4wWVhSbElIZG9iM05sSUhkbGFXZG9kQ0IzYVd4c0lHSmxJR0Z1YVcxaGRHVmtYSEpjYmlBZ0lDb2dkRzhnTVM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnZEhKaGJuTnBkR2x2YmxScGJXVWdMU0JCYlc5MWJuUWdiMllnZEdsdFpTQnBkQ0IzYVd4c0lHbHVJSE5sWTI5dVpITWdkR0ZyWlNCbWIzSmNjbHh1SUNBZ0tpQjNaV2xuYUhRZ1lXNXBiV0YwYVc5dWN5QjBieUJqYjIxd2JHVjBaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnWldGemFXNW5SbTRnTFNCRllYTnBibWNnWm5WdVkzUnBiMjRnZEc4Z2RYTmxJR1p2Y2lCM1pXbG5hSFFnWVc1cGJXRjBhVzl1Y3k1Y2NseHVJQ0FnS2lCRVpXWmhkV3gwSUdseklFVmhjMmx1Wnk1TWFXNWxZWEl1U1c1UGRYUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJRzl1UTI5dGNHeGxkR1VnTFNCR2RXNWpkR2x2YmlCMGJ5QmxlR1ZqZFhSbElHOXVZMlVnWVd4c0lIZGxhV2RvZENCaGJtbHRZWFJwYjI1elhISmNiaUFnSUNvZ1kyOXRjR3hsZEdVdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dVptbG5kWEpsS0Z4eVhHNGdJQ0FnWTNWeWNtVnVkRk4wWVhSbGN5QTlJRnRkTEZ4eVhHNGdJQ0FnZEdGeVoyVjBVM1JoZEdVc1hISmNiaUFnSUNCMGNtRnVjMmwwYVc5dVZHbHRaU3hjY2x4dUlDQWdJR1ZoYzJsdVowWnVMRnh5WEc0Z0lDQWdiMjVEYjIxd2JHVjBaVnh5WEc0Z0lDa2dlMXh5WEc0Z0lDQWdMeThnUkdWaFkzUnBkbUYwWlNCaGJua2djM1JoZEdWeklIUm9ZWFFnWVhKbGJpZDBJR2x1SUhSb1pTQnVaWGNnWTI5dVptbG5kWEpoZEdsdmJseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzUnZJRDA5UFNCMFlYSm5aWFJUZEdGMFpTQjhmQ0JqZFhKeVpXNTBVM1JoZEdWekxtbHVZMngxWkdWektIUm9hWE11WDNSdktTa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOTBieUE5SUc1MWJHdzdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQjBhR2x6TGw5bWNtOXRJRDBnZEdocGN5NWZabkp2YlM1bWFXeDBaWElvWEhKY2JpQWdJQ0FnSUhOMFlYUmxJRDArSUhOMFlYUmxJQ0U5UFNCMFlYSm5aWFJUZEdGMFpTQW1KaUFoWTNWeWNtVnVkRk4wWVhSbGN5NXBibU5zZFdSbGN5aHpkR0YwWlNsY2NseHVJQ0FnSUNrN1hISmNiaUFnSUNCMGFHbHpMbVJsWVdOMGFYWmhkR1VvS1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5bWNtOXRJRDBnWTNWeWNtVnVkRk4wWVhSbGN6dGNjbHh1SUNBZ0lIUm9hWE11WDNSdklEMGdkR0Z5WjJWMFUzUmhkR1U3WEhKY2JpQWdJQ0IwYUdsekxuSmxjMlYwS0hSeVlXNXphWFJwYjI1VWFXMWxMQ0JsWVhOcGJtZEdiaXdnYjI1RGIyMXdiR1YwWlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRkR0Z5ZENCdVpYY2dkMlZwWjJoMElHRnVhVzFoZEdsdmJuTWdjM1JoZEdVZ2RHaGxJSFJ5WVc1emFYUnBiMjRnWTI5dWRISnZiSE11SUZSb2FYTWdjMmh2ZFd4a0lHSmxJR05oYkd4bFpGeHlYRzRnSUNBcUlHbG1JR0Z1SUdGdWFXMWhkR2x2YmlCcGN5QndiR0Y1WldRZ2QybDBhQ0JoSUhSeVlXNXphWFJwYjI0Z2RHbHRaU0JuY21WaGRHVnlJSFJvWVc0Z2VtVnlieUJoYm1RZ1lTQjBjbUZ1YzNScGIyNWNjbHh1SUNBZ0tpQjBieUIwYUdGMElHRnVhVzFoZEdsdmJpQjNZWE1nWVd4eVpXRmtlU0JwYmlCd2NtOW5jbVZ6Y3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IwY21GdWMybDBhVzl1VkdsdFpTQXRJRUZ0YjNWdWRDQnZaaUIwYVcxbElHbDBJSGRwYkd3Z2FXNGdjMlZqYjI1a2N5QjBZV3RsSUdadmNseHlYRzRnSUNBcUlIZGxhV2RvZENCaGJtbHRZWFJwYjI1eklIUnZJR052YlhCc1pYUmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0JsWVhOcGJtZEdiaUF0SUVWaGMybHVaeUJtZFc1amRHbHZiaUIwYnlCMWMyVWdabTl5SUhkbGFXZG9kQ0JoYm1sdFlYUnBiMjV6TGx4eVhHNGdJQ0FxSUVSbFptRjFiSFFnYVhNZ1JXRnphVzVuTGt4cGJtVmhjaTVKYms5MWRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdiMjVEYjIxd2JHVjBaU0F0SUVaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2IyNWpaU0JoYkd3Z2QyVnBaMmgwSUdGdWFXMWhkR2x2Ym5OY2NseHVJQ0FnS2lCamIyMXdiR1YwWlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J5WlhObGRDaDBjbUZ1YzJsMGFXOXVWR2x0WlN3Z1pXRnphVzVuUm00c0lHOXVRMjl0Y0d4bGRHVXBJSHRjY2x4dUlDQWdJQzh2SUZOMGIzQWdZVzU1SUhCbGJtUnBibWNnY0hKdmJXbHpaWE5jY2x4dUlDQWdJSFJvYVhNdVgzZGxhV2RvZEZCeWIyMXBjMlV1WTJGdVkyVnNLQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdVM1JoY25RZ2RIZGxaVzVwYm1jZ2QyVnBaMmgwSUhSdklEQWdabTl5SUhSb1pTQmpkWEp5Wlc1MElITjBZWFJsYzF4eVhHNGdJQ0FnWTI5dWMzUWdkMlZwWjJoMFVISnZiV2x6WlhNZ1BTQjBhR2x6TGw5bWNtOXRMbTFoY0NoemRHRjBaU0E5UGx4eVhHNGdJQ0FnSUNCemRHRjBaUzV6WlhSWFpXbG5hSFFvTUN3Z2RISmhibk5wZEdsdmJsUnBiV1VzSUdWaGMybHVaMFp1S1Z4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJUZEdGeWRDQjBkMlZsYm1sdVp5QjNaV2xuYUhRZ2RHOGdNU0JtYjNJZ2RHaGxJSFJoY21kbGRDQnpkR0YwWlZ4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDNSdktTQjdYSEpjYmlBZ0lDQWdJSGRsYVdkb2RGQnliMjFwYzJWekxuQjFjMmdvZEdocGN5NWZkRzh1YzJWMFYyVnBaMmgwS0RFc0lIUnlZVzV6YVhScGIyNVVhVzFsTENCbFlYTnBibWRHYmlrcE8xeHlYRzRnSUNBZ0lDQjBhR2x6TG01aGJXVWdQU0IwYUdsekxsOTBieTV1WVcxbE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTV1WVcxbElEMGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5M1pXbG5hSFJRY205dGFYTmxJRDBnUkdWbVpYSnlaV1F1WVd4c0tIZGxhV2RvZEZCeWIyMXBjMlZ6TENBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUhSb2FYTXVYMlp5YjIwdVptOXlSV0ZqYUNoemRHRjBaU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdjM1JoZEdVdVkyRnVZMlZzS0NrN1hISmNiaUFnSUNBZ0lDQWdjM1JoZEdVdVpHVmhZM1JwZG1GMFpTZ3BPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZia052YlhCc1pYUmxJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnYjI1RGIyMXdiR1YwWlNncE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSEJzWVhrb2IyNUdhVzVwYzJnc0lHOXVSWEp5YjNJc0lHOXVRMkZ1WTJWc0xDQnZiazVsZUhRcElIdGNjbHh1SUNBZ0lIUm9hWE11WDNCaGRYTmxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdkR2hwY3k1ZmNHeGhlVU5oYkd4aVlXTnJjeTV2YmtacGJtbHphQ0E5SUc5dVJtbHVhWE5vTzF4eVhHNGdJQ0FnZEdocGN5NWZjR3hoZVVOaGJHeGlZV05yY3k1dmJrVnljbTl5SUQwZ2IyNUZjbkp2Y2p0Y2NseHVJQ0FnSUhSb2FYTXVYM0JzWVhsRFlXeHNZbUZqYTNNdWIyNURZVzVqWld3Z1BTQnZia05oYm1ObGJEdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQndjbTl0YVhObGN5QTlJRnQwYUdsekxsOTNaV2xuYUhSUWNtOXRhWE5sWFR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5bWNtOXRMbVp2Y2tWaFkyZ29jM1JoZEdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNXlaWE4xYldVb0tUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5MGJ5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NXdiR0Y1SUQwZ2RHaHBjeTVmZEc4dWNHeGhlU2hjY2x4dUlDQWdJQ0FnSUNCMWJtUmxabWx1WldRc1hISmNiaUFnSUNBZ0lDQWdkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0FnSUhWdVpHVm1hVzVsWkN4Y2NseHVJQ0FnSUNBZ0lDQnZiazVsZUhSY2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdjSEp2YldselpYTXVjSFZ6YUNoMGFHbHpMbDl3Y205dGFYTmxjeTV3YkdGNUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NW1hVzVwYzJnZ1BTQkVaV1psY25KbFpDNWhiR3dvY0hKdmJXbHpaWE1zSUc5dVJtbHVhWE5vTENCdmJrVnljbTl5TENCdmJrTmhibU5sYkNrN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjSEp2YldselpYTXVabWx1YVhOb08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2NHRjFjMlVvS1NCN1hISmNiaUFnSUNCMGFHbHpMbDltY205dExtWnZja1ZoWTJnb2MzUmhkR1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1d1lYVnpaU2dwTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM1J2S1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDNSdkxuQmhkWE5sS0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlITjFjR1Z5TG5CaGRYTmxLQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J5WlhOMWJXVW9iMjVHYVc1cGMyZ3NJRzl1UlhKeWIzSXNJRzl1UTJGdVkyVnNMQ0J2Yms1bGVIUXBJSHRjY2x4dUlDQWdJSFJvYVhNdVgzQmhkWE5sWkNBOUlHWmhiSE5sTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doZEdocGN5NWZjSEp2YldselpYTXVjR3hoZVM1d1pXNWthVzVuS1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDNCc1lYbERZV3hzWW1GamEzTXViMjVHYVc1cGMyZ2dQU0J2YmtacGJtbHphQ0I4ZkNCMGFHbHpMbDl3YkdGNVEyRnNiR0poWTJ0ekxtOXVSbWx1YVhOb08xeHlYRzRnSUNBZ0lDQjBhR2x6TGw5d2JHRjVRMkZzYkdKaFkydHpMbTl1UlhKeWIzSWdQU0J2YmtWeWNtOXlJSHg4SUhSb2FYTXVYM0JzWVhsRFlXeHNZbUZqYTNNdWIyNUZjbkp2Y2p0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmY0d4aGVVTmhiR3hpWVdOcmN5NXZia05oYm1ObGJDQTlJRzl1UTJGdVkyVnNJSHg4SUhSb2FYTXVYM0JzWVhsRFlXeHNZbUZqYTNNdWIyNURZVzVqWld3N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2NISnZiV2x6WlhNZ1BTQmJkR2hwY3k1ZmQyVnBaMmgwVUhKdmJXbHpaVjA3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmWm5KdmJTNW1iM0pGWVdOb0tITjBZWFJsSUQwK0lIdGNjbHh1SUNBZ0lDQWdjM1JoZEdVdWNtVnpkVzFsS0NrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmZEc4cElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmNISnZiV2x6WlhNdWNHeGhlU0E5SUhSb2FYTXVYM1J2TG5KbGMzVnRaU2hjY2x4dUlDQWdJQ0FnSUNCMWJtUmxabWx1WldRc1hISmNiaUFnSUNBZ0lDQWdkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0FnSUhWdVpHVm1hVzVsWkN4Y2NseHVJQ0FnSUNBZ0lDQnZiazVsZUhSY2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdjSEp2YldselpYTXVjSFZ6YUNoMGFHbHpMbDl3Y205dGFYTmxjeTV3YkdGNUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NW1hVzVwYzJnZ1BTQkVaV1psY25KbFpDNWhiR3dvWEhKY2JpQWdJQ0FnSUhCeWIyMXBjMlZ6TEZ4eVhHNGdJQ0FnSUNCMGFHbHpMbDl3YkdGNVEyRnNiR0poWTJ0ekxtOXVSbWx1YVhOb0xGeHlYRzRnSUNBZ0lDQjBhR2x6TGw5d2JHRjVRMkZzYkdKaFkydHpMbTl1UlhKeWIzSXNYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzQnNZWGxEWVd4c1ltRmphM011YjI1RFlXNWpaV3hjY2x4dUlDQWdJQ2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNISnZiV2x6WlhNdVptbHVhWE5vTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWTJGdVkyVnNLQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NWZabkp2YlM1bWIzSkZZV05vS0hOMFlYUmxJRDArSUh0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1Y0dGMWMyVW9LVHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxsOTBieWtnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDkwYnk1allXNWpaV3dvS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5M1pXbG5hSFJRY205dGFYTmxMbU5oYm1ObGJDZ3BPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNWpZVzVqWld3b0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITjBiM0FvS1NCN1hISmNiaUFnSUNCMGFHbHpMbDltY205dExtWnZja1ZoWTJnb2MzUmhkR1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1d1lYVnpaU2dwTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM1J2S1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDNSdkxuTjBiM0FvS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2MzVndaWEl1YzNSdmNDZ3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdkWEJrWVhSbEtHUmxiSFJoVkdsdFpTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJdWRYQmtZWFJsS0dSbGJIUmhWR2x0WlNrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZlpuSnZiUzVtYjNKRllXTm9LSE4wWVhSbElEMCtJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVkWEJrWVhSbEtHUmxiSFJoVkdsdFpTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCcFppQW9kR2hwY3k1ZmRHOHBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZkRzh1ZFhCa1lYUmxLR1JsYkhSaFZHbHRaU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JrYVhOallYSmtLQ2tnZTF4eVhHNGdJQ0FnYzNWd1pYSXVaR2x6WTJGeVpDZ3BPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYM2RsYVdkb2RGQnliMjFwYzJVdVkyRnVZMlZzS0NrN1hISmNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NWZkMlZwWjJoMFVISnZiV2x6WlR0Y2NseHVJQ0FnSUhSb2FYTXVYM1J2SUQwZ2JuVnNiRHRjY2x4dUlDQWdJSFJvYVhNdVgyWnliMjB1YkdWdVozUm9JRDBnTUR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdSbFlXTjBhWFpoZEdVb0tTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZkRzhwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmZEc4dVpHVmhZM1JwZG1GMFpTZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMlp5YjIwdVptOXlSV0ZqYUNoemRHRjBaU0E5UGlCN1hISmNiaUFnSUNBZ0lITjBZWFJsTG1SbFlXTjBhWFpoZEdVb0tUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdWSEpoYm5OcGRHbHZibE4wWVhSbE8xeHlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdRVzFoZW05dUxtTnZiU3dnU1c1akxpQnZjaUJwZEhNZ1lXWm1hV3hwWVhSbGN5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjY2x4dUx5OGdVMUJFV0MxTWFXTmxibk5sTFVsa1pXNTBhV1pwWlhJNklFMUpWQzB3WEhKY2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHMWhlQzFqYkdGemMyVnpMWEJsY2kxbWFXeGxJQ292WEhKY2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMWFZ1ZFhObFpDMTJZWEp6SUNvdlhISmNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFdWdGNIUjVMV1oxYm1OMGFXOXVJQ292WEhKY2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHZGxkSFJsY2kxeVpYUjFjbTRnS2k5Y2NseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0ZFhObGJHVnpjeTFqYjI1emRISjFZM1J2Y2lBcUwxeHlYRzVwYlhCdmNuUWdWSEpoYm5OcGRHbHZibE4wWVhSbElHWnliMjBnSnk0dmMzUmhkR1V2VkhKaGJuTnBkR2x2YmxOMFlYUmxKenRjY2x4dWFXMXdiM0owSUVSbFptVnljbVZrSUdaeWIyMGdKeTR1TDBSbFptVnljbVZrSnp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCRGJHRnpjeUJtWVdOMGIzSjVJR2x1ZEdWeVptRmpaU0JtYjNJZ1kyOXVkSEp2Ykd4cGJtY2djR3hoZVdKaFkyc2diMllnWVNCamIyeHNaV04wYVc5dUlHOW1JR0Z1YVcxaGRHbHZibk11WEhKY2JpQXFJRTl1WlNCaGJtbHRZWFJwYjI0Z1kyRnVJR0psSUhCc1lYbGxaQ0JoZENCaGJua2daMmwyWlc0Z2RHbHRaU3dnWTNKdmMzTm1ZV1JwYm1jZ1ltVjBkMlZsYmlCaGJtbHRZWFJwYjI1elhISmNiaUFxSUhkcGJHd2djbVZ6ZFd4MElHbHVJSEJzWVhscGJtY2dZU0I3UUd4cGJtc2dWSEpoYm5OcGRHbHZibE4wWVhSbGZTNWNjbHh1SUNwY2NseHVJQ29nUUdsdWRHVnlabUZqWlZ4eVhHNGdLaTljY2x4dVkyeGhjM01nUVc1cGJXRjBhVzl1VUd4aGVXVnlTVzUwWlhKbVlXTmxJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklIZG9aWFJvWlhJZ2IzSWdibTkwSUhSb1pTQndiR0Y1WlhJZ2FYTWdkWEJrWVhScGJtY2djM1JoZEdWekxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhISmNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUhCaGRYTmxaQ2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdZWFZ6WldRN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUdGdVpDQnpaWFJ6SUhSb1pTQmtaV1poZFd4MElHNTFiV0psY2lCdlppQnpaV052Ym1SeklHbDBJSFJoYTJWeklIUnZJSFJ5WVc1emFYUnBiMjRnZEc4Z1lTQnVaWGRjY2x4dUlDQWdLaUJoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRDQjBjbUZ1YzJsMGFXOXVWR2x0WlNncElIdDlYSEpjYmx4eVhHNGdJSE5sZENCMGNtRnVjMmwwYVc5dVZHbHRaU2h6WldOdmJtUnpLU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUdGdVpDQnpaWFJ6SUhSb1pTQmtaV1poZFd4MElHVmhjMmx1WnlCbWRXNWpkR2x2YmlCMGJ5QjFjMlVnZDJobGJpQjBjbUZ1YzJsMGFXOXVhVzVuSUdGdVpGeHlYRzRnSUNBcUlITmxkSFJwYm1jZ2QyVnBaMmgwY3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCMGVYQmxJSHRHZFc1amRHbHZibjFjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnWldGemFXNW5SbTRvS1NCN2ZWeHlYRzVjY2x4dUlDQnpaWFFnWldGemFXNW5SbTRvWm00cElIdDlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkR2hsSUhOMFlYUmxJSFJvWlNCc1lYbGxjaUJwY3lCamRYSnlaVzUwYkhrZ2FXNGdZMjl1ZEhKdmJDQnZaaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WldGa2IyNXNlVnh5WEc0Z0lDQXFJRUIwZVhCbElIdEJZbk4wY21GamRGTjBZWFJsZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCamRYSnlaVzUwVTNSaGRHVW9LU0I3ZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0J6ZEdGMFpTQjBhR1VnYkdGNVpYSWdhWE1nWTNWeWNtVnVkR3g1SUdsdUlHTnZiblJ5YjJ3Z2IyWXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNjbHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCamRYSnlaVzUwUVc1cGJXRjBhVzl1S0NrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QjNhR1YwYUdWeUlHOXlJRzV2ZENCMGFHVWdiR0Y1WlhJZ2FYTWdZM1Z5Y21WdWRHeDVJSFJ5WVc1emFYUnBiMjVwYm1jZ2RHOGdZU0J1WlhjZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhISmNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUdselZISmhibk5wZEdsdmJtbHVaeWdwSUh0OVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRlZ3WkdGMFpTQjBhR1VnYkdGNVpYSW5jeUJqZFhKeVpXNTBJSE4wWVhSbElIUnZJR0VnYm1WM0lIWmhiSFZsTGlCSlppQjBjbUZ1YzJsMGFXOXVWR2x0WlNCcGN5QmtaV1pwYm1Wa1hISmNiaUFnSUNvZ1lXNWtJR2R5WldGMFpYSWdkR2hoYmlCNlpYSnZMQ0J3WlhKbWIzSnRJR0VnYzIxdmIzUm9JR0pzWlc1a0lHSmxkSGRsWlc0Z1lXNTVJSE4wWVhSbGN5QjBhR0YwSUdOMWNuSmxiblJzZVZ4eVhHNGdJQ0FxSUdoaGRtVWdibTl1TFhwbGNtOGdkMlZwWjJoMElIWmhiSFZsY3lCaGJtUWdkR2hsSUc1bGR5QnpkR0YwWlM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdleWh6ZEhKcGJtZDhiblZzYkNsOUlHNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQnpkR0YwWlNCMGJ5QjBjbUZ1YzJsMGFXOXVJSFJ2TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J3YkdGNVRXVjBhRzlrSUMwZ1RtRnRaU0J2WmlCMGFHVWdiM0JsY21GMGFXOXVJR0psYVc1bklIQnlaWEJoY21Wa0lHWnZjaXdnZEc4Z1ltVmNjbHh1SUNBZ0tpQjFjMlZrSUdsdUlHVnljbTl5SUcxbGMzTmhaMmx1Wnk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjajE5SUhSeVlXNXphWFJwYjI1VWFXMWxJQzBnUVcxdmRXNTBJRzltSUhScGJXVWdhVzRnYzJWamIyNWtjeUJwZENCM2FXeHNJSFJoYTJVZ2RHOWNjbHh1SUNBZ0tpQnpkMmwwWTJnZ2RHOGdkR2hsSUc1bGR5QnpkR0YwWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1UFgwZ1pXRnphVzVuUm00Z0xTQkZZWE5wYm1jZ1puVnVZM1JwYjI0Z2RHOGdkWE5sSUhkb1pXNGdkSEpoYm5OcGRHbHZibWx1WnlCMGJ5QmhYSEpjYmlBZ0lDb2dibVYzSUhOMFlYUmxJRzkyWlhJZ2RHbHRaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjI1RmNuSnZjaUF0SUVaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdZVzRnWlhKeWIzSWdhWE1nWlc1amIzVnVkR1Z5WldRdVhISmNiaUFnSUNvdlhISmNiaUFnWDNCeVpYQmhjbVZEZFhKeVpXNTBVM1JoZEdVb2JtRnRaU3dnY0d4aGVVMWxkR2h2WkN3Z2RISmhibk5wZEdsdmJsUnBiV1VzSUdWaGMybHVaMFp1TENCdmJrVnljbTl5S1NCN2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUZEdGeWRDQndiR0Y1WW1GamF5QmhiaUJoYm1sdFlYUnBiMjRnWm5KdmJTQjBhR1VnWW1WbmFXNXVhVzVuTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JoYm1sdFlYUnBiMjRnZEc4Z2NHeGhlUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNqMTlJSFJ5WVc1emFYUnBiMjVVYVcxbElDMGdRVzF2ZFc1MElHOW1JSFJwYldVZ2FYUWdkMmxzYkNCMFlXdGxJR0psWm05eVpTQjBhR1ZjY2x4dUlDQWdLaUJ1WlhjZ2MzUmhkR1VnYUdGeklHWjFiR3dnYVc1bWJIVmxibU5sSUdadmNpQjBhR1VnYkdGNVpYSXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJR1ZoYzJsdVowWnVJQzBnUldGemFXNW5JR1oxYm1OMGFXOXVJSFJ2SUhWelpTQm1iM0lnWW14bGJtUnBibWNnYVdZZ2RISmhibk5wZEdsdmJsUnBiV1ZjY2x4dUlDQWdLaUJwY3lCbmNtVmhkR1Z5SUhSb1lXNGdlbVZ5Ynk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1UFgwZ2IyNUdhVzVwYzJnZ0xTQkdkVzVqZEdsdmJpQjBieUJsZUdWamRYUmxJSGRvWlc0Z2RHaGxJR0Z1YVcxaGRHbHZiaUJtYVc1cGMyaGxjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjI1RmNuSnZjaUF0SUVaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUdGdWFXMWhkR2x2YmlCbGJtTnZkVzUwWlhKelhISmNiaUFnSUNvZ1lXNGdaWEp5YjNJZ1pIVnlhVzVuSUhCc1lYbGlZV05yTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCdmJrTmhibU5sYkNBdElFWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdhV1lnY0d4aGVXSmhZMnNnYVhNZ1kyRnVZMlZzWldRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVUbVY0ZENBdElFWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdhV1lnWVc0Z1lXNXBiV0YwYVc5dUlIRjFaWFZsSUdselhISmNiaUFnSUNvZ2NHeGhlV1ZrSUdGdVpDQnBkQ0JoWkhaaGJtTmxjeUIwYnlCMGFHVWdibVY0ZENCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JHVm1aWEp5WldSOVhISmNiaUFnSUNvdlhISmNiaUFnY0d4aGVVRnVhVzFoZEdsdmJpaGNjbHh1SUNBZ0lHNWhiV1VzWEhKY2JpQWdJQ0IwY21GdWMybDBhVzl1VkdsdFpTeGNjbHh1SUNBZ0lHVmhjMmx1WjBadUxGeHlYRzRnSUNBZ2IyNUdhVzVwYzJnc1hISmNiaUFnSUNCdmJrVnljbTl5TEZ4eVhHNGdJQ0FnYjI1RFlXNWpaV3dzWEhKY2JpQWdJQ0J2Yms1bGVIUmNjbHh1SUNBcElIdDlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOaGJtTmxiQ0J3YkdGNVltRmpheUJ2WmlCMGFHVWdZM1Z5Y21WdWRDQmhibWx0WVhScGIyNHVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCallXNWpaV3hCYm1sdFlYUnBiMjRvS1NCN2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJRWVhWelpTQndiR0Y1WW1GamF5QnZaaUIwYUdVZ1kzVnljbVZ1ZENCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0J3WVhWelpVRnVhVzFoZEdsdmJpZ3BJSHQ5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxjM1Z0WlNCd2JHRjVZbUZqYXlCdlppQmhiaUJoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVp6MTlJRzVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JoYm1sdFlYUnBiMjRnZEc4Z2NtVnpkVzFsSUhCc1lYbGlZV05ySUdadmNpNGdSR1ZtWVhWc2RGeHlYRzRnSUNBcUlHbHpJSFJvWlNCc1lYbGxjaWR6SUdOMWNuSmxiblFnWVc1cGJXRjBhVzl1SUc1aGJXVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhJOWZTQjBjbUZ1YzJsMGFXOXVWR2x0WlNBdElFRnRiM1Z1ZENCdlppQjBhVzFsSUdsMElIZHBiR3dnZEdGclpTQmlaV1p2Y21VZ2RHaGxYSEpjYmlBZ0lDb2dibVYzSUhOMFlYUmxJR2hoY3lCbWRXeHNJR2x1Wm14MVpXNWpaU0JtYjNJZ2RHaGxJR3hoZVdWeUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQnZia1pwYm1semFDQXRJRVoxYm1OMGFXOXVJSFJ2SUdWNFpXTjFkR1VnZDJobGJpQjBhR1VnYzNSaGRHVWdabWx1YVhOb1pYTXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJRzl1UlhKeWIzSWdMU0JHZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUdsbUlIUm9aU0J6ZEdGMFpTQmxibU52ZFc1MFpYSnpYSEpjYmlBZ0lDb2dZVzRnWlhKeWIzSWdaSFZ5YVc1bklIQnNZWGxpWVdOckxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQnZia05oYm1ObGJDQXRJRVoxYm1OMGFXOXVJSFJ2SUdWNFpXTjFkR1VnYVdZZ2NHeGhlV0poWTJzZ2FYTWdZMkZ1WTJWc1pXUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJRzl1VG1WNGRDQXRJRVoxYm1OMGFXOXVJSFJ2SUdWNFpXTjFkR1VnYVdZZ1lXNGdZVzVwYldGMGFXOXVJSEYxWlhWbElHbHpYSEpjYmlBZ0lDb2djR3hoZVdWa0lHRnVaQ0JwZENCaFpIWmhibU5sY3lCMGJ5QjBhR1VnYm1WNGRDQmhibWx0WVhScGIyNHVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSR1ZtWlhKeVpXUjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NtVnpkVzFsUVc1cGJXRjBhVzl1S0Z4eVhHNGdJQ0FnYm1GdFpTeGNjbHh1SUNBZ0lIUnlZVzV6YVhScGIyNVVhVzFsTEZ4eVhHNGdJQ0FnWldGemFXNW5SbTRzWEhKY2JpQWdJQ0J2YmtacGJtbHphQ3hjY2x4dUlDQWdJRzl1UlhKeWIzSXNYSEpjYmlBZ0lDQnZia05oYm1ObGJDeGNjbHh1SUNBZ0lHOXVUbVY0ZEZ4eVhHNGdJQ2tnZTMxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVM1J2Y0NCd2JHRjVZbUZqYXlCdlppQjBhR1VnWTNWeWNtVnVkQ0JoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3WW05dmJHVmhibjFjY2x4dUlDQWdLaTljY2x4dUlDQnpkRzl3UVc1cGJXRjBhVzl1S0NrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVlhCa1lYUmxJSFJvWlNCamRYSnlaVzUwSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JrWld4MFlWUnBiV1VnTFNCVWFXMWxJR2x1SUcxcGJHeHBjMlZqYjI1a2N5QnphVzVqWlNCMGFHVWdiR0Z6ZENCMWNHUmhkR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdkWEJrWVhSbEtHUmxiSFJoVkdsdFpTa2dlMzFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JHbHpZMkZ5WkNCMGFHVWdkSEpoYm5OcGRHbHZiaUJ6ZEdGMFpTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCa2FYTmpZWEprS0NrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUdOc1lYTnpJSFJvWVhRZ2FXMXdiR1Z0Wlc1MGN5QjdRR3hwYm1zZ1FXNXBiV0YwYVc5dVVHeGhlV1Z5U1c1MFpYSm1ZV05sZlNCaGJtUWdaWGgwWlc1a2MxeHlYRzRnSUNBcUlHRWdjM0JsWTJsbWFXVmtJR0poYzJVZ1kyeGhjM011WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlME5zWVhOemZTQmJRbUZ6WlVOc1lYTnpJRDBnWTJ4aGMzTjdmVjBnTFNCVWFHVWdZMnhoYzNNZ2RHOGdaWGgwWlc1a0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1EyeGhjM045SUVFZ1kyeGhjM01nZEdoaGRDQmxlSFJsYm1SeklHQkNZWE5sUTJ4aGMzTmdJR0Z1WkNCcGJYQnNaVzFsYm5SeklIdEFiR2x1YXlCQmJtbHRZWFJwYjI1UWJHRjVaWEpKYm5SbGNtWmhZMlY5TGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5Qk5hWGhwYmloQ1lYTmxRMnhoYzNNZ1BTQmpiR0Z6Y3lCN2ZTa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ1FXNXBiV0YwYVc5dVVHeGhlV1Z5VFdsNGFXNGdQU0JqYkdGemN5QmxlSFJsYm1SeklFSmhjMlZEYkdGemN5QjdYSEpjYmlBZ0lDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk1nUFNCN2ZTd2dMaTR1WVhKbmN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLRzl3ZEdsdmJuTXNJQzR1TG1GeVozTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MGNtRnVjMmwwYVc5dVUzUmhkR1VnUFNCdVpYY2dWSEpoYm5OcGRHbHZibE4wWVhSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoZEdWeklEMGdkR2hwY3k1ZmMzUmhkR1Z6SUNFOVBTQjFibVJsWm1sdVpXUWdQeUIwYUdsekxsOXpkR0YwWlhNZ09pQnVaWGNnVFdGd0tDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFJsSUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3WVhWelpXUWdQU0JtWVd4elpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEhKaGJuTnBkR2x2YmxScGJXVWdQVnh5WEc0Z0lDQWdJQ0FnSUNBZ1RuVnRZbVZ5S0c5d2RHbHZibk11ZEhKaGJuTnBkR2x2YmxScGJXVXBJRDQ5SURCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCT2RXMWlaWElvYjNCMGFXOXVjeTUwY21GdWMybDBhVzl1VkdsdFpTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ09pQXdPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bFlYTnBibWRHYmlBOVhISmNiaUFnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdiM0IwYVc5dWN5NWxZWE5wYm1kR2JpQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lHOXdkR2x2Ym5NdVpXRnphVzVuUm00Z09pQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHZGxkQ0J3WVhWelpXUW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0JoZFhObFpEdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1oyVjBJSFJ5WVc1emFYUnBiMjVVYVcxbEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBjbUZ1YzJsMGFXOXVWR2x0WlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYzJWMElIUnlZVzV6YVhScGIyNVVhVzFsS0hObFkyOXVaSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnpaV052Ym1SeklEMGdUblZ0WW1WeUtITmxZMjl1WkhNcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9JU2h6WldOdmJtUnpJRDQ5SURBcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0JEWVc1dWIzUWdjMlYwSUhSeVlXNXphWFJwYjI0Z2RHbHRaU0JtYjNJZ0pIdDBhR2x6TG1OdmJuTjBjblZqZEc5eUxtNWhiV1Y5SUhSdklDUjdjMlZqYjI1a2MzMHVJRk5sWTI5dVpITWdiWFZ6ZENCaVpTQmhJRzUxYldWeWFXTWdkbUZzZFdVZ1ozSmxZWFJvWlhJZ2RHaGhiaUJ2Y2lCbGNYVmhiQ0IwYnlCNlpYSnZMbUJjY2x4dUlDQWdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBjbUZ1YzJsMGFXOXVWR2x0WlNBOUlITmxZMjl1WkhNN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdkbGRDQmxZWE5wYm1kR2JpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaV0Z6YVc1blJtNDdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lITmxkQ0JsWVhOcGJtZEdiaWhtYmlrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVmhjMmx1WjBadUlEMGdabTQ3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR2RsZENCamRYSnlaVzUwVTNSaGRHVW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMk4xY25KbGJuUlRkR0YwWlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWjJWMElHTjFjbkpsYm5SQmJtbHRZWFJwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJOMWNuSmxiblJUZEdGMFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMk4xY25KbGJuUlRkR0YwWlM1dVlXMWxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdkbGRDQnBjMVJ5WVc1emFYUnBiMjVwYm1jb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTjFjbkpsYm5SVGRHRjBaU0E5UFQwZ2RHaHBjeTVmZEhKaGJuTnBkR2x2YmxOMFlYUmxPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQmZjSEpsY0dGeVpVTjFjbkpsYm5SVGRHRjBaU2hjY2x4dUlDQWdJQ0FnSUNCdVlXMWxMRnh5WEc0Z0lDQWdJQ0FnSUhCc1lYbE5aWFJvYjJRc1hISmNiaUFnSUNBZ0lDQWdkSEpoYm5OcGRHbHZibFJwYldVc1hISmNiaUFnSUNBZ0lDQWdaV0Z6YVc1blJtNHNYSEpjYmlBZ0lDQWdJQ0FnYjI1RmNuSnZjbHh5WEc0Z0lDQWdJQ0FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTQWhQVDBnYm5Wc2JDQW1KaUFoZEdocGN5NWZjM1JoZEdWekxtaGhjeWh1WVcxbEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlNBOUlHNWxkeUJGY25KdmNpaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lFTmhibTV2ZENBa2UzQnNZWGxOWlhSb2IyUjlJR0Z1YVcxaGRHbHZiaUFrZTI1aGJXVjlMaUJPYnlCaGJtbHRZWFJwYjI0Z1pYaHBjM1J6SUhkcGRHZ2dkR2hwY3lCdVlXMWxMbUJjY2x4dUlDQWdJQ0FnSUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2YmtWeWNtOXlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVSWEp5YjNJb1pTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSaGNtZGxkRk4wWVhSbElEMGdibUZ0WlNBaFBUMGdiblZzYkNBL0lIUm9hWE11WDNOMFlYUmxjeTVuWlhRb2JtRnRaU2tnT2lCdWRXeHNPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHNWxkeUJ6ZEdGMFpTQnBjMjRuZENCaGJISmxZV1I1SUhCc1lYbHBibWRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amRYSnlaVzUwUVc1cGJXRjBhVzl1SUNFOVBTQnVZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCVGQybDBZMmdnZEc4Z2RHaGxJRzVsZHlCemRHRjBaU0JwYlcxbFpHbGhkR1ZzZVZ4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSeVlXNXphWFJwYjI1VWFXMWxJRHc5SURBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMkZ1WTJWc0lIUm9aU0JqZFhKeVpXNTBJSE4wWVhSbElHRnVaQ0J6WlhRZ2FYUnpJSGRsYVdkb2RDQjBieUF3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBVM1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXVZMkZ1WTJWc0tDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUmxMbmRsYVdkb2RDQTlJREE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFJsTG1SbFlXTjBhWFpoZEdVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUmxJRDBnZEdGeVoyVjBVM1JoZEdVN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJDYkdWdVpDQjBieUIwYUdVZ2JtVjNJSE4wWVhSbElHOTJaWElnZEdsdFpWeHlYRzRnSUNBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0IwYnlCMGNtRnVjMmwwYVc5dUlHOTFkQ0J2WmlCaGJua2djM1JoZEdWeklIZHBkR2dnYm05dUxYcGxjbThnZDJWcFoyaDBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOMWNuSmxiblJUZEdGMFpYTWdQU0JiTGk0dWRHaHBjeTVmYzNSaGRHVnpMblpoYkhWbGN5Z3BYUzVtYVd4MFpYSW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjeUE5UGlCeklDRTlQU0IwWVhKblpYUlRkR0YwWlNBbUppQW9jeTUzWldsbmFIUWdmSHdnY3k1M1pXbG5hSFJRWlc1a2FXNW5LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZYQmtZWFJsSUhSb1pTQjBjbUZ1YzJsMGFXOXVJSE4wWVhSbElIZHBkR2dnYm1WM0lHbHVjSFYwYzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBjbUZ1YzJsMGFXOXVVM1JoZEdVdVkyOXVabWxuZFhKbEtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SVGRHRjBaWE1zWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBVM1JoZEdVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5wZEdsdmJsUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFJsSUQwZ2RHRnlaMlYwVTNSaGRHVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBjbUZ1YzJsMGFXOXVVM1JoZEdVdWQyVnBaMmgwSUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1VnUFNCMGFHbHpMbDkwY21GdWMybDBhVzl1VTNSaGRHVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h3YkdGNVRXVjBhRzlrSUQwOVBTQW5jR3hoZVNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlRkR0YwWlM1allXNWpaV3dvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUmxJRDA5UFNCMGFHbHpMbDkwY21GdWMybDBhVzl1VTNSaGRHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRISmhibk5wZEdsdmJsTjBZWFJsTG5KbGMyVjBLSFJ5WVc1emFYUnBiMjVVYVcxbExDQmxZWE5wYm1kR2Jpd2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJUZEdGMFpTQTlJSFJoY21kbGRGTjBZWFJsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1J5WVc1emFYUnBiMjVUZEdGMFpTNTNaV2xuYUhRZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0IzWldsbmFIUWdabTl5SUhSb1pTQnVaWGNnWTNWeWNtVnVkQ0J6ZEdGMFpTQnpieUJwZENCb1lYTWdablZzYkNCcGJtWnNkV1Z1WTJVZ1ptOXlJSFJvWlNCd2JHRjVaWEpjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBVM1JoZEdVdWQyVnBaMmgwSUQwZ01UdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1V1ZFhCa1lYUmxTVzUwWlhKdVlXeFhaV2xuYUhRb2RHaHBjeTVmYVc1MFpYSnVZV3hYWldsbmFIUXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQndiR0Y1UVc1cGJXRjBhVzl1S0Z4eVhHNGdJQ0FnSUNBZ0lHNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ2RISmhibk5wZEdsdmJsUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ1pXRnphVzVuUm00c1hISmNiaUFnSUNBZ0lDQWdiMjVHYVc1cGMyZ3NYSEpjYmlBZ0lDQWdJQ0FnYjI1RmNuSnZjaXhjY2x4dUlDQWdJQ0FnSUNCdmJrTmhibU5sYkN4Y2NseHVJQ0FnSUNBZ0lDQnZiazVsZUhSY2NseHVJQ0FnSUNBZ0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHVnljbTl5TzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J5WldwbFkzUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjSEpsY0dGeVpVTjFjbkpsYm5SVGRHRjBaU2hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSjNCc1lYa25MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJsMGFXOXVWR2x0WlNBaFBUMGdkVzVrWldacGJtVmtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUIwY21GdWMybDBhVzl1VkdsdFpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dkR2hwY3k1ZmRISmhibk5wZEdsdmJsUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVowWnVJQ0U5UFNCMWJtUmxabWx1WldRZ1B5QmxZWE5wYm1kR2JpQTZJSFJvYVhNdVgyVmhjMmx1WjBadUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrVnljbTl5WEhKY2JpQWdJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdWeWNtOXlJRDBnWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvY21WcVpXTjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdWNtVnFaV04wS0dWeWNtOXlLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1V1Y0d4aGVTaHZia1pwYm1semFDd2diMjVGY25KdmNpd2diMjVEWVc1alpXd3NJRzl1VG1WNGRDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lIQmhkWE5sUVc1cGJXRjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBVM1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1V1Y0dGMWMyVW9LVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2NtVnpkVzFsUVc1cGJXRjBhVzl1S0Z4eVhHNGdJQ0FnSUNBZ0lHNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ2RISmhibk5wZEdsdmJsUnBiV1VzWEhKY2JpQWdJQ0FnSUNBZ1pXRnphVzVuUm00c1hISmNiaUFnSUNBZ0lDQWdiMjVHYVc1cGMyZ3NYSEpjYmlBZ0lDQWdJQ0FnYjI1RmNuSnZjaXhjY2x4dUlDQWdJQ0FnSUNCdmJrTmhibU5sYkN4Y2NseHVJQ0FnSUNBZ0lDQnZiazVsZUhSY2NseHVJQ0FnSUNBZ0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1VnUFQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJRzVoYldVZ1BTQjBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXVibUZ0WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JsY25KdmNqdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnFaV04wSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCeVpYQmhjbVZEZFhKeVpXNTBVM1JoZEdVb1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHlaWE4xYldVbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMmwwYVc5dVZHbHRaU0FoUFQwZ2RXNWtaV1pwYm1Wa1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1B5QjBjbUZ1YzJsMGFXOXVWR2x0WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2RHaHBjeTVmZEhKaGJuTnBkR2x2YmxScGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmhjMmx1WjBadUlDRTlQU0IxYm1SbFptbHVaV1FnUHlCbFlYTnBibWRHYmlBNklIUm9hWE11WDJWaGMybHVaMFp1TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtWeWNtOXlYSEpjYmlBZ0lDQWdJQ0FnSUNBcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9jbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUkdWbVpYSnlaV1F1Y21WcVpXTjBLR1Z5Y205eUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXVjbVZ6ZFcxbEtHOXVSbWx1YVhOb0xDQnZia1Z5Y205eUxDQnZia05oYm1ObGJDd2diMjVPWlhoMEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1kyRnVZMlZzUVc1cGJXRjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBVM1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1V1WTJGdVkyVnNLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lITjBiM0JCYm1sdFlYUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMk4xY25KbGJuUlRkR0YwWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTjFjbkpsYm5SVGRHRjBaUzV6ZEc5d0tDazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUhWd1pHRjBaU2hrWld4MFlWUnBiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYzNWd1pYSXVkWEJrWVhSbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCemRYQmxjaTUxY0dSaGRHVW9aR1ZzZEdGVWFXMWxLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJUZEdGMFpTNTFjR1JoZEdVb1pHVnNkR0ZVYVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR1JwYzJOaGNtUW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSE4xY0dWeUxtUnBjMk5oY21RcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhOMWNHVnlMbVJwYzJOaGNtUW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1J5WVc1emFYUnBiMjVUZEdGMFpTNWthWE5qWVhKa0tDazdYSEpjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgzUnlZVzV6YVhScGIyNVRkR0YwWlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdRVzVwYldGMGFXOXVVR3hoZVdWeVRXbDRhVzQ3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCYm1sdFlYUnBiMjVRYkdGNVpYSkpiblJsY21aaFkyVTdYSEpjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JCYldGNmIyNHVZMjl0TENCSmJtTXVJRzl5SUdsMGN5QmhabVpwYkdsaGRHVnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4eVhHNHZMeUJUVUVSWUxVeHBZMlZ1YzJVdFNXUmxiblJwWm1sbGNqb2dUVWxVTFRCY2NseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdiV0Y0TFdOc1lYTnpaWE10Y0dWeUxXWnBiR1VnS2k5Y2NseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0ZFc1MWMyVmtMWFpoY25NZ0tpOWNjbHh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dFpXMXdkSGt0Wm5WdVkzUnBiMjRnS2k5Y2NseHVMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdaMlYwZEdWeUxYSmxkSFZ5YmlBcUwxeHlYRzVjY2x4dWFXMXdiM0owSUZWMGFXeHpJR1p5YjIwZ0p5NHVMeTR1TDFWMGFXeHpKenRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJEYkdGemN5Qm1ZV04wYjNKNUlHbHVkR1Z5Wm1GalpTQm1iM0lnYldGdWFYQjFiR0YwYVc1bklHRWdZMjlzYkdWamRHbHZiaUJ2WmlCN1FHeHBibXNnUVdKemRISmhZM1JUZEdGMFpYMHVYSEpjYmlBcVhISmNiaUFxSUVCcGJuUmxjbVpoWTJWY2NseHVJQ292WEhKY2JtTnNZWE56SUZOMFlYUmxRMjl1ZEdGcGJtVnlTVzUwWlhKbVlXTmxJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdkR2hsSUhOMFlYUmxJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdibUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJSE4wWVhSbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwRmljM1J5WVdOMFUzUmhkR1Y5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwVTNSaGRHVW9ibUZ0WlNrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QmhiaUJoY25KaGVTQnZaaUIwYUdVZ2JtRnRaWE1nYjJZZ1lXeHNJSE4wWVhSbGN5QnBiaUIwYUdVZ1kyOXVkR0ZwYm1WeUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIUjVjR1VnZTBGeWNtRjVManh6ZEhKcGJtYytmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkRk4wWVhSbFRtRnRaWE1vS1NCN2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJCWkdRZ1lTQnVaWGNnYzNSaGRHVWdkRzhnWW1VZ1kyOXVkSEp2Ykd4bFpDQmllU0IwYUdVZ1kyOXVkR0ZwYm1WeUxpQlRkR0YwWlhNZ1lYSmxJSE4wYjNKbFpDQnJaWGxsWkZ4eVhHNGdJQ0FxSUdKNUlIUm9aV2x5SUc1aGJXVWdjSEp2Y0dWeWRIa3NJSGRvYVdOb0lHMTFjM1FnWW1VZ2RXNXBjWFZsTGlCSlppQnBkQ0JwYzI0bmRDd2dZU0J1ZFcxaVpYSWdkMmxzYkZ4eVhHNGdJQ0FxSUdKbElHRmtaR1ZrSUc5eUlHbHVZM0psYldWdWRHVmtJSFZ1ZEdsc0lHRWdkVzVwY1hWbElHdGxlU0JwY3lCblpXNWxjbUYwWldRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGaWMzUnlZV04wVTNSaGRHVjlJSE4wWVhSbElDMGdVM1JoZEdVZ2RHOGdZV1JrSUhSdklIUm9aU0JqYjI1MFlXbHVaWEl1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mU0F0SUZWdWFYRjFaU0J1WVcxbElHOW1JSFJvWlNCemRHRjBaUzVjY2x4dUlDQWdLaTljY2x4dUlDQmhaR1JUZEdGMFpTaHpkR0YwWlNrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WdGIzWmxjeUJoSUhOMFlYUmxJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1VnWm5KdmJTQjBhR1VnWTI5dWRHRnBibVZ5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0J6ZEdGMFpTQjBieUJ5WlcxdmRtVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdMU0JYYUdWMGFHVnlJRzl5SUc1dmRDQmhJSE4wWVhSbElIZGhjeUJ5WlcxdmRtVmtMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lISmxiVzkyWlZOMFlYUmxLRzVoYldVcElIdDlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGJtRnRaWE1nWVNCemRHRjBaU0IzYVhSb0lIUm9aU0JuYVhabGJpQnVZVzFsSUdsdUlIUm9aU0JqYjI1MFlXbHVaWEl1SUU1aGJXVWdiWFZ6ZENCaVpTQjFibWx4ZFdWY2NseHVJQ0FnS2lCMGJ5QjBhR1VnWTI5dWRHRnBibVZ5TENCcFppQnBkQ0JwYzI0bmRDQjBhR1VnYm1GdFpTQjNhV3hzSUdKbElHbHVZM0psYldWdWRHVmtJSFZ1ZEdsc0lHbDBJR2x6SUhWdWFYRjFaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmpkWEp5Wlc1MFRtRnRaU0F0SUU1aGJXVWdiMllnZEdobElITjBZWFJsSUhSdklISmxibUZ0WlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1WM1RtRnRaU0F0SUU1aGJXVWdkRzhnZFhCa1lYUmxJSFJvWlNCemRHRjBaU0IzYVhSb0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UzTjBjbWx1WjMwZ0xTQlZjR1JoZEdWa0lHNWhiV1VnWm05eUlIUm9aU0J6ZEdGMFpTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCeVpXNWhiV1ZUZEdGMFpTaGpkWEp5Wlc1MFRtRnRaU3dnYm1WM1RtRnRaU2tnZTMxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSR2x6WTJGeVpITWdZV3hzSUhOMFlYUmxjeTVjY2x4dUlDQWdLaTljY2x4dUlDQmthWE5qWVhKa1UzUmhkR1Z6S0NrZ2UzMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTNKbFlYUmxjeUJoSUdOc1lYTnpJSFJvWVhRZ2FXMXdiR1Z0Wlc1MGN5QjdRR3hwYm1zZ1UzUmhkR1ZEYjI1MFlXbHVaWEpKYm5SbGNtWmhZMlY5SUdGdVpDQmxlSFJsYm1SelhISmNiaUFnSUNvZ1lTQnpjR1ZqYVdacFpXUWdZbUZ6WlNCamJHRnpjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRMnhoYzNOOUlGdENZWE5sUTJ4aGMzTWdQU0JqYkdGemMzdDlYU0F0SUZSb1pTQmpiR0Z6Y3lCMGJ5QmxlSFJsYm1RdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1SUh0RGJHRnpjMzBnUVNCamJHRnpjeUIwYUdGMElHVjRkR1Z1WkhNZ1lFSmhjMlZEYkdGemMyQWdZVzVrSUdsdGNHeGxiV1Z1ZEhNZ2UwQnNhVzVySUZOMFlYUmxRMjl1ZEdGcGJtVnlTVzUwWlhKbVlXTmxmUzVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1RXbDRhVzRvUW1GelpVTnNZWE56SUQwZ1kyeGhjM01nZTMwcElIdGNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nVkdocGN5QnRhWGhwYmlCaFpHUnpJR1oxYm1OMGFXOXVZV3hwZEhrZ1ptOXlJRzFoYm1sd2RXeGhkR2x1WnlCMWJtbHhkV1ZzZVMxdVlXMWxaQ0JoYm1sdFlYUnBiMjRnYzNSaGRHVnpJR2x1WEhKY2JpQWdJQ0FnS2lCaElHMWhjQzVjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWTI5dWMzUWdVM1JoZEdWRGIyNTBZV2x1WlhKTmFYaHBiaUE5SUdOc1lYTnpJR1Y0ZEdWdVpITWdRbUZ6WlVOc1lYTnpJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlMQ0F1TGk1aGNtZHpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2MzVndaWElvYjNCMGFXOXVjeXdnTGk0dVlYSm5jeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWFJsY3lBOUlIUm9hWE11WDNOMFlYUmxjeUFoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdkR2hwY3k1ZmMzUmhkR1Z6SURvZ2JtVjNJRTFoY0NncE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCblpYUlRkR0YwWlNodVlXMWxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM04wWVhSbGN5NW5aWFFvYm1GdFpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHZGxkRk4wWVhSbFRtRnRaWE1vS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGc3VMaTUwYUdsekxsOXpkR0YwWlhNdWEyVjVjeWdwWFR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWVdSa1UzUmhkR1VvYzNSaGRHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUhOMFlYUmxJR2x6SUc1dmRDQmhiSEpsWVdSNUlHbHVJSFJvYVhNZ1kyOXVkR0ZwYm1WeVhISmNiaUFnSUNBZ0lDQWdhV1lnS0ZzdUxpNTBhR2x6TGw5emRHRjBaWE11ZG1Gc2RXVnpLQ2xkTG1sdVkyeDFaR1Z6S0hOMFlYUmxLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JnUTJGdWJtOTBJR0ZrWkNCaGJtbHRZWFJwYjI0Z2RHOGdjM1JoZEdVZ0pIdDBhR2x6TG01aGJXVjlMaUJCYm1sdFlYUnBiMjRnZDJGeklHRnNjbVZoWkhrZ1lXUmtaV1F1WUZ4eVhHNGdJQ0FnSUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHRjBaUzV1WVcxbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnVFdGclpTQnpkWEpsSUhSb1pTQnpkR0YwWlNCdVlXMWxJR2x6SUhWdWFYRjFaVnh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFZ1YVhGMVpVNWhiV1VnUFNCVmRHbHNjeTVuWlhSVmJtbHhkV1ZPWVcxbEtITjBZWFJsTG01aGJXVXNJRnRjY2x4dUlDQWdJQ0FnSUNBZ0lDNHVMblJvYVhNdVgzTjBZWFJsY3k1clpYbHpLQ2tzWEhKY2JpQWdJQ0FnSUNBZ1hTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNXVZVzFsSUNFOVBTQjFibWx4ZFdWT1lXMWxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0JCYm1sdFlYUnBiMjRnYm1GdFpTQWtlM04wWVhSbExtNWhiV1Y5SUdseklHNXZkQ0IxYm1seGRXVWdabTl5SUhOMFlYUmxJQ1I3ZEdocGN5NXVZVzFsZlM0Z1RtVjNJR0Z1YVcxaGRHbHZiaUIzYVd4c0lHSmxJR0ZrWkdWa0lIZHBkR2dnYm1GdFpTQWtlM1Z1YVhGMVpVNWhiV1Y5TG1CY2NseHVJQ0FnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlM1dVlXMWxJRDBnZFc1cGNYVmxUbUZ0WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYUmxjeTV6WlhRb2MzUmhkR1V1Ym1GdFpTd2djM1JoZEdVcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzNSaGRHVXVibUZ0WlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnY21WdGIzWmxVM1JoZEdVb2JtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRU5vWldOcklHbG1JSFJvWlNCemRHRjBaU0JwY3lCcGJpQjBhR2x6SUdOdmJuUmhhVzVsY2x4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZjM1JoZEdWeklIeDhJQ0YwYUdsekxsOXpkR0YwWlhNdWFHRnpLRzVoYldVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHQkVhV1FnYm05MElISmxiVzkyWlNCaGJtbHRZWFJwYjI0Z0pIdHVZVzFsZlNCbWNtOXRJSE4wWVhSbElDUjdkR2hwY3k1dVlXMWxmUzRnVG04Z1lXNXBiV0YwYVc5dUlHVjRhWE4wY3lCM2FYUm9JSFJvYVhNZ2JtRnRaUzVnWEhKY2JpQWdJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoZEdWekxtZGxkQ2h1WVcxbEtTNWthWE5qWVhKa0tDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoZEdWekxtUmxiR1YwWlNodVlXMWxLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2NtVnVZVzFsVTNSaGRHVW9ZM1Z5Y21WdWRFNWhiV1VzSUc1bGQwNWhiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElITjBZWFJsSUdseklHbHVJSFJvYVhNZ1kyOXVkR0ZwYm1WeVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl6ZEdGMFpYTWdmSHdnSVhSb2FYTXVYM04wWVhSbGN5NW9ZWE1vWTNWeWNtVnVkRTVoYldVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0JEWVc1dWIzUWdjbVZ1WVcxbElHRnVhVzFoZEdsdmJpQWtlMk4xY25KbGJuUk9ZVzFsZlNCcGJpQWtlM1JvYVhNdWJtRnRaWDB1SUU1dklHRnVhVzFoZEdsdmJpQmxlR2x6ZEhNZ2QybDBhQ0IwYUdseklHNWhiV1V1WUZ4eVhHNGdJQ0FnSUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE4wWVhSbElEMGdkR2hwY3k1ZmMzUmhkR1Z6TG1kbGRDaGpkWEp5Wlc1MFRtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVWNGFYUWdhV1lnZEdobElHNWhiV1Z6SUdGeVpTQjBhR1VnYzJGdFpWeHlYRzRnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVG1GdFpTQTlQVDBnYm1WM1RtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTjFjbkpsYm5ST1lXMWxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0J1WVcxbElHbHpJSFZ1YVhGMVpWeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnVhWEYxWlU1aGJXVWdQU0JWZEdsc2N5NW5aWFJWYm1seGRXVk9ZVzFsS0Z4eVhHNGdJQ0FnSUNBZ0lDQWdibVYzVG1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUZzdUxpNTBhR2x6TGw5emRHRjBaWE11YTJWNWN5Z3BYUzVtYVd4MFpYSW9jeUE5UGlCekxtNWhiV1VnSVQwOUlHTjFjbkpsYm5ST1lXMWxLVnh5WEc0Z0lDQWdJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHVaWGRPWVcxbElDRTlQU0IxYm1seGRXVk9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdCQmJtbHRZWFJwYjI0Z2JtRnRaU0FrZTI1bGQwNWhiV1Y5SUdseklHNXZkQ0IxYm1seGRXVWdhVzRnYzNSaGRHVWdKSHQwYUdsekxtNWhiV1Y5TGlCQmJtbHRZWFJwYjI0Z2QybHNiQ0JpWlNCeVpXNWhiV1ZrSUhSdklDUjdkVzVwY1hWbFRtRnRaWDB1WUZ4eVhHNGdJQ0FnSUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHNWxkMDVoYldVZ1BTQjFibWx4ZFdWT1lXMWxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYzNSaGRHVXVibUZ0WlNBOUlHNWxkMDVoYldVN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1Z6TG1SbGJHVjBaU2hqZFhKeVpXNTBUbUZ0WlNrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1Z6TG5ObGRDaHpkR0YwWlM1dVlXMWxMQ0J6ZEdGMFpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHRjBaUzV1WVcxbE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCa2FYTmpZWEprVTNSaGRHVnpLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYUmxjeTVtYjNKRllXTm9LSE4wWVhSbElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lITjBZWFJsTG1ScGMyTmhjbVFvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WDNOMFlYUmxjenRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUhKbGRIVnliaUJUZEdGMFpVTnZiblJoYVc1bGNrMXBlR2x1TzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkR0YwWlVOdmJuUmhhVzVsY2tsdWRHVnlabUZqWlR0Y2NseHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFRnRZWHB2Ymk1amIyMHNJRWx1WXk0Z2IzSWdhWFJ6SUdGbVptbHNhV0YwWlhNdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYSEpjYmk4dklGTlFSRmd0VEdsalpXNXpaUzFKWkdWdWRHbG1hV1Z5T2lCTlNWUXRNRnh5WEc1cGJYQnZjblFnUVdKemRISmhZM1JUZEdGMFpTQm1jbTl0SUNjdUwwRmljM1J5WVdOMFUzUmhkR1VuTzF4eVhHNXBiWEJ2Y25RZ1FXNXBiV0YwYVc5dVVHeGhlV1Z5U1c1MFpYSm1ZV05sSUdaeWIyMGdKeTR1TDBGdWFXMWhkR2x2YmxCc1lYbGxja2x1ZEdWeVptRmpaU2M3WEhKY2JtbHRjRzl5ZENCVGRHRjBaVU52Ym5SaGFXNWxja2x1ZEdWeVptRmpaU0JtY205dElDY3VMMU4wWVhSbFEyOXVkR0ZwYm1WeVNXNTBaWEptWVdObEp6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRiR0Z6Y3lCbWIzSWdjR3hoZVdsdVp5QmhiaUJ2Y21SbGNtVmtJR0Z5Y21GNUlHOW1JR0Z1YVcxaGRHbHZiaUJ6ZEdGMFpYTWdhVzRnYzJWeGRXVnVZMlV1WEhKY2JpQXFYSEpjYmlBcUlFQmxlSFJsYm1SeklFRmljM1J5WVdOMFUzUmhkR1ZjY2x4dUlDb2dRR2x0Y0d4bGJXVnVkSE1nUUVGdWFXMWhkR2x2YmxCc1lYbGxja2x1ZEdWeVptRmpaVnh5WEc0Z0tpOWNjbHh1WTJ4aGMzTWdVWFZsZFdWVGRHRjBaU0JsZUhSbGJtUnpJRUZ1YVcxaGRHbHZibEJzWVhsbGNrbHVkR1Z5Wm1GalpTNU5hWGhwYmloY2NseHVJQ0JUZEdGMFpVTnZiblJoYVc1bGNrbHVkR1Z5Wm1GalpTNU5hWGhwYmloQlluTjBjbUZqZEZOMFlYUmxLVnh5WEc0cElIdGNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFZMjl1YzNSeWRXTjBiM0pjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJiM0IwYVc5dWN6MTdmVjBnTFNCUGNIUnBiMjV6SUdadmNpQjBhR1VnYzNSaGRHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJiM0IwYVc5dWN5NWhkWFJ2UVdSMllXNWpaVDEwY25WbFhTQXRJRmRvWlhSb1pYSWdkRzhnWVhWMGJXRjBhV05oYkd4NUlHRmtkbUZ1WTJWY2NseHVJQ0FnS2lCMGJ5QjBhR1VnYm1WNGRDQnpkR0YwWlNCcGJpQjBhR1VnY1hWbGRXVWdZWE1nWldGamFDQnpkR0YwWlNCamIyMXdiR1YwWlhNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlUzQ4UVdKemRISmhZM1JUZEdGMFpUNTlJRnR4ZFdWMVpWTjBZWFJsY3oxYlhWMGdMU0JCY25KaGVTQnZaaUJ6ZEdGMFpYTWdkRzhnWW1VZ2NHeGhlV1ZrWEhKY2JpQWdJQ29nYVc0Z2IzSmtaWEl1WEhKY2JpQWdJQ292WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjeUE5SUh0OUxDQnhkV1YxWlZOMFlYUmxjeUE5SUZ0ZEtTQjdYSEpjYmlBZ0lDQnpkWEJsY2lodmNIUnBiMjV6S1R0Y2NseHVYSEpjYmlBZ0lDQnhkV1YxWlZOMFlYUmxjeTVtYjNKRllXTm9LSE4wWVhSbElEMCtJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWhaR1JUZEdGMFpTaHpkR0YwWlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXhkV1YxWlNBOUlIUm9hWE11WDNOMFlYUmxjeTVyWlhsektDazdYSEpjYmlBZ0lDQjBhR2x6TGw5a2IyNWxJRDBnZEhKMVpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ2QyaGxkR2hsY2lCMGFHVWdZVzVwYldGMGFXOXVJSEYxWlhWbElHaGhjeUJ5WldGamFHVmtJSFJvWlNCbGJtUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJR1J2Ym1Vb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWkc5dVpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ2RHaGxJR2x1ZEdWeWJtRnNJSGRsYVdkb2RDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaV0ZrYjI1c2VWeHlYRzRnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEo5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUdsdWRHVnlibUZzVjJWcFoyaDBLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTjFjbkpsYm5SVGRHRjBaVnh5WEc0Z0lDQWdJQ0EvSUhSb2FYTXVYMk4xY25KbGJuUlRkR0YwWlM1cGJuUmxjbTVoYkZkbGFXZG9kQ0FxSUhSb2FYTXVYMmx1ZEdWeWJtRnNWMlZwWjJoMFhISmNiaUFnSUNBZ0lEb2dNRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGMzUmhjblFnZEdobElIRjFaWFZsSUdsMFpYSmhkRzl5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLaTljY2x4dUlDQmZjbVZ6WlhRb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5eGRXVjFaU0E5SUhSb2FYTXVYM04wWVhSbGN5NXJaWGx6S0NrN1hISmNiaUFnSUNCamIyNXpkQ0I3ZG1Gc2RXVXNJR1J2Ym1WOUlEMGdkR2hwY3k1ZmNYVmxkV1V1Ym1WNGRDZ3BPMXh5WEc0Z0lDQWdkR2hwY3k1ZlpHOXVaU0E5SUdSdmJtVTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbElIeDhJRzUxYkd3N1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQk5kV3gwYVhCc2FXVnpJSFJvWlNCMWMyVnlJSGRsYVdkb2RDQmllU0JoSUdaaFkzUnZjaUIwYnlCa1pYUmxjbTFwYm1VZ2RHaGxJR2x1ZEdWeWJtRnNJSGRsYVdkb2RDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCbVlXTjBiM0lnTFNBd0xURWdiWFZzZEdsd2JHbGxjaUIwYnlCaGNIQnNlU0IwYnlCMGFHVWdkWE5sY2lCM1pXbG5hSFF1WEhKY2JpQWdJQ292WEhKY2JpQWdkWEJrWVhSbFNXNTBaWEp1WVd4WFpXbG5hSFFvWm1GamRHOXlLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpNTFjR1JoZEdWSmJuUmxjbTVoYkZkbGFXZG9kQ2htWVdOMGIzSXBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFJsTG5Wd1pHRjBaVWx1ZEdWeWJtRnNWMlZwWjJoMEtIUm9hWE11WDJsdWRHVnlibUZzVjJWcFoyaDBLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZOMFlYSjBJSFJvWlNCdVpYaDBJR0Z1YVcxaGRHbHZiaUJwYmlCMGFHVWdjWFZsZFdVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1UFgwZ2IyNU9aWGgwSUMwZ1JuVnVZM1JwYjI0Z2RHOGdaWGhsWTNWMFpTQmxZV05vSUhScGJXVWdZVzRnWVc1cGJXRjBhVzl1SUdOdmJYQnNaWFJsYzF4eVhHNGdJQ0FxSUdGdVpDQjBhR1VnY1hWbGRXVWdiVzkyWlhNZ2RHOGdkR2hsSUc1bGVIUWdZVzVwYldGMGFXOXVMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdXM2R5WVhBOVptRnNjMlZkSUMwZ1YyaGxkR2hsY2lCdmNpQnViM1FnZEc4Z2MzUmhjblFnZEdobElIRjFaWFZsSUdaeWIyMGdkR2hsWEhKY2JpQWdJQ29nWW1WbmFXNXVhVzVuSUdGbllXbHVJR2xtSUhSb1pTQmxibVFnYUdGeklHSmxaVzRnY21WaFkyaGxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRFWldabGNuSmxaSDFjY2x4dUlDQWdLaTljY2x4dUlDQnVaWGgwS0c5dVRtVjRkQ3dnZDNKaGNDQTlJR1poYkhObEtTQjdYSEpjYmlBZ0lDQXZMeUJOYjNabElIUm9aU0J4ZFdWMVpTQm1iM0ozWVhKa1hISmNiaUFnSUNCamIyNXpkQ0I3ZG1Gc2RXVTZJRzVoYldVc0lHUnZibVY5SUQwZ2RHaHBjeTVmY1hWbGRXVXVibVY0ZENncE8xeHlYRzRnSUNBZ2RHaHBjeTVmWkc5dVpTQTlJR1J2Ym1VN1hISmNiaUFnSUNCMGFHbHpMbDl3WVhWelpXUWdQU0JtWVd4elpUdGNjbHh1WEhKY2JpQWdJQ0F2THlCVWFHVWdjWFZsZFdVZ2FHRnpJSEpsWVdOb1pXUWdkR2hsSUdWdVpGeHlYRzRnSUNBZ2FXWWdLR1J2Ym1VcElIdGNjbHh1SUNBZ0lDQWdMeThnVTNSaGNuUWdkR2hsSUhGMVpYVmxJRzkyWlhKY2NseHVJQ0FnSUNBZ2FXWWdLSGR5WVhBcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2JHRjVLRnh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0d4aGVVTmhiR3hpWVdOcmN5NXZia1pwYm1semFDeGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0JzWVhsRFlXeHNZbUZqYTNNdWIyNUZjbkp2Y2l4Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzQnNZWGxEWVd4c1ltRmphM011YjI1RFlXNWpaV3dzWEhKY2JpQWdJQ0FnSUNBZ0lDQnZiazVsZUhSY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUM4dklGTjBiM0FnZEdobElIRjFaWFZsWEhKY2JpQWdJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVnpMbVpwYm1semFDNXlaWE52YkhabEtDazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzQnliMjFwYzJWekxtWnBibWx6YUR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUZOcFoyNWhiQ0IwYUdVZ2JtVjRkQ0JoYm1sdFlYUnBiMjRnYVhNZ2MzUmhjblJwYm1kY2NseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IyNU9aWGgwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUdOdmJuTjBJR3hoYzNST1lXMWxJRDBnV3k0dUxuUm9hWE11WDNOMFlYUmxjeTVyWlhsektDbGRXM1JvYVhNdVgzTjBZWFJsY3k1emFYcGxJQzBnTVYwN1hISmNiaUFnSUNBZ0lHTnZibk4wSUdselVYVmxkV1ZGYm1RZ1BTQnVZVzFsSUQwOVBTQnNZWE4wVG1GdFpUdGNjbHh1SUNBZ0lDQWdiMjVPWlhoMEtIdGNjbHh1SUNBZ0lDQWdJQ0J1WVcxbExGeHlYRzRnSUNBZ0lDQWdJR05oYmtGa2RtRnVZMlU2SUhSb2FYTXVaMlYwVTNSaGRHVW9ibUZ0WlNrdWJHOXZjRU52ZFc1MElDRTlQU0JKYm1acGJtbDBlU0FtSmlBaGFYTlJkV1YxWlVWdVpDeGNjbHh1SUNBZ0lDQWdJQ0JwYzFGMVpYVmxSVzVrTEZ4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCVGRHRnlkQ0IwYUdVZ2JtVjRkQ0JoYm1sdFlYUnBiMjVjY2x4dUlDQWdJSFJvYVhNdWNHeGhlVUZ1YVcxaGRHbHZiaWhjY2x4dUlDQWdJQ0FnYm1GdFpTeGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmRISmhibk5wZEdsdmJsUnBiV1VzWEhKY2JpQWdJQ0FnSUhSb2FYTXVYMlZoYzJsdVowWnVMRnh5WEc0Z0lDQWdJQ0FvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5d1lYVnpaV1FnSmlZZ0lYUm9hWE11YVhOVWNtRnVjMmwwYVc5dWFXNW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG01bGVIUW9iMjVPWlhoMEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lIUm9hWE11WDNCc1lYbERZV3hzWW1GamEzTXViMjVGY25KdmNseHlYRzRnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNISnZiV2x6WlhNdVptbHVhWE5vTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0d4aGVTaHZia1pwYm1semFDd2diMjVGY25KdmNpd2diMjVEWVc1alpXd3NJRzl1VG1WNGRDa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2JtRnRaU0E5SUhSb2FYTXVYM0psYzJWMEtDazdYSEpjYmlBZ0lDQnpkWEJsY2k1d2JHRjVLRzl1Um1sdWFYTm9MQ0J2YmtWeWNtOXlMQ0J2YmtOaGJtTmxiQ2s3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyUnZibVVwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmY0hKdmJXbHpaWE11Wm1sdWFYTm9MbkpsYzI5c2RtVW9LVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQzh2SUZOcFoyNWhiQ0IwYUdVZ2JtVjRkQ0JoYm1sdFlYUnBiMjRnYVhNZ2MzUmhjblJwYm1kY2NseHVJQ0FnSUNBZ2FXWWdLRzVoYldVZ0lUMDlJSFJvYVhNdVkzVnljbVZ1ZEVGdWFXMWhkR2x2YmlBbUppQjBlWEJsYjJZZ2IyNU9aWGgwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGemRFNWhiV1VnUFNCYkxpNHVkR2hwY3k1ZmMzUmhkR1Z6TG10bGVYTW9LVjFiZEdocGN5NWZjM1JoZEdWekxuTnBlbVVnTFNBeFhUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBjMUYxWlhWbFJXNWtJRDBnYm1GdFpTQTlQVDBnYkdGemRFNWhiV1U3WEhKY2JpQWdJQ0FnSUNBZ2IyNU9aWGgwS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJRzVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0JqWVc1QlpIWmhibU5sT2lCdVlXMWxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdkR2hwY3k1blpYUlRkR0YwWlNodVlXMWxLUzVzYjI5d1EyOTFiblFnSVQwOUlFbHVabWx1YVhSNUlDWW1JQ0ZwYzFGMVpYVmxSVzVrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUdselVYVmxkV1ZGYm1RNklDRnVZVzFsSUh4OElHbHpVWFZsZFdWRmJtUXNYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUM4dklGTjBZWEowSUhSb1pTQnVaWGgwSUdGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnSUNCMGFHbHpMbkJzWVhsQmJtbHRZWFJwYjI0b1hISmNiaUFnSUNBZ0lDQWdibUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVWdQeUIwYUdsekxsOTBjbUZ1YzJsMGFXOXVWR2x0WlNBNklEQXNYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaV0Z6YVc1blJtNHNYSEpjYmlBZ0lDQWdJQ0FnS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXdZWFZ6WldRZ0ppWWdJWFJvYVhNdWFYTlVjbUZ1YzJsMGFXOXVhVzVuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVibVY0ZENodmJrNWxlSFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdiMjVGY25KdmNseHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbTl0YVhObGN5NW1hVzVwYzJnN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCd1lYVnpaU2dwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSEJoZFhObFpDQTlJSE4xY0dWeUxuQmhkWE5sS0NrN1hISmNiaUFnSUNCMGFHbHpMbkJoZFhObFFXNXBiV0YwYVc5dUtDazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSEJoZFhObFpEdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lISmxjM1Z0WlNodmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNURZVzVqWld3c0lHOXVUbVY0ZENrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyUnZibVVwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR3hoZVNodmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNURZVzVqWld3c0lHOXVUbVY0ZENrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCemRYQmxjaTV5WlhOMWJXVW9iMjVHYVc1cGMyZ3NJRzl1UlhKeWIzSXNJRzl1UTJGdVkyVnNLVHRjY2x4dVhISmNiaUFnSUNBZ0lIUm9hWE11Y21WemRXMWxRVzVwYldGMGFXOXVLRnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlRkR0YwWlM1dVlXMWxMRnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1J5WVc1emFYUnBiMjVVYVcxbExGeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVmhjMmx1WjBadUxGeHlYRzRnSUNBZ0lDQWdJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNHRjFjMlZrSUNZbUlDRjBhR2x6TG1selZISmhibk5wZEdsdmJtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNWxlSFFvYjI1T1pYaDBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lHOXVSWEp5YjNKY2NseHVJQ0FnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdjbTl0YVhObGN5NW1hVzVwYzJnN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCallXNWpaV3dvS1NCN1hISmNiaUFnSUNCamIyNXpkQ0JqWVc1alpXeGxaQ0E5SUhOMWNHVnlMbU5oYm1ObGJDZ3BPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFJsTG1OaGJtTmxiQ2dwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCallXNWpaV3hsWkR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOMGIzQW9LU0I3WEhKY2JpQWdJQ0JqYjI1emRDQnpkRzl3Y0dWa0lEMGdjM1Z3WlhJdWMzUnZjQ2dwTzF4eVhHNGdJQ0FnZEdocGN5NXpkRzl3UVc1cGJXRjBhVzl1S0NrN1hISmNiaUFnSUNCMGFHbHpMbDlrYjI1bElEMGdkSEoxWlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2MzUnZjSEJsWkR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdScGMyTmhjbVFvS1NCN1hISmNiaUFnSUNCemRYQmxjaTVrYVhOallYSmtLQ2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVrYVhOallYSmtVM1JoZEdWektDazdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlJkV1YxWlZOMFlYUmxPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNibWx0Y0c5eWRDQkVaV1psY25KbFpDQm1jbTl0SUNkamIzSmxMMFJsWm1WeWNtVmtKenRjY2x4dWFXMXdiM0owSUUxaGRHaFZkR2xzY3lCbWNtOXRJQ2RqYjNKbEwwMWhkR2hWZEdsc2N5YzdYSEpjYm1sdGNHOXlkQ0JCWW5OMGNtRmpkRk4wWVhSbElHWnliMjBnSnk0dlFXSnpkSEpoWTNSVGRHRjBaU2M3WEhKY2JtbHRjRzl5ZENCVGRHRjBaVU52Ym5SaGFXNWxja2x1ZEdWeVptRmpaU0JtY205dElDY3VMMU4wWVhSbFEyOXVkR0ZwYm1WeVNXNTBaWEptWVdObEp6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkNZWE5sSUdOc1lYTnpJR1p2Y2lCaElITjBZWFJsSUhSb1lYUWdZbXhsYm1SeklHRWdZMjlzYkdWamRHbHZiaUJ2WmlCN1FHeHBibXNnUVdKemRISmhZM1JUZEdGMFpYMHVYSEpjYmlBcVhISmNiaUFxSUVCaFluTjBjbUZqZEZ4eVhHNGdLaUJBYVcxd2JHVnRaVzUwY3lCVGRHRjBaVU52Ym5SaGFXNWxja2x1ZEdWeVptRmpaVnh5WEc0Z0tpOWNjbHh1WTJ4aGMzTWdRV0p6ZEhKaFkzUkNiR1Z1WkZOMFlYUmxJR1Y0ZEdWdVpITWdVM1JoZEdWRGIyNTBZV2x1WlhKSmJuUmxjbVpoWTJVdVRXbDRhVzRvUVdKemRISmhZM1JUZEdGMFpTa2dlMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTWdQU0I3ZlN3Z1lteGxibVJUZEdGMFpYTWdQU0JiWFN3Z0xpNHVZWEpuY3lrZ2UxeHlYRzRnSUNBZ2MzVndaWElvYjNCMGFXOXVjeXdnTGk0dVlYSm5jeWs3WEhKY2JpQWdJQ0JpYkdWdVpGTjBZWFJsY3k1bWIzSkZZV05vS0hOMFlYUmxJRDArSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVoWkdSVGRHRjBaU2h6ZEdGMFpTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkR2hsSUhOMWJTQnZaaUJwYm5SbGNtNWhiQ0IzWldsbmFIUnpJRzltSUhSb1pTQnpkV0l0YzNSaGRHVnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsWVdSdmJteDVYSEpjYmlBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2FXNTBaWEp1WVd4WFpXbG5hSFFvS1NCN1hISmNiaUFnSUNCc1pYUWdZbXhsYm1SWFpXbG5hSFJ6SUQwZ01EdGNjbHh1SUNBZ0lIUm9hWE11WDNOMFlYUmxjeTVtYjNKRllXTm9LSE4wWVhSbElEMCtJSHRjY2x4dUlDQWdJQ0FnWW14bGJtUlhaV2xuYUhSeklDczlJSE4wWVhSbExtbHVkR1Z5Ym1Gc1YyVnBaMmgwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnSUNCeVpYUjFjbTRnWW14bGJtUlhaV2xuYUhSek8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnZDJWcFoyaDBJRzltSUdFZ2MzUmhkR1VnWTI5dWRISnZiR3hsWkNCaWVTQjBhR1VnWTI5dWRHRnBibVZ5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0J6ZEdGMFpTQjBieUJ5WlhSMWNtNGdkR2hsSUhkbGFXZG9kQ0JtY205dExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyNTFiV0psY24wZ0xTQlhaV2xuYUhRZ2IyWWdkR2hsSUhOMFlYUmxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkRUpzWlc1a1YyVnBaMmgwS0c1aGJXVXBJSHRjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCMGFHVWdibUZ0WlNCcGN5QjJZV3hwWkZ4eVhHNGdJQ0FnWTI5dWMzUWdjM1JoZEdVZ1BTQjBhR2x6TG1kbGRGTjBZWFJsS0c1aGJXVXBPMXh5WEc0Z0lDQWdhV1lnS0hOMFlYUmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQWdJR0JEWVc1dWIzUWdaMlYwSUhkbGFXZG9kQ0J2WmlCemRHRjBaU0FrZTI1aGJXVjlJR1p5YjIwZ1FteGxibVJUZEdGMFpTQWtlM1JvYVhNdWJtRnRaWDB1SUU1dklITjBZWFJsSUdWNGFYTjBjeUIzYVhSb0lIUm9hWE1nYm1GdFpTNWdYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhOMFlYUmxMbmRsYVdkb2REdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk5sZEhNZ2RHaGxJSGRsYVdkb2RDQnZaaUJoSUhOMFlYUmxJR052Ym5SeWIyeHNaV1FnWW5rZ2RHaGxJR052Ym5SaGFXNWxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdjM1JoZEdVZ2RHOGdjMlYwSUhSb1pTQjNaV2xuYUhRZ2IyWXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIZGxhV2RvZENBdElGZGxhV2RvZENCMllXeDFaU0IwYnlCelpYUWdiMjRnZEdobElITjBZWFJsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBSbFptVnljbVZrZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE5sZEVKc1pXNWtWMlZwWjJoMEtHNWhiV1VzSUhkbGFXZG9kQ3dnYzJWamIyNWtjeUE5SURBc0lHVmhjMmx1WjBadUtTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHNWhiV1VnYVhNZ2RtRnNhV1JjY2x4dUlDQWdJR052Ym5OMElITjBZWFJsSUQwZ2RHaHBjeTVuWlhSVGRHRjBaU2h1WVcxbEtUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2MzUmhkR1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVOaGJtNXZkQ0J6WlhRZ2QyVnBaMmgwSUc5bUlITjBZWFJsSUNSN2JtRnRaWDBnWm5KdmJTQkNiR1Z1WkZOMFlYUmxJQ1I3ZEdocGN5NXVZVzFsZlM0Z1RtOGdjM1JoZEdVZ1pYaHBjM1J6SUhkcGRHZ2dkR2hwY3lCdVlXMWxMbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjNaV2xuYUhRZ1BTQk5ZWFJvVlhScGJITXVZMnhoYlhBb2QyVnBaMmgwS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJ6ZEdGMFpTNXpaWFJYWldsbmFIUW9kMlZwWjJoMExDQnpaV052Ym1SekxDQmxZWE5wYm1kR2JpazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJOZFd4MGFYQnNhV1Z6SUhSb1pTQjNaV2xuYUhRZ2IyWWdaV0ZqYUNCemRXSXRjM1JoZEdVZ1lua2dZU0JtWVdOMGIzSWdkRzhnWkdWMFpYSnRhVzVsSUhSb1pTQnBiblJsY201aGJDQjNaV2xuYUhRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWm1GamRHOXlJQzBnTUMweElHMTFiSFJwY0d4cFpYSWdkRzhnWVhCd2JIa2dkRzhnZEdobElIVnpaWElnZDJWcFoyaDBMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lIVndaR0YwWlVsdWRHVnlibUZzVjJWcFoyaDBLR1poWTNSdmNpa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJdWRYQmtZWFJsU1c1MFpYSnVZV3hYWldsbmFIUW9abUZqZEc5eUtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXpkR0YwWlhNdVptOXlSV0ZqYUNoemRHRjBaU0E5UGlCN1hISmNiaUFnSUNBZ0lITjBZWFJsTG5Wd1pHRjBaVWx1ZEdWeWJtRnNWMlZwWjJoMEtIUm9hWE11WDJsdWRHVnlibUZzVjJWcFoyaDBLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsSUdGdWVTQjJZV3gxWlhNZ2IyWWdkR2hsSUhOMVlpMXpkR0YwWlhNZ2RHaGhkQ0J1WldWa0lIUnZJR0psSUdWMllXeDFZWFJsWkNCbGRtVnllU0JtY21GdFpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCa1pXeDBZVlJwYldVZ0xTQlVhVzFsSUdsdUlHMXBiR3hwYzJWamIyNWtjeUJ6YVc1alpTQjBhR1VnYkdGemRDQjFjR1JoZEdVdVhISmNiaUFnSUNvdlhISmNiaUFnZFhCa1lYUmxLR1JsYkhSaFZHbHRaU2tnZTF4eVhHNGdJQ0FnYzNWd1pYSXVkWEJrWVhSbEtHUmxiSFJoVkdsdFpTazdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NWZjM1JoZEdWekxtWnZja1ZoWTJnb2MzUmhkR1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1MWNHUmhkR1VvWkdWc2RHRlVhVzFsS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVM1JoY25RZ2NHeGhlV0poWTJzZ2IyWWdkR2hsSUhOMVlpMXpkR0YwWlhNZ1puSnZiU0IwYUdVZ1ltVm5hVzV1YVc1bkxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVSbWx1YVhOb0lDMGdSblZ1WTNScGIyNGdkRzhnWlhobFkzVjBaU0IzYUdWdUlIUm9aU0J6ZEdGMFpTQm1hVzVwYzJobGN5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdiMjVGY25KdmNpQXRJRVoxYm1OMGFXOXVJSFJ2SUdWNFpXTjFkR1VnYVdZZ2RHaGxJSE4wWVhSbElHVnVZMjkxYm5SbGNuTmNjbHh1SUNBZ0tpQmhiaUJsY25KdmNpQmtkWEpwYm1jZ2NHeGhlV0poWTJzdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVRMkZ1WTJWc0lDMGdSblZ1WTNScGIyNGdkRzhnWlhobFkzVjBaU0JwWmlCd2JHRjVZbUZqYXlCcGN5QmpZVzVqWld4bFpDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEVaV1psY25KbFpIMWNjbHh1SUNBZ0tpOWNjbHh1SUNCd2JHRjVLRzl1Um1sdWFYTm9MQ0J2YmtWeWNtOXlMQ0J2YmtOaGJtTmxiQ2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdjSEp2YldselpYTWdQU0JiYzNWd1pYSXVjR3hoZVNncFhUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXpkR0YwWlhNdVptOXlSV0ZqYUNoemRHRjBaU0E5UGlCN1hISmNiaUFnSUNBZ0lIQnliMjFwYzJWekxuQjFjMmdvYzNSaGRHVXVjR3hoZVNncEtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlFUmxabVZ5Y21Wa0xtRnNiQ2h3Y205dGFYTmxjeXdnYjI1R2FXNXBjMmdzSUc5dVJYSnliM0lzSUc5dVEyRnVZMlZzS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGQmhkWE5sSUhCc1lYbGlZV05ySUc5bUlIUm9aU0J6ZFdJdGMzUmhkR1Z6TGlCVWFHbHpJSEJ5WlhabGJuUnpJSEJsYm1ScGJtY2djSEp2YldselpYTWdabkp2YlNCaVpXbHVaeUJsZUdWamRYUmxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lIQmhkWE5sS0NrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmYzNSaGRHVnpMbVp2Y2tWaFkyZ29jM1JoZEdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpTNXdZWFZ6WlNncE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ0lDQnlaWFIxY200Z2MzVndaWEl1Y0dGMWMyVW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGMzVnRaU0J3YkdGNVltRmpheUJ2WmlCMGFHVWdjM1ZpTFhOMFlYUmxjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0J2YmtacGJtbHphQ0F0SUVaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2QyaGxiaUIwYUdVZ2MzUmhkR1VnWm1sdWFYTm9aWE11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZiajE5SUc5dVJYSnliM0lnTFNCR2RXNWpkR2x2YmlCMGJ5QmxlR1ZqZFhSbElHbG1JSFJvWlNCemRHRjBaU0JsYm1OdmRXNTBaWEp6WEhKY2JpQWdJQ29nWVc0Z1pYSnliM0lnWkhWeWFXNW5JSEJzWVhsaVlXTnJMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0J2YmtOaGJtTmxiQ0F0SUVaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdjR3hoZVdKaFkyc2dhWE1nWTJGdVkyVnNaV1F1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UkdWbVpYSnlaV1I5WEhKY2JpQWdJQ292WEhKY2JpQWdjbVZ6ZFcxbEtHOXVSbWx1YVhOb0xDQnZia1Z5Y205eUxDQnZia05oYm1ObGJDa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2NISnZiV2x6WlhNZ1BTQmJjM1Z3WlhJdWNtVnpkVzFsS0NsZE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgzTjBZWFJsY3k1bWIzSkZZV05vS0hOMFlYUmxJRDArSUh0Y2NseHVJQ0FnSUNBZ2NISnZiV2x6WlhNdWNIVnphQ2h6ZEdGMFpTNXlaWE4xYldVb0tTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQkVaV1psY25KbFpDNWhiR3dvY0hKdmJXbHpaWE1zSUc5dVJtbHVhWE5vTENCdmJrVnljbTl5TENCdmJrTmhibU5sYkNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRZVzVqWld3Z2NHeGhlV0poWTJzZ2IyWWdkR2hsSUhOMVlpMXpkR0YwWlhNZ1lXNWtJR05oYm1ObGJDQmhibmtnY0dWdVpHbHVaeUJ3Y205dGFYTmxjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHTmhibU5sYkNncElIdGNjbHh1SUNBZ0lIUm9hWE11WDNOMFlYUmxjeTVtYjNKRllXTm9LSE4wWVhSbElEMCtJSHRjY2x4dUlDQWdJQ0FnYzNSaGRHVXVZMkZ1WTJWc0tDazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnpkWEJsY2k1allXNWpaV3dvS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTjBiM0FnY0d4aGVXSmhZMnNnYjJZZ2RHaGxJSE4xWWkxemRHRjBaWE1nWVc1a0lISmxjMjlzZG1VZ1lXNTVJSEJsYm1ScGJtY2djSEp2YldselpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHOXdLQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NWZjM1JoZEdWekxtWnZja1ZoWTJnb2MzUmhkR1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnpkR0YwWlM1emRHOXdLQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNXpkRzl3S0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkVhWE5qWVhKa2N5QmhiR3dnYzNWaUxYTjBZWFJsSUhKbGMyOTFjbU5sY3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR1JwYzJOaGNtUW9LU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpNWthWE5qWVhKa0tDazdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NWthWE5qWVhKa1UzUmhkR1Z6S0NrN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQlluTjBjbUZqZEVKc1pXNWtVM1JoZEdVN1hISmNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkJiV0Y2YjI0dVkyOXRMQ0JKYm1NdUlHOXlJR2wwY3lCaFptWnBiR2xoZEdWekxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh5WEc0dkx5QlRVRVJZTFV4cFkyVnVjMlV0U1dSbGJuUnBabWxsY2pvZ1RVbFVMVEJjY2x4dWFXMXdiM0owSUVGaWMzUnlZV04wUW14bGJtUlRkR0YwWlNCbWNtOXRJQ2N1TDBGaWMzUnlZV04wUW14bGJtUlRkR0YwWlNjN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EyeGhjM01nWm05eUlHSnNaVzVrYVc1bklFNGdiblZ0WW1WeUlHOW1JR0pzWlc1a0lITjBZWFJsY3k1Y2NseHVJQ3BjY2x4dUlDb2dRR1Y0ZEdWdVpITWdRV0p6ZEhKaFkzUkNiR1Z1WkZOMFlYUmxYSEpjYmlBcUwxeHlYRzVqYkdGemN5QkdjbVZsUW14bGJtUlRkR0YwWlNCbGVIUmxibVJ6SUVGaWMzUnlZV04wUW14bGJtUlRkR0YwWlNCN1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FHTnZibk4wY25WamRHOXlYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1cyOXdkR2x2Ym5NOWUzMWRJQzBnVDNCMGFXOXVjeUJtYjNJZ2RHaGxJR052Ym5SaGFXNWxjaUJ6ZEdGMFpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4QlluTjBjbUZqZEZOMFlYUmxQbjBnVzJKc1pXNWtVM1JoZEdWelBWdGRYU0F0SUVKc1pXNWtJSE4wWVhSbGN5QjBieUJpWlNCamIyNTBjbTlzYkdWa0lHSjVYSEpjYmlBZ0lDb2dkR2hwY3lCamIyNTBZV2x1WlhJdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlMQ0JpYkdWdVpGTjBZWFJsY3lBOUlGdGRLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpaHZjSFJwYjI1ekxDQmliR1Z1WkZOMFlYUmxjeWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0IxY0dSaGRHVkpiblJsY201aGJGZGxhV2RvZENobVlXTjBiM0lwSUh0Y2NseHVJQ0FnSUhOMWNHVnlMblZ3WkdGMFpVbHVkR1Z5Ym1Gc1YyVnBaMmgwS0daaFkzUnZjaWs3WEhKY2JseHlYRzRnSUNBZ0x5OGdSR1YwWlhKdGFXNWxJSFJvWlNCMGIzUmhiQ0JoWTNScGRtVWdkMlZwWjJoMElHOW1JR0pzWlc1a0lITjBZWFJsYzF4eVhHNGdJQ0FnYkdWMElITjFiVmRsYVdkb2RITWdQU0F3TzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNOMFlYUmxjeTVtYjNKRllXTm9LSE4wWVhSbElEMCtJSHRjY2x4dUlDQWdJQ0FnYzNWdFYyVnBaMmgwY3lBclBTQnpkR0YwWlM1M1pXbG5hSFE3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJGYm5OMWNtVWdkR2hsSUhOMWJTQnZaaUJpYkdWdVpDQnpkR0YwWlNCcGJuUmxjbTVoYkNCM1pXbG5hSFJ6SUdSdlpYTWdibTkwSUdWNFkyVmxaQ0JqYjI1MFlXbHVaWElnYVc1MFpYSnVZV3dnZDJWcFoyaDBYSEpjYmlBZ0lDQm1ZV04wYjNJZ0x6MGdUV0YwYUM1dFlYZ29jM1Z0VjJWcFoyaDBjeXdnTVNrN1hISmNibHh5WEc0Z0lDQWdMeThnVTNWdElHOW1JR0pzWlc1a0lITjBZWFJsSUdsdWRHVnlibUZzSUhkbGFXZG9kSE1nYzJodmRXeGtJRzV2ZENCbGVHTmxaV1FnWTI5dWRHRnBibVZ5SUdsdWRHVnlibUZzSUhkbGFXZG9kRnh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmhkR1Z6TG1admNrVmhZMmdvYzNSaGRHVWdQVDRnZTF4eVhHNGdJQ0FnSUNCemRHRjBaUzUxY0dSaGRHVkpiblJsY201aGJGZGxhV2RvZENobVlXTjBiM0lnS2lCMGFHbHpMbDkzWldsbmFIUXBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JHY21WbFFteGxibVJUZEdGMFpUdGNjbHh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRUZ0WVhwdmJpNWpiMjBzSUVsdVl5NGdiM0lnYVhSeklHRm1abWxzYVdGMFpYTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEhKY2JpOHZJRk5RUkZndFRHbGpaVzV6WlMxSlpHVnVkR2xtYVdWeU9pQk5TVlF0TUZ4eVhHNXBiWEJ2Y25RZ1JHVm1aWEp5WldRZ1puSnZiU0FuWTI5eVpTOUVaV1psY25KbFpDYzdYSEpjYm1sdGNHOXlkQ0JCWW5OMGNtRmpkRUpzWlc1a1UzUmhkR1VnWm5KdmJTQW5MaTlCWW5OMGNtRmpkRUpzWlc1a1UzUmhkR1VuTzF4eVhHNXBiWEJ2Y25RZ1FXNXBiV0YwYVc5dVZYUnBiSE1nWm5KdmJTQW5MaTR2UVc1cGJXRjBhVzl1VlhScGJITW5PMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRU5zWVhOeklHWnZjaUJpYkdWdVpHbHVaeUJPSUc1MWJXSmxjaUJ2WmlCaWJHVnVaQ0J6ZEdGMFpYTWdZbUZ6WldRZ2IyNGdZU0J6YVc1bmJHVmNjbHh1SUNvZ2NHRnlZVzFsZEdWeUxseHlYRzRnS2x4eVhHNGdLaUJBWlhoMFpXNWtjeUJCWW5OMGNtRmpkRUpzWlc1a1UzUmhkR1ZjY2x4dUlDb3ZYSEpjYm1Oc1lYTnpJRUpzWlc1a01XUlRkR0YwWlNCbGVIUmxibVJ6SUVGaWMzUnlZV04wUW14bGJtUlRkR0YwWlNCN1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FHTnZibk4wY25WamRHOXlYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1cyOXdkR2x2Ym5OZElDMGdUM0IwYVc5dWN5Qm1iM0lnZEdobElHTnZiblJoYVc1bGNpQnpkR0YwWlZ4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRUZpYzNSeVlXTjBRbXhsYm1SVGRHRjBaVDU5SUZ0aWJHVnVaRk4wWVhSbGN6MWJYVjBnTFNCQ2JHVnVaQ0J6ZEdGMFpYTWdkRzhnWW1WY2NseHVJQ0FnS2lCamIyNTBjbTlzYkdWa0lHSjVJSFJvYVhNZ1kyOXVkR0ZwYm1WeUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGt1UEc1MWJXSmxjajU5SUZ0aWJHVnVaRlJvY21WemFHOXNaSE05VzExZElDMGdWR2h5WlhOb2IyeGtJSFpoYkhWbGN5Qm1iM0lnWVdOMGFYWmhkR2x1WjF4eVhHNGdJQ0FxSUdWaFkyZ2dZbXhsYm1RZ2MzUmhkR1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhZbTl2YkdWaGJqNTlJRnR3YUdGelpVMWhkR05vWlhNOVcxMWRJQzBnUW05dmJHVmhibk1nYVc1a2FXTmhkR2x1WnlCM2FHVjBhR1Z5SUc5eUlHNXZkRnh5WEc0Z0lDQXFJR1ZoWTJnZ1lteGxibVFnYzNSaGRHVWdjMmh2ZFd4a0lHSmxJSEJvWVhObElHMWhkR05vWldRdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb1hISmNiaUFnSUNCdmNIUnBiMjV6SUQwZ2UzMHNYSEpjYmlBZ0lDQmliR1Z1WkZOMFlYUmxjeUE5SUZ0ZExGeHlYRzRnSUNBZ1lteGxibVJVYUhKbGMyaHZiR1J6SUQwZ1cxMHNYSEpjYmlBZ0lDQndhR0Z6WlUxaGRHTm9aWE1nUFNCYlhWeHlYRzRnSUNrZ2UxeHlYRzRnSUNBZ2MzVndaWElvYjNCMGFXOXVjeXdnWW14bGJtUlRkR0YwWlhNcE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgySnNaVzVrVm1Gc2RXVWdQU0F3TzF4eVhHNGdJQ0FnZEdocGN5NWZjSEp2YldselpYTWdQU0I3WEhKY2JpQWdJQ0FnSUM0dUxuUm9hWE11WDNCeWIyMXBjMlZ6TEZ4eVhHNGdJQ0FnSUNCaWJHVnVaRlpoYkhWbE9pQkVaV1psY25KbFpDNXlaWE52YkhabEtDa3NYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUM4dklGWmhiR2xrWVhSbElIUm9aWEpsSUdGeVpTQnVieUJrZFhCc2FXTmhkR1VnZEdoeVpYTm9iMnhrYzF4eVhHNGdJQ0FnWTI5dWMzUWdibTl1V21WeWIwUnBabVpsY21WdWRGTnBlbVVnUFZ4eVhHNGdJQ0FnSUNCaWJHVnVaRk4wWVhSbGN5NXNaVzVuZEdnZ0lUMDlJREFnSmlZZ1lteGxibVJUZEdGMFpYTXViR1Z1WjNSb0lDRTlQU0JpYkdWdVpGUm9jbVZ6YUc5c1pITXViR1Z1WjNSb08xeHlYRzRnSUNBZ2FXWWdLRzV2YmxwbGNtOUVhV1ptWlhKbGJuUlRhWHBsS1NCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2NseHVJQ0FnSUNBZ0lDQmdRMkZ1Ym05MElHTnlaV0YwWlNCQ2JHVnVaREZrVTNSaGRHVWdkMmwwYUNCaWJHVnVaRlJvY21WemFHOXNaSE1nSkh0aWJHVnVaRlJvY21WemFHOXNaSE45TGlCQ2JHVnVaRlJvY21WemFHOXNaSE1nWTI5MWJuUWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lteGxibVJUZEdGMFpYTWdZMjkxYm5RdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR052Ym5SaGFXNXpSSFZ3YkdsallYUmxjeUE5WEhKY2JpQWdJQ0FnSUc1bGR5QlRaWFFvWW14bGJtUlVhSEpsYzJodmJHUnpLUzV6YVhwbElDRTlQU0JpYkdWdVpGUm9jbVZ6YUc5c1pITXViR1Z1WjNSb08xeHlYRzRnSUNBZ2FXWWdLR052Ym5SaGFXNXpSSFZ3YkdsallYUmxjeWtnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ1lFTmhibTV2ZENCamNtVmhkR1VnUW14bGJtUXhaRk4wWVhSbElIZHBkR2dnWW14bGJtUlVhSEpsYzJodmJHUnpJQ1I3WW14bGJtUlVhSEpsYzJodmJHUnpmUzRnUW14bGJtUlVhSEpsYzJodmJHUnpJR052Ym5SaGFXNXpJR1IxY0d4cFkyRjBaU0IyWVd4MVpYTmdYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdTVzVwZEdsaGJHbDZaU0IwYUdVZ2RHaHlaWE5vYjJ4a2N5QnRZWEJjY2x4dUlDQWdJSFJvYVhNdVgzUm9jbVZ6YUc5c1pITWdQU0JiWFR0Y2NseHVJQ0FnSUZzdUxpNTBhR2x6TGw5emRHRjBaWE11ZG1Gc2RXVnpLQ2xkTG1admNrVmhZMmdvS0hOMFlYUmxMQ0JwYm1SbGVDa2dQVDRnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDkwYUhKbGMyaHZiR1J6TG5CMWMyZ29lMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUJpYkdWdVpGUm9jbVZ6YUc5c1pITmJhVzVrWlhoZExGeHlYRzRnSUNBZ0lDQWdJRzVoYldVNklITjBZWFJsTG01aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnY0doaGMyVk5ZWFJqYURvZ2NHaGhjMlZOWVhSamFHVnpXMmx1WkdWNFhTQjhmQ0JtWVd4elpTeGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5emIzSjBWR2h5WlhOb2IyeGtjeWdwTzF4eVhHNGdJQ0FnZEdocGN5NWZabTl5WTJWT2IxUm9jbVZ6YUc5c1pFUjFjR1Z6SUQwZ2RISjFaVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDl3YUdGelpVeGxZV1JUZEdGMFpTQTlJRzUxYkd3N1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmRYQmtZWFJsUW14bGJtUlhaV2xuYUhSektDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklHRnVaQ0J6WlhSeklIUm9aU0JpYkdWdVpDQndZWEpoYldWMFpYSWdkbUZzZFdVdVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElHSnNaVzVrVm1Gc2RXVW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllteGxibVJXWVd4MVpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITmxkQ0JpYkdWdVpGWmhiSFZsS0haaGJIVmxLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOWliR1Z1WkZaaGJIVmxJRDBnZG1Gc2RXVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklIZG9aWFJvWlhJZ2IzSWdibTkwSUhSb1pTQmliR1Z1WkNCMllXeDFaU0JwY3lCamRYSnlaVzUwYkhrZ1ltVnBibWNnWVc1cGJXRjBaV1F1WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUdKc1pXNWtWbUZzZFdWUVpXNWthVzVuS0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjIxcGMyVnpMbUpzWlc1a1ZtRnNkV1VnSmlZZ2RHaHBjeTVmY0hKdmJXbHpaWE11WW14bGJtUldZV3gxWlM1d1pXNWthVzVuTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdkWE5sY2lCa1pXWnBibVZrSUhkbGFXZG9kQ0J2ZG1WeUlIUnBiV1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYkd4OUlHNWhiV1VnTFNCVmJuVnpaV1FnY0dGeVlXMWxkR1Z5TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IzWldsbmFIUWdMU0JVYUdVZ2RHRnlaMlYwSUhkbGFXZG9kQ0IyWVd4MVpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1czTmxZMjl1WkhNOU1GMGdMU0JVYUdVZ1lXMXZkVzUwSUc5bUlIUnBiV1VnYVhRZ2QybHNiQ0IwWVd0bElIUnZJSEpsWVdOb0lIUm9aVnh5WEc0Z0lDQXFJSFJoY21kbGRDQjNaV2xuYUhRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHVmhjMmx1WjBadUlDMGdWR2hsSUdWaGMybHVaeUJtZFc1amRHbHZiaUIwYnlCMWMyVWdabTl5SUdsdWRHVnljRzlzWVhScGIyNHVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSR1ZtWlhKeVpXUjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MyVjBRbXhsYm1SWFpXbG5hSFFvYm1GdFpTd2dkbUZzZFdVc0lITmxZMjl1WkhNZ1BTQXdMQ0JsWVhOcGJtZEdiaWtnZTF4eVhHNGdJQ0FnZEdocGN5NWZjSEp2YldselpYTXVZbXhsYm1SV1lXeDFaUzVqWVc1alpXd29LVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDl3Y205dGFYTmxjeTVpYkdWdVpGWmhiSFZsSUQwZ1FXNXBiV0YwYVc5dVZYUnBiSE11YVc1MFpYSndiMnhoZEdWUWNtOXdaWEowZVNoY2NseHVJQ0FnSUNBZ2RHaHBjeXhjY2x4dUlDQWdJQ0FnSjJKc1pXNWtWbUZzZFdVbkxGeHlYRzRnSUNBZ0lDQjJZV3gxWlN4Y2NseHVJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJSE5sWTI5dVpITXNYSEpjYmlBZ0lDQWdJQ0FnWldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUNBZ2IyNVFjbTluY21WemN6b2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFFteGxibVJYWldsbmFIUnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0J2YmtacGJtbHphRG9nS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxRbXhsYm1SWFpXbG5hSFJ6S0NrN1hISmNiaUFnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0hKdmJXbHpaWE11WW14bGJtUldZV3gxWlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFZGxkSE1nZEdobElIVnpaWElnWkdWbWFXNWxaQ0IzWldsbmFIUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiblZ0WW1WeWZWeHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRFSnNaVzVrVjJWcFoyaDBLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVlteGxibVJXWVd4MVpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHRmtaRk4wWVhSbEtITjBZWFJsTENCMGFISmxjMmh2YkdSV1lXeDFaU0E5SURBc0lIQm9ZWE5sVFdGMFkyZ2dQU0JtWVd4elpTa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmRHaHlaWE5vYjJ4a2N5QTlJSFJvYVhNdVgzUm9jbVZ6YUc5c1pITWdmSHdnVzEwN1hISmNibHh5WEc0Z0lDQWdMeThnVFdGclpTQnpkWEpsSUhSb1pYSmxJR2x6SUc1dmRDQmhiSEpsWVdSNUlHRWdjM1JoZEdVZ2QybDBhQ0IwYUdseklIUm9jbVZ6YUc5c1pGeHlYRzRnSUNBZ1kyOXVjM1FnYzJGdFpWWmhiSFZsSUQwZ2RHaHBjeTVmZEdoeVpYTm9iMnhrY3k1bWFXNWtLRnh5WEc0Z0lDQWdJQ0IwYUhKbGMyaHZiR1FnUFQ0Z2RHaHlaWE5vYjJ4a0xuWmhiSFZsSUQwOVBTQjBhSEpsYzJodmJHUldZV3gxWlZ4eVhHNGdJQ0FnS1R0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5bWIzSmpaVTV2VkdoeVpYTm9iMnhrUkhWd1pYTWdKaVlnYzJGdFpWWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnYzJWMElHSnNaVzVrSUhSb2NtVnphRzlzWkNCdlppQWtlM1JvY21WemFHOXNaRlpoYkhWbGZTQm1iM0lnYzNSaGRHVWdKSHR6ZEdGMFpTNXVZVzFsZlNCdmJpQWtlM1JvYVhNdWJtRnRaWDB1SUVFZ2MzUmhkR1VnWVd4eVpXRmtlU0JsZUdsemRITWdkMmwwYUNCMGFHRjBJSFJvY21WemFHOXNaQzVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjM1Z3WlhJdVlXUmtVM1JoZEdVb2MzUmhkR1VwTzF4eVhHNGdJQ0FnZEdocGN5NWZkR2h5WlhOb2IyeGtjeTV3ZFhOb0tIdGNjbHh1SUNBZ0lDQWdkbUZzZFdVNklIUm9jbVZ6YUc5c1pGWmhiSFZsTEZ4eVhHNGdJQ0FnSUNCdVlXMWxPaUJ6ZEdGMFpTNXVZVzFsTEZ4eVhHNGdJQ0FnSUNCd2FHRnpaVTFoZEdOb09pQndhR0Z6WlUxaGRHTm9JSHg4SUdaaGJITmxMRnh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmYzI5eWRGUm9jbVZ6YUc5c1pITW9LVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYzNSaGRHVXVibUZ0WlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhKbGJXOTJaVk4wWVhSbEtHNWhiV1VwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSEpsYlc5MlpXUWdQU0J6ZFhCbGNpNXlaVzF2ZG1WVGRHRjBaU2h1WVcxbEtUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2NtVnRiM1psWkNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCcGJtUmxlQ0E5SUhSb2FYTXVYM1JvY21WemFHOXNaSE11Wm1sdVpFbHVaR1Y0S0Z4eVhHNGdJQ0FnSUNBZ0lIUm9jbVZ6YUc5c1pDQTlQaUIwYUhKbGMyaHZiR1F1Ym1GdFpTQTlQVDBnYm1GdFpWeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOTBhSEpsYzJodmJHUnpMbk53YkdsalpTaHBibVJsZUN3Z01TazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSEpsYlc5MlpXUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnlaVzVoYldWVGRHRjBaU2hqZFhKeVpXNTBUbUZ0WlN3Z2JtVjNUbUZ0WlNrZ2UxeHlYRzRnSUNBZ2JtVjNUbUZ0WlNBOUlITjFjR1Z5TG5KbGJtRnRaVk4wWVhSbEtHTjFjbkpsYm5ST1lXMWxMQ0J1WlhkT1lXMWxLVHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0IwYUhKbGMyaHZiR1FnUFNCMGFHbHpMbDkwYUhKbGMyaHZiR1J6TG1acGJtUW9YSEpjYmlBZ0lDQWdJSFJvY21WemFHOXNaQ0E5UGlCMGFISmxjMmh2YkdRdWJtRnRaU0E5UFQwZ1kzVnljbVZ1ZEU1aGJXVmNjbHh1SUNBZ0lDazdYSEpjYmlBZ0lDQjBhSEpsYzJodmJHUXVibUZ0WlNBOUlHNWxkMDVoYldVN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkMDVoYldVN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQjBhSEpsYzJodmJHUWdkbUZzZFdVZ2IyWWdZU0JpYkdWdVpDQjNhWFJvSUhSb1pTQmpiM0p5WlhOd2IyNWthVzVuSUc1aGJXVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaU0F0SUU1aGJXVWdiMllnZEdobElHSnNaVzVrSUhSdklHZGxkQ0IwYUdVZ2RHaHlaWE5vYjJ4a0lHOW1MbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMGdWR2h5WldodmJHUWdkbUZzZFdVdVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMFFteGxibVJVYUhKbGMyaHZiR1FvYm1GdFpTa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2RHaHlaWE5vYjJ4a0lEMGdkR2hwY3k1ZmRHaHlaWE5vYjJ4a2N5NW1hVzVrS0Z4eVhHNGdJQ0FnSUNCMGFISmxjMmh2YkdRZ1BUNGdkR2h5WlhOb2IyeGtMbTVoYldVZ1BUMDlJRzVoYldWY2NseHVJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSb2NtVnphRzlzWkNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjY2x4dUlDQWdJQ0FnSUNCZ1EyRnVibTkwSUdkbGRDQmliR1Z1WkNCMGFISmxjMmh2YkdRZ2IyWWdjM1JoZEdVZ0pIdHVZVzFsZlNCdmJpQWtlM1JvYVhNdWJtRnRaWDB1SUU1dklITjBZWFJsSUdWNGFYTjBjeUIzYVhSb0lIUm9ZWFFnYm1GdFpTNWdYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2NtVnphRzlzWkM1MllXeDFaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZObGRITWdkR2hsSUhSb2NtVnphRzlzWkNCMllXeDFaU0J2WmlCaElHSnNaVzVrSUhkcGRHZ2dkR2hsSUdOdmNuSmxjM0J2Ym1ScGJtY2dibUZ0WlM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1WVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnWW14bGJtUWdkRzhnYzJWMElIUm9aU0IwYUhKbGMyaHZiR1F1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSFpoYkhWbElDMGdWbUZzZFdVZ2IyWWdkR2hsSUhSb2NtVnphRzlzWkNCMGJ5QnpaWFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlmU0JUWlhRZ2RHaHlaWE5vYjJ4a0lIWmhiSFZsTGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE5sZEVKc1pXNWtWR2h5WlhOb2IyeGtLRzVoYldVc0lIWmhiSFZsS1NCN1hISmNiaUFnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsY21VZ2FYTWdibTkwSUdGc2NtVmhaSGtnWVNCemRHRjBaU0IzYVhSb0lIUm9hWE1nZEdoeVpYTm9iMnhrWEhKY2JpQWdJQ0JqYjI1emRDQnpZVzFsVm1Gc2RXVWdQU0IwYUdsekxsOTBhSEpsYzJodmJHUnpMbVpwYm1Rb1hISmNiaUFnSUNBZ0lIUm9jbVZ6YUc5c1pDQTlQaUIwYUhKbGMyaHZiR1F1ZG1Gc2RXVWdQVDA5SUhaaGJIVmxYSEpjYmlBZ0lDQXBPMXh5WEc0Z0lDQWdhV1lnS0hOaGJXVldZV3gxWlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjY2x4dUlDQWdJQ0FnSUNCZ1EyRnVibTkwSUhObGRDQmliR1Z1WkNCMGFISmxjMmh2YkdRZ2IyWWdKSHQyWVd4MVpYMGdabTl5SUhOMFlYUmxJQ1I3Ym1GdFpYMGdiMjRnSkh0MGFHbHpMbTVoYldWOUxpQkJJSE4wWVhSbElHRnNjbVZoWkhrZ1pYaHBjM1J6SUhkcGRHZ2dkR2hoZENCMGFISmxjMmh2YkdRdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJSFJvY21WemFHOXNaQ0E5SUhSb2FYTXVYM1JvY21WemFHOXNaSE11Wm1sdVpDaGNjbHh1SUNBZ0lDQWdkR2h5WlhOb2IyeGtJRDArSUhSb2NtVnphRzlzWkM1dVlXMWxJRDA5UFNCdVlXMWxYSEpjYmlBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhSEpsYzJodmJHUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hISmNiaUFnSUNBZ0lDQWdZRU5oYm01dmRDQnpaWFFnWW14bGJtUWdkR2h5WlhOb2IyeGtJRzltSUhOMFlYUmxJQ1I3Ym1GdFpYMGdiMjRnSkh0MGFHbHpMbTVoYldWOUxpQk9ieUJ6ZEdGMFpTQmxlR2x6ZEhNZ2QybDBhQ0IwYUdGMElHNWhiV1V1WUZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSFJvY21WemFHOXNaQzUyWVd4MVpTQTlJSFpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgzTnZjblJVYUhKbGMyaHZiR1J6S0NrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9jbVZ6YUc5c1pDNTJZV3gxWlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhWd1pHRjBaVWx1ZEdWeWJtRnNWMlZwWjJoMEtHWmhZM1J2Y2lrZ2UxeHlYRzRnSUNBZ2MzVndaWEl1ZFhCa1lYUmxTVzUwWlhKdVlXeFhaV2xuYUhRb1ptRmpkRzl5S1R0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZjR2hoYzJWTVpXRmtVM1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmMzUmhkR1Z6TG1admNrVmhZMmdvYzNSaGRHVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNTNaV2xuYUhRZ0lUMDlJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbExtNXZjbTFoYkdsNlpXUlVhVzFsSUQwZ2RHaHBjeTVmY0doaGMyVk1aV0ZrVTNSaGRHVXVibTl5YldGc2FYcGxaRlJwYldVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGVndaR0YwWlhNZ2RHaGxJR0pzWlc1a0lIZGxhV2RvZEhNZ1ltRnpaV1FnYjI0Z2RHaGxhWElnWTI5eWNtVnpjRzl1WkdsdVp5QjBhSEpsYzJodmJHUWdkbUZzZFdWelhISmNiaUFnSUNvZ1lXNWtJSFJvWlNCamRYSnlaVzUwSUdKc1pXNWtWbUZzZFdVdUlFRmtaR2wwYVc5dVlXeHNlU3dnYzJWMGN5QmhJR3hsWVdRZ2NHaGhjMlVnYzNSaGRHVWdhV1lnZEdobFhISmNiaUFnSUNvZ1kyOXVaR2wwYVc5dWN5Qm1iM0lnY0doaGMyVXRiV0YwWTJocGJtY2dhR0YyWlNCaVpXVnVJSE5oZEdselptbGxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gzVndaR0YwWlVKc1pXNWtWMlZwWjJoMGN5Z3BJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbDkwYUhKbGMyaHZiR1J6TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdU8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbDkwYUhKbGMyaHZiR1J6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQnpkR0YwWlNBOUlIUm9hWE11WDNOMFlYUmxjeTVuWlhRb2RHaHBjeTVmZEdoeVpYTm9iMnhrYzFzd1hTNXVZVzFsS1R0Y2NseHVJQ0FnSUNBZ2MzUmhkR1V1YzJWMFYyVnBaMmgwS0RFcE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnU1c1cGRHbGhiR3g1SUhObGRDQmhiR3dnYzNWaUxYTjBZWFJsSUhkbGFXZG9kSE1nZEc4Z2VtVnliMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmhkR1Z6TG1admNrVmhZMmdvYzNSaGRHVWdQVDRnZTF4eVhHNGdJQ0FnSUNCemRHRjBaUzV6WlhSWFpXbG5hSFFvTUNrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXdhR0Z6WlV4bFlXUlRkR0YwWlNBOUlHNTFiR3c3WEhKY2JseHlYRzRnSUNBZ0x5OGdSbWx1WkNCMGFHVWdabWx5YzNRZ2RHaHlaWE5vYjJ4a0lIUm9ZWFFnYVhNZ1ozSmxZWFJsY2lCMGFHRnVJRzl5SUdWeGRXRnNJSFJ2SUhSb1pTQndZWEpoYldWMFpYSWdkbUZzZFdWY2NseHVJQ0FnSUd4bGRDQjBZWEpuWlhSSmJtUmxlQ0E5SUhSb2FYTXVYM1JvY21WemFHOXNaSE11Wm1sdVpFbHVaR1Y0S0hSb2NtVnphRzlzWkNBOVBpQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhSEpsYzJodmJHUXVkbUZzZFdVZ1BqMGdkR2hwY3k1ZllteGxibVJXWVd4MVpUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBZWEpuWlhSSmJtUmxlQ0E5UFQwZ01DQjhmQ0IwWVhKblpYUkpibVJsZUNBOVBUMGdMVEVwSUh0Y2NseHVJQ0FnSUNBZ0x5OGdSMmwyWlNCdmJtVWdjM1JoZEdVZ1puVnNiQ0JwYm1ac2RXVnVZMlZjY2x4dUlDQWdJQ0FnZEdGeVoyVjBTVzVrWlhnZ1BTQjBZWEpuWlhSSmJtUmxlQ0E5UFQwZ0xURWdQeUIwYUdsekxsOTBhSEpsYzJodmJHUnpMbXhsYm1kMGFDQXRJREVnT2lBd08xeHlYRzRnSUNBZ0lDQmpiMjV6ZENCemRHRjBaU0E5SUhSb2FYTXVYM04wWVhSbGN5NW5aWFFvZEdocGN5NWZkR2h5WlhOb2IyeGtjMXQwWVhKblpYUkpibVJsZUYwdWJtRnRaU2s3WEhKY2JpQWdJQ0FnSUhOMFlYUmxMbk5sZEZkbGFXZG9kQ2d4S1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUM4dklFeHBibVZoY2lCcGJuUmxjbkJ2YkdGMFpTQnBibVpzZFdWdVkyVWdZbVYwZDJWbGJpQjBkMjhnYzNSaGRHVnpYSEpjYmlBZ0lDQWdJR052Ym5OMElIUm9jbVZ6YUc5c1pFRWdQU0IwYUdsekxsOTBhSEpsYzJodmJHUnpXM1JoY21kbGRFbHVaR1Y0SUMwZ01WMDdYSEpjYmlBZ0lDQWdJR052Ym5OMElIUm9jbVZ6YUc5c1pFSWdQU0IwYUdsekxsOTBhSEpsYzJodmJHUnpXM1JoY21kbGRFbHVaR1Y0WFR0Y2NseHVYSEpjYmlBZ0lDQWdJR052Ym5OMElHWmhZM1J2Y2tJZ1BWeHlYRzRnSUNBZ0lDQWdJQ2gwYUdsekxtSnNaVzVrVm1Gc2RXVWdMU0IwYUhKbGMyaHZiR1JCTG5aaGJIVmxLU0F2WEhKY2JpQWdJQ0FnSUNBZ0tIUm9jbVZ6YUc5c1pFSXVkbUZzZFdVZ0xTQjBhSEpsYzJodmJHUkJMblpoYkhWbEtUdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ1ptRmpkRzl5UVNBOUlERWdMU0JtWVdOMGIzSkNPMXh5WEc1Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnYzNSaGRHVkJJRDBnZEdocGN5NWZjM1JoZEdWekxtZGxkQ2gwYUhKbGMyaHZiR1JCTG01aGJXVXBPMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQnpkR0YwWlVJZ1BTQjBhR2x6TGw5emRHRjBaWE11WjJWMEtIUm9jbVZ6YUc5c1pFSXVibUZ0WlNrN1hISmNibHh5WEc0Z0lDQWdJQ0J6ZEdGMFpVRXVjMlYwVjJWcFoyaDBLR1poWTNSdmNrRXBPMXh5WEc0Z0lDQWdJQ0J6ZEdGMFpVSXVjMlYwVjJWcFoyaDBLR1poWTNSdmNrSXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdVMlYwSUhCb1lYTmxMVzFoZEdOb2FXNW5JR2xtSUc1bFpXUmxaRnh5WEc0Z0lDQWdJQ0JwWmlBb2RHaHlaWE5vYjJ4a1FTNXdhR0Z6WlUxaGRHTm9JQ1ltSUhSb2NtVnphRzlzWkVJdWNHaGhjMlZOWVhSamFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0JvWVhObFRHVmhaRk4wWVhSbElEMGdabUZqZEc5eVFTQStJR1poWTNSdmNrSWdQeUJ6ZEdGMFpVRWdPaUJ6ZEdGMFpVSTdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZOdmNuUnpJSFJvWlNCMGFISmxjMmh2YkdSeklHWnliMjBnYkc5M0lIUnZJR2hwWjJnZ1ltRnpaV1FnYjI0Z2RtRnNkV1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXpiM0owVkdoeVpYTm9iMnhrY3lncElIdGNjbHh1SUNBZ0lIUm9hWE11WDNSb2NtVnphRzlzWkhNdWMyOXlkQ2dvWVN3Z1lpa2dQVDRnWVM1MllXeDFaU0F0SUdJdWRtRnNkV1VwTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnUW14bGJtUXhaRk4wWVhSbE8xeHlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdRVzFoZW05dUxtTnZiU3dnU1c1akxpQnZjaUJwZEhNZ1lXWm1hV3hwWVhSbGN5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjY2x4dUx5OGdVMUJFV0MxTWFXTmxibk5sTFVsa1pXNTBhV1pwWlhJNklFMUpWQzB3WEhKY2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMWFZ1WkdWeWMyTnZjbVV0WkdGdVoyeGxJQ292WEhKY2JtbHRjRzl5ZENCRVpXWmxjbkpsWkNCbWNtOXRJQ2RqYjNKbEwwUmxabVZ5Y21Wa0p6dGNjbHh1YVcxd2IzSjBJRTFoZEdoVmRHbHNjeUJtY205dElDZGpiM0psTDAxaGRHaFZkR2xzY3ljN1hISmNibWx0Y0c5eWRDQkJZbk4wY21GamRFSnNaVzVrVTNSaGRHVWdabkp2YlNBbkxpOUJZbk4wY21GamRFSnNaVzVrVTNSaGRHVW5PMXh5WEc1cGJYQnZjblFnUVc1cGJXRjBhVzl1VlhScGJITWdabkp2YlNBbkxpNHZRVzVwYldGMGFXOXVWWFJwYkhNbk8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFTnNZWE56SUdadmNpQmliR1Z1WkdsdVp5Qk9JRzUxYldKbGNpQnZaaUJpYkdWdVpDQnpkR0YwWlhNZ1ltRnpaV1FnYjI0Z2RIZHZYSEpjYmlBcUlIQmhjbUZ0ZEdWeWN5NWNjbHh1SUNwY2NseHVJQ29nUUdWNGRHVnVaSE1nUVdKemRISmhZM1JDYkdWdVpGTjBZWFJsWEhKY2JpQXFMMXh5WEc1amJHRnpjeUJDYkdWdVpESmtVM1JoZEdVZ1pYaDBaVzVrY3lCQlluTjBjbUZqZEVKc1pXNWtVM1JoZEdVZ2UxeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZjSFJwYjI1elhTQXRJRTl3ZEdsdmJuTWdabTl5SUhSb1pTQmpiMjUwWVdsdVpYSWdjM1JoZEdWY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVManhCWW5OMGNtRmpkRUpzWlc1a1UzUmhkR1UrZlNCYllteGxibVJUZEdGMFpYTTlXMTFkSUMwZ1FteGxibVFnYzNSaGRHVnpJSFJ2SUdKbFhISmNiaUFnSUNvZ1kyOXVkSEp2Ykd4bFpDQmllU0IwYUdseklHTnZiblJoYVc1bGNpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4QmNuSmhlUzQ4Ym5WdFltVnlQajU5SUZ0aWJHVnVaRlJvY21WemFHOXNaSE05VzExZElDMGdWR2h5WlhOb2IyeGtJSFpoYkhWbGN5Qm1iM0lnWVdOMGFYWmhkR2x1WjF4eVhHNGdJQ0FxSUdWaFkyZ2dZbXhsYm1RZ2MzUmhkR1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhZbTl2YkdWaGJqNTlJRnR3YUdGelpVMWhkR05vWlhNOVcxMWRJQzBnUW05dmJHVmhibk1nYVc1a2FXTmhkR2x1WnlCM2FHVjBhR1Z5SUc5eUlHNXZkRnh5WEc0Z0lDQXFJR1ZoWTJnZ1lteGxibVFnYzNSaGRHVWdjMmh2ZFd4a0lHSmxJSEJvWVhObElHMWhkR05vWldRdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb1hISmNiaUFnSUNCdmNIUnBiMjV6SUQwZ2UzMHNYSEpjYmlBZ0lDQmliR1Z1WkZOMFlYUmxjeUE5SUZ0ZExGeHlYRzRnSUNBZ1lteGxibVJVYUhKbGMyaHZiR1J6SUQwZ1cxMHNYSEpjYmlBZ0lDQndhR0Z6WlUxaGRHTm9aWE1nUFNCYlhWeHlYRzRnSUNrZ2UxeHlYRzRnSUNBZ2MzVndaWElvYjNCMGFXOXVjeXdnWW14bGJtUlRkR0YwWlhNcE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoaWJHVnVaRk4wWVhSbGN5NXNaVzVuZEdnZ0lUMDlJR0pzWlc1a1ZHaHlaWE5vYjJ4a2N5NXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQWdJR0JEWVc1dWIzUWdZM0psWVhSbElFSnNaVzVrTW1SVGRHRjBaU0IzYVhSb0lHSnNaVzVrVTNSaGRHVnpJQ1I3WW14bGJtUlRkR0YwWlhOOUlHRnVaQ0JpYkdWdVpGUm9jbVZ6YUc5c1pITWdKSHRpYkdWdVpGUm9jbVZ6YUc5c1pITjlMaUJEYjNWdWRDQnZaaUJpYkdWdVpGTjBZWFJsY3lCdGRYTjBJRzFoZEdOb0lHTnZkVzUwSUc5bUlHSnNaVzVrVkdoeVpYTm9iMnhrY3k1Z1hISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWW14bGJtUlVhSEpsYzJodmJHUnpYSEpjYmlBZ0lDQWdJQzV6YkdsalpTZ3dMQ0JpYkdWdVpGUm9jbVZ6YUc5c1pITXViR1Z1WjNSb0lDMGdNU2xjY2x4dUlDQWdJQ0FnTG1admNrVmhZMmdvS0hSb2NtVnphRzlzWkN3Z2FXNWtaWGdwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JpYkdWdVpGUm9jbVZ6YUc5c1pITXVjMnhwWTJVb2FXNWtaWGdnS3lBeEtTNW1iM0pGWVdOb0tHOTBhR1Z5VkdoeVpYTm9iMnhrSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHlaWE5vYjJ4a1d6QmRJRDA5UFNCdmRHaGxjbFJvY21WemFHOXNaRnN3WFNBbUpseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISmxjMmh2YkdSYk1WMGdQVDA5SUc5MGFHVnlWR2h5WlhOb2IyeGtXekZkWEhKY2JpQWdJQ0FnSUNBZ0lDQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1kzSmxZWFJsSUVKc1pXNWtNbVJUZEdGMFpTQjNhWFJvSUdKc1pXNWtWR2h5WlhOb2IyeGtjeUFrZTJKc1pXNWtWR2h5WlhOb2IyeGtjMzB1SUU1dklHUjFjR3hwWTJGMFpTQjJZV3gxWlhNZ1lXeHNiM2RsWkNCcGJpQmliR1Z1WkZSb2NtVnphRzlzWkhNdVlGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5aWJHVnVaRlpoYkhWbFdDQTlJREE3WEhKY2JpQWdJQ0IwYUdsekxsOWliR1Z1WkZaaGJIVmxXU0E5SURBN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmNISnZiV2x6WlhNZ1BTQjdYSEpjYmlBZ0lDQWdJQzR1TG5Sb2FYTXVYM0J5YjIxcGMyVnpMRnh5WEc0Z0lDQWdJQ0JpYkdWdVpGWmhiSFZsV0RvZ1JHVm1aWEp5WldRdWNtVnpiMngyWlNncExGeHlYRzRnSUNBZ0lDQmliR1Z1WkZaaGJIVmxXVG9nUkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTEZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5MGFISmxjMmh2YkdSeklEMGdXMTA3WEhKY2JpQWdJQ0JiTGk0dWRHaHBjeTVmYzNSaGRHVnpMblpoYkhWbGN5Z3BYUzVtYjNKRllXTm9LQ2h6ZEdGMFpTd2dhVzVrWlhncElEMCtJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZkR2h5WlhOb2IyeGtjeTV3ZFhOb0tIdGNjbHh1SUNBZ0lDQWdJQ0J1WVcxbE9pQnpkR0YwWlM1dVlXMWxMRnh5WEc0Z0lDQWdJQ0FnSUhCb1lYTmxUV0YwWTJnNklIQm9ZWE5sVFdGMFkyaGxjMXRwYm1SbGVGMGdmSHdnWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmRtVnlkR2xqWlhNZ1BTQmliR1Z1WkZSb2NtVnphRzlzWkhNN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM1psY25ScFkyVnpMbXhsYm1kMGFDQStQU0F6S1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDNSeWFXRnVaMnhsY3lBOUlFMWhkR2hWZEdsc2N5NW5aWFJFWld4aGRXNWhlVlJ5YVdGdVozVnNZWFJwYjI0b2RHaHBjeTVmZG1WeWRHbGpaWE1wTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNCb1lYTmxUR1ZoWkZOMFlYUmxJRDBnYm5Wc2JEdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdWQ2JHVnVaRmRsYVdkb2RITW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZWd1pHRjBaWE1nZEdobElIVnpaWElnWkdWbWFXNWxaQ0IzWldsbmFIUWdiM1psY2lCMGFXMWxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNWhiV1VnTFNCT1lXMWxJRzltSUdKc1pXNWtJSGRsYVdkb2RDQjBieUIxY0dSaGRHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIZGxhV2RvZENBdElGUmhjbWRsZENCM1pXbG5hSFFnZG1Gc2RXVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHpaV052Ym1SelBUQmRJQzBnVkdobElHRnRiM1Z1ZENCdlppQjBhVzFsSUdsMElIZHBiR3dnZEdGclpTQjBieUJ5WldGamFDQjBhR1ZjY2x4dUlDQWdLaUIwWVhKblpYUWdkbUZzZFdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHVmhjMmx1WjBadUlDMGdWR2hsSUdWaGMybHVaeUJtZFc1amRHbHZiaUIwYnlCMWMyVWdabTl5SUdsdWRHVnljRzlzWVhScGIyNHVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSR1ZtWlhKeVpXUjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MyVjBRbXhsYm1SWFpXbG5hSFFvYm1GdFpTd2dkbUZzZFdVc0lITmxZMjl1WkhNZ1BTQXdMQ0JsWVhOcGJtZEdiaWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdjSEp2Y0dWeWRIa2dQU0JnWW14bGJtUldZV3gxWlNSN2JtRnRaUzUwYjFWd2NHVnlRMkZ6WlNncGZXQTdYSEpjYmlBZ0lDQnBaaUFvY0hKdmNHVnlkSGtnSVQwOUlDZGliR1Z1WkZaaGJIVmxXQ2NnSmlZZ2NISnZjR1Z5ZEhrZ0lUMDlJQ2RpYkdWdVpGWmhiSFZsV1NjcElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHlYRzRnSUNBZ0lDQWdJR0JEWVc1dWIzUWdjMlYwSUdKc1pXNWtJSGRsYVdkb2RDQm1iM0lnSkh0dVlXMWxmU0J2YmlBa2UzUm9hWE11Ym1GdFpYMHVJRUpzWlc1a01tUlRkR0YwWlNCdmJteDVJR0ZqWTJWd2RITWdKMWduSUc5eUlDZFpKeUJtYjNJZ2MyVjBRbXhsYm1SWFpXbG5hSFJnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmNISnZiV2x6WlhOYmNISnZjR1Z5ZEhsZExtTmhibU5sYkNncE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgzQnliMjFwYzJWelczQnliM0JsY25SNVhTQTlJRUZ1YVcxaGRHbHZibFYwYVd4ekxtbHVkR1Z5Y0c5c1lYUmxVSEp2Y0dWeWRIa29YSEpjYmlBZ0lDQWdJSFJvYVhNc1hISmNiaUFnSUNBZ0lIQnliM0JsY25SNUxGeHlYRzRnSUNBZ0lDQjJZV3gxWlN4Y2NseHVJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJSE5sWTI5dVpITXNYSEpjYmlBZ0lDQWdJQ0FnWldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUNBZ2IyNVFjbTluY21WemN6b2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFFteGxibVJYWldsbmFIUnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0J2YmtacGJtbHphRG9nS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxRbXhsYm1SWFpXbG5hSFJ6S0NrN1hISmNiaUFnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0hKdmJXbHpaWE5iY0hKdmNHVnlkSGxkTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVjBjeUIwYUdVZ2RYTmxjaUJrWldacGJtVmtJSGRsYVdkb2RDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdVlXMWxJQzBnVG1GdFpTQnZaaUJpYkdWdVpDQjNaV2xuYUhRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JuVnRZbVZ5ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZEVKc1pXNWtWMlZwWjJoMEtHNWhiV1VwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSEJ5YjNCbGNuUjVJRDBnYm1GdFpTNTBiMVZ3Y0dWeVEyRnpaU2dwTzF4eVhHNGdJQ0FnYVdZZ0tIQnliM0JsY25SNUlDRTlQU0FuV0NjZ0ppWWdjSEp2Y0dWeWRIa2dJVDA5SUNkWkp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVOaGJtNXZkQ0JuWlhRZ1lteGxibVFnZDJWcFoyaDBJR1p2Y2lBa2UyNWhiV1Y5SUc5dUlDUjdkR2hwY3k1dVlXMWxmUzRnUW14bGJtUXlaRk4wWVhSbElHOXViSGtnWVdOalpYQjBjeUFuV0NjZ2IzSWdKMWtuSUdadmNpQm5aWFJDYkdWdVpGZGxhV2RvZEdCY2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdjSEp2Y0dWeWRIa2dQVDA5SUNkWUp5QS9JSFJvYVhNdVgySnNaVzVrVm1Gc2RXVllJRG9nZEdocGN5NWZZbXhsYm1SV1lXeDFaVms3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSFpYUnpJR0Z1WkNCelpYUnpJSFJvWlNCNElHSnNaVzVrSUhkbGFXZG9kQzVjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnWW14bGJtUldZV3gxWlZnb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWW14bGJtUldZV3gxWlZnN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCelpYUWdZbXhsYm1SV1lXeDFaVmdvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJSFJvYVhNdVgySnNaVzVrVm1Gc2RXVllJRDBnZG1Gc2RXVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklHRnVaQ0J6WlhSeklIUm9aU0I1SUdKc1pXNWtJSGRsYVdkb2RDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUWdZbXhsYm1SV1lXeDFaVmtvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZZbXhsYm1SV1lXeDFaVms3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6WlhRZ1lteGxibVJXWVd4MVpWa29kbUZzZFdVcElIdGNjbHh1SUNBZ0lIUm9hWE11WDJKc1pXNWtWbUZzZFdWWklEMGdkbUZzZFdVN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvWlNCNElHSnNaVzVrSUhaaGJIVmxJR2x6SUdOMWNuSmxiblJzZVNCaVpXbHVaeUJoYm1sdFlYUmxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnWW14bGJtUldZV3gxWlZoUVpXNWthVzVuS0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjIxcGMyVnpMbUpzWlc1a1ZtRnNkV1ZZSUNZbUlIUm9hWE11WDNCeWIyMXBjMlZ6TG1Kc1pXNWtWbUZzZFdWWUxuQmxibVJwYm1jN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvWlNCNUlHSnNaVzVrSUhaaGJIVmxJR2x6SUdOMWNuSmxiblJzZVNCaVpXbHVaeUJoYm1sdFlYUmxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQm5aWFFnWW14bGJtUldZV3gxWlZsUVpXNWthVzVuS0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjIxcGMyVnpMbUpzWlc1a1ZtRnNkV1ZaSUNZbUlIUm9hWE11WDNCeWIyMXBjMlZ6TG1Kc1pXNWtWbUZzZFdWWkxuQmxibVJwYm1jN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCMWNHUmhkR1ZKYm5SbGNtNWhiRmRsYVdkb2RDaG1ZV04wYjNJcElIdGNjbHh1SUNBZ0lITjFjR1Z5TG5Wd1pHRjBaVWx1ZEdWeWJtRnNWMlZwWjJoMEtHWmhZM1J2Y2lrN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM0JvWVhObFRHVmhaRk4wWVhSbEtTQjdYSEpjYmlBZ0lDQWdJRnN1TGk1MGFHbHpMbDl6ZEdGMFpYTXVkbUZzZFdWektDbGRMbVp2Y2tWaFkyZ29LSE4wWVhSbExDQnBibVJsZUNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlM1M1pXbG5hSFFnSVQwOUlEQWdKaVlnZEdocGN5NWZkR2h5WlhOb2IyeGtjMXRwYm1SbGVGMHVjR2hoYzJWTllYUmphQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjM1JoZEdVdWJtOXliV0ZzYVhwbFpGUnBiV1VnUFNCMGFHbHpMbDl3YUdGelpVeGxZV1JUZEdGMFpTNXViM0p0WVd4cGVtVmtWR2x0WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsY3lCMGFHVWdZbXhsYm1RZ2QyVnBaMmgwY3lCaVlYTmxaQ0J2YmlCMGFHVnBjaUJqYjNKeVpYTndiMjVrYVc1bklIUm9jbVZ6YUc5c1pDQjJZV3gxWlhOY2NseHVJQ0FnS2lCaGJtUWdkR2hsSUdOMWNuSmxiblFnVzNnc2VWMGdZbXhsYm1SV1lXeDFaUzRnUVdSa2FYUnBiMjVoYkd4NUxDQnpaWFJ6SUdFZ2JHVmhaQ0J3YUdGelpTQnpkR0YwWlNCcFppQjBhR1ZjY2x4dUlDQWdLaUJqYjI1a2FYUnBiMjV6SUdadmNpQndhR0Z6WlMxdFlYUmphR2x1WnlCb1lYWmxJR0psWlc0Z2MyRjBhWE5tYVdWa0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2k5Y2NseHVJQ0JmZFhCa1lYUmxRbXhsYm1SWFpXbG5hSFJ6S0NrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOTJaWEowYVdObGN5QjhmQ0IwYUdsekxsOTJaWEowYVdObGN5NXNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNCcFppQW9kR2hwY3k1ZmRtVnlkR2xqWlhNdWJHVnVaM1JvSUQwOVBTQXhLU0I3WEhKY2JpQWdJQ0FnSUZzdUxpNTBhR2x6TGw5emRHRjBaWE11ZG1Gc2RXVnpLQ2xkV3pCZExuZGxhV2RvZENBOUlERTdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCSmJtbDBhV0ZzYkhrZ2MyVjBJR0ZzYkNCemRXSXRjM1JoZEdVZ2QyVnBaMmgwY3lCMGJ5QjZaWEp2WEhKY2JpQWdJQ0IwYUdsekxsOXpkR0YwWlhNdVptOXlSV0ZqYUNoemRHRjBaU0E5UGlCN1hISmNiaUFnSUNBZ0lITjBZWFJsTG5ObGRGZGxhV2RvZENnd0tUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lDQWdkR2hwY3k1ZmNHaGhjMlZNWldGa1UzUmhkR1VnUFNCdWRXeHNPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJSEFnUFNCYmRHaHBjeTVmWW14bGJtUldZV3gxWlZnc0lIUm9hWE11WDJKc1pXNWtWbUZzZFdWWlhUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmZG1WeWRHbGpaWE11YkdWdVozUm9JRDA5UFNBeUtTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzTmxkRWx1Wm14MVpXNWpaVU5zYjNObGMzUlFiMmx1ZEU5dVRHbHVaU2h3S1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUdOdmJuTjBJSFJ5YVdGdVoyeGxJRDBnZEdocGN5NWZkSEpwWVc1bmJHVnpMbVpwYm1Rb2RISnBZVzVuYkdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSb1ZYUnBiSE11YVhOUWIybHVkRWx1VkhKcFlXNW5iR1VvWEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MlpYSjBhV05sYzF0MGNtbGhibWRzWlZzd1hWMHNYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkyWlhKMGFXTmxjMXQwY21saGJtZHNaVnN4WFYwc1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOTJaWEowYVdObGMxdDBjbWxoYm1kc1pWc3lYVjBzWEhKY2JpQWdJQ0FnSUNBZ0lDQndYSEpjYmlBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9kSEpwWVc1bmJHVXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6WlhSSmJtWnNkV1Z1WTJWVWNtbGhibWRzWlNoMGNtbGhibWRzWlN3Z2NDazdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlYwU1c1bWJIVmxibU5sUTJ4dmMyVnpkRkJ2YVc1MFNXNVVjbWxoYm1kc1pYTW9jQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTmxkSE1nWW14bGJtUWdkMlZwWjJoMGN5Qm1iM0lnYzNSaGRHVnpJR052Y25KbGMzQnZibVJwYm1jZ2RHOGdZVnh5WEc0Z0lDQXFJSFJ5YVdGdVoyeGxJRzltSUhSb2NtVnphRzlzWkhNZ1lXNWtJR0VnWjJsMlpXNGdXM2dzZVYwZ1lteGxibVJXWVd4MVpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4QmNuSmhlUzQ4Ym5WdFltVnlQajU5SUhSeWFXRnVaMnhsSUMwZ1UyVjBJRzltSUhSeWFXRnVaMngxWVhSbFpDQnBibVJwWTJWelhISmNiaUFnSUNvZ2RHaGhkQ0JqYjNKeVpYTndiMjVrSUhSdklHSnNaVzVrSUhSb2NtVnphRzlzWkhNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlUzQ4Ym5WdFltVnlQbjBnY0NBdElFZHBkbVZ1SUZ0NExIbGRJR0pzWlc1a1ZtRnNkV1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXpaWFJKYm1ac2RXVnVZMlZVY21saGJtZHNaU2gwY21saGJtZHNaU3dnY0NrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnWVhKbFlVRWdQU0JOWVhSb1ZYUnBiSE11ZEhKcFlXNW5iR1ZCY21WaEtGeHlYRzRnSUNBZ0lDQjBhR2x6TGw5MlpYSjBhV05sYzF0MGNtbGhibWRzWlZzeFhWMHNYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzWmxjblJwWTJWelczUnlhV0Z1WjJ4bFd6SmRYU3hjY2x4dUlDQWdJQ0FnY0Z4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCaGNtVmhRaUE5SUUxaGRHaFZkR2xzY3k1MGNtbGhibWRzWlVGeVpXRW9YSEpjYmlBZ0lDQWdJSFJvYVhNdVgzWmxjblJwWTJWelczUnlhV0Z1WjJ4bFd6QmRYU3hjY2x4dUlDQWdJQ0FnZEdocGN5NWZkbVZ5ZEdsalpYTmJkSEpwWVc1bmJHVmJNbDFkTEZ4eVhHNGdJQ0FnSUNCd1hISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHRnlaV0ZESUQwZ1RXRjBhRlYwYVd4ekxuUnlhV0Z1WjJ4bFFYSmxZU2hjY2x4dUlDQWdJQ0FnZEdocGN5NWZkbVZ5ZEdsalpYTmJkSEpwWVc1bmJHVmJNRjFkTEZ4eVhHNGdJQ0FnSUNCMGFHbHpMbDkyWlhKMGFXTmxjMXQwY21saGJtZHNaVnN4WFYwc1hISmNiaUFnSUNBZ0lIQmNjbHh1SUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdkRzkwWVd4QmNtVmhJRDBnWVhKbFlVRWdLeUJoY21WaFFpQXJJR0Z5WldGRE8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElIZGxhV2RvZEVFZ1BTQmhjbVZoUVNBdklIUnZkR0ZzUVhKbFlUdGNjbHh1SUNBZ0lHTnZibk4wSUhkbGFXZG9kRUlnUFNCaGNtVmhRaUF2SUhSdmRHRnNRWEpsWVR0Y2NseHVJQ0FnSUdOdmJuTjBJSGRsYVdkb2RFTWdQU0JoY21WaFF5QXZJSFJ2ZEdGc1FYSmxZVHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0IwYUhKbGMyaHZiR1JCSUQwZ2RHaHBjeTVmZEdoeVpYTm9iMnhrYzF0MGNtbGhibWRzWlZzd1hWMDdYSEpjYmlBZ0lDQmpiMjV6ZENCMGFISmxjMmh2YkdSQ0lEMGdkR2hwY3k1ZmRHaHlaWE5vYjJ4a2MxdDBjbWxoYm1kc1pWc3hYVjA3WEhKY2JpQWdJQ0JqYjI1emRDQjBhSEpsYzJodmJHUkRJRDBnZEdocGN5NWZkR2h5WlhOb2IyeGtjMXQwY21saGJtZHNaVnN5WFYwN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2MzUmhkR1ZCSUQwZ2RHaHBjeTVmYzNSaGRHVnpMbWRsZENoMGFISmxjMmh2YkdSQkxtNWhiV1VwTzF4eVhHNGdJQ0FnWTI5dWMzUWdjM1JoZEdWQ0lEMGdkR2hwY3k1ZmMzUmhkR1Z6TG1kbGRDaDBhSEpsYzJodmJHUkNMbTVoYldVcE8xeHlYRzRnSUNBZ1kyOXVjM1FnYzNSaGRHVkRJRDBnZEdocGN5NWZjM1JoZEdWekxtZGxkQ2gwYUhKbGMyaHZiR1JETG01aGJXVXBPMXh5WEc1Y2NseHVJQ0FnSUhOMFlYUmxRUzV6WlhSWFpXbG5hSFFvZDJWcFoyaDBRU2s3WEhKY2JpQWdJQ0J6ZEdGMFpVSXVjMlYwVjJWcFoyaDBLSGRsYVdkb2RFSXBPMXh5WEc0Z0lDQWdjM1JoZEdWRExuTmxkRmRsYVdkb2RDaDNaV2xuYUhSREtUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXpaWFJRYUdGelpVeGxZV1JUZEdGMFpTaGNjbHh1SUNBZ0lDQWdXM04wWVhSbFFTd2djM1JoZEdWQ0xDQnpkR0YwWlVOZExGeHlYRzRnSUNBZ0lDQmJkR2h5WlhOb2IyeGtRUzV3YUdGelpVMWhkR05vTENCMGFISmxjMmh2YkdSQ0xuQm9ZWE5sVFdGMFkyZ3NJSFJvY21WemFHOXNaRU11Y0doaGMyVk5ZWFJqYUYxY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkVaWFJsY20xcGJtVnpJSFJvWlNCamJHOXpaWE4wSUhCdmFXNTBJSGRwZEdocGJpQmhJSFJ5YVdGdVoyeGxJRzltWEhKY2JpQWdJQ29nZEdoeVpYTm9iMnhrY3lCaVlYTmxaQ0J2YmlCMGFHVWdZM1Z5Y21WdWRDQmJlQ3g1WFNCaWJHVnVaRlpoYkhWbGN5QmhibVJjY2x4dUlDQWdLaUIwYUdWdUlITmxkSE1nWW14bGJtUWdkMlZwWjJoMGN5Qm1iM0lnZEdobElHTnZjbkpsYzNCdmJtUnBibWNnYzNSaGRHVnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ2NDQXRJRWRwZG1WdUlGdDRMSGxkSUdKc1pXNWtWbUZzZFdVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjl6WlhSSmJtWnNkV1Z1WTJWRGJHOXpaWE4wVUc5cGJuUkpibFJ5YVdGdVoyeGxjeWh3S1NCN1hISmNiaUFnSUNCc1pYUWdaMnh2WW1Gc1EyeHZjMlZ6ZEZCdmFXNTBJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lHeGxkQ0JuYkc5aVlXeE5hVzVFYVhOMElEMGdUblZ0WW1WeUxsQlBVMGxVU1ZaRlgwbE9Sa2xPU1ZSWk8xeHlYRzRnSUNBZ2JHVjBJR05zYjNObGMzUlVjbWxoYm1kc1pTQTlJQzB4TzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNSeWFXRnVaMnhsY3k1bWIzSkZZV05vS0NoMGNtbGhibWRzWlN3Z2FXNWtaWGdwSUQwK0lIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2NHOXBiblJCSUQwZ1RXRjBhRlYwYVd4ekxtTnNiM05sYzNSUWIybHVkRTl1VEdsdVpTaGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOTJaWEowYVdObGMxdDBjbWxoYm1kc1pWc3dYVjBzWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1WeWRHbGpaWE5iZEhKcFlXNW5iR1ZiTVYxZExGeHlYRzRnSUNBZ0lDQWdJSEJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnY0c5cGJuUkNJRDBnVFdGMGFGVjBhV3h6TG1Oc2IzTmxjM1JRYjJsdWRFOXVUR2x1WlNoY2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MlpYSjBhV05sYzF0MGNtbGhibWRzWlZzeFhWMHNYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbVZ5ZEdsalpYTmJkSEpwWVc1bmJHVmJNbDFkTEZ4eVhHNGdJQ0FnSUNBZ0lIQmNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdjRzlwYm5SRElEMGdUV0YwYUZWMGFXeHpMbU5zYjNObGMzUlFiMmx1ZEU5dVRHbHVaU2hjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWlhKMGFXTmxjMXQwY21saGJtZHNaVnN5WFYwc1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRtVnlkR2xqWlhOYmRISnBZVzVuYkdWYk1GMWRMRnh5WEc0Z0lDQWdJQ0FnSUhCY2NseHVJQ0FnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUdOdmJuTjBJR1JwYzNSQklEMGdUV0YwYUZWMGFXeHpMbVJwYzNSaGJtTmxVM0YxWVhKbFpDaHdiMmx1ZEVFc0lIQXBPMXh5WEc0Z0lDQWdJQ0JqYjI1emRDQmthWE4wUWlBOUlFMWhkR2hWZEdsc2N5NWthWE4wWVc1alpWTnhkV0Z5WldRb2NHOXBiblJDTENCd0tUdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ1pHbHpkRU1nUFNCTllYUm9WWFJwYkhNdVpHbHpkR0Z1WTJWVGNYVmhjbVZrS0hCdmFXNTBReXdnY0NrN1hISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ2JHOWpZV3hEYkc5elpYTjBVRzlwYm5RZ1BTQndiMmx1ZEVNN1hISmNiaUFnSUNBZ0lHeGxkQ0JzYjJOaGJFMXBia1JwYzNRZ1BTQmthWE4wUXp0Y2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNoa2FYTjBRU0E4SUd4dlkyRnNUV2x1UkdsemRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4dlkyRnNRMnh2YzJWemRGQnZhVzUwSUQwZ2NHOXBiblJCTzF4eVhHNGdJQ0FnSUNBZ0lHeHZZMkZzVFdsdVJHbHpkQ0E5SUdScGMzUkJPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUdsbUlDaGthWE4wUWlBOElHeHZZMkZzVFdsdVJHbHpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHeHZZMkZzUTJ4dmMyVnpkRkJ2YVc1MElEMGdjRzlwYm5SQ08xeHlYRzRnSUNBZ0lDQWdJR3h2WTJGc1RXbHVSR2x6ZENBOUlHUnBjM1JDTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb2JHOWpZV3hOYVc1RWFYTjBJRHdnWjJ4dlltRnNUV2x1UkdsemRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdkc2IySmhiRTFwYmtScGMzUWdQU0JzYjJOaGJFMXBia1JwYzNRN1hISmNiaUFnSUNBZ0lDQWdaMnh2WW1Gc1EyeHZjMlZ6ZEZCdmFXNTBJRDBnV3k0dUxteHZZMkZzUTJ4dmMyVnpkRkJ2YVc1MFhUdGNjbHh1SUNBZ0lDQWdJQ0JqYkc5elpYTjBWSEpwWVc1bmJHVWdQU0JwYm1SbGVEdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmYzJWMFNXNW1iSFZsYm1ObFZISnBZVzVuYkdVb1hISmNiaUFnSUNBZ0lIUm9hWE11WDNSeWFXRnVaMnhsYzF0amJHOXpaWE4wVkhKcFlXNW5iR1ZkTEZ4eVhHNGdJQ0FnSUNCbmJHOWlZV3hEYkc5elpYTjBVRzlwYm5SY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkVaWFJsY20xcGJtVnpJSFJvWlNCamJHOXpaWE4wSUhCdmFXNTBJRzl1SUhSb1pTQnNhVzVsSUdadmNtMWxaQ0JpWlhSM1pXVnVJSFJvWlZ4eVhHNGdJQ0FxSUhSM2J5QmliR1Z1WkNCMGFISmxjMmh2YkdSeklHSmhjMlZrSUc5dUlIUm9aU0JqZFhKeVpXNTBJRnQ0TEhsZElHSnNaVzVrVm1Gc2RXVnpJR0Z1WkZ4eVhHNGdJQ0FxSUhSb1pXNGdjMlYwY3lCaWJHVnVaQ0IzWldsbmFIUnpJR1p2Y2lCMGFHVWdZMjl5Y21WemNHOXVaR2x1WnlCemRHRjBaWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeHVkVzFpWlhJK2ZTQndJQzBnUjJsMlpXNGdXM2dzZVYwZ1lteGxibVJXWVd4MVpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNvdlhISmNiaUFnWDNObGRFbHVabXgxWlc1alpVTnNiM05sYzNSUWIybHVkRTl1VEdsdVpTaHdLU0I3WEhKY2JpQWdJQ0JqYjI1emRDQmpiRzl6WlhOMFVHOXBiblFnUFNCTllYUm9WWFJwYkhNdVkyeHZjMlZ6ZEZCdmFXNTBUMjVNYVc1bEtGeHlYRzRnSUNBZ0lDQjBhR2x6TGw5MlpYSjBhV05sYzF0Yk1GMWRMRnh5WEc0Z0lDQWdJQ0IwYUdsekxsOTJaWEowYVdObGMxdGJNVjFkTEZ4eVhHNGdJQ0FnSUNCd1hISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHUnBjM1JCSUQwZ1RXRjBhRlYwYVd4ekxtUnBjM1JoYm1ObFUzRjFZWEpsWkNoMGFHbHpMbDkyWlhKMGFXTmxjMXN3WFN3Z1kyeHZjMlZ6ZEZCdmFXNTBLVHRjY2x4dUlDQWdJR052Ym5OMElHUnBjM1JDSUQwZ1RXRjBhRlYwYVd4ekxtUnBjM1JoYm1ObFUzRjFZWEpsWkNoMGFHbHpMbDkyWlhKMGFXTmxjMXN4WFN3Z1kyeHZjMlZ6ZEZCdmFXNTBLVHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0IzWldsbmFIUkJJRDBnWkdsemRFSWdMeUFvWkdsemRFRWdLeUJrYVhOMFFpazdYSEpjYmlBZ0lDQmpiMjV6ZENCM1pXbG5hSFJDSUQwZ1pHbHpkRUVnTHlBb1pHbHpkRUVnS3lCa2FYTjBRaWs3WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnZEdoeVpYTm9iMnhrUVNBOUlIUm9hWE11WDNSb2NtVnphRzlzWkhOYk1GMDdYSEpjYmlBZ0lDQmpiMjV6ZENCMGFISmxjMmh2YkdSQ0lEMGdkR2hwY3k1ZmRHaHlaWE5vYjJ4a2Mxc3hYVHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0J6ZEdGMFpVRWdQU0IwYUdsekxsOXpkR0YwWlhNdVoyVjBLSFJvY21WemFHOXNaRUV1Ym1GdFpTazdYSEpjYmlBZ0lDQmpiMjV6ZENCemRHRjBaVUlnUFNCMGFHbHpMbDl6ZEdGMFpYTXVaMlYwS0hSb2NtVnphRzlzWkVJdWJtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ2MzUmhkR1ZCTG5ObGRGZGxhV2RvZENoM1pXbG5hSFJCS1R0Y2NseHVJQ0FnSUhOMFlYUmxRaTV6WlhSWFpXbG5hSFFvZDJWcFoyaDBRaWs3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmYzJWMFVHaGhjMlZNWldGa1UzUmhkR1VvWEhKY2JpQWdJQ0FnSUZ0emRHRjBaVUVzSUhOMFlYUmxRbDBzWEhKY2JpQWdJQ0FnSUZ0MGFISmxjMmh2YkdSQkxuQm9ZWE5sVFdGMFkyZ3NJSFJvY21WemFHOXNaRUl1Y0doaGMyVk5ZWFJqYUYxY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRaWFJ6SUdFZ2JHVmhaQ0J3YUdGelpTQnpkR0YwWlNCcFppQjBhR1VnWTI5dVpHbDBhVzl1YzF4eVhHNGdJQ0FxSUdadmNpQndhR0Z6WlMxdFlYUmphR2x1WnlCaGNtVWdjMkYwYVhObWFXVmtMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OFFXSnpkSEpoWTNSQ2JHVnVaRk4wWVhSbFBuMGdjM1JoZEdWeklDMGdVM1JoZEdWeklIUnZYSEpjYmlBZ0lDb2dZMmhsWTJzZ2NHaGhjMlV0YldGMFkyaHBibWNnWTNKcGRHVnlhV0V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhZbTl2YkdWaGJqNTlJSEJvWVhObFRXRjBZMmhsWkNBdElFeHBjM1FnYjJZZ2NHaGhjMlV0YldGMFkyZ2dZbTl2YkdWaGJuTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcUwxeHlYRzRnSUY5elpYUlFhR0Z6WlV4bFlXUlRkR0YwWlNoemRHRjBaWE1zSUhCb1lYTmxUV0YwWTJobFpDa2dlMXh5WEc0Z0lDQWdiR1YwSUcxaGVDQTlJREE3WEhKY2JpQWdJQ0J6ZEdGMFpYTXVabTl5UldGamFDZ29jM1JoZEdVc0lHbHVaR1Y0S1NBOVBpQjdYSEpjYmlBZ0lDQWdJR2xtSUNod2FHRnpaVTFoZEdOb1pXUmJhVzVrWlhoZElDWW1JSE4wWVhSbExuZGxhV2RvZENBK0lHMWhlQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCb1lYTmxUR1ZoWkZOMFlYUmxJRDBnYzNSaGRHVTdYSEpjYmlBZ0lDQWdJQ0FnYldGNElEMGdjM1JoZEdVdWQyVnBaMmgwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFSnNaVzVrTW1SVGRHRjBaVHRjY2x4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVGdFlYcHZiaTVqYjIwc0lFbHVZeTRnYjNJZ2FYUnpJR0ZtWm1sc2FXRjBaWE11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhISmNiaTh2SUZOUVJGZ3RUR2xqWlc1elpTMUpaR1Z1ZEdsbWFXVnlPaUJOU1ZRdE1GeHlYRzVwYlhCdmNuUWdRV0p6ZEhKaFkzUkNiR1Z1WkZOMFlYUmxJR1p5YjIwZ0p5NHZjM1JoZEdVdlFXSnpkSEpoWTNSQ2JHVnVaRk4wWVhSbEp6dGNjbHh1YVcxd2IzSjBJRUZ1YVcxaGRHbHZibEJzWVhsbGNrbHVkR1Z5Wm1GalpTQm1jbTl0SUNjdUwwRnVhVzFoZEdsdmJsQnNZWGxsY2tsdWRHVnlabUZqWlNjN1hISmNibWx0Y0c5eWRDQkJibWx0WVhScGIyNVZkR2xzY3lCbWNtOXRJQ2N1TDBGdWFXMWhkR2x2YmxWMGFXeHpKenRjY2x4dWFXMXdiM0owSUUxaGRHaFZkR2xzY3lCbWNtOXRJQ2N1TGk5TllYUm9WWFJwYkhNbk8xeHlYRzVwYlhCdmNuUWdSR1ZtWlhKeVpXUWdabkp2YlNBbkxpNHZSR1ZtWlhKeVpXUW5PMXh5WEc1cGJYQnZjblFnVTNSaGRHVkRiMjUwWVdsdVpYSkpiblJsY21aaFkyVWdabkp2YlNBbkxpOXpkR0YwWlM5VGRHRjBaVU52Ym5SaGFXNWxja2x1ZEdWeVptRmpaU2M3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUlc1MWJTQm1iM0lnZEhsd1pYTWdiMllnZTBCc2FXNXJJRUZ1YVcxaGRHbHZia3hoZVdWeWZTQmliR1Z1WkdsdVp5NWNjbHh1SUNwY2NseHVJQ29nUUhKbFlXUnZibXg1WEhKY2JpQXFJRUJsYm5WdElIdHpkSEpwYm1kOVhISmNiaUFxTDF4eVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVEdGNVpYSkNiR1Z1WkUxdlpHVnpJRDBnZTA5MlpYSnlhV1JsT2lBblQzWmxjbkpwWkdVbkxDQkJaR1JwZEdsMlpUb2dKMEZrWkdsMGFYWmxKMzA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVkdobElHUmxabUYxYkhRZ1lteGxibVJwYm1jZ2JXOWtaU0I3UUd4cGJtc2dRVzVwYldGMGFXOXVUR0Y1WlhKOUxseHlYRzRnS2x4eVhHNGdLaUJBY21WaFpHOXViSGxjY2x4dUlDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2NseHVJQ292WEhKY2JtVjRjRzl5ZENCamIyNXpkQ0JFWldaaGRXeDBUR0Y1WlhKQ2JHVnVaRTF2WkdVZ1BTQW5UM1psY25KcFpHVW5PMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRU5vWldOcmN5QnBaaUJoSUdkcGRtVnVJR0pzWlc1a1RXOWtaU0JwY3lCd2NtVnpaVzUwSUdsdUlIUm9aU0IyWVd4MVpYTWdiMllnZTBCc2FXNXJJRXhoZVdWeVFteGxibVJOYjJSbGMzMHVYSEpjYmlBcUlFbG1JR2wwSUdsekxDQnlaWFIxY200Z2RHaGxJRzl5YVdkcGJtRnNJSFpoYkhWbExDQnZkR2hsY25kcGMyVWdjbVYwZFhKdUlIdEFiR2x1YXlCRVpXWmhkV3gwVEdGNVpYSkNiR1Z1WkUxdlpHVjlMbHh5WEc0Z0tseHlYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWW14bGJtUk5iMlJsSUMwZ1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUhSNWNHVWdiMllnWW14bGJtUnBibWN1WEhKY2JpQXFYSEpjYmlBcUlFQnlaWFIxY201eklIc29jM1J5YVc1bmZFUmxabUYxYkhSTVlYbGxja0pzWlc1a1RXOWtaU2w5WEhKY2JpQXFMMXh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZDYkdWdVpFMXZaR1VvWW14bGJtUk5iMlJsS1NCN1hISmNiaUFnYVdZZ0tFRnljbUY1TG1aeWIyMG9UMkpxWldOMExuWmhiSFZsY3loTVlYbGxja0pzWlc1a1RXOWtaWE1wS1M1cGJtTnNkV1JsY3loaWJHVnVaRTF2WkdVcEtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1lteGxibVJOYjJSbE8xeHlYRzRnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdSR1ZtWVhWc2RFeGhlV1Z5UW14bGJtUk5iMlJsTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFTnNZWE56SUdadmNpQnRZVzVoWjJsdVp5QmhJSE5sZENCdlppQmhibWx0WVhScGIyNXpJSGRvWlhKbElHOXViSGtnYjI1bElITjBZWFJsSUdOaGJpQmlaU0JoWTNScGRtVWdZWFJjY2x4dUlDb2dZVzU1SUdkcGRtVnVJSFJwYldVdVhISmNiaUFxWEhKY2JpQXFJRUJwYlhCc1pXMWxiblJ6SUVGdWFXMWhkR2x2YmxCc1lYbGxja2x1ZEdWeVptRmpaVnh5WEc0Z0tpQkFhVzF3YkdWdFpXNTBjeUJUZEdGMFpVTnZiblJoYVc1bGNrbHVkR1Z5Wm1GalpWeHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1FXNXBiV0YwYVc5dVRHRjVaWElnWlhoMFpXNWtjeUJCYm1sdFlYUnBiMjVRYkdGNVpYSkpiblJsY21aaFkyVXVUV2w0YVc0b1hISmNiaUFnVTNSaGRHVkRiMjUwWVdsdVpYSkpiblJsY21aaFkyVXVUV2w0YVc0b0tWeHlYRzRwSUh0Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ2IzQjBhVzl1Y3lBdElDQlBjSFJwYjI1eklHWnZjaUIwYUdVZ1lXNXBiV0YwYVc5dUlHeGhlV1Z5TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J2Y0hScGIyNXpMbTVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JzWVhsbGNpNGdUbUZ0WlhNZ2JYVnpkQ0JpWlNCMWJtbHhkV1VnZEc4Z2RHaGxYSEpjYmlBZ0lDb2dZVzVwYldGMGFXOXVJR1psWVhSMWNtVWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdiR0Y1WlhJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0TVlYbGxja0pzWlc1a1RXOWtaWE45SUZ0dmNIUnBiMjV6TG1Kc1pXNWtUVzlrWlQxRVpXWmhkV3gwVEdGNVpYSkNiR1Z1WkUxdlpHVmRJQzFjY2x4dUlDQWdLaUJVZVhCbElHOW1JR0pzWlc1a2FXNW5JSFJ2SUhWelpTQm1iM0lnWVd4c0lITjBZWFJsY3lCamIyNTBjbTlzYkdWa0lHSjVJSFJvWlNCc1lYbGxjaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjl3ZEdsdmJuTXVkMlZwWjJoMFBURmRJQzBnVkdobElHRnRiM1Z1ZENCdlppQnBibVpzZFdWdVkyVWdkR2hsSUd4aGVXVnlKM01nWTNWeWNtVnVkRnh5WEc0Z0lDQXFJR0Z1YVcxaGRHbHZiaUJvWVhNZ2IzWmxjaUIwYUdVZ2NtVnpkV3gwSUdadmNpQjBhR1VnYUc5emRDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1cyOXdkR2x2Ym5NdWRISmhibk5wZEdsdmJsUnBiV1U5TUYwZ0xTQlVhR1VnWkdWbVlYVnNkQ0JoYlc5MWJuUWdiMllnZEdsdFpTQjBieUIxYzJVZ2QyaGxibHh5WEc0Z0lDQXFJSEJzWVhscGJtY2dZVzVrSUhKbGMzVnRhVzVuSUdGdWFXMWhkR2x2Ym5NdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXdkR2x2Ym5NdVpXRnphVzVuUm00Z0xTQlVhR1VnWkdWbVlYVnNkQ0JsWVhOcGJtY2dablZ1WTNScGIyNGdkRzhnZFhObElIZG9aVzVjY2x4dUlDQWdLaUIwY21GdWMybDBhVzl1YVc1bklHSmxkSGRsWlc0Z1lXNXBiV0YwYVc5dWN5QmhibVFnYzJWMGRHbHVaeUJzWVhsbGNpQjNaV2xuYUhRdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpaHZjSFJwYjI1ektUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCdmNIUnBiMjV6TG01aGJXVWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lDZEJibWx0WVhScGIyNU1ZWGxsY2ljZ09pQnZjSFJwYjI1ekxtNWhiV1U3WEhKY2JpQWdJQ0IwYUdsekxsOWliR1Z1WkUxdlpHVWdQU0JCY25KaGVTNW1jbTl0S0U5aWFtVmpkQzUyWVd4MVpYTW9UR0Y1WlhKQ2JHVnVaRTF2WkdWektTa3VhVzVqYkhWa1pYTW9YSEpjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVZbXhsYm1STmIyUmxYSEpjYmlBZ0lDQXBYSEpjYmlBZ0lDQWdJRDhnYjNCMGFXOXVjeTVpYkdWdVpFMXZaR1ZjY2x4dUlDQWdJQ0FnT2lCRVpXWmhkV3gwVEdGNVpYSkNiR1Z1WkUxdlpHVTdYSEpjYmlBZ0lDQjBhR2x6TGw5d2NtOXRhWE5sY3lBOUlIdGNjbHh1SUNBZ0lDQWdkMlZwWjJoME9pQkVaV1psY25KbFpDNXlaWE52YkhabEtDa3NYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1ZmQyVnBaMmgwVUdGMWMyVmtJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NTNaV2xuYUhRZ1BTQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1M1pXbG5hSFFnUFQwOUlDZHVkVzFpWlhJbklEOGdiM0IwYVc5dWN5NTNaV2xuYUhRZ09pQXhPMXh5WEc0Z0lDQWdkR2hwY3k1ZmFXNTBaWEp1WVd4WFpXbG5hSFFnUFNCMGFHbHpMbDkzWldsbmFIUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklIUm9aU0IwZVhCbElHOW1JR0pzWlc1a2FXNW5JSFZ6WldRZ1ptOXlJSE4wWVhSbGN5QmpiMjUwY205c2JHVmtJR0o1SUhSb1pTQnNZWGxsY2k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpXRmtiMjVzZVZ4eVhHNGdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJR0pzWlc1a1RXOWtaU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWliR1Z1WkUxdlpHVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklHRnVaQ0J6WlhSeklIUm9aU0JoYlc5MWJuUWdiMllnYVc1bWJIVmxibU5sSUhSb1pTQnNZWGxsY2lkeklHTjFjbkpsYm5RZ1lXNXBiV0YwYVc5dUlHaGhjeUJ2ZG1WeVhISmNiaUFnSUNvZ2RHaGxJSEpsYzNWc2RDQm1iM0lnZEdobElHaHZjM1F1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHlYRzRnSUNBcUwxeHlYRzRnSUhObGRDQjNaV2xuYUhRb2QyVnBaMmgwS1NCN1hISmNiaUFnSUNCMGFHbHpMbDkzWldsbmFIUWdQU0JOWVhSb1ZYUnBiSE11WTJ4aGJYQW9kMlZwWjJoMExDQXdMQ0F4S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRDQjNaV2xuYUhRb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZDJWcFoyaDBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QjNhR1YwYUdWeUlHOXlJRzV2ZENCMGFHVWdiR0Y1WlhJbmN5QjNaV2xuYUhRZ2RtRnNkV1VnYVhNZ1kzVnljbVZ1ZEd4NUlHSmxhVzVuSUdGdWFXMWhkR1ZrTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbFlXUnZibXg1WEhKY2JpQWdJQ29nUUhSNWNHVWdlMkp2YjJ4bFlXNTlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJSGRsYVdkb2RGQmxibVJwYm1jb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0hKdmJXbHpaWE11ZDJWcFoyaDBJQ1ltSUhSb2FYTXVYM0J5YjIxcGMyVnpMbmRsYVdkb2RDNXdaVzVrYVc1bk8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVR0YxYzJVZ2RHaGxJR04xY25KbGJuUWdZVzVwYldGMGFXOXVJSE4wWVhSbElHRnVaQ0JoYm5rZ2FXNTBaWEp3YjJ4aGRHbHZiaUJvWVhCd1pXNXBibWNnYjI0Z2RHaGxJR3hoZVdWeUozTmNjbHh1SUNBZ0tpQjNaV2xuYUhRZ2NISnZjR1Z5ZEhrdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0J3WVhWelpTZ3BJSHRjY2x4dUlDQWdJSFJvYVhNdVgzQmhkWE5sWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0IwYUdsekxsOTNaV2xuYUhSUVlYVnpaV1FnUFNCMGNuVmxPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmhkWE5sUVc1cGJXRjBhVzl1S0NrZ2ZId2dkR2hwY3k1M1pXbG5hSFJRWlc1a2FXNW5PMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WemRXMWxJSFJvWlNCamRYSnlaVzUwSUdGdWFXMWhkR2x2YmlCemRHRjBaU0JoYm1RZ1lXNTVJR2x1ZEdWeWNHOXNZWFJwYjI0Z2FHRndjR1Z1YVc1bklHOXVJSFJvWlNCc1lYbGxjaWR6WEhKY2JpQWdJQ29nZDJWcFoyaDBJSEJ5YjNCbGNuUjVMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NtVnpkVzFsS0NrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmY0dGMWMyVmtJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQjBhR2x6TGw5M1pXbG5hSFJRWVhWelpXUWdQU0JtWVd4elpUdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQnBjMWRsYVdkb2RFRmpkR2wyWlNBOUlIUm9hWE11ZDJWcFoyaDBVR1Z1WkdsdVp6dGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmWTNWeWNtVnVkRk4wWVhSbEtTQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGMzVnRaVUZ1YVcxaGRHbHZiaWdwSUh4OElHbHpWMlZwWjJoMFFXTjBhWFpsTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR2x6VjJWcFoyaDBRV04wYVhabE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dWWEJrWVhSbGN5QjBhR1VnZFhObGNpQmtaV1pwYm1Wa0lIZGxhV2RvZENCdmRtVnlJSFJwYldVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnZDJWcFoyaDBJQzBnVkdobElIUmhjbWRsZENCM1pXbG5hSFFnZG1Gc2RXVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHpaV052Ym1SelBUQmRJQzBnVkdobElHRnRiM1Z1ZENCdlppQjBhVzFsSUdsMElIZHBiR3dnZEdGclpTQjBieUJ5WldGamFDQjBhR1ZjY2x4dUlDQWdLaUIwWVhKblpYUWdkMlZwWjJoMExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQmxZWE5wYm1kR2JpQXRJRlJvWlNCbFlYTnBibWNnWm5WdVkzUnBiMjRnZEc4Z2RYTmxJR1p2Y2lCcGJuUmxjbkJ2YkdGMGFXOXVMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMFJsWm1WeWNtVmtmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lITmxkRmRsYVdkb2RDaDNaV2xuYUhRc0lITmxZMjl1WkhNZ1BTQXdMQ0JsWVhOcGJtZEdiaWtnZTF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZDJWcFoyaDBVR1Z1WkdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NTNaV2xuYUhRdVkyRnVZMlZzS0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdkMlZwWjJoMElEMGdUV0YwYUZWMGFXeHpMbU5zWVcxd0tIZGxhV2RvZENrN1hISmNiaUFnSUNCMGFHbHpMbDl3Y205dGFYTmxjeTUzWldsbmFIUWdQU0JCYm1sdFlYUnBiMjVWZEdsc2N5NXBiblJsY25CdmJHRjBaVkJ5YjNCbGNuUjVLRnh5WEc0Z0lDQWdJQ0IwYUdsekxGeHlYRzRnSUNBZ0lDQW5kMlZwWjJoMEp5eGNjbHh1SUNBZ0lDQWdkMlZwWjJoMExGeHlYRzRnSUNBZ0lDQjdYSEpjYmlBZ0lDQWdJQ0FnYzJWamIyNWtjeXhjY2x4dUlDQWdJQ0FnSUNCbFlYTnBibWRHYmpvZ1pXRnphVzVuUm00Z0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUdWaGMybHVaMFp1SURvZ2RHaHBjeTVmWldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNCeWIyMXBjMlZ6TG5kbGFXZG9kRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZCaGRYTmxJR0Z1ZVNCcGJuUmxjbkJ2YkdGMGFXOXVJR2hoY0hCbGJtbHVaeUJ2YmlCMGFHVWdiR0Y1WlhJbmN5QjNaV2xuYUhRZ2NISnZjR1Z5ZEhrdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0J3WVhWelpWZGxhV2RvZENncElIdGNjbHh1SUNBZ0lIUm9hWE11WDNkbGFXZG9kRkJoZFhObFpDQTlJSFJ5ZFdVN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZDJWcFoyaDBVR1Z1WkdsdVp6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsYzNWdFpTQmhibmtnYVc1MFpYSndiMnhoZEdsdmJpQm9ZWEJ3Wlc1cGJtY2diMjRnZEdobElHeGhlV1Z5SjNNZ2QyVnBaMmgwSUhCeWIzQmxjblI1TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ292WEhKY2JpQWdjbVZ6ZFcxbFYyVnBaMmgwS0NrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmZDJWcFoyaDBVR0YxYzJWa0lEMGdabUZzYzJVN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZDJWcFoyaDBVR1Z1WkdsdVp6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRTExYkhScGNHeHBaWE1nZEdobElIVnpaWElnZDJWcFoyaDBJR0o1SUdFZ1ptRmpkRzl5SUhSdklHUmxkR1Z5YldsdVpTQjBhR1VnYVc1MFpYSnVZV3dnZDJWcFoyaDBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHWmhZM1J2Y2lBdElEQXRNU0J0ZFd4MGFYQnNhV1Z5SUhSdklHRndjR3g1SUhSdklIUm9aU0IxYzJWeUlIZGxhV2RvZEM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0IxY0dSaGRHVkpiblJsY201aGJGZGxhV2RvZENobVlXTjBiM0lwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYMmx1ZEdWeWJtRnNWMlZwWjJoMElEMGdkR2hwY3k1ZmQyVnBaMmgwSUNvZ1ptRmpkRzl5TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWpkWEp5Wlc1MFUzUmhkR1VwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRk4wWVhSbExuVndaR0YwWlVsdWRHVnlibUZzVjJWcFoyaDBLSFJvYVhNdVgybHVkR1Z5Ym1Gc1YyVnBaMmgwS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJRzVoYldWeklHOW1JR0pzWlc1a0lITjBZWFJsY3lCcGJpQmhiaUJoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZVzVwYldGMGFXOXVUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR0Z1YVcxaGRHbHZiaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRCY25KaGVTNDhjM1J5YVc1blBuMGdMU0JPWVcxbGN5QnZaaUJpYkdWdVpDQnpkR0YwWlhNdVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMFFXNXBiV0YwYVc5dVFteGxibVJPWVcxbGN5aGhibWx0WVhScGIyNU9ZVzFsS1NCN1hISmNiaUFnSUNCamIyNXpkQ0J6ZEdGMFpTQTlJSFJvYVhNdVoyVjBVM1JoZEdVb1lXNXBiV0YwYVc5dVRtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSE4wWVhSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1oyVjBJR0pzWlc1a0lHNWhiV1Z6SUc5bUlHRnVhVzFoZEdsdmJpQWtlMkZ1YVcxaGRHbHZiazVoYldWOUlHOXVJR3hoZVdWeUlDUjdkR2hwY3k1dVlXMWxmUzRnVG04Z1lXNXBiV0YwYVc5dUlHVjRhWE4wY3lCM2FYUm9JSFJvYVhNZ2JtRnRaUzVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhV1lnS0hOMFlYUmxJR2x1YzNSaGJtTmxiMllnUVdKemRISmhZM1JDYkdWdVpGTjBZWFJsS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCemRHRjBaUzVuWlhSVGRHRjBaVTVoYldWektDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0JnUTJGdWJtOTBJR2RsZENCaWJHVnVaQ0J1WVcxbGN5QnZaaUJoYm1sdFlYUnBiMjRnSkh0aGJtbHRZWFJwYjI1T1lXMWxmU0J2YmlCc1lYbGxjaUFrZTNSb2FYTXVibUZ0WlgwdUlFRnVhVzFoZEdsdmJpQnBjeUJ1YjNRZ1lXNGdhVzV6ZEdGdVkyVWdiMllnUVdKemRISmhZM1JDYkdWdVpGTjBZWFJsTG1CY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlZjR1JoZEdVZ2RHaGxJSGRsYVdkb2RDQm1iM0lnWVNCaWJHVnVaQ0J6ZEdGMFpTQnZaaUJoYmlCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWVc1cGJXRjBhVzl1VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUdGdWFXMWhkR2x2YmlCamIyNTBZV2x1YVc1bklIUm9aU0JpYkdWdVpDQnpkR0YwWlZ4eVhHNGdJQ0FxSUhSdklIVndaR0YwWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWW14bGJtUk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZbXhsYm1RZ2MzUmhkR1VnZEc4Z2RYQmtZWFJsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IzWldsbmFIUWdMU0JYWldsbmFIUWdkbUZzZFdVZ2RHOGdjMlYwSUc5dUlIUm9aU0JoYm1sdFlYUnBiMjR1SUZSb2FYTWdiblZ0WW1WeUlITm9iM1ZrYkdRZ1ltVmNjbHh1SUNBZ0tpQnBiaUIwYUdVZ01DMHhJSEpoYm1kbExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5UFgwZ2MyVmpiMjVrY3lBdElFNTFiV0psY2lCdlppQnpaV052Ym1SeklHbDBJSE5vYjNWc1pDQjBZV3RsSUhSdklISmxZV05vSUhSb1pTQnVaWGNnZDJWcFoyaDBMbHh5WEc0Z0lDQXFJRVJsWm1GMWJIUWdhWE1nZW1WeWJ5QmhibVFnZDJsc2JDQnpaWFFnYVcxdFpXUnBZWFJsYkhrdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHVmhjMmx1WjBadUlDMGdSV0Z6YVc1bklHWjFibU4wYVc5dUlIUnZJSFZ6WlNCM2FHbHNaU0JwYm5SbGNuQnZiR0YwYVc1bklIUm9aU0J1WlhkY2NseHVJQ0FnS2lCM1pXbG5hSFF1SUVSbFptRjFiSFFnYVhNZ1JXRnphVzVuTGt4cGJtVmhjaTVKYms5MWRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEVaV1psY25KbFpIMGdMU0JRY205dGFYTmxJSFJvWVhRZ2QybHNiQ0J5WlhOdmJIWmxJRzl1WTJVZ2RHaGxJR0Z1YVcxaGRHbHZiaWR6SUhkbGFXZG9kQ0J5WldGamFHVnpYSEpjYmlBZ0lDb2dkR2hsSUhSaGNtZGxkQ0IyWVd4MVpTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCelpYUkJibWx0WVhScGIyNUNiR1Z1WkZkbGFXZG9kQ2hjY2x4dUlDQWdJR0Z1YVcxaGRHbHZiazVoYldVc1hISmNiaUFnSUNCaWJHVnVaRTVoYldVc1hISmNiaUFnSUNCM1pXbG5hSFFzWEhKY2JpQWdJQ0J6WldOdmJtUnpJRDBnTUN4Y2NseHVJQ0FnSUdWaGMybHVaMFp1WEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0JqYjI1emRDQnpkR0YwWlNBOUlIUm9hWE11WjJWMFUzUmhkR1VvWVc1cGJXRjBhVzl1VG1GdFpTazdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tITjBZWFJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnYzJWMElHSnNaVzVrSUhkbGFXZG9kQ0J2WmlCaGJtbHRZWFJwYjI0Z0pIdGhibWx0WVhScGIyNU9ZVzFsZlNCdmJpQnNZWGxsY2lBa2UzUm9hWE11Ym1GdFpYMHVJRTV2SUdGdWFXMWhkR2x2YmlCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2h6ZEdGMFpTQnBibk4wWVc1alpXOW1JRUZpYzNSeVlXTjBRbXhsYm1SVGRHRjBaU2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnYzNSaGRHVXVjMlYwUW14bGJtUlhaV2xuYUhRb1lteGxibVJPWVcxbExDQjNaV2xuYUhRc0lITmxZMjl1WkhNc0lHVmhjMmx1WjBadUtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJR0JEWVc1dWIzUWdjMlYwSUdKc1pXNWtJSGRsYVdkb2RDQnZaaUJoYm1sdFlYUnBiMjRnSkh0aGJtbHRZWFJwYjI1T1lXMWxmU0J2YmlCc1lYbGxjaUFrZTNSb2FYTXVibUZ0WlgwdUlFRnVhVzFoZEdsdmJpQnBjeUJ1YjNRZ1lXNGdhVzV6ZEdGdVkyVWdiMllnUVdKemRISmhZM1JDYkdWdVpGTjBZWFJsTG1CY2NseHVJQ0FnSUNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0IzWldsbmFIUWdabTl5SUdFZ1lteGxibVFnYzNSaGRHVWdiMllnWVc0Z1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdGdWFXMWhkR2x2Yms1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCaGJtbHRZWFJwYjI0Z1kyOXVkR0ZwYm1sdVp5QjBhR1VnWW14bGJtUWdjM1JoZEdWY2NseHVJQ0FnS2lCMGJ5QjFjR1JoZEdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdKc1pXNWtUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR0pzWlc1a0lITjBZWFJsSUhSdklISmxkSEpwWlhabElIUm9aU0IzWldsbmFIUWdiMll1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlmU0F0SUZkbGFXZG9kQ0J2WmlCMGFHVWdZbXhsYm1RZ2MzUmhkR1V1WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwUVc1cGJXRjBhVzl1UW14bGJtUlhaV2xuYUhRb1lXNXBiV0YwYVc5dVRtRnRaU3dnWW14bGJtUk9ZVzFsS1NCN1hISmNiaUFnSUNCamIyNXpkQ0J6ZEdGMFpTQTlJSFJvYVhNdVoyVjBVM1JoZEdVb1lXNXBiV0YwYVc5dVRtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSE4wWVhSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1oyVjBJR0pzWlc1a0lIZGxhV2RvZENCdlppQmhibWx0WVhScGIyNGdKSHRoYm1sdFlYUnBiMjVPWVcxbGZTQnZiaUJzWVhsbGNpQWtlM1JvYVhNdWJtRnRaWDB1SUU1dklHRnVhVzFoZEdsdmJpQmxlR2x6ZEhNZ2QybDBhQ0IwYUdseklHNWhiV1V1WUZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2xtSUNoemRHRjBaU0JwYm5OMFlXNWpaVzltSUVGaWMzUnlZV04wUW14bGJtUlRkR0YwWlNrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUmhkR1V1WjJWMFFteGxibVJYWldsbmFIUW9ZbXhsYm1ST1lXMWxLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUdCRFlXNXViM1FnWjJWMElHSnNaVzVrSUhkbGFXZG9kQ0J2WmlCaGJtbHRZWFJwYjI0Z0pIdGhibWx0WVhScGIyNU9ZVzFsZlNCdmJpQnNZWGxsY2lBa2UzUm9hWE11Ym1GdFpYMHVJRUZ1YVcxaGRHbHZiaUJwY3lCdWIzUWdZVzRnYVc1emRHRnVZMlVnYjJZZ1FXSnpkSEpoWTNSQ2JHVnVaRk4wWVhSbExtQmNjbHh1SUNBZ0lDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJWY0dSaGRHVWdZVzU1SUhkbGFXZG9kQ0JwYm5SbGNuQnZiR0YwYjNKeklHRnVaQ0IwYUdVZ1kzVnljbVZ1ZENCaGJtbHRZWFJwYjI0dVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnWkdWc2RHRlVhVzFsSUMwZ1ZHbHRaU0JwYmlCdGFXeHNhWE5sWTI5dVpITWdjMmx1WTJVZ2RHaGxJR3hoYzNRZ2RYQmtZWFJsTGx4eVhHNGdJQ0FxTDF4eVhHNGdJSFZ3WkdGMFpTaGtaV3gwWVZScGJXVXBJSHRjY2x4dUlDQWdJSE4xY0dWeUxuVndaR0YwWlNoa1pXeDBZVlJwYldVcE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNnaGRHaHBjeTVmY0dGMWMyVmtJQ1ltSUNGMGFHbHpMbDkzWldsbmFIUlFZWFZ6WldRcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmNISnZiV2x6WlhNdWQyVnBaMmgwTG1WNFpXTjFkR1VvWkdWc2RHRlVhVzFsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFTmhibU5sYkNCaGJua2djR1Z1WkdsdVp5QndjbTl0YVhObGN5QmhibVFnWkdselkyRnlaQ0J6ZEdGMFpYTWdZMjl1ZEhKdmJHeGxaQ0JpZVNCMGFHVWdiR0Y1WlhJdVhISmNiaUFnSUNvdlhISmNiaUFnWkdselkyRnlaQ2dwSUh0Y2NseHVJQ0FnSUhOMWNHVnlMbVJwYzJOaGNtUW9LVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbVJwYzJOaGNtUlRkR0YwWlhNb0tUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NTNaV2xuYUhRdVkyRnVZMlZzS0NrN1hISmNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NWZjSEp2YldselpYTTdYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkJibWx0WVhScGIyNU1ZWGxsY2p0Y2NseHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFRnRZWHB2Ymk1amIyMHNJRWx1WXk0Z2IzSWdhWFJ6SUdGbVptbHNhV0YwWlhNdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYSEpjYmk4dklGTlFSRmd0VEdsalpXNXpaUzFKWkdWdWRHbG1hV1Z5T2lCTlNWUXRNRnh5WEc1cGJYQnZjblFnUkdWbVpYSnlaV1FnWm5KdmJTQW5ZMjl5WlM5RVpXWmxjbkpsWkNjN1hISmNibWx0Y0c5eWRDQkJZbk4wY21GamRGTjBZWFJsSUdaeWIyMGdKeTR2UVdKemRISmhZM1JUZEdGMFpTYzdYSEpjYm1sdGNHOXlkQ0I3ZG1Gc2FXUmhkR1ZDYkdWdVpFMXZaR1Y5SUdaeWIyMGdKeTR1TDBGdWFXMWhkR2x2Ymt4aGVXVnlKenRjY2x4dWFXMXdiM0owSUVGdWFXMWhkR2x2YmxWMGFXeHpJR1p5YjIwZ0p5NHVMMEZ1YVcxaGRHbHZibFYwYVd4ekp6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRiR0Z6Y3lCbWIzSWdjR3hoZVdsdVp5QmhJSE5wYm1kc1pTQmhibWx0WVhScGIyNGdZMnhwY0M1Y2NseHVJQ3BjY2x4dUlDb2dRR1Y0ZEdWdVpITWdRV0p6ZEhKaFkzUlRkR0YwWlZ4eVhHNGdLaUJBWVd4cFlYTWdZMjl5WlM5VGFXNW5iR1ZUZEdGMFpWeHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1UybHVaMnhsVTNSaGRHVWdaWGgwWlc1a2N5QkJZbk4wY21GamRGTjBZWFJsSUh0Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQVkyOXVjM1J5ZFdOMGIzSmNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ2IzQjBhVzl1Y3lBdElFOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCaGJtbHRZWFJwYjI0Z2MzUmhkR1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtYzlmU0J2Y0hScGIyNXpMbTVoYldVZ0xTQk9ZVzFsSUdadmNpQjBhR1VnWVc1cGJXRjBhVzl1SUhOMFlYUmxMaUJPWVcxbGN5QnRkWE4wSUdKbFhISmNiaUFnSUNvZ2RXNXBjWFZsSUdadmNpQjBhR1VnYkdGNVpYSWdkR2hsSUhOMFlYUmxJR2x6SUdGd2NHeHBaV1FnZEc4dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0M1pXbG5hSFI5SUZ0dmNIUnBiMjV6TG5kbGFXZG9kRDB3WFNBdElGUm9aU0F3TFRFZ1lXMXZkVzUwSUc5bUlHbHVabXgxWlc1alpTQjBhR1VnYzNSaGRHVWdkMmxzYkNCb1lYWmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdkR2x0WlZOallXeGxmU0JiYjNCMGFXOXVjeTUwYVcxbFUyTmhiR1U5TVYwZ0xTQkdZV04wYjNJZ2RHOGdjMk5oYkdVZ2RHaGxJSEJzWVhsaVlXTnJJSE53WldWa0lHOW1JSFJvWlZ4eVhHNGdJQ0FxSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzI5d2RHbHZibk11Ykc5dmNFTnZkVzUwUFVsdVptbHVhWFI1WFNBdElFNTFiV0psY2lCdlppQjBhVzFsY3lCMGFHVWdZVzVwYldGMGFXOXVJSE5vYjNWc1pGeHlYRzRnSUNBcUlISmxjR1ZoZENCaVpXWnZjbVVnWm1sdWFYTm9hVzVuTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTVpYkdWdVpFMXZaR1U5UkdWbVlYVnNkRXhoZVdWeVFteGxibVJOYjJSbFhTQXRJRlI1Y0dVZ2IyWmNjbHh1SUNBZ0tpQmliR1Z1WkdsdVp5QjBhR1VnWVc1cGJXRjBhVzl1SUhOb2IzVnNaQ0IxYzJVdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpaHZjSFJwYjI1ektUdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOTBhVzFsVTJOaGJHVWdQU0J2Y0hScGIyNXpMblJwYldWVFkyRnNaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lEOGdiM0IwYVc5dWN5NTBhVzFsVTJOaGJHVWdPaUF4TzF4eVhHNGdJQ0FnZEdocGN5NWZjSEp2YldselpYTXVkR2x0WlZOallXeGxJRDBnUkdWbVpYSnlaV1F1Y21WemIyeDJaU2dwTzF4eVhHNGdJQ0FnZEdocGN5NWZiRzl2Y0VOdmRXNTBJRDFjY2x4dUlDQWdJQ0FnYjNCMGFXOXVjeTVzYjI5d1EyOTFiblFnSVQwOUlIVnVaR1ZtYVc1bFpDQS9JRzl3ZEdsdmJuTXViRzl2Y0VOdmRXNTBJRG9nU1c1bWFXNXBkSGs3WEhKY2JpQWdJQ0IwYUdsekxsOWliR1Z1WkUxdlpHVWdQU0IyWVd4cFpHRjBaVUpzWlc1a1RXOWtaU2h2Y0hScGIyNXpMbUpzWlc1a1RXOWtaU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSFpYUnpJR0Z1WkNCelpYUnpJSFJvWlNCdWIzSnRZV3hwZW1Wa0lIQnNZWGxwYm1jZ2RHbHRaU0J2WmlCMGFHVWdZM1Z5Y21WdWRDQmhibWx0WVhScGIyNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQjBlWEJsSUh0dWRXMWlaWEo5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUc1dmNtMWhiR2w2WldSVWFXMWxLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJREE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6WlhRZ2JtOXliV0ZzYVhwbFpGUnBiV1VvZEdsdFpTa2dlMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QmhibVFnYzJWMGN5QjBhR1VnWVNCbVlXTjBiM0lnZEc4Z2MyTmhiR1VnWVc1cGJXRjBhVzl1SUhCc1lYbGlZV05ySUhOd1pXVmtJSGRwZEdndVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0IwYVcxbFUyTmhiR1VvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZkR2x0WlZOallXeGxPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjMlYwSUhScGJXVlRZMkZzWlNoMGFXMWxVMk5oYkdVcElIdGNjbHh1SUNBZ0lIUm9hWE11WDNScGJXVlRZMkZzWlNBOUlIUnBiV1ZUWTJGc1pUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdobElIUnBiV1ZUWTJGc1pTQnBjeUJqZFhKeVpXNTBiSGtnWW1WcGJtY2dZVzVwYldGMFpXUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNjbHh1SUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2RHbHRaVk5qWVd4bFVHVnVaR2x1WnlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl3Y205dGFYTmxjeTUwYVcxbFUyTmhiR1V1Y0dWdVpHbHVaenRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZWd1pHRjBaWE1nZEdobElIUnBiV1ZUWTJGc1pTQjJZV3gxWlNCdmRtVnlJSFJwYldVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnZDJWcFoyaDBJQzBnVkdobElIUmhjbWRsZENCMGFXMWxVMk5oYkdVZ2RtRnNkV1V1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR6WldOdmJtUnpQVEJkSUMwZ1ZHaGxJR0Z0YjNWdWRDQnZaaUIwYVcxbElHbDBJSGRwYkd3Z2RHRnJaU0IwYnlCeVpXRmphQ0IwYUdWY2NseHVJQ0FnS2lCMFlYSm5aWFFnZEdsdFpWTmpZV3hsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCbFlYTnBibWRHYmlBdElGUm9aU0JsWVhOcGJtY2dablZ1WTNScGIyNGdkRzhnZFhObElHWnZjaUJwYm5SbGNuQnZiR0YwYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwUmxabVZ5Y21Wa2ZWeHlYRzRnSUNBcUwxeHlYRzRnSUhObGRGUnBiV1ZUWTJGc1pTaDBhVzFsVTJOaGJHVXNJSE5sWTI5dVpITWdQU0F3TENCbFlYTnBibWRHYmlrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmY0hKdmJXbHpaWE11ZEdsdFpWTmpZV3hsTG1OaGJtTmxiQ2dwTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNCeWIyMXBjMlZ6TG5ScGJXVlRZMkZzWlNBOUlFRnVhVzFoZEdsdmJsVjBhV3h6TG1sdWRHVnljRzlzWVhSbFVISnZjR1Z5ZEhrb1hISmNiaUFnSUNBZ0lIUm9hWE1zWEhKY2JpQWdJQ0FnSUNkMGFXMWxVMk5oYkdVbkxGeHlYRzRnSUNBZ0lDQjBhVzFsVTJOaGJHVXNYSEpjYmlBZ0lDQWdJSHR6WldOdmJtUnpMQ0JsWVhOcGJtZEdibjFjY2x4dUlDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjIxcGMyVnpMblJwYldWVFkyRnNaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdZVzVrSUhObGRITWdkR2hsSUc1MWJXSmxjaUJ2WmlCMGFXMWxjeUIwYUdVZ1lXNXBiV0YwYVc5dUlIZHBiR3dnY21Wd1pXRjBJR0psWm05eVpTQm1hVzVwYzJocGJtY3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFkSGx3WlNCN2JuVnRZbVZ5ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCc2IyOXdRMjkxYm5Rb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkc5dmNFTnZkVzUwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYzJWMElHeHZiM0JEYjNWdWRDaHNiMjl3UTI5MWJuUXBJSHRjY2x4dUlDQWdJSFJvYVhNdVgyeHZiM0JEYjNWdWRDQTlJR3h2YjNCRGIzVnVkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkR2hsSUhSNWNHVWdiMllnWW14bGJtUnBibWNnZFhObFpDQm1iM0lnZEdobElHRnVhVzFoZEdsdmJpNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaV0ZrYjI1c2VWeHlYRzRnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUdKc1pXNWtUVzlrWlNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlpYkdWdVpFMXZaR1U3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUYVc1bmJHVlRkR0YwWlR0Y2NseHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFRnRZWHB2Ymk1amIyMHNJRWx1WXk0Z2IzSWdhWFJ6SUdGbVptbHNhV0YwWlhNdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYSEpjYmk4dklGTlFSRmd0VEdsalpXNXpaUzFKWkdWdWRHbG1hV1Z5T2lCTlNWUXRNRnh5WEc1cGJYQnZjblFnUVdKemRISmhZM1JUZEdGMFpTQm1jbTl0SUNjdUwwRmljM1J5WVdOMFUzUmhkR1VuTzF4eVhHNXBiWEJ2Y25RZ1UzUmhkR1ZEYjI1MFlXbHVaWEpKYm5SbGNtWmhZMlVnWm5KdmJTQW5MaTlUZEdGMFpVTnZiblJoYVc1bGNrbHVkR1Z5Wm1GalpTYzdYSEpjYm1sdGNHOXlkQ0JCYm1sdFlYUnBiMjVRYkdGNVpYSkpiblJsY21aaFkyVWdabkp2YlNBbkxpNHZRVzVwYldGMGFXOXVVR3hoZVdWeVNXNTBaWEptWVdObEp6dGNjbHh1YVcxd2IzSjBJRlYwYVd4eklHWnliMjBnSnk0dUx5NHVMMVYwYVd4ekp6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRiR0Z6Y3lCbWIzSWdjR3hoZVdsdVp5QnlZVzVrYjIwZ1lXNXBiV0YwYVc5dWN5QmhkQ0J5WVc1a2IyMGdhVzUwWlhKMllXeHpJSGRwZEdocGJpQjBhR2x6SUhOMFlYUmxMbHh5WEc0Z0tseHlYRzRnS2lCQVpYaDBaVzVrY3lCQlluTjBjbUZqZEZOMFlYUmxYSEpjYmlBcUlFQnBiWEJzWlcxbGJuUnpJRUZ1YVcxaGRHbHZibEJzWVhsbGNrbHVkR1Z5Wm1GalpWeHlYRzRnS2lCQWFXMXdiR1Z0Wlc1MGN5QlRkR0YwWlVOdmJuUmhhVzVsY2tsdWRHVnlabUZqWlZ4eVhHNGdLaTljY2x4dVkyeGhjM01nVW1GdVpHOXRRVzVwYldGMGFXOXVVM1JoZEdVZ1pYaDBaVzVrY3lCQmJtbHRZWFJwYjI1UWJHRjVaWEpKYm5SbGNtWmhZMlV1VFdsNGFXNG9VM1JoZEdWRGIyNTBZV2x1WlhKSmJuUmxjbVpoWTJVdVRXbDRhVzRvUVdKemRISmhZM1JUZEdGMFpTa3BJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBWTI5dWMzUnlkV04wYjNKY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiYjNCMGFXOXVjejE3ZlYwZ0xTQlBjSFJwYjI1eklHWnZjaUIwYUdVZ1kyOXVkR0ZwYm1WeUlITjBZWFJsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JiYjNCMGFXOXVjeTV3YkdGNVNXNTBaWEoyWVd3OU0xMGdMU0JVYUdVZ1ltRnpaU0JoYm1sdFlYUnBiMjRnY0d4aGVXSmhZMnNnYVc1MFpYSjJZV3d1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhRV0p6ZEhKaFkzUlRkR0YwWlQ1OUlGdHpkV0pUZEdGMFpYTTlXMTFkSUMwZ2MzUmhkR1Z6SUhSdklHSmxJSEpoYm1SdmJXeDVJSEJwWTJ0bFpDQjBieUJ3YkdGNVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3lBOUlIdDlMQ0J6ZFdKVGRHRjBaWE1nUFNCYlhTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb2IzQjBhVzl1Y3lrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmNHeGhlVWx1ZEdWeWRtRnNJRDBnYjNCMGFXOXVjeTV3YkdGNVNXNTBaWEoyWVd3Z1B5QnZjSFJwYjI1ekxuQnNZWGxKYm5SbGNuWmhiQ0E2SURNN1hISmNibHh5WEc0Z0lDQWdjM1ZpVTNSaGRHVnpMbVp2Y2tWaFkyZ29jM1JoZEdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0IwYUdsekxtRmtaRk4wWVhSbEtITjBZWFJsS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCaGJtUWdjMlYwY3lCMGFHVWdZbUZ6WlNCaGJtbHRZWFJwYjI0Z2NHeGhlU0JwYm5SbGNuWmhiRnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSFI1Y0dVZ2UyWnNiMkYwZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCd2JHRjVTVzUwWlhKMllXd29LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNHeGhlVWx1ZEdWeWRtRnNPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjMlYwSUhCc1lYbEpiblJsY25aaGJDaHdiR0Y1U1c1MFpYSjJZV3dwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM0JzWVhsSmJuUmxjblpoYkNBOUlIQnNZWGxKYm5SbGNuWmhiRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGMyVjBJSFJvWlNCcGJuUmxjbTVoYkNCMGFXMWxjaUJtYjNJZ1lXNXBiV0YwYVc5dUlIQnNZWGtnYVc1MFpYSjJZV3hjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gzSmxjMlYwVkdsdFpYSW9LU0I3WEhKY2JpQWdJQ0JqYjI1emRDQndiR0Y1VkdsdFpYSWdQU0JWZEdsc2N5NW5aWFJTWVc1a2IyMUdiRzloZENoMGFHbHpMbDl3YkdGNVNXNTBaWEoyWVd3Z0x5QTBMQ0IwYUdsekxsOXdiR0Y1U1c1MFpYSjJZV3dnS2lBeUtUdGNjbHh1SUNBZ0lHTnZibk4wSUc5dVJtbHVhWE5vSUQwZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbkJzWVhsU1lXNWtiMjFCYm1sdFlYUnBiMjRvZEdocGN5NWZjR3hoZVVOaGJHeGlZV05yY3k1dmJrVnljbTl5S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVnpMblJwYldWeUlEMGdWWFJwYkhNdWQyRnBkQ2h3YkdGNVZHbHRaWElzSUh0dmJrWnBibWx6YUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2RYQmtZWFJsU1c1MFpYSnVZV3hYWldsbmFIUW9abUZqZEc5eUtTQjdYSEpjYmlBZ0lDQnpkWEJsY2k1MWNHUmhkR1ZKYm5SbGNtNWhiRmRsYVdkb2RDaG1ZV04wYjNJcE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBVM1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUmxMblZ3WkdGMFpVbHVkR1Z5Ym1Gc1YyVnBaMmgwS0hSb2FYTXVYMmx1ZEdWeWJtRnNWMlZwWjJoMEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkJwWTJzZ1lTQnlZVzVrYjIwZ1lXNXBiV0YwYVc5dUlHRnVaQ0IxZEdsc2FYcGxJRUZ1YVcxaGRHbHZibEJzWVhsbGNrbHVkR1Z5Wm1GalpTQjBieUJ3YkdGNUlIUm9ZWFFnWVc1cGJXRjBhVzl1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjI1RmNuSnZjaUF0SUVaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUhOMFlYUmxJR1Z1WTI5MWJuUmxjbk5jY2x4dUlDQWdLaUJoYmlCbGNuSnZjaUJrZFhKcGJtY2djR3hoZVdKaFkyc3VYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NHeGhlVkpoYm1SdmJVRnVhVzFoZEdsdmJpaHZia1Z5Y205eUtTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5eVpYTmxkRlJwYldWeUtDazdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdjM1JoZEdWeklEMGdkR2hwY3k1blpYUlRkR0YwWlU1aGJXVnpLQ2s3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmWTNWeWNtVnVkRk4wWVhSbEtTQjdYSEpjYmlBZ0lDQWdJSE4wWVhSbGN5NXpjR3hwWTJVb2MzUmhkR1Z6TG1sdVpHVjRUMllvZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFJsTG01aGJXVXBMQ0F4S1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdOdmJuTjBJSEpoYm1SdmJWTjBZWFJsSUQwZ0lITjBZWFJsYzF0VmRHbHNjeTVuWlhSU1lXNWtiMjFKYm5Rb01Dd2djM1JoZEdWekxteGxibWQwYUNsZE8xeHlYRzVjY2x4dUlDQWdJSFJvYVhNdWNHeGhlVUZ1YVcxaGRHbHZiaWh5WVc1a2IyMVRkR0YwWlN3Z2RHaHBjeTVmZEhKaGJuTnBkR2x2YmxScGJXVXNJSFJvYVhNdVgyVmhjMmx1WjBadUxDQjFibVJsWm1sdVpXUXNJRzl1UlhKeWIzSXNJSFZ1WkdWbWFXNWxaQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J3YkdGNUtHOXVSbWx1YVhOb0xDQnZia1Z5Y205eUxDQnZia05oYm1ObGJDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1d2JHRjVVbUZ1Wkc5dFFXNXBiV0YwYVc5dUtHOXVSWEp5YjNJcE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbkJzWVhrb2IyNUdhVzVwYzJnc0lHOXVSWEp5YjNJc0lHOXVRMkZ1WTJWc0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lIQmhkWE5sS0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbkJoZFhObEtDa2dKaVlnZEdocGN5NXdZWFZ6WlVGdWFXMWhkR2x2YmlncE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2NtVnpkVzFsS0c5dVJtbHVhWE5vTENCdmJrVnljbTl5TENCdmJrTmhibU5sYkNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyTjFjbkpsYm5SVGRHRjBaU2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbkpsYzNWdFpVRnVhVzFoZEdsdmJpaDBhR2x6TGw5amRYSnlaVzUwVTNSaGRHVXVibUZ0WlN3Z2RHaHBjeTVmZEhKaGJuTnBkR2x2YmxScGJXVXNJSFJvYVhNdVgyVmhjMmx1WjBadUxDQjFibVJsWm1sdVpXUXNJRzl1UlhKeWIzSXNJSFZ1WkdWbWFXNWxaQ2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdjM1Z3WlhJdWNtVnpkVzFsS0c5dVJtbHVhWE5vTENCdmJrVnljbTl5TENCdmJrTmhibU5sYkNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCallXNWpaV3dvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYzNWd1pYSXVZMkZ1WTJWc0tDa2dKaVlnZEdocGN5NWpZVzVqWld4QmJtbHRZWFJwYjI0b0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITjBiM0FvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYzNWd1pYSXVjM1J2Y0NncElDWW1JSFJvYVhNdWMzUnZjRUZ1YVcxaGRHbHZiaWdwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWkdselkyRnlaQ2dwSUh0Y2NseHVJQ0FnSUhOMWNHVnlMbVJwYzJOaGNtUW9LVHRjY2x4dUlDQWdJSFJvYVhNdVpHbHpZMkZ5WkZOMFlYUmxjeWdwTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnVW1GdVpHOXRRVzVwYldGMGFXOXVVM1JoZEdVN1hISmNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkJiV0Y2YjI0dVkyOXRMQ0JKYm1NdUlHOXlJR2wwY3lCaFptWnBiR2xoZEdWekxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh5WEc0dkx5QlRVRVJZTFV4cFkyVnVjMlV0U1dSbGJuUnBabWxsY2pvZ1RVbFVMVEJjY2x4dWFXMXdiM0owSUVGaWMzUnlZV04wU0c5emRFWmxZWFIxY21VZ1puSnZiU0FuWTI5eVpTOUJZbk4wY21GamRFaHZjM1JHWldGMGRYSmxKenRjY2x4dWFXMXdiM0owSUZWMGFXeHpJR1p5YjIwZ0oyTnZjbVV2VlhScGJITW5PMXh5WEc1cGJYQnZjblFnVVhWbGRXVlRkR0YwWlNCbWNtOXRJQ2N1TDNOMFlYUmxMMUYxWlhWbFUzUmhkR1VuTzF4eVhHNXBiWEJ2Y25RZ1JuSmxaVUpzWlc1a1UzUmhkR1VnWm5KdmJTQW5MaTl6ZEdGMFpTOUdjbVZsUW14bGJtUlRkR0YwWlNjN1hISmNibWx0Y0c5eWRDQkNiR1Z1WkRGa1UzUmhkR1VnWm5KdmJTQW5MaTl6ZEdGMFpTOUNiR1Z1WkRGa1UzUmhkR1VuTzF4eVhHNXBiWEJ2Y25RZ1FteGxibVF5WkZOMFlYUmxJR1p5YjIwZ0p5NHZjM1JoZEdVdlFteGxibVF5WkZOMFlYUmxKenRjY2x4dWFXMXdiM0owSUZOcGJtZHNaVk4wWVhSbElHWnliMjBnSnk0dmMzUmhkR1V2VTJsdVoyeGxVM1JoZEdVbk8xeHlYRzVwYlhCdmNuUWdVbUZ1Wkc5dFFXNXBiV0YwYVc5dVUzUmhkR1VnWm5KdmJTQW5MaTl6ZEdGMFpTOVNZVzVrYjIxQmJtbHRZWFJwYjI1VGRHRjBaU2M3WEhKY2JtbHRjRzl5ZENCQmJtbHRZWFJwYjI1TVlYbGxjaXdnZTB4aGVXVnlRbXhsYm1STmIyUmxjMzBnWm5KdmJTQW5MaTlCYm1sdFlYUnBiMjVNWVhsbGNpYzdYSEpjYm1sdGNHOXlkQ0JFWldabGNuSmxaQ0JtY205dElDY3VMaTlFWldabGNuSmxaQ2M3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUlc1MWJTQm1iM0lnWVc1cGJXRjBhVzl1SUhOMFlYUmxJR05zWVhOelpYTXVYSEpjYmlBcVhISmNiaUFxSUVCeVpXRmtiMjVzZVZ4eVhHNGdLaUJBWlc1MWJTQjdRMnhoYzNOOVhISmNiaUFxTDF4eVhHNWxlSEJ2Y25RZ1kyOXVjM1FnUVc1cGJXRjBhVzl1Vkhsd1pYTWdQU0I3WEhKY2JpQWdjMmx1WjJ4bE9pQlRhVzVuYkdWVGRHRjBaU3hjY2x4dUlDQm1jbVZsUW14bGJtUTZJRVp5WldWQ2JHVnVaRk4wWVhSbExGeHlYRzRnSUhGMVpYVmxPaUJSZFdWMVpWTjBZWFJsTEZ4eVhHNGdJSEpoYm1SdmJVRnVhVzFoZEdsdmJqb2dVbUZ1Wkc5dFFXNXBiV0YwYVc5dVUzUmhkR1VzWEhKY2JpQWdZbXhsYm1ReFpEb2dRbXhsYm1ReFpGTjBZWFJsTEZ4eVhHNGdJR0pzWlc1a01tUTZJRUpzWlc1a01tUlRkR0YwWlN4Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJHWldGMGRYSmxJR1p2Y2lCdFlXNWhaMmx1WnlCaGJtbHRZWFJwYjI1eklHOXVJR0Z1SUc5aWFtVmpkQzVjY2x4dUlDcGNjbHh1SUNvZ1FHVjRkR1Z1WkhNZ1FXSnpkSEpoWTNSSWIzTjBSbVZoZEhWeVpWeHlYRzRnS2lCQVlXeHBZWE1nWTI5eVpTOUJibWx0WVhScGIyNUdaV0YwZFhKbFhISmNiaUFxWEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3VDJKcVpXTjBmU0JGVmtWT1ZGTWdMU0JDZFdsc2RDMXBiaUJ0WlhOellXZGxjeUIwYUdGMElIUm9aU0JtWldGMGRYSmxJR1Z0YVhSekxpQlhhR1Z1SUhSb1pWeHlYRzRnS2lCbVpXRjBkWEpsSUdseklHRmtaR1ZrSUhSdklHRWdlMEJzYVc1cklHTnZjbVV2U0c5emRFOWlhbVZqZEgwc0lHVjJaVzUwSUc1aGJXVnpJSGRwYkd3Z1ltVWdjSEpsWm1sNFpXUWdZbmtnZEdobFhISmNiaUFxSUc1aGJXVWdiMllnZEdobElHWmxZWFIxY21VZ1kyeGhjM01nS3lBbkxpY3VYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQmJSVlpGVGxSVExtRmtaRXhoZVdWeVBXOXVRV1JrVEdGNVpYSkZkbVZ1ZEYwZ0xTQk5aWE56WVdkbElIUm9ZWFFnYVhNZ1pXMXBkSFJsWkNCaFpuUmxjbHh5WEc0Z0tpQmJZV1JrVEdGNVpYSmRlMEJzYVc1cklHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU05oWkdSTVlYbGxjbjBnYUdGeklHSmxaVzRnYzNWalkyVnpjMloxYkd4NUlHVjRaV04xZEdWa0xseHlYRzRnS2lCQmJpQnZZbXBsWTNRZ2NtVndjbVZ6Wlc1MGFXNW5JSFJvWlNCdVlXMWxJRzltSUhSb1pTQnNZWGxsY2lCMGFHRjBJSGRoY3lCaFpHUmxaQ0JoYm1RZ2FYUnpJR2x1WkdWNElHbHVYSEpjYmlBcUlIUm9aU0JzWVhsbGNpQnpkR0ZqYXlCM2FYUm9JSFJvWlNCemFXZHVZWFIxY21VZ2UyNWhiV1U2SUhOMGNtbHVaeXdnYVc1a1pYZzZJRzUxYldKbGNuMGdhWE1nYzNWd2NHeHBaV1JjY2x4dUlDb2dZWE1nWVc0Z1lYSm5kVzFsYm5RZ2RHOGdiR2x6ZEdWdVpYSWdablZ1WTNScGIyNXpMbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdXMFZXUlU1VVV5NXlaVzF2ZG1WTVlYbGxjajF2YmxKbGJXOTJaVXhoZVdWeVJYWmxiblJkSUMwZ1RXVnpjMkZuWlNCMGFHRjBJR2x6WEhKY2JpQXFJR1Z0YVhSMFpXUWdZV1owWlhJZ1czSmxiVzkyWlV4aGVXVnlYWHRBYkdsdWF5QmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqY21WdGIzWmxUR0Y1WlhKOUlHaGhjeUJpWldWdVhISmNiaUFxSUhOMVkyTmxjM05tZFd4c2VTQmxlR1ZqZFhSbFpDNGdRVzRnYjJKcVpXTjBJSEpsY0hKbGMyVnVkR2x1WnlCMGFHVWdibUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCM1lYTmNjbHh1SUNvZ2NtVnRiM1psWkNCaGJtUWdhWFJ6SUdsdVpHVjRJR2x1SUhSb1pTQnNZWGxsY2lCemRHRmpheUIzYVhSb0lIUm9aU0J6YVdkdVlYUjFjbVVnZTI1aGJXVTZJSE4wY21sdVp5d2dhVzVrWlhnNklHNTFiV0psY24xY2NseHVJQ29nYVhNZ2MzVndjR3hwWldRZ1lYTWdZVzRnWVhKbmRXMWxiblFnZEc4Z2JHbHpkR1Z1WlhJZ1puVnVZM1JwYjI1ekxseHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ1cwVldSVTVVVXk1eVpXNWhiV1ZNWVhsbGNqMXZibEpsYm1GdFpVeGhlV1Z5UlhabGJuUmRJQzBnVFdWemMyRm5aU0IwYUdGMElHbHpYSEpjYmlBcUlHVnRhWFIwWldRZ1lXWjBaWElnVzNKbGJtRnRaVXhoZVdWeVhYdEFiR2x1YXlCamIzSmxMMEZ1YVcxaGRHbHZia1psWVhSMWNtVWpjbVZ1WVcxbFRHRjVaWEo5SUdoaGN5QmlaV1Z1WEhKY2JpQXFJSE4xWTJObGMzTm1kV3hzZVNCbGVHVmpkWFJsWkM0Z1FXNGdiMkpxWldOMElISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2IzSnBaMmx1WVd3Z2JtRnRaU0J2WmlCMGFHVWdiR0Y1WlhKY2NseHVJQ29nZEdoaGRDQjNZWE1nY21WdVlXMWxaQ0JoYm1RZ2FYUnpJSFZ3WkdGMFpXUWdibUZ0WlNCM2FYUm9JSFJvWlNCemFXZHVZWFIxY21VZ2UyOXNaRTVoYldVNklITjBjbWx1Wnl3Z2JtVjNUbUZ0WlRvZ2MzUnlhVzVuZlZ4eVhHNGdLaUJwY3lCemRYQndiR2xsWkNCaGN5QmhiaUJoY21kMWJXVnVkQ0IwYnlCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJUTG1Ga1pFRnVhVzFoZEdsdmJqMXZia0ZrWkVGdWFXMWhkR2x2YmtWMlpXNTBYU0F0SUUxbGMzTmhaMlVnZEdoaGRDQnBjMXh5WEc0Z0tpQmxiV2wwZEdWa0lHRm1kR1Z5SUZ0aFpHUkJibWx0WVhScGIyNWRlMEJzYVc1cklHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU05oWkdSQmJtbHRZWFJwYjI1OUlHaGhjeUJpWldWdVhISmNiaUFxSUhOMVkyTmxjM05tZFd4c2VTQmxlR1ZqZFhSbFpDNGdRVzRnYjJKcVpXTjBJSEpsY0hKbGMyVnVkR2x1WnlCMGFHVWdibUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCMGFHVmNjbHh1SUNvZ1lXNXBiV0YwYVc5dUlIZGhjeUJoWkdSbFpDQjBieUJoYm1RZ2RHaGxJRzVoYldVZ2IyWWdkR2hsSUdGdWFXMWhkR2x2YmlCMGFHRjBJSGRoY3lCaFpHUmxaQ0IzYVhSb0lIUm9aVnh5WEc0Z0tpQnphV2R1WVhSMWNtVWdlMnhoZVdWeVRtRnRaVG9nYzNSeWFXNW5MQ0JoYm1sdFlYUnBiMjVPWVcxbE9pQnpkSEpwYm1kOUlHbHpJSE4xY0hCc2FXVmtJR0Z6SUdGdUlHRnlaM1Z0Wlc1MFhISmNiaUFxSUhSdklHeHBjM1JsYm1WeUlHWjFibU4wYVc5dWN5NWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkZNdWNtVnRiM1psUVc1cGJXRjBhVzl1UFc5dVVtVnRiM1psWkVGdWFXMWhkR2x2YmtWMlpXNTBYU0F0SUUxbGMzTmhaMlZjY2x4dUlDb2dkR2hoZENCcGN5QmxiV2wwZEdWa0lHRm1kR1Z5SUZ0eVpXMXZkbVZCYm1sdFlYUnBiMjVkZTBCc2FXNXJJR052Y21VdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNOeVpXMXZkbVZCYm1sdFlYUnBiMjU5WEhKY2JpQXFJR2hoY3lCaVpXVnVJSE4xWTJObGMzTm1kV3hzZVNCbGVHVmpkWFJsWkM0Z1FXNGdiMkpxWldOMElISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2JtRnRaU0J2WmlCMGFHVWdiR0Y1WlhKY2NseHVJQ29nZEdoaGRDQjBhR1VnWVc1cGJXRjBhVzl1SUhkaGN5QnlaVzF2ZG1Wa0lHWnliMjBnWVc1a0lIUm9aU0J1WVcxbElHOW1JSFJvWlNCaGJtbHRZWFJwYjI0Z2RHaGhkQ0IzWVhNZ2NtVnRiM1psWkZ4eVhHNGdLaUIzYVhSb0lIUm9aU0J6YVdkdVlYUjFjbVVnZTJ4aGVXVnlUbUZ0WlRvZ2MzUnlhVzVuTENCaGJtbHRZWFJwYjI1T1lXMWxPaUJ6ZEhKcGJtZDlJR2x6SUhOMWNIQnNhV1ZrSUdGelhISmNiaUFxSUdGdUlHRnlaM1Z0Wlc1MElIUnZJR3hwYzNSbGJtVnlJR1oxYm1OMGFXOXVjeTVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnRGVmtWT1ZGTXVjbVZ1WVcxbFFXNXBiV0YwYVc5dVBXOXVVbVZ1WVcxbFFXNXBiV0YwYVc5dVJYWmxiblJkSUMwZ1RXVnpjMkZuWlZ4eVhHNGdLaUIwYUdGMElHbHpJR1Z0YVhSMFpXUWdZV1owWlhJZ1czSmxibUZ0WlVGdWFXMWhkR2x2YmwxN1FHeHBibXNnWTI5eVpTOUJibWx0WVhScGIyNUdaV0YwZFhKbEkzSmxibUZ0WlVGdWFXMWhkR2x2Ym4xY2NseHVJQ29nYUdGeklHSmxaVzRnYzNWalkyVnpjMloxYkd4NUlHVjRaV04xZEdWa0xpQkJiaUJ2WW1wbFkzUWdjbVZ3Y21WelpXNTBhVzVuSUhSb1pTQnVZVzFsSUc5bUlIUm9aU0JzWVhsbGNseHlYRzRnS2lCMGFHRjBJR052Ym5SaGFXNXpJSFJvWlNCaGJtbHRZWFJwYjI0Z2RHaGhkQ0IzWVhNZ2NtVnVZVzFsWkN3Z2RHaGxJRzl5YVdkcGJtRnNJRzVoYldVZ2IyWWdkR2hsSUdGdWFXMWhkR2x2Ymx4eVhHNGdLaUIwYUdGMElIZGhjeUJ5Wlc1aGJXVmtJR0Z1WkNCcGRITWdkWEJrWVhSbFpDQnVZVzFsSUhkcGRHZ2dkR2hsSUhOcFoyNWhkSFZ5WlNCN2JHRjVaWEpPWVcxbE9pQnpkSEpwYm1jc0lHOXNaRTVoYldVNklITjBjbWx1Wnl3Z2JtVjNUbUZ0WlRvZ2MzUnlhVzVuZlZ4eVhHNGdLaUJwY3lCemRYQndiR2xsWkNCaGN5QmhiaUJoY21kMWJXVnVkQ0IwYnlCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJUTG5Cc1lYazliMjVRYkdGNVJYWmxiblJkSUMwZ1RXVnpjMkZuWlNCMGFHRjBJR2x6SUdWdGFYUjBaV1FnWVdaMFpYSmNjbHh1SUNvZ1pXRmphQ0JqWVd4c0lIUnZJRnR3YkdGNVhYdEFiR2x1YXlCamIzSmxMMEZ1YVcxaGRHbHZia1psWVhSMWNtVWpjR3hoZVVGdWFXMWhkR2x2Ym4wdUlFRnVJRzlpYW1WamRDQnlaWEJ5WlhObGJuUnBibWRjY2x4dUlDb2dkR2hsSUc1aGJXVWdiMllnZEdobElHeGhlV1Z5SUdOdmJuUmhhVzV6SUhSb1pTQmhibWx0WVhScGIyNGdkR2hoZENCM1lYTWdjR3hoZVdWa0lHRnVaQ0IwYUdVZ2JtRnRaU0J2Wmx4eVhHNGdLaUIwYUdVZ1lXNXBiV0YwYVc5dUlIUm9ZWFFnZDJGeklIQnNZWGxsWkNCM2FYUm9JSFJvWlNCemFXZHVZWFIxY21VZ2UyeGhlV1Z5VG1GdFpUb2djM1J5YVc1bkxDQmhibWx0WVhScGIyNU9ZVzFsT2lCemRISnBibWQ5WEhKY2JpQXFJR2x6SUhOMWNIQnNhV1ZrSUdGeklHRnVJR0Z5WjNWdFpXNTBJSFJ2SUd4cGMzUmxibVZ5SUdaMWJtTjBhVzl1Y3k1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUZ0RlZrVk9WRk11Y0dGMWMyVTliMjVRWVhWelpVVjJaVzUwWFNBdElFMWxjM05oWjJVZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUdGbWRHVnlYSEpjYmlBcUlHVmhZMmdnWTJGc2JDQjBieUJiY0dGMWMyVmRlMEJzYVc1cklHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU053WVhWelpVRnVhVzFoZEdsdmJuMHVJRUZ1SUc5aWFtVmpkQ0J5WlhCeVpYTmxiblJwYm1kY2NseHVJQ29nZEdobElHNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUlHTnZiblJoYVc1eklIUm9aU0JoYm1sdFlYUnBiMjRnZEdoaGRDQjNZWE1nY0dGMWMyVmtJR0Z1WkNCMGFHVWdibUZ0WlNCdlpseHlYRzRnS2lCMGFHVWdZVzVwYldGMGFXOXVJSFJvWVhRZ2QyRnpJSEJoZFhObFpDQjNhWFJvSUhSb1pTQnphV2R1WVhSMWNtVWdlMnhoZVdWeVRtRnRaVG9nYzNSeWFXNW5MQ0JoYm1sdFlYUnBiMjVPWVcxbE9pQnpkSEpwYm1kOVhISmNiaUFxSUdseklITjFjSEJzYVdWa0lHRnpJR0Z1SUdGeVozVnRaVzUwSUhSdklHeHBjM1JsYm1WeUlHWjFibU4wYVc5dWN5NWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkZNdWNtVnpkVzFsUFc5dVVtVnpkVzFsUlhabGJuUmRJQzBnVFdWemMyRm5aU0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdZV1owWlhKY2NseHVJQ29nWldGamFDQmpZV3hzSUhSdklGdHlaWE4xYldWZGUwQnNhVzVySUdOdmNtVXZRVzVwYldGMGFXOXVSbVZoZEhWeVpTTnlaWE4xYldWQmJtbHRZWFJwYjI1OUxpQkJiaUJ2WW1wbFkzUWdjbVZ3Y21WelpXNTBhVzVuWEhKY2JpQXFJSFJvWlNCdVlXMWxJRzltSUhSb1pTQnNZWGxsY2lCamIyNTBZV2x1Y3lCMGFHVWdZVzVwYldGMGFXOXVJSFJvWVhRZ2QyRnpJSEpsYzNWdFpXUWdZVzVrSUhSb1pTQnVZVzFsSUc5bVhISmNiaUFxSUhSb1pTQmhibWx0WVhScGIyNGdkR2hoZENCM1lYTWdjbVZ6ZFcxbFpDQjNhWFJvSUhSb1pTQnphV2R1WVhSMWNtVWdlMnhoZVdWeVRtRnRaVG9nYzNSeWFXNW5MQ0JoYm1sdFlYUnBiMjVPWVcxbE9pQnpkSEpwYm1kOVhISmNiaUFxSUdseklITjFjSEJzYVdWa0lHRnpJR0Z1SUdGeVozVnRaVzUwSUhSdklHeHBjM1JsYm1WeUlHWjFibU4wYVc5dWN5NWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkZNdWFXNTBaWEp5ZFhCMFBXOXVTVzUwWlhKeWRYQjBSWFpsYm5SZElDMGdUV1Z6YzJGblpTQjBhR0YwSUdseklHVnRhWFIwWldSY2NseHVJQ29nYVdZZ2RHaGxjbVVnYVhNZ1lTQmpkWEp5Wlc1MElITndaV1ZqYUNCcGJpQndjbTluY21WemN5QmhibVFnVzNCc1lYbGRlMEJzYVc1cklHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU053YkdGNVFXNXBiV0YwYVc5dWZWeHlYRzRnS2lCdmNpQmJjbVZ6ZFcxbFhYdEFiR2x1YXlCamIzSmxMMEZ1YVcxaGRHbHZia1psWVhSMWNtVWpjbVZ6ZFcxbFFXNXBiV0YwYVc5dWZTQmhjbVVnWlhobFkzVjBaV1FnWm05eUlHRWdibVYzSUhOd1pXVmphQzVjY2x4dUlDb2dRVzRnYjJKcVpXTjBJSEpsY0hKbGMyVnVkR2x1WnlCMGFHVWdibUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdZMjl1ZEdGcGJuTWdkR2hsSUdGdWFXMWhkR2x2YmlCMGFHRjBJSGRoYzF4eVhHNGdLaUJwYm5SbGNuSjFjSFJsWkNCaGJtUWdkR2hsSUc1aGJXVWdiMllnZEdobElHRnVhVzFoZEdsdmJpQjBhR0YwSUhkaGN5QnBiblJsY25KMWNIUmxaQ0IzYVhSb0lIUm9aU0J6YVdkdVlYUjFjbVZjY2x4dUlDb2dlMnhoZVdWeVRtRnRaVG9nYzNSeWFXNW5MQ0JoYm1sdFlYUnBiMjVPWVcxbE9pQnpkSEpwYm1kOUlHbHpJSE4xY0hCc2FXVmtJR0Z6SUdGdUlHRnlaM1Z0Wlc1MElIUnZJR3hwYzNSbGJtVnlYSEpjYmlBcUlHWjFibU4wYVc5dWN5NWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkZNdWMzUnZjRDF2YmxOMGIzQkZkbVZ1ZEYwZ0xTQk5aWE56WVdkbElIUm9ZWFFnYVhNZ1pXMXBkSFJsWkNCaFpuUmxjbHh5WEc0Z0tpQmxZV05vSUdOaGJHd2dkRzhnVzNOMGIzQmRlMEJzYVc1cklHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU056ZEc5d1FXNXBiV0YwYVc5dWZTQmhibVFnZDJobGJpQmhJSE53WldWamFDQnlaV0ZqYUdWelhISmNiaUFxSUhSb1pTQmxibVFnYjJZZ2NHeGhlV0poWTJzdUlFRnVJRzlpYW1WamRDQnlaWEJ5WlhObGJuUnBibWRjY2x4dUlDb2dkR2hsSUc1aGJXVWdiMllnZEdobElHeGhlV1Z5SUdOdmJuUmhhVzV6SUhSb1pTQmhibWx0WVhScGIyNGdkR2hoZENCM1lYTWdjM1J2Y0hCbFpDQmhibVFnZEdobElHNWhiV1VnYjJaY2NseHVJQ29nZEdobElHRnVhVzFoZEdsdmJpQjBhR0YwSUhkaGN5QnpkRzl3Y0dWa0lIZHBkR2dnZEdobElITnBaMjVoZEhWeVpTQjdiR0Y1WlhKT1lXMWxPaUJ6ZEhKcGJtY3NJR0Z1YVcxaGRHbHZiazVoYldVNklITjBjbWx1WjMxY2NseHVJQ29nYVhNZ2MzVndjR3hwWldRZ1lYTWdZVzRnWVhKbmRXMWxiblFnZEc4Z2JHbHpkR1Z1WlhJZ1puVnVZM1JwYjI1ekxseHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlNCbGVIUmxibVJ6SUVGaWMzUnlZV04wU0c5emRFWmxZWFIxY21VZ2UxeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdGpiM0psTDBodmMzUlBZbXBsWTNSOUlHaHZjM1FnTFNCSWIzTjBJRzlpYW1WamRDQjBhR0YwSUc5M2JuTWdkR2hsSUdabFlYUjFjbVV1WEhKY2JpQWdJQ292WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvYUc5emRDa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb2FHOXpkQ2s3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmYkdGNVpYSnpJRDBnVzEwN1hISmNiaUFnSUNCMGFHbHpMbDlzWVhsbGNrMWhjQ0E5SUh0OU8xeHlYRzRnSUNBZ2RHaHBjeTVmY0dGMWMyVmtJRDBnWm1Gc2MyVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJOWVd0bElITjFjbVVnWVNCemRYQndiR2xsWkNCc1lYbGxjaUJwYm1SbGVDQnBjeUIzYVhSb2FXNGdkR2hsSUhKaGJtZGxJRzltSUd4aGVXVnljeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2FXNWtaWGhjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJRnRsZUdsemRHbHVaejEwY25WbFhTQXRJRmRvWlhSb1pYSWdkR2hsSUdsdVpHVjRJSEpsY0hKbGMyVnVkSE1nWVc1a0lHVjRhWE4wYVc1blhISmNiaUFnSUNvZ2JHRjVaWElnYjNJZ1lTQnVaWGNnYkdGNVpYSWdkRzhnWW1VZ1lXUmtaV1F1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlQWDFjY2x4dUlDQWdLaTljY2x4dUlDQmZkbUZzYVdSaGRHVkpibVJsZUNocGJtUmxlQ3dnWlhocGMzUnBibWNnUFNCMGNuVmxLU0I3WEhKY2JpQWdJQ0F2THlCSmJtUmxlQ0JwY3lCcGJuWmhiR2xrSUdsbUlIUm9aWEpsSUdGeVpTQnVieUJzWVhsbGNuTWdZVzVrSUhkbEozSmxJR05vWldOcmFXNW5JR1p2Y2lCaGJpQmxlR2x6ZEdsdVp5QnNZWGxsY2lCcGJtUmxlRnh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMnhoZVdWeWN5NXNaVzVuZEdnZ1BUMDlJREFnSmlZZ1pYaHBjM1JwYm1jcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQnNZWE4wU1c1a1pYZ2dQU0JsZUdsemRHbHVaeUEvSUhSb2FYTXVYMnhoZVdWeWN5NXNaVzVuZEdnZ0xTQXhJRG9nZEdocGN5NWZiR0Y1WlhKekxteGxibWQwYUR0Y2NseHVYSEpjYmlBZ0lDQXZMeUJEYjNWdWRDQm1jbTl0SUhSb1pTQmxibVFnYjJZZ2RHaGxJR0Z5Y21GNUlHWnZjaUJ1WldkaGRHbDJaU0JwYm1ScFkyVnpYSEpjYmlBZ0lDQnBaaUFvYVc1a1pYZ2dQQ0F3S1NCN1hISmNiaUFnSUNBZ0lHbHVaR1Y0SUQwZ2JHRnpkRWx1WkdWNElDc2dhVzVrWlhnZ0t5QXhPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdsbUlDaHBibVJsZUNBOElEQWdmSHdnYVc1a1pYZ2dQaUJzWVhOMFNXNWtaWGdwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJwYm1SbGVEdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsTFdWMllXeDFZWFJsSUdsdWRHVnlibUZzSUhkbGFXZG9kQ0IyWVd4MVpYTWdiMllnYkdGNVpYSnpJSE4wWVhKMGFXNW5JR1p5YjIwZ2RHaGxJSFJ2Y0NCdlppQjBhR1ZjY2x4dUlDQWdLaUJ6ZEdGamF5NGdUM1psY25KcFpHVWdiR0Y1WlhKekp5QjNaV2xuYUhSeklHRm1abVZqZENCMGFHVWdkbUZzZFdWeklHOW1JR0ZzYkNCc1lYbGxjbk1nYkc5M1pYSWdhVzRnZEdobFhISmNiaUFnSUNvZ2MzUmhZMnN1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOTFjR1JoZEdWSmJuUmxjbTVoYkZkbGFXZG9kSE1vS1NCN1hISmNiaUFnSUNCamIyNXpkQ0J1ZFcxTVlYbGxjbk1nUFNCMGFHbHpMbDlzWVhsbGNuTXViR1Z1WjNSb08xeHlYRzRnSUNBZ2JHVjBJSGRsYVdkb2RFMTFiSFJwY0d4cFpYSWdQU0F4TzF4eVhHNWNjbHh1SUNBZ0lDOHZJRlZ3WkdGMFpTQnBiblJsY201aGJDQjNaV2xuYUhRZ2RtRnNkV1Z6SUc5dUlHeGhlV1Z5Y3lCcGJpQnlaWFpsY25ObElHOXlaR1Z5WEhKY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ2JuVnRUR0Y1WlhKeklDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWElnUFNCMGFHbHpMbDlzWVhsbGNuTmJhVjA3WEhKY2JpQWdJQ0FnSUd4aGVXVnlMblZ3WkdGMFpVbHVkR1Z5Ym1Gc1YyVnBaMmgwS0hkbGFXZG9kRTExYkhScGNHeHBaWElwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJR3hoZVdWeUlHbHpJRzkyWlhKeWFXUmxMQ0IxY0dSaGRHVWdkR2hsSUcxMWJIUnBjR3hwWlhJZ2QybDBhQ0IwYUdVZ2NtVnRZV2x1WkdWeUlHOW1JSFJvWlNCbWRXeHNJSGRsYVdkb2RGeHlYRzRnSUNBZ0lDQnBaaUFvYkdGNVpYSXVZbXhsYm1STmIyUmxJRDA5UFNCTVlYbGxja0pzWlc1a1RXOWtaWE11VDNabGNuSnBaR1VnSmlZZ2JHRjVaWEl1WTNWeWNtVnVkRk4wWVhSbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZDJWcFoyaDBUWFZzZEdsd2JHbGxjaUFxUFNBeElDMGdiR0Y1WlhJdVkzVnljbVZ1ZEZOMFlYUmxMbWx1ZEdWeWJtRnNWMlZwWjJoME8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdZU0J1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdZU0JUYVc1bmJHVlRkR0YwWlM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QXRJRTl3ZEdsdmJuTWdkRzhnY0dGemN5QjBieUIwYUdVZ1UybHVaMnhsVTNSaGRHVWdZMjl1YzNSeWRXTjBiM0l1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtYzlmU0J2Y0hScGIyNXpMbTVoYldVZ0xTQk9ZVzFsSUdadmNpQjBhR1VnWVc1cGJXRjBhVzl1SUhOMFlYUmxMaUJPWVcxbGN5QnRkWE4wSUdKbFhISmNiaUFnSUNvZ2RXNXBjWFZsSUdadmNpQjBhR1VnYkdGNVpYSWdkR2hsSUhOMFlYUmxJR2x6SUdGd2NHeHBaV1FnZEc4dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0M1pXbG5hSFI5SUZ0dmNIUnBiMjV6TG5kbGFXZG9kRDB3WFNBdElGUm9aU0F3TFRFZ1lXMXZkVzUwSUc5bUlHbHVabXgxWlc1alpTQjBhR1VnYzNSaGRHVWdkMmxzYkNCb1lYWmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdkR2x0WlZOallXeGxmU0JiYjNCMGFXOXVjeTUwYVcxbFUyTmhiR1U5TVYwZ0xTQkdZV04wYjNJZ2RHOGdjMk5oYkdVZ2RHaGxJSEJzWVhsaVlXTnJJSE53WldWa0lHOW1JSFJvWlZ4eVhHNGdJQ0FxSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzI5d2RHbHZibk11Ykc5dmNFTnZkVzUwUFVsdVptbHVhWFI1WFNBdElFNTFiV0psY2lCdlppQjBhVzFsY3lCMGFHVWdZVzVwYldGMGFXOXVJSE5vYjNWc1pGeHlYRzRnSUNBcUlISmxjR1ZoZENCaVpXWnZjbVVnWm1sdWFYTm9hVzVuTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTVpYkdWdVpFMXZaR1U5VEdGNVpYSkNiR1Z1WkUxdlpHVnpXMFJsWm1GMWJIUk1ZWGxsY2tKc1pXNWtUVzlrWlYxZElDMGdWSGx3WlNCdlpseHlYRzRnSUNBcUlHSnNaVzVrYVc1bklIUm9aU0JoYm1sdFlYUnBiMjRnYzJodmRXeGtJSFZ6WlM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0amIzSmxMMU5wYm1kc1pWTjBZWFJsZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjlqY21WaGRHVlRhVzVuYkdWVGRHRjBaU2h2Y0hScGIyNXpLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOcGJtZHNaVk4wWVhSbEtHOXdkR2x2Ym5NcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwZFhKdUlHRWdibVYzSUdsdWMzUmhibU5sSUc5bUlHRWdSbkpsWlVKc1pXNWtVM1JoZEdVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzl3ZEdsdmJuTWdMU0JQY0hScGIyNXpJSFJ2SUhCaGMzTWdkRzhnZEdobElFWnlaV1ZDYkdWdVpGTjBZWFJsSUdOdmJuTjBjblZqZEc5eUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuUFgwZ2IzQjBhVzl1Y3k1dVlXMWxJQzBnVG1GdFpTQm1iM0lnZEdobElHRnVhVzFoZEdsdmJpQnpkR0YwWlM0Z1RtRnRaWE1nYlhWemRDQmlaVnh5WEc0Z0lDQXFJSFZ1YVhGMVpTQm1iM0lnZEdobElHeGhlV1Z5SUhSb1pTQnpkR0YwWlNCcGN5QmhjSEJzYVdWa0lIUnZMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdkMlZwWjJoMGZTQmJiM0IwYVc5dWN5NTNaV2xuYUhROU1GMGdMU0JVYUdVZ01DMHhJR0Z0YjNWdWRDQnZaaUJwYm1ac2RXVnVZMlVnZEdobElITjBZWFJsSUhkcGJHd2dhR0YyWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNScGJXVlRZMkZzWlgwZ1cyOXdkR2x2Ym5NdWRHbHRaVk5qWVd4bFBURmRJQzBnUm1GamRHOXlJSFJ2SUhOallXeGxJSFJvWlNCd2JHRjVZbUZqYXlCemNHVmxaQ0J2WmlCMGFHVmNjbHh1SUNBZ0tpQmhibWx0WVhScGIyNHVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdHZjSFJwYjI1ekxteHZiM0JEYjNWdWREMUpibVpwYm1sMGVWMGdMU0JPZFcxaVpYSWdiMllnZEdsdFpYTWdkR2hsSUdGdWFXMWhkR2x2YmlCemFHOTFiR1JjY2x4dUlDQWdLaUJ5WlhCbFlYUWdZbVZtYjNKbElHWnBibWx6YUdsdVp5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXdkR2x2Ym5NdVlteGxibVJOYjJSbFBVeGhlV1Z5UW14bGJtUk5iMlJsYzF0RVpXWmhkV3gwVEdGNVpYSkNiR1Z1WkUxdlpHVmRYU0F0SUZSNWNHVWdiMlpjY2x4dUlDQWdLaUJpYkdWdVpHbHVaeUIwYUdVZ1lXNXBiV0YwYVc5dUlITm9iM1ZzWkNCMWMyVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OFQySnFaV04wUG4wZ1cyOXdkR2x2Ym5NdVlteGxibVJUZEdGMFpVOXdkR2x2Ym5OZElDMGdRWEp5WVhrZ2IyWWdiM0IwYVc5dWN5QjFjMlZrSUhSdklHTnlaV0YwWlNCMGFHVmNjbHh1SUNBZ0tpQmliR1Z1WkNCemRHRjBaWE1nWm05eUlIUm9hWE1nWTI5dWRHRnBibVZ5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBaeVpXVkNiR1Z1WkZOMFlYUmxmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOWpjbVZoZEdWR2NtVmxRbXhsYm1SVGRHRjBaU2h2Y0hScGIyNXpLU0I3WEhKY2JpQWdJQ0JqYjI1emRDQjdZbXhsYm1SVGRHRjBaVTl3ZEdsdmJuTWdQU0JiWFgwZ1BTQnZjSFJwYjI1ek8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHSnNaVzVrVTNSaGRHVnpJRDBnVzEwN1hISmNiaUFnSUNCaWJHVnVaRk4wWVhSbFQzQjBhVzl1Y3k1bWIzSkZZV05vS0dKc1pXNWtUM0IwYVc5dWN5QTlQaUI3WEhKY2JpQWdJQ0FnSUdKc1pXNWtVM1JoZEdWekxuQjFjMmdvWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNKbFlYUmxVMmx1WjJ4bFUzUmhkR1VvZXk0dUxtSnNaVzVrVDNCMGFXOXVjeXdnWW14bGJtUk5iMlJsT2lCdmNIUnBiMjV6TG1Kc1pXNWtUVzlrWlgwcFhISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFWnlaV1ZDYkdWdVpGTjBZWFJsS0c5d2RHbHZibk1zSUdKc1pXNWtVM1JoZEdWektUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsZEhWeWJpQmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQmhJRkYxWlhWbFUzUmhkR1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NZ0xTQlBjSFJwYjI1eklIUnZJSEJoYzNNZ2RHOGdkR2hsSUZGMVpYVmxVM1JoZEdVZ1kyOXVjM1J5ZFdOMGIzSXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1jOWZTQnZjSFJwYjI1ekxtNWhiV1VnTFNCT1lXMWxJR1p2Y2lCMGFHVWdZVzVwYldGMGFXOXVJSE4wWVhSbExpQk9ZVzFsY3lCdGRYTjBJR0psWEhKY2JpQWdJQ29nZFc1cGNYVmxJR1p2Y2lCMGFHVWdiR0Y1WlhJZ2RHaGxJSE4wWVhSbElHbHpJR0Z3Y0d4cFpXUWdkRzh1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR2Y0hScGIyNXpMbmRsYVdkb2REMHdYU0F0SUZSb1pTQXdMVEVnWVcxdmRXNTBJRzltSUdsdVpteDFaVzVqWlNCMGFHVWdjM1JoZEdVZ2QybHNiQ0JvWVhabExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5UFgwZ2IzQjBhVzl1Y3k1MGNtRnVjMmwwYVc5dVZHbHRaU0F0SUZSb1pTQmhiVzkxYm5RZ2IyWWdkR2x0WlNCcGRDQjBZV3RsY3lCMGJ5QjBjbUZ1YzJsMGFXOXVYSEpjYmlBZ0lDb2dZbVYwZDJWbGJpQnhkV1YxWldRZ2MzUmhkR1Z6TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiYjNCMGFXOXVjeTVpYkdWdVpFMXZaR1U5VEdGNVpYSkNiR1Z1WkUxdlpHVnpXMFJsWm1GMWJIUk1ZWGxsY2tKc1pXNWtUVzlrWlYxZElDMGdWSGx3WlNCdlpseHlYRzRnSUNBcUlHSnNaVzVrYVc1bklIUm9aU0JoYm1sdFlYUnBiMjRnYzJodmRXeGtJSFZ6WlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVManhQWW1wbFkzUStmU0JiYjNCMGFXOXVjeTV4ZFdWMVpVOXdkR2x2Ym5OZElDMGdRWEp5WVhrZ2IyWWdiM0IwYVc5dWN5QjFjMlZrSUhSdklHTnlaV0YwWlNCMGFHVmNjbHh1SUNBZ0tpQnhkV1YxWlNCemRHRjBaWE1nWm05eUlIUm9hWE1nWTI5dWRHRnBibVZ5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFGMVpYVmxVM1JoZEdWOVhISmNiaUFnSUNvdlhISmNiaUFnWDJOeVpXRjBaVkYxWlhWbFUzUmhkR1VvYjNCMGFXOXVjeWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdlM0YxWlhWbFQzQjBhVzl1Y3lBOUlGdGRmU0E5SUc5d2RHbHZibk03WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnY1hWbGRXVlRkR0YwWlhNZ1BTQnhkV1YxWlU5d2RHbHZibk11YldGd0tIRjFaWFZsVDNCMGFXOXVJRDArWEhKY2JpQWdJQ0FnSUhSb2FYTXVYMk55WldGMFpWTnBibWRzWlZOMFlYUmxLSHRjY2x4dUlDQWdJQ0FnSUNCMGNtRnVjMmwwYVc5dVZHbHRaVG9nYjNCMGFXOXVjeTUwY21GdWMybDBhVzl1VkdsdFpTeGNjbHh1SUNBZ0lDQWdJQ0F1TGk1eGRXVjFaVTl3ZEdsdmJpeGNjbHh1SUNBZ0lDQWdJQ0JpYkdWdVpFMXZaR1U2SUc5d2RHbHZibk11WW14bGJtUk5iMlJsTEZ4eVhHNGdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZGMVpYVmxVM1JoZEdVb2IzQjBhVzl1Y3l3Z2NYVmxkV1ZUZEdGMFpYTXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WMGRYSnVJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JR0VnUW14bGJtUXhaRk4wWVhSbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpJQzBnVDNCMGFXOXVjeUIwYnlCd1lYTnpJSFJ2SUhSb1pTQkNiR1Z1WkRGa1UzUmhkR1VnWTI5dWMzUnlkV04wYjNJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWM5ZlNCdmNIUnBiMjV6TG01aGJXVWdMU0JPWVcxbElHWnZjaUIwYUdVZ1lXNXBiV0YwYVc5dUlITjBZWFJsTGlCT1lXMWxjeUJ0ZFhOMElHSmxYSEpjYmlBZ0lDb2dkVzVwY1hWbElHWnZjaUIwYUdVZ2JHRjVaWElnZEdobElITjBZWFJsSUdseklHRndjR3hwWldRZ2RHOHVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdDNaV2xuYUhSOUlGdHZjSFJwYjI1ekxuZGxhV2RvZEQwd1hTQXRJRlJvWlNBd0xURWdZVzF2ZFc1MElHOW1JR2x1Wm14MVpXNWpaU0IwYUdVZ2MzUmhkR1VnZDJsc2JDQm9ZWFpsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3ZEdsdFpWTmpZV3hsZlNCYmIzQjBhVzl1Y3k1MGFXMWxVMk5oYkdVOU1WMGdMU0JHWVdOMGIzSWdkRzhnYzJOaGJHVWdkR2hsSUhCc1lYbGlZV05ySUhOd1pXVmtJRzltSUhSb1pWeHlYRzRnSUNBcUlHRnVhVzFoZEdsdmJpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ1cyOXdkR2x2Ym5NdWJHOXZjRU52ZFc1MFBVbHVabWx1YVhSNVhTQXRJRTUxYldKbGNpQnZaaUIwYVcxbGN5QjBhR1VnWVc1cGJXRjBhVzl1SUhOb2IzVnNaRnh5WEc0Z0lDQXFJSEpsY0dWaGRDQmlaV1p2Y21VZ1ptbHVhWE5vYVc1bkxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmIzQjBhVzl1Y3k1aWJHVnVaRTF2WkdVOVRHRjVaWEpDYkdWdVpFMXZaR1Z6VzBSbFptRjFiSFJNWVhsbGNrSnNaVzVrVFc5a1pWMWRJQzBnVkhsd1pTQnZabHh5WEc0Z0lDQXFJR0pzWlc1a2FXNW5JSFJvWlNCaGJtbHRZWFJwYjI0Z2MyaHZkV3hrSUhWelpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4UFltcGxZM1ErZlNCYmIzQjBhVzl1Y3k1aWJHVnVaRk4wWVhSbFQzQjBhVzl1YzEwZ0xTQkJjbkpoZVNCdlppQnZjSFJwYjI1eklIVnpaV1FnZEc4Z1kzSmxZWFJsSUhSb1pWeHlYRzRnSUNBcUlHSnNaVzVrSUhOMFlYUmxjeUJtYjNJZ2RHaHBjeUJqYjI1MFlXbHVaWEl1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhiblZ0WW1WeVBuMGdXMjl3ZEdsdmJuTXVZbXhsYm1SVWFISmxjMmh2YkdSelhTQXRJRUZ5Y21GNUlHOW1JRzUxYldKbGNuTWdkWE5sWkNCMGJ5QnpaWFFnZEdobFhISmNiaUFnSUNvZ2RHaHlaWE5vYjJ4a2N5Qm1iM0lnWldGamFDQmliR1Z1WkNCemRHRjBaU0JwYmlCMGFHbHpJR052Ym5SaGFXNWxjaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeGliMjlzWldGdVBuMGdXMjl3ZEdsdmJuTXVZbXhsYm1STllYUmphRkJvWVhObGN6MWJYVjBnTFNCUGNIUnBiMjVoYkNCaGNuSmhlU0J2WmlCaWIyOXNaV0Z1Y3lCMWMyVmtJSFJ2WEhKY2JpQWdJQ29nYzJWMElIZG9aWFJvWlhJZ2IzSWdibTkwSUdWaFkyZ2dZbXhsYm1RZ2MzUmhkR1VnYVc0Z2RHaHBjeUJqYjI1MFlXbHVaWElnZDJsc2JDQnRZWFJqYUNCd2FHRnpaWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UW14bGJtUXhaRk4wWVhSbGZWeHlYRzRnSUNBcUwxeHlYRzRnSUY5amNtVmhkR1ZDYkdWdVpERmtVM1JoZEdVb2IzQjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnZTJKc1pXNWtVM1JoZEdWUGNIUnBiMjV6SUQwZ1cxMTlJRDBnYjNCMGFXOXVjenRjY2x4dUlDQWdJR052Ym5OMElIdGliR1Z1WkZSb2NtVnphRzlzWkhNZ1BTQmJYWDBnUFNCdmNIUnBiMjV6TzF4eVhHNGdJQ0FnWTI5dWMzUWdlMkpzWlc1a1RXRjBZMmhRYUdGelpYTWdQU0JiWFgwZ1BTQnZjSFJwYjI1ek8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHSnNaVzVrVTNSaGRHVnpJRDBnVzEwN1hISmNiaUFnSUNCaWJHVnVaRk4wWVhSbFQzQjBhVzl1Y3k1bWIzSkZZV05vS0dKc1pXNWtUM0IwYVc5dWN5QTlQaUI3WEhKY2JpQWdJQ0FnSUdKc1pXNWtVM1JoZEdWekxuQjFjMmdvWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNKbFlYUmxVMmx1WjJ4bFUzUmhkR1VvZXk0dUxtSnNaVzVrVDNCMGFXOXVjeXdnWW14bGJtUk5iMlJsT2lCdmNIUnBiMjV6TG1Kc1pXNWtUVzlrWlgwcFhISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFSnNaVzVrTVdSVGRHRjBaU2hjY2x4dUlDQWdJQ0FnYjNCMGFXOXVjeXhjY2x4dUlDQWdJQ0FnWW14bGJtUlRkR0YwWlhNc1hISmNiaUFnSUNBZ0lHSnNaVzVrVkdoeVpYTm9iMnhrY3l4Y2NseHVJQ0FnSUNBZ1lteGxibVJOWVhSamFGQm9ZWE5sYzF4eVhHNGdJQ0FnS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5YmlCaElHNWxkeUJwYm5OMFlXNWpaU0J2WmlCaElFSnNaVzVrTW1SVGRHRjBaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IzQjBhVzl1Y3lBdElFOXdkR2x2Ym5NZ2RHOGdjR0Z6Y3lCMGJ5QjBhR1VnUW14bGJtUXhaRk4wWVhSbElHTnZibk4wY25WamRHOXlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1blBYMGdiM0IwYVc5dWN5NXVZVzFsSUMwZ1RtRnRaU0JtYjNJZ2RHaGxJR0Z1YVcxaGRHbHZiaUJ6ZEdGMFpTNGdUbUZ0WlhNZ2JYVnpkQ0JpWlZ4eVhHNGdJQ0FxSUhWdWFYRjFaU0JtYjNJZ2RHaGxJR3hoZVdWeUlIUm9aU0J6ZEdGMFpTQnBjeUJoY0hCc2FXVmtJSFJ2TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3ZDJWcFoyaDBmU0JiYjNCMGFXOXVjeTUzWldsbmFIUTlNRjBnTFNCVWFHVWdNQzB4SUdGdGIzVnVkQ0J2WmlCcGJtWnNkV1Z1WTJVZ2RHaGxJSE4wWVhSbElIZHBiR3dnYUdGMlpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzUnBiV1ZUWTJGc1pYMGdXMjl3ZEdsdmJuTXVkR2x0WlZOallXeGxQVEZkSUMwZ1JtRmpkRzl5SUhSdklITmpZV3hsSUhSb1pTQndiR0Y1WW1GamF5QnpjR1ZsWkNCdlppQjBhR1ZjY2x4dUlDQWdLaUJoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnR2Y0hScGIyNXpMbXh2YjNCRGIzVnVkRDFKYm1acGJtbDBlVjBnTFNCT2RXMWlaWElnYjJZZ2RHbHRaWE1nZEdobElHRnVhVzFoZEdsdmJpQnphRzkxYkdSY2NseHVJQ0FnS2lCeVpYQmxZWFFnWW1WbWIzSmxJR1pwYm1semFHbHVaeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMjl3ZEdsdmJuTXVZbXhsYm1STmIyUmxQVXhoZVdWeVFteGxibVJOYjJSbGMxdEVaV1poZFd4MFRHRjVaWEpDYkdWdVpFMXZaR1ZkWFNBdElGUjVjR1VnYjJaY2NseHVJQ0FnS2lCaWJHVnVaR2x1WnlCMGFHVWdZVzVwYldGMGFXOXVJSE5vYjNWc1pDQjFjMlV1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhUMkpxWldOMFBuMGdXMjl3ZEdsdmJuTXVZbXhsYm1SVGRHRjBaVTl3ZEdsdmJuTmRJQzBnUVhKeVlYa2diMllnYjNCMGFXOXVjeUIxYzJWa0lIUnZJR055WldGMFpTQjBhR1ZjY2x4dUlDQWdLaUJpYkdWdVpDQnpkR0YwWlhNZ1ptOXlJSFJvYVhNZ1kyOXVkR0ZwYm1WeUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1FYSnlZWGt1UEVGeWNtRjVManh1ZFcxaVpYSStQbjBnVzI5d2RHbHZibk11WW14bGJtUlVhSEpsYzJodmJHUnpYU0F0SUVGeWNtRjVJRzltSUVGeWNtRjVJRzltSUc1MWJXSmxjbk1nZFhObFpDQjBieUJ6WlhRZ2RHaGxYSEpjYmlBZ0lDb2dkR2h5WlhOb2IyeGtjeUJtYjNJZ1pXRmphQ0JpYkdWdVpDQnpkR0YwWlNCcGJpQjBhR2x6SUdOdmJuUmhhVzVsY2k1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBGeWNtRjVManhpYjI5c1pXRnVQbjBnVzI5d2RHbHZibk11WW14bGJtUk5ZWFJqYUZCb1lYTmxjejFiWFYwZ0xTQlBjSFJwYjI1aGJDQmhjbkpoZVNCdlppQmliMjlzWldGdWN5QjFjMlZrSUhSdlhISmNiaUFnSUNvZ2MyVjBJSGRvWlhSb1pYSWdiM0lnYm05MElHVmhZMmdnWW14bGJtUWdjM1JoZEdVZ2FXNGdkR2hwY3lCamIyNTBZV2x1WlhJZ2QybHNiQ0J0WVhSamFDQndhR0Z6WlhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1FteGxibVF4WkZOMFlYUmxmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOWpjbVZoZEdWQ2JHVnVaREprVTNSaGRHVW9iM0IwYVc5dWN5a2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2UySnNaVzVrVTNSaGRHVlBjSFJwYjI1eklEMGdXMTE5SUQwZ2IzQjBhVzl1Y3p0Y2NseHVJQ0FnSUdOdmJuTjBJSHRpYkdWdVpGUm9jbVZ6YUc5c1pITWdQU0JiWFgwZ1BTQnZjSFJwYjI1ek8xeHlYRzRnSUNBZ1kyOXVjM1FnZTJKc1pXNWtUV0YwWTJoUWFHRnpaWE1nUFNCYlhYMGdQU0J2Y0hScGIyNXpPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR0pzWlc1a1UzUmhkR1Z6SUQwZ1cxMDdYSEpjYmlBZ0lDQmliR1Z1WkZOMFlYUmxUM0IwYVc5dWN5NW1iM0pGWVdOb0tHSnNaVzVrVDNCMGFXOXVjeUE5UGlCN1hISmNiaUFnSUNBZ0lHSnNaVzVrVTNSaGRHVnpMbkIxYzJnb1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzSmxZWFJsVTJsdVoyeGxVM1JoZEdVb2V5NHVMbUpzWlc1a1QzQjBhVzl1Y3l3Z1lteGxibVJOYjJSbE9pQnZjSFJwYjI1ekxtSnNaVzVrVFc5a1pYMHBYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRUpzWlc1a01tUlRkR0YwWlNoY2NseHVJQ0FnSUNBZ2IzQjBhVzl1Y3l4Y2NseHVJQ0FnSUNBZ1lteGxibVJUZEdGMFpYTXNYSEpjYmlBZ0lDQWdJR0pzWlc1a1ZHaHlaWE5vYjJ4a2N5eGNjbHh1SUNBZ0lDQWdZbXhsYm1STllYUmphRkJvWVhObGMxeHlYRzRnSUNBZ0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsZEhWeWJpQmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQmhJRkpoYm1SdmJVRnVhVzFoZEdsdmJsTjBZWFJsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1eklDMGdUM0IwYVc5dWN5QjBieUJ3WVhOeklIUnZJSFJvWlNCU1lXNWtiMjFCYm1sdFlYUnBiMjVUZEdGMFpTQmpiMjV6ZEhKMVkzUnZjaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVp6MTlJRzl3ZEdsdmJuTXVibUZ0WlNBdElFNWhiV1VnWm05eUlIUm9aU0JoYm1sdFlYUnBiMjRnYzNSaGRHVXVJRTVoYldWeklHMTFjM1FnWW1WY2NseHVJQ0FnS2lCMWJtbHhkV1VnWm05eUlIUm9aU0JzWVhsbGNpQjBhR1VnYzNSaGRHVWdhWE1nWVhCd2JHbGxaQ0IwYnk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzI5d2RHbHZibk11Y0d4aGVVbHVkR1Z5ZG1Gc1BUTmRJQzBnVkdobElHSmhjMlVnWVc1cGJXRjBhVzl1SUhCc1lYbGlZV05ySUdsdWRHVnlkbUZzTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQRTlpYW1WamRENTlJRnR2Y0hScGIyNXpMbk4xWWxOMFlYUmxUM0IwYVc5dWMxMGdMU0JCY25KaGVTQnZaaUJ2Y0hScGIyNXpJSFZ6WldRZ2RHOGdZM0psWVhSbElIUm9aVnh5WEc0Z0lDQXFJSE4xWWlCemRHRjBaWE1nWm05eUlIUm9hWE1nWTI5dWRHRnBibVZ5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKaGJtUnZiVUZ1YVcxaGRHbHZibE4wWVhSbGZWeHlYRzRnSUNBcUwxeHlYRzRnSUY5amNtVmhkR1ZTWVc1a2IyMUJibWx0WVhScGIyNVRkR0YwWlNodmNIUnBiMjV6S1NCN1hISmNiaUFnSUNCamIyNXpkQ0I3YzNWaVUzUmhkR1ZQY0hScGIyNXpJRDBnVzExOUlEMGdiM0IwYVc5dWN6dGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQnpkV0pUZEdGMFpYTWdQU0JiWFR0Y2NseHVJQ0FnSUhOMVlsTjBZWFJsVDNCMGFXOXVjeTVtYjNKRllXTm9LSE4xWWxOMFlYUmxUM0IwYVc5dWN5QTlQaUI3WEhKY2JpQWdJQ0FnSUhOMVlsTjBZWFJsY3k1d2RYTm9LRnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk55WldGMFpWTnBibWRzWlZOMFlYUmxLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDNHVMbk4xWWxOMFlYUmxUM0IwYVc5dWN5eGNjbHh1SUNBZ0lDQWdJQ0FnSUdKc1pXNWtUVzlrWlRvZ2IzQjBhVzl1Y3k1aWJHVnVaRTF2WkdVc1hISmNiaUFnSUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVW1GdVpHOXRRVzVwYldGMGFXOXVVM1JoZEdVb2IzQjBhVzl1Y3l3Z2MzVmlVM1JoZEdWektUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRTFoYTJVZ2MzVnlaU0IwYUdVZ2JHRjVaWElnZDJsMGFDQjBhR1VnWjJsMlpXNGdibUZ0WlNCbGVHbHpkSE1nWVc1a0lISmxkSFZ5YmlCaElIVnVhWEYxWlNCMlpYSnphVzl1WEhKY2JpQWdJQ29nYjJZZ2RHaGxJR0Z1YVcxaGRHbHZiaUJ1WVcxbElITjFjSEJzYVdWa0lHWnZjaUIwYUdGMElHeGhlV1Z5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnNZWGxsY2s1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCc1lYbGxjaUIwYnlCamFHVmpheUJoWjJGcGJuTjBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0WVhScGIyNU9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJSFJ2SUhaaGJHbGtZWFJsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTNOMGNtbHVaMzBnVm1Gc2FXUmhkR1ZrSUdGdWFXMWhkR2x2YmlCdVlXMWxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lGOTJZV3hwWkdGMFpVNWxkMEZ1YVcxaGRHbHZiaWhzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVXBJSHRjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCMGFHVWdiR0Y1WlhKT1lXMWxJR2x6SUhaaGJHbGtYSEpjYmlBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUhSb2FYTXVYMnhoZVdWeVRXRndXMnhoZVdWeVRtRnRaVjA3WEhKY2JseHlYRzRnSUNBZ2FXWWdLR3hoZVdWeUlEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1lXUmtJR0Z1YVcxaGRHbHZiaUIwYnlCc1lYbGxjaUFrZTJ4aGVXVnlUbUZ0WlgwZ1puSnZiU0JvYjNOMElDUjdkR2hwY3k1ZmFHOXpkQzVwWkgwdUlFNXZJR3hoZVdWeUlHVjRhWE4wY3lCM2FYUm9JSFJvYVhNZ2JtRnRaUzVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnVFdGclpTQnpkWEpsSUhSb1pTQmhibWx0WVhScGIyNU9ZVzFsSUdseklIVnVhWEYxWlZ4eVhHNGdJQ0FnWTI5dWMzUWdibUZ0WlNBOUlGVjBhV3h6TG1kbGRGVnVhWEYxWlU1aGJXVW9ZVzVwYldGMGFXOXVUbUZ0WlN3Z2JHRjVaWEl1WjJWMFUzUmhkR1ZPWVcxbGN5Z3BLVHRjY2x4dVhISmNiaUFnSUNCcFppQW9ibUZ0WlNBaFBUMGdZVzVwYldGMGFXOXVUbUZ0WlNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEhKY2JpQWdJQ0FnSUNBZ1lFRnVhVzFoZEdsdmJpQnVZVzFsSUNSN1lXNXBiV0YwYVc5dVRtRnRaWDBnYVhNZ2JtOTBJSFZ1YVhGMVpTQm1iM0lnYkdGNVpYSWdKSHRzWVhsbGNpNXVZVzFsZlM0Z1FXNXBiV0YwYVc5dUlIZHBiR3dnWW1VZ2NtVnVZVzFsWkNCMGJ5QWtlMjVoYldWOUxtQmNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1GdFpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ2QyaGxkR2hsY2lCdmNpQnViM1FnWVd4c0lHRnVhVzFoZEdsdmJuTWdZWEpsSUhCaGRYTmxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WldGa2IyNXNlVnh5WEc0Z0lDQXFJRUIwZVhCbElIdGliMjlzWldGdWZWeHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRDQndZWFZ6WldRb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0dGMWMyVmtPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QmhiaUJoY25KaGVTQnZaaUJ1WVcxbGN5QnZaaUJoYm1sdFlYUnBiMjRnYkdGNVpYSnpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsWVdSdmJteDVYSEpjYmlBZ0lDb2dRSFI1Y0dVZ2UwRnljbUY1TGp4emRISnBibWMrZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCc1lYbGxjbk1vS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZiR0Y1WlhKekxtMWhjQ2hzWVhsbGNpQTlQaUJzWVhsbGNpNXVZVzFsS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFTnlaV0YwWlNCaGJtUWdjM1J2Y21VZ1lTQnVaWGNnWVc1cGJXRjBhVzl1SUd4aGVXVnlMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlGdHVZVzFsUFNkT1pYZE1ZWGxsY2lkZElDMGdUbUZ0WlNCbWIzSWdkR2hsSUd4aGVXVnlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmJiM0IwYVc5dWN6MTdmVjBnTFNCUGNIUnBiMjV6SUhSdklIQmhjM01nZEc4Z2UwQnNhVzVySUVGdWFXMWhkR2x2Ymt4aGVXVnlJMk52Ym5OMGNuVmpkRzl5ZlZ4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YVc1a1pYZzlmU0JwYm1SbGVDQXRJRWx1WkdWNElIUnZJR2x1YzJWeWRDQjBhR1VnYm1WM0lHeGhlV1Z5SUdGMExpQkpaaUJ1YjI1bElHbHpJSEJ5YjNacFpHVmtYSEpjYmlBZ0lDb2dhWFFnZDJsc2JDQmlaU0JoWkdSbFpDQjBieUIwYUdVZ1pXNWtJRzltSUhSb1pTQnpkR0ZqYXk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0dWRXMWlaWEo5SUVsdVpHVjRJRzltSUhSb1pTQnVaWGNnYkdGNVpYSXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1lXUmtUR0Y1WlhJb2JtRnRaU0E5SUNkT1pYZE1ZWGxsY2ljc0lHOXdkR2x2Ym5NZ1BTQjdmU3dnYVc1a1pYZ3BJSHRjY2x4dUlDQWdJR052Ym5OMElHNTFiVXhoZVdWeWN5QTlJSFJvYVhNdVgyeGhlV1Z5Y3k1c1pXNW5kR2c3WEhKY2JpQWdJQ0JzWlhRZ2JHRjVaWEpKYm1SbGVDQTlJR2x1WkdWNE8xeHlYRzVjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCMGFHVWdaMmwyWlc0Z2FXNWtaWGdnYVhNZ2QybDBhR2x1SUhSb1pTQnlZVzVuWlNCdlppQnNZWGxsY25OY2NseHVJQ0FnSUdsbUlDaHBibVJsZUNBOVBUMGdkVzVrWldacGJtVmtJSHg4SUdsdVpHVjRJRDA5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0JzWVhsbGNrbHVaR1Y0SUQwZ2RHaHBjeTVmYkdGNVpYSnpMbXhsYm1kMGFEdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lHeGhlV1Z5U1c1a1pYZ2dQU0IwYUdsekxsOTJZV3hwWkdGMFpVbHVaR1Y0S0dsdVpHVjRMQ0JtWVd4elpTazdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9iR0Y1WlhKSmJtUmxlQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1NXNXpaWEowSUdGMElIUm9aU0JpWldkcGJtNXBibWNnYVdZZ2RHaGxJSFZ6WlhJZ2NHRnpjMlZrSUdsdUlHRWdibVZuWVhScGRtVWdhVzVrWlhoY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQQ0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWVhsbGNrbHVaR1Y0SUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0x5OGdUM1JvWlhKM2FYTmxJR0Z3Y0dWdVpDQjBieUIwYUdVZ1pXNWtYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1lYbGxja2x1WkdWNElEMGdkR2hwY3k1ZmJHRjVaWEp6TG14bGJtZDBhRHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNjbHh1SUNBZ0lDQWdJQ0FnSUdCSmJtUmxlQ0FrZTJsdVpHVjRmU0JwY3lCcGJuWmhiR2xrSUdadmNpQm9iM04wSUNSN2RHaHBjeTVmYUc5emRDNXBaSDB1SUU1bGR5QnNZWGxsY2lCM2FXeHNJR0psSUdGa1pHVmtJR0YwSUhSb1pTQmpiRzl6WlhOMElIWmhiR2xrSUdsdVpHVjRPaUFrZTJ4aGVXVnlTVzVrWlhoOUxtQmNjbHh1SUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnVFdGclpTQnpkWEpsSUhSb1pTQnNZWGxsY2lCdVlXMWxJR2x6SUhWdWFYRjFaVnh5WEc0Z0lDQWdZMjl1YzNRZ2JHRjVaWEpPWVcxbElEMGdWWFJwYkhNdVoyVjBWVzVwY1hWbFRtRnRaU2h1WVcxbExDQlBZbXBsWTNRdWEyVjVjeWgwYUdsekxsOXNZWGxsY2sxaGNDa3BPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaHVZVzFsSUNFOVBTQnNZWGxsY2s1aGJXVXBJSHRjY2x4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGeHlYRzRnSUNBZ0lDQWdJR0JNWVhsbGNpQnVZVzFsSUNSN2JtRnRaWDBnYVhNZ2JtOTBJSFZ1YVhGMVpTNGdUbVYzSUd4aGVXVnlJSGRwYkd3Z1ltVWdZV1JrWldRZ2QybDBhQ0IwYUdVZ2JtRnRaU0FrZTJ4aGVXVnlUbUZ0WlgwdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR3hoZVdWeUlEMGdibVYzSUVGdWFXMWhkR2x2Ymt4aGVXVnlLSHN1TGk1dmNIUnBiMjV6TENCdVlXMWxPaUJzWVhsbGNrNWhiV1Y5S1R0Y2NseHVJQ0FnSUhSb2FYTXVYMnhoZVdWeVRXRndXMnhoZVdWeVRtRnRaVjBnUFNCc1lYbGxjanRjY2x4dVhISmNiaUFnSUNCcFppQW9iR0Y1WlhKSmJtUmxlQ0E5UFQwZ2JuVnRUR0Y1WlhKektTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgyeGhlV1Z5Y3k1d2RYTm9LR3hoZVdWeUtUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDJ4aGVXVnljeTV6Y0d4cFkyVW9iR0Y1WlhKSmJtUmxlQ3dnTUN3Z2JHRjVaWElwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRTV2ZEdsbWVTQjBhR0YwSUdFZ2JHRjVaWElnYUdGeklHSmxaVzRnWVdSa1pXUWdkRzhnZEdobElHWmxZWFIxY21WY2NseHVJQ0FnSUdOdmJuTjBJR1YyWlc1MFJHRjBZU0E5SUh0dVlXMWxPaUJzWVhsbGNrNWhiV1VzSUdsdVpHVjRPaUJzWVhsbGNrbHVaR1Y0ZlR0Y2NseHVJQ0FnSUhSb2FYTXVaVzFwZENoMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWV1JVNVVVeTVoWkdSTVlYbGxjaXdnWlhabGJuUkVZWFJoS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z1pYWmxiblJFWVhSaE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVZ0YjNabElHRnVJR0Z1YVcxaGRHbHZiaUJzWVhsbGNpQm1jbTl0SUhSb1pTQnpkR0ZqYXk0Z1FXNXBiV0YwYVc5dWN5QnZiaUIwYUdseklHeGhlV1Z5SUhkcGJHd2dibTljY2x4dUlDQWdLaUJzYjI1blpYSWdZbVVnWlhaaGJIVmhkR1ZrTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldVZ0xTQk9ZVzFsSUdadmNpQjBhR1VnYkdGNVpYSWdkRzhnY21WdGIzWmxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJRmRvWlhSb1pYSWdiM0lnYm05MElISmxiVzkyWVd3Z2QyRnpJSE4xWTJObGMzTm1kV3d1WEhKY2JpQWdJQ292WEhKY2JpQWdjbVZ0YjNabFRHRjVaWElvYm1GdFpTa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2JHRjVaWElnUFNCMGFHbHpMbDlzWVhsbGNrMWhjRnR1WVcxbFhUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JHRjVaWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hISmNiaUFnSUNBZ0lDQWdZRVJwWkNCdWIzUWdjbVZ0YjNabElHeGhlV1Z5SUNSN2JtRnRaWDBnWm5KdmJTQm9iM04wSUNSN2RHaHBjeTVmYUc5emRDNXBaSDB1SUU1dklHeGhlV1Z5SUdWNGFYTjBjeUIzYVhSb0lIUm9hWE1nYm1GdFpTNWdYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JzWVhsbGNpNWthWE5qWVhKa0tDazdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdhVzVrWlhnZ1BTQjBhR2x6TGw5c1lYbGxjbk11YVc1a1pYaFBaaWhzWVhsbGNpazdYSEpjYmlBZ0lDQjBhR2x6TGw5c1lYbGxjbk11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjY2x4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TGw5c1lYbGxjazFoY0Z0dVlXMWxYVHRjY2x4dVhISmNiaUFnSUNBdkx5Qk9iM1JwWm5rZ2RHaGhkQ0JoSUd4aGVXVnlJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUWdabkp2YlNCMGFHVWdabVZoZEhWeVpWeHlYRzRnSUNBZ2RHaHBjeTVsYldsMEtIUm9hWE11WTI5dWMzUnlkV04wYjNJdVJWWkZUbFJUTG5KbGJXOTJaVXhoZVdWeUxDQjdibUZ0WlN3Z2FXNWtaWGg5S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbExXOXlaR1Z5SUhSb1pTQnNZWGxsY2lCemRHRmpheUJ6YnlCMGFHRjBJSFJvWlNCc1lYbGxjaUIzYVhSb0lIUm9aU0JuYVhabGJpQnVZVzFsSUdseklIQnZjMmwwYVc5dVpXUmNjbHh1SUNBZ0tpQmhkQ0IwYUdVZ1oybDJaVzRnYVc1a1pYZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtRnRaU0F0SUU1aGJXVWdiMllnZEdobElHeGhlV1Z5SUhSdklHMXZkbVV1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2x1WkdWNElDMGdUbVYzSUdsdVpHVjRJSFJ2SUhCdmMybDBhVzl1SUhSb1pTQnNZWGxsY2lCaGRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdHVkVzFpWlhKOUlGUm9aU0J1WlhjZ2FXNWtaWGdnYjJZZ2RHaGxJR3hoZVdWeVhISmNiaUFnSUNvdlhISmNiaUFnYlc5MlpVeGhlV1Z5S0c1aGJXVXNJR2x1WkdWNEtTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHNWhiV1VnYVhNZ2RtRnNhV1JjY2x4dUlDQWdJR052Ym5OMElHeGhlV1Z5SUQwZ2RHaHBjeTVmYkdGNVpYSk5ZWEJiYm1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnYlc5MlpTQnNZWGxsY2lBa2UyNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0IwYUdVZ2FXNWtaWGdnWm1Gc2JITWdhVzRnZEdobElISmhibWRsSUc5bUlHVjRhWE4wYVc1bklHeGhlV1Z5YzF4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhKSmJtUmxlQ0E5SUhSb2FYTXVYM1poYkdsa1lYUmxTVzVrWlhnb2FXNWtaWGdzSUhSeWRXVXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ2JHRnpkRWx1WkdWNElEMGdkR2hwY3k1ZmJHRjVaWEp6TG14bGJtZDBhQ0F0SURFN1hISmNibHh5WEc0Z0lDQWdhV1lnS0d4aGVXVnlTVzVrWlhnZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ1lFTmhibTV2ZENCdGIzWmxJR3hoZVdWeUlDUjdibUZ0WlgwZ1puSnZiU0JvYjNOMElDUjdkR2hwY3k1ZmFHOXpkQzVwWkgwZ2RHOGdhVzVrWlhnZ0pIdHBibVJsZUgwdUlFbHVaR1Y0SUcxMWMzUWdZbVVnYVc0Z2RHaGxJREFnTFNBa2UyeGhjM1JKYm1SbGVIMGdjbUZ1WjJVdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUkpibVJsZUNBOUlIUm9hWE11WDJ4aGVXVnljeTVwYm1SbGVFOW1LR3hoZVdWeUtUdGNjbHh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBTVzVrWlhnZ1BUMDlJR3hoZVdWeVNXNWtaWGdwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRkpsYlc5MlpTQm1jbTl0SUhSb1pTQmpkWEp5Wlc1MElIQnZjMmwwYVc5dVhISmNiaUFnSUNCMGFHbHpMbDlzWVhsbGNuTXVjM0JzYVdObEtHTjFjbkpsYm5SSmJtUmxlQ3dnTVNrN1hISmNibHh5WEc0Z0lDQWdMeThnU1c1elpYSjBJR0YwSUhSb1pTQnVaWGNnY0c5emFYUnBiMjVjY2x4dUlDQWdJR2xtSUNoc1lYbGxja2x1WkdWNElEMDlQU0JzWVhOMFNXNWtaWGdwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmYkdGNVpYSnpMbkIxYzJnb2JHRjVaWElwTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZiR0Y1WlhKekxuTndiR2xqWlNoc1lYbGxja2x1WkdWNExDQXdMQ0JzWVhsbGNpazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR3hoZVdWeVNXNWtaWGc3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVmNHUmhkR1VnZEdobElHNWhiV1VnYjJZZ1lTQnNZWGxsY2k0Z1RtRnRaWE1nYlhWemRDQmlaU0IxYm1seGRXVXNJR2xtSUhSb1pTQnVaWGNnYm1GdFpTQnBjeUJ1YjNSY2NseHVJQ0FnS2lCMWJtbHhkV1VnYVhRZ2QybHNiQ0JvWVhabElIUnlZV2xzYVc1bklHNTFiV0psY25NZ1lYQndaVzVrWldRZ2RXNTBhV3dnYVhRZ2FYTWdkVzVwY1hWbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdOMWNuSmxiblJPWVcxbElDMGdRM1Z5Y21WdWRDQnVZVzFsSUc5bUlIUm9aU0JzWVhsbGNpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JtVjNUbUZ0WlNBdElFNWxkeUJ1WVcxbElIUnZJSE5sZENCdmJpQjBhR1VnYkdGNVpYSXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdjM1J5YVc1bmZTQlVhR1VnYm1WM0lHNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeVhISmNiaUFnSUNvdlhISmNiaUFnY21WdVlXMWxUR0Y1WlhJb1kzVnljbVZ1ZEU1aGJXVXNJRzVsZDA1aGJXVXBJSHRjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCMGFHVWdibUZ0WlNCcGN5QjJZV3hwWkZ4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQjBhR2x6TGw5c1lYbGxjazFoY0Z0amRYSnlaVzUwVG1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnY21WdVlXMWxJR3hoZVdWeUlDUjdZM1Z5Y21WdWRFNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0IwYUdVZ2JHRjVaWElnYm1GdFpTQnBjeUIxYm1seGRXVmNjbHh1SUNBZ0lHTnZibk4wSUc1aGJXVWdQU0JWZEdsc2N5NW5aWFJWYm1seGRXVk9ZVzFsS0c1bGQwNWhiV1VzSUU5aWFtVmpkQzVyWlhsektIUm9hWE11WDJ4aGVXVnlUV0Z3S1NrN1hISmNibHh5WEc0Z0lDQWdhV1lnS0c1aGJXVWdJVDA5SUc1bGQwNWhiV1VwSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRnh5WEc0Z0lDQWdJQ0FnSUdCTVlYbGxjaUJ1WVcxbElDUjdibVYzVG1GdFpYMGdhWE1nYm05MElIVnVhWEYxWlM0Z1RHRjVaWElnZDJsc2JDQmlaU0J5Wlc1aGJXVmtJSFJ2SUNSN2JtRnRaWDB1WUZ4eVhHNGdJQ0FnSUNBcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TGw5c1lYbGxjazFoY0Z0amRYSnlaVzUwVG1GdFpWMDdYSEpjYmlBZ0lDQjBhR2x6TGw5c1lYbGxjazFoY0Z0dVlXMWxYU0E5SUd4aGVXVnlPMXh5WEc0Z0lDQWdiR0Y1WlhJdWJtRnRaU0E5SUc1aGJXVTdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1RtOTBhV1o1SUhSb1lYUWdZU0JzWVhsbGNpQm9ZWE1nWW1WbGJpQnlaVzVoYldWa0lHOXVJSFJvWlNCbVpXRjBkWEpsWEhKY2JpQWdJQ0IwYUdsekxtVnRhWFFvZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVGVmtWT1ZGTXVjbVZ1WVcxbFRHRjVaWElzSUh0Y2NseHVJQ0FnSUNBZ2IyeGtUbUZ0WlRvZ1kzVnljbVZ1ZEU1aGJXVXNYSEpjYmlBZ0lDQWdJRzVsZDA1aGJXVTZJRzVoYldVc1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibUZ0WlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5YmlCMGFHVWdkMlZwWjJoMElHOW1JR0Z1SUdGdWFXMWhkR2x2YmlCc1lYbGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHOGdjbVYwZFhKdUlIZGxhV2RvZENCbWNtOXRMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjUxYldKbGNuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUk1ZWGxsY2xkbGFXZG9kQ2h1WVcxbEtTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHNWhiV1VnYVhNZ2RtRnNhV1JjY2x4dUlDQWdJR052Ym5OMElHeGhlV1Z5SUQwZ2RHaHBjeTVmYkdGNVpYSk5ZWEJiYm1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnWjJWMElIZGxhV2RvZENCdmJpQnNZWGxsY2lBa2UyNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCc1lYbGxjaTUzWldsbmFIUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJWY0dSaGRHVWdkR2hsSUhkbGFXZG9kQ0J2WmlCaGJpQmhibWx0WVhScGIyNGdiR0Y1WlhJdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQXRJRlJvWlNCdVlXMWxJRzltSUhSb1pTQnNZWGxsY2lCMGJ5QjFjR1JoZEdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhkbGFXZG9kQ0F0SUZSb1pTQjNaV2xuYUhRZ2RtRnNkV1VnZEc4Z2MyVjBJRzl1SUhSb1pTQnNZWGxsY2k0Z1ZHaHBjeUJ1ZFcxaVpYSmNjbHh1SUNBZ0tpQnphRzkxYkdRZ1ltVWdhVzRnZEdobElEQXRNU0J5WVc1blpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY2oxOUlITmxZMjl1WkhNZ0xTQlVhR1VnYm5WdFltVnlJRzltSUhObFkyOXVaSE1nYVhRZ2MyaHZkV3hrSUhSaGEyVWdkRzhnY21WaFkyZ2dkR2hsWEhKY2JpQWdJQ29nYm1WM0lIZGxhV2RvZEM0Z1JHVm1ZWFZzZENCcGN5QjZaWEp2SUdGdVpDQjNhV3hzSUhObGRDQnBiVzFsWkdsaGRHVnNlUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnWldGemFXNW5SbTRnTFNCVWFHVWdaV0Z6YVc1bklHWjFibU4wYVc5dUlIUnZJSFZ6WlNCM2FHbHNaU0JwYm5SbGNuQnZiR0YwYVc1blhISmNiaUFnSUNvZ2RHaGxJSGRsYVdkb2RDNGdSR1ZtWVhWc2RDQnBjeUJGWVhOcGJtY3VUR2x1WldGeUxrbHVUM1YwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBSbFptVnljbVZrZlNCQklIQnliMjFwYzJVZ2RHaGhkQ0IzYVd4c0lISmxjMjlzZG1VZ2IyNWpaU0IwYUdVZ2JHRjVaWEluY3lCM1pXbG5hSFFnY21WaFkyaGxjMXh5WEc0Z0lDQXFJSFJvWlNCMFlYSm5aWFFnZG1Gc2RXVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MyVjBUR0Y1WlhKWFpXbG5hSFFvYm1GdFpTd2dkMlZwWjJoMExDQnpaV052Ym1SekxDQmxZWE5wYm1kR2Jpa2dlMXh5WEc0Z0lDQWdMeThnVFdGclpTQnpkWEpsSUhSb1pTQnVZVzFsSUdseklIWmhiR2xrWEhKY2JpQWdJQ0JqYjI1emRDQnNZWGxsY2lBOUlIUm9hWE11WDJ4aGVXVnlUV0Z3VzI1aGJXVmRPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaHNZWGxsY2lBOVBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUdOdmJuTjBJR1VnUFNCZ1EyRnVibTkwSUhObGRDQjNaV2xuYUhRZ2IyNGdiR0Y1WlhJZ0pIdHVZVzFsZlNCbWNtOXRJR2h2YzNRZ0pIdDBhR2x6TGw5b2IzTjBMbWxrZlM0Z1RtOGdiR0Y1WlhJZ1pYaHBjM1J6SUhkcGRHZ2dkR2hwY3lCdVlXMWxMbUE3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJFWldabGNuSmxaQzV5WldwbFkzUW9aU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUd4aGVXVnlMbk5sZEZkbGFXZG9kQ2gzWldsbmFIUXNJSE5sWTI5dVpITXNJR1ZoYzJsdVowWnVLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGRIVnlibk1nZEdobElHNWhiV1Z6SUc5bUlHSnNaVzVrSUhOMFlYUmxjeUJwYmlCaGJpQmhibWx0WVhScGIyNGdhVzRnWVNCc1lYbGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnNZWGxsY2s1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCc1lYbGxjaUJqYjI1MFlXbHVhVzVuSUhSb1pTQmhibWx0WVhScGIyNGdZMjl1ZEdGcGJtbHVaMXh5WEc0Z0lDQXFJSFJvWlNCaWJHVnVaQ0J6ZEdGMFpTQjBieUIxY0dSaGRHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHRnVhVzFoZEdsdmJrNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQmhibWx0WVhScGIyNGdZMjl1ZEdGcGJtbHVaeUIwYUdVZ1lteGxibVFnYzNSaGRHVmNjbHh1SUNBZ0tpQjBieUIxY0dSaGRHVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhrdVBITjBjbWx1Wno1OUlDMGdUbUZ0WlhNZ2IyWWdZbXhsYm1RZ2MzUmhkR1Z6TGx4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZEVGdWFXMWhkR2x2YmtKc1pXNWtUbUZ0WlhNb2JHRjVaWEpPWVcxbExDQmhibWx0WVhScGIyNU9ZVzFsS1NCN1hISmNiaUFnSUNCamIyNXpkQ0JzWVhsbGNpQTlJSFJvYVhNdVgyeGhlV1Z5VFdGd1cyeGhlV1Z5VG1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnWjJWMElHSnNaVzVrSUc1aGJXVnpJRzl1SUd4aGVXVnlJQ1I3YkdGNVpYSk9ZVzFsZlNCbWNtOXRJR2h2YzNRZ0pIdDBhR2x6TGw5b2IzTjBMbWxrZlM0Z1RtOGdiR0Y1WlhJZ1pYaHBjM1J6SUhkcGRHZ2dkR2hwY3lCdVlXMWxMbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JHRjVaWEl1WjJWMFFXNXBiV0YwYVc5dVFteGxibVJPWVcxbGN5aGhibWx0WVhScGIyNU9ZVzFsS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGVndaR0YwWlNCMGFHVWdkMlZwWjJoMElHWnZjaUJoSUdKc1pXNWtJSE4wWVhSbElHbHVJR0Z1SUdGdWFXMWhkR2x2YmlCcGJpQmhJR3hoZVdWeUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd4aGVXVnlUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUlHTnZiblJoYVc1cGJtY2dkR2hsSUdGdWFXMWhkR2x2YmlCamIyNTBZV2x1YVc1blhISmNiaUFnSUNvZ2RHaGxJR0pzWlc1a0lITjBZWFJsSUhSdklIVndaR0YwWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWVc1cGJXRjBhVzl1VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUdGdWFXMWhkR2x2YmlCamIyNTBZV2x1YVc1bklIUm9aU0JpYkdWdVpDQnpkR0YwWlZ4eVhHNGdJQ0FxSUhSdklIVndaR0YwWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWW14bGJtUk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZbXhsYm1RZ2MzUmhkR1VnZEc4Z2RYQmtZWFJsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0IzWldsbmFIUWdMU0JYWldsbmFIUWdkbUZzZFdVZ2RHOGdjMlYwSUc5dUlIUm9aU0JoYm1sdFlYUnBiMjR1SUZSb2FYTWdiblZ0WW1WeUlITm9iM1ZrYkdRZ1ltVmNjbHh1SUNBZ0tpQnBiaUIwYUdVZ01DMHhJSEpoYm1kbExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5UFgwZ2MyVmpiMjVrY3lBdElFNTFiV0psY2lCdlppQnpaV052Ym1SeklHbDBJSE5vYjNWc1pDQjBZV3RsSUhSdklISmxZV05vSUhSb1pTQnVaWGNnZDJWcFoyaDBMbHh5WEc0Z0lDQXFJRVJsWm1GMWJIUWdhWE1nZW1WeWJ5QmhibVFnZDJsc2JDQnpaWFFnYVcxdFpXUnBZWFJsYkhrdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHVmhjMmx1WjBadUlDMGdSV0Z6YVc1bklHWjFibU4wYVc5dUlIUnZJSFZ6WlNCM2FHbHNaU0JwYm5SbGNuQnZiR0YwYVc1bklIUm9aU0J1WlhkY2NseHVJQ0FnS2lCM1pXbG5hSFF1SUVSbFptRjFiSFFnYVhNZ1JXRnphVzVuTGt4cGJtVmhjaTVKYms5MWRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEVaV1psY25KbFpIMGdMU0JRY205dGFYTmxJSFJvWVhRZ2QybHNiQ0J5WlhOdmJIWmxJRzl1WTJVZ2RHaGxJR0Z1YVcxaGRHbHZiaWR6SUhkbGFXZG9kQ0J5WldGamFHVnpYSEpjYmlBZ0lDb2dkR2hsSUhSaGNtZGxkQ0IyWVd4MVpTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCelpYUkJibWx0WVhScGIyNUNiR1Z1WkZkbGFXZG9kQ2hjY2x4dUlDQWdJR3hoZVdWeVRtRnRaU3hjY2x4dUlDQWdJR0Z1YVcxaGRHbHZiazVoYldVc1hISmNiaUFnSUNCaWJHVnVaRTVoYldVc1hISmNiaUFnSUNCM1pXbG5hSFFzWEhKY2JpQWdJQ0J6WldOdmJtUnpMRnh5WEc0Z0lDQWdaV0Z6YVc1blJtNWNjbHh1SUNBcElIdGNjbHh1SUNBZ0lHTnZibk4wSUd4aGVXVnlJRDBnZEdocGN5NWZiR0Y1WlhKTllYQmJiR0Y1WlhKT1lXMWxYVHRjY2x4dVhISmNiaUFnSUNCcFppQW9iR0Y1WlhJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JsSUQwZ1lFTmhibTV2ZENCelpYUWdZbXhsYm1RZ2QyVnBaMmgwSUc5dUlHeGhlV1Z5SUNSN2JHRjVaWEpPWVcxbGZTQm1jbTl0SUdodmMzUWdKSHQwYUdsekxsOW9iM04wTG1sa2ZTNGdUbThnYkdGNVpYSWdaWGhwYzNSeklIZHBkR2dnZEdocGN5QnVZVzFsTG1BN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCRVpXWmxjbkpsWkM1eVpXcGxZM1FvWlNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHeGhlV1Z5TG5ObGRFRnVhVzFoZEdsdmJrSnNaVzVrVjJWcFoyaDBLRnh5WEc0Z0lDQWdJQ0JoYm1sdFlYUnBiMjVPWVcxbExGeHlYRzRnSUNBZ0lDQmliR1Z1WkU1aGJXVXNYSEpjYmlBZ0lDQWdJSGRsYVdkb2RDeGNjbHh1SUNBZ0lDQWdjMlZqYjI1a2N5eGNjbHh1SUNBZ0lDQWdaV0Z6YVc1blJtNWNjbHh1SUNBZ0lDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCM1pXbG5hSFFnWm05eUlHRWdZbXhsYm1RZ2MzUmhkR1VnYVc0Z1lXNGdZVzVwYldGMGFXOXVJR2x1SUdFZ2JHRjVaWEl1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0Y1WlhKT1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnWTI5dWRHRnBibWx1WnlCMGFHVWdZVzVwYldGMGFXOXVJR052Ym5SaGFXNXBibWRjY2x4dUlDQWdLaUIwYUdVZ1lteGxibVFnYzNSaGRHVWdkRzhnZFhCa1lYUmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0WVhScGIyNU9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJR052Ym5SaGFXNXBibWNnZEdobElHSnNaVzVrSUhOMFlYUmxYSEpjYmlBZ0lDb2dkRzhnZFhCa1lYUmxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmliR1Z1WkU1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCaWJHVnVaQ0J6ZEdGMFpTQjBieUIxY0dSaGRHVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiblZ0WW1WeWZTQXRJRmRsYVdkb2RDQnZaaUIwYUdVZ1lteGxibVFnYzNSaGRHVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBRVzVwYldGMGFXOXVRbXhsYm1SWFpXbG5hSFFvYkdGNVpYSk9ZVzFsTENCaGJtbHRZWFJwYjI1T1lXMWxMQ0JpYkdWdVpFNWhiV1VwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJR3hoZVdWeUlEMGdkR2hwY3k1ZmJHRjVaWEpOWVhCYmJHRjVaWEpPWVcxbFhUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JHRjVaWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVOaGJtNXZkQ0JuWlhRZ1lteGxibVFnZDJWcFoyaDBJRzl1SUd4aGVXVnlJQ1I3YkdGNVpYSk9ZVzFsZlNCbWNtOXRJR2h2YzNRZ0pIdDBhR2x6TGw5b2IzTjBMbWxrZlM0Z1RtOGdiR0Y1WlhJZ1pYaHBjM1J6SUhkcGRHZ2dkR2hwY3lCdVlXMWxMbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JHRjVaWEl1WjJWMFFXNXBiV0YwYVc5dVFteGxibVJYWldsbmFIUW9ZVzVwYldGMGFXOXVUbUZ0WlN3Z1lteGxibVJPWVcxbEtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkJoZFhObElIZGxhV2RvZENCcGJuUmxjbkJ2YkdGMGFXOXVJR0Z1YVcxaGRHbHZiaUJ2YmlCaElHeGhlV1Z5SUhkcGRHZ2dkR2hsSUdkcGRtVnVJRzVoYldVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUd4aGVXVnlJSFJ2SUhCaGRYTmxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJQzBnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkR2hsY21VZ2QyRnpJR0Z1SUdWNGFYTjBhVzVuSUdsdWRHVnljRzlzWVhScGIyNGdkRzhnY0dGMWMyVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NHRjFjMlZNWVhsbGNsZGxhV2RvZENodVlXMWxLU0I3WEhKY2JpQWdJQ0F2THlCTllXdGxJSE4xY21VZ2RHaGxJRzVoYldVZ2FYTWdkbUZzYVdSY2NseHVJQ0FnSUdOdmJuTjBJR3hoZVdWeUlEMGdkR2hwY3k1ZmJHRjVaWEpOWVhCYmJtRnRaVjA3WEhKY2JseHlYRzRnSUNBZ2FXWWdLR3hoZVdWeUlEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ2NHRjFjMlVnZDJWcFoyaDBJR2x1ZEdWeWNHOXNZWFJwYjI0Z2IyNGdiR0Y1WlhJZ0pIdHVZVzFsZlNCbWNtOXRJR2h2YzNRZ0pIdDBhR2x6TGw5b2IzTjBMbWxrZlM0Z1RtOGdiR0Y1WlhJZ1pYaHBjM1J6SUhkcGRHZ2dkR2hwY3lCdVlXMWxMbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JHRjVaWEl1Y0dGMWMyVlhaV2xuYUhRb0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsYzNWdFpTQjNaV2xuYUhRZ2FXNTBaWEp3YjJ4aGRHbHZiaUJoYm1sdFlYUnBiMjRnYjI0Z1lTQnNZWGxsY2lCM2FYUm9JSFJvWlNCbmFYWmxiaUJ1WVcxbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCc1lYbGxjaUIwYnlCeVpYTjFiV1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UkdWbVpYSnlaV1I5SUMwZ1VtVnpiMngyWlhNZ2IyNWpaU0IwYUdVZ2JHRjVaWEluY3lCM1pXbG5hSFFnY21WaFkyaGxjeUJwZEhNZ2RHRnlaMlYwSUhaaGJIVmxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lISmxjM1Z0WlV4aGVXVnlWMlZwWjJoMEtHNWhiV1VwSUh0Y2NseHVJQ0FnSUM4dklFMWhhMlVnYzNWeVpTQjBhR1VnYm1GdFpTQnBjeUIyWVd4cFpGeHlYRzRnSUNBZ1kyOXVjM1FnYkdGNVpYSWdQU0IwYUdsekxsOXNZWGxsY2sxaGNGdHVZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvYkdGNVpYSWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCbElEMGdZRU5oYm01dmRDQnlaWE4xYldVZ2QyVnBaMmgwSUdsdWRHVnljRzlzWVhScGIyNGdiMjRnYkdGNVpYSWdKSHR1WVcxbGZTQm1jbTl0SUdodmMzUWdKSHQwYUdsekxsOW9iM04wTG1sa2ZTNGdUbThnYkdGNVpYSWdaWGhwYzNSeklIZHBkR2dnZEdocGN5QnVZVzFsTG1BN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCRVpXWmxjbkpsWkM1eVpXcGxZM1FvWlNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHeGhlV1Z5TG5KbGMzVnRaVmRsYVdkb2RDZ3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVUdGMWMyVWdZM1Z5Y21WdWRDQmhibWx0WVhScGIyNGdZVzVrSUhkbGFXZG9kQ0JwYm5SbGNuQnZiR0YwYVc5dUlHRnVhVzFoZEdsdmJpQnZiaUJoSUd4aGVXVnlJSGRwZEdoY2NseHVJQ0FnS2lCMGFHVWdaMmwyWlc0Z2JtRnRaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHOGdjR0YxYzJVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4wZ0xTQlhhR1YwYUdWeUlHOXlJRzV2ZENCMGFHVnlaU0IzWVhNZ1lXNGdaWGhwYzNScGJtY2dhVzUwWlhKd2IyeGhkR2x2YmlCdmNseHlYRzRnSUNBcUlHTjFjbkpsYm5RZ1lXNXBiV0YwYVc5dUlIUnZJSEJoZFhObExseHlYRzRnSUNBcUwxeHlYRzRnSUhCaGRYTmxUR0Y1WlhJb2JtRnRaU2tnZTF4eVhHNGdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0J1WVcxbElHbHpJSFpoYkdsa1hISmNiaUFnSUNCamIyNXpkQ0JzWVhsbGNpQTlJSFJvYVhNdVgyeGhlV1Z5VFdGd1cyNWhiV1ZkTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hzWVhsbGNpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2NseHVJQ0FnSUNBZ0lDQmdRMkZ1Ym05MElIQmhkWE5sSUd4aGVXVnlJQ1I3Ym1GdFpYMGdabkp2YlNCb2IzTjBJQ1I3ZEdocGN5NWZhRzl6ZEM1cFpIMHVJRTV2SUd4aGVXVnlJR1Y0YVhOMGN5QjNhWFJvSUhSb2FYTWdibUZ0WlM1Z1hISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR3hoZVdWeUxuQmhkWE5sS0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlNaWE4xYldVZ1kzVnljbVZ1ZENCaGJtbHRZWFJwYjI0Z1lXNWtJSGRsYVdkb2RDQnBiblJsY25CdmJHRjBhVzl1SUdGdWFXMWhkR2x2YmlCdmJpQmhJR3hoZVdWeUlIZHBkR2hjY2x4dUlDQWdLaUIwYUdVZ1oybDJaVzRnYm1GdFpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdVlXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnZEc4Z2NtVnpkVzFsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBSbFptVnljbVZrZlNBdElGSmxjMjlzZG1WeklHOXVZMlVnZEdobElHeGhlV1Z5SjNNZ2QyVnBaMmgwSUhKbFlXTm9aWE1nYVhSeklIUmhjbWRsZENCMllXeDFaVnh5WEc0Z0lDQXFJR0Z1WkNCcGRDZHpJR04xY25KbGJuUWdZVzVwYldGMGFXOXVJR1pwYm1semFHVnpJSEJzWVhscGJtY3VYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NtVnpkVzFsVEdGNVpYSW9ibUZ0WlNrZ2UxeHlYRzRnSUNBZ0x5OGdUV0ZyWlNCemRYSmxJSFJvWlNCdVlXMWxJR2x6SUhaaGJHbGtYSEpjYmlBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUhSb2FYTXVYMnhoZVdWeVRXRndXMjVoYldWZE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoc1lYbGxjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJR052Ym5OMElHVWdQU0JnUTJGdWJtOTBJSEpsYzNWdFpTQnNZWGxsY2lBa2UyNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJsWm1WeWNtVmtMbkpsYW1WamRDaGxLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYkdGNVpYSXVjbVZ6ZFcxbEtDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHaGxJR0Z1YVcxaGRHbHZiaUJzWVhsbGNpQjNhWFJvSUhSb1pTQm5hWFpsYmlCdVlXMWxJR2x6SUdOMWNuSmxiblJzZVZ4eVhHNGdJQ0FxSUhSeVlXNXphWFJwYjI1cGJtY2dZbVYwZDJWbGJpQmhibWx0WVhScGIyNXpMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHeGhlV1Z5VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUd4aGVXVnlJSFJ2SUdOb1pXTnJMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBWSEpoYm5OcGRHbHZibWx1Wnloc1lYbGxjazVoYldVcElIdGNjbHh1SUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0IwYUdVZ2JHRjVaWEpPWVcxbElHbHpJSFpoYkdsa1hISmNiaUFnSUNCamIyNXpkQ0JzWVhsbGNpQTlJSFJvYVhNdVgyeGhlV1Z5VFdGd1cyeGhlV1Z5VG1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCSFpYUWdkSEpoYm5OcGRHbHZibWx1WnlCdmJpQnNZWGxsY2lBa2UyeGhlV1Z5VG1GdFpYMGdabkp2YlNCb2IzTjBJQ1I3ZEdocGN5NWZhRzl6ZEM1cFpIMHVJRTV2SUd4aGVXVnlJR1Y0YVhOMGN5QjNhWFJvSUhSb2FYTWdibUZ0WlM1Z1hISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR3hoZVdWeUxtbHpWSEpoYm5OcGRHbHZibWx1Wnp0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5YmlCaGJpQmhjbkpoZVNCdlppQjBhR1VnYm1GdFpYTWdiMllnWVd4c0lITjBZWFJsY3lCMGFHVWdiR0Y1WlhJZ2QybDBhQ0IwYUdVZ1oybDJaVzRnYm1GdFpTQmpiMjUwY205c2N5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCc1lYbGxjazVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JzWVhsbGNpQjBieUJ6WldGeVkyZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhrdVBITjBjbWx1Wno1OVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMFFXNXBiV0YwYVc5dWN5aHNZWGxsY2s1aGJXVXBJSHRjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCMGFHVWdiR0Y1WlhKT1lXMWxJR2x6SUhaaGJHbGtYSEpjYmlBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUhSb2FYTXVYMnhoZVdWeVRXRndXMnhoZVdWeVRtRnRaVjA3WEhKY2JseHlYRzRnSUNBZ2FXWWdLR3hoZVdWeUlEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lHQkhaWFFnWVc1cGJXRjBhVzl1Y3lCdmJpQnNZWGxsY2lBa2UyeGhlV1Z5VG1GdFpYMGdabkp2YlNCb2IzTjBJQ1I3ZEdocGN5NWZhRzl6ZEM1cFpIMHVJRTV2SUd4aGVXVnlJR1Y0YVhOMGN5QjNhWFJvSUhSb2FYTWdibUZ0WlM1Z1hISmNiaUFnSUNBZ0lDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR3hoZVdWeUxtZGxkRk4wWVhSbFRtRnRaWE1vS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5YmlCMGFHVWdibUZ0WlNCdlppQjBhR1VnYzNSaGRHVWdZM1Z5Y21WdWRHeDVJR0ZqZEdsMlpTQnZiaUIwYUdVZ2JHRjVaWElnZDJsMGFDQjBhR1VnWjJsMlpXNGdibUZ0WlM1Y2NseHVJQ0FnS2lCU1pYUjFjbTRnYm5Wc2JDQnBaaUIwYUdWeVpTQnBjeUJ1YnlCamRYSnlaVzUwSUdGdWFXMWhkR2x2YmlCbWIzSWdkR2hsSUd4aGVXVnlMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHeGhlV1Z5VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUd4aGVXVnlMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdleWh6ZEhKcGJtZDhiblZzYkNsOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMFEzVnljbVZ1ZEVGdWFXMWhkR2x2Ymloc1lYbGxjazVoYldVcElIdGNjbHh1SUNBZ0lDOHZJRTFoYTJVZ2MzVnlaU0IwYUdVZ2JHRjVaWEpPWVcxbElHbHpJSFpoYkdsa1hISmNiaUFnSUNCamIyNXpkQ0JzWVhsbGNpQTlJSFJvYVhNdVgyeGhlV1Z5VFdGd1cyeGhlV1Z5VG1GdFpWMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHeGhlV1Z5SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCSFpYUWdZM1Z5Y21WdWRDQmhibWx0WVhScGIyNGdiMjRnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCc1lYbGxjaTVqZFhKeVpXNTBRVzVwYldGMGFXOXVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WMGRYSnVJSGRvWlhSb1pYSWdiM0lnYm05MElHRWdiR0Y1WlhJZ2QybDBhQ0IwYUdVZ1oybDJaVzRnYm1GdFpTQnBjeUJqZFhKeVpXNTBiSGtnY0d4aGVXbHVaeUJoYmx4eVhHNGdJQ0FxSUdGdWFXMWhkR2x2YmlCaGJtUWdkR2hoZENCaGJtbHRZWFJwYjI0Z2FYTWdjR0YxYzJWa0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd4aGVXVnlUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMFVHRjFjMlZrS0d4aGVXVnlUbUZ0WlNrZ2UxeHlYRzRnSUNBZ0x5OGdUV0ZyWlNCemRYSmxJSFJvWlNCc1lYbGxjazVoYldVZ2FYTWdkbUZzYVdSY2NseHVJQ0FnSUdOdmJuTjBJR3hoZVdWeUlEMGdkR2hwY3k1ZmJHRjVaWEpOWVhCYmJHRjVaWEpPWVcxbFhUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JHRjVaWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVkbGRDQndZWFZ6WldRZ2IyNGdiR0Y1WlhJZ0pIdHNZWGxsY2s1aGJXVjlJR1p5YjIwZ2FHOXpkQ0FrZTNSb2FYTXVYMmh2YzNRdWFXUjlMaUJPYnlCc1lYbGxjaUJsZUdsemRITWdkMmwwYUNCMGFHbHpJRzVoYldVdVlGeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJzWVhsbGNpNWpkWEp5Wlc1MFUzUmhkR1VnSmlZZ2JHRjVaWEl1WTNWeWNtVnVkRk4wWVhSbExuQmhkWE5sWkR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5YmlCMGFHVWdkSGx3WlNCdVlXMWxJRzltSUhSb1pTQm5hWFpsYmlCaGJtbHRZWFJwYjI0dUlFQnpaV1VnUVc1cGJXRjBhVzl1Vkhsd1pYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdZVzVwYldGMGFXOXVMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0WVhScGIyNU9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJSFJ2SUdOb1pXTnJMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUkJibWx0WVhScGIyNVVlWEJsS0d4aGVXVnlUbUZ0WlN3Z1lXNXBiV0YwYVc5dVRtRnRaU2tnZTF4eVhHNGdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0JzWVhsbGNrNWhiV1VnYVhNZ2RtRnNhV1JjY2x4dUlDQWdJR052Ym5OMElHeGhlV1Z5SUQwZ2RHaHBjeTVmYkdGNVpYSk5ZWEJiYkdGNVpYSk9ZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvYkdGNVpYSWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hISmNiaUFnSUNBZ0lDQWdZRWRsZENCaGJtbHRZWFJwYjI0Z2RIbHdaU0J2YmlCc1lYbGxjaUFrZTJ4aGVXVnlUbUZ0WlgwZ1puSnZiU0JvYjNOMElDUjdkR2hwY3k1ZmFHOXpkQzVwWkgwdUlFNXZJR3hoZVdWeUlHVjRhWE4wY3lCM2FYUm9JSFJvYVhNZ2JtRnRaUzVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2MzUmhkR1VnUFNCc1lYbGxjaTVuWlhSVGRHRjBaU2hoYm1sdFlYUnBiMjVPWVcxbEtUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2MzUmhkR1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YSEpjYmlBZ0lDQWdJQ0FnWUVkbGRDQmhibWx0WVhScGIyNGdkSGx3WlNCbWIzSWdZVzVwYldGMGFXOXVJQ1I3WVc1cGJXRjBhVzl1VG1GdFpYMGdiMjRnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QmhibWx0WVhScGIyNGdaWGhwYzNSeklIZHBkR2dnZEdocGN5QnVZVzFsTG1CY2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQjdZMjl1YzNSeWRXTjBiM0o5SUQwZ2MzUmhkR1U3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektFRnVhVzFoZEdsdmJsUjVjR1Z6S1M1bWFXNWtLRnh5WEc0Z0lDQWdJQ0IwZVhCbFRtRnRaU0E5UGlCQmJtbHRZWFJwYjI1VWVYQmxjMXQwZVhCbFRtRnRaVjBnUFQwOUlHTnZibk4wY25WamRHOXlYSEpjYmlBZ0lDQXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUVdSa0lHRWdibVYzSUdGdWFXMWhkR2x2YmlCMGJ5QmhiaUJoYm1sdFlYUnBiMjRnYkdGNVpYSXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkRzhnWVdSa0lIUm9aU0JoYm1sdFlYUnBiMjRnZEc4dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdGdWFXMWhkR2x2Yms1aGJXVWdMU0JPWVcxbElIUnZJSFZ6WlNCM2FHVnVJR05oYkd4cGJtY2dkR2hsSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDE5SUc5d2RHbHZibk1nTFNCUGNIUnBiMjV6SUhSdklIQmhjM01nZEc4Z2RHaGxJR052Ym5OMGNuVmpkRzl5SUdadmNpQjBhR1VnYm1WM1hISmNiaUFnSUNvZ1UybHVaMnhsVTNSaGRHVWdZVzVwYldGMGFXOXVMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMGdMU0JVYUdVZ2JtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJSFJvWVhRZ2QyRnpJR0ZrWkdWa1hISmNiaUFnSUNvdlhISmNiaUFnWVdSa1FXNXBiV0YwYVc5dUtGeHlYRzRnSUNBZ2JHRjVaWEpPWVcxbExGeHlYRzRnSUNBZ1lXNXBiV0YwYVc5dVRtRnRaU3hjY2x4dUlDQWdJR0Z1YVcxaGRHbHZibFI1Y0dVZ1BTQkJibWx0WVhScGIyNVVlWEJsY3k1emFXNW5iR1VzWEhKY2JpQWdJQ0J2Y0hScGIyNXpJRDBnZTMxY2NseHVJQ0FwSUh0Y2NseHVJQ0FnSUc5d2RHbHZibk11Ym1GdFpTQTlJSFJvYVhNdVgzWmhiR2xrWVhSbFRtVjNRVzVwYldGMGFXOXVLR3hoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1VG1GdFpTazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1RXRnJaU0J6ZFhKbElIUm9aU0JoYm1sdFlYUnBiMjRnZEhsd1pTQnBjeUIyWVd4cFpGeHlYRzRnSUNBZ2FXWWdLQ0ZQWW1wbFkzUXVkbUZzZFdWektFRnVhVzFoZEdsdmJsUjVjR1Z6S1M1cGJtTnNkV1JsY3loaGJtbHRZWFJwYjI1VWVYQmxLU2tnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEhKY2JpQWdJQ0FnSUNBZ1lFTmhibTV2ZENCaFpHUWdZVzVwYldGMGFXOXVJQ1I3WVc1cGJXRjBhVzl1VG1GdFpYMGdkRzhnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUc5dUlHaHZjM1FnSkh0MGFHbHpMbDlvYjNOMExtbGtmUzRnU1c1MllXeHBaQ0JoYm1sdFlYUnBiMjRnZEhsd1pTNWdYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnYkdGNVpYSWdQU0IwYUdsekxsOXNZWGxsY2sxaGNGdHNZWGxsY2s1aGJXVmRPMXh5WEc0Z0lDQWdiM0IwYVc5dWN5NWliR1Z1WkUxdlpHVWdQU0JzWVhsbGNpNWliR1Z1WkUxdlpHVTdYSEpjYmlBZ0lDQnZjSFJwYjI1ekxuUnlZVzV6YVhScGIyNVVhVzFsSUQwZ2JHRjVaWEl1ZEhKaGJuTnBkR2x2YmxScGJXVTdYSEpjYmlBZ0lDQmpiMjV6ZENCemRHRjBaU0E5SUhSb2FYTmJZRjlqY21WaGRHVWtlMkZ1YVcxaGRHbHZibFI1Y0dVdWJtRnRaWDFnWFNodmNIUnBiMjV6S1R0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZENCdVlXMWxJRDBnYkdGNVpYSXVZV1JrVTNSaGRHVW9jM1JoZEdVcE8xeHlYRzVjY2x4dUlDQWdJQzh2SUU1dmRHbG1lU0IwYUdGMElHRnVJR0Z1YVcxaGRHbHZiaUJvWVhNZ1ltVmxiaUJoWkdSbFpDQjBieUIwYUdVZ1ptVmhkSFZ5WlZ4eVhHNGdJQ0FnZEdocGN5NWxiV2wwS0hSb2FYTXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUlRMbUZrWkVGdWFXMWhkR2x2Yml3Z2UxeHlYRzRnSUNBZ0lDQnNZWGxsY2s1aGJXVXNYSEpjYmlBZ0lDQWdJR0Z1YVcxaGRHbHZiazVoYldVNklHNWhiV1VzWEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtRnRaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGJXOTJaU0JoYmlCaGJtbHRZWFJwYjI0Z1puSnZiU0JoYmlCaGJtbHRZWFJwYjI0Z2JHRjVaWEl1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0Y1WlhKT1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnZEc4Z2NtVnRiM1psSUhSb1pTQmhibWx0WVhScGIyNGdabkp2YlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUdGdWFXMWhkR2x2YmlCMGJ5QnlaVzF2ZG1VdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1ltOXZiR1ZoYm4xY2NseHVJQ0FnS2k5Y2NseHVJQ0J5WlcxdmRtVkJibWx0WVhScGIyNG9iR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbEtTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnZEdobElHNWhiV1VnYVhNZ2RtRnNhV1JjY2x4dUlDQWdJR052Ym5OMElHeGhlV1Z5SUQwZ2RHaHBjeTVmYkdGNVpYSk5ZWEJiYkdGNVpYSk9ZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvYkdGNVpYSWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hISmNiaUFnSUNBZ0lDQWdZRU5oYm01dmRDQnlaVzF2ZG1VZ1lXNXBiV0YwYVc5dUlHWnliMjBnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUdaeWIyMGdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTnZibk4wSUhKbGJXOTJaV1FnUFNCc1lYbGxjaTV5WlcxdmRtVlRkR0YwWlNoaGJtbHRZWFJwYjI1T1lXMWxLVHRjY2x4dVhISmNiaUFnSUNBdkx5Qk9iM1JwWm5rZ2RHaGhkQ0JoYmlCaGJtbHRZWFJwYjI0Z2FHRnpJR0psWlc0Z2NtVnRiM1psWkNCbWNtOXRJSFJvWlNCbVpXRjBkWEpsWEhKY2JpQWdJQ0JwWmlBb2NtVnRiM1psWkNBOVBUMGdkSEoxWlNrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG1WdGFYUW9kR2hwY3k1amIyNXpkSEoxWTNSdmNpNUZWa1ZPVkZNdWNtVnRiM1psUVc1cGJXRjBhVzl1TENCN1hISmNiaUFnSUNBZ0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUdGdWFXMWhkR2x2Yms1aGJXVXNYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCeVpXMXZkbVZrTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsSUhSb1pTQnVZVzFsSUc5bUlHRnVJR0Z1YVcxaGRHbHZiaTRnVG1GdFpYTWdiWFZ6ZENCaVpTQjFibWx4ZFdVZ2IyNGdaV0ZqYUNCc1lYbGxjaXdnYVdZZ2RHaGxJRzVsZDF4eVhHNGdJQ0FxSUc1aGJXVWdhWE1nYm05MElIVnVhWEYxWlNCcGRDQjNhV3hzSUdoaGRtVWdkSEpoYVd4cGJtY2diblZ0WW1WeWN5QmhjSEJsYm1SbFpDQjFiblJwYkNCcGRDQnBjeUIxYm1seGRXVXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdZVzVwYldGMGFXOXVJSFJvWVhSY2NseHVJQ0FnS2lCM2FXeHNJR0psSUhKbGJtRnRaV1FzWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR04xY25KbGJuUkJibWx0WVhScGIyNU9ZVzFsSUMwZ1EzVnljbVZ1ZENCdVlXMWxJRzltSUhSb1pTQmhibWx0WVhScGIyNHVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHNWxkMEZ1YVcxaGRHbHZiazVoYldVZ0xTQk9aWGNnYm1GdFpTQjBieUJ6WlhRZ2IyNGdkR2hsSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5SUMwZ1ZHaGxJRzVsZHlCdVlXMWxJRzltSUhSb1pTQmhibWx0WVhScGIyNWNjbHh1SUNBZ0tpOWNjbHh1SUNCeVpXNWhiV1ZCYm1sdFlYUnBiMjRvYkdGNVpYSk9ZVzFsTENCamRYSnlaVzUwUVc1cGJXRjBhVzl1VG1GdFpTd2dibVYzUVc1cGJXRjBhVzl1VG1GdFpTa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2JHRjVaWElnUFNCMGFHbHpMbDlzWVhsbGNrMWhjRnRzWVhsbGNrNWhiV1ZkTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hzWVhsbGNpQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2NseHVJQ0FnSUNBZ0lDQmdRMkZ1Ym05MElISmxibUZ0WlNCaGJtbHRZWFJwYjI0Z0pIdGpkWEp5Wlc1MFFXNXBiV0YwYVc5dVRtRnRaWDBnYjI0Z2JHRjVaWElnSkh0c1lYbGxjazVoYldWOUlHWnZjaUJvYjNOMElDUjdkR2hwY3k1ZmFHOXpkQzVwWkgwdUlFNXZJR3hoZVdWeUlHVjRhWE4wY3lCM2FYUm9JSFJvYVhNZ2JtRnRaUzVnWEhKY2JpQWdJQ0FnSUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2JtRnRaU0E5SUd4aGVXVnlMbkpsYm1GdFpWTjBZWFJsS0dOMWNuSmxiblJCYm1sdFlYUnBiMjVPWVcxbExDQnVaWGRCYm1sdFlYUnBiMjVPWVcxbEtUdGNjbHh1WEhKY2JpQWdJQ0F2THlCT2IzUnBabmtnZEdoaGRDQmhiaUJoYm1sdFlYUnBiMjRnYUdGeklHSmxaVzRnY21WdVlXMWxaQ0J2YmlCMGFHVWdabVZoZEhWeVpWeHlYRzRnSUNBZ2RHaHBjeTVsYldsMEtIUm9hWE11WTI5dWMzUnlkV04wYjNJdVJWWkZUbFJUTG5KbGJtRnRaVUZ1YVcxaGRHbHZiaXdnZTF4eVhHNGdJQ0FnSUNCc1lYbGxjazVoYldVc1hISmNiaUFnSUNBZ0lHOXNaRTVoYldVNklHTjFjbkpsYm5SQmJtbHRZWFJwYjI1T1lXMWxMRnh5WEc0Z0lDQWdJQ0J1WlhkT1lXMWxPaUJ1WVcxbExGeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVoYldVN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlFZWFZ6WlNCMGFHVWdZM1Z5Y21WdWRHeDVJSEJzWVhscGJtY2dZVzVwYldGMGFXOXVJR0Z1WkNCd2JHRjVJR0VnYm1WM0lHRnVhVzFoZEdsdmJpQm1jbTl0SUhSb1pTQmlaV2RwYm01cGJtY3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdZVzVwYldGMGFXOXVMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhibWx0WVhScGIyNU9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJSE4wWVhSbElIUnZJSEJzWVhrdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEk5ZlNCelpXTnZibVJ6SUMwZ1ZHaGxJRzUxYldKbGNpQnZaaUJ6WldOdmJtUnpJR2wwSUhOb2IzVnNaQ0IwWVd0bElIUnZJSFJ5WVc1emFYUnBiMjVjY2x4dUlDQWdLaUIwYnlCMGFHVWdibVYzSUdGdWFXMWhkR2x2Ymk0Z1JHVm1ZWFZzZENCcGN5QjZaWEp2SUdGdVpDQjNhV3hzSUhObGRDQnBiVzFsWkdsaGRHVnNlUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnWldGemFXNW5SbTRnTFNCVWFHVWdaV0Z6YVc1bklHWjFibU4wYVc5dUlIUnZJSFZ6WlNCM2FHbHNaU0IwY21GdWMybDBhVzl1YVc1blhISmNiaUFnSUNvZ1ltVjBkMlZsYmlCaGJtbHRZWFJwYjI1ekxpQkVaV1poZFd4MElHbHpJRVZoYzJsdVp5NU1hVzVsWVhJdVNXNVBkWFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UkdWbVpYSnlaV1I5SUMwZ1VtVnpiMngyWlhNZ2IyNWpaU0IwYUdVZ1lXNXBiV0YwYVc5dUlISmxZV05vWlhNZ2RHaGxJR1Z1WkNCdlppQnBkSE5jY2x4dUlDQWdLaUIwYVcxbGJHbHVaUzRnVEc5dmNHbHVaeUJoYm1sdFlYUnBiMjV6SUdOaGJpQnZibXg1SUhKbGMyOXNkbVVnYVdZZ2RHaGxlU0JoY21VZ2FXNTBaWEp5ZFhCMFpXUWdiM0pjY2x4dUlDQWdLaUJ0WVc1MVlXeHNlU0J6ZEc5d2NHVmtMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lIQnNZWGxCYm1sdFlYUnBiMjRvYkdGNVpYSk9ZVzFsTENCaGJtbHRZWFJwYjI1T1lXMWxMQ0J6WldOdmJtUnpMQ0JsWVhOcGJtZEdiaWtnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQjBhR2x6TGw5c1lYbGxjazFoY0Z0c1lYbGxjazVoYldWZE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoc1lYbGxjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJR052Ym5OMElHVWdQU0JnUTJGdWJtOTBJSEJzWVhrZ1lXNXBiV0YwYVc5dUlDUjdZVzVwYldGMGFXOXVUbUZ0WlgwZ2IyNGdiR0Y1WlhJZ0pIdHNZWGxsY2s1aGJXVjlJR1p2Y2lCb2IzTjBJQ1I3ZEdocGN5NWZhRzl6ZEM1cFpIMHVJRTV2SUd4aGVXVnlJR1Y0YVhOMGN5QjNhWFJvSUhSb2FYTWdibUZ0WlM1Z08xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdWNtVnFaV04wS0dVcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUU1dmRHbG1lU0IwYUdGMElHRWdibVYzSUdGdWFXMWhkR2x2YmlCb1lYTWdZbVZuZFc1Y2NseHVJQ0FnSUhSb2FYTXVaVzFwZENoMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWV1JVNVVVeTV3YkdGNVFXNXBiV0YwYVc5dUxDQjdYSEpjYmlBZ0lDQWdJR3hoZVdWeVRtRnRaU3hjY2x4dUlDQWdJQ0FnWVc1cGJXRjBhVzl1VG1GdFpTeGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJzWVhsbGNpNXdiR0Y1UVc1cGJXRjBhVzl1S0Z4eVhHNGdJQ0FnSUNCaGJtbHRZWFJwYjI1T1lXMWxMRnh5WEc0Z0lDQWdJQ0J6WldOdmJtUnpMRnh5WEc0Z0lDQWdJQ0JsWVhOcGJtZEdiaXhjY2x4dUlDQWdJQ0FnS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUM4dklFNXZkR2xtZVNCMGFHRjBJR0Z1SUdGdWFXMWhkR2x2YmlCb1lYTWdjM1J2Y0hCbFpGeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXMXBkQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1ZXUlU1VVV5NXpkRzl3UVc1cGJXRjBhVzl1TENCN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWVhsbGNrNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNU9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNCMWJtUmxabWx1WldRc1hISmNiaUFnSUNBZ0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJPYjNScFpua2dkR2hoZENCaGJpQmhibWx0WVhScGIyNGdhR0Z6SUdKbFpXNGdhVzUwWlhKeWRYQjBaV1JjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RlZrVk9WRk11YVc1MFpYSnlkWEIwUVc1cGJXRjBhVzl1TENCN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWVhsbGNrNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNU9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBb2UyNWhiV1VzSUdOaGJrRmtkbUZ1WTJVc0lHbHpVWFZsZFdWRmJtUjlLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0d4aGVXVnlMbU4xY25KbGJuUkJibWx0WVhScGIyNGdQVDA5SUdGdWFXMWhkR2x2Yms1aGJXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJRTV2ZEdsbWVTQjBhR0YwSUdFZ2JtVjNJR0Z1YVcxaGRHbHZiaUJvWVhNZ1ltVm5kVzVjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRDaDBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVldSVTVVVXk1d2JHRjVUbVY0ZEVGdWFXMWhkR2x2Yml3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjazVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGdWFXMWhkR2x2Yms1aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJSZFdWMVpXUkJibWx0WVhScGIyNDZJRzVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJrRmtkbUZ1WTJVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdselVYVmxkV1ZGYm1Rc1hISmNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCUWJHRjVJSFJvWlNCdVpYaDBJR0Z1YVcxaGRHbHZiaUJwYmlCMGFHVWdjWFZsZFdVZ2IyWWdZU0JSZFdWMVpWTjBZWFJsSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JzWVhsbGNrNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQnNZWGxsY2lCMGFHRjBJR052Ym5SaGFXNXpJSFJvWlNCeGRXVjFaU0JoYm1sdFlYUnBiMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtYzlmU0JoYm1sdFlYUnBiMjVPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnWVc1cGJXRjBhVzl1SUhGMVpYVmxJR0Z1YVcxaGRHbHZiaTRnUkdWbVlYVnNkSE5jY2x4dUlDQWdLaUIwYnlCMGFHVWdibUZ0WlNCdlppQjBhR1VnWTNWeWNtVnVkQ0JoYm1sdFlYUnBiMjRnWm05eUlIUm9aU0JzWVhsbGNpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY2oxOUlITmxZMjl1WkhNZ0xTQlVhR1VnYm5WdFltVnlJRzltSUhObFkyOXVaSE1nYVhRZ2MyaHZkV3hrSUhSaGEyVWdkRzhnZEhKaGJuTnBkR2x2Ymx4eVhHNGdJQ0FxSUhSdklIUm9aU0J4ZFdWMVpTQmhibWx0WVhScGIyNGdhV1lnYVhRbmN5QnViM1FnWVd4eVpXRmtlU0JqZFhKeVpXNTBiSGtnY0d4aGVXbHVaeTRnUkdWbVlYVnNkQ0JwY3lCNlpYSnZYSEpjYmlBZ0lDb2dZVzVrSUhkcGJHd2djMlYwSUdsdGJXVmthV0YwWld4NUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQmxZWE5wYm1kR2JpQXRJRlJvWlNCbFlYTnBibWNnWm5WdVkzUnBiMjRnZEc4Z2RYTmxJSGRvYVd4bElIUnlZVzV6YVhScGIyNXBibWRjY2x4dUlDQWdLaUIwYnlCMGFHVWdjWFZsZFdVZ1lXNXBiV0YwYVc5dUlHbG1JR2wwSUdsemJpZDBJR0ZzY21WaFpIa2djR3hoZVdsdVp5NGdSR1ZtWVhWc2RDQnBjeUJGWVhOcGJtY3VUR2x1WldGeUxrbHVUM1YwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBSbFptVnljbVZrZlNBdElGSmxjMjlzZG1WeklHOXVZMlVnZEdobElHeGhjM1FnWVc1cGJXRjBhVzl1SUdsdUlIUm9aU0J4ZFdWMVpTQm1hVzVwYzJobGMxeHlYRzRnSUNBcUlIQnNZWGxwYm1jdVhISmNiaUFnSUNvdlhISmNiaUFnY0d4aGVVNWxlSFJCYm1sdFlYUnBiMjRvYkdGNVpYSk9ZVzFsTENCaGJtbHRZWFJwYjI1T1lXMWxMQ0IwY21GdWMybDBhVzl1VkdsdFpTd2daV0Z6YVc1blJtNHBJSHRjY2x4dUlDQWdJR052Ym5OMElHeGhlV1Z5SUQwZ2RHaHBjeTVmYkdGNVpYSk5ZWEJiYkdGNVpYSk9ZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvYkdGNVpYSWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCbElEMGdZRU5oYm01dmRDQndiR0Y1SUc1bGVIUWdZVzVwYldGMGFXOXVJRzl1SUd4aGVXVnlJQ1I3YkdGNVpYSk9ZVzFsZlNCbWIzSWdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJsWm1WeWNtVmtMbkpsYW1WamRDaGxLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9ZVzVwYldGMGFXOXVUbUZ0WlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUdGdWFXMWhkR2x2Yms1aGJXVWdQU0JzWVhsbGNpNWpkWEp5Wlc1MFFXNXBiV0YwYVc5dU8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHRnVhVzFoZEdsdmJpQTlJR3hoZVdWeUxtZGxkRk4wWVhSbEtHeGhlV1Z5TG1OMWNuSmxiblJCYm1sdFlYUnBiMjRwTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hoYm1sdFlYUnBiMjRnUFQwOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnWlNBOUlHQkRZVzV1YjNRZ2NHeGhlU0J1WlhoMElHRnVhVzFoZEdsdmJpQnZiaUJzWVhsbGNpQWtlMnhoZVdWeVRtRnRaWDBnWm05eUlHaHZjM1FnSkh0MGFHbHpMbDlvYjNOMExtbGtmUzRnVG04Z1lXNXBiV0YwYVc5dUlHVjRhWE4wY3lCM2FYUm9JRzVoYldVZ0pIdGhibWx0WVhScGIyNU9ZVzFsZlM1Z08xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdWNtVnFaV04wS0dVcE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG1kbGRFRnVhVzFoZEdsdmJsUjVjR1VvYkdGNVpYSk9ZVzFsTENCaGJtbHRZWFJwYjI1T1lXMWxLU0FoUFQwZ0ozRjFaWFZsSnlrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCbElEMGdZRU5oYm01dmRDQndiR0Y1SUc1bGVIUWdZVzVwYldGMGFXOXVJRzl1SUd4aGVXVnlJQ1I3YkdGNVpYSk9ZVzFsZlNCbWIzSWdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlBa2UyRnVhVzFoZEdsdmJrNWhiV1Y5SUdseklHNXZkQ0JoSUhGMVpYVmxJSE4wWVhSbExtQTdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQkVaV1psY25KbFpDNXlaV3BsWTNRb1pTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdiMjVPWlhoMElEMGdLSHR1WVcxbExDQmpZVzVCWkhaaGJtTmxMQ0JwYzFGMVpYVmxSVzVrZlNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JwWmlBb2JHRjVaWEl1WTNWeWNtVnVkRUZ1YVcxaGRHbHZiaUE5UFQwZ1lXNXBiV0YwYVc5dVRtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRTV2ZEdsbWVTQjBhR0YwSUdFZ2JtVjNJR0Z1YVcxaGRHbHZiaUJvWVhNZ1ltVm5kVzVjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RlZrVk9WRk11Y0d4aGVVNWxlSFJCYm1sdFlYUnBiMjRzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR3hoZVdWeVRtRnRaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lHRnVhVzFoZEdsdmJrNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQnVaWGgwVVhWbGRXVmtRVzVwYldGMGFXOXVPaUJ1WVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnWTJGdVFXUjJZVzVqWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJR2x6VVhWbGRXVkZibVFzWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0x5OGdUV0ZyWlNCMGFHVWdjWFZsZFdVZ1lXNXBiV0YwYVc5dUlHTjFjbkpsYm5RZ2FXWWdhWFFnZDJGemJpZDBJR0ZzY21WaFpIbGNjbHh1SUNBZ0lHbG1JQ2hzWVhsbGNpNWpkWEp5Wlc1MFFXNXBiV0YwYVc5dUlEMDlQU0J1ZFd4c0tTQjdYSEpjYmlBZ0lDQWdJR3hoZVdWeUxuSmxjM1Z0WlVGdWFXMWhkR2x2YmloY2NseHVJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNHVibUZ0WlN4Y2NseHVJQ0FnSUNBZ0lDQjBjbUZ1YzJsMGFXOXVWR2x0WlN4Y2NseHVJQ0FnSUNBZ0lDQmxZWE5wYm1kR2JpeGNjbHh1SUNBZ0lDQWdJQ0IxYm1SbFptbHVaV1FzWEhKY2JpQWdJQ0FnSUNBZ2RXNWtaV1pwYm1Wa0xGeHlYRzRnSUNBZ0lDQWdJSFZ1WkdWbWFXNWxaQ3hjY2x4dUlDQWdJQ0FnSUNCdmJrNWxlSFJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z1lXNXBiV0YwYVc5dUxtNWxlSFFvYjI1T1pYaDBMQ0IwY25WbEtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkJoZFhObElIUm9aU0JqZFhKeVpXNTBJR0Z1YVcxaGRHbHZiaUJ2YmlCaElHeGhlV1Z5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzVoYldVZ0xTQk9ZVzFsSUc5bUlIUm9aU0JzWVhsbGNpQjBieUJ3WVhWelpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQlhhR1YwYUdWeUlHOXlJRzV2ZENCaGJpQmhibWx0WVhScGIyNGdkMkZ6SUhOMVkyTmxjM05tZFd4c2VTQndZWFZ6WldRdVhISmNiaUFnSUNvdlhISmNiaUFnY0dGMWMyVkJibWx0WVhScGIyNG9ibUZ0WlNrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnYkdGNVpYSWdQU0IwYUdsekxsOXNZWGxsY2sxaGNGdHVZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvYkdGNVpYSWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEhKY2JpQWdJQ0FnSUNBZ1lFUnBaQ0J1YjNRZ2NHRjFjMlVnWVc1cGJXRjBhVzl1SUc5dUlHeGhlV1Z5SUNSN2JtRnRaWDBnWm05eUlHaHZjM1FnSkh0MGFHbHpMbDlvYjNOMExtbGtmUzRnVG04Z2JHRjVaWElnWlhocGMzUnpJSGRwZEdnZ2RHaHBjeUJ1WVcxbExtQmNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR052Ym5OMElIQmhkWE5sWkNBOUlHeGhlV1Z5TG5CaGRYTmxRVzVwYldGMGFXOXVLQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdUbTkwYVdaNUlIUm9ZWFFnWVc0Z1lXNXBiV0YwYVc5dUlIZGhjeUJ3WVhWelpXUmNjbHh1SUNBZ0lHbG1JQ2h3WVhWelpXUXBJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdZVzVwYldGMGFXOXVUbUZ0WlNBOUlHeGhlV1Z5TG1OMWNuSmxiblJCYm1sdFlYUnBiMjQ3WEhKY2JpQWdJQ0FnSUhSb2FYTXVaVzFwZENoMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWV1JVNVVVeTV3WVhWelpVRnVhVzFoZEdsdmJpd2dlMXh5WEc0Z0lDQWdJQ0FnSUd4aGVXVnlUbUZ0WlRvZ2JtRnRaU3hjY2x4dUlDQWdJQ0FnSUNCaGJtbHRZWFJwYjI1T1lXMWxMRnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2NHRjFjMlZrTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VHRjFjMlVnZEdobElHTjFjbkpsYm5Sc2VTQndiR0Y1YVc1bklHRnVhVzFoZEdsdmJpQmhibVFnY0d4aGVTQmhJRzVsZHlCaGJtbHRZWFJwYjI0Z1puSnZiU0IzYUdWeVpTQnBkRnh5WEc0Z0lDQXFJR3hoYzNRZ2JHVm1kQ0J2Wm1ZdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYkdGNVpYSk9ZVzFsSUMwZ1RtRnRaU0J2WmlCMGFHVWdiR0Y1WlhJZ2RHaGhkQ0JqYjI1MFlXbHVjeUIwYUdVZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuUFgwZ1lXNXBiV0YwYVc5dVRtRnRaU0F0SUU1aGJXVWdiMllnZEdobElHRnVhVzFoZEdsdmJpQnpkR0YwWlNCMGJ5QnlaWE4xYldVdUlFUmxabUYxYkhSelhISmNiaUFnSUNvZ2RHOGdkR2hsSUc1aGJXVWdiMllnZEdobElHTjFjbkpsYm5RZ1lXNXBiV0YwYVc5dUlHWnZjaUIwYUdVZ2JHRjVaWEl1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSTlmU0J6WldOdmJtUnpJQzBnVkdobElHNTFiV0psY2lCdlppQnpaV052Ym1SeklHbDBJSE5vYjNWc1pDQjBZV3RsSUhSdklIUnlZVzV6YVhScGIyNWNjbHh1SUNBZ0tpQjBieUIwYUdVZ2JtVjNJR0Z1YVcxaGRHbHZiaTRnUkdWbVlYVnNkQ0JwY3lCNlpYSnZJR0Z1WkNCM2FXeHNJSE5sZENCcGJXMWxaR2xoZEdWc2VTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdaV0Z6YVc1blJtNGdMU0JVYUdVZ1pXRnphVzVuSUdaMWJtTjBhVzl1SUhSdklIVnpaU0IzYUdsc1pTQjBjbUZ1YzJsMGFXOXVhVzVuWEhKY2JpQWdJQ29nWW1WMGQyVmxiaUJoYm1sdFlYUnBiMjV6TGlCRVpXWmhkV3gwSUdseklFVmhjMmx1Wnk1TWFXNWxZWEl1U1c1UGRYUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSR1ZtWlhKeVpXUjlJQzBnVW1WemIyeDJaWE1nYjI1alpTQjBhR1VnWVc1cGJXRjBhVzl1SUhKbFlXTm9aWE1nZEdobElHVnVaQ0J2WmlCcGRITmNjbHh1SUNBZ0tpQjBhVzFsYkdsdVpTNGdURzl2Y0dsdVp5QmhibWx0WVhScGIyNXpJR05oYmlCdmJteDVJSEpsYzI5c2RtVWdhV1lnZEdobGVTQmhjbVVnYVc1MFpYSnlkWEIwWldRZ2IzSmNjbHh1SUNBZ0tpQnRZVzUxWVd4c2VTQnpkRzl3Y0dWa0xseHlYRzRnSUNBcUwxeHlYRzRnSUhKbGMzVnRaVUZ1YVcxaGRHbHZiaWhzWVhsbGNrNWhiV1VzSUdGdWFXMWhkR2x2Yms1aGJXVXNJSE5sWTI5dVpITXNJR1ZoYzJsdVowWnVLU0I3WEhKY2JpQWdJQ0JqYjI1emRDQnNZWGxsY2lBOUlIUm9hWE11WDJ4aGVXVnlUV0Z3VzJ4aGVXVnlUbUZ0WlYwN1hISmNibHh5WEc0Z0lDQWdhV1lnS0d4aGVXVnlJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ1pTQTlJR0JEWVc1dWIzUWdjbVZ6ZFcxbElHRnVhVzFoZEdsdmJpQWtlMkZ1YVcxaGRHbHZiazVoYldWOUlHOXVJR3hoZVdWeUlDUjdiR0Y1WlhKT1lXMWxmU0JtYjNJZ2FHOXpkQ0FrZTNSb2FYTXVYMmh2YzNRdWFXUjlMaUJPYnlCc1lYbGxjaUJsZUdsemRITWdkMmwwYUNCMGFHbHpJRzVoYldVdVlEdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmxabVZ5Y21Wa0xuSmxhbVZqZENobEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCT2IzUnBabmtnZEdoaGRDQmhiaUJoYm1sdFlYUnBiMjRnZDJGeklISmxjM1Z0WldSY2NseHVJQ0FnSUhSb2FYTXVaVzFwZENoMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWV1JVNVVVeTV5WlhOMWJXVkJibWx0WVhScGIyNHNJSHRjY2x4dUlDQWdJQ0FnYkdGNVpYSk9ZVzFsTEZ4eVhHNGdJQ0FnSUNCaGJtbHRZWFJwYjI1T1lXMWxMRnh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUd4aGVXVnlMbkpsYzNWdFpVRnVhVzFoZEdsdmJpaGNjbHh1SUNBZ0lDQWdZVzVwYldGMGFXOXVUbUZ0WlN4Y2NseHVJQ0FnSUNBZ2MyVmpiMjVrY3l4Y2NseHVJQ0FnSUNBZ1pXRnphVzVuUm00c1hISmNiaUFnSUNBZ0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJPYjNScFpua2dkR2hoZENCaGJpQmhibWx0WVhScGIyNGdhR0Z6SUhOMGIzQndaV1JjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ0YVhRb2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RlZrVk9WRk11YzNSdmNFRnVhVzFoZEdsdmJpd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JHRjVaWEpPWVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1VG1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0FvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1RtOTBhV1o1SUhSb1lYUWdZVzRnWVc1cGJXRjBhVzl1SUdoaGN5QmlaV1Z1SUdsdWRHVnljblZ3ZEdWa1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJXbDBLSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVSVlpGVGxSVExtbHVkR1Z5Y25Wd2RFRnVhVzFoZEdsdmJpd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JHRjVaWEpPWVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1VG1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdLSHR1WVcxbExDQmpZVzVCWkhaaGJtTmxMQ0JwYzFGMVpYVmxSVzVrZlNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHNZWGxsY2k1amRYSnlaVzUwUVc1cGJXRjBhVzl1SUQwOVBTQmhibWx0WVhScGIyNU9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCT2IzUnBabmtnZEdoaGRDQmhJRzVsZHlCaGJtbHRZWFJwYjI0Z2FHRnpJR0psWjNWdVhISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWFFvZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVGVmtWT1ZGTXVjR3hoZVU1bGVIUkJibWx0WVhScGIyNHNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhibWx0WVhScGIyNU9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFVYVmxkV1ZrUVc1cGJXRjBhVzl1T2lCdVlXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZVzVCWkhaaGJtTmxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMUYxWlhWbFJXNWtMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNBcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVM1J2Y0NCMGFHVWdZM1Z5Y21WdWRDQmhibWx0WVhScGIyNGdiMjRnWVNCc1lYbGxjaTRnVTNSdmNDQnlaWGRwYm1SeklIUm9aU0JoYm1sdFlYUnBiMjRnZEc4Z2RHaGxYSEpjYmlBZ0lDb2dZbVZuYVc1dWFXNW5JR0Z1WkNCd2NtVjJaVzUwY3lCcGRDQm1jbTl0SUhCeWIyZHlaWE56YVc1bklHWnZjbmRoY21RdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUd4aGVXVnlJSFJvWVhRZ1kyOXVkR0ZwYm5NZ2RHaGxJR0Z1YVcxaGRHbHZiaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmU0JYYUdWMGFHVnlJRzl5SUc1dmRDQmhiaUJoYm1sdFlYUnBiMjRnZDJGeklITjFZMk5sYzNObWRXeHNlU0J6ZEc5d2NHVmtMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBiM0JCYm1sdFlYUnBiMjRvYm1GdFpTa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2JHRjVaWElnUFNCMGFHbHpMbDlzWVhsbGNrMWhjRnR1WVcxbFhUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JHRjVaWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hISmNiaUFnSUNBZ0lDQWdZRVJwWkNCdWIzUWdjM1J2Y0NCaGJtbHRZWFJwYjI0Z2IyNGdiR0Y1WlhJZ0pIdHVZVzFsZlNCbWIzSWdhRzl6ZENBa2UzUm9hWE11WDJodmMzUXVhV1I5TGlCT2J5QnNZWGxsY2lCbGVHbHpkSE1nZDJsMGFDQjBhR2x6SUc1aGJXVXVZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR3hoZVdWeUxuTjBiM0JCYm1sdFlYUnBiMjRvS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGQmhkWE5sSUdOMWNuSmxiblFnWVc1cGJXRjBhVzl1SUdGdVpDQjNaV2xuYUhRZ2FXNTBaWEp3YjJ4aGRHbHZiaUJoYm1sdFlYUnBiMjRnYjI0Z1lXeHNJR3hoZVdWeWN5NWNjbHh1WEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTJKdmIyeGxZVzU5SUMwZ1YyaGxkR2hsY2lCdmNpQnViM1FnZEdobGNtVWdkMkZ6SUdGdUlHVjRhWE4wYVc1bklHbHVkR1Z5Y0c5c1lYUnBiMjRnYjNKY2NseHVJQ0FnS2lCamRYSnlaVzUwSUdGdWFXMWhkR2x2Ym5NZ2RHOGdjR0YxYzJVdVhISmNiaUFnSUNvdlhISmNiaUFnY0dGMWMyVW9LU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXdZWFZ6WldRZ1BTQjBjblZsTzF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0J3WVhWelpXUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lIUm9hWE11WDJ4aGVXVnljeTVtYjNKRllXTm9LR3dnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnBaaUFvYkM1d1lYVnpaU2dwS1NCN1hISmNiaUFnSUNBZ0lDQWdjR0YxYzJWa0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSEJoZFhObFpEdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsYzNWdFpTQmpkWEp5Wlc1MElHRnVhVzFoZEdsdmJpQmhibVFnZDJWcFoyaDBJR2x1ZEdWeWNHOXNZWFJwYjI0Z1lXNXBiV0YwYVc5dUlHOXVJR0ZzYkNCc1lYbGxjbk11WEhKY2JseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZTQXRJRmRvWlhSb1pYSWdiM0lnYm05MElIUm9aWEpsSUhkaGN5QmhiaUJsZUdsemRHbHVaeUJwYm5SbGNuQnZiR0YwYVc5dUlHOXlYSEpjYmlBZ0lDb2dZM1Z5Y21WdWRDQmhibWx0WVhScGIyNXpJSFJ2SUhKbGMzVnRaUzVjY2x4dUlDQWdLaTljY2x4dUlDQnlaWE4xYldVb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5d1lYVnpaV1FnUFNCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNCc1pYUWdjbVZ6ZFcxbFpDQTlJR1poYkhObE8xeHlYRzRnSUNBZ2RHaHBjeTVmYkdGNVpYSnpMbVp2Y2tWaFkyZ29iQ0E5UGlCN1hISmNiaUFnSUNBZ0lHbG1JQ2hzTG5KbGMzVnRaU2dwS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVZ6ZFcxbFpDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJXVmtPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUVdSa2N5QmhJRzVoYldWemNHRmpaU0IwYnlCMGFHVWdhRzl6ZENCM2FYUm9JSFJvWlNCdVlXMWxJRzltSUhSb1pTQm1aV0YwZFhKbElIUnZJR052Ym5SaGFXNGdjSEp2Y0dWeWRHbGxjMXh5WEc0Z0lDQXFJR0Z1WkNCdFpYUm9iMlJ6SUdaeWIyMGdkR2hsSUdabFlYUjFjbVVnZEdoaGRDQjFjMlZ5Y3lCdlppQjBhR1VnYUc5emRDQnVaV1ZrSUdGalkyVnpjeUIwYnk1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCelpXVWdRVzVwYldGMGFXOXVSbVZoZEhWeVpWeHlYRzRnSUNBcUwxeHlYRzRnSUdsdWMzUmhiR3hCY0drb0tTQjdYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVCcGJtNWxjbHh5WEc0Z0lDQWdJQ29nUUc1aGJXVnpjR0ZqWlNCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdOdmJuTjBJR0Z3YVNBOUlITjFjR1Z5TG1sdWMzUmhiR3hCY0drb0tUdGNjbHh1WEhKY2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aGhjR2tzSUh0Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYzJWbElHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU053WVhWelpXUmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUhCaGRYTmxaRG9nZTF4eVhHNGdJQ0FnSUNBZ0lHZGxkRG9nS0NrZ1BUNGdkR2hwY3k1d1lYVnpaV1FzWEhKY2JpQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUhObFpTQmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqYkdGNVpYSnpYSEpjYmlBZ0lDQWdJQ0FxTDF4eVhHNGdJQ0FnSUNCc1lYbGxjbk02SUh0Y2NseHVJQ0FnSUNBZ0lDQm5aWFE2SUNncElEMCtJSFJvYVhNdWJHRjVaWEp6TEZ4eVhHNGdJQ0FnSUNCOUxGeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaGhjR2tzSUh0Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTJGa1pFeGhlV1Z5WEhKY2JpQWdJQ0FnSUNBcUwxeHlYRzRnSUNBZ0lDQmhaR1JNWVhsbGNqb2dkR2hwY3k1aFpHUk1ZWGxsY2k1aWFXNWtLSFJvYVhNcExGeHlYRzRnSUNBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxiV0psY205bUlFRnVhVzFoZEdsdmJrWmxZWFIxY21WY2NseHVJQ0FnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpYUm9iMlJjY2x4dUlDQWdJQ0FnSUNvZ1FITmxaU0JqYjNKbEwwRnVhVzFoZEdsdmJrWmxZWFIxY21VamNtVnRiM1psVEdGNVpYSmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUhKbGJXOTJaVXhoZVdWeU9pQjBhR2x6TG5KbGJXOTJaVXhoZVdWeUxtSnBibVFvZEdocGN5a3NYSEpjYmlBZ0lDQWdJQzhxS2x4eVhHNGdJQ0FnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdRVzVwYldGMGFXOXVSbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUdOdmNtVXZRVzVwYldGMGFXOXVSbVZoZEhWeVpTTnRiM1psVEdGNVpYSmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUcxdmRtVk1ZWGxsY2pvZ2RHaHBjeTV0YjNabFRHRjVaWEl1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTNKbGJtRnRaVXhoZVdWeVhISmNiaUFnSUNBZ0lDQXFMMXh5WEc0Z0lDQWdJQ0J5Wlc1aGJXVk1ZWGxsY2pvZ2RHaHBjeTV5Wlc1aGJXVk1ZWGxsY2k1aWFXNWtLSFJvYVhNcExGeHlYRzVjY2x4dUlDQWdJQ0FnTHlvcVhISmNiaUFnSUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJCYm1sdFlYUnBiMjVHWldGMGRYSmxYSEpjYmlBZ0lDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1kyOXlaUzlCYm1sdFlYUnBiMjVHWldGMGRYSmxJMmRsZEV4aGVXVnlWMlZwWjJoMFhISmNiaUFnSUNBZ0lDQXFMMXh5WEc0Z0lDQWdJQ0JuWlhSTVlYbGxjbGRsYVdkb2REb2dkR2hwY3k1blpYUk1ZWGxsY2xkbGFXZG9kQzVpYVc1a0tIUm9hWE1wTEZ4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUVGdWFXMWhkR2x2YmtabFlYUjFjbVZjY2x4dUlDQWdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0lDQXFJRUJ0WlhSb2IyUmNjbHh1SUNBZ0lDQWdJQ29nUUhObFpTQmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqYzJWMFRHRjVaWEpYWldsbmFIUmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUhObGRFeGhlV1Z5VjJWcFoyaDBPaUIwYUdsekxuTmxkRXhoZVdWeVYyVnBaMmgwTG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJR052Y21VdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNOd1lYVnpaVXhoZVdWeVYyVnBaMmgwWEhKY2JpQWdJQ0FnSUNBcUwxeHlYRzRnSUNBZ0lDQndZWFZ6WlV4aGVXVnlWMlZwWjJoME9pQjBhR2x6TG5CaGRYTmxUR0Y1WlhKWFpXbG5hSFF1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTNKbGMzVnRaVXhoZVdWeVYyVnBaMmgwWEhKY2JpQWdJQ0FnSUNBcUwxeHlYRzRnSUNBZ0lDQnlaWE4xYldWTVlYbGxjbGRsYVdkb2REb2dkR2hwY3k1eVpYTjFiV1ZNWVhsbGNsZGxhV2RvZEM1aWFXNWtLSFJvYVhNcExGeHlYRzRnSUNBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxiV0psY205bUlFRnVhVzFoZEdsdmJrWmxZWFIxY21WY2NseHVJQ0FnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpYUm9iMlJjY2x4dUlDQWdJQ0FnSUNvZ1FITmxaU0JqYjNKbEwwRnVhVzFoZEdsdmJrWmxZWFIxY21VamNHRjFjMlZNWVhsbGNseHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnY0dGMWMyVk1ZWGxsY2pvZ2RHaHBjeTV3WVhWelpVeGhlV1Z5TG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJR052Y21VdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNOeVpYTjFiV1ZNWVhsbGNseHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnY21WemRXMWxUR0Y1WlhJNklIUm9hWE11Y21WemRXMWxUR0Y1WlhJdVltbHVaQ2gwYUdsektTeGNjbHh1WEhKY2JpQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdLaUJBYldWdFltVnliMllnUVc1cGJXRjBhVzl1Um1WaGRIVnlaVnh5WEc0Z0lDQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2NseHVJQ0FnSUNBZ0lDb2dRRzFsZEdodlpGeHlYRzRnSUNBZ0lDQWdLaUJBYzJWbElHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU05uWlhSVWNtRnVjMmwwYVc5dWFXNW5YSEpjYmlBZ0lDQWdJQ0FxTDF4eVhHNGdJQ0FnSUNCblpYUlVjbUZ1YzJsMGFXOXVhVzVuT2lCMGFHbHpMbWRsZEZSeVlXNXphWFJwYjI1cGJtY3VZbWx1WkNoMGFHbHpLU3hjY2x4dUlDQWdJQ0FnTHlvcVhISmNiaUFnSUNBZ0lDQXFJRUJ0WlcxaVpYSnZaaUJCYm1sdFlYUnBiMjVHWldGMGRYSmxYSEpjYmlBZ0lDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1kyOXlaUzlCYm1sdFlYUnBiMjVHWldGMGRYSmxJMmRsZEVGdWFXMWhkR2x2Ym5OY2NseHVJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJR2RsZEVGdWFXMWhkR2x2Ym5NNklIUm9hWE11WjJWMFFXNXBiV0YwYVc5dWN5NWlhVzVrS0hSb2FYTXBMRnh5WEc0Z0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRUZ1YVcxaGRHbHZia1psWVhSMWNtVmNjbHh1SUNBZ0lDQWdJQ29nUUdsdWMzUmhibU5sWEhKY2JpQWdJQ0FnSUNBcUlFQnRaWFJvYjJSY2NseHVJQ0FnSUNBZ0lDb2dRSE5sWlNCamIzSmxMMEZ1YVcxaGRHbHZia1psWVhSMWNtVWpaMlYwUTNWeWNtVnVkRUZ1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0FnS2k5Y2NseHVJQ0FnSUNBZ1oyVjBRM1Z5Y21WdWRFRnVhVzFoZEdsdmJqb2dkR2hwY3k1blpYUkRkWEp5Wlc1MFFXNXBiV0YwYVc5dUxtSnBibVFvZEdocGN5a3NYSEpjYmlBZ0lDQWdJQzhxS2x4eVhHNGdJQ0FnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdRVzVwYldGMGFXOXVSbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUdOdmNtVXZRVzVwYldGMGFXOXVSbVZoZEhWeVpTTm5aWFJRWVhWelpXUmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUdkbGRGQmhkWE5sWkRvZ2RHaHBjeTVuWlhSUVlYVnpaV1F1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTJkbGRFRnVhVzFoZEdsdmJsUjVjR1ZjY2x4dUlDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lHZGxkRUZ1YVcxaGRHbHZibFI1Y0dVNklIUm9hWE11WjJWMFFXNXBiV0YwYVc5dVZIbHdaUzVpYVc1a0tIUm9hWE1wTEZ4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUVGdWFXMWhkR2x2YmtabFlYUjFjbVZjY2x4dUlDQWdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0lDQXFJRUJ0WlhSb2IyUmNjbHh1SUNBZ0lDQWdJQ29nUUhObFpTQmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqWVdSa1FXNXBiV0YwYVc5dVhISmNiaUFnSUNBZ0lDQXFMMXh5WEc0Z0lDQWdJQ0JoWkdSQmJtbHRZWFJwYjI0NklIUm9hWE11WVdSa1FXNXBiV0YwYVc5dUxtSnBibVFvZEdocGN5a3NYSEpjYmlBZ0lDQWdJQzhxS2x4eVhHNGdJQ0FnSUNBZ0tpQkFiV1Z0WW1WeWIyWWdRVzVwYldGMGFXOXVSbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUdOdmNtVXZRVzVwYldGMGFXOXVSbVZoZEhWeVpTTnlaVzF2ZG1WQmJtbHRZWFJwYjI1Y2NseHVJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJSEpsYlc5MlpVRnVhVzFoZEdsdmJqb2dkR2hwY3k1eVpXMXZkbVZCYm1sdFlYUnBiMjR1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTNKbGJtRnRaVUZ1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0FnS2k5Y2NseHVJQ0FnSUNBZ2NtVnVZVzFsUVc1cGJXRjBhVzl1T2lCMGFHbHpMbkpsYm1GdFpVRnVhVzFoZEdsdmJpNWlhVzVrS0hSb2FYTXBMRnh5WEc1Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTJkbGRFRnVhVzFoZEdsdmJrSnNaVzVrVG1GdFpYTmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUdkbGRFRnVhVzFoZEdsdmJrSnNaVzVrVG1GdFpYTTZJSFJvYVhNdVoyVjBRVzVwYldGMGFXOXVRbXhsYm1ST1lXMWxjeTVpYVc1a0tIUm9hWE1wTEZ4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUVGdWFXMWhkR2x2YmtabFlYUjFjbVZjY2x4dUlDQWdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0lDQXFJRUJ0WlhSb2IyUmNjbHh1SUNBZ0lDQWdJQ29nUUhObFpTQmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqWjJWMFFXNXBiV0YwYVc5dVFteGxibVJYWldsbmFIUmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUdkbGRFRnVhVzFoZEdsdmJrSnNaVzVrVjJWcFoyaDBPaUIwYUdsekxtZGxkRUZ1YVcxaGRHbHZia0pzWlc1a1YyVnBaMmgwTG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJR052Y21VdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNOelpYUkJibWx0WVhScGIyNUNiR1Z1WkZkbGFXZG9kRnh5WEc0Z0lDQWdJQ0FnS2k5Y2NseHVJQ0FnSUNBZ2MyVjBRVzVwYldGMGFXOXVRbXhsYm1SWFpXbG5hSFE2SUhSb2FYTXVjMlYwUVc1cGJXRjBhVzl1UW14bGJtUlhaV2xuYUhRdVltbHVaQ2gwYUdsektTeGNjbHh1WEhKY2JpQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdLaUJBYldWdFltVnliMllnUVc1cGJXRjBhVzl1Um1WaGRIVnlaVnh5WEc0Z0lDQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2NseHVJQ0FnSUNBZ0lDb2dRRzFsZEdodlpGeHlYRzRnSUNBZ0lDQWdLaUJBYzJWbElHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU053YkdGNVFXNXBiV0YwYVc5dVhISmNiaUFnSUNBZ0lDQXFMMXh5WEc0Z0lDQWdJQ0J3YkdGNVFXNXBiV0YwYVc5dU9pQjBhR2x6TG5Cc1lYbEJibWx0WVhScGIyNHVZbWx1WkNoMGFHbHpLU3hjY2x4dVhISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJR052Y21VdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNOd2JHRjVUbVY0ZEVGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnSUNBZ0tpOWNjbHh1SUNBZ0lDQWdjR3hoZVU1bGVIUkJibWx0WVhScGIyNDZJSFJvYVhNdWNHeGhlVTVsZUhSQmJtbHRZWFJwYjI0dVltbHVaQ2gwYUdsektTeGNjbHh1WEhKY2JpQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdLaUJBYldWdFltVnliMllnUVc1cGJXRjBhVzl1Um1WaGRIVnlaVnh5WEc0Z0lDQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2NseHVJQ0FnSUNBZ0lDb2dRRzFsZEdodlpGeHlYRzRnSUNBZ0lDQWdLaUJBYzJWbElHTnZjbVV2UVc1cGJXRjBhVzl1Um1WaGRIVnlaU053WVhWelpVRnVhVzFoZEdsdmJseHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnY0dGMWMyVkJibWx0WVhScGIyNDZJSFJvYVhNdWNHRjFjMlZCYm1sdFlYUnBiMjR1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCQmJtbHRZWFJwYjI1R1pXRjBkWEpsWEhKY2JpQWdJQ0FnSUNBcUlFQnBibk4wWVc1alpWeHlYRzRnSUNBZ0lDQWdLaUJBYldWMGFHOWtYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSTNKbGMzVnRaVUZ1YVcxaGRHbHZibHh5WEc0Z0lDQWdJQ0FnS2k5Y2NseHVJQ0FnSUNBZ2NtVnpkVzFsUVc1cGJXRjBhVzl1T2lCMGFHbHpMbkpsYzNWdFpVRnVhVzFoZEdsdmJpNWlhVzVrS0hSb2FYTXBMRnh5WEc0Z0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRUZ1YVcxaGRHbHZia1psWVhSMWNtVmNjbHh1SUNBZ0lDQWdJQ29nUUdsdWMzUmhibU5sWEhKY2JpQWdJQ0FnSUNBcUlFQnRaWFJvYjJSY2NseHVJQ0FnSUNBZ0lDb2dRSE5sWlNCamIzSmxMMEZ1YVcxaGRHbHZia1psWVhSMWNtVWpjM1J2Y0VGdWFXMWhkR2x2Ymx4eVhHNGdJQ0FnSUNBZ0tpOWNjbHh1SUNBZ0lDQWdjM1J2Y0VGdWFXMWhkR2x2YmpvZ2RHaHBjeTV6ZEc5d1FXNXBiV0YwYVc5dUxtSnBibVFvZEdocGN5a3NYSEpjYmx4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUVGdWFXMWhkR2x2YmtabFlYUjFjbVZjY2x4dUlDQWdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0lDQXFJRUJ0WlhSb2IyUmNjbHh1SUNBZ0lDQWdJQ29nUUhObFpTQmpiM0psTDBGdWFXMWhkR2x2YmtabFlYUjFjbVVqY0dGMWMyVmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUhCaGRYTmxPaUIwYUdsekxuQmhkWE5sTG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJR052Y21VdlFXNXBiV0YwYVc5dVJtVmhkSFZ5WlNOeVpYTjFiV1ZjY2x4dUlDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lISmxjM1Z0WlRvZ2RHaHBjeTV5WlhOMWJXVXVZbWx1WkNoMGFHbHpLU3hjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsSUdWaFkyZ2dZVzVwYldGMGFXOXVJR3hoZVdWeUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUdSbGJIUmhWR2x0WlNBdElGUnBiV1VnYzJsdVkyVWdkR2hsSUd4aGMzUWdkWEJrWVhSbExseHlYRzRnSUNBcUwxeHlYRzRnSUhWd1pHRjBaU2hrWld4MFlWUnBiV1VwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmJHRjVaWEp6TG14bGJtZDBhQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzQmhkWE5sWkNrZ2UxeHlYRzRnSUNBZ0lDQmtaV3gwWVZScGJXVWdQU0F3TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRkpsTFdWMllXeDFZWFJsSUdsdWRHVnlibUZzSUhkbGFXZG9kSE1nWm05eUlHeGhlV1Z5YzF4eVhHNGdJQ0FnZEdocGN5NWZkWEJrWVhSbFNXNTBaWEp1WVd4WFpXbG5hSFJ6S0NrN1hISmNibHh5WEc0Z0lDQWdMeThnVlhCa1lYUmxJR3hoZVdWeWMxeHlYRzRnSUNBZ2RHaHBjeTVmYkdGNVpYSnpMbVp2Y2tWaFkyZ29iR0Y1WlhJZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JzWVhsbGNpNTFjR1JoZEdVb1pHVnNkR0ZVYVcxbEtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUhOMWNHVnlMblZ3WkdGMFpTaGtaV3gwWVZScGJXVXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaR2x6WTJGeVpDZ3BJSHRjY2x4dUlDQWdJSFJvYVhNdVgyeGhlV1Z5Y3k1bWIzSkZZV05vS0d4aGVXVnlJRDArSUh0Y2NseHVJQ0FnSUNBZ2JHRjVaWEl1WkdselkyRnlaQ2dwTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11WDJ4aGVXVnljenRjY2x4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TGw5c1lYbGxjazFoY0R0Y2NseHVYSEpjYmlBZ0lDQnpkWEJsY2k1a2FYTmpZWEprS0NrN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvUVc1cGJXRjBhVzl1Um1WaGRIVnlaU3dnSjBWV1JVNVVVeWNzSUh0Y2NseHVJQ0IyWVd4MVpUb2dlMXh5WEc0Z0lDQWdMaTR1VDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtFRmljM1J5WVdOMFNHOXpkRVpsWVhSMWNtVXBMa1ZXUlU1VVV5eGNjbHh1SUNBZ0lHRmtaRXhoZVdWeU9pQW5iMjVCWkdSTVlYbGxja1YyWlc1MEp5eGNjbHh1SUNBZ0lISmxiVzkyWlV4aGVXVnlPaUFuYjI1U1pXMXZkbVZNWVhsbGNrVjJaVzUwSnl4Y2NseHVJQ0FnSUhKbGJtRnRaVXhoZVdWeU9pQW5iMjVTWlc1aGJXVk1ZWGxsY2tWMlpXNTBKeXhjY2x4dUlDQWdJR0ZrWkVGdWFXMWhkR2x2YmpvZ0oyOXVRV1JrUVc1cGJXRjBhVzl1UlhabGJuUW5MRnh5WEc0Z0lDQWdjbVZ0YjNabFFXNXBiV0YwYVc5dU9pQW5iMjVTWlcxdmRtVmtRVzVwYldGMGFXOXVSWFpsYm5RbkxGeHlYRzRnSUNBZ2NtVnVZVzFsUVc1cGJXRjBhVzl1T2lBbmIyNVNaVzVoYldWQmJtbHRZWFJwYjI1RmRtVnVkQ2NzWEhKY2JpQWdJQ0J3YkdGNVFXNXBiV0YwYVc5dU9pQW5iMjVRYkdGNVJYWmxiblFuTEZ4eVhHNGdJQ0FnY0d4aGVVNWxlSFJCYm1sdFlYUnBiMjQ2SUNkdmJrNWxlSFJGZG1WdWRDY3NYSEpjYmlBZ0lDQndZWFZ6WlVGdWFXMWhkR2x2YmpvZ0oyOXVVR0YxYzJWRmRtVnVkQ2NzWEhKY2JpQWdJQ0J5WlhOMWJXVkJibWx0WVhScGIyNDZJQ2R2YmxKbGMzVnRaVVYyWlc1MEp5eGNjbHh1SUNBZ0lHbHVkR1Z5Y25Wd2RFRnVhVzFoZEdsdmJqb2dKMjl1U1c1MFpYSnlkWEIwUlhabGJuUW5MRnh5WEc0Z0lDQWdjM1J2Y0VGdWFXMWhkR2x2YmpvZ0oyOXVVM1J2Y0VWMlpXNTBKeXhjY2x4dUlDQjlMRnh5WEc1OUtUdGNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGdWFXMWhkR2x2YmtabFlYUjFjbVU3WEhKY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCQmJXRjZiMjR1WTI5dExDQkpibU11SUc5eUlHbDBjeUJoWm1acGJHbGhkR1Z6TGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHlYRzR2THlCVFVFUllMVXhwWTJWdWMyVXRTV1JsYm5ScFptbGxjam9nVFVsVUxUQmNjbHh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dGRXNWtaWEp6WTI5eVpTMWtZVzVuYkdVZ0tpOWNjbHh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dGRXNTFjMlZrTFhaaGNuTWdLaTljY2x4dWFXMXdiM0owSUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpTQm1jbTl0SUNjdUwyRnVhVzF3WVdOckwwMWhibUZuWldSQmJtbHRZWFJwYjI1TVlYbGxja2x1ZEdWeVptRmpaU2M3WEhKY2JtbHRjRzl5ZENCN0lFRnVhVzFoZEdsdmJsUjVjR1Z6SUgwZ1puSnZiU0FuTGk5aGJtbHRjR0ZqYXk5QmJtbHRZWFJwYjI1R1pXRjBkWEpsSnp0Y2NseHVhVzF3YjNKMElGTlRUVXhUY0dWbFkyaHRZWEpyU1c1MFpYSm1ZV05sSUdaeWIyMGdKeTR2WVhkemNHRmpheTlUVTAxTVUzQmxaV05vYldGeWEwbHVkR1Z5Wm1GalpTYzdYSEpjYm1sdGNHOXlkQ0JCWW5OMGNtRmpkRWh2YzNSR1pXRjBkWEpsSUdaeWIyMGdKeTR2UVdKemRISmhZM1JJYjNOMFJtVmhkSFZ5WlNjN1hISmNibWx0Y0c5eWRDQjdJRkYxWVdSeVlYUnBZeUI5SUdaeWIyMGdKeTR2WVc1cGJYQmhZMnN2UldGemFXNW5KenRjY2x4dWFXMXdiM0owSUUxaGRHaFZkR2xzY3lCbWNtOXRJQ2N1TDAxaGRHaFZkR2xzY3ljN1hISmNibWx0Y0c5eWRDQlZkR2xzY3lCbWNtOXRJQ2N1TDFWMGFXeHpKenRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJGYm5WdElHWnZjaUJoZUdseklHUnBjbVZqZEdsdmJuTXVYSEpjYmlBcVhISmNiaUFxSUVCeVpXRmtiMjVzZVZ4eVhHNGdLaUJBWlc1MWJTQjdRMnhoYzNOOVhISmNiaUFxTDF4eVhHNWpiMjV6ZENCQmVHbHpUV0Z3SUQwZ2UxeHlYRzRnSUZCdmMybDBhWFpsV0RvZ1d6RXNJREFzSURCZExGeHlYRzRnSUU1bFoyRjBhWFpsV0RvZ1d5MHhMQ0F3TENBd1hTeGNjbHh1SUNCUWIzTnBkR2wyWlZrNklGc3dMQ0F4TENBd1hTeGNjbHh1SUNCT1pXZGhkR2wyWlZrNklGc3dMQ0F0TVN3Z01GMHNYSEpjYmlBZ1VHOXphWFJwZG1WYU9pQmJNQ3dnTUN3Z01WMHNYSEpjYmlBZ1RtVm5ZWFJwZG1WYU9pQmJNQ3dnTUN3Z0xURmRMRnh5WEc1OU8xeHlYRzVjY2x4dVkyOXVjM1FnUm1GalpWUmhjbWRsZEZSNWNHVnpJRDBnZTF4eVhHNGdJRVY1WlVObGJuUmxjam9nTUN4Y2NseHVJQ0JGZVdWTVpXWjBPaUF4TEZ4eVhHNGdJRVY1WlZKcFoyaDBPaUF5TEZ4eVhHNGdJRTF2ZFhSb09pQXpMRnh5WEc1OVhISmNibHh5WEc0dkx5QkJkbVZ5WVdkbElHUnBjM1JoYm1ObElHSmxkSGRsWlc0Z2NIVndhV3h6SUdseklDNHdOalJ0TENCbmIyeGtaVzRnY21GMGFXOGdjMkY1Y3lCMGFHRjBJSFJvWlNCa2FYTjBZVzVqWlZ4eVhHNHZMeUJtY205dElHTmxiblJsY2lCdlppQjBhR1VnY0hWd2FXeHpJSFJ2SUhSb1pTQmpaVzUwWlhJZ2IyWWdkR2hsSUcxdmRYUm9JSE5vYjNWc1pDQmlaU0JoWW05MWRDQjBhR1VnYzJGdFpTNWNjbHh1WTI5dWMzUWdSbUZqWlZabFkzUnZjbk1nUFNCYlhISmNiaUFnV3pBc0lEQXNJREJkTEZ4eVhHNGdJRnN0TGpBek1pd2dNQ3dnTUYwc1hISmNiaUFnV3k0d016SXNJREFzSURCZExGeHlYRzRnSUZzd0xDQXRMakEyTkN3Z01GMWNjbHh1WFR0Y2NseHVYSEpjYmk4dklGUnBiV1VnY21GdVoyVnpJSFJ2SUhWelpTQjNhR1Z1SUdOb2IyOXphVzVuSUdFZ2JtVjNJSEpoYm1SdmJTQjNZV2wwSUhScGJXVWdZbVYwZDJWbGJpQnpZV05qWVdSbGMxeHlYRzVqYjI1emRDQk5hV055YjFOaFkyTmhaR1ZYWVdsMFVtRnVaMlZ6SUQwZ2UxeHlYRzRnSUdSbFptRjFiSFE2SUZzd0xqZ3NJREV1TnpWZExGeHlYRzRnSUhCdmMzUk5ZV055YnpvZ1d6QXVOaXdnTVM0ek1USTFYU3hjY2x4dWZUdGNjbHh1WEhKY2JtTnZibk4wSUUxaFkzSnZVMkZqWTJGa1pWZGhhWFJTWVc1blpYTWdQU0I3WEhKY2JpQWdaR1ZtWVhWc2REb2dXelV1TUN3Z09DNHdYU3hjY2x4dUlDQnRiM1YwYUZSaGNtZGxkRG9nV3pBdU1pd2dNQzQzTlYwc0lDOHZJRXh2YjJzZ1lYZGhlU0JtY205dElHRWdiVzkxZEdnZ2RHRnlaMlYwSUhSb1pTQm1ZWE4wWlhOMFhISmNiaUFnWlhsbFZHRnlaMlYwT2lCYk1TNDFMQ0EwTGpCZFhISmNibjA3WEhKY2JseHlYRzR2THlCTmFXNXBiWFZ0SUdGdVoyeGxJR2x1SUdSbFozSmxaWE1nZEdobElHVjVaU0JrYVhKbFkzUnBiMjRnYlhWemRDQmphR0Z1WjJVZ2RHOGdkSEpwWjJkbGNpQmhJR0pzYVc1cklHRnVhVzFoZEdsdmJseHlYRzVqYjI1emRDQkNiR2x1YTFSb2NtVnphRzlzWkNBOUlETTFPMXh5WEc1Y2NseHVMeThnVFdGNGFXMTFiU0J1ZFcxaVpYSWdiMllnYldsc2JHbHpaV052Ym1SeklIUnZJSFZ6WlNCbWIzSWdZMkZzWTNWc1lYUnBibWNnYkc5dmF5QnpjR1ZsWkZ4eVhHNWpiMjV6ZENCTllYaEVaV3gwWVNBOUlERXdNQ0F2SURNN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1VHOXBiblJQWmtsdWRHVnlaWE4wSUdOdmJuUnliMnh6SUhSb1pTQm5ZWHBsSUdScGNtVmpkR2x2YmlCdlppQjBhR1VnYUc5emRDNGdSMmwyWlc0Z2IyNWxJRzl5SUcxdmNtVmNjbHh1SUNvZ1lXNXBiV0YwYVc5dWN5QnZaaUIwZVhCbElFSnNaVzVrTW1SVGRHRjBaU3dnYVhRZ1kyRnNZM1ZzWVhSbGN5QjBhR1VnWVc1bmJHVnpJR0psZEhkbFpXNGdkR2hsSUd4dmIydFVjbUZqYTJWeVhISmNiaUFxSUc5aWFtVmpkQ0FvWjJWdVpYSmhiR3g1SUdFZ2FtOXBiblFnYVc0Z2RHaGxJR2h2YzNRbmN5QnphMlZzWlhSdmJpa2dZVzVrSUhSb1pTQnNiMjlyVkdGeVoyVjBJQ2gwYUdVZ2IySnFaV04wWEhKY2JpQXFJSFJvWlNCb2IzTjBJSE5vYjNWc1pDQnNiMjlySUdGMEtTQmhibVFnWkhKcGRtVnpJSFJvWlNCdFlXNWhaMlZrSUVKc1pXNWtNbVJUZEdGMFpYTW5JRmdnWVc1a0lGa2dZbXhsYm1SY2NseHVJQ29nZG1Gc2RXVnpJSFZ6YVc1bklIUm9aU0J5WlhOMWJIUXVJRmx2ZFNCallXNGdiM0IwYVc5dVlXeHNlU0JoWkdRZ2MyRmpZMkZrYVdNZ2JXOTJaVzFsYm5RZ2RHOGdZVzU1SUcxaGJtRm5aV1JjY2x4dUlDb2dZVzVwYldGMGFXOXVJSFJ2SUdobGJIQWdiV0ZyWlNCMGFHVWdhRzl6ZENkeklHVjVaWE1nWVhCd1pXRnlJR0ZzYVhabElIZG9aVzRnWm05amRYTmxaQ0J2YmlCMGFHVWdjMkZ0WlZ4eVhHNGdLaUJ3YjJsdWRDQm1iM0lnWlhoMFpXUmxaQ0J3WlhKcGIyUnpJRzltSUhScGJXVXVJRWxtSUdKc2FXNXJJR0Z1YVcxaGRHbHZibk1nWVhKbElITndaV05wWm1sbFpDd2dZU0JpYkdsdWExeHlYRzRnS2lCM2FXeHNJR0psSUhCc1lYbGxaQ0JrZFhKcGJtY2diR0Z5WjJVZ1kyaGhibWRsY3lCcGJpQm5ZWHBsSUdScGNtVmpkR2x2Ymk1Y2NseHVJQ3BjY2x4dUlDb2dRR1Y0ZEdWdVpITWdRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaVnh5WEc0Z0tpQkFZV3hwWVhNZ1kyOXlaUzlRYjJsdWRFOW1TVzUwWlhKbGMzUkdaV0YwZFhKbFhISmNiaUFxSUVCcGJYQnNaVzFsYm5SeklGTlRUVXhUY0dWbFkyaHRZWEpyU1c1MFpYSm1ZV05sWEhKY2JpQXFJRUJwYlhCc1pXMWxiblJ6SUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpWeHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1VHOXBiblJQWmtsdWRHVnlaWE4wUm1WaGRIVnlaU0JsZUhSbGJtUnpJRUZpYzNSeVlXTjBTRzl6ZEVabFlYUjFjbVV1YldsNEtGeHlYRzRnSUZOVFRVeFRjR1ZsWTJodFlYSnJTVzUwWlhKbVlXTmxMazFwZUdsdUxGeHlYRzRnSUUxaGJtRm5aV1JCYm1sdFlYUnBiMjVNWVhsbGNrbHVkR1Z5Wm1GalpTNU5hWGhwYmx4eVhHNHBJSHRjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBWTI5dWMzUnlkV04wYjNKY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3WTI5eVpTOUliM04wVDJKcVpXTjBmU0JvYjNOMElDMGdTRzl6ZENCMGFHRjBJRzkzYm5NZ2RHaGxJR1psWVhSMWNtVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNROWZTQnZjSFJwYjI1eklDMGdUM0IwYVc5dWN5Qm1iM0lnZEdobElHWmxZWFIxY21VdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1E5ZlNCMFlYSm5aWFFnTFNBelJDQjBjbUZ1YzJadmNtMWhkR2x2YmlCdWIyUmxJSFJvWVhRZ2RHaGxJR2h2YzNRZ2MyaHZkV3hrSUhSeWVTQjBiMXh5WEc0Z0lDQXFJR3h2YjJzZ1lYUXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlHOXdkR2x2Ym5NdWJHOXZhMVJ5WVdOclpYSWdMU0F6UkNCMGNtRnVjMlp2Y20xaGRHbHZiaUJ1YjJSbElIUm9ZWFFnY21Wd2NtVnpaVzUwYzF4eVhHNGdJQ0FxSUhSb1pTQmthWEpsWTNScGIyNGdkR2hsSUdodmMzUWdhWE1nWTNWeWNtVnVkR3g1SUd4dmIydHBibWNnWkhWeWFXNW5JR0Z1YVcxaGRHbHZiaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamREMTlJRzl3ZEdsdmJuTXVjMk5sYm1VZ0xTQkZibWRwYm1VdGMzQmxZMmxtYVdNZ2MyTmxibVVnYjJKcVpXTjBJSFJvWVhRZ1kyOXVkR0ZwYm5OY2NseHVJQ0FnS2lCMGFHVWdhRzl6ZEM0Z1ZHaHBjeUJ2WW1wbFkzUWdiWFZ6ZENCaVpTQmtaV1pwYm1Wa0lHbG1JSFZ6YVc1bklDZHpaWFJVWVhKblpYUkNlVTVoYldVbklHOXlJQ2RUWlhSVVlYSm5aWFJDZVVsa0oxeHlYRzRnSUNBcUlHMWxkR2h2WkhNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1E5ZlNCc2IyOXJUM0IwYVc5dWN5QXRJRTl3ZEdsdmJuTWdabTl5SUhSb1pTQnNiMjlySUdGdWFXMWhkR2x2YmlCc1lYbGxjbk11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnRzYjI5clQzQjBhVzl1Y3k1aWJHVnVaRlJwYldVOU1DNHhYU0F0SUVSbFptRjFiSFFnWVcxdmRXNTBJRzltSUhScGJXVWdhWFFnZDJsc2JGeHlYRzRnSUNBcUlIUmhhMlVnZEc4Z2JXRnVhWEIxYkdGMFpTQjBhR1VnZDJWcFoyaDBjeUJ2WmlCMGFHVWdiRzl2YXlCc1lYbGxjbk11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnRzYjI5clQzQjBhVzl1Y3k1bFlYTnBibWRHYmoxUmRXRmtjbUYwYVdNdVNXNVBkWFJkSUMwZ1JHVm1ZWFZzZENCbFlYTnBibWNnWm5WdVkzUnBiMjVjY2x4dUlDQWdLaUIwYnlCMWMyVWdkMmhsYmlCdFlXNXBjSFZzWVhScGJtY2diRzl2YXlCc1lYbGxjaUIzWldsbmFIUnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBFOWlhbVZqZEQ1OUlGdHNiMjlyVDNCMGFXOXVjeTVzWVhsbGNuTTlXMTFkSUMwZ1FXNGdZWEp5WVhrZ2IyWWdiR0Y1WlhJZ2IzQjBhVzl1YzF4eVhHNGdJQ0FxSUc5aWFtVmpkSE1nZEc4Z2NtVm5hWE4wWlhJZ1lYTWdiRzl2YXlCc1lYbGxjbk11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUTlmU0JpYkdsdWEwOXdkR2x2Ym5NZ0xTQlBjSFJwYjI1eklHWnZjaUIwYUdVZ1lteHBibXNnWVc1cGJXRjBhVzl1SUd4aGVXVnljeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMkpzYVc1clQzQjBhVzl1Y3k1aWJHVnVaRlJwYldVOU1DNHdOelZkSUMwZ1JHVm1ZWFZzZENCaGJXOTFiblFnYjJZZ2RHbHRaU0JwZEZ4eVhHNGdJQ0FxSUhkcGJHd2dkR0ZyWlNCMGJ5QnRZVzVwY0hWc1lYUmxJSFJvWlNCM1pXbG5hSFJ6SUc5bUlIUm9aU0JpYkdsdWF5QnNZWGxsY25NdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0aWJHbHVhMDl3ZEdsdmJuTXVaV0Z6YVc1blJtNDlVWFZoWkhKaGRHbGpMa2x1VDNWMFhTQXRJRVJsWm1GMWJIUWdaV0Z6YVc1bklHWjFibU4wYVc5dVhISmNiaUFnSUNvZ2RHOGdkWE5sSUhkb1pXNGdiV0Z1YVhCMWJHRjBhVzVuSUdKc2FXNXJJR3hoZVdWeUlIZGxhV2RvZEhNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlUzQ4VDJKcVpXTjBQbjBnVzJKc2FXNXJUM0IwYVc5dWN5NXNZWGxsY25NOVcxMWRJQzBnUVc0Z1lYSnlZWGtnYjJZZ2JHRjVaWElnYjNCMGFXOXVjMXh5WEc0Z0lDQXFJRzlpYW1WamRITWdkRzhnY21WbmFYTjBaWElnWVhNZ1lteHBibXNnYkdGNVpYSnpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHTnZibk4wY25WamRHOXlLRnh5WEc0Z0lDQWdhRzl6ZEN4Y2NseHVJQ0FnSUh0Y2NseHVJQ0FnSUNBZ2RHRnlaMlYwTEZ4eVhHNGdJQ0FnSUNCc2IyOXJWSEpoWTJ0bGNpeGNjbHh1SUNBZ0lDQWdjMk5sYm1WY2NseHVJQ0FnSUgwZ1BTQjdmU3hjY2x4dUlDQWdJSHRjY2x4dUlDQWdJQ0FnWW14bGJtUlVhVzFsT2lCc2IyOXJRbXhsYm1SVWFXMWxJRDBnTUM0eExGeHlYRzRnSUNBZ0lDQmxZWE5wYm1kR2Jqb2diRzl2YTBWaGMybHVaMFp1SUQwZ1VYVmhaSEpoZEdsakxrbHVUM1YwTEZ4eVhHNGdJQ0FnSUNCc1lYbGxjbk02SUd4dmIydE1ZWGxsY25NZ1BTQmJYU3hjY2x4dUlDQWdJSDBnUFNCN2ZTeGNjbHh1SUNBZ0lIdGNjbHh1SUNBZ0lDQWdZbXhsYm1SVWFXMWxPaUJpYkdsdWEwSnNaVzVrVkdsdFpTQTlJREF1TURjMUxGeHlYRzRnSUNBZ0lDQmxZWE5wYm1kR2Jqb2dZbXhwYm10RllYTnBibWRHYmlBOUlGRjFZV1J5WVhScFl5NUpiazkxZEN4Y2NseHVJQ0FnSUNBZ2JHRjVaWEp6T2lCaWJHbHVhMHhoZVdWeWN5QTlJRnRkTEZ4eVhHNGdJQ0FnZlNBOUlIdDlYSEpjYmlBZ0tTQjdYSEpjYmlBZ0lDQnpkWEJsY2lob2IzTjBLVHRjY2x4dVhISmNiaUFnSUNCcFppQW9JWFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVYM1poYkdsa1lYUmxWSEpoYm5ObWIzSnRUMkpxWldOMEtHeHZiMnRVY21GamEyVnlLU2tnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOaGJtNXZkQ0JwYm1sMGFXRnNhWHBsSUZCdmFXNTBUMlpKYm5SbGNtVnpkRVpsWVhSMWNtVWdiMjRnYUc5emRDQWtlM1JvYVhNdVgyaHZjM1F1YVdSOUxpQk1iMjlyVkhKaFkydGxjaUJ0ZFhOMElHSmxJR1JsWm1sdVpXUWdZWE1nWVNCMllXeHBaQ0IwY21GdWMyWnZjbTFoZEdsdmJpQnZZbXBsWTNRdVlDazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQjBhR2x6TGw5c2IyOXJWSEpoWTJ0bGNpQTlJR3h2YjJ0VWNtRmphMlZ5TzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNOalpXNWxJRDBnYzJObGJtVTdYSEpjYmlBZ0lDQjBhR2x6TGw5MFlYSm5aWFFnUFNCMFlYSm5aWFFnZkh3Z2JuVnNiRHRjY2x4dUlDQWdJSFJvYVhNdVgzQnlaWFpVWVhKblpYUlFiM01nUFNCYk1Dd2dNQ3dnTUYwN1hISmNiaUFnSUNCMGFHbHpMbDlwYzFSaGNtZGxkRTF2ZG1sdVp5QTlJR1poYkhObE8xeHlYRzRnSUNBZ2RHaHBjeTVmYkc5dmEweGhlV1Z5Y3lBOUlIUm9hWE11WDJ4dmIydE1ZWGxsY25NZ2ZId2dlMzA3WEhKY2JpQWdJQ0IwYUdsekxsOTBjbUZqYTJsdVowTnZibVpwWjNNZ1BTQjBhR2x6TGw5MGNtRmphMmx1WjBOdmJtWnBaM01nZkh3Z1cxMDdYSEpjYmlBZ0lDQjBhR2x6TGw5aWJHbHVhMHhoZVdWeWN5QTlJSFJvYVhNdVgySnNhVzVyVEdGNVpYSnpJSHg4SUh0OU8xeHlYRzVjY2x4dUlDQWdJQzh2SUZKbFoybHpkR1Z5SUhSb1pTQnNiMjlySUd4aGVXVnljMXh5WEc0Z0lDQWdiRzl2YTB4aGVXVnljeTVtYjNKRllXTm9LQ2g3WEhKY2JpQWdJQ0FnSUc1aGJXVXNYSEpjYmlBZ0lDQWdJR0Z1YVcxaGRHbHZiaXhjY2x4dUlDQWdJQ0FnYldGNFUzQmxaV1FzWEhKY2JpQWdJQ0FnSUhKbFptVnlaVzVqWlN4Y2NseHVJQ0FnSUNBZ1ptOXlkMkZ5WkVGNGFYTXNYSEpjYmlBZ0lDQWdJR2hoYzFOaFkyTmhaR1VzWEhKY2JpQWdJQ0FnSUdKc1pXNWtWR2x0WlN4Y2NseHVJQ0FnSUNBZ1pXRnphVzVuUm01Y2NseHVJQ0FnSUgwcElEMCtJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NXlaV2RwYzNSbGNreHZiMnRNWVhsbGNpaHVZVzFsTENCN1hISmNiaUFnSUNBZ0lDQWdZVzVwYldGMGFXOXVMRnh5WEc0Z0lDQWdJQ0FnSUcxaGVGTndaV1ZrTEZ4eVhHNGdJQ0FnSUNBZ0lISmxabVZ5Wlc1alpTeGNjbHh1SUNBZ0lDQWdJQ0JtYjNKM1lYSmtRWGhwY3l4Y2NseHVJQ0FnSUNBZ0lDQm9ZWE5UWVdOallXUmxMRnh5WEc0Z0lDQWdJQ0FnSUdKc1pXNWtWR2x0WlRvZ1lteGxibVJVYVcxbElDRTlQU0IxYm1SbFptbHVaV1FnUHlCaWJHVnVaRlJwYldVZ09pQnNiMjlyUW14bGJtUlVhVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lHVmhjMmx1WjBadU9pQmxZWE5wYm1kR2JpQWhQVDBnZFc1a1pXWnBibVZrSUQ4Z1pXRnphVzVuUm00Z09pQnNiMjlyUldGemFXNW5SbTRzWEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1VtVm5hWE4wWlhJZ2RHaGxJR0pzYVc1cklHeGhlV1Z5YzF4eVhHNGdJQ0FnWW14cGJtdE1ZWGxsY25NdVptOXlSV0ZqYUNnb2V5QnVZVzFsTENCaGJtbHRZWFJwYjI0c0lHSnNaVzVrVkdsdFpTd2daV0Z6YVc1blJtNGdmU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5KbFoybHpkR1Z5UW14cGJtdE1ZWGxsY2lodVlXMWxMQ0I3WEhKY2JpQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dUxGeHlYRzRnSUNBZ0lDQWdJR0pzWlc1a1ZHbHRaVG9nWW14bGJtUlVhVzFsSUNFOVBTQjFibVJsWm1sdVpXUWdQeUJpYkdWdVpGUnBiV1VnT2lCaWJHbHVhMEpzWlc1a1ZHbHRaU3hjY2x4dUlDQWdJQ0FnSUNCbFlYTnBibWRHYmpvZ1pXRnphVzVuUm00Z0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUdWaGMybHVaMFp1SURvZ1lteHBibXRGWVhOcGJtZEdiaXhjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ1lXNWtJSE5sZEhNZ2RHaGxJSFJoY21kbGRDQnZZbXBsWTNRZ2RHaGxJR2h2YzNRZ2MyaHZkV3hrSUd4dmIyc2dZWFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMGZHNTFiR3g5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUhSaGNtZGxkQ2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBZWEpuWlhRN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCelpYUWdkR0Z5WjJWMEtIUmhjbWRsZENrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmZEdGeVoyVjBJRDBnZEdGeVoyVjBJSHg4SUc1MWJHdzdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdZU0IyWldOMGIzSWdjbVZ3Y21WelpXNTBhVzVuSUhSb1pTQm5iRzlpWVd3Z2NHOXphWFJwYjI0Z2IyWWdZVzRnYjJKcVpXTjBMaUJUYUc5MWJHUWdZbVZjY2x4dUlDQWdLaUJ2ZG1WeWJHOWhaR1ZrSUdadmNpQmxZV05vSUhKbGJtUmxjbWx1WnlCbGJtZHBibVVnYVcxd2JHVnRaVzUwWVhScGIyNHVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0aGJubDlJRjl2WW1vZ0xTQkZibWRwYm1VdGMzQmxZMmxtYVdNZ00wUWdkSEpoYm5ObWIzSnRJRzlpYW1WamRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ0xTQkJiaUJoY25KaGVTQmpiMjV6YVhOMGFXNW5JRzltSUhSb2NtVmxJRzUxYldKbGNuTWdjbVZ3Y21WelpXNTBhVzVuWEhKY2JpQWdJQ29nZUN3Z2VTQmhibVFnZWlCamIyOXlaR2x1WVhSbGN5NWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nWDJkbGRGZHZjbXhrVUc5emFYUnBiMjRvYjJKcUtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1d6QXNJREFzSURCZE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVYwZFhKdUlHRWdiV0YwY21sNElISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ1oyeHZZbUZzSUhSeVlXNXpabTl5YldGMGFXOXVJRzFoZEhKcGVDQnZaaUJoYmlCdlltcGxZM1F1WEhKY2JpQWdJQ29nVTJodmRXeGtJR0psSUc5MlpYSnNiMkZrWldRZ1ptOXlJR1ZoWTJnZ2NtVnVaR1Z5YVc1bklHVnVaMmx1WlNCcGJYQnNaVzFsYm5SaGRHbHZiaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyRnVlWDBnYjJKcUlDMGdSVzVuYVc1bExYTndaV05wWm1saklETkVJSFJ5WVc1elptOXliU0J2WW1wbFkzUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhrdVBHNTFiV0psY2o1OUlDMGdRVzRnWVhKeVlYa2dZMjl1YzJsemRHbHVaeUJ2WmlBeE5pQnVkVzFpWlhKeklISmxjSEpsYzJWdWRHbHVaMXh5WEc0Z0lDQXFJSFJvWlNBelpDQjBjbUZ1YzJadmNtMWhkR2x2Ymk1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdYMmRsZEZkdmNteGtUV0YwY21sNEtHOWlhaWtnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRnN4TENBd0xDQXdMQ0F3TENBd0xDQXhMQ0F3TENBd0xDQXdMQ0F3TENBeExDQXdMQ0F3TENBd0xDQXdMQ0F4WFR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSnZkR0YwWlNCMGFHVWdaMmwyWlc0Z2JHOWpZV3dnWkdseVpXTjBhVzl1SUhabFkzUnZjaUJpZVNCMGFHVWdiMkpxWldOMEozTWdkMjl5YkdRZ2NtOTBZWFJwYjI0Z2JXRjBjbWw0TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdZVzU1ZlNCdlltb2dMU0JGYm1kcGJtVXRjM0JsWTJsbWFXTWdNMFFnZEhKaGJuTm1iM0p0SUc5aWFtVmpkQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeHVkVzFpWlhJK2ZTQm1iM0ozWVhKa1ZtVmpkRzl5SUMwZ1ZXNXBkQ0IyWldOMGIzSWdjbVZ3Y21WelpXNTBhVzVuSUhSb1pTQnNiMk5oYkZ4eVhHNGdJQ0FxSUdadmNuZGhjbVFnWkdseVpXTjBhVzl1SUc5bUlIUm9aU0J2WW1wbFkzUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRWEp5WVhrdVBHNTFiV0psY2o1OVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRjluWlhSUFltcGxZM1JFYVhKbFkzUnBiMjRvYjJKcUxDQm1iM0ozWVhKa1ZtVmpkRzl5SUQwZ1FYaHBjMDFoY0M1UWIzTnBkR2wyWlZvcElIdGNjbHh1SUNBZ0lHTnZibk4wSUhKdmRHRjBhVzl1SUQwZ1RXRjBhRlYwYVd4ekxtZGxkRkp2ZEdGMGFXOXVUV0YwY21sNEtIUm9hWE11WDJkbGRGZHZjbXhrVFdGMGNtbDRLRzlpYWlrcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQk5ZWFJvVlhScGJITXVjbTkwWVhSbFZtVmpkRzl5S0dadmNuZGhjbVJXWldOMGIzSXNJSEp2ZEdGMGFXOXVLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOaGJHTjFiR0YwWlNCb2IzSnBlbTl1ZEdGc0lHRnVaQ0IyWlhKMGFXTmhiQ0JzYjI5cklHRnVaMnhsY3lCcGJpQmtaV2R5WldWeklHZHBkbVZ1SUhOd2FHVnlhV05oYkNCMGFHVjBZVnh5WEc0Z0lDQXFJR0Z1WkNCd2FHa2dZVzVuYkdWeklHbHVJSEpoWkdsaGJuTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RHaGxkR0VnTFNCV1pYSjBhV05oYkM5d2IyeGhjaUJoYm1kc1pTQnBiaUJ5WVdScFlXNXpJSGRvWlhKbElEQWdjRzlwYm5SeklHUnBjbVZqZEd4NVhISmNiaUFnSUNvZ1lXeHZibWNnY0c5emFYUnBkbVVnV1NCaGVHbHpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQndhR2tnTFNCSWIzSnBlbTl1ZEdGc0wyRjZhVzExZEdoaGJDQmhibWRzWlNCcGJpQnlZV1JwWVc1ekxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgwZ0xTQkJiaUJ2WW1wbFkzUWdkMmwwYUNCMGFHVWdjMmxuYm1GMGRYSmxJSHRvT2lCdWRXMWlaWElzSUhZNklHNTFiV0psY24wZ2QyaGxjbVZjY2x4dUlDQWdLaUJvSUhKbGNISmxjMlZ1ZEhNZ2FHOXlhWHB2Ym5SaGJDQnliM1JoZEdsdmJpQnBiaUJrWldkeVpXVnpJR0Z1WkNCMklISmxjSEpsYzJWdWRITWdkbVZ5ZEdsallXd2djbTkwWVhScGIyNWNjbHh1SUNBZ0tpQnBiaUJrWldkeVpXVnpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCZmMzQm9aWEpwWTJGc1ZHOUNiR1Z1WkZaaGJIVmxLSFJvWlhSaExDQndhR2twSUh0Y2NseHVJQ0FnSUdOdmJuTjBJR2dnUFNCTllYUm9WWFJwYkhNdWRHOUVaV2R5WldWektIQm9hU2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdUMlptYzJWMElIUm9aU0IyWlhKMGFXTmhiQ0JoYm1kc1pTQnpieUF3SUdseklIQnZhVzUwYVc1bklHWnZjbmRoY21RZ2FXNXpkR1ZoWkNCdlppQjFjRnh5WEc0Z0lDQWdZMjl1YzNRZ2RpQTlJRTFoZEdoVmRHbHNjeTUwYjBSbFozSmxaWE1vZEdobGRHRXBJQzBnT1RBN1hISmNibHh5WEc0Z0lDQWdMeThnUTI5dWRtVnlkQ0IyWlhKMGFXTmhiQ0JoYm1kc1pTQjBieUF0TVRnd0xDQXhPREFnY21GdVoyVmNjbHh1SUNBZ0lISmxkSFZ5YmlCN0lHZ3NJSFlnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnWDI5dVRHRjVaWEpCWkdSbFpDaDdJRzVoYldVZ2ZTa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmJHOXZhMHhoZVdWeWN5QTlJSFJvYVhNdVgyeHZiMnRNWVhsbGNuTWdmSHdnZTMwN1hISmNiaUFnSUNCMGFHbHpMbDlpYkdsdWEweGhlV1Z5Y3lBOUlIUm9hWE11WDJKc2FXNXJUR0Y1WlhKeklIeDhJSHQ5TzF4eVhHNWNjbHh1SUNBZ0lITjFjR1Z5TGw5dmJreGhlV1Z5UVdSa1pXUW9leUJ1WVcxbElIMHBPMXh5WEc1Y2NseHVJQ0FnSUM4dklGWmhiR2xrWVhSbElIUm9aU0JzYjI5cklHRnVhVzFoZEdsdmJseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyeHZiMnRNWVhsbGNuTmJibUZ0WlYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl5WldkcGMzUmxja3h2YjJ0QmJtbHRZWFJwYjI0b2JtRnRaU3dnZEdocGN5NWZiRzl2YTB4aGVXVnljMXR1WVcxbFhTazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmZiMjVCYm1sdFlYUnBiMjVCWkdSbFpDaDdJR3hoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1VG1GdFpTQjlLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXNiMjlyVEdGNVpYSnpJRDBnZEdocGN5NWZiRzl2YTB4aGVXVnljeUI4ZkNCN2ZUdGNjbHh1SUNBZ0lIUm9hWE11WDJKc2FXNXJUR0Y1WlhKeklEMGdkR2hwY3k1ZllteHBibXRNWVhsbGNuTWdmSHdnZTMwN1hISmNibHh5WEc0Z0lDQWdjM1Z3WlhJdVgyOXVRVzVwYldGMGFXOXVRV1JrWldRb2V5QnNZWGxsY2s1aGJXVWdmU2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdWbUZzYVdSaGRHVWdkR2hsSUd4dmIyc2dZVzVwYldGMGFXOXVYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZiRzl2YTB4aGVXVnljMXRzWVhsbGNrNWhiV1ZkSUQwOVBTQmhibWx0WVhScGIyNU9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDNKbFoybHpkR1Z5VEc5dmEwRnVhVzFoZEdsdmJpaHNZWGxsY2s1aGJXVXNJR0Z1YVcxaGRHbHZiazVoYldVcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSVzV6ZFhKbElIUm9ZWFFnY21WbmFYTjBaWEpsWkNCc2IyOXJJR0Z1YVcxaGRHbHZibk1nWVhKbElFSnNaVzVrTW1SVGRHRjBaWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHeGhlV1Z5VG1GdFpTQXRJRTVoYldVZ2IyWWdkR2hsSUd4aGVXVnlJSFJvWVhRZ1kyOXVkR0ZwYm5NZ2RHaGxJR3h2YjJzZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCaGJtbHRZWFJwYjI1T1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUxseHlYRzRnSUNBcUwxeHlYRzRnSUY5eVpXZHBjM1JsY2t4dmIydEJibWx0WVhScGIyNG9iR0Y1WlhKT1lXMWxMQ0JoYm1sdFlYUnBiMjVPWVcxbEtTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0c1lYbGxjazVoYldWZExtRnVhVzFoZEdsdmJuTmJZVzVwYldGMGFXOXVUbUZ0WlYwdWFYTkJZM1JwZG1VcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0Z4eVhHNGdJQ0FnSUNBZ0lFRnVhVzFoZEdsdmJsUjVjR1Z6VzNSb2FYTXVYMmh2YzNRdVFXNXBiV0YwYVc5dVJtVmhkSFZ5WlM1blpYUkJibWx0WVhScGIyNVVlWEJsS0Z4eVhHNGdJQ0FnSUNBZ0lDQWdiR0Y1WlhKT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1lXNXBiV0YwYVc5dVRtRnRaVnh5WEc0Z0lDQWdJQ0FnSUNsZElDRTlQU0JCYm1sdFlYUnBiMjVVZVhCbGN5NWliR1Z1WkRKa1hISmNiaUFnSUNBZ0lDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGZGhjbTRnWVc1a0lHUmxZV04wYVhaaGRHVWdhV1lnZEdobElISmxaMmx6ZEdWeVpXUWdjM1JoZEdVZ2FYTWdibTkwSUdKc1pXNWtNbVJjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YSEpjYmlBZ0lDQWdJQ0FnSUNCZ1EyRnVibTkwSUhKbFoybHpkR1Z5SUZCdmFXNTBJRzltSUVsdWRHVnlaWE4wSUd4dmIyc2dZVzVwYldGMGFXOXVJQ1I3WVc1cGJXRjBhVzl1VG1GdFpYMGdiMjRnYkdGNVpYSWdKSHRzWVhsbGNrNWhiV1Y5SUdadmNpQm9iM04wSUNSN2RHaHBjeTVmYUc5emRDNXBaSDB1SUV4dmIyc2dZVzVwYldGMGFXOXVjeUJ0ZFhOMElHSmxJRzltSUhSNWNHVWdKMkpzWlc1a01tUW5MbUJjY2x4dUlDQWdJQ0FnSUNBcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMWhibUZuWldSTVlYbGxjbk5iYkdGNVpYSk9ZVzFsWFM1aGJtbHRZWFJwYjI1elcxeHlYRzRnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBhVzl1VG1GdFpWeHlYRzRnSUNBZ0lDQWdJRjB1YVhOQlkzUnBkbVVnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1EyaGxZMnNnYVdZZ2RHaGxJR2RwZG1WdUlHOWlhbVZqZENCcGN5QnViM1FnYjJZZ1lXNGdaVzVuYVc1bExYTndaV05wWm1saklIUjVjR1V1SUZOb2IzVnNaRnh5WEc0Z0lDQXFJR0psSUc5MlpYSnNiMkZrWldRZ1ptOXlJR1ZoWTJnZ2NtVnVaR1Z5YVc1bklHVnVaMmx1WlNCcGJYQnNaVzFsYm5SaGRHbHZiaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyRnVlWDBnYjJKcUlDMGdUMkpxWldOMElIUnZJSFpoYkdsa1lYUmxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUY5MllXeHBaR0YwWlZSeVlXNXpabTl5YlU5aWFtVmpkQ2h2WW1vcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdlltb2dhVzV6ZEdGdVkyVnZaaUJQWW1wbFkzUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEYUdWamF5QnBaaUIwYUdVZ1oybDJaVzRnWTI5dVptbG5kWEpoZEdsdmJpQnZZbXBsWTNRZ2FHRnpJR0ZzY21WaFpIa2dZbVZsYmlCemRHOXlaV1FnWVhNZ1lTQjBjbUZqYTJsdVoxeHlYRzRnSUNBcUlHTnZibVpwWnk0Z1NXWWdhWFFnYUdGekxDQnlaWFIxY200Z2RHaGxJSE4wYjNKbFpDQmpiMjVtYVdkMWNtRjBhVzl1TGlCUGRHaGxjbmRwYzJVc0lITjBiM0psSUdGdVpGeHlYRzRnSUNBcUlISmxkSFZ5YmlCcGRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWTI5dVptbG5JQzBnVDJKcVpXTjBJR052Ym5SaGFXNXBibWNnZEhKaFkydGxjaXdnY21WbVpYSmxibU5sSUdGdVpDQm1iM0ozWVhKa1FYaHBjMXh5WEc0Z0lDQXFJSEJ5YjNCbGNuUnBaWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3VDJKcVpXTjBmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOWhaR1JVY21GamEybHVaME52Ym1acFp5aGpiMjVtYVdjcElIdGNjbHh1SUNBZ0lHTnZibk4wSUhSeVlXTnJhVzVuUTI5dVptbG5JRDBnZEdocGN5NWZkSEpoWTJ0cGJtZERiMjVtYVdkekxtWnBibVFvWXlBOVBseHlYRzRnSUNBZ0lDQmpMbkpsWm1WeVpXNWpaU0E5UFQwZ1kyOXVabWxuTG5KbFptVnlaVzVqWlNBbUppQmpMbVp2Y25kaGNtUkJlR2x6SUQwOVBTQmpiMjVtYVdjdVptOXlkMkZ5WkVGNGFYTmNjbHh1SUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tIUnlZV05yYVc1blEyOXVabWxuS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNtRmphMmx1WjBOdmJtWnBaenRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJR052Ym1acFp5NWhibWRzWlhNZ1BTQjdJR2c2SURBc0lIWTZJREFnZlR0Y2NseHVJQ0FnSUNBZ1kyOXVabWxuTG5CeVpYWkJibWRzWlhNZ1BTQjdJR2c2SURBc0lIWTZJREFnZlR0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmZEhKaFkydHBibWREYjI1bWFXZHpMbkIxYzJnb1kyOXVabWxuS1R0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJtWnBaenRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGRIVnliaUIwYUdVZ1pHbHpkR0Z1WTJVZ1ltVjBkMlZsYmlCMGFHVWdiRzl2YXlCMGNtRmphMlZ5SUdGdVpDQjBhR1VnYkc5dmF5QjBZWEpuWlhRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTI1MWJXSmxjbjFjY2x4dUlDQWdLaTljY2x4dUlDQmZaMlYwVkdGeVoyVjBSR2x6ZEdGdVkyVW9LU0I3WEhKY2JpQWdJQ0F2THlCR2FXNWtJSFJvWlNCMlpXTjBiM0lnWW1WMGQyVmxiaUIwYUdVZ1oyeHZZbUZzSUhCdmMybDBhVzl1Y3lCdlppQjBjbUZqYTJWeUlHRnVaQ0IwWVhKblpYUmNjbHh1SUNBZ0lHTnZibk4wSUhOdmRYSmpaVkJ2YzJsMGFXOXVJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVmWjJWMFYyOXliR1JRYjNOcGRHbHZiaWgwYUdsekxsOXNiMjlyVkhKaFkydGxjaWs3WEhKY2JpQWdJQ0JqYjI1emRDQjBZWEpuWlhSUWIzTnBkR2x2YmlBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdVgyZGxkRmR2Y214a1VHOXphWFJwYjI0b2RHaHBjeTVmZEdGeVoyVjBLVHRjY2x4dUlDQWdJR052Ym5OMElHeHZiMnRXWldOMGIzSWdQU0JiWEhKY2JpQWdJQ0FnSUhSaGNtZGxkRkJ2YzJsMGFXOXVXekJkSUMwZ2MyOTFjbU5sVUc5emFYUnBiMjViTUYwc1hISmNiaUFnSUNBZ0lIUmhjbWRsZEZCdmMybDBhVzl1V3pGZElDMGdjMjkxY21ObFVHOXphWFJwYjI1Yk1WMHNYSEpjYmlBZ0lDQWdJSFJoY21kbGRGQnZjMmwwYVc5dVd6SmRJQzBnYzI5MWNtTmxVRzl6YVhScGIyNWJNbDFjY2x4dUlDQWdJRjA3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHaFZkR2xzY3k1blpYUldaV04wYjNKTllXZHVhWFIxWkdVb2JHOXZhMVpsWTNSdmNpazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhObGRDQmhiR3dnYzNSdmNtVmtJSFJ5WVdOcmFXNW5JR0Z1WjJ4bGN5QjBieUF3TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLaTljY2x4dUlDQmZjbVZ6WlhSTWIyOXJRVzVuYkdWektDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmRISmhZMnRwYm1kRGIyNW1hV2R6TG1admNrVmhZMmdvS0hzZ1lXNW5iR1Z6SUgwcElEMCtJSHRjY2x4dUlDQWdJQ0FnWVc1bmJHVnpMbWdnUFNBd08xeHlYRzRnSUNBZ0lDQmhibWRzWlhNdWRpQTlJREE3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTjBiM0psSUhSb1pTQmthV1ptWlhKbGJtTmxJR2x1SUdodmNtbDZiMjUwWVd3Z1lXNWtJSFpsY25ScFkyRnNJSEp2ZEdGMGFXOXVJR1p2Y2lCMGFHVWdkSEpoWTJ0bGNpZHpYSEpjYmlBZ0lDb2djbVZtWlhKbGJtTmxJSEp2ZEdGMGFXOXVJR0Z1WkNCMGFHVWdaR2x5WldOMGFXOXVJRzltSUhSb1pTQjBZWEpuWlhRZ1puSnZiU0IwYUdVZ2RISmhZMnRsY2k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ292WEhKY2JpQWdYM05sZEV4dmIydEJibWRzWlhNb0tTQjdYSEpjYmlBZ0lDQXZMeUJIWlhRZ2RHaGxJR04xY25KbGJuUWdjRzl6YVhScGIyNXpJRzltSUhSb1pTQjBjbUZqYTJWeUlHRnVaQ0IwWVhKblpYUWdiMkpxWldOMGMxeHlYRzRnSUNBZ1kyOXVjM1FnZEdGeVoyVjBVRzl6SUQwZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1ZloyVjBWMjl5YkdSUWIzTnBkR2x2YmloMGFHbHpMbDkwWVhKblpYUXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ2RISmhZMnRsY2xCdmN5QTlJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVYMmRsZEZkdmNteGtVRzl6YVhScGIyNG9kR2hwY3k1ZmJHOXZhMVJ5WVdOclpYSXBPMXh5WEc1Y2NseHVJQ0FnSUM4dklFTm9aV05ySUdsbUlIUm9aU0IwWVhKblpYUWdhR0Z6SUcxdmRtVmtYSEpjYmlBZ0lDQjBhR2x6TGw5cGMxUmhjbWRsZEUxdmRtbHVaeUE5SUUxaGRHaFZkR2xzY3k1blpYUldaV04wYjNKTllXZHVhWFIxWkdVb1cxeHlYRzRnSUNBZ0lDQjBZWEpuWlhSUWIzTmJNRjBnTFNCMGFHbHpMbDl3Y21WMlZHRnlaMlYwVUc5eld6QmRMRnh5WEc0Z0lDQWdJQ0IwWVhKblpYUlFiM05iTVYwZ0xTQjBhR2x6TGw5d2NtVjJWR0Z5WjJWMFVHOXpXekZkTEZ4eVhHNGdJQ0FnSUNCMFlYSm5aWFJRYjNOYk1sMGdMU0IwYUdsekxsOXdjbVYyVkdGeVoyVjBVRzl6V3pKZFhWeHlYRzRnSUNBZ0tTQStJREE3WEhKY2JpQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtIUm9hWE11WDNCeVpYWlVZWEpuWlhSUWIzTXNJSFJoY21kbGRGQnZjeWs3WEhKY2JseHlYRzVjY2x4dUlDQWdJQzh2SUVOaGJHTjFiR0YwWlNCMGFHVWdhRzl5YVhwdmJuUmhiQ0JoYm1RZ2RtVnlkR2xqWVd3Z1lXNW5iR1Z6SUhSdklISnZkR0YwWlNCMGJ5QjBhR1VnZEdGeVoyVjBYSEpjYmlBZ0lDQmpiMjV6ZENCMFlYSm5aWFJUY0dobGNtbGpZV3dnUFNCTllYUm9WWFJwYkhNdVkyRnlkR1Z6YVdGdVZHOVRjR2hsY21sallXd29YSEpjYmlBZ0lDQWdJSFJoY21kbGRGQnZjMXN3WFNBdElIUnlZV05yWlhKUWIzTmJNRjBzWEhKY2JpQWdJQ0FnSUhSaGNtZGxkRkJ2YzFzeFhTQXRJSFJ5WVdOclpYSlFiM05iTVYwc1hISmNiaUFnSUNBZ0lIUmhjbWRsZEZCdmMxc3lYU0F0SUhSeVlXTnJaWEpRYjNOYk1sMWNjbHh1SUNBZ0lDazdYSEpjYmlBZ0lDQmpiMjV6ZENCMFlYSm5aWFJCYm1kc1pYTWdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMbDl6Y0dobGNtbGpZV3hVYjBKc1pXNWtWbUZzZFdVb1hISmNiaUFnSUNBZ0lIUmhjbWRsZEZOd2FHVnlhV05oYkZzeFhTeGNjbHh1SUNBZ0lDQWdkR0Z5WjJWMFUzQm9aWEpwWTJGc1d6SmRYSEpjYmlBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUM4dklFTmhiR04xYkdGMFpTQmhibWRzWlhNZ2NtVnNZWFJwZG1VZ2RHOGdkR2hsSUhKbFptVnlaVzVqWlNCdlltcGxZM1J6WEhKY2JpQWdJQ0IwYUdsekxsOTBjbUZqYTJsdVowTnZibVpwWjNNdVptOXlSV0ZqYUNnb2UxeHlYRzRnSUNBZ0lDQnlaV1psY21WdVkyVXNYSEpjYmlBZ0lDQWdJR1p2Y25kaGNtUkJlR2x6TEZ4eVhHNGdJQ0FnSUNCaGJtZHNaWE5jY2x4dUlDQWdJSDBwSUQwK0lIdGNjbHh1SUNBZ0lDQWdMeThnUTJGc1kzVnNZWFJsSUhSb1pTQm9iM0pwZW05dWRHRnNJR0Z1WkNCMlpYSjBhV05oYkNCaGJtZHNaWE1nZEc4Z2NtOTBZWFJsSUhSdklIUm9aU0JrYVhKbFkzUnBiMjRnYjJZZ2RHaGxJSFJ5WVdOclpYSmNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2NtVm1SR2x5WldOMGFXOXVJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVmWjJWMFQySnFaV04wUkdseVpXTjBhVzl1S0Z4eVhHNGdJQ0FnSUNBZ0lISmxabVZ5Wlc1alpTeGNjbHh1SUNBZ0lDQWdJQ0JtYjNKM1lYSmtRWGhwY3l4Y2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2NtVm1VM0JvWlhKcFkyRnNJRDBnVFdGMGFGVjBhV3h6TG1OaGNuUmxjMmxoYmxSdlUzQm9aWEpwWTJGc0tDNHVMbkpsWmtScGNtVmpkR2x2YmlrN1hISmNiaUFnSUNBZ0lHTnZibk4wSUhKbFprRnVaMnhsY3lBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdVgzTndhR1Z5YVdOaGJGUnZRbXhsYm1SV1lXeDFaU2hjY2x4dUlDQWdJQ0FnSUNCeVpXWlRjR2hsY21sallXeGJNVjBzWEhKY2JpQWdJQ0FnSUNBZ2NtVm1VM0JvWlhKcFkyRnNXekpkWEhKY2JpQWdJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCVGRHOXlaU0IwYUdVZ1pHbG1abVZ5Wlc1alpWeHlYRzRnSUNBZ0lDQmhibWRzWlhNdWFDQTlJSFJoY21kbGRFRnVaMnhsY3k1b0lDMGdjbVZtUVc1bmJHVnpMbWc3WEhKY2JpQWdJQ0FnSUdGdVoyeGxjeTUySUQwZ2RHRnlaMlYwUVc1bmJHVnpMbllnTFNCeVpXWkJibWRzWlhNdWRqdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WMGRYSnVJSFJvWlNCb2IzSnBlbTl1ZEdGc0lHRnVaQ0IyWlhKMGFXTmhiQ0JoYm1kc1pYTWdhWFFnZDI5MWJHUWdjbVZ4ZFdseVpTQjBieUJ6YVcxMWJHRjBaU0JzYjI5cmFXNW5YSEpjYmlBZ0lDb2dZWFFnZEdobElHZHBkbVZ1SUhSNWNHVWdiMllnWm1GalpTQjBZWEpuWlhSY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdkR0Z5WjJWMFZIbHdaU0F0SUVsdWRHVm5aWElnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0JHWVdObFZHRnlaMlYwVkhsd1pTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUxTQkJiaUJ2WW1wbFkzUWdkMmwwYUNCemFXZHVZWFIxY21VZ2UzSTZJRzUxYldKbGNpd2dhRG9nYm5WdFltVnlMQ0IyT2lCdWRXMWlaWEo5WEhKY2JpQWdJQ29nZDJobGNtVWdKM0luSUhKbGNISmxjMlZ1ZEhNZ2NtRmthWFZ6TENCb0lISmxjSEpsYzJWdWRITWdkR2hsSUdodmNtbDZiMjUwWVd3dllYcHBiWFYwYUdGc0lHRnVaMnhsSUdGdVpGeHlYRzRnSUNBcUlIWWdjbVZ3Y21WelpXNTBjeUIwYUdVZ2RtVnlkR2xqWVd3dmNHOXNZWElnWVc1bmJHVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gyZGxkRVpoWTJWVVlYSm5aWFJCYm1kc1pYTW9kR0Z5WjJWMFZIbHdaU2tnZTF4eVhHNGdJQ0FnTHk4Z1RtOGdiMlptYzJWMElIZG9aVzRnZEdobElIUmhjbWRsZENCcGN5QjBhR1VnWTJWdWRHVnlJRzltSUhSb1pTQmxlV1Z6WEhKY2JpQWdJQ0JwWmlBb2RHRnlaMlYwVkhsd1pTQTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2V5Qm9PaUF3TENCMk9pQXdJSDA3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdRblZwYkdRZ1lTQjJaV04wYjNJZ2RHOGdkR2hsSUdaaFkyVWdkR0Z5WjJWMElIUjVjR1VnZFhOcGJtY2dkR2hsSUdOMWNuSmxiblFnWkdsemRHRnVZMlVnZEc4Z2RHaGxJSFJoY21kbGRGeHlYRzRnSUNBZ1kyOXVjM1FnWkdsemRHRnVZMlVnUFNCMGFHbHpMbDluWlhSVVlYSm5aWFJFYVhOMFlXNWpaU2gwYUdsekxsOXNiMjlyVkhKaFkydGxjaWs3WEhKY2JpQWdJQ0JqYjI1emRDQm1ZV05sVm1WamRHOXlJRDBnV3k0dUxrWmhZMlZXWldOMGIzSnpXM1JoY21kbGRGUjVjR1ZkWFR0Y2NseHVJQ0FnSUdaaFkyVldaV04wYjNKYk1sMGdQU0JrYVhOMFlXNWpaVHRjY2x4dUlDQWdJR052Ym5OMElITndhR1Z5YVdOaGJDQTlJRTFoZEdoVmRHbHNjeTVqWVhKMFpYTnBZVzVVYjFOd2FHVnlhV05oYkNndUxpNW1ZV05sVm1WamRHOXlLVHRjY2x4dVhISmNiaUFnSUNBdkx5Qk5ZV3RsSUhOMWNtVWdkbUZzZFdWeklHRnlaU0JqYkdGdGNHVmtJSGRwZEdocGJpQjBhR1VnY21GdVoyVWdiMllnYlc5MGFXOXVJRzltSUhSb1pTQm9kVzFoYmlCbGVXVXNJR2x1SUdOaGMyVWdkR2hsSUhSaGNtZGxkQ0JwY3lCMlpYSjVJR05zYjNObFhISmNiaUFnSUNCamIyNXpkQ0JpYkdWdVpGWmhiSFZsY3lBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdVgzTndhR1Z5YVdOaGJGUnZRbXhsYm1SV1lXeDFaU2h6Y0dobGNtbGpZV3hiTVYwc0lITndhR1Z5YVdOaGJGc3lYU2s3WEhKY2JpQWdJQ0JpYkdWdVpGWmhiSFZsY3k1b0lEMGdUV0YwYUZWMGFXeHpMbU5zWVcxd0tHSnNaVzVrVm1Gc2RXVnpMbWdzSUMwek5Td2dNelVwTzF4eVhHNGdJQ0FnWW14bGJtUldZV3gxWlhNdWRpQTlJRTFoZEdoVmRHbHNjeTVqYkdGdGNDaGliR1Z1WkZaaGJIVmxjeTUyTENBdE1qVXNJRE13S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z1lteGxibVJXWVd4MVpYTTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJWY0dSaGRHVmtJSFJvWlNCemRHOXlaV1FnYzNCbFpXUWdZVzVrSUdSMWNtRjBhVzl1SUhaaGNtbGhZbXhsY3lCbWIzSWdZU0JzWVhsbGNpQmlZWE5sWkNCdmJpQjBhR1ZjY2x4dUlDQWdLaUJqYUdGdVoyVWdhVzRnYUc5eWFYcHZiblJoYkNCaGJtUWdkbVZ5ZEdsallXd2dZVzVuYkdWeklHOW1JSFJvWlNCMGNtRmphMlZ5TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnNZWGxsY2s1aGJXVWdMU0JPWVcxbElHOW1JSFJvWlNCc1lYbGxjaUIwYnlCemRHOXlaU0IyWVd4MVpYTWdiMjR1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJR2dnTFNCRGFHRnVaMlVnYVc0Z2FHOXlhWHB2Ym5SaGJDQmhibWRzWlN3Z2FXNGdaR1ZuY21WbGN5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2RpQXRJRU5vWVc1blpTQnBiaUIyWlhKMGFXTmhiQ0JoYm1kc1pTd2dhVzRnWkdWbmNtVmxjeTVjY2x4dUlDQWdLaTljY2x4dUlDQmZkWEJrWVhSbFRHRjVaWEpUY0dWbFpDaHNZWGxsY2s1aGJXVXNJR2dzSUhZcElIdGNjbHh1SUNBZ0lHTnZibk4wSUd4aGVXVnlJRDBnZEdocGN5NWZiV0Z1WVdkbFpFeGhlV1Z5YzF0c1lYbGxjazVoYldWZE8xeHlYRzVjY2x4dUlDQWdJQzh2SUVaeWIyMGdYQ0pTWldGc2FYTjBhV01nUVhaaGRHRnlJR0Z1WkNCb1pXRmtJRUZ1YVcxaGRHbHZiaUJWYzJsdVp5QmhJRTVsZFhKdlltbHZiRzluYVdOaGJDQk5iMlJsYkNCdlppQldhWE4xWVd3Z1FYUjBaVzUwYVc5dVhDSXNJRWwwZEdrc0lFUm9ZWFpoYkdVc0lGQnBaMmhwYmx4eVhHNGdJQ0FnYkdGNVpYSXViV0Y0U0ZOd1pXVmtJRDBnTkRjeklDb2dLREVnTFNCTllYUm9MbVY0Y0NndGFDQXZJRGN1T0NrcE8xeHlYRzRnSUNBZ2JHRjVaWEl1YldGNFZsTndaV1ZrSUQwZ05EY3pJQ29nS0RFZ0xTQk5ZWFJvTG1WNGNDZ3RkaUF2SURjdU9Da3BPMXh5WEc1Y2NseHVJQ0FnSUM4dklFWnliMjBnWENKRmVXVnpJRUZzYVhabFhDSXNJRXhsWlN3Z1FtRmtiR1Z5WEhKY2JpQWdJQ0JqYjI1emRDQkVNQ0E5SURBdU1ESTFPMXh5WEc0Z0lDQWdZMjl1YzNRZ1pDQTlJREF1TURBeU16VTdYSEpjYmlBZ0lDQnNZWGxsY2k1b1JIVnlZWFJwYjI0Z1BTQkVNQ0FySUdRZ0tpQm9PMXh5WEc0Z0lDQWdiR0Y1WlhJdWRrUjFjbUYwYVc5dUlEMGdSREFnS3lCa0lDb2dkanRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZObGRDQjBhR1VnYldsamNtOVRZV05qWVdSbElHOWlhbVZqZENCM2FYUm9JRzVsZHlCeVlXNWtiMjFwZW1Wa0lIWmhiSFZsY3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0Y1WlhKT1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnZEdoaGRDQnZkMjV6SUhSb1pTQnpZV05qWVdSbElHMXZkR2x2Ymk1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JmYzJWMFRXbGpjbTlUWVdOallXUmxLR3hoZVdWeVRtRnRaU2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMnhoZVdWeVRtRnRaVjA3WEhKY2JpQWdJQ0JqYjI1emRDQjdJRzFwWTNKdlUyRmpZMkZrWlNCOUlEMGdiR0Y1WlhJN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM1JoY21kbGRDa2dlMXh5WEc0Z0lDQWdJQ0F2THlCTmFXTnlieUJ0YjNabGJXVnVkSE1nYzJodmRXeGtJR0psSUhOdFlXeHNaWElnZDJobGJpQm1iMk4xYzJWa0lHOXVJR0VnZEdGeVoyVjBYSEpjYmlBZ0lDQWdJRzFwWTNKdlUyRmpZMkZrWlM1b0lEMGdWWFJwYkhNdVoyVjBVbUZ1Wkc5dFJteHZZWFFvTGpBeExDQXVNVFVwTzF4eVhHNGdJQ0FnSUNCdGFXTnliMU5oWTJOaFpHVXVkaUE5SUZWMGFXeHpMbWRsZEZKaGJtUnZiVVpzYjJGMEtDNHdNU3dnTGpFMUtUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDOHZJRTFwWTNKdmMyRmpZMkZrWlhNdUlFVnVZM2xqYkc5d1pXUnBZU0J2WmlCT1pYVnliM05qYVdWdVkyVXVJQ2d5TURBNUtTQlRjSEpwYm1kbGNpd2dRbVZ5YkdsdUxDQklaV2xrWld4aVpYSm5MaUJvZEhSd2N6b3ZMMlJ2YVM1dmNtY3ZNVEF1TVRBd055ODVOemd0TXkwMU5EQXRNamsyTnpndE1sOHpORGt5WEhKY2JpQWdJQ0FnSUcxcFkzSnZVMkZqWTJGa1pTNW9JRDBnVlhScGJITXVaMlYwVW1GdVpHOXRSbXh2WVhRb0xqQXhMQ0F1TXlrN1hISmNiaUFnSUNBZ0lHMXBZM0p2VTJGalkyRmtaUzUySUQwZ1ZYUnBiSE11WjJWMFVtRnVaRzl0Um14dllYUW9MakF4TENBdU15azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NWZkWEJrWVhSbFRHRjVaWEpUY0dWbFpDaHNZWGxsY2s1aGJXVXNJRzFwWTNKdlUyRmpZMkZrWlM1b0xDQnRhV055YjFOaFkyTmhaR1V1ZGlrN1hISmNibHh5WEc0Z0lDQWdMeThnVW1WemRHRnlkQ0IwYUdVZ2RHbHRaWEpjY2x4dUlDQWdJSFJvYVhNdVgybHVhWFJwWVd4cGVtVk5hV055YjFScGJXVnlLR3hoZVdWeVRtRnRaU3dnTGk0dVRXbGpjbTlUWVdOallXUmxWMkZwZEZKaGJtZGxjeTVrWldaaGRXeDBLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZObGRDQjBhR1VnYldGamNtOVRZV05qWVdSbElHOWlhbVZqZENCM2FYUm9JRzVsZHlCeVlXNWtiMjFwZW1Wa0lIWmhiSFZsY3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd2NtbDJZWFJsWEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdiR0Y1WlhKT1lXMWxJQzBnVG1GdFpTQnZaaUIwYUdVZ2JHRjVaWElnZEdoaGRDQnZkMjV6SUhSb1pTQnpZV05qWVdSbElHMXZkR2x2Ymk1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JmYzJWMFRXRmpjbTlUWVdOallXUmxLR3hoZVdWeVRtRnRaU2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMnhoZVdWeVRtRnRaVjA3WEhKY2JpQWdJQ0JqYjI1emRDQjdJRzFoWTNKdlUyRmpZMkZrWlNCOUlEMGdiR0Y1WlhJN1hISmNiaUFnSUNCc1pYUWdiV0ZqY205VFlXTmpZV1JsVjJGcGRGSmhibWRsTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRWx1WTNKbFlYTmxJSEpoYm1SdmJTQjJZV3gxWlNCeVlXNW5aU0IzYUdWdUlHNXZkQ0JtYjJOMWMyVmtJRzl1SUdFZ2RHRnlaMlYwWEhKY2JpQWdJQ0JwWmlBb0lYUm9hWE11WDNSaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnSUNCdFlXTnliMU5oWTJOaFpHVlhZV2wwVW1GdVoyVWdQU0JOWVdOeWIxTmhZMk5oWkdWWFlXbDBVbUZ1WjJWekxtUmxabUYxYkhRN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCT2IzSnRZV3dnYUhWdFlXNGdhRzl5YVhwdmJuUmhiQ0JsZVdVZ2NtOTBZWFJwYjI0Z2JHbHRhWFFnYVhNZ1lXSnZkWFFnTXpVZ1pHVm5jbVZsYzF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JvVEdsdGFYUWdQU0JWZEdsc2N5NW5aWFJTWVc1a2IyMUdiRzloZENndU1UUXpMQ0F1TWpnMktUdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2FFWmhZM1J2Y2lBOUlGVjBhV3h6TG1kbGRGSmhibVJ2YlVac2IyRjBLQzFvVEdsdGFYUXNJR2hNYVcxcGRDazdYSEpjYmlBZ0lDQWdJRzFoWTNKdlUyRmpZMkZrWlM1b0lEMGdhRVpoWTNSdmNpQXFJRE0xTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnVG05eWJXRnNJR2gxYldGdUlIWmxjblJwWTJGc0lHVjVaU0J5YjNSaGRHbHZiaUJzYVcxcGRDQnBjeUJoWW05MWRDQXlOU0JrWldkeVpXVnpJSFZ3ZDJGeVpDQmhibVFnTXpBZ1pHVm5jbVZsY3lCa2IzZHVkMkZ5WkZ4eVhHNGdJQ0FnSUNCamIyNXpkQ0IyVEdsdGFYUWdQU0JWZEdsc2N5NW5aWFJTWVc1a2IyMUdiRzloZENndU1Ea3pMQ0F1TVRnMktUdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2RrWmhZM1J2Y2lBOUlGVjBhV3h6TG1kbGRGSmhibVJ2YlVac2IyRjBLQzEyVEdsdGFYUXNJSFpNYVcxcGRDazdYSEpjYmlBZ0lDQWdJRzFoWTNKdlUyRmpZMkZrWlM1MklEMGdka1poWTNSdmNpQStJREFnUHlCMlJtRmpkRzl5SUNvZ01qVWdPaUIyUm1GamRHOXlJQ29nTXpBN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnVUdsamF5QmhJRzVsZHlCbVlXTmxJSFJoY21kbGRGeHlYRzRnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUM4dklGTnZZMmxoYkNCMGNtbGhibWRzWlNBdElITmhZMk5oWkdVZ1ltVjBkMlZsYmlCbGVXVnpJR0Z1WkNCdGIzVjBhQ3dnZDJWcFoyaDBaV1FnZEc4Z2JHOXZheUJoZENCbGVXVnpJRzF2Y21VZ2IyWjBaVzVjY2x4dUlDQWdJQ0FnYzNkcGRHTm9JQ2hzWVhsbGNpNXpZV05qWVdSbFZHRnlaMlYwS1NCN1hISmNiaUFnSUNBZ0lDQWdZMkZ6WlNBeE9seHlYRzRnSUNBZ0lDQWdJQ0FnYldGamNtOVRZV05qWVdSbFYyRnBkRkpoYm1kbElEMGdUV0ZqY205VFlXTmpZV1JsVjJGcGRGSmhibWRsY3k1bGVXVlVZWEpuWlhRN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWVhsbGNpNXpZV05qWVdSbFZHRnlaMlYwSUQwZ1RXRjBhQzV5WVc1a2IyMG9LU0E4SURBdU56VWdQeUJHWVdObFZHRnlaMlYwVkhsd1pYTXVSWGxsVW1sbmFIUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ09pQkdZV05sVkdGeVoyVjBWSGx3WlhNdVRXOTFkR2c3WEhKY2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQmpZWE5sSURJNlhISmNiaUFnSUNBZ0lDQWdJQ0J0WVdOeWIxTmhZMk5oWkdWWFlXbDBVbUZ1WjJVZ1BTQk5ZV055YjFOaFkyTmhaR1ZYWVdsMFVtRnVaMlZ6TG1WNVpWUmhjbWRsZER0Y2NseHVJQ0FnSUNBZ0lDQWdJR3hoZVdWeUxuTmhZMk5oWkdWVVlYSm5aWFFnUFNCTllYUm9MbkpoYm1SdmJTZ3BJRHdnTUM0M05TQS9JRVpoWTJWVVlYSm5aWFJVZVhCbGN5NUZlV1ZNWldaMFhISmNiaUFnSUNBZ0lDQWdJQ0FnSURvZ1JtRmpaVlJoY21kbGRGUjVjR1Z6TGsxdmRYUm9PMXh5WEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ1kyRnpaU0F6T2x4eVhHNGdJQ0FnSUNBZ0lDQWdiV0ZqY205VFlXTmpZV1JsVjJGcGRGSmhibWRsSUQwZ1RXRmpjbTlUWVdOallXUmxWMkZwZEZKaGJtZGxjeTV0YjNWMGFGUmhjbWRsZER0Y2NseHVJQ0FnSUNBZ0lDQWdJR3hoZVdWeUxuTmhZMk5oWkdWVVlYSm5aWFFnUFNCTllYUm9MbkpoYm1SdmJTZ3BJRHdnTUM0MUlEOGdSbUZqWlZSaGNtZGxkRlI1Y0dWekxrVjVaVXhsWm5SY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCR1lXTmxWR0Z5WjJWMFZIbHdaWE11UlhsbFVtbG5hSFE3WEhKY2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQmpZWE5sSURBNlhISmNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNjbHh1SUNBZ0lDQWdJQ0FnSUcxaFkzSnZVMkZqWTJGa1pWZGhhWFJTWVc1blpTQTlJRTFoWTNKdlUyRmpZMkZrWlZkaGFYUlNZVzVuWlhNdVpYbGxWR0Z5WjJWME8xeHlYRzRnSUNBZ0lDQWdJQ0FnYkdGNVpYSXVjMkZqWTJGa1pWUmhjbWRsZENBOUlFMWhkR2d1Y21GdVpHOXRLQ2tnUENBd0xqVWdQeUJHWVdObFZHRnlaMlYwVkhsd1pYTXVSWGxsVEdWbWRGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBNklFWmhZMlZVWVhKblpYUlVlWEJsY3k1RmVXVlNhV2RvZER0Y2NseHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCamIyNXpkQ0I3SUdnc0lIWWdmU0E5SUhSb2FYTXVYMmRsZEVaaFkyVlVZWEpuWlhSQmJtZHNaWE1vYkdGNVpYSXVjMkZqWTJGa1pWUmhjbWRsZENrN1hISmNiaUFnSUNBZ0lHMWhZM0p2VTJGalkyRmtaUzVvSUQwZ2FEdGNjbHh1SUNBZ0lDQWdiV0ZqY205VFlXTmpZV1JsTG5ZZ1BTQjJPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVeGhlV1Z5VTNCbFpXUW9iR0Y1WlhKT1lXMWxMQ0J0WVdOeWIxTmhZMk5oWkdVdWFDd2diV0ZqY205VFlXTmpZV1JsTG5ZcE8xeHlYRzVjY2x4dUlDQWdJQzh2SUZKbGMzUmhjblFnZEdobElIUnBiV1Z5YzF4eVhHNGdJQ0FnZEdocGN5NWZhVzVwZEdsaGJHbDZaVTFwWTNKdlZHbHRaWElvYkdGNVpYSk9ZVzFsTENBdUxpNU5hV055YjFOaFkyTmhaR1ZYWVdsMFVtRnVaMlZ6TG5CdmMzUk5ZV055YnlrN1hISmNiaUFnSUNCMGFHbHpMbDlwYm1sMGFXRnNhWHBsVFdGamNtOVVhVzFsY2loc1lYbGxjazVoYldVc0lDNHVMbTFoWTNKdlUyRmpZMkZrWlZkaGFYUlNZVzVuWlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRkR0Z5ZENCaElHNWxkeUIzWVdsMElIUnBiV1Z5SUhSb1lYUWdkMmxzYkNCelpYUWdZU0J1WlhjZ2JXbGpjbThnYzJGalkyRmtaU0J0YjNabGJXVnVkQ0IzYUdWdUlHbDBYSEpjYmlBZ0lDb2djbVZ6YjJ4MlpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd4aGVXVnlUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUlIUm9ZWFFnYjNkdWN5QjBhR1VnYzJGalkyRmtaU0J0YjNScGIyNHVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHMXBibGRoYVhSVWFXMWxJQzBnVFdsdWFXMTFiU0J1ZFcxaVpYSWdiMllnYzJWamIyNWtjeUJpWldadmNtVWdZU0J1WlhjZ2MyRmpZMkZrWlZ4eVhHNGdJQ0FxSUhkcGJHd2dZbVVnZEhKcFoyZGxjbVZrTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J0WVhoWFlXbDBWR2x0WlNBdElFMWhlR2x0ZFcwZ2JuVnRZbVZ5SUc5bUlITmxZMjl1WkhNZ1ltVm1iM0psSUdFZ2JtVjNJSE5oWTJOaFpHVmNjbHh1SUNBZ0tpQjNhV3hzSUdKbElIUnlhV2RuWlhKbFpDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCZmFXNXBkR2xoYkdsNlpVMXBZM0p2VkdsdFpYSW9iR0Y1WlhKT1lXMWxMQ0J0YVc1WFlXbDBWR2x0WlN3Z2JXRjRWMkZwZEZScGJXVXBJSHRjY2x4dUlDQWdJR052Ym5OMElHeGhlV1Z5SUQwZ2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRPMXh5WEc0Z0lDQWdZMjl1YzNRZ2QyRnBkRlJwYldVZ1BTQlZkR2xzY3k1blpYUlNZVzVrYjIxR2JHOWhkQ2h0YVc1WFlXbDBWR2x0WlN3Z2JXRjRWMkZwZEZScGJXVXBPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaHNZWGxsY2k1dGFXTnliMU5oWTJOaFpHVlVhVzFsY2lrZ2UxeHlYRzRnSUNBZ0lDQnNZWGxsY2k1dGFXTnliMU5oWTJOaFpHVlVhVzFsY2k1allXNWpaV3dvS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUd4aGVXVnlMbTFwWTNKdlUyRmpZMkZrWlZScGJXVnlJRDBnVlhScGJITXVkMkZwZENoM1lXbDBWR2x0WlN3Z2UxeHlYRzRnSUNBZ0lDQnZia1pwYm1semFEb2dLQ2tnUFQ0Z2V5QjBhR2x6TGw5elpYUk5hV055YjFOaFkyTmhaR1VvYkdGNVpYSk9ZVzFsS1NCOVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRk4wWVhKMElHRWdibVYzSUhkaGFYUWdkR2x0WlhJZ2RHaGhkQ0IzYVd4c0lITmxkQ0JoSUc1bGR5QnRZV055YnlCellXTmpZV1JsSUcxdmRtVnRaVzUwSUhkb1pXNGdhWFJjY2x4dUlDQWdLaUJ5WlhOdmJIWmxjeTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2JHRjVaWEpPWVcxbElDMGdUbUZ0WlNCdlppQjBhR1VnYkdGNVpYSWdkR2hoZENCdmQyNXpJSFJvWlNCellXTmpZV1JsSUcxdmRHbHZiaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdiV2x1VjJGcGRGUnBiV1VnTFNCTmFXNXBiWFZ0SUc1MWJXSmxjaUJ2WmlCelpXTnZibVJ6SUdKbFptOXlaU0JoSUc1bGR5QnpZV05qWVdSbFhISmNiaUFnSUNvZ2QybHNiQ0JpWlNCMGNtbG5aMlZ5WldRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUcxaGVGZGhhWFJVYVcxbElDMGdUV0Y0YVcxMWJTQnVkVzFpWlhJZ2IyWWdjMlZqYjI1a2N5QmlaV1p2Y21VZ1lTQnVaWGNnYzJGalkyRmtaVnh5WEc0Z0lDQXFJSGRwYkd3Z1ltVWdkSEpwWjJkbGNtVmtMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXBibWwwYVdGc2FYcGxUV0ZqY205VWFXMWxjaWhzWVhsbGNrNWhiV1VzSUcxcGJsZGhhWFJVYVcxbExDQnRZWGhYWVdsMFZHbHRaU2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQjBhR2x6TGw5dFlXNWhaMlZrVEdGNVpYSnpXMnhoZVdWeVRtRnRaVjA3WEhKY2JpQWdJQ0JqYjI1emRDQjNZV2wwVkdsdFpTQTlJRlYwYVd4ekxtZGxkRkpoYm1SdmJVWnNiMkYwS0cxcGJsZGhhWFJVYVcxbExDQnRZWGhYWVdsMFZHbHRaU2s3WEhKY2JseHlYRzRnSUNBZ2FXWWdLR3hoZVdWeUxtMWhZM0p2VTJGalkyRmtaVlJwYldWeUtTQjdYSEpjYmlBZ0lDQWdJR3hoZVdWeUxtMWhZM0p2VTJGalkyRmtaVlJwYldWeUxtTmhibU5sYkNncE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2JHRjVaWEl1YldGamNtOVRZV05qWVdSbFZHbHRaWElnUFNCVmRHbHNjeTUzWVdsMEtIZGhhWFJVYVcxbExDQjdYSEpjYmlBZ0lDQWdJRzl1Um1sdWFYTm9PaUFvS1NBOVBpQjdJSFJvYVhNdVgzTmxkRTFoWTNKdlUyRmpZMkZrWlNoc1lYbGxjazVoYldVcElIMWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTJWMGN5QmhJRzVsZHlCMFlYSm5aWFFnZEc4Z2JHOXZheUJoZEM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmRzUxYkd4OUlIUmhjbWRsZENBdElGUm9aU0J1WlhjZ2RHRnlaMlYwSUhSdklHeHZiMnNnWVhRdVhISmNiaUFnSUNvdlhISmNiaUFnYzJWMFZHRnlaMlYwS0hSaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkdhVzVrY3lCaGJpQnZZbXBsWTNRZ1oybDJaVzRnYVhSeklHNWhiV1VnWVc1a0lITmxkSE1nYVhRZ1lYTWdkR2hsSUc1bGR5QjBZWEpuWlhRZ2RHOGdiRzl2YXlCaGRDNWNjbHh1SUNBZ0tpQlRhRzkxYkdRZ1ltVWdiM1psY214dllXUmxaQ0JtYjNJZ1pXRmphQ0J5Wlc1a1pYSnBibWNnWlc1bmFXNWxJR2x0Y0d4bGJXVnVkR0YwYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhSaGNtZGxkQ0F0SUU1aGJXVWdkRzhnYzJWaGNtTm9JR1p2Y2k1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6WlhSVVlYSm5aWFJDZVU1aGJXVW9ibUZ0WlNrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0Z1WVcxbEtTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzUmhjbWRsZENBOUlHNTFiR3c3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOXpZMlZ1WlNrZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lFTmhibTV2ZENCelpYUWdVRzlwYm5SUFprbHVkR1Z5WlhOMFJtVmhkSFZ5WlNCMFlYSm5aWFFnZFhOcGJtY2dibUZ0WlNBa2UyNWhiV1Y5SUc5dUlHaHZjM1FnSkh0MGFHbHpMbDlvYjNOMExtbGtmUzRnVTJObGJtVWdiWFZ6ZENCaVpTQmtaV1pwYm1Wa0xtQXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUm1sdVpITWdZVzRnYjJKcVpXTjBJR2RwZG1WdUlHbDBjeUJwWkNCaGJtUWdjMlYwY3lCcGRDQmhjeUIwYUdVZ2JtVjNJSFJoY21kbGRDQjBieUJzYjI5cklHRjBMbHh5WEc0Z0lDQXFJRk5vYjNWc1pDQmlaU0J2ZG1WeWJHOWhaR1ZrSUdadmNpQmxZV05vSUhKbGJtUmxjbWx1WnlCbGJtZHBibVVnYVcxd2JHVnRaVzUwWVhScGIyNHVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjN4dWRXMWlaWEo5SUhSaGNtZGxkQ0F0SUVsa0lIUnZJSE5sWVhKamFDQm1iM0l1WEhKY2JpQWdJQ292WEhKY2JpQWdjMlYwVkdGeVoyVjBRbmxKWkNocFpDa2dlMXh5WEc0Z0lDQWdhV1lnS0NGcFpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOTBZWEpuWlhRZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doZEdocGN5NWZjMk5sYm1VcElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQkRZVzV1YjNRZ2MyVjBJRkJ2YVc1MFQyWkpiblJsY21WemRFWmxZWFIxY21VZ2RHRnlaMlYwSUhWemFXNW5JR2xrSUNSN2FXUjlJRzl1SUdodmMzUWdKSHQwYUdsekxsOW9iM04wTG1sa2ZTNGdVMk5sYm1VZ2JYVnpkQ0JpWlNCa1pXWnBibVZrTG1BcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVM1JoY25RZ2EyVmxjR2x1WnlCMGNtRmpheUJ2WmlCaGJpQmhibWx0WVhScGIyNGdiR0Y1WlhJZ2RHaGhkQ0J2ZDI1eklHRWdZbXhsYm1ReVpDQmhibWx0WVhScGIyNGdkMmwwYUZ4eVhHNGdJQ0FxSUdKc1pXNWtWMlZwWjJoMGN5QmpiM0p5WlhOd2IyNWthVzVuSUhSdklHaHZjbWw2YjI1MFlXd2dZVzVrSUhabGNuUnBZMkZzSUd4dmIyc2dZVzVuYkdWekxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUd4aGVXVnlUbUZ0WlNBdElFNWhiV1VnYjJZZ2RHaGxJR3hoZVdWeUlIUnZJR3RsWlhBZ2RISmhZMnNnYjJZdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1E5ZlNCdmNIUnBiMjV6SUMwZ1QzQjBhVzl1Y3lCbWIzSWdkR2hsSUd4aGVXVnlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmJiM0IwYVc5dWN5NWhibWx0WVhScGIyNGdQU0FuYkc5dmF5ZGRJQzBnVG1GdFpTQnZaaUIwYUdVZ1lXNXBiV0YwYVc5dUlHOXVJSFJvWlZ4eVhHNGdJQ0FxSUd4aGVXVnlJSGRvYjNObElHSnNaVzVrVjJWcFoyaDBjeUIzYVd4c0lHSmxJR1J5YVhabGJpQmlZWE5sWkNCdmJpQjBhR1VnWVc1bmJHVWdZbVYwZDJWbGJpQjBhR1VnYkc5dmExUnlZV05yWlhKY2NseHVJQ0FnS2lCaGJtUWdkR2hsSUd4dmIydFVZWEpuWlhRdUlGUm9hWE1nWVc1cGJXRjBhVzl1SUcxMWMzUWdZbVVnYjJZZ2RIbHdaU0JpYkdWdVpESmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJiM0IwYVc5dWN5NXRZWGhUY0dWbFpDQTlJREkxWFNBdElGUm9aU0J0WVhocGJYVnRJSE53WldWa0lHRjBJSGRvYVdOb0lIUm9aU0JpYkdWdVpESmtYSEpjYmlBZ0lDb2dZbXhsYm1SWFpXbG5hSFJ6SUdOaGJpQmlaU0J0WVc1cGNIVnNZWFJsWkM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzI5d2RHbHZibk11Wm05eWQyRnlaRUY0YVhNZ1BTQW5VRzl6YVhScGRtVmFKMTBnTFNCQmVHbHpJSEJ2YVc1MGFXNW5JR1p5YjIwZ2RHaGxYSEpjYmlBZ0lDb2dabkp2Ym5RZ2IyWWdkR2hsSUd4dmIydFNaV1psY21WdVkyVWdiMkpxWldOMExpQldZV3hwWkNCdmNIUnBiMjV6SUdGeVpTQW5VRzl6YVhScGRtVllKeXdnSjA1bFoyRjBhWFpsV0Njc1hISmNiaUFnSUNvZ0oxQnZjMmwwYVhabFdTY3NJQ2RPWldkaGRHbDJaVmtuTENBblVHOXphWFJwZG1WYUp5d2dKMDVsWjJGMGFYWmxXaWN1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUTlmU0J2Y0hScGIyNXpMbXh2YjJ0U1pXWmxjbVZ1WTJVZ0xTQXpSQ0IwY21GdWMyWnZjbTFoZEdsdmJpQnViMlJsSUhSb1lYUWdkR2hsSUd4dmIydFVjbUZqYTJWeVhISmNiaUFnSUNvZ2NtOTBZWFJwYjI0Z2JHbHRhWFJ6SUhOb2IzVnNaQ0JpWlNCallXeGpkV3hoZEdWa0lISmxiR0YwYVhabElIUnZMaUJFWldaaGRXeDBjeUIwYnlCMGFHVWdhRzl6ZENCdmQyNWxjaTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjl3ZEdsdmJuTXVhR0Z6VTJGalkyRmtaU0E5SUdaaGJITmxYU0F0SUZkb1pYUm9aWElnYjNJZ2JtOTBJSFJ2SUdsdVkyeDFaR1ZjY2x4dUlDQWdLaUJ6WVdOallXUnBZeUJ0YjNScGIyNGdiMjUwYnlCMGFHVWdZbXhsYm1SWFpXbG5hSFFnWVc1cGJXRjBhVzl1TGlCVWFHbHpJSE5vYjNWc1pDQnZibXg1SUdKbElITmxkQ0IwYjF4eVhHNGdJQ0FxSUhSeWRXVWdabTl5SUdKc1pXNWtNbVFnWVc1cGJXRjBhVzl1Y3lCeVpYQnlaWE5sYm5ScGJtY2daWGxsSUdGdWFXMWhkR2x2Ymk1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjajE5SUZ0dmNIUnBiMjV6TG1Kc1pXNWtWR2x0WlQxYlVHOXBiblJQWmtsdWRHVnlaWE4wUm1WaGRIVnlaUzVFUlVaQlZVeFVYMHhCV1VWU1gwOVFWRWxQVGxNdVlteGxibVJVYVcxbFhYdEFiR2x1YXlCUWIybHVkRTltU1c1MFpYSmxjM1JHWldGMGRYSmxJMFJGUmtGVlRGUmZURUZaUlZKZlQxQlVTVTlPVXlOaWJHVnVaRlJwYldWOVhTQXRYSEpjYmlBZ0lDb2dSR1ZtWVhWc2RDQmhiVzkxYm5RZ2IyWWdkR2x0WlNCMGJ5QjFjMlVnZDJobGJpQnRZVzVwY0hWc1lYUnBibWNnYkdGNVpYSWdkMlZwWjJoMExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI0OWZTQnZjSFJwYjI1ekxtVmhjMmx1WjBadUlDMGdSR1ZtWVhWc2RDQmxZWE5wYm1jZ1puVnVZM1JwYjI0Z2RHOGdkWE5sSUhkb1pXNWNjbHh1SUNBZ0tpQnRZVzVwY0hWc1lYUnBibWNnYkdGNVpYSWdkMlZwWjJoMExseHlYRzRnSUNBcUwxeHlYRzRnSUhKbFoybHpkR1Z5VEc5dmEweGhlV1Z5S0Z4eVhHNGdJQ0FnYkdGNVpYSk9ZVzFsTEZ4eVhHNGdJQ0FnZTF4eVhHNGdJQ0FnSUNCaGJtbHRZWFJwYjI0Z1BTQW5iRzl2YXljc1hISmNiaUFnSUNBZ0lHMWhlRk53WldWa0lEMGdNalVzWEhKY2JpQWdJQ0FnSUhKbFptVnlaVzVqWlN4Y2NseHVJQ0FnSUNBZ1ptOXlkMkZ5WkVGNGFYTWdQU0FuVUc5emFYUnBkbVZhSnl4Y2NseHVJQ0FnSUNBZ2FHRnpVMkZqWTJGa1pTQTlJR1poYkhObExGeHlYRzRnSUNBZ0lDQmliR1Z1WkZScGJXVWdQU0JRYjJsdWRFOW1TVzUwWlhKbGMzUkdaV0YwZFhKbExrUkZSa0ZWVEZSZlRFRlpSVkpmVDFCVVNVOU9VeTVpYkdWdVpGUnBiV1VzWEhKY2JpQWdJQ0FnSUdWaGMybHVaMFp1WEhKY2JpQWdJQ0I5SUQwZ2UzMWNjbHh1SUNBcElIdGNjbHh1SUNBZ0lDOHZJRlpoYkdsa1lYUmxJSEpsWm1WeVpXNWpaU0J2WW1wbFkzUmNjbHh1SUNBZ0lISmxabVZ5Wlc1alpTQTlJSEpsWm1WeVpXNWpaU0I4ZkNCMGFHbHpMbDlvYjNOMExtOTNibVZ5TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVmZG1Gc2FXUmhkR1ZVY21GdWMyWnZjbTFQWW1wbFkzUW9jbVZtWlhKbGJtTmxLU2tnZTF4eVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOaGJtNXZkQ0JwYm1sMGFXRnNhWHBsSUhKbFoybHpkR1Z5SUd4dmIyc2diR0Y1WlhJZ0pIdHNZWGxsY2s1aGJXVjlJR1p2Y2lCUWIybHVkRTltU1c1MFpYSmxjM1JHWldGMGRYSmxJRzl1SUdodmMzUWdKSHQwYUdsekxsOW9iM04wTG1sa2ZTNGdVbVZtWlhKbGJtTmxJRzExYzNRZ1ltVWdaR1ZtYVc1bFpDQmhjeUJoSUhaaGJHbGtJSFJ5WVc1elptOXliV0YwYVc5dUlHOWlhbVZqZEM1Z0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCR2FXNWtJSFpsWTNSdmNpQmhjM052WTJsaGRHVmtJSGRwZEdnZ1lYaHBjeUJ6ZEhKcGJtZGNjbHh1SUNBZ0lHWnZjbmRoY21SQmVHbHpJRDBnUVhocGMwMWhjRnRtYjNKM1lYSmtRWGhwYzEwZ0lUMDlJSFZ1WkdWbWFXNWxaRnh5WEc0Z0lDQWdJQ0EvSUVGNGFYTk5ZWEJiWm05eWQyRnlaRUY0YVhOZFhISmNiaUFnSUNBZ0lEb2dRWGhwYzAxaGNDNVFiM05wZEdsMlpWbzdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1UzUnZjbVVnZEhKaFkydHBibWNnWTI5dVptbG5kWEpoZEdsdmJseHlYRzRnSUNBZ1kyOXVjM1FnZEhKaFkydHBibWREYjI1bWFXY2dQU0IwYUdsekxsOWhaR1JVY21GamEybHVaME52Ym1acFp5aDdYSEpjYmlBZ0lDQWdJSEpsWm1WeVpXNWpaU3hjY2x4dUlDQWdJQ0FnWm05eWQyRnlaRUY0YVhOY2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQzh2SUZKbFoybHpkR1Z5SUhSb1pTQnNZWGxsY2lCaGJtUWdZVzVwYldGMGFXOXVYSEpjYmlBZ0lDQjBhR2x6TG5KbFoybHpkR1Z5VEdGNVpYSW9iR0Y1WlhKT1lXMWxMQ0I3WEhKY2JpQWdJQ0FnSUhSeVlXTnJhVzVuUTI5dVptbG5MRnh5WEc0Z0lDQWdJQ0J0WVhoVGNHVmxaQ3hjY2x4dUlDQWdJQ0FnYldGNFNGTndaV1ZrT2lCMWJtUmxabWx1WldRc1hISmNiaUFnSUNBZ0lHMWhlRlpUY0dWbFpEb2dkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0JvUkhWeVlYUnBiMjQ2SUhWdVpHVm1hVzVsWkN4Y2NseHVJQ0FnSUNBZ2RrUjFjbUYwYVc5dU9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJR2hXWld4dlkybDBlVG9nV3pBc0lEQmRMRnh5WEc0Z0lDQWdJQ0IyVm1Wc2IyTnBkSGs2SUZzd0xDQXdYU3hjY2x4dUlDQWdJQ0FnYUdGelUyRmpZMkZrWlN4Y2NseHVJQ0FnSUNBZ1lteGxibVJVYVcxbExGeHlYRzRnSUNBZ0lDQmxZWE5wYm1kR2JpeGNjbHh1SUNBZ0lDQWdiV2xqY205VFlXTmpZV1JsT2lCN0lHZzZJREFzSUhZNklEQWdmU3hjY2x4dUlDQWdJQ0FnYldGamNtOVRZV05qWVdSbE9pQjdJR2c2SURBc0lIWTZJREFnZlN4Y2NseHVJQ0FnSUNBZ2MyRmpZMkZrWlZSaGNtZGxkRG9nUm1GalpWUmhjbWRsZEZSNWNHVnpMa1Y1WlVObGJuUmxjaXhjY2x4dUlDQWdJQ0FnWVc1cGJXRjBhVzl1Y3pvZ2V5QmJZVzVwYldGMGFXOXVYVG9nZTMwZ2ZTeGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lDQWdkR2hwY3k1ZmJHOXZhMHhoZVdWeWMxdHNZWGxsY2s1aGJXVmRJRDBnWVc1cGJXRjBhVzl1TzF4eVhHNWNjbHh1SUNBZ0lDOHZJRlpoYkdsa1lYUmxJSFJvWlNCc2IyOXJJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdkR2hwY3k1ZmNtVm5hWE4wWlhKTWIyOXJRVzVwYldGMGFXOXVLR3hoZVdWeVRtRnRaU3dnWVc1cGJXRjBhVzl1S1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJKYm1sMGFXRnNhWHBsSUhOaFkyTmhaR1VnZEdsdFpYSnpYSEpjYmlBZ0lDQnBaaUFvYUdGelUyRmpZMkZrWlNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCdFlXTnliMU5oWTJOaFpHVlhZV2wwVW1GdVoyVWdQU0IwYUdsekxsOTBZWEpuWlhSY2NseHVJQ0FnSUNBZ0lDQS9JRTFoWTNKdlUyRmpZMkZrWlZkaGFYUlNZVzVuWlhNdVpYbGxWR0Z5WjJWMFhISmNiaUFnSUNBZ0lDQWdPaUJOWVdOeWIxTmhZMk5oWkdWWFlXbDBVbUZ1WjJWekxtUmxabUYxYkhRN1hISmNiaUFnSUNBZ0lIUm9hWE11WDJsdWFYUnBZV3hwZW1WTmFXTnliMVJwYldWeUtHeGhlV1Z5VG1GdFpTd2dMaTR1VFdsamNtOVRZV05qWVdSbFYyRnBkRkpoYm1kbGN5NWtaV1poZFd4MEtUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmFXNXBkR2xoYkdsNlpVMWhZM0p2VkdsdFpYSW9iR0Y1WlhKT1lXMWxMQ0F1TGk1dFlXTnliMU5oWTJOaFpHVlhZV2wwVW1GdVoyVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTNSaGNuUWdhMlZsY0dsdVp5QjBjbUZqYXlCdlppQmhiaUJoYm1sdFlYUnBiMjRnYkdGNVpYSWdkR2hoZENCdmQyNXpJR0VnWW14cGJtc2dZVzVwYldGMGFXOXVMaUJDYkdsdWExeHlYRzRnSUNBcUlHRnVhVzFoZEdsdmJuTWdZMkZ1SUdKbElHOW1JR0Z1ZVNCMGVYQmxMQ0JpZFhRZ2FXWWdhWFFnYVhNZ2IyWWdkSGx3WlNCeVlXNWtiMjFCYm1sdFlYUnBiMjRnZEdobGJpQmhYSEpjYmlBZ0lDb2dhWFFnZDJsc2JDQmlaU0J5WVc1a2IyMXBlbVZrSUdWaFkyZ2dkR2x0WlNCaElHSnNhVzVySUdseklHTmhiR3hsWkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JzWVhsbGNrNWhiV1VnTFNCT1lXMWxJRzltSUhSb1pTQnNZWGxsY2lCMGJ5QnJaV1Z3SUhSeVlXTnJJRzltTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBQWDBnYjNCMGFXOXVjeUF0SUU5d2RHbHZibk1nWm05eUlIUm9aU0JzWVhsbGNpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyOXdkR2x2Ym5NdVlXNXBiV0YwYVc5dUlEMGdKMkpzYVc1ckoxMGdMU0JPWVcxbElHOW1JSFJvWlNCaWJHbHVheUJoYm1sdFlYUnBiMjVjY2x4dUlDQWdLaUJ2YmlCMGFHVWdiR0Y1WlhJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0dmNIUnBiMjV6TG1Kc1pXNWtWR2x0WlQxYlVHOXBiblJQWmtsdWRHVnlaWE4wUm1WaGRIVnlaUzVFUlVaQlZVeFVYMHhCV1VWU1gwOVFWRWxQVGxNdVlteGxibVJVYVcxbFhYdEFiR2x1YXlCUWIybHVkRTltU1c1MFpYSmxjM1JHWldGMGRYSmxJMFJGUmtGVlRGUmZURUZaUlZKZlQxQlVTVTlPVXlOaWJHVnVaRlJwYldWOVhTQXRYSEpjYmlBZ0lDb2dSR1ZtWVhWc2RDQmhiVzkxYm5RZ2IyWWdkR2x0WlNCMGJ5QjFjMlVnZDJobGJpQnRZVzVwY0hWc1lYUnBibWNnZEdobElHeGhlV1Z5SjNNZ2QyVnBaMmgwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjQ5ZlNCdmNIUnBiMjV6TG1WaGMybHVaMFp1SUMwZ1JHVm1ZWFZzZENCbFlYTnBibWNnWm5WdVkzUnBiMjRnZEc4Z2RYTmxJSGRvWlc1Y2NseHVJQ0FnS2lCdFlXNXBjSFZzWVhScGJtY2dkR2hsSUd4aGVXVnlKM01nZDJWcFoyaDBMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lISmxaMmx6ZEdWeVFteHBibXRNWVhsbGNpaGNjbHh1SUNBZ0lHeGhlV1Z5VG1GdFpTeGNjbHh1SUNBZ0lIdGNjbHh1SUNBZ0lDQWdZVzVwYldGMGFXOXVJRDBnSjJKc2FXNXJKeXhjY2x4dUlDQWdJQ0FnWW14bGJtUlVhVzFsSUQwZ1VHOXBiblJQWmtsdWRHVnlaWE4wUm1WaGRIVnlaUzVFUlVaQlZVeFVYMHhCV1VWU1gwOVFWRWxQVGxNdVlteGxibVJVYVcxbExGeHlYRzRnSUNBZ0lDQmxZWE5wYm1kR2JseHlYRzRnSUNBZ2ZTQTlJSHQ5WEhKY2JpQWdLU0I3WEhKY2JpQWdJQ0F2THlCU1pXZHBjM1JsY2lCMGFHVWdiR0Y1WlhJZ1lXNWtJR0Z1YVcxaGRHbHZibHh5WEc0Z0lDQWdkR2hwY3k1eVpXZHBjM1JsY2t4aGVXVnlLR3hoZVdWeVRtRnRaU3dnZTF4eVhHNGdJQ0FnSUNCaWJHVnVaRlJwYldVc1hISmNiaUFnSUNBZ0lHVmhjMmx1WjBadUxGeHlYRzRnSUNBZ0lDQmhibWx0WVhScGIyNXpPaUI3SUZ0aGJtbHRZWFJwYjI1ZE9pQjdmU0I5TEZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnSUNCMGFHbHpMbDlpYkdsdWEweGhlV1Z5YzF0c1lYbGxjazVoYldWZElEMGdZVzVwYldGMGFXOXVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdkWEJrWVhSbEtHUmxiSFJoVkdsdFpTa2dlMXh5WEc0Z0lDQWdjM1Z3WlhJdWRYQmtZWFJsS0dSbGJIUmhWR2x0WlNrN1hISmNibHh5WEc0Z0lDQWdMeThnVlhCa1lYUmxJSFJvWlNCc2IyOXJJR0Z1WjJ4bGMxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzUmhjbWRsZENrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5elpYUk1iMjlyUVc1bmJHVnpLQ2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWE5sZEV4dmIydEJibWRzWlhNb0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQmtaV3gwWVZObFkyOXVaSE1nUFNCTllYUm9MbTFwYmloa1pXeDBZVlJwYldVc0lFMWhlRVJsYkhSaEtTQXZJREV3TURBN1hISmNiaUFnSUNCc1pYUWdkSEpwWjJkbGNrSnNhVzVySUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ0x5OGdVMlYwSUd4dmIyc2dZbXhsYm1RZ2RtRnNkV1Z6WEhKY2JpQWdJQ0JQWW1wbFkzUXVaVzUwY21sbGN5aDBhR2x6TGw5c2IyOXJUR0Y1WlhKektTNW1iM0pGWVdOb0tDaGJiR0Y1WlhKT1lXMWxMQ0JoYm1sdFRtRnRaVjBwSUQwK0lIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ2IzQjBhVzl1Y3lBOUlIUm9hWE11WDIxaGJtRm5aV1JNWVhsbGNuTmJiR0Y1WlhKT1lXMWxYVHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZJRWx1WTNKbGJXVnVkQ0IwYUdVZ2MyRmpZMkZrWlNCMGFXMWxjbk5jY2x4dUlDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWFYTkJZM1JwZG1VZ0ppWWdiM0IwYVc5dWN5NW9ZWE5UWVdOallXUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1dGFXTnliMU5oWTJOaFpHVlVhVzFsY2k1bGVHVmpkWFJsS0dSbGJIUmhWR2x0WlNrN1hISmNiaUFnSUNBZ0lDQWdiM0IwYVc5dWN5NXRZV055YjFOaFkyTmhaR1ZVYVcxbGNpNWxlR1ZqZFhSbEtHUmxiSFJoVkdsdFpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDOHZJRk5sZENCMGFHVWdZbXhsYm1RZ2RtRnNkV1Z6WEhKY2JpQWdJQ0FnSUdsbUlDaHZjSFJwYjI1ekxtRnVhVzFoZEdsdmJuTmJZVzVwYlU1aGJXVmRMbWx6UVdOMGFYWmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTNWeWNtVnVkRWdnUFNCMGFHbHpMbDlvYjNOMExrRnVhVzFoZEdsdmJrWmxZWFIxY21VdVoyVjBRVzVwYldGMGFXOXVRbXhsYm1SWFpXbG5hSFFvWEhKY2JpQWdJQ0FnSUNBZ0lDQnNZWGxsY2s1aGJXVXNJR0Z1YVcxT1lXMWxMQ0FuV0NkY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR04xY25KbGJuUldJRDBnZEdocGN5NWZhRzl6ZEM1QmJtbHRZWFJwYjI1R1pXRjBkWEpsTG1kbGRFRnVhVzFoZEdsdmJrSnNaVzVrVjJWcFoyaDBLRnh5WEc0Z0lDQWdJQ0FnSUNBZ2JHRjVaWEpPWVcxbExDQmhibWx0VG1GdFpTd2dKMWtuWEhKY2JpQWdJQ0FnSUNBZ0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSFJoY21kbGRFZ2dQU0J2Y0hScGIyNXpMblJ5WVdOcmFXNW5RMjl1Wm1sbkxtRnVaMnhsY3k1b08xeHlYRzRnSUNBZ0lDQWdJR3hsZENCMFlYSm5aWFJXSUQwZ2IzQjBhVzl1Y3k1MGNtRmphMmx1WjBOdmJtWnBaeTVoYm1kc1pYTXVkanRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUTJobFkyc2dhV1lnZEdobElHeHZiMnNnWVc1bmJHVWdhR0Z6SUdOb1lXNW5aV1FnWlc1dmRXZG9JSFJ2SUhSeWFXZG5aWElnWVNCaWJHbHVhMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5cGMxUmhjbWRsZEUxdmRtbHVaeUFtSmlBaGRISnBaMmRsY2tKc2FXNXJLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtVjJWR0Z5WjJWMFNDQTlJRzl3ZEdsdmJuTXVkSEpoWTJ0cGJtZERiMjVtYVdjdWNISmxka0Z1WjJ4bGN5NW9PMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRsUmhjbWRsZEZZZ1BTQnZjSFJwYjI1ekxuUnlZV05yYVc1blEyOXVabWxuTG5CeVpYWkJibWRzWlhNdWRqdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR05vWVc1blpVRnRiM1Z1ZENBOUlFMWhkR2hWZEdsc2N5NTBiMFJsWjNKbFpYTW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWhkR2hWZEdsc2N5NW5aWFJCYm1kc1pVSmxkSGRsWlc0b1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1czQnlaWFpVWVhKblpYUklMQ0J3Y21WMlZHRnlaMlYwVmwwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1czUmhjbWRsZEVnc0lIUmhjbWRsZEZaZFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2NseHVJQ0FnSUNBZ0lDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTm9ZVzVuWlVGdGIzVnVkQ0ErUFNCQ2JHbHVhMVJvY21WemFHOXNaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21sbloyVnlRbXhwYm1zZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeTUwY21GamEybHVaME52Ym1acFp5NXdjbVYyUVc1bmJHVnpMbWdnUFNCMFlYSm5aWFJJTzF4eVhHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWRISmhZMnRwYm1kRGIyNW1hV2N1Y0hKbGRrRnVaMnhsY3k1MklEMGdkR0Z5WjJWMFZqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdRV1JrSUdsdUlIUm9aU0J6WVdOallXUmxJRzF2ZG1WdFpXNTBYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdkR2x2Ym5NdWFHRnpVMkZqWTJGa1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1RXRjBhRlYwYVd4ekxtUmhiWEJXWVd4MVpTaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ01DeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1dFlXTnliMU5oWTJOaFpHVXVhQ0FySUc5d2RHbHZibk11YldGamNtOVRZV05qWVdSbExtZ3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWFGWmxiRzlqYVhSNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG1oRWRYSmhkR2x2Yml4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTV0WVhoSVUzQmxaV1JjY2x4dUlDQWdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJJSUNzOUlHOXdkR2x2Ym5NdWFGWmxiRzlqYVhSNVd6QmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1RXRjBhRlYwYVd4ekxtUmhiWEJXWVd4MVpTaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ01DeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1dFlXTnliMU5oWTJOaFpHVXVkaUFySUc5d2RHbHZibk11YldGamNtOVRZV05qWVdSbExuWXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWRsWmxiRzlqYVhSNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG5aRWRYSmhkR2x2Yml4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTV0WVhoV1UzQmxaV1JjY2x4dUlDQWdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJXSUNzOUlHOXdkR2x2Ym5NdWRsWmxiRzlqYVhSNVd6QmRPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1EyeGhiWEFnZEc4Z2JXRjRJSE53WldWa1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ptRmpkRzl5SUQwZ1RXRjBhRlYwYVd4ekxtTnNZVzF3S0dSbGJIUmhVMlZqYjI1a2N5QXFJRzl3ZEdsdmJuTXViV0Y0VTNCbFpXUXNJREFzSURFcE8xeHlYRzRnSUNBZ0lDQWdJSFJoY21kbGRFZ2dQU0JOWVhSb1ZYUnBiSE11YkdWeWNDaGpkWEp5Wlc1MFNDd2dkR0Z5WjJWMFNDd2dabUZqZEc5eUtUdGNjbHh1SUNBZ0lDQWdJQ0IwWVhKblpYUldJRDBnVFdGMGFGVjBhV3h6TG14bGNuQW9ZM1Z5Y21WdWRGWXNJSFJoY21kbGRGWXNJR1poWTNSdmNpazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRlZ3WkdGMFpTQjBhR1VnWW14bGJtUWdkbUZzZFdWelhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHOXpkQzVCYm1sdFlYUnBiMjVHWldGMGRYSmxMbk5sZEVGdWFXMWhkR2x2YmtKc1pXNWtWMlZwWjJoMEtGeHlYRzRnSUNBZ0lDQWdJQ0FnYkdGNVpYSk9ZVzFsTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdZVzVwYlU1aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBbldDY3NYSEpjYmlBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJJWEhKY2JpQWdJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOW9iM04wTGtGdWFXMWhkR2x2YmtabFlYUjFjbVV1YzJWMFFXNXBiV0YwYVc5dVFteGxibVJYWldsbmFIUW9YSEpjYmlBZ0lDQWdJQ0FnSUNCc1lYbGxjazVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0JoYm1sdFRtRnRaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDZFpKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZaY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvSVhSeWFXZG5aWEpDYkdsdWF5QjhmQ0FoZEdocGN5NWZhWE5VWVhKblpYUk5iM1pwYm1jcElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUVWNFpXTjFkR1VnWW14cGJtdGNjbHh1SUNBZ0lFOWlhbVZqZEM1bGJuUnlhV1Z6S0hSb2FYTXVYMkpzYVc1clRHRjVaWEp6S1M1bWIzSkZZV05vS0NoYmJHRjVaWEpPWVcxbExDQmhibWx0VG1GdFpWMHBJRDArSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnWVc1cGJXRjBhVzl1SUQwZ2RHaHBjeTVmYldGdVlXZGxaRXhoZVdWeWMxdHNZWGxsY2s1aGJXVmRMbUZ1YVcxaGRHbHZibk5iWVc1cGJVNWhiV1ZkTzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0dGdWFXMWhkR2x2Ymk1cGMwRmpkR2wyWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyaHZjM1F1UVc1cGJXRjBhVzl1Um1WaGRIVnlaUzV3YkdGNVFXNXBiV0YwYVc5dUtHeGhlV1Z5VG1GdFpTd2dZVzVwYlU1aGJXVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5S1Z4eVhHNGdJSDFjY2x4dVhISmNiaUFnYVc1emRHRnNiRUZ3YVNncElIdGNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nUUdsdWJtVnlYSEpjYmlBZ0lDQWdLaUJBYm1GdFpYTndZV05sSUZCdmFXNTBUMlpKYm5SbGNtVnpkRVpsWVhSMWNtVmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZMjl1YzNRZ1lYQnBJRDBnYzNWd1pYSXVhVzV6ZEdGc2JFRndhU2dwTzF4eVhHNWNjbHh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0dGd2FTd2dlMXh5WEc0Z0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRkJ2YVc1MFQyWkpiblJsY21WemRFWmxZWFIxY21WY2NseHVJQ0FnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdJQ0FxSUVCelpXVWdZMjl5WlM5UWIybHVkRTltU1c1MFpYSmxjM1JHWldGMGRYSmxJM1JoY21kbGRGeHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnZEdGeVoyVjBPaUI3WEhKY2JpQWdJQ0FnSUNBZ1oyVjBPaUFvS1NBOVBpQjBhR2x6TG5SaGNtZGxkQ3hjY2x4dUlDQWdJQ0FnSUNCelpYUTZJSFJoY21kbGRDQTlQaUI3SUhSb2FYTXVkR0Z5WjJWMElEMGdkR0Z5WjJWMElIMHNYSEpjYmlBZ0lDQWdJSDBzWEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQlBZbXBsWTNRdVlYTnphV2R1S0dGd2FTd2dlMXh5WEc0Z0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRkJ2YVc1MFQyWkpiblJsY21WemRFWmxZWFIxY21WY2NseHVJQ0FnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpYUm9iMlJjY2x4dUlDQWdJQ0FnSUNvZ1FITmxaU0JqYjNKbEwxQnZhVzUwVDJaSmJuUmxjbVZ6ZEVabFlYUjFjbVVqY21WbmFYTjBaWEpNYjI5clRHRjVaWEpjY2x4dUlDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lISmxaMmx6ZEdWeVRHOXZhMHhoZVdWeU9pQjBhR2x6TG5KbFoybHpkR1Z5VEc5dmEweGhlV1Z5TG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1VHOXBiblJQWmtsdWRHVnlaWE4wUm1WaGRIVnlaVnh5WEc0Z0lDQWdJQ0FnS2lCQWFXNXpkR0Z1WTJWY2NseHVJQ0FnSUNBZ0lDb2dRRzFsZEdodlpGeHlYRzRnSUNBZ0lDQWdLaUJBYzJWbElHTnZjbVV2VUc5cGJuUlBaa2x1ZEdWeVpYTjBSbVZoZEhWeVpTTnlaV2RwYzNSbGNrSnNhVzVyVEdGNVpYSmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUhKbFoybHpkR1Z5UW14cGJtdE1ZWGxsY2pvZ2RHaHBjeTV5WldkcGMzUmxja0pzYVc1clRHRjVaWEl1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpXMWlaWEp2WmlCUWIybHVkRTltU1c1MFpYSmxjM1JHWldGMGRYSmxYSEpjYmlBZ0lDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1kyOXlaUzlRYjJsdWRFOW1TVzUwWlhKbGMzUkdaV0YwZFhKbEkzTmxkRlJoY21kbGRGeHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnYzJWMFZHRnlaMlYwT2lCMGFHbHpMbk5sZEZSaGNtZGxkQzVpYVc1a0tIUm9hWE1wTEZ4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUZCdmFXNTBUMlpKYm5SbGNtVnpkRVpsWVhSMWNtVmNjbHh1SUNBZ0lDQWdJQ29nUUdsdWMzUmhibU5sWEhKY2JpQWdJQ0FnSUNBcUlFQnRaWFJvYjJSY2NseHVJQ0FnSUNBZ0lDb2dRSE5sWlNCamIzSmxMMUJ2YVc1MFQyWkpiblJsY21WemRFWmxZWFIxY21VamMyVjBWR0Z5WjJWMFFubE9ZVzFsWEhKY2JpQWdJQ0FnSUNBcUwxeHlYRzRnSUNBZ0lDQnpaWFJVWVhKblpYUkNlVTVoYldVNklIUm9hWE11YzJWMFZHRnlaMlYwUW5sT1lXMWxMbUpwYm1Rb2RHaHBjeWtzWEhKY2JpQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdLaUJBYldWdFltVnliMllnVUc5cGJuUlBaa2x1ZEdWeVpYTjBSbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUdOdmNtVXZVRzlwYm5SUFprbHVkR1Z5WlhOMFJtVmhkSFZ5WlNOelpYUlVZWEpuWlhSQ2VVbGtYSEpjYmlBZ0lDQWdJQ0FxTDF4eVhHNGdJQ0FnSUNCelpYUlVZWEpuWlhSQ2VVbGtPaUIwYUdsekxuTmxkRlJoY21kbGRFSjVTV1F1WW1sdVpDaDBhR2x6S1N4Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQmhjR2s3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JRYjJsdWRFOW1TVzUwWlhKbGMzUkdaV0YwZFhKbE8xeHlYRzVsZUhCdmNuUWdleUJCZUdselRXRndJSDA3SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRUZ0WVhwdmJpNWpiMjBzSUVsdVl5NGdiM0lnYVhSeklHRm1abWxzYVdGMFpYTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEhKY2JpOHZJRk5RUkZndFRHbGpaVzV6WlMxSlpHVnVkR2xtYVdWeU9pQk5TVlF0TUZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVCdGIyUjFiR1VnWTI5eVpTOWhibWx0Y0dGamExeHlYRzRnS2k5Y2NseHVYSEpjYm1sdGNHOXlkQ0I3WEhKY2JpQWdUR2x1WldGeUxGeHlYRzRnSUZGMVlXUnlZWFJwWXl4Y2NseHVJQ0JEZFdKcFl5eGNjbHh1SUNCUmRXRnlkR2xqTEZ4eVhHNGdJRkYxYVc1MGFXTXNYSEpjYmlBZ1UybHVkWE52YVdSaGJDeGNjbHh1SUNCRmVIQnZibVZ1ZEdsaGJDeGNjbHh1SUNCRGFYSmpkV3hoY2l4Y2NseHVJQ0JGYkdGemRHbGpMRnh5WEc0Z0lFSmhZMnNzWEhKY2JpQWdRbTkxYm1ObExGeHlYRzU5SUdaeWIyMGdKeTR2UldGemFXNW5KenRjY2x4dWFXMXdiM0owSUVGdWFXMWhkR2x2YmtabFlYUjFjbVVzSUh0QmJtbHRZWFJwYjI1VWVYQmxjMzBnWm5KdmJTQW5MaTlCYm1sdFlYUnBiMjVHWldGMGRYSmxKenRjY2x4dWFXMXdiM0owSUVGdWFXMWhkR2x2Ymt4aGVXVnlMQ0I3WEhKY2JpQWdUR0Y1WlhKQ2JHVnVaRTF2WkdWekxGeHlYRzRnSUVSbFptRjFiSFJNWVhsbGNrSnNaVzVrVFc5a1pTeGNjbHh1ZlNCbWNtOXRJQ2N1TDBGdWFXMWhkR2x2Ymt4aGVXVnlKenRjY2x4dWFXMXdiM0owSUZOcGJtZHNaVk4wWVhSbElHWnliMjBnSnk0dmMzUmhkR1V2VTJsdVoyeGxVM1JoZEdVbk8xeHlYRzVwYlhCdmNuUWdWSEpoYm5OcGRHbHZibE4wWVhSbElHWnliMjBnSnk0dmMzUmhkR1V2VkhKaGJuTnBkR2x2YmxOMFlYUmxKenRjY2x4dWFXMXdiM0owSUVaeVpXVkNiR1Z1WkZOMFlYUmxJR1p5YjIwZ0p5NHZjM1JoZEdVdlJuSmxaVUpzWlc1a1UzUmhkR1VuTzF4eVhHNXBiWEJ2Y25RZ1VYVmxkV1ZUZEdGMFpTQm1jbTl0SUNjdUwzTjBZWFJsTDFGMVpYVmxVM1JoZEdVbk8xeHlYRzVwYlhCdmNuUWdVbUZ1Wkc5dFFXNXBiV0YwYVc5dVUzUmhkR1VnWm5KdmJTQW5MaTl6ZEdGMFpTOVNZVzVrYjIxQmJtbHRZWFJwYjI1VGRHRjBaU2M3WEhKY2JtbHRjRzl5ZENCQ2JHVnVaREZrVTNSaGRHVWdabkp2YlNBbkxpOXpkR0YwWlM5Q2JHVnVaREZrVTNSaGRHVW5PMXh5WEc1cGJYQnZjblFnUW14bGJtUXlaRk4wWVhSbElHWnliMjBnSnk0dmMzUmhkR1V2UW14bGJtUXlaRk4wWVhSbEp6dGNjbHh1YVcxd2IzSjBJRUZ1YVcxaGRHbHZibFYwYVd4eklHWnliMjBnSnk0dlFXNXBiV0YwYVc5dVZYUnBiSE1uTzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVCdVlXMWxjM0JoWTJWY2NseHVJQ292WEhKY2JtTnZibk4wSUVWaGMybHVaeUE5SUh0Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRXhwYm1WaGNseHlYRzRnSUNBcUwxeHlYRzRnSUV4cGJtVmhjaXhjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYzJWbElGRjFZV1J5WVhScFkxeHlYRzRnSUNBcUwxeHlYRzRnSUZGMVlXUnlZWFJwWXl4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRU4xWW1salhISmNiaUFnSUNvdlhISmNiaUFnUTNWaWFXTXNYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRSE5sWlNCUmRXRnlkR2xqWEhKY2JpQWdJQ292WEhKY2JpQWdVWFZoY25ScFl5eGNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFjMlZsSUZGMWFXNTBhV05jY2x4dUlDQWdLaTljY2x4dUlDQlJkV2x1ZEdsakxGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQnpaV1VnVTJsdWRYTnZhV1JoYkZ4eVhHNGdJQ0FxTDF4eVhHNGdJRk5wYm5WemIybGtZV3dzWEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUhObFpTQkZlSEJ2Ym1WdWRHbGhiRnh5WEc0Z0lDQXFMMXh5WEc0Z0lFVjRjRzl1Wlc1MGFXRnNMRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUJ6WldVZ1EybHlZM1ZzWVhKY2NseHVJQ0FnS2k5Y2NseHVJQ0JEYVhKamRXeGhjaXhjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYzJWbElFVnNZWE4wYVdOY2NseHVJQ0FnS2k5Y2NseHVJQ0JGYkdGemRHbGpMRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUJ6WldVZ1FtRmphMXh5WEc0Z0lDQXFMMXh5WEc0Z0lFSmhZMnNzWEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUhObFpTQkNiM1Z1WTJWY2NseHVJQ0FnS2k5Y2NseHVJQ0JDYjNWdVkyVXNYSEpjYm4wN1hISmNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFjMlZsSUdOdmNtVXZRVzVwYldGMGFXOXVSbVZoZEhWeVpWeHlYRzRnSUNBcUwxeHlYRzRnSUVGdWFXMWhkR2x2YmtabFlYUjFjbVVzWEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUhObFpTQkJibWx0WVhScGIyNU1ZWGxsY2x4eVhHNGdJQ0FxTDF4eVhHNGdJRUZ1YVcxaGRHbHZia3hoZVdWeUxGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQnpaV1VnWTI5eVpTOVRhVzVuYkdWVGRHRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGTnBibWRzWlZOMFlYUmxMRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUJ6WldVZ1ZISmhibk5wZEdsdmJsTjBZWFJsWEhKY2JpQWdJQ292WEhKY2JpQWdWSEpoYm5OcGRHbHZibE4wWVhSbExGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQnpaV1VnUm5KbFpVSnNaVzVrVTNSaGRHVmNjbHh1SUNBZ0tpOWNjbHh1SUNCR2NtVmxRbXhsYm1SVGRHRjBaU3hjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYzJWbElGRjFaWFZsVTNSaGRHVmNjbHh1SUNBZ0tpOWNjbHh1SUNCUmRXVjFaVk4wWVhSbExGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQnpaV1VnVW1GdVpHOXRRVzVwYldGMGFXOXVVM1JoZEdWY2NseHVJQ0FnS2k5Y2NseHVJQ0JTWVc1a2IyMUJibWx0WVhScGIyNVRkR0YwWlN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRUpzWlc1a01XUlRkR0YwWlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRUpzWlc1a01XUlRkR0YwWlN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRUpzWlc1a01tUlRkR0YwWlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRUpzWlc1a01tUlRkR0YwWlN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRUZ1YVcxaGRHbHZibFYwYVd4elhISmNiaUFnSUNvdlhISmNiaUFnUVc1cGJXRjBhVzl1VlhScGJITXNYSEpjYmx4eVhHNGdJRVZoYzJsdVp5eGNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFjMlZsSUV4aGVXVnlRbXhsYm1STmIyUmxjMXh5WEc0Z0lDQXFMMXh5WEc0Z0lFeGhlV1Z5UW14bGJtUk5iMlJsY3l4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRVJsWm1GMWJIUk1ZWGxsY2tKc1pXNWtUVzlrWlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRVJsWm1GMWJIUk1ZWGxsY2tKc1pXNWtUVzlrWlN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRUZ1YVcxaGRHbHZibFI1Y0dWelhISmNiaUFnSUNvdlhISmNiaUFnUVc1cGJXRjBhVzl1Vkhsd1pYTXNYSEpjYm4wN1hISmNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkJiV0Y2YjI0dVkyOXRMQ0JKYm1NdUlHOXlJR2wwY3lCaFptWnBiR2xoZEdWekxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh5WEc0dkx5QlRVRVJZTFV4cFkyVnVjMlV0U1dSbGJuUnBabWxsY2pvZ1RVbFVMVEJjY2x4dVhISmNibWx0Y0c5eWRDQlZkR2xzY3lCbWNtOXRJQ2RqYjNKbEwxVjBhV3h6Snp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQklHTnZiR3hsWTNScGIyNGdiMllnZFhObFpuVnNJSFJsZUhRdGRHOHRjM0JsWldOb0lHWjFibU4wYVc5dWN5NWNjbHh1SUNwY2NseHVJQ29nUUdocFpHVmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0tpOWNjbHh1WTJ4aGMzTWdWR1Y0ZEZSdlUzQmxaV05vVlhScGJITWdlMXh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2MzUnlhVzVuSUhkcGRHZ2dVMU5OVENCdFlYSnJjeUJwYm5ObGNuUmxaQ0JpWVhObFpDQnZibHh5WEc0Z0lDQXFJRzFoZEdOb1pYTWdZbVYwZDJWbGJpQjBhR1VnYVc1d2RYUWdjM1J5YVc1bklHRnVaQ0IwYUdVZ2FXNXdkWFFnYldGd0xpQlVhR1ZjY2x4dUlDQWdLaUIzYjNKa0lHMWhkR05vWlhNZ1lYSmxJR05oYzJVdGFXNXpaVzV6YVhScGRtVXVJRmR2Y21SeklIZHBkR2hwYmlCbGVHbHpkR2x1WjF4eVhHNGdJQ0FxSUZOVFRVd2dkR0ZuY3lCM2FXeHNJRzV2ZENCaVpTQmhabVpsWTNSbFpDNGdTVzV3ZFhRZ2RHVjRkQ0IzYVd4c0lHSmxJSE4xY25KdmRXNWtaV1JjY2x4dUlDQWdLaUJpZVNBOGMzQmxZV3MrUEM5emNHVmhhejRnZEdGbmN5QnBaaUJ1WldWa1pXUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RHVjRkQ0F0SUVsdWNIVjBJSE4wY21sdVp5NWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2JXRndJQzBnU1c1d2RYUWdiMkpxWldOMElIUm9ZWFFnYldGd2N5QnRZWEpySUd0bGVYTmNjbHh1SUNBZ0tpQjBieUJoY25KaGVYTWdiMllnZDI5eVpITXVJRVY0WVcxd2JHVTZYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQWdlMXh5WEc0Z0lDQXFJQ0FnSUNkdFlYSnJPbk5oWkNjZ09pQmJKM05oWkNjc0lDZGliSFZsSnl3Z0oyUnZkMjRuWFN4Y2NseHVJQ0FnS2lBZ0lDQW5iV0Z5YXpwb1lYQndlU2NnT2lCYkoycHZlU2NzSUNkbmJHRmtKeXdnSjJkeVpXRjBKMTBzWEhKY2JpQWdJQ29nSUNBZ0oyMWhjbXM2Ym04bklEb2dXeWR1Ynljc0lDZHVZV2duTENBbmJtRjVKeXdnSjNOMWNtVW5YVnh5WEc0Z0lDQXFJQ0I5WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhjM1J5YVc1blBuMGdXM0poYm1SdmJVMWhjbXR6SUQwZ1cxMWRJQzBnU1dZZ2RHaGxjbVVnWVhKbElITmxiblJsYm1ObGN5QjBhR0YwSUdSdmJpZDBYSEpjYmlBZ0lDb2diV0YwWTJnZ1lXNTVJSGR2Y21SeklHWnliMjBnZEdobElHMWhjQ0J2WW1wbFkzUXNJRzFoY210eklHWnliMjBnZEdocGN5QmhjbkpoZVNCM2FXeHNJR0psSUhKaGJtUnZiV3g1WEhKY2JpQWdJQ29nWTJodmMyVnVJR0Z1WkNCcGJuTmxjblJsWkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0emRISnBibWQ5SUMwZ1ZYQmtZWFJsWkNCcGJuQjFkQ0J6ZEhKcGJtY3VYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdGMWRHOUhaVzVsY21GMFpWTlRUVXhOWVhKcmN5aDBaWGgwTENCdFlYQXNJSEpoYm1SdmJVMWhjbXR6SUQwZ1cxMHBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYldGd0lDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCdFlYQWdQVDA5SUc1MWJHd3BJSHRjY2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh5WEc0Z0lDQWdJQ0FnSUdCRFlXNXViM1FnWjJWdVpYSmhkR1VnVTFOTlRDQnRZWEpyY3lCbWIzSWdkR1Y0ZENCY0lpUjdkR1Y0ZEgxY0lpQmlaV05oZFhObElHMWhjQ0JwY3lCdWIzUWdZVzRnYjJKcVpXTjBMbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMeUJ3Y205alpYTnpJSFJvWlNCcGJuQjFkQ0J0WVhBZ2FXNTBieUJoYmlCcGJuUmxjbTVoYkNCbWIzSnRZWFJjY2x4dUlDQWdJR052Ym5OMElHbHVkR1Z5Ym1Gc1RXRndJRDBnZEdocGN5NWZjSEp2WTJWemMwbHVjSFYwVFdGd0tHMWhjQ2s3WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnYzNCbFlXdFVZV2R6SUQwZ1d5YzhjM0JsWVdzK0p5d2dKend2YzNCbFlXcytKMTA3WEhKY2JpQWdJQ0JqYjI1emRDQnpjMjFzVFdGeWExSmxaMlY0SUQwZ0x6eHRZWEpySUc1aGJXVTlLRDg2WENKOEp5a29MaW8vS1NnL09sd2lmQ2NwWEZ3dlBpODdYSEpjYmlBZ0lDQmpiMjV6ZENCemMyMXNWR0ZuVW1WblpYZ2dQU0F2UEZ0ZVBsMHFQaTluTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRWxrWlc1MGFXWjVJR0Z1ZVNCbGVHbHpkR2x1WnlCVFUwMU1JSFJoWjNOY2NseHVJQ0FnSUdOdmJuTjBJR1Y0YVhOMGFXNW5WR0ZuY3lBOUlGdGRPMXh5WEc0Z0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUhOemJXeFVZV2RTWldkbGVDNWxlR1ZqS0hSbGVIUXBPMXh5WEc1Y2NseHVJQ0FnSUhkb2FXeGxJQ2h5WlhOMWJIUWdJVDA5SUc1MWJHd3BJSHRjY2x4dUlDQWdJQ0FnWlhocGMzUnBibWRVWVdkekxuQjFjMmdvZTF4eVhHNGdJQ0FnSUNBZ0lITjBZWEowT2lCeVpYTjFiSFF1YVc1a1pYZ3NYSEpjYmlBZ0lDQWdJQ0FnWlc1a09pQnlaWE4xYkhRdWFXNWtaWGdnS3lCeVpYTjFiSFJiTUYwdWJHVnVaM1JvTEZ4eVhHNGdJQ0FnSUNBZ0lIUmxlSFE2SUhKbGMzVnNkRnN3WFN4Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCemMyMXNWR0ZuVW1WblpYZ3VaWGhsWXloMFpYaDBLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0JqYUhWdWEzTWdQU0JiWFR0Y2NseHVJQ0FnSUd4bGRDQnBibVJsZUNBOUlEQTdYSEpjYmlBZ0lDQnNaWFFnYzNOdGJFMWhjbXRTWlhOMWJIUTdYSEpjYmlBZ0lDQnNaWFFnWkhWd2JHbGpZWFJsVFdGeWExUnZRMmhsWTJzZ1BTQmJYVHRjY2x4dUlDQWdJR1Y0YVhOMGFXNW5WR0ZuY3k1bWIzSkZZV05vS0dWNGFYTjBhVzVuVkdGbklEMCtJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdjM1ZpYzNSeUlEMGdkR1Y0ZEM1emJHbGpaU2hwYm1SbGVDd2daWGhwYzNScGJtZFVZV2N1YzNSaGNuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLSE4xWW5OMGNpQWhQVDBnSnljcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCaGRYUnZMVzFoY21zZ2JtOXVMWFJoWnlCMFpYaDBYSEpjYmlBZ0lDQWdJQ0FnWTJoMWJtdHpMbkIxYzJnb1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXBibk5sY25STllYSnJjeWh6ZFdKemRISXNJR2x1ZEdWeWJtRnNUV0Z3TENCa2RYQnNhV05oZEdWTllYSnJWRzlEYUdWamF5bGNjbHh1SUNBZ0lDQWdJQ0FwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JrZFhCc2FXTmhkR1ZOWVhKclZHOURhR1ZqYXlBOUlGdGRPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQnpjMjFzVFdGeWExSmxjM1ZzZENBOUlITnpiV3hOWVhKclVtVm5aWGd1WlhobFl5aGxlR2x6ZEdsdVoxUmhaeTUwWlhoMEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHpjMjFzVFdGeWExSmxjM1ZzZENBaFBUMGdiblZzYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWhjbXRVWlhoMElEMGdjM050YkUxaGNtdFNaWE4xYkhSYk1WMDdYSEpjYmlBZ0lDQWdJQ0FnWkhWd2JHbGpZWFJsVFdGeWExUnZRMmhsWTJzdWNIVnphQ2h0WVhKclZHVjRkQ2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lYTndaV0ZyVkdGbmN5NXBibU5zZFdSbGN5aGxlR2x6ZEdsdVoxUmhaeTUwWlhoMEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOb2RXNXJjeTV3ZFhOb0tHVjRhWE4wYVc1blZHRm5MblJsZUhRcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5QmhaSFpoYm1ObElIUm9aU0JwYm1SbGVGeHlYRzRnSUNBZ0lDQnBibVJsZUNBOUlHVjRhWE4wYVc1blZHRm5MbVZ1WkR0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJR05vZFc1cmN5NXdkWE5vS0Z4eVhHNGdJQ0FnSUNCMGFHbHpMbDlwYm5ObGNuUk5ZWEpyY3loMFpYaDBMbk5zYVdObEtHbHVaR1Y0S1N3Z2FXNTBaWEp1WVd4TllYQXNJR1IxY0d4cFkyRjBaVTFoY210VWIwTm9aV05yS1Z4eVhHNGdJQ0FnS1R0Y2NseHVYSEpjYmlBZ0lDQnNaWFFnYldGeWEyVmtWR1Y0ZENBOUlHTm9kVzVyY3k1cWIybHVLQ2NuS1R0Y2NseHVYSEpjYmlBZ0lDQnBaaUFvY21GdVpHOXRUV0Z5YTNNZ0ppWWdjbUZ1Wkc5dFRXRnlhM011YkdWdVozUm9JRDRnTUNrZ2UxeHlYRzRnSUNBZ0lDQXZMeUJoWkdRZ2NtRnVaRzl0SUcxaGNtdHpJSFJ2SUdGdWVTQjFibTFoY210bFpDQnpaVzUwWlc1alpYTmNjbHh1SUNBZ0lDQWdiV0Z5YTJWa1ZHVjRkQ0E5SUhSb2FYTXVZV1JrVFdGeWEzTlViMVZ1YldGeWEyVmtVMlZ1ZEdWdVkyVnpLRnh5WEc0Z0lDQWdJQ0FnSUcxaGNtdGxaRlJsZUhRc1hISmNiaUFnSUNBZ0lDQWdjbUZ1Wkc5dFRXRnlhM05jY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z1ZHVjRkRlJ2VTNCbFpXTm9WWFJwYkhNdWRtRnNhV1JoZEdWVVpYaDBLRzFoY210bFpGUmxlSFFwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVjBkWEp1Y3lCaElHNWxkeUJ6ZEhKcGJtY2dkMmwwYUNCaElISmhibVJ2YlNCVFUwMU1JRzFoY21zZ2FXNXpaWEowWldRZ1lYUWdaV0ZqYUNCelpXNTBaVzVqWlNCMGFHRjBYSEpjYmlBZ0lDb2daRzlsY3lCdWIzUWdZV3h5WldGa2VTQmpiMjUwWVdsdUlHRnVJRk5UVFV3Z2JXRnlheTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBaWGgwSUMwZ1NXNXdkWFFnYzNSeWFXNW5MbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBITjBjbWx1Wno1OUlHMWhjbXR6SUMwZ1FXNTVJR0Z5Y21GNUlHOW1JSEpoYm1SdmJTQlRVMDFNSUcxaGNtdHpJSFJ2SUdOb2IyOXpaU0JtY205dFhISmNiaUFnSUNvZ2QyaGxiaUJ0YjJScFpubHBibWNnZEdobElIUmxlSFF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mVnh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCaFpHUk5ZWEpyYzFSdlZXNXRZWEpyWldSVFpXNTBaVzVqWlhNb2RHVjRkQ3dnYldGeWEzTXBJSHRjY2x4dUlDQWdJR2xtSUNnaGJXRnlhM01nZkh3Z2JXRnlhM011YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z2RHVjRkRHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0J6YzIxc1RXRnlhMUpsWjJWNElEMGdMenh0WVhKcklHNWhiV1U5S0Q4NlhDSjhKeWtvTGlvL0tTZy9PbHdpZkNjcFhGd3ZQaTluTzF4eVhHNGdJQ0FnWTI5dWMzUWdjM050YkZSaFoxSmxaMlY0SUQwZ0x6eGJYajVkS2o0dlp6dGNjbHh1WEhKY2JpQWdJQ0F2THlCR2FXNWtJSFJvWlNCcGJtUnBZMlZ6SUc5bUlHRnVlU0J0WVhKcmN5QnBiaUIwYUdVZ2RHVjRkRnh5WEc0Z0lDQWdZMjl1YzNRZ2JXRnlhMGx1WkdsalpYTWdQU0JiWFR0Y2NseHVJQ0FnSUd4bGRDQnRZWEpyVW1WemRXeDBJRDBnYzNOdGJFMWhjbXRTWldkbGVDNWxlR1ZqS0hSbGVIUXBPMXh5WEc1Y2NseHVJQ0FnSUhkb2FXeGxJQ2h0WVhKclVtVnpkV3gwSUNFOVBTQnVkV3hzS1NCN1hISmNiaUFnSUNBZ0lHMWhjbXRKYm1ScFkyVnpMbkIxYzJnb2JXRnlhMUpsYzNWc2RDNXBibVJsZUNrN1hISmNiaUFnSUNBZ0lHMWhjbXRTWlhOMWJIUWdQU0J6YzIxc1RXRnlhMUpsWjJWNExtVjRaV01vZEdWNGRDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1JtbHVaQ0JoYkd3Z1UxTk5UQ0IwWVdkeklHbHVJSFJvWlNCMFpYaDBYSEpjYmlBZ0lDQmpiMjV6ZENCbGVHbHpkR2x1WjFSaFozTWdQU0JiWFR0Y2NseHVJQ0FnSUd4bGRDQnpjMjFzVW1WemRXeDBJRDBnYzNOdGJGUmhaMUpsWjJWNExtVjRaV01vZEdWNGRDazdYSEpjYmlBZ0lDQjNhR2xzWlNBb2MzTnRiRkpsYzNWc2RDQWhQVDBnYm5Wc2JDa2dlMXh5WEc0Z0lDQWdJQ0JsZUdsemRHbHVaMVJoWjNNdWNIVnphQ2g3WEhKY2JpQWdJQ0FnSUNBZ2MzUmhjblE2SUhOemJXeFNaWE4xYkhRdWFXNWtaWGdzWEhKY2JpQWdJQ0FnSUNBZ1pXNWtPaUJ6YzIxc1VtVnpkV3gwTG1sdVpHVjRJQ3NnYzNOdGJGSmxjM1ZzZEZzd1hTNXNaVzVuZEdnc1hISmNiaUFnSUNBZ0lDQWdkR1Y0ZERvZ2MzTnRiRkpsYzNWc2RGc3dYU3hjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lITnpiV3hTWlhOMWJIUWdQU0J6YzIxc1ZHRm5VbVZuWlhndVpYaGxZeWgwWlhoMEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2THlCRGNtVmhkR1VnWVNCamIzQjVJRzltSUhSb1pTQjBaWGgwSUhkcGRHZ2dZV3hzSUZOVFRVd2diV0Z5YTNNZ2NtVndiR0ZqWlhNZ2QybDBhQ0IzYUdsMFpYTndZV05sWEhKY2JpQWdJQ0JzWlhRZ1kyeGxZVzVsWkZSbGVIUWdQU0IwWlhoMExuTnNhV05sS0NrN1hISmNiaUFnSUNCbGVHbHpkR2x1WjFSaFozTXVabTl5UldGamFDaGxlR2x6ZEdsdVoxTnpiV3dnUFQ0Z2UxeHlYRzRnSUNBZ0lDQmpiMjV6ZENCM2FHbDBaWE53WVdObElEMGdibVYzSUVGeWNtRjVLR1Y0YVhOMGFXNW5VM050YkM1MFpYaDBMbXhsYm1kMGFDQXJJREVwTG1wdmFXNG9KeUFuS1R0Y2NseHVJQ0FnSUNBZ1kyeGxZVzVsWkZSbGVIUWdQU0JiWEhKY2JpQWdJQ0FnSUNBZ1kyeGxZVzVsWkZSbGVIUXVjMnhwWTJVb01Dd2daWGhwYzNScGJtZFRjMjFzTG5OMFlYSjBLU3hjY2x4dUlDQWdJQ0FnSUNCM2FHbDBaWE53WVdObExGeHlYRzRnSUNBZ0lDQWdJR05zWldGdVpXUlVaWGgwTG5Oc2FXTmxLR1Y0YVhOMGFXNW5VM050YkM1bGJtUXBMRnh5WEc0Z0lDQWdJQ0JkTG1wdmFXNG9KeWNwTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ2MyVnVkR1Z1WTJWRmJtUkpibVJwWTJWeklEMGdkR2hwY3k1ZloyVjBVMlZ1ZEdWdVkyVkZibVJ6S0dOc1pXRnVaV1JVWlhoMEtUdGNjbHh1WEhKY2JpQWdJQ0F2THlCUGJteDVJR2x1YzJWeWRDQnlZVzVrYjIwZ2JXRnlhM01nYVc1MGJ5QnpaVzUwWlc1alpYTWdkR2hoZENCa2IyNG5kQ0JoYkhKbFlXUjVJR2hoZG1VZ1lXNTVYSEpjYmlBZ0lDQnNaWFFnY0hKbGRrbHVaR1Y0SUQwZ01EdGNjbHh1SUNBZ0lHTnZibk4wSUhSaGNtZGxkRWx1WkdsalpYTWdQU0J6Wlc1MFpXNWpaVVZ1WkVsdVpHbGpaWE11Wm1sc2RHVnlLR2x1WkdWNElEMCtJSHRjY2x4dUlDQWdJQ0FnWTI5dWMzUWdZMjl1ZEdGcGJuTk5ZWEpySUQxY2NseHVJQ0FnSUNBZ0lDQnRZWEpyU1c1a2FXTmxjeTVtYVc1a1NXNWtaWGdvYldGeWEwbHVaR1Y0SUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WMlNXNWtaWGdnUEQwZ2JXRnlhMGx1WkdWNElDWW1JR2x1WkdWNElENGdiV0Z5YTBsdVpHVjRPMXh5WEc0Z0lDQWdJQ0FnSUgwcElDRTlQU0F0TVR0Y2NseHVJQ0FnSUNBZ2NISmxka2x1WkdWNElEMGdhVzVrWlhnN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlBaFkyOXVkR0ZwYm5OTllYSnJPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1FnY21GdVpHOXRUV0Z5YTJWa1ZHVjRkQ0E5SUhSb2FYTXVYMmx1YzJWeWRGSmhibVJ2YlUxaGNtdHpRWFFvWEhKY2JpQWdJQ0FnSUhSbGVIUXNYSEpjYmlBZ0lDQWdJSFJoY21kbGRFbHVaR2xqWlhNc1hISmNiaUFnSUNBZ0lHMWhjbXR6WEhKY2JpQWdJQ0FwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCeVlXNWtiMjFOWVhKclpXUlVaWGgwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVnVaWEpoZEdVZ1lTQjJaWEp6YVc5dUlHOW1JR2RwZG1WdUlIUmxlSFFnZEdoaGRDQnBjeUJsYm1Oc2IzTmxaQ0JpZVNCUWIyeHNlU0J6YzIxc0lITndaV0ZySUhSaFozTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RHVjRkQ0F0SUZSb1pTQjBaWGgwSUhSdklIWmhiR2xrWVhSbExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UzTjBjbWx1WjMwZ0xTQlZjR1JoZEdWa0lHbHVjSFYwSUhOMGNtbHVaeTVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ2RtRnNhV1JoZEdWVVpYaDBLSFJsZUhRcElIdGNjbHh1SUNBZ0lHbG1JQ2doZEdWNGRDa2dlMXh5WEc0Z0lDQWdJQ0IwWlhoMElEMGdKenh6Y0dWaGF6NDhMM053WldGclBpYzdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBaWGgwSUQwZ2RHVjRkRnh5WEc0Z0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M4b1hseGNjeW84WEZ4ektuTndaV0ZyWEZ4ektpaytYRnh6S253b1hseGNjeW9wTHl3Z0p6eHpjR1ZoYXo0bktWeHlYRzRnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzhvWEZ4ektqeGNYSE1xWEZ3dlhGeHpLbk53WldGclhGeHpLajVjWEhNcUpIeGNYSE1xSkNrdkxDQW5QQzl6Y0dWaGF6NG5LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnZEdWNGREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkJoY25ObElHRnVJR2x1Y0hWMElITjBjbWx1WnlCaGJtUWdhVzV6WlhKMElGTlRUVXdnYldGeWEzTWdZbUZ6WldRZ2IyNWNjbHh1SUNBZ0tpQjNiM0prSUcxaGRHTm9aWE1nYVc0Z1lTQnRZWEF1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmxlSFFnTFNCSmJuQjFkQ0J6ZEhKcGJtY3VYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEJjbkpoZVM0OGJuVnRZbVZ5UG4wZ1cybHVaR2xqWlhNZ1BTQmJYVjBnTFNCQmJpQmhjbkpoZVNCdlppQnBibVJwWTJWeklHbHVJSFJvWlNCMFpYaDBJR2x1Y0hWMFhISmNiaUFnSUNvZ2QyaGxjbVVnY21GdVpHOXRJRzFoY210eklITm9iM1ZzWkNCaVpTQnBibk5sY25SbFpDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1TGp4emRISnBibWMrZlNCYmJXRnlhM01nUFNCYlhWMGdMU0JCYmlCaGNuSmhlU0J2WmlCdFlYSnJJSE4wY21sdVozTWdkRzhnWTJodmIzTmxYSEpjYmlBZ0lDb2dabkp2YlNCM2FHVnVJR2x1YzJWeWRHbHVaeUJ5WVc1a2IyMGdiV0Z5YTNNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlNBdElGVndaR0YwWldRZ2FXNXdkWFFnYzNSeWFXNW5MbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCZmFXNXpaWEowVW1GdVpHOXRUV0Z5YTNOQmRDaDBaWGgwTENCcGJtUnBZMlZ6SUQwZ1cxMHNJRzFoY210eklEMGdXMTBwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hiV0Z5YTNNZ2ZId2diV0Z5YTNNdWJHVnVaM1JvSUQwOVBTQXdJSHg4SUNGcGJtUnBZMlZ6SUh4OElHbHVaR2xqWlhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwWlhoME8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR3hsZENCdlptWnpaWFFnUFNBd08xeHlYRzRnSUNBZ2FXNWthV05sY3k1bWIzSkZZV05vS0dsdVpHVjRJRDArSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjM1FnY21GdVpHOXRUV0Z5YXlBOUlHQThiV0Z5YXlCdVlXMWxQU2NrZTF4eVhHNGdJQ0FnSUNBZ0lHMWhjbXR6VzFWMGFXeHpMbWRsZEZKaGJtUnZiVWx1ZENnd0xDQnRZWEpyY3k1c1pXNW5kR2dwWFZ4eVhHNGdJQ0FnSUNCOUp5OCtZRHRjY2x4dUlDQWdJQ0FnZEdWNGRDQTlJRnRjY2x4dUlDQWdJQ0FnSUNCMFpYaDBMbk5zYVdObEtEQXNJR2x1WkdWNElDc2diMlptYzJWMEtTeGNjbHh1SUNBZ0lDQWdJQ0J5WVc1a2IyMU5ZWEpyTEZ4eVhHNGdJQ0FnSUNBZ0lIUmxlSFF1YzJ4cFkyVW9hVzVrWlhnZ0t5QnZabVp6WlhRcExGeHlYRzRnSUNBZ0lDQmRMbXB2YVc0b0p5Y3BPMXh5WEc0Z0lDQWdJQ0J2Wm1aelpYUWdLejBnY21GdVpHOXRUV0Z5YXk1c1pXNW5kR2c3WEhKY2JpQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2RHVjRkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZCaGNuTmxjeUJoSUhOMGNtbHVaeUJ2WmlCMFpYaDBJR0Z1WkNCeVpYUjFjbTV6SUdGdUlHRnljbUY1SUdOdmJuUmhhVzVwYm1jZ2RHaGxJR2x1WkdsalpYTmNjbHh1SUNBZ0tpQnZaaUIwYUdVZ2JHRnpkQ0JqYUdGeVlXTjBaWElnYVc0Z1lTQnpaVzUwWlc1alpTQjBhR0YwSUdseklHNXZkQ0JwYmlCMGFHVWdabTlzYkc5M2FXNW5JR3hwYzNRNlhISmNiaUFnSUNvZ0lDZ25MaWNzSUNjL0p5d2dKeUVuS1Z4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBaWGgwSUMwZ1ZHVjRkQ0IwYnlCd2NtOWpaWE56SUdadmNpQmxibVFnYjJZZ2MyVnVkR1Z1WTJWY2NseHVJQ0FnS2lCcGJtUnBZMlZ6TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBGeWNtRjVManh1ZFcxaVpYSStmU0F0SUVGeWNtRjVJRzltSUdWdVpDQnZaaUJ6Wlc1MFpXNWpaU0JwYm1ScFkyVnpMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCZloyVjBVMlZ1ZEdWdVkyVkZibVJ6S0hSbGVIUXBJSHRjY2x4dUlDQWdJR052Ym5OMElITmxiblJsYm1ObFVtVm5aWGdnUFNBdlcxNHVJVDlkSzFzdUlUOWRLeTluTzF4eVhHNGdJQ0FnWTI5dWMzUWdaVzVrVTJWdWRHVnVZMlZTWldkbGVDQTlJQzliTGlFL1hTc3ZPMXh5WEc1Y2NseHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQnpaVzUwWlc1alpWSmxaMlY0TG1WNFpXTW9kR1Y0ZENrN1hISmNiaUFnSUNCamIyNXpkQ0J6Wlc1MFpXNWpaVVZ1WkhNZ1BTQmJYVHRjY2x4dUlDQWdJSGRvYVd4bElDaHlaWE4xYkhRZ0lUMDlJRzUxYkd3cElIdGNjbHh1SUNBZ0lDQWdMeThnWm1sdVpDQjBhR1VnYkdGemRDQnViMjR0Y0hWdVkzUjFZWFJwYjI0Z1kyaGhjbUZqZEdWeVhISmNiaUFnSUNBZ0lHTnZibk4wSUhCMWJtTjBVbVZ6ZFd4MElEMGdaVzVrVTJWdWRHVnVZMlZTWldkbGVDNWxlR1ZqS0hKbGMzVnNkRnN3WFNrN1hISmNiaUFnSUNBZ0lITmxiblJsYm1ObFJXNWtjeTV3ZFhOb0tGeHlYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDNXBibVJsZUNBcklISmxjM1ZzZEZzd1hTNXNaVzVuZEdnZ0xTQndkVzVqZEZKbGMzVnNkRnN3WFM1c1pXNW5kR2hjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2MyVnVkR1Z1WTJWU1pXZGxlQzVsZUdWaktIUmxlSFFwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCelpXNTBaVzVqWlVWdVpITTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJRWVhKelpTQmhiaUJwYm5CMWRDQnpkSEpwYm1jZ1lXNWtJR2x1YzJWeWRDQlRVMDFNSUcxaGNtdHpJR0poYzJWa0lHOXVYSEpjYmlBZ0lDb2dkMjl5WkNCdFlYUmphR1Z6SUdsdUlHRWdiV0Z3TGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBaWGgwSUMwZ1NXNXdkWFFnYzNSeWFXNW5MbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUV0Z3ZlNCdFlYQWdMU0JOWVhCd2FXNW5JRzltSUhkdmNtUnpJSFJ2SUcxaGNtc2dkbUZzZFdWeklIUm9ZWFJjY2x4dUlDQWdLaUIzYVd4c0lHSmxJR2x1YzJWeWRHVmtJR0Z6SUhSb1pTQjJZV3gxWlNCbWIzSWdZU0J0WVhKckozTWdKMjVoYldVbklHRjBkSEpwWW5WMFpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCa2RYQnNhV05oZEdWelZHOURhR1ZqYXlBdElFRWdiR2x6ZENCdlppQnRZWEpySUhaaGJIVmxjeUIwYnlCamFHVmpheUJtYjNJZ1pIVndiR2xqWVhSbElHRm5ZV2x1YzNRZ2RHaGxJR1pwY25OMElIZHZjbVJjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlJQzBnVlhCa1lYUmxaQ0JwYm5CMWRDQnpkSEpwYm1jdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRjlwYm5ObGNuUk5ZWEpyY3loMFpYaDBMQ0J0WVhBc0lHUjFjR3hwWTJGMFpYTlViME5vWldOcktTQjdYSEpjYmlBZ0lDQnBaaUFvZEdWNGRDQTlQVDBnSnljcElISmxkSFZ5YmlCMFpYaDBPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJSGR2Y21SU1pXZGxlQ0E5SUM5Y1hIY3JmRnhjY3l0OFcxNWNYSE5jWEhkZEt5OW5PMXh5WEc1Y2NseHVJQ0FnSUd4bGRDQnNiM2RsY2tOaGMyVlhiM0prTzF4eVhHNGdJQ0FnYkdWMElHTm9aV05yUkhWd2JHbGpZWFJsSUQwZ2RISjFaVHRjY2x4dUlDQWdJR052Ym5OMElHMWhjbXRsWkZkdmNtUnpJRDBnZEdWNGRDNXRZWFJqYUNoM2IzSmtVbVZuWlhncExtMWhjQ2gzYjNKa0lEMCtJSHRjY2x4dUlDQWdJQ0FnYkc5M1pYSkRZWE5sVjI5eVpDQTlJSGR2Y21RdWRHOU1iM2RsY2tOaGMyVW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2h0WVhBdWFHRnpLR3h2ZDJWeVEyRnpaVmR2Y21RcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiV0Z5YTNNZ1BTQnRZWEF1WjJWMEtHeHZkMlZ5UTJGelpWZHZjbVFwTG0xaGNDaHRZWEpySUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGphR1ZqYTBSMWNHeHBZMkYwWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHVmphMFIxY0d4cFkyRjBaU0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pIVndiR2xqWVhSbGMxUnZRMmhsWTJzdWFXNWpiSFZrWlhNb2JXRnlheWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUNjblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ09pQmdQRzFoY21zZ2JtRnRaVDBuSkh0dFlYSnJmU2N2UG1BN1hISmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lEeHRZWEpySUc1aGJXVTlKeVI3YldGeWEzMG5MejVnTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmdKSHR0WVhKcmN5NXFiMmx1S0NjbktYMGtlM2R2Y21SOVlEdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0JqYUdWamEwUjFjR3hwWTJGMFpTQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjNiM0prTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRDQmxlR2x6ZEdsdVowMWhjbXR6SUQwZ1pIVndiR2xqWVhSbGMxUnZRMmhsWTJzdWJXRndLRzFoY21zZ1BUNGdlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZRHh0WVhKcklHNWhiV1U5SnlSN2JXRnlhMzBuTHo1Z08xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR0FrZTJWNGFYTjBhVzVuVFdGeWEzTXVhbTlwYmlnbkp5bDlKSHR0WVhKclpXUlhiM0prY3k1cWIybHVLQ2NuS1gxZ08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVSEp2WTJWemMyVnpJR0Z1SUdsdWNIVjBJRzlpYW1WamRDQm1iM0lnYldGd2NHbHVaeUJoYmlCaGNuSmhlVnh5WEc0Z0lDQXFJRzltSUhkdmNtUnpJSFJ2SUhOd1pXTnBabWxqSUcxaGNtc2dhMlY1Y3k0Z1EyOXVkbVZ5ZEhNZ2RHaGxJR2x1Y0hWMFhISmNiaUFnSUNvZ2JXRndJR2x1ZEc4Z1lTQk5ZWEFnZDJsMGFDQmhJRzF2Y21VZ1pXWm1hV05wWlc1MElHWnZjbTFoZENCbWIzSmNjbHh1SUNBZ0tpQndaWEptYjNKdGFXNW5JRzFoY21zZ2FXNXFaV04wYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQnlhWFpoZEdWY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J0WVhBZ0xTQkpibkIxZENCdlltcGxZM1FnZEdoaGRDQnRZWEJ6SUcxaGNtc2dhMlY1YzF4eVhHNGdJQ0FxSUhSdklHRnljbUY1Y3lCdlppQjNiM0prY3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0TllYQjlJQzBnVFdGd0lHWnZjaUJwYm5SbGNtNWhiQ0IxYzJVdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRjl3Y205alpYTnpTVzV3ZFhSTllYQW9iV0Z3S1NCN1hISmNiaUFnSUNCamIyNXpkQ0JwYm5SbGNtNWhiRTFoY0NBOUlHNWxkeUJOWVhBb0tUdGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ2JHbHpkQ0E5SUZ0ZE8xeHlYRzRnSUNBZ1QySnFaV04wTG1WdWRISnBaWE1vYldGd0tTNW1iM0pGWVdOb0tDaGJhMlY1TENCMllXeDFaVjBwSUQwK0lIdGNjbHh1SUNBZ0lDQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjY2x4dUlDQWdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ1oyVnVaWEpoZEdVZ1UxTk5UQ0J0WVhKcmN5Qm1jbTl0SUcxaGNDQmNJaVI3YldGd2ZWd2lJR0psWTJGMWMyVWdkbUZzZFdVZ1ptOXlJR3RsZVNBbkpIdHJaWGw5SnlCcGN5QnViM1FnWVc0Z1lYSnlZWGt1WUZ4eVhHNGdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lIWmhiSFZsTG1admNrVmhZMmdvZDI5eVpDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkc5M1pYSkRZWE5sVjI5eVpDQTlJSGR2Y21RdWRHOU1iM2RsY2tOaGMyVW9LVHRjY2x4dUlDQWdJQ0FnSUNCc2FYTjBJRDBnYVc1MFpYSnVZV3hOWVhBdVoyVjBLR3h2ZDJWeVEyRnpaVmR2Y21RcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9iR2x6ZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUNGc2FYTjBMbWx1WTJ4MVpHVnpLR3RsZVNrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsdWRHVnlibUZzVFdGd0xuTmxkQ2hzYjNkbGNrTmhjMlZYYjNKa0xDQmJMaTR1YkdsemRDd2dhMlY1WFNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsdWRHVnlibUZzVFdGd0xuTmxkQ2hzYjNkbGNrTmhjMlZYYjNKa0xDQmJhMlY1WFNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnBiblJsY201aGJFMWhjRHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRlJsZUhSVWIxTndaV1ZqYUZWMGFXeHpPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNibWx0Y0c5eWRDQkVaV1psY25KbFpDQm1jbTl0SUNkamIzSmxMMFJsWm1WeWNtVmtKenRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJEYkdGemN5QjBhR0YwSUdOaGJpQndiR0Y1SUdKaFkyc2dZWFZrYVc4Z1oyVnVaWEpoZEdWa0lHSjVJRUZYVXlCUWIyeHNlU0JoYm1RZ2MzbHVZMmh5YjI1cGVtVmtJR1Z0YVhSY2NseHVJQ29nYzNCbFpXTm9iV0Z5YXlCdFpYTnpZV2RsY3k1Y2NseHVJQ3BjY2x4dUlDb2dRR0ZpYzNSeVlXTjBYSEpjYmlBcUwxeHlYRzVqYkdGemN5QkJZbk4wY21GamRGTndaV1ZqYUNCN1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FHTnZibk4wY25WamRHOXlYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyTnZjbVV2VkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlgwZ2MzQmxZV3RsY2lBdElGUm9aU0JtWldGMGRYSmxJSFJvWVhRZ2IzZHVjeUIwYUdVZ1UzQmxaV05vSUdGdVpGeHlYRzRnSUNBcUlIZHBiR3dnWlcxcGRDQnpjR1ZsWTJodFlYSnJJRzFsYzNOaFoyVnpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjBaWGgwSUMwZ1ZHaGxJSFJsZUhRZ2IyWWdkR2hsSUhOd1pXVmphQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNUxqeFBZbXBsWTNRK2ZTQmJjM0JsWldOb2JXRnlhM005VzExZElDMGdRVzRnWVhKeVlYa2diMllnYzNCbFpXTm9iV0Z5YXlCdlltcGxZM1J6SUhKbGNISmxjMlZ1ZEdsdVoxeHlYRzRnSUNBcUlIUm9aU0IwWlhoMElHRnVaQ0IwYVcxcGJtY2diMllnZEdobElITndaV1ZqYUM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loemNHVmhhMlZ5TENCMFpYaDBMQ0J6Y0dWbFkyaHRZWEpyY3lBOUlGdGRLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXpjR1ZoYTJWeUlEMGdjM0JsWVd0bGNqdGNjbHh1SUNBZ0lIUm9hWE11WDNSbGVIUWdQU0IwWlhoME8xeHlYRzRnSUNBZ2RHaHBjeTVmYzNCbFpXTm9iV0Z5YTNNZ1BTQnpjR1ZsWTJodFlYSnJjenRjY2x4dUlDQWdJSFJvYVhNdVgzTndaV1ZqYUcxaGNtdFBabVp6WlhRZ1BTQXdPMXh5WEc0Z0lDQWdkR2hwY3k1ZmNtVnpaWFFvS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxjMlYwSUhSeVlXTnJhVzVuSUhCeWIzQmxjblJwWlhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJRnRqZFhKeVpXNTBWR2x0WlQwd1hTQXRJRlJwYldVZ2RHOGdkWE5sSUdadmNpQmZjM1JoY25SVWFXMWxMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXlaWE5sZENoamRYSnlaVzUwVkdsdFpTQTlJREFwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM04wWVhKMFZHbHRaU0E5SUdOMWNuSmxiblJVYVcxbE8xeHlYRzRnSUNBZ2RHaHBjeTVmYkc5allXeFVhVzFsSUQwZ01EdGNjbHh1SUNBZ0lIUm9hWE11WDNCaGRYTmxWR2x0WlNBOUlEQTdYSEpjYmlBZ0lDQjBhR2x6TGw5d2JHRjVhVzVuSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0IwYUdsekxsOXRZWEpyU1hSbGNpQTlJSFJvYVhNdVgzTndaV1ZqYUcxaGNtdHpMblpoYkhWbGN5Z3BPMXh5WEc0Z0lDQWdZMjl1YzNRZ2UzWmhiSFZsTENCa2IyNWxmU0E5SUhSb2FYTXVYMjFoY210SmRHVnlMbTVsZUhRb0tUdGNjbHh1SUNBZ0lIUm9hWE11WDJOMWNuSmxiblJOWVhKcklEMGdkbUZzZFdVN1hISmNiaUFnSUNCMGFHbHpMbDlsYm1SVWFXMWxJRDBnZEdocGN5NWZjM0JsWldOb2JXRnlhM011YkdWdVozUm9YSEpjYmlBZ0lDQWdJRDhnZEdocGN5NWZjM0JsWldOb2JXRnlhM05iZEdocGN5NWZjM0JsWldOb2JXRnlhM011YkdWdVozUm9JQzBnTVYwdWRHbHRaVnh5WEc0Z0lDQWdJQ0E2SURBN1hISmNiaUFnSUNCMGFHbHpMbDlrYjI1bElEMGdaRzl1WlR0Y2NseHVJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVWdQU0J1ZFd4c08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRM0psWVhSbElHRWdibVYzSUhCeWIyMXBjMlVnZEdoaGRDQjNhV3hzSUhOMGIzQWdjR3hoZVdKaFkyc2dZVzVrSUdWdGFYUWdiV1Z6YzJGblpYTWdabTl5SUhSb2FYTWdjM0JsWldOb0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVSbWx1YVhOb0lDMGdSblZ1WTJsMGIyNGdkRzhnWlhobFkzVjBaU0J2Ym1ObElIUm9aU0J6Y0dWbFkyZ2djM1J2Y0hNdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dmJrVnljbTl5UFgwZ2IyNUZjbkp2Y2lBdElFWjFibU4wYVc5dUlIUnZJR1Y0WldOMWRHVWdhV1lnZEdobElITndaV1ZqYUNCbGJtTnZkVzUwWlhKeklHRnVYSEpjYmlBZ0lDb2daWEp5YjNJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2YmoxOUlHOXVTVzUwWlhKeWRYQjBJQzBnUm5WdVkzUnBiMjRnZEc4Z1pYaGxZM1YwWlNCcFppQjBhR1VnYzNCbFpXTm9JR2x6SUdOaGJtTmxiR1ZrTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBSbFptVnljbVZrZlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLaTljY2x4dUlDQmZZM0psWVhSbFVISnZiV2x6WlNodmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNUpiblJsY25KMWNIUXBJSHRjY2x4dUlDQWdJR052Ym5OMElHOXVVbVZ6YjJ4MlpTQTlJSFpoYkhWbElEMCtJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZjR3hoZVdsdVp5QTlJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnZEdocGN5NWZjM0JsWVd0bGNpNWxiV2wwS0hSb2FYTXVYM053WldGclpYSXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUlRMbk4wYjNBc0lIUm9hWE1wTzF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl6Y0dWaGEyVnlMbU52Ym5OMGNuVmpkRzl5TG1WdGFYUW9YSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JsWVd0bGNpNWpiMjV6ZEhKMVkzUnZjaTVGVmtWT1ZGTXVjM1J2Y0N4Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6WEhKY2JpQWdJQ0FnSUNrN1hISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5dVJtbHVhWE5vSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2IyNUdhVzVwYzJnb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHOXVVbVZxWldOMElEMGdaU0E5UGlCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDNCc1lYbHBibWNnUFNCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNBZ0lIUm9hWE11WDNOd1pXRnJaWEl1WlcxcGRDaDBhR2x6TGw5emNHVmhhMlZ5TG1OdmJuTjBjblZqZEc5eUxrVldSVTVVVXk1emRHOXdMQ0IwYUdsektUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmMzQmxZV3RsY2k1amIyNXpkSEoxWTNSdmNpNWxiV2wwS0Z4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOd1pXRnJaWEl1WTI5dWMzUnlkV04wYjNJdVJWWkZUbFJUTG5OMGIzQXNYSEpjYmlBZ0lDQWdJQ0FnZEdocGMxeHlYRzRnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhjY2x4dUlDQWdJQ0FnSUNCZ0pIdDBhR2x6TG1OdmJuTjBjblZqZEc5eUxtNWhiV1Y5SUdWdVkyOTFiblJsY21Wa0lHRnVJSFZ1Wlhod1pXTjBaV1FnWlhKeWIzSTZJQ1I3WlgxZ1hISmNiaUFnSUNBZ0lDazdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHOXVSWEp5YjNJZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQnZia1Z5Y205eUtHVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lHTnZibk4wSUc5dVEyRnVZMlZzSUQwZ2RtRnNkV1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5d2JHRjVhVzVuSUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ0lDQjBhR2x6TGw5emNHVmhhMlZ5TG1WdGFYUW9kR2hwY3k1ZmMzQmxZV3RsY2k1amIyNXpkSEoxWTNSdmNpNUZWa1ZPVkZNdWFXNTBaWEp5ZFhCMExDQjBhR2x6S1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmYzNCbFlXdGxjaTVqYjI1emRISjFZM1J2Y2k1bGJXbDBLRnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM053WldGclpYSXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUlRMbWx1ZEdWeWNuVndkQ3hjY2x4dUlDQWdJQ0FnSUNCMGFHbHpYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzl1U1c1MFpYSnlkWEIwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2IyNUpiblJsY25KMWNIUW9kbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVWdQU0J1WlhjZ1JHVm1aWEp5WldRb2RXNWtaV1pwYm1Wa0xDQnZibEpsYzI5c2RtVXNJRzl1VW1WcVpXTjBMQ0J2YmtOaGJtTmxiQ2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjIxcGMyVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJTWlhSMWNtNGdkMmhsZEdobGNpQnZjaUJ1YjNRZ2RHaGxJSE53WldWamFDQm9ZWE1nY21WaFkyaGxaQ0JwZENkeklHVnVaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCZlkyaGxZMnRHYVc1cGMyaGxaQ2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWtiMjVsSUNZbUlIUm9hWE11WDJ4dlkyRnNWR2x0WlNBK1BTQjBhR2x6TGw5bGJtUlVhVzFsTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVjBjeUIwYUdVZ2NHeGhlV0poWTJzZ2MzUmhkR1VnYjJZZ2RHaGxJR0YxWkdsdkxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhISmNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUhCc1lYbHBibWNvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjR3hoZVdsdVp6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWRsZEhNZ2RHaGxJSFJsZUhRZ2IyWWdkR2hsSUhOd1pXVmphQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WldGa2IyNXNlVnh5WEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhISmNiaUFnSUNvdlhISmNiaUFnWjJWMElIUmxlSFFvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZkR1Y0ZER0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFZGxkSE1nWVNCemFHRnNiRzkzSUdOdmNIa2diMllnZEdobElITndaV1ZqYUcxaGNtdHpJR0Z5Y21GNUlHWnZjaUIwYUdVZ2MzQmxaV05vTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbFlXUnZibXg1WEhKY2JpQWdJQ29nUUhSNWNHVWdlMEZ5Y21GNUxqeFBZbXBsWTNRK2ZWeHlYRzRnSUNBcUwxeHlYRzRnSUdkbGRDQnpjR1ZsWTJodFlYSnJjeWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJiTGk0dWRHaHBjeTVmYzNCbFpXTm9iV0Z5YTNOZE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCaGJtUWdjMlYwY3lCMGFHVWdiblZ0WW1WeUlHOW1JSE5sWTI5dVpITWdkRzhnYjJabWMyVjBJSE53WldWamFHMWhjbXNnWlcxcGMzTnBiMjR1WEhKY2JpQWdJQ29nUUhSNWNHVWdlMjUxYldKbGNuMWNjbHh1SUNBZ0tpOWNjbHh1SUNCblpYUWdjM0JsWldOb2JXRnlhMDltWm5ObGRDZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emNHVmxZMmh0WVhKclQyWm1jMlYwSUM4Z01UQXdNRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE5sZENCemNHVmxZMmh0WVhKclQyWm1jMlYwS0c5bVpuTmxkQ2tnZTF4eVhHNGdJQ0FnZEdocGN5NWZjM0JsWldOb2JXRnlhMDltWm5ObGRDQTlJRzltWm5ObGRDQXFJREV3TURBN0lDOHZJRk4wYjNKbElHRnpJRzFwYkd4cGMyVmpiMjVrYzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1JXMXBkQ0J6Y0dWbFkyaHRZWEpySUcxbGMzTmhaMlZ6SUdGeklIUm9aWGtnWVhKbElHVnVZMjkxYm5SbGNtVmtJR2x1SUhONWJtTWdkMmwwYUNCaGRXUnBieTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmpkWEp5Wlc1MFZHbHRaU0F0SUVOMWNuSmxiblFnWjJ4dlltRnNJSFJwYldVZ2QyaGxiaUIxY0dSaGRHVWdkMkZ6SUdOaGJHeGxaQzVjY2x4dUlDQWdLaTljY2x4dUlDQjFjR1JoZEdVb1kzVnljbVZ1ZEZScGJXVXBJSHRjY2x4dUlDQWdJR2xtSUNnaGRHaHBjeTVmY0d4aGVXbHVaeWtnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5OGdWWEJrWVhSbElHeHZZMkZzSUdGMVpHbHZJSFJwYldWY2NseHVJQ0FnSUhSb2FYTXVYMnh2WTJGc1ZHbHRaU0E5SUdOMWNuSmxiblJVYVcxbElDMGdkR2hwY3k1ZmMzUmhjblJVYVcxbE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNnaGRHaHBjeTVmWkc5dVpTa2dlMXh5WEc0Z0lDQWdJQ0F2THlCRmJXbDBJSE53WldWamFHMWhjbXNnYldWemMyRm5aWE1nWm05eUlHMWhjbXR6SUhWd0lIUnZJSFJvWlNCamRYSnlaVzUwSUhScGJXVmNjbHh1SUNBZ0lDQWdkMmhwYkdVZ0tGeHlYRzRnSUNBZ0lDQWdJQ0YwYUdsekxsOWtiMjVsSUNZbVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEUxaGNtc3VkR2x0WlNBcklIUm9hWE11WDNOd1pXVmphRzFoY210UFptWnpaWFFnUEQwZ2RHaHBjeTVmYkc5allXeFVhVzFsWEhKY2JpQWdJQ0FnSUNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTndaV0ZyWlhJdVpXMXBkQ2hjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOd1pXRnJaWEl1WTI5dWMzUnlkV04wYjNJdVJWWkZUbFJUVzNSb2FYTXVYMk4xY25KbGJuUk5ZWEpyTG5SNWNHVmRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCemNHVmxZMmc2SUhSb2FYTXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhjbXM2SUhSb2FYTXVYMk4xY25KbGJuUk5ZWEpyTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UzWmhiSFZsTENCa2IyNWxmU0E5SUhSb2FYTXVYMjFoY210SmRHVnlMbTVsZUhRb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRTFoY21zZ1BTQjJZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2IyNWxJRDBnWkc5dVpUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklFVnVaQ0J3YkdGNVltRmphMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMk5vWldOclJtbHVhWE5vWldRb0tTa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBiM0FvS1R0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmY21WelpYUW9LVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZCc1lYa2dkR2hsSUhOd1pXVmphQ0JtY205dElIUm9aU0JpWldkcGJtNXBibWN1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdZM1Z5Y21WdWRGUnBiV1VnTFNCRGRYSnlaVzUwSUdkc2IySmhiQ0IwYVcxbElIZG9aVzRnY0d4aGVTQjNZWE1nWTJGc2JHVmtMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0J2YmtacGJtbHphQ0F0SUU5d2RHbHZibUZzSUdaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2IyNWpaU0IwYUdVZ2MzQmxaV05vWEhKY2JpQWdJQ29nY0hKdmJXbHpaU0J5WlhOdmJIWmxjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjI1RmNuSnZjaUF0SUU5d2RHbHZibUZzSUdaMWJtTjBhVzl1SUhSdklHVjRaV04xZEdVZ2FXWWdkR2hsSUhOd1pXVmphRnh5WEc0Z0lDQXFJR1Z1WTI5MWJuUmxjbk1nWVc1a0lHVnljbTl5SUdSMWNtbHVaeUJ3YkdGNVltRmpheTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVQWDBnYjI1SmJuUmxjbkoxY0hRZ0xTQlBjSFJwYjI1aGJDQm1kVzVqZEdsdmJpQjBieUJsZUdWamRYUmxJR2xtSUhSb1pTQnpjR1ZsWTJoY2NseHVJQ0FnS2lCcGN5QmpZVzVqWld4bFpDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEVaV1psY25KbFpIMGdVbVZ6YjJ4MlpYTWdiMjVqWlNCMGFHVWdjM0JsWldOb0lISmxZV05vWlhNZ2RHaGxJR1Z1WkNCdlppQndiR0Y1WW1GamF5NWNjbHh1SUNBZ0tpOWNjbHh1SUNCd2JHRjVLR04xY25KbGJuUlVhVzFsTENCdmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNUpiblJsY25KMWNIUXBJSHRjY2x4dUlDQWdJSFJvYVhNdVgzSmxjMlYwS0dOMWNuSmxiblJVYVcxbEtUdGNjbHh1SUNBZ0lIUm9hWE11WDNCc1lYbHBibWNnUFNCMGNuVmxPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYM053WldGclpYSXVaVzFwZENoMGFHbHpMbDl6Y0dWaGEyVnlMbU52Ym5OMGNuVmpkRzl5TGtWV1JVNVVVeTV3YkdGNUxDQjBhR2x6S1R0Y2NseHVJQ0FnSUhSb2FYTXVYM053WldGclpYSXVZMjl1YzNSeWRXTjBiM0l1WlcxcGRDaDBhR2x6TGw5emNHVmhhMlZ5TG1OdmJuTjBjblZqZEc5eUxrVldSVTVVVXk1d2JHRjVMQ0IwYUdsektUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkzSmxZWFJsVUhKdmJXbHpaU2h2YmtacGJtbHphQ3dnYjI1RmNuSnZjaXdnYjI1SmJuUmxjbkoxY0hRcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVR0YxYzJVZ2RHaGxJSE53WldWamFDQmhkQ0IwYUdVZ1kzVnljbVZ1ZENCMGFXMWxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHTjFjbkpsYm5SVWFXMWxJQzBnUTNWeWNtVnVkQ0JuYkc5aVlXd2dkR2x0WlNCM2FHVnVJSEJoZFhObElIZGhjeUJqWVd4c1pXUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NHRjFjMlVvWTNWeWNtVnVkRlJwYldVcElIdGNjbHh1SUNBZ0lIUm9hWE11WDNCc1lYbHBibWNnUFNCbVlXeHpaVHRjY2x4dUlDQWdJSFJvYVhNdVgzQmhkWE5sVkdsdFpTQTlJR04xY25KbGJuUlVhVzFsTzF4eVhHNWNjbHh1SUNBZ0lIUm9hWE11WDNOd1pXRnJaWEl1WlcxcGRDaDBhR2x6TGw5emNHVmhhMlZ5TG1OdmJuTjBjblZqZEc5eUxrVldSVTVVVXk1d1lYVnpaU3dnZEdocGN5azdYSEpjYmlBZ0lDQjBhR2x6TGw5emNHVmhhMlZ5TG1OdmJuTjBjblZqZEc5eUxtVnRhWFFvWEhKY2JpQWdJQ0FnSUhSb2FYTXVYM053WldGclpYSXVZMjl1YzNSeWRXTjBiM0l1UlZaRlRsUlRMbkJoZFhObExGeHlYRzRnSUNBZ0lDQjBhR2x6WEhKY2JpQWdJQ0FwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVnpkVzFsSUhSb1pTQnpjR1ZsWTJnZ1lYUWdkR2hsSUdOMWNuSmxiblFnZEdsdFpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCamRYSnlaVzUwVkdsdFpTQXRJRU4xY25KbGJuUWdaMnh2WW1Gc0lIUnBiV1VnZDJobGJpQnlaWE4xYldVZ2QyRnpJR05oYkd4bFpDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dVBYMGdiMjVHYVc1cGMyZ2dMU0JQY0hScGIyNWhiQ0JtZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUc5dVkyVWdkR2hsSUhOd1pXVmphRnh5WEc0Z0lDQXFJSEJ5YjIxcGMyVWdjbVZ6YjJ4MlpYTXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJRzl1UlhKeWIzSWdMU0JQY0hScGIyNWhiQ0JtZFc1amRHbHZiaUIwYnlCbGVHVmpkWFJsSUdsbUlIUm9aU0J6Y0dWbFkyaGNjbHh1SUNBZ0tpQmxibU52ZFc1MFpYSnpJR0Z1WkNCbGNuSnZjaUJrZFhKcGJtY2djR3hoZVdKaFkyc3VYSEpjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJqMTlJRzl1U1c1MFpYSnlkWEIwSUMwZ1QzQjBhVzl1WVd3Z1puVnVZM1JwYjI0Z2RHOGdaWGhsWTNWMFpTQnBaaUIwYUdVZ2MzQmxaV05vWEhKY2JpQWdJQ29nYVhNZ1kyRnVZMlZzWldRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JHVm1aWEp5WldSOUlGSmxjMjlzZG1WeklHOXVZMlVnZEdobElITndaV1ZqYUNCeVpXRmphR1Z6SUhSb1pTQmxibVFnYjJZZ2NHeGhlV0poWTJzdVhISmNiaUFnSUNvdlhISmNiaUFnY21WemRXMWxLR04xY25KbGJuUlVhVzFsTENCdmJrWnBibWx6YUN3Z2IyNUZjbkp2Y2l3Z2IyNUpiblJsY25KMWNIUXBJSHRjY2x4dUlDQWdJQzh2SUZCc1lYa2dabkp2YlNCMGFHVWdZbVZuYVc1dWFXNW5JR2xtSUhSb1pTQnpjR1ZsWTJnZ2FHRnpiaWQwSUhCc1lYbGxaQ0I1WlhSY2NseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNISnZiV2x6WlNrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5eVpYTmxkQ2hqZFhKeVpXNTBWR2x0WlNrN1hISmNiaUFnSUNBZ0lIUm9hWE11WDJOeVpXRjBaVkJ5YjIxcGMyVW9iMjVHYVc1cGMyZ3NJRzl1UlhKeWIzSXNJRzl1U1c1MFpYSnlkWEIwS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5d2JHRjVhVzVuSUQwZ2RISjFaVHRjY2x4dUlDQWdJSFJvYVhNdVgzTjBZWEowVkdsdFpTQXJQU0JqZFhKeVpXNTBWR2x0WlNBdElIUm9hWE11WDNCaGRYTmxWR2x0WlR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5emNHVmhhMlZ5TG1WdGFYUW9kR2hwY3k1ZmMzQmxZV3RsY2k1amIyNXpkSEoxWTNSdmNpNUZWa1ZPVkZNdWNtVnpkVzFsTENCMGFHbHpLVHRjY2x4dUlDQWdJSFJvYVhNdVgzTndaV0ZyWlhJdVkyOXVjM1J5ZFdOMGIzSXVaVzFwZENoY2NseHVJQ0FnSUNBZ2RHaHBjeTVmYzNCbFlXdGxjaTVqYjI1emRISjFZM1J2Y2k1RlZrVk9WRk11Y21WemRXMWxMRnh5WEc0Z0lDQWdJQ0IwYUdselhISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5d2NtOXRhWE5sTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1EyRnVZMlZzY3lCd2JHRjVZbUZqYXlCdlppQjBhR1VnYzNCbFpXTm9JR0YwSUhSb1pTQmpkWEp5Wlc1MElIUnBiV1V1SUVOaGJtTmxiQ0IwYUdVZ2MzQmxaV05vSUhCeWIyMXBjMlV1WEhKY2JpQWdJQ292WEhKY2JpQWdZMkZ1WTJWc0tDa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM0J5YjIxcGMyVXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZjSEp2YldselpTNWpZVzVqWld3b0tUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmNISnZiV2x6WlNBOUlHNTFiR3c3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmY0d4aGVXbHVaeUE5SUdaaGJITmxPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTNSdmNDQjBhR1VnYzNCbFpXTm9JR0Z1WkNCeVpYTmxkQ0IwYVcxbElIUnZJSFJvWlNCaVpXZHBibTVwYm1jdUlGSmxjMjlzZG1VZ2RHaGxJSE53WldWamFDQndjbTl0YVhObExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMGIzQW9LU0I3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTVmY0hKdmJXbHpaU2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl3Y205dGFYTmxMbkpsYzI5c2RtVW9LVHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZjSEp2YldselpTQTlJRzUxYkd3N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmNHeGhlV2x1WnlBOUlHWmhiSE5sTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnUVdKemRISmhZM1JUY0dWbFkyZzdJaXdpTHk4Z1EyOXdlWEpwWjJoMElFRnRZWHB2Ymk1amIyMHNJRWx1WXk0Z2IzSWdhWFJ6SUdGbVptbHNhV0YwWlhNdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYSEpjYmk4dklGTlFSRmd0VEdsalpXNXpaUzFKWkdWdWRHbG1hV1Z5T2lCTlNWUXRNRnh5WEc1cGJYQnZjblFnUVdKemRISmhZM1JUY0dWbFkyZ2dabkp2YlNBbkxpOUJZbk4wY21GamRGTndaV1ZqYUNjN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1ZHaGxJR0oxYVd4MExXbHVJR05zWVhOeklHWnZjaUJoYzNsdVkyaHliMjV2ZFhNZ1VISnZiV2x6WlhNdVhISmNiaUFxSUVCbGVIUmxjbTVoYkNCQmRXUnBiMXh5WEc0Z0tpQkFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG0xdmVtbHNiR0V1YjNKbkwyVnVMVlZUTDJSdlkzTXZWMlZpTDBGUVNTOUlWRTFNUVhWa2FXOUZiR1Z0Wlc1MEwwRjFaR2x2WEhKY2JpQXFMMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUJsZUhSbGJtUnpJRUZpYzNSeVlXTjBVM0JsWldOb1hISmNiaUFxSUVCaGJHbGhjeUJqYjNKbEwxTndaV1ZqYUZ4eVhHNGdLaTljY2x4dVkyeGhjM01nVTNCbFpXTm9JR1Y0ZEdWdVpITWdRV0p6ZEhKaFkzUlRjR1ZsWTJnZ2UxeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdFVaWGgwVkc5VGNHVmxZMmg5SUhOd1pXRnJaWElnTFNCVWFHVWdiM2R1WlhJZ2IyWWdkR2hsSUZOd1pXVmphQ0IwYUdGMElIZHBiR3dnWlcxcGRDQnpjR1ZsWTJodFlYSnJYSEpjYmlBZ0lDb2diV1Z6YzJGblpYTXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmxlSFFnTFNCVWFHVWdkR1Y0ZENCdlppQjBhR1VnYzNCbFpXTm9MbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBFOWlhbVZqZEQ1OUlGdHpjR1ZsWTJodFlYSnJjejFiWFYwZ0xTQkJiaUJoY25KaGVTQnZaaUJ6Y0dWbFkyaHRZWEpySUc5aWFtVmpkSE1nY21Wd2NtVnpaVzUwYVc1blhISmNiaUFnSUNvZ2RHaGxJSFJsZUhRZ1lXNWtJSFJwYldsdVp5QnZaaUIwYUdVZ2MzQmxaV05vTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JoZFdScGIwTnZibVpwWnlBdElFOWlhbVZqZENCamIyNTBZV2x1YVc1bklHRjFaR2x2SUdGdVpDQjFjbXd1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRsZUhSbGNtNWhiRHBCZFdScGIzMGdZWFZrYVc5RGIyNW1hV2N1WVhWa2FXOGdMU0JRYkdGNVlXSnNaU0JoZFdScGJ5QnZZbXBsWTNRdVhISmNiaUFnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2MzQmxZV3RsY2l3Z2RHVjRkQ3dnYzNCbFpXTm9iV0Z5YTNNZ1BTQmJYU3dnWVhWa2FXOURiMjVtYVdjcElIdGNjbHh1SUNBZ0lITjFjR1Z5S0hOd1pXRnJaWElzSUhSbGVIUXNJSE53WldWamFHMWhjbXR6S1R0Y2NseHVJQ0FnSUhSb2FYTXVYMkYxWkdsdklEMGdZWFZrYVc5RGIyNW1hV2N1WVhWa2FXODdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1MyVmxjQ0IwY21GamF5QnZaaUIzYUdWMGFHVnlJSFJvWlNCaGRXUnBieUJvWVhNZ1ptbHVhWE5vWldRZ2NHeGhlV2x1WnlCMGFISnZkV2RvWEhKY2JpQWdJQ0IwYUdsekxsOWhkV1JwYnk1dmJtVnVaR1ZrSUQwZ0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDloZFdScGIwWnBibWx6YUdWa0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCMGFHbHpMbDloZFdScGIwWnBibWx6YUdWa0lEMGdkSEoxWlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUY5amFHVmphMFpwYm1semFHVmtLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRjFaR2x2Um1sdWFYTm9aV1FnSmlZZ2MzVndaWEl1WDJOb1pXTnJSbWx1YVhOb1pXUW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkR2hsSUhCc1lYbGhZbXhsSUdGMVpHbHZJR1p2Y2lCMGFHVWdjM0JsWldOb0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhISmNiaUFnSUNvZ1FIUjVjR1VnZTJWNGRHVnlibUZzT2tGMVpHbHZmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0JoZFdScGJ5Z3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aGRXUnBienRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVkbGRITWdkR2hsSUdGMVpHbHZJSFp2YkhWdFpTQm1iM0lnZEdobElITndaV1ZqYUM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCMGVYQmxJSHR1ZFcxaVpYSjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1oyVjBJSFp2YkhWdFpTZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5aGRXUnBieTUyYjJ4MWJXVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUWlhSeklIUm9aU0JoZFdScGJ5QjJiMngxYldVZ1ptOXlJSFJvWlNCemNHVmxZMmd1WEhKY2JpQWdJQ292WEhKY2JpQWdjMlYwSUhadmJIVnRaU2gyYjJ4MWJXVXBJSHRjY2x4dUlDQWdJSFJvYVhNdVgyRjFaR2x2TG5admJIVnRaU0E5SUhadmJIVnRaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZObGRDQjBhR1VnWVhWa2FXOG5jeUJqZFhKeVpXNTBJR3h2WTJGc0lIUnBiV1VnWVc1a0lIQnNZWGtnYVhRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjl3YkdGNVFYVmthVzhvS1NCN1hISmNiaUFnSUNCcFppQW9kR2hwY3k1ZmMzQmxaV05vYldGeWEwOW1abk5sZENBOElEQXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZZWFZrYVc4dVkzVnljbVZ1ZEZScGJXVWdQU0IwYUdsekxsOXpjR1ZsWTJodFlYSnJUMlptYzJWME8xeHlYRzRnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmY0d4aGVXbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllYVmthVzh1WTNWeWNtVnVkRlJwYldVZ1BWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBb2RHaHBjeTVmYkc5allXeFVhVzFsSUNzZ2RHaHBjeTVmYzNCbFpXTm9iV0Z5YTA5bVpuTmxkQ2tnTHlBeE1EQXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVhWa2FXOHVjR3hoZVNncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlN3Z0xYUm9hWE11WDNOd1pXVmphRzFoY210UFptWnpaWFFwTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZZWFZrYVc4dVkzVnljbVZ1ZEZScGJXVWdQU0F3TzF4eVhHNGdJQ0FnSUNCMGFHbHpMbDloZFdScGJ5NXdiR0Y1S0NrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlFZWFZ6WlNCMGFHVWdZWFZrYVc4Z2IyNWpaU0JwZENCcGN5QndiR0Y1WVdKc1pTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNvdlhISmNiaUFnWDNCaGRYTmxRWFZrYVc4b0tTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5aGRXUnBieTV3YkdGNUtDa3VkR2hsYmlnb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNHeGhlV2x1WnlrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRjFaR2x2TG5CaGRYTmxLQ2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2NHeGhlU2hqZFhKeVpXNTBWR2x0WlN3Z2IyNUdhVzVwYzJnc0lHOXVSWEp5YjNJc0lHOXVTVzUwWlhKeWRYQjBLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOWhkV1JwYjBacGJtbHphR1ZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0IwYUdsekxsOXdiR0Y1UVhWa2FXOG9LVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYzNWd1pYSXVjR3hoZVNoamRYSnlaVzUwVkdsdFpTd2diMjVHYVc1cGMyZ3NJRzl1UlhKeWIzSXNJRzl1U1c1MFpYSnlkWEIwS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhCaGRYTmxLR04xY25KbGJuUlVhVzFsS1NCN1hISmNiaUFnSUNCMGFHbHpMbDl3WVhWelpVRjFaR2x2S0NrN1hISmNiaUFnSUNCemRYQmxjaTV3WVhWelpTaGpkWEp5Wlc1MFZHbHRaU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J5WlhOMWJXVW9ZM1Z5Y21WdWRGUnBiV1VzSUc5dVJtbHVhWE5vTENCdmJrVnljbTl5TENCdmJrbHVkR1Z5Y25Wd2RDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZllYVmthVzlHYVc1cGMyaGxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdkR2hwY3k1ZllYVmthVzh1Y0d4aGVTZ3BPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ6ZFhCbGNpNXlaWE4xYldVb1kzVnljbVZ1ZEZScGJXVXNJRzl1Um1sdWFYTm9MQ0J2YmtWeWNtOXlMQ0J2YmtsdWRHVnljblZ3ZENrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCallXNWpaV3dvS1NCN1hISmNiaUFnSUNCMGFHbHpMbDl3WVhWelpVRjFaR2x2S0NrN1hISmNiaUFnSUNCemRYQmxjaTVqWVc1alpXd29LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE4wYjNBb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5d1lYVnpaVUYxWkdsdktDazdYSEpjYmlBZ0lDQjBhR2x6TGw5aGRXUnBieTVqZFhKeVpXNTBWR2x0WlNBOUlEQTdYSEpjYmlBZ0lDQnpkWEJsY2k1emRHOXdLQ2s3WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUY0dWbFkyZzdYSEpjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JCYldGNmIyNHVZMjl0TENCSmJtTXVJRzl5SUdsMGN5QmhabVpwYkdsaGRHVnpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4eVhHNHZMeUJUVUVSWUxVeHBZMlZ1YzJVdFNXUmxiblJwWm1sbGNqb2dUVWxVTFRCY2NseHVhVzF3YjNKMElFRmljM1J5WVdOMFNHOXpkRVpsWVhSMWNtVWdabkp2YlNBblkyOXlaUzlCWW5OMGNtRmpkRWh2YzNSR1pXRjBkWEpsSnp0Y2NseHVhVzF3YjNKMElFRnVhVzFoZEdsdmJsVjBhV3h6SUdaeWIyMGdKMk52Y21VdllXNXBiWEJoWTJzdlFXNXBiV0YwYVc5dVZYUnBiSE1uTzF4eVhHNXBiWEJ2Y25RZ1RXRjBhRlYwYVd4eklHWnliMjBnSjJOdmNtVXZUV0YwYUZWMGFXeHpKenRjY2x4dWFXMXdiM0owSUVSbFptVnljbVZrSUdaeWIyMGdKMk52Y21VdlJHVm1aWEp5WldRbk8xeHlYRzVwYlhCdmNuUWdVM0JsWldOb0lHWnliMjBnSnk0dlFXSnpkSEpoWTNSVGNHVmxZMmduTzF4eVhHNXBiWEJ2Y25RZ1ZHVjRkRlJ2VTNCbFpXTm9WWFJwYkhNZ1puSnZiU0FuTGk5VVpYaDBWRzlUY0dWbFkyaFZkR2xzY3ljN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1ZHaGxJRUZ0WVhwdmJpQlFiMnhzZVNCelpYSjJhV05sSUc5aWFtVmpkQzVjY2x4dUlDb2dRR1Y0ZEdWeWJtRnNJRkJ2Ykd4NVhISmNiaUFxSUVCelpXVWdhSFIwY0hNNkx5OWtiMk56TG1GM2N5NWhiV0Y2YjI0dVkyOXRMMEZYVTBwaGRtRlRZM0pwY0hSVFJFc3ZiR0YwWlhOMEwwRlhVeTlRYjJ4c2VTNW9kRzFzWEhKY2JpQXFMMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRlJvWlNCd2NtVnphV2R1WlhJZ2IySnFaV04wSUhSb1lYUWdZMkZ1SUdKbElIVnpaV1FnZEc4Z1oyVnVaWEpoZEdVZ2NISmxjMmxuYm1Wa0lIVnliSE1nWm05eUlIUm9aU0JRYjJ4c2VTQnpaWEoyYVdObExseHlYRzRnS2lCQVpYaDBaWEp1WVd3Z1VISmxjMmxuYm1WeVhISmNiaUFxSUVCelpXVWdhSFIwY0hNNkx5OWtiMk56TG1GM2N5NWhiV0Y2YjI0dVkyOXRMMEZYVTBwaGRtRlRZM0pwY0hSVFJFc3ZiR0YwWlhOMEwwRlhVeTlRYjJ4c2VTOVFjbVZ6YVdkdVpYSXVhSFJ0YkZ4eVhHNGdLaTljY2x4dVhISmNiaTh2SUVGMllXbHNZV0pzWlNCdmNIUnBiMjV6SUdadmNpQlFiMnhzZVZ4eVhHNWpiMjV6ZENCbGJtZHBibVZ6SUQwZ1d5ZHpkR0Z1WkdGeVpDY3NJQ2R1WlhWeVlXd25YVHRjY2x4dVkyOXVjM1FnWVhWa2FXOUdiM0p0WVhSeklEMGdXeWR0Y0RNbkxDQW5iMmRuWDNadmNtSnBjeWNzSUNkd1kyMG5YVHRjY2x4dVkyOXVjM1FnYzNCbFpXTm9iV0Z5YTFSNWNHVnpJRDBnV3lkelpXNTBaVzVqWlNjc0lDZHpjMjFzSnl3Z0ozWnBjMlZ0WlNjc0lDZDNiM0prSjEwN1hISmNibU52Ym5OMElITmhiWEJzWlZKaGRHVnpJRDBnZTF4eVhHNGdJRzF3TXpvZ2UxeHlYRzRnSUNBZ2NtRjBaWE02SUZzbk9EQXdNQ2NzSUNjeE5qQXdNQ2NzSUNjeU1qQTFNQ2NzSUNjeU5EQXdNQ2RkTEZ4eVhHNGdJQ0FnWkdWbVlYVnNkSE02SUh0Y2NseHVJQ0FnSUNBZ2MzUmhibVJoY21RNklDY3lNRFV3Snl4Y2NseHVJQ0FnSUNBZ2JtVjFjbUZzT2lBbk1qUXdNQ2NzWEhKY2JpQWdJQ0I5TEZ4eVhHNGdJSDBzWEhKY2JpQWdjR050T2lCN1hISmNiaUFnSUNCeVlYUmxjem9nV3ljNE1EQXdKeXdnSnpFMk1EQXdKMTBzWEhKY2JpQWdJQ0JrWldaaGRXeDBjem9nZTF4eVhHNGdJQ0FnSUNCemRHRnVaR0Z5WkRvZ0p6RTJNREFuTEZ4eVhHNGdJQ0FnSUNCdVpYVnlZV3c2SUNjeE5qQXdKeXhjY2x4dUlDQWdJSDBzWEhKY2JpQWdmU3hjY2x4dWZUdGNjbHh1YzJGdGNHeGxVbUYwWlhNdWIyZG5YM1p2Y21KcGN5QTlJSE5oYlhCc1pWSmhkR1Z6TG0xd016dGNjbHh1YkdWMElHRjNjMVpsY25OcGIyNDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRbUZ6WlNCamJHRnpjeUJtYjNJZ2RIVnlibWx1WnlCMFpYaDBJR2x1Y0hWMElHbHVkRzhnY0d4aGVXRmliR1VnWVhWa2FXOHVJRlJvWlhKbElITm9iM1ZzWkNCaVpTQnZibVVnYVc1emRHRnVZMlZjY2x4dUlDb2djR1Z5SUhOd1pXRnJaWElzSUdWaFkyZ2dhVzV6ZEdGdVkyVWdZMkZ1SUhCc1lYa2diMjVzZVNCdmJtVWdjR2xsWTJVZ2IyWWdkR1Y0ZENCaGRDQmhJSFJwYldVdVhISmNiaUFxWEhKY2JpQXFJRUJsZUhSbGJtUnpJRUZpYzNSeVlXTjBTRzl6ZEVabFlYUjFjbVZjY2x4dUlDb2dRR0ZpYzNSeVlXTjBYSEpjYmlBcVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN0tHNTFiV0psY254MWJtUmxabWx1WldRcGZTQkJWMU5mVmtWU1UwbFBUaUF0SUVkbGRITWdkR2hsSUhabGNuTnBiMjRnYjJZZ1FWZFRJRk5FU3lCaVpXbHVaMXh5WEc0Z0tpQjFjMlZrTGlCWGFXeHNJR0psSUhWdVpHVm1hVzVsWkNCMWJuUnBiQ0JiYVc1cGRHbGhiR2w2WlZObGNuWnBZMlZkZTBCc2FXNXJJRUZpYzNSeVlXTjBWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaUzVwYm1sMGFXRnNhWHBsVTJWeWRtbGpaWDFjY2x4dUlDb2dhR0Z6SUdKbFpXNGdjM1ZqWTJWemMyWjFiR3g1SUdWNFpXTjFkR1ZrTGx4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzFCUFRFeFpYMDFKVGw5T1JWVlNRVXhmVmtWU1UwbFBUajBuTWk0MU1ETW5YU0F0SUVkbGRITWdkR2hsSUcxcGJtbHRkVzBnZG1WeWMybHZibHh5WEc0Z0tpQnZaaUIwYUdVZ1FWZFRJRk5FU3lCMGFHRjBJR2x6SUc1bFkyVnpjMkZ5ZVNCMGJ5QjFjMlVnYm1WMWNtRnNJSFp2YVdObGN5QjNhWFJvSUVGWFV5QlFiMnhzZVM1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0UFltcGxZM1I5SUZCUFRFeFpYMFJGUmtGVlRGUlRJQzBnUkdWbVlYVnNkQ0IyWVd4MVpYTWdkRzhnZFhObElIZHBkR2dnWTJGc2JITWdkRzhnZTBCc2FXNXJJR1Y0ZEdWeWJtRnNPbEJ2Ykd4NWZTNWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdFFUMHhNV1Y5RVJVWkJWVXhVVXk1RmJtZHBibVU5SjNOMFlXNWtZWEprSjExY2NseHVJQ29nUUhCeWIzQmxjblI1SUh0QmNuSmhlUzQ4YzNSeWFXNW5QbjBnVzFCUFRFeFpYMFJGUmtGVlRGUlRMa3hsZUdsamIyNU9ZVzFsY3oxYlhWMWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdFFUMHhNV1Y5RVJVWkJWVXhVVXk1UGRYUndkWFJHYjNKdFlYUTlKMjF3TXlkZFhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlVFOU1URmxmUkVWR1FWVk1WRk11VTJGdGNHeGxVbUYwWlQwbk1qSXdOVEFuWFZ4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzFCUFRFeFpYMFJGUmtGVlRGUlRMbFJsZUhROUp5ZGRYSEpjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQmJVRTlNVEZsZlJFVkdRVlZNVkZNdVZHVjRkRlI1Y0dVOUozTnpiV3duWFZ4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzFCUFRFeFpYMFJGUmtGVlRGUlRMbFp2YVdObFNXUTlKMEZ0ZVNkZFhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlVFOU1URmxmUkVWR1FWVk1WRk11VEdGdVozVmhaMlZEYjJSbFBTZGxiaTFIUWlkZFhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlVFOU1URmxmUkVWR1FWVk1WRk11VEdGdVozVmhaMlZPWVcxbFBTZENjbWwwYVhOb0lFVnVaMnhwYzJnblhWeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwRnljbUY1TGp4emRISnBibWMrZlNCYlVFOU1URmxmVms5SlEwVlRQVnRkWFNBdElFRnVJR0Z5Y21GNUlHOW1JSFp2YVdObGN5QmhkbUZwYkdGaWJHVWdhVzVjY2x4dUlDb2dVRzlzYkhrdUlGZHBiR3dnWW1VZ1pXMXdkSGtnZFc1MGFXd2dXMmx1YVhScFlXeHBlbVZUWlhKMmFXTmxYWHRBYkdsdWF5QkJZbk4wY21GamRGUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVXVhVzVwZEdsaGJHbDZaVk5sY25acFkyVjlYSEpjYmlBcUlHaGhjeUJpWldWdUlITjFZMk5sYzNObWRXeHNlU0JsZUdWamRYUmxaQzRnVTJWbElGdFFiMnhzZVNCRWIyTjFiV1Z1ZEdGMGFXOXVYWHRBYkdsdWF5Qm9kSFJ3Y3pvdkwyUnZZM011WVhkekxtRnRZWHB2Ymk1amIyMHZjRzlzYkhrdmJHRjBaWE4wTDJSbkwzWnZhV05sYkdsemRDNW9kRzFzZlZ4eVhHNGdLaUJtYjNJZ1lTQm1kV3hzSUd4cGMzUWdiMllnWVhaaGFXeGhZbXhsSUhadmFXTmxjeTVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRQWW1wbFkzUjlJRnRRVDB4TVdWOU1RVTVIVlVGSFJWTTllMzFkSUMwZ1FXNGdiMkpxWldOMElIUm9ZWFFnYldGd2N5QnNZVzVuZFdGblpTQnVZVzFsYzF4eVhHNGdLaUIwYnlCc1lXNW5kV0ZuWlNCamIyUmxjeUIwYUdGMElHRnlaU0JoZG1GcGJHRmliR1VnYVc0Z1VHOXNiSGt1SUZkcGJHd2dZbVVnWlcxd2RIa2dkVzUwYVd4Y2NseHVJQ29nVzJsdWFYUnBZV3hwZW1WVFpYSjJhV05sWFh0QWJHbHVheUJCWW5OMGNtRmpkRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVV1YVc1cGRHbGhiR2w2WlZObGNuWnBZMlY5WEhKY2JpQXFJR2hoY3lCaVpXVnVJSE4xWTJObGMzTm1kV3hzZVNCbGVHVmpkWFJsWkM0Z1UyVmxJRnRRYjJ4c2VTQkViMk4xYldWdWRHRjBhVzl1WFh0QWJHbHVheUJvZEhSd2N6b3ZMMlJ2WTNNdVlYZHpMbUZ0WVhwdmJpNWpiMjB2Y0c5c2JIa3ZiR0YwWlhOMEwyUm5MMU4xY0hCdmNuUmxaRXhoYm1kMVlXZGxMbWgwYld4OVhISmNiaUFxSUdadmNpQmhJR1oxYkd3Z2JHbHpkQ0J2WmlCaGRtRnBiR0ZpYkdVZ2JHRnVaM1ZoWjJWeklHRnVaQ0JqYjNKeVpYTndiMjVrYVc1bklHTnZaR1Z6TGx4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTA5aWFtVmpkSDBnVzFCUFRFeFpYMHhCVGtkVlFVZEZYME5QUkVWVFBYdDlYU0F0SUVGdUlHOWlhbVZqZENCMGFHRjBJRzFoY0hNZ2JHRnVaM1ZoWjJVZ1kyOWtaWE5jY2x4dUlDb2dkRzhnYkdGdVozVmhaMlVnYm1GdFpYTWdkR2hoZENCaGNtVWdZWFpoYVd4aFlteGxJR2x1SUZCdmJHeDVMaUJYYVd4c0lHSmxJR1Z0Y0hSNUlIVnVkR2xzWEhKY2JpQXFJRnRwYm1sMGFXRnNhWHBsVTJWeWRtbGpaVjE3UUd4cGJtc2dRV0p6ZEhKaFkzUlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxMbWx1YVhScFlXeHBlbVZUWlhKMmFXTmxmVnh5WEc0Z0tpQm9ZWE1nWW1WbGJpQnpkV05qWlhOelpuVnNiSGtnWlhobFkzVjBaV1F1SUZObFpTQmJVRzlzYkhrZ1JHOWpkVzFsYm5SaGRHbHZibDE3UUd4cGJtc2dhSFIwY0hNNkx5OWtiMk56TG1GM2N5NWhiV0Y2YjI0dVkyOXRMM0J2Ykd4NUwyeGhkR1Z6ZEM5a1p5OVRkWEJ3YjNKMFpXUk1ZVzVuZFdGblpTNW9kRzFzZlZ4eVhHNGdLaUJtYjNJZ1lTQm1kV3hzSUd4cGMzUWdiMllnWVhaaGFXeGhZbXhsSUd4aGJtZDFZV2RsY3lCaGJtUWdZMjl5Y21WemNHOXVaR2x1WnlCamIyUmxjeTVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRQWW1wbFkzUjlJRVZXUlU1VVV5QXRJRUoxYVd4MExXbHVJRzFsYzNOaFoyVnpJSFJvWVhRZ2RHaGxJR1psWVhSMWNtVWdaVzFwZEhNdUlGZG9aVzRnZEdobFhISmNiaUFxSUdabFlYUjFjbVVnYVhNZ1lXUmtaV1FnZEc4Z1lTQjdRR3hwYm1zZ1kyOXlaUzlJYjNOMFQySnFaV04wZlN3Z1pYWmxiblFnYm1GdFpYTWdkMmxzYkNCaVpTQndjbVZtYVhobFpDQmllU0IwYUdWY2NseHVJQ29nYm1GdFpTQnZaaUIwYUdVZ1ptVmhkSFZ5WlNCamJHRnpjeUFySUNjdUp5NWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkZNdWNtVmhaSGs5YjI1U1pXRmtlVVYyWlc1MFhTQXRJRTFsYzNOaFoyVWdkR2hoZENCcGN5QmxiV2wwZEdWa0lHRm1kR1Z5WEhKY2JpQXFJRnRwYm1sMGFXRnNhWHBsVTJWeWRtbGpaVjE3UUd4cGJtc2dRV0p6ZEhKaFkzUlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxMbWx1YVhScFlXeHBlbVZUWlhKMmFXTmxmU0JvWVhNZ1ltVmxibHh5WEc0Z0tpQnpkV05qWlhOelpuVnNiSGtnWlhobFkzVjBaV1F1WEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JiUlZaRlRsUlRMbkJzWVhrOWIyNVFiR0Y1UlhabGJuUmRJQzBnVFdWemMyRm5aU0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdZV1owWlhKY2NseHVJQ29nWldGamFDQmpZV3hzSUhSdklGdHdiR0Y1WFh0QWJHbHVheUJCWW5OMGNtRmpkRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVqY0d4aGVYMHVJRlJvWlNCemNHVmxZMmdnZEdoaGRDQjNZWE1nY0d4aGVXVmtYSEpjYmlBcUlHbHpJSE4xY0hCc2FXVmtJR0Z6SUdGdUlHRnlaM1Z0Wlc1MElIUnZJR3hwYzNSbGJtVnlJR1oxYm1OMGFXOXVjeTVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJRnRGVmtWT1ZGTXVjR0YxYzJVOWIyNVFZWFZ6WlVWMlpXNTBYU0F0SUUxbGMzTmhaMlVnZEdoaGRDQnBjeUJsYldsMGRHVmtJR0ZtZEdWeVhISmNiaUFxSUdWaFkyZ2dZMkZzYkNCMGJ5QmJjR0YxYzJWZGUwQnNhVzVySUVGaWMzUnlZV04wVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlNOd1lYVnpaWDB1SUZSb1pTQnpjR1ZsWTJnZ2RHaGhkQ0IzWVhNZ2NHRjFjMlZrWEhKY2JpQXFJR2x6SUhOMWNIQnNhV1ZrSUdGeklHRnVJR0Z5WjNWdFpXNTBJSFJ2SUd4cGMzUmxibVZ5SUdaMWJtTjBhVzl1Y3k1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUZ0RlZrVk9WRk11Y21WemRXMWxQVzl1VW1WemRXMWxSWFpsYm5SZElDMGdUV1Z6YzJGblpTQjBhR0YwSUdseklHVnRhWFIwWldRZ1lXWjBaWEpjY2x4dUlDb2daV0ZqYUNCallXeHNJSFJ2SUZ0eVpYTjFiV1ZkZTBCc2FXNXJJRUZpYzNSeVlXTjBWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaU055WlhOMWJXVjlMaUJVYUdVZ2MzQmxaV05vSUhSb1lYUWdkMkZ6WEhKY2JpQXFJSEpsYzNWdFpXUWdhWE1nYzNWd2NHeHBaV1FnWVhNZ1lXNGdZWEpuZFcxbGJuUWdkRzhnYkdsemRHVnVaWElnWm5WdVkzUnBiMjV6TGx4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnVzBWV1JVNVVVeTVwYm5SbGNuSjFjSFE5YjI1SmJuUmxjbkoxY0hSRmRtVnVkRjBnTFNCTlpYTnpZV2RsSUhSb1lYUWdhWE1nWlcxcGRIUmxaRnh5WEc0Z0tpQnBaaUIwYUdWeVpTQnBjeUJoSUdOMWNuSmxiblFnYzNCbFpXTm9JR2x1SUhCeWIyZHlaWE56SUdGdVpDQmJjR3hoZVYxN1FHeHBibXNnUVdKemRISmhZM1JVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsSTNCc1lYbDlYSEpjYmlBcUlHOXlJRnR5WlhOMWJXVmRlMEJzYVc1cklFRmljM1J5WVdOMFZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTTnlaWE4xYldWOUlHRnlaU0JsZUdWamRYUmxaQ0JtYjNJZ1lTQnVaWGNnYzNCbFpXTm9MbHh5WEc0Z0tpQlVhR1VnYzNCbFpXTm9JSFJvWVhRZ2QyRnpJR2x1ZEdWeWNuVndkR1ZrSUdseklITjFjSEJzYVdWa0lHRnpJR0Z1SUdGeVozVnRaVzUwSUhSdklHeHBjM1JsYm1WeUlHWjFibU4wYVc5dWN5NWNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlGdEZWa1ZPVkZNdWMzUnZjRDF2YmxOMGIzQkZkbVZ1ZEYwZ0xTQk5aWE56WVdkbElIUm9ZWFFnYVhNZ1pXMXBkSFJsWkNCaFpuUmxjbHh5WEc0Z0tpQmxZV05vSUdOaGJHd2dkRzhnVzNOMGIzQmRlMEJzYVc1cklFRmljM1J5WVdOMFZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTTnpkRzl3ZlNCaGJtUWdkMmhsYmlCaElITndaV1ZqYUNCeVpXRmphR1Z6WEhKY2JpQXFJSFJvWlNCbGJtUWdiMllnY0d4aGVXSmhZMnN1SUZSb1pTQnpjR1ZsWTJnZ2RHaGhkQ0IzWVhNZ2MzUnZjSEJsWkNCcGN5QnpkWEJ3YkdsbFpDQmhjeUJoYmlCaGNtZDFiV1Z1ZEZ4eVhHNGdLaUIwYnlCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJUTG5ObGJuUmxibU5sUFc5dVUyVnVkR1Z1WTJWRmRtVnVkRjBnTFNCTlpYTnpZV2RsSUhSb1lYUWdhWE1nWlcxcGRIUmxaRnh5WEc0Z0tpQmxZV05vSUhScGJXVWdZU0J6Wlc1MFpXNWpaU0J6Y0dWbFkyaHRZWEpySUdseklHVnVZMjkxYm5SbGNtVmtJSGRvYjNObElIUnBiV1Z6ZEdGdGNDQnRZWFJqYUdWeklIVndJSGRwZEdoY2NseHVJQ29nZEdobElITndaV1ZqYUNCaGRXUnBieWR6SUdOMWNuSmxiblFnZEdsdFpTNGdWR2hsSUhObGJuUmxibU5sSUhOd1pXVmphRzFoY21zZ2IySnFaV04wSUdseklITjFjSEJzYVdWa0lHRnpYSEpjYmlBcUlHRnVJR0Z5WjNWdFpXNTBJSFJ2SUd4cGMzUmxibVZ5SUdaMWJtTjBhVzl1Y3k1Y2NseHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUZ0RlZrVk9WRk11ZDI5eVpEMXZibGR2Y21SRmRtVnVkRjBnTFNCTlpYTnpZV2RsSUhSb1lYUWdhWE1nWlcxcGRIUmxaRnh5WEc0Z0tpQmxZV05vSUhScGJXVWdZU0IzYjNKa0lITndaV1ZqYUcxaGNtc2dhWE1nWlc1amIzVnVkR1Z5WldRZ2QyaHZjMlVnZEdsdFpYTjBZVzF3SUcxaGRHTm9aWE1nZFhBZ2QybDBhRnh5WEc0Z0tpQjBhR1VnYzNCbFpXTm9JR0YxWkdsdkozTWdZM1Z5Y21WdWRDQjBhVzFsTGlCVWFHVWdkMjl5WkNCemNHVmxZMmh0WVhKcklHOWlhbVZqZENCcGN5QnpkWEJ3YkdsbFpDQmhjMXh5WEc0Z0tpQmhiaUJoY21kMWJXVnVkQ0IwYnlCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJUTG5acGMyVnRaVDF2YmxacGMyVnRaVVYyWlc1MFhTQXRJRTFsYzNOaFoyVWdkR2hoZENCcGN5QmxiV2wwZEdWa1hISmNiaUFxSUdWaFkyZ2dkR2x0WlNCaElIWnBjMlZ0WlNCemNHVmxZMmh0WVhKcklHbHpJR1Z1WTI5MWJuUmxjbVZrSUhkb2IzTmxJSFJwYldWemRHRnRjQ0J0WVhSamFHVnpJSFZ3SUhkcGRHaGNjbHh1SUNvZ2RHaGxJSE53WldWamFDQmhkV1JwYnlkeklHTjFjbkpsYm5RZ2RHbHRaUzRnVkdobElIWnBjMlZ0WlNCemNHVmxZMmh0WVhKcklHOWlhbVZqZENCcGN5QnpkWEJ3YkdsbFpDQmhjMXh5WEc0Z0tpQmhiaUJoY21kMWJXVnVkQ0IwYnlCc2FYTjBaVzVsY2lCbWRXNWpkR2x2Ym5NdVhISmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCYlJWWkZUbFJUTG5OemJXdzliMjVUYzIxc1JYWmxiblJkSUMwZ1RXVnpjMkZuWlNCMGFHRjBJR2x6SUdWdGFYUjBaV1JjY2x4dUlDb2daV0ZqYUNCMGFXMWxJR0VnYzNOdGJDQnpjR1ZsWTJodFlYSnJJR2x6SUdWdVkyOTFiblJsY21Wa0lIZG9iM05sSUhScGJXVnpkR0Z0Y0NCdFlYUmphR1Z6SUhWd0lIZHBkR2hjY2x4dUlDb2dkR2hsSUhOd1pXVmphQ0JoZFdScGJ5ZHpJR04xY25KbGJuUWdkR2x0WlM0Z1ZHaGxJSE56Yld3Z2MzQmxaV05vYldGeWF5QnZZbXBsWTNRZ2FYTWdjM1Z3Y0d4cFpXUWdZWE5jY2x4dUlDb2dZVzRnWVhKbmRXMWxiblFnZEc4Z2JHbHpkR1Z1WlhJZ1puVnVZM1JwYjI1ekxseHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwOWlhbVZqZEgwZ1UwVlNWa2xEUlZNZ0xTQkJWMU1nYzJWeWRtbGpaWE1nZEdoaGRDQmhjbVVnYm1WalpYTnpZWEo1SUdadmNpQjBhR1VnWm1WaGRIVnlaVnh5WEc0Z0tpQjBieUJtZFc1amRHbHZiaTVjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHRsZUhSbGNtNWhiRHBRYjJ4c2VYMGdVMFZTVmtsRFJWTXVjRzlzYkhrZ0xTQlVhR1VnVUc5c2JIa2djMlZ5ZG1salpTQjBhR0YwSUdseklIVnpaV1JjY2x4dUlDb2dkRzhnYzNsdWRHaGxjMmw2WlNCemNHVmxZMmh0WVhKcmN5NGdWMmxzYkNCaVpTQjFibVJsWm1sdVpXUWdkVzUwYVd3Z1cybHVhWFJwWVd4cGVtVlRaWEoyYVdObFhYdEFiR2x1YXlCQlluTjBjbUZqZEZSbGVIUlViMU53WldWamFFWmxZWFIxY21VdWFXNXBkR2xoYkdsNlpWTmxjblpwWTJWOVhISmNiaUFxSUdoaGN5QmlaV1Z1SUhOMVkyTmxjM05tZFd4c2VTQmxlR1ZqZFhSbFpGeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UyVjRkR1Z5Ym1Gc09sQnlaWE5wWjI1bGNuMGdVMFZTVmtsRFJWTXVjSEpsYzJsbmJtVnlJQzBnVkdobElGQnZiR3g1SUZCeVpYTnBaMjVsY2x4eVhHNGdLaUJ2WW1wbFkzUWdkR2hoZENCcGN5QjFjMlZrSUhSdklITjViblJvWlhOcGVtVWdjM0JsWldOb0lHRjFaR2x2TGlCWGFXeHNJR0psSUhWdVpHVm1hVzVsWkNCMWJuUnBiRnh5WEc0Z0tpQmJhVzVwZEdsaGJHbDZaVk5sY25acFkyVmRlMEJzYVc1cklFRmljM1J5WVdOMFZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTNXBibWwwYVdGc2FYcGxVMlZ5ZG1salpYMWNjbHh1SUNvZ2FHRnpJR0psWlc0Z2MzVmpZMlZ6YzJaMWJHeDVJR1Y0WldOMWRHVmtMbHh5WEc0Z0tpOWNjbHh1WTJ4aGMzTWdRV0p6ZEhKaFkzUlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxJR1Y0ZEdWdVpITWdRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaU0I3WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUdOdmJuTjBjblZqZEc5eVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTJOdmNtVXZTRzl6ZEU5aWFtVmpkSDBnYUc5emRDQXRJRWh2YzNRZ2IySnFaV04wSUcxaGJtRm5hVzVuSUhSb1pTQm1aV0YwZFhKbExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ2IzQjBhVzl1Y3lBdElFOXdkR2x2Ym5NZ2RHaGhkQ0IzYVd4c0lHSmxJSE5sYm5RZ2RHOGdVRzlzYkhrZ1ptOXlJR1ZoWTJnZ2MzQmxaV05vTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5QWDBnYjNCMGFXOXVjeTUyYjJsalpTQXRJRlJvWlNCdVlXMWxJRzltSUhSb1pTQlFiMnhzZVNCMmIybGpaU0IwYnlCMWMyVWdabTl5SUdGc2JDQnpjR1ZsWTJndVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWM5ZlNCdmNIUnBiMjV6TG1WdVoybHVaU0F0SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0JRYjJ4c2VTQmxibWRwYm1VZ2RHOGdkWE5sSUdadmNpQmhiR3dnYzNCbFpXTm9MbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1blBYMGdiM0IwYVc5dWN5NXNZVzVuZFdGblpTQXRJRlJvWlNCdVlXMWxJRzltSUhSb1pTQnNZVzVuZFdGblpTQjBieUIxYzJVZ1ptOXlJR0ZzYkNCemNHVmxZMmd1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRoZFdScGIwWnZjbTFoZEgwZ1cyOXdkR2x2Ym5NdVlYVmthVzlHYjNKdFlYUTlKMjF3TXlkZElDMGdWR2hsSUdadmNtMWhkQ0IwYnlCMWMyVWdabTl5SUdkbGJtVnlZWFJsWkZ4eVhHNGdJQ0FxSUdGMVpHbHZJR1p2Y2lCaGJHd2djM0JsWldOb1pYTXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1jOWZTQnZjSFJwYjI1ekxuTmhiWEJzWlZKaGRHVWdMU0JVYUdVZ2MyRnRjR3hsSUhKaGRHVWdabTl5SUdGMVpHbHZJR1pwYkdWeklHWnZjaUJoYkd4Y2NseHVJQ0FnS2lCemNHVmxZMmhsY3k1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnVzI5d2RHbHZibk11YzNCbFpXTm9iV0Z5YTA5bVpuTmxkRDB3WFNBdElFRnRiM1Z1ZENCdlppQjBhVzFsSUdsdUlITmxZMjl1WkhNZ2RHOWNjbHh1SUNBZ0tpQnZabVp6WlhRZ2MzQmxaV05vYldGeWF5QmxkbVZ1ZENCbGJXbHpjMmx2YmlCbWNtOXRJSFJvWlNCaGRXUnBieTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdXMjl3ZEdsdmJuTXViV2x1Ulc1a1RXRnlhMFIxY21GMGFXOXVQUzR3TlYwZ0xTQlVhR1VnYldsdWFXMTFiU0JoYlc5MWJuUWdiMllnZEdsdFpWeHlYRzRnSUNBcUlHbHVJSE5sWTI5dVpITWdkR2hoZENCMGFHVWdiR0Z6ZENCemNHVmxZMmh0WVhKcklHOW1JR1ZoWTJnZ2RIbHdaU0JwYmlCaElITndaV1ZqYUNCallXNGdhR0YyWlNCcGRITmNjbHh1SUNBZ0tpQmtkWEpoZEdsdmJpQndjbTl3WlhKMGVTQnpaWFFnZEc4dVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0dmNIUnBiMjV6TG5admJIVnRaVDB4WFNBdElGUm9aU0JrWldaaGRXeDBJSFp2YkhWdFpTQjBieUJ3YkdGNUlITndaV1ZqYUNCaGRXUnBiMXh5WEc0Z0lDQXFJSGRwZEdndVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCYmIzQjBhVzl1Y3k1cGMwZHNiMkpoYkQxbVlXeHpaVjBnTFNCWGFHVjBhR1Z5SUhSb1pTQmhkV1JwYnlCemIzVnlZMlVnYzJodmRXeGtJR1JsWm1GMWJIUmNjbHh1SUNBZ0tpQjBieUJuYkc5aVlXd2djbVZuWVhKa2JHVnpjeUJ2WmlCM2FHVjBhR1Z5SUc5eUlHNXZkQ0JwZENCcGN5QmhkSFJoWTJobFpDQjBieUJoYmlCdlltcGxZM1F1WEhKY2JpQWdJQ292WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvWEhKY2JpQWdJQ0JvYjNOMExGeHlYRzRnSUNBZ2IzQjBhVzl1Y3lBOUlIdGNjbHh1SUNBZ0lDQWdkbTlwWTJVNklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdaVzVuYVc1bE9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJR3hoYm1kMVlXZGxPaUIxYm1SbFptbHVaV1FzWEhKY2JpQWdJQ0FnSUdGMVpHbHZSbTl5YldGME9pQW5iWEF6Snl4Y2NseHVJQ0FnSUNBZ2MyRnRjR3hsVW1GMFpUb2dkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0J6Y0dWbFkyaHRZWEpyVDJabWMyVjBPaUF3TEZ4eVhHNGdJQ0FnSUNCdGFXNUZibVJOWVhKclJIVnlZWFJwYjI0NklEQXVNRFVzWEhKY2JpQWdJQ0FnSUhadmJIVnRaVG9nTVN4Y2NseHVJQ0FnSUNBZ2FYTkhiRzlpWVd3NklHWmhiSE5sTEZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ2tnZTF4eVhHNGdJQ0FnYzNWd1pYSW9hRzl6ZENrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZmMzQmxaV05vUTJGamFHVWdQU0I3ZlR0Y2NseHVJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlRjR1ZsWTJnZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGQnliMjFwYzJVZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnZEdocGN5NWZhWE5XWVd4cFpHRjBaV1FnUFNCbVlXeHpaVHRjY2x4dUlDQWdJSFJvYVhNdWMzQmxaV05vYldGeWEwOW1abk5sZENBOUlFNTFiV0psY2k1cGMwNWhUaWhPZFcxaVpYSW9iM0IwYVc5dWN5NXpjR1ZsWTJodFlYSnJUMlptYzJWMEtTbGNjbHh1SUNBZ0lDQWdQeUF3WEhKY2JpQWdJQ0FnSURvZ1RuVnRZbVZ5S0c5d2RHbHZibk11YzNCbFpXTm9iV0Z5YTA5bVpuTmxkQ2s3WEhKY2JpQWdJQ0IwYUdsekxtMXBia1Z1WkUxaGNtdEVkWEpoZEdsdmJpQTlJRTUxYldKbGNpNXBjMDVoVGloT2RXMWlaWElvYjNCMGFXOXVjeTV0YVc1RmJtUk5ZWEpyUkhWeVlYUnBiMjRwS1Z4eVhHNGdJQ0FnSUNBL0lEQmNjbHh1SUNBZ0lDQWdPaUJPZFcxaVpYSW9iM0IwYVc5dWN5NXRhVzVGYm1STllYSnJSSFZ5WVhScGIyNHBPMXh5WEc0Z0lDQWdkR2hwY3k1MmIyeDFiV1VnUFNCT2RXMWlaWEl1YVhOT1lVNG9UblZ0WW1WeUtHOXdkR2x2Ym5NdWRtOXNkVzFsS1NsY2NseHVJQ0FnSUNBZ1B5QXhYSEpjYmlBZ0lDQWdJRG9nVG5WdFltVnlLRzl3ZEdsdmJuTXVkbTlzZFcxbEtUdGNjbHh1SUNBZ0lIUm9hWE11WDJselIyeHZZbUZzSUQwZ2IzQjBhVzl1Y3k1cGMwZHNiMkpoYkNCOGZDQm1ZV3h6WlR0Y2NseHVJQ0FnSUhSb2FYTXVYM0J5YjIxcGMyVnpJRDBnZTF4eVhHNGdJQ0FnSUNCMmIyeDFiV1U2SUVSbFptVnljbVZrTG5KbGMyOXNkbVVvS1N4Y2NseHVJQ0FnSUgwN1hISmNiaUFnSUNCMGFHbHpMbDkyYjJ4MWJXVlFZWFZ6WldRZ1BTQm1ZV3h6WlR0Y2NseHVYSEpjYmlBZ0lDQXZMeUJUWlhRZ1pHVm1ZWFZzZENCdmNIUnBiMjV6SUdadmNpQmxZV05vSUhOd1pXVmphRnh5WEc0Z0lDQWdkR2hwY3k1ZmRtOXBZMlVnUFNCdmNIUnBiMjV6TG5admFXTmxJSHg4SUhSb2FYTXVZMjl1YzNSeWRXTjBiM0l1VUU5TVRGbGZSRVZHUVZWTVZGTXVWbTlwWTJWSlpEdGNjbHh1SUNBZ0lIUm9hWE11WDJ4aGJtZDFZV2RsSUQxY2NseHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1c1lXNW5kV0ZuWlNCOGZDQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxsQlBURXhaWDBSRlJrRlZURlJUTGt4aGJtZDFZV2RsVG1GdFpUdGNjbHh1SUNBZ0lIUm9hWE11WDJWdVoybHVaU0E5SUdWdVoybHVaWE11YVc1amJIVmtaWE1vYjNCMGFXOXVjeTVsYm1kcGJtVXBYSEpjYmlBZ0lDQWdJRDhnYjNCMGFXOXVjeTVsYm1kcGJtVmNjbHh1SUNBZ0lDQWdPaUIwYUdsekxtTnZibk4wY25WamRHOXlMbEJQVEV4WlgwUkZSa0ZWVEZSVExrVnVaMmx1WlR0Y2NseHVJQ0FnSUhSb2FYTXVYMkYxWkdsdlJtOXliV0YwSUQwZ1lYVmthVzlHYjNKdFlYUnpMbWx1WTJ4MVpHVnpLRzl3ZEdsdmJuTXVZWFZrYVc5R2IzSnRZWFFwWEhKY2JpQWdJQ0FnSUQ4Z2IzQjBhVzl1Y3k1aGRXUnBiMFp2Y20xaGRGeHlYRzRnSUNBZ0lDQTZJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVVRTlNVEZsZlJFVkdRVlZNVkZNdVQzVjBjSFYwUm05eWJXRjBPMXh5WEc0Z0lDQWdkR2hwY3k1ZmMyRnRjR3hsVW1GMFpTQTlJSE5oYlhCc1pWSmhkR1Z6VzNSb2FYTXVYMkYxWkdsdlJtOXliV0YwWFM1eVlYUmxjeTVwYm1Oc2RXUmxjeWhjY2x4dUlDQWdJQ0FnYjNCMGFXOXVjeTV6WVcxd2JHVlNZWFJsWEhKY2JpQWdJQ0FwWEhKY2JpQWdJQ0FnSUQ4Z2IzQjBhVzl1Y3k1ellXMXdiR1ZTWVhSbFhISmNiaUFnSUNBZ0lEb2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpNVFUMHhNV1Y5RVJVWkJWVXhVVXk1VFlXMXdiR1ZTWVhSbE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVM1J2Y21VZ1VHOXNiSGtzSUZCeVpYTnBaMjVsY2lCaGJtUWdRVmRUSUZORVN5QldaWEp6YVc5dUlHWnZjaUIxYzJVZ1lXTnliM056SUdGc2JDQnBibk4wWVc1alpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyVjRkR1Z5Ym1Gc09sQnZiR3g1ZlNCd2IyeHNlU0F0SUZCdmJHeDVJR2x1YzNSaGJtTmxJSFJ2SUhWelpTQjBieUJuWlc1bGNtRjBaU0J6Y0dWbFkyaHRZWEpyY3k1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTJWNGRHVnlibUZzT2xCeVpYTnBaMjVsY24wZ2NISmxjMmxuYm1WeUlDMGdVSEpsYzJsbmJtVnlJR2x1YzNSaGJtTmxJSFJ2SUhWelpTQjBieUJuWlc1bGNtRjBaVnh5WEc0Z0lDQXFJR0YxWkdsdklGVlNUSE11WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFpsY25OcGIyNGdMU0JXWlhKemFXOXVJRzltSUhSb1pTQkJWMU1nVTBSTElIUnZJSFZ6WlNCMGJ5QjJZV3hwWkdGMFpTQjJiMmxqWlNCdmNIUnBiMjV6TGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QnBibWwwYVdGc2FYcGxVMlZ5ZG1salpTaHdiMnhzZVN3Z2NISmxjMmxuYm1WeUxDQjJaWEp6YVc5dUtTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnWVd4c0lIZGxjbVVnWkdWbWFXNWxaRnh5WEc0Z0lDQWdhV1lnS0Z4eVhHNGdJQ0FnSUNCd2IyeHNlU0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhYSEpjYmlBZ0lDQWdJSEJ5WlhOcFoyNWxjaUE5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhYSEpjYmlBZ0lDQWdJSFpsY25OcGIyNGdQVDA5SUhWdVpHVm1hVzVsWkZ4eVhHNGdJQ0FnS1NCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2NseHVJQ0FnSUNBZ0lDQW5RMkZ1Ym05MElHbHVhWFJwWVd4cGVtVWdWR1Y0ZEZSdlUzQmxaV05vSUdabFlYUjFjbVV1SUVGc2JDQmhjbWQxYldWdWRITWdiWFZ6ZENCaVpTQmtaV1pwYm1Wa0xpZGNjbHh1SUNBZ0lDQWdLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdkx5QkJaR1FnYzNWdFpYSnBZVzRnYUc5emRITWdkWE5sY2kxaFoyVnVkRnh5WEc0Z0lDQWdhV1lnS0hCdmJHeDVMbU52Ym1acFp5a2dlMXh5WEc0Z0lDQWdJQ0J3YjJ4c2VTNWpiMjVtYVdjdVkzVnpkRzl0VlhObGNrRm5aVzUwSUQwZ2RHaHBjeTVmZDJsMGFFTjFjM1J2YlZWelpYSkJaMlZ1ZENoY2NseHVJQ0FnSUNBZ0lDQndiMnhzZVM1amIyNW1hV2N1WTNWemRHOXRWWE5sY2tGblpXNTBYSEpjYmlBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JwWmlBb2NISmxjMmxuYm1WeUxuTmxjblpwWTJVZ0ppWWdjSEpsYzJsbmJtVnlMbk5sY25acFkyVXVZMjl1Wm1sbktTQjdYSEpjYmlBZ0lDQWdJSEJ5WlhOcFoyNWxjaTV6WlhKMmFXTmxMbU52Ym1acFp5NWpkWE4wYjIxVmMyVnlRV2RsYm5RZ1BTQjBhR2x6TGw5M2FYUm9RM1Z6ZEc5dFZYTmxja0ZuWlc1MEtGeHlYRzRnSUNBZ0lDQWdJSEJ5WlhOcFoyNWxjaTV6WlhKMmFXTmxMbU52Ym1acFp5NWpkWE4wYjIxVmMyVnlRV2RsYm5SY2NseHVJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOXBjMUpsWVdSNUlEMGdabUZzYzJVN1hISmNibHh5WEc0Z0lDQWdMeThnVTNSdmNtVWdjR0Z5WVcxbGRHVnljMXh5WEc0Z0lDQWdkR2hwY3k1VFJWSldTVU5GVXk1d2IyeHNlU0E5SUhCdmJHeDVPMXh5WEc0Z0lDQWdkR2hwY3k1VFJWSldTVU5GVXk1d2NtVnphV2R1WlhJZ1BTQndjbVZ6YVdkdVpYSTdYSEpjYmlBZ0lDQmhkM05XWlhKemFXOXVJRDBnZG1WeWMybHZianRjY2x4dVhISmNiaUFnSUNBdkx5QkRiR1ZoY2lCMGFHVWdZM1Z5Y21WdWRDQndiMnhzZVNCdlltcGxZM1J6WEhKY2JpQWdJQ0JqYjI1emRDQmhkbUZwYkdGaWJHVldiMmxqWlhNZ1BTQjBhR2x6TGxCUFRFeFpYMVpQU1VORlV6dGNjbHh1SUNBZ0lHRjJZV2xzWVdKc1pWWnZhV05sY3k1c1pXNW5kR2dnUFNBd08xeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHRjJZV2xzWVdKc1pVeGhibWQxWVdkbGN5QTlJSFJvYVhNdVVFOU1URmxmVEVGT1IxVkJSMFZUTzF4eVhHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1lYWmhhV3hoWW14bFRHRnVaM1ZoWjJWektTNW1iM0pGWVdOb0tHNWhiV1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQmtaV3hsZEdVZ1lYWmhhV3hoWW14bFRHRnVaM1ZoWjJWelcyNWhiV1ZkTzF4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ1lYWmhhV3hoWW14bFRHRnVaM1ZoWjJWRGIyUmxjeUE5SUhSb2FYTXVVRTlNVEZsZlRFRk9SMVZCUjBWZlEwOUVSVk03WEhKY2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loaGRtRnBiR0ZpYkdWTVlXNW5kV0ZuWlVOdlpHVnpLUzVtYjNKRllXTm9LRzVoYldVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JrWld4bGRHVWdZWFpoYVd4aFlteGxUR0Z1WjNWaFoyVkRiMlJsYzF0dVlXMWxYVHRjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRkpsTFhCdmNIVnNZWFJsSUdGalkyOXlaR2x1WnlCMGJ5QjJaWEp6YVc5dVhISmNiaUFnSUNCamIyNXpkQ0J0YVc1T1pYVnlZV3hUWkdzZ1BTQjBhR2x6TGxCUFRFeFpYMDFKVGw5T1JWVlNRVXhmVmtWU1UwbFBUanRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NVRSVkpXU1VORlV5NXdiMnhzZVZ4eVhHNGdJQ0FnSUNBdVpHVnpZM0pwWW1WV2IybGpaWE1vS1Z4eVhHNGdJQ0FnSUNBdWNISnZiV2x6WlNncFhISmNiaUFnSUNBZ0lDNTBhR1Z1S0hKbGMzQnZibk5sSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmhiR3hEYjJSbGN5QTlJSHQ5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhOd2IyNXpaUzVXYjJsalpYTXVabTl5UldGamFDaDJiMmxqWlNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnZhV05sTGxOMWNIQnZjblJsWkVWdVoybHVaWE11YVc1amJIVmtaWE1vSjNOMFlXNWtZWEprSnlrZ2ZIeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtVnljMmx2YmlBK1BTQnRhVzVPWlhWeVlXeFRaR3RjY2x4dUlDQWdJQ0FnSUNBZ0lDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhkbUZwYkdGaWJHVldiMmxqWlhNdWNIVnphQ2gyYjJsalpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ1lYWmhhV3hoWW14bFZtOXBZMlZ6TG1admNrVmhZMmdvZG05cFkyVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoZG1GcGJHRmliR1ZNWVc1bmRXRm5aWE5iZG05cFkyVXVUR0Z1WjNWaFoyVk9ZVzFsWFNBOUlIWnZhV05sTGt4aGJtZDFZV2RsUTI5a1pUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lXeHNRMjlrWlhOYmRtOXBZMlV1VEdGdVozVmhaMlZEYjJSbFhTQTlJSFp2YVdObExreGhibWQxWVdkbFRtRnRaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCUFltcGxZM1F1Wlc1MGNtbGxjeWhoZG1GcGJHRmliR1ZNWVc1bmRXRm5aWE1wTG1admNrVmhZMmdvS0Z0dVlXMWxMQ0JqYjJSbFhTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZWFpoYVd4aFlteGxUR0Z1WjNWaFoyVkRiMlJsYzF0amIyUmxYU0E5SUc1aGJXVTdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFNXZkR2xtZVNCMGFHRjBJSGRsSjNKbElISmxZV1I1SUhSdklHZGxibVZ5WVhSbElITndaV1ZqYUdWelhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFYTlNaV0ZrZVNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYldsMEtIUm9hWE11UlZaRlRsUlRMbkpsWVdSNUtUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSmJtUnBZMkYwWlhNZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdobElHTnNZWE56SUdseklHTmhjR0ZpYkdVZ2IyWWdaMlZ1WlhKaGRHbHVaeUJ6Y0dWbFkyZ2dZWFZrYVc4dUlGQnZiR3g1TEZ4eVhHNGdJQ0FxSUZCeVpYTnBaMjVsY2lCaGJtUWdRVmRUSUZORVN5QjJaWEp6YVc5dUlHNTFiV0psY2lCdGRYTjBJR2hoZG1VZ1ltVmxiaUJrWldacGJtVmtJSFZ6YVc1blhISmNiaUFnSUNvZ1cybHVhWFJwWVd4cGVtVlRaWEoyYVdObFhYdEFiR2x1YXlCQlluTjBjbUZqZEZSbGVIUlViMU53WldWamFFWmxZWFIxY21VdWFXNXBkR2xoYkdsNlpWTmxjblpwWTJWOUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhISmNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHZGxkQ0JwYzFKbFlXUjVLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHpVbVZoWkhrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkhaWFJ6SUhSb1pTQjBaWGgwSUc5bUlIUm9aU0JqZFhKeVpXNTBiSGtnY0d4aGVXbHVaeUJ6Y0dWbFkyZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVZoWkc5dWJIbGNjbHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCamRYSnlaVzUwVTNCbFpXTm9LQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJOMWNuSmxiblJUY0dWbFkyZ3BJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyTjFjbkpsYm5SVGNHVmxZMmd1ZEdWNGREdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QmhibVFnYzJWMGN5QjBhR1VnYm5WdFltVnlJRzltSUhObFkyOXVaSE1nZEc4Z2IyWm1jMlYwSUhOd1pXVmphRzFoY21zZ1pXMXBjM05wYjI0dVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWRIbHdaU0I3Ym5WdFltVnlmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0J6Y0dWbFkyaHRZWEpyVDJabWMyVjBLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTndaV1ZqYUcxaGNtdFBabVp6WlhRN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCelpYUWdjM0JsWldOb2JXRnlhMDltWm5ObGRDaHZabVp6WlhRcElIdGNjbHh1SUNBZ0lIUm9hWE11WDNOd1pXVmphRzFoY210UFptWnpaWFFnUFNCdlptWnpaWFE3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyTjFjbkpsYm5SVGNHVmxZMmdwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRk53WldWamFDNXpjR1ZsWTJodFlYSnJUMlptYzJWMElEMGdiMlptYzJWME8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwY3lCaGJtUWdjMlYwY3lCMGFHVWdWR2hsSUcxcGJtbHRkVzBnWVcxdmRXNTBJRzltSUhScGJXVWdhVzRnYzJWamIyNWtjeUIwYUdGMElIUm9aU0JzWVhOMFhISmNiaUFnSUNvZ2MzQmxaV05vYldGeWF5QnZaaUJsWVdOb0lIUjVjR1VnYVc0Z1lTQnpjR1ZsWTJnZ1kyRnVJR2hoZG1VZ2FYUnpJR1IxY21GMGFXOXVJSEJ5YjNCbGNuUjVJSE5sZENCMGJ5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQjBlWEJsSUc1MWJXSmxjbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0J0YVc1RmJtUk5ZWEpyUkhWeVlYUnBiMjRvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZiV2x1Ulc1a1RXRnlhMFIxY21GMGFXOXVJQzhnTVRBd01EdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITmxkQ0J0YVc1RmJtUk5ZWEpyUkhWeVlYUnBiMjRvWkhWeVlYUnBiMjRwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYMjFwYmtWdVpFMWhjbXRFZFhKaGRHbHZiaUE5SUdSMWNtRjBhVzl1SUNvZ01UQXdNRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVGd2NHVnVaSE1nZEdobElGTjFiV1Z5YVdGdUlFaHZjM1J6SUdOMWMzUnZiU0IxYzJWeUxXRm5aVzUwSUhSdklHRWdjM1J5YVc1bklHbG1JR2wwSUdseklHNXZkRnh5WEc0Z0lDQXFJR0ZzY21WaFpIa2djSEpsYzJWdWRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWTNWeWNtVnVkRlZ6WlhKQloyVnVkQ0F0SUZOMGNtbHVaeUIwYnlCaGNIQmxibVFnZEc4Z2FXWWdibVZsWkdWa0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UzTjBjbWx1WjMxY2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdYM2RwZEdoRGRYTjBiMjFWYzJWeVFXZGxiblFvWTNWeWNtVnVkRlZ6WlhKQloyVnVkQ2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdjM1Z0WlhKcFlXNUliM04wYzFWelpYSkJaMlZ1ZENBOUlDZHlaWEYxWlhOMExYTnZkWEpqWlM5VGRXMWxjbWxoYmtodmMzUnpKenRjY2x4dVhISmNiaUFnSUNCcFppQW9ZM1Z5Y21WdWRGVnpaWEpCWjJWdWRDQTlQU0J1ZFd4c0tTQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnpkVzFsY21saGJraHZjM1J6VlhObGNrRm5aVzUwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBWWE5sY2tGblpXNTBMbWx1WkdWNFQyWW9jM1Z0WlhKcFlXNUliM04wYzFWelpYSkJaMlZ1ZENrZ0lUMDlJQzB4S1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwVlhObGNrRm5aVzUwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwVlhObGNrRm5aVzUwTG1OdmJtTmhkQ2duSUNjc0lITjFiV1Z5YVdGdVNHOXpkSE5WYzJWeVFXZGxiblFwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1EyaGxZMnR6SUdsbUlHRWdaMmwyWlc0Z1pXNW5hVzVsSUhSNWNHVWdhWE1nWTI5dGNHRjBhV0pzWlNCM2FYUm9JSFJvWlNCQlYxTWdVMFJMSUhabGNuTnBiMjR1SUVsbUlHbDBYSEpjYmlBZ0lDb2dhWE1zSUhKbGRIVnliaUIwYUdVZ2IzSnBaMmx1WVd3Z2RtRnNkV1V1SUU5MGFHVnlkMmx6WlNCeVpYUjFjbTRnWVNCa1pXWmhkV3gwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmxibWRwYm1VZ0xTQlVhR1VnZEhsd1pTQnZaaUJRYjJ4c2VTQjJiMmxqWlNCbGJtZHBibVVnZEc4Z2RtRnNhV1JoZEdVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRjkyWVd4cFpHRjBaVVZ1WjJsdVpTaGxibWRwYm1VcElIdGNjbHh1SUNBZ0lDOHZJRVJsWm1GMWJIUWdkRzhnZEdobElITjBZVzVrWVhKa0lHVnVaMmx1WlNCcFppQnVaWFZ5WVd3Z2FYTWdibTkwSUdGMllXbHNZV0pzWlNCbWIzSWdkR2hwY3lCMlpYSnphVzl1WEhKY2JpQWdJQ0JwWmlBb1hISmNiaUFnSUNBZ0lHVnVaMmx1WlNBOVBUMGdkVzVrWldacGJtVmtJSHg4WEhKY2JpQWdJQ0FnSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0l1UVZkVFgxWkZVbE5KVDA0Z1BDQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxsQlBURXhaWDAxSlRsOU9SVlZTUVV4ZlZrVlNVMGxQVGx4eVhHNGdJQ0FnS1NCN1hISmNiaUFnSUNBZ0lHVnVaMmx1WlNBOUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdVVFOU1URmxmUkVWR1FWVk1WRk11Ulc1bmFXNWxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJsYm1kcGJtVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEYUdWamEzTWdhV1lnWVNCbmFYWmxiaUJoZFdScGJ5Qm1iM0p0WVhRZ2RIbHdaU0JwY3lCamIyMXdZWFJwWW14bElIZHBkR2dnVUc5c2JIa3VJRWxtSUdsMElHbHpMQ0J5WlhSMWNtNWNjbHh1SUNBZ0tpQjBhR1VnYjNKcFoybHVZV3dnZG1Gc2RXVXVJRTkwYUdWeWQybHpaU0J5WlhSMWNtNGdZU0JrWldaaGRXeDBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbGJtZHBibVVnTFNCVWFHVWdkSGx3WlNCdlppQlFiMnhzZVNCMmIybGpaU0JsYm1kcGJtVWdkRzhnZG1Gc2FXUmhkR1V1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3YzNSeWFXNW5mVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOTJZV3hwWkdGMFpVWnZjbTFoZENobWIzSnRZWFFwSUh0Y2NseHVJQ0FnSUdsbUlDaG1iM0p0WVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNBaFlYVmthVzlHYjNKdFlYUnpMbWx1WTJ4MVpHVnpLR1p2Y20xaGRDa3BJSHRjY2x4dUlDQWdJQ0FnWm05eWJXRjBJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVRVDB4TVdWOUVSVVpCVlV4VVV5NVBkWFJ3ZFhSR2IzSnRZWFE3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUdadmNtMWhkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOb1pXTnJjeUJwWmlCaElHZHBkbVZ1SUdGMVpHbHZJSE5oYlhCc2FXNW5JSEpoZEdVZ2FYTWdZMjl0Y0dGMGFXSnNaU0IzYVhSb0lIUm9aU0JqZFhKeVpXNTBJR0YxWkdsdlhISmNiaUFnSUNvZ1ptOXliV0YwTGlCSlppQnBkQ0JwY3l3Z2NtVjBkWEp1SUhSb1pTQnZjbWxuYVc1aGJDQjJZV3gxWlM0Z1QzUm9aWEozYVhObElISmxkSFZ5YmlCaElHUmxabUYxYkhRdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR1Z1WjJsdVpTQXRJRlJvWlNCMGVYQmxJRzltSUZCdmJHeDVJSFp2YVdObElHVnVaMmx1WlNCMGJ5QjJZV3hwWkdGMFpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdHpkSEpwYm1kOVhISmNiaUFnSUNvdlhISmNiaUFnWDNaaGJHbGtZWFJsVW1GMFpTaHlZWFJsS1NCN1hISmNiaUFnSUNBdkx5QlZjMlVnWkdWbVlYVnNkQ0JwWmlCemNHVmphV1pwWldRZ2MyRnRjR3hsSUhKaGRHVWdhWE1nYm05MElIWmhiR2xrSUdadmNpQjBhR1VnWVhWa2FXOGdabTl5YldGMFhISmNiaUFnSUNCcFppQW9YSEpjYmlBZ0lDQWdJSEpoZEdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkZ4eVhHNGdJQ0FnSUNBaGMyRnRjR3hsVW1GMFpYTmJkR2hwY3k1ZllYVmthVzlHYjNKdFlYUmRMbkpoZEdWekxtbHVZMngxWkdWektISmhkR1VwWEhKY2JpQWdJQ0FwSUh0Y2NseHVJQ0FnSUNBZ2NtRjBaU0E5SUhOaGJYQnNaVkpoZEdWelczUm9hWE11WDJGMVpHbHZSbTl5YldGMFhTNWtaV1poZFd4MGMxdDBhR2x6TGw5bGJtZHBibVZkTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCeVlYUmxPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTJobFkydHpJR2xtSUdFZ1oybDJaVzRnVUc5c2JIa2dkbTlwWTJVZ2FXUWdhWE1nWTI5dGNHRjBhV0pzWlNCM2FYUm9JSFJvWlNCamRYSnlaVzUwSUZCdmJHeDVJR1Z1WjJsdVpTNWNjbHh1SUNBZ0tpQkpaaUJwZENCcGN5d2djbVYwZFhKdUlIUm9aU0J2Y21sbmFXNWhiQ0IyWVd4MVpTNGdUM1JvWlhKM2FYTmxJSEpsZEhWeWJpQmhJR1JsWm1GMWJIUXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdWdVoybHVaU0F0SUZSb1pTQjBlWEJsSUc5bUlGQnZiR3g1SUhadmFXTmxJR1Z1WjJsdVpTQjBieUIyWVd4cFpHRjBaUzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gzWmhiR2xrWVhSbFZtOXBZMlVvZG05cFkyVkpaQ2tnZTF4eVhHNGdJQ0FnWTI5dWMzUWdkbTlwWTJVZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxsQlBURXhaWDFaUFNVTkZVeTVtYVc1a0tIWWdQVDRnZGk1SlpDQTlQVDBnZG05cFkyVkpaQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdWWE5sSUhSb1pTQmtaV1poZFd4MElIWnZhV05sSUdsbUlIUm9aU0IyYjJsalpTQnBjMjRuZENCemRYQndiM0owWldRZ1lua2dkR2hsSUdWdVoybHVaVnh5WEc0Z0lDQWdhV1lnS0hadmFXTmxJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2dJWFp2YVdObExsTjFjSEJ2Y25SbFpFVnVaMmx1WlhNdWFXNWpiSFZrWlhNb2RHaHBjeTVmWlc1bmFXNWxLU2tnZTF4eVhHNGdJQ0FnSUNCMmIybGpaVWxrSUQwZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1UVQweE1XVjlFUlVaQlZVeFVVeTVXYjJsalpVbGtPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUIyYjJsalpVbGtPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTJobFkydHpJR2xtSUdFZ1oybDJaVzRnVUc5c2JIa2diR0Z1WjNWaFoyVWdhWE1nWTI5dGNHRjBhV0pzWlNCM2FYUm9JSFJvWlNCamRYSnlaVzUwSUZCdmJHeDVJSFp2YVdObExseHlYRzRnSUNBcUlFbG1JR2wwSUdsekxDQnlaWFIxY200Z2RHaGxJRzl5YVdkcGJtRnNJSFpoYkhWbExpQlBkR2hsY25kcGMyVWdjbVYwZFhKdUlHRWdaR1ZtWVhWc2RDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWlc1bmFXNWxJQzBnVkdobElIUjVjR1VnYjJZZ1VHOXNiSGtnZG05cFkyVWdaVzVuYVc1bElIUnZJSFpoYkdsa1lYUmxMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMWNjbHh1SUNBZ0tpOWNjbHh1SUNCZmRtRnNhV1JoZEdWTVlXNW5kV0ZuWlNoc1lXNW5kV0ZuWlNrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnZG05cFkyVWdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMbEJQVEV4WlgxWlBTVU5GVXk1bWFXNWtLSFlnUFQ0Z2RpNUpaQ0E5UFQwZ2RHaHBjeTVmZG05cFkyVXBPMXh5WEc0Z0lDQWdZMjl1YzNRZ2JHRnVaM1ZoWjJWRGIyUmxJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVRVDB4TVdWOU1RVTVIVlVGSFJWTmJiR0Z1WjNWaFoyVmRPMXh5WEc1Y2NseHVJQ0FnSUM4dklFWnBibVFnZEdobElHeGhibWQxWVdkbGN5QmhkbUZwYkdGaWJHVWdabTl5SUhSb1pTQmpkWEp5Wlc1MElIWnZhV05sWEhKY2JpQWdJQ0JqYjI1emRDQmhkbUZwYkdGaWJHVkRiMlJsY3lBOUlGdDJiMmxqWlM1TVlXNW5kV0ZuWlVOdlpHVmRPMXh5WEc0Z0lDQWdhV1lnS0hadmFXTmxMa0ZrWkdsMGFXOXVZV3hNWVc1bmRXRm5aVU52WkdWektTQjdYSEpjYmlBZ0lDQWdJR0YyWVdsc1lXSnNaVU52WkdWekxuQjFjMmdvTGk0dWRtOXBZMlV1UVdSa2FYUnBiMjVoYkV4aGJtZDFZV2RsUTI5a1pYTXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklFbG1JSFJvWlNCamRYSnlaVzUwSUhadmFXTmxJR1J2WlhOdUozUWdjM1Z3Y0c5eWRDQjBhR1VnYkdGdVozVmhaMlVzSUhWelpTQnBkSE1nWkdWbVlYVnNkRnh5WEc0Z0lDQWdhV1lnS0NGaGRtRnBiR0ZpYkdWRGIyUmxjeTVwYm1Oc2RXUmxjeWhzWVc1bmRXRm5aVU52WkdVcEtTQjdYSEpjYmlBZ0lDQWdJR3hoYm1kMVlXZGxJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVRVDB4TVdWOU1RVTVIVlVGSFJWOURUMFJGVTF0MmIybGpaUzVNWVc1bmRXRm5aVU52WkdWZE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnNZVzVuZFdGblpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRlpoYkdsa1lYUmxJSFJvWlNCamRYSnlaVzUwSUZCdmJHeDVJRzl3ZEdsdmJuTWdkRzhnYldGclpTQnpkWEpsSUhSb1pYa2dZWEpsSUdOdmJYQmhkR2xpYkdVZ2QybDBhQ0JsWVdOb1hISmNiaUFnSUNvZ2IzUm9aWEl1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOTJZV3hwWkdGMFpTZ3BJSHRjY2x4dUlDQWdJQzh2SUZaaGJHbGtZWFJsSUhOd1pXVmphQ0J3WVhKaGJXVjBaWEp6WEhKY2JpQWdJQ0IwYUdsekxsOWxibWRwYm1VZ1BTQjBhR2x6TGw5MllXeHBaR0YwWlVWdVoybHVaU2gwYUdsekxsOWxibWRwYm1VcE8xeHlYRzRnSUNBZ2RHaHBjeTVmWVhWa2FXOUdiM0p0WVhRZ1BTQjBhR2x6TGw5MllXeHBaR0YwWlVadmNtMWhkQ2gwYUdsekxsOWhkV1JwYjBadmNtMWhkQ2s3WEhKY2JpQWdJQ0IwYUdsekxsOXpZVzF3YkdWU1lYUmxJRDBnZEdocGN5NWZkbUZzYVdSaGRHVlNZWFJsS0hSb2FYTXVYM05oYlhCc1pWSmhkR1VwTzF4eVhHNGdJQ0FnZEdocGN5NWZkbTlwWTJVZ1BTQjBhR2x6TGw5MllXeHBaR0YwWlZadmFXTmxLSFJvYVhNdVgzWnZhV05sS1R0Y2NseHVJQ0FnSUhSb2FYTXVYMnhoYm1kMVlXZGxJRDBnZEdocGN5NWZkbUZzYVdSaGRHVk1ZVzVuZFdGblpTaDBhR2x6TGw5c1lXNW5kV0ZuWlNrN1hISmNiaUFnSUNCMGFHbHpMbDlwYzFaaGJHbGtZWFJsWkNBOUlIUnlkV1U3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCU1pYUjFjbTRnWVc0Z2IySnFaV04wSUdOdmJuUmhhVzVwYm1jZ2NHRnlZVzFsZEdWeWN5QmpiMjF3WVhScFlteGxJSGRwZEdnZ1VHOXNiSGt1YzNsdWRHaGxjMmw2WlZOd1pXVmphQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZWeHlYRzRnSUNBcUwxeHlYRzRnSUY5blpYUkRiMjVtYVdjb0tTQjdYSEpjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnY0dGeVlXMWxkR1Z5Y3lCb1lYWmxJR0psWlc0Z2RtRnNhV1JoZEdWa1hISmNiaUFnSUNCcFppQW9kR2hwY3k1amIyNXpkSEoxWTNSdmNpNXBjMUpsWVdSNUlDWW1JQ0YwYUdsekxsOXBjMVpoYkdsa1lYUmxaQ2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDkyWVd4cFpHRjBaU2dwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHZJRU55WldGMFpTQmhJR052Ym1acFp5QnZZbXBsWTNRZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUZCdmJHeDVYSEpjYmlBZ0lDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ0lDQkZibWRwYm1VNklIUm9hWE11WDJWdVoybHVaU3hjY2x4dUlDQWdJQ0FnVDNWMGNIVjBSbTl5YldGME9pQjBhR2x6TGw5aGRXUnBiMFp2Y20xaGRDeGNjbHh1SUNBZ0lDQWdVMkZ0Y0d4bFVtRjBaVG9nZEdocGN5NWZjMkZ0Y0d4bFVtRjBaU3hjY2x4dUlDQWdJQ0FnVm05cFkyVkpaRG9nZEdocGN5NWZkbTlwWTJVc1hISmNiaUFnSUNBZ0lFeGhibWQxWVdkbFEyOWtaVG9nZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVRVDB4TVdWOU1RVTVIVlVGSFJWTmJkR2hwY3k1ZmJHRnVaM1ZoWjJWZExGeHlYRzRnSUNBZ2ZUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRlZ3WkdGMFpTQlFiMnhzZVNCd1lYSmhiV1YwWlhKeklIZHBkR2dnYjNCMGFXOXVjeUJtY205dElHRWdaMmwyWlc0Z1kyOXVabWxuTGlCQmJHd2djM1J2Y21Wa0lITndaV1ZqYUdWelhISmNiaUFnSUNvZ2QybHNiQ0JpWlNCMWNHUmhkR1ZrSUhSdklIVnpaU0IwYUdVZ2JtVjNJSEJoY21GdFpYUmxjbk1zSUhWdWJHVnpjeUIwYUdVZ2MzQmxaV05vSUhSbGVIUWdhWE1nWTI5dWRHRnBibVZrWEhKY2JpQWdJQ29nYVc0Z2RHaGxJQ2R6YTJsd1UzQmxaV05vWlhNbklIQmhjbUZ0WlhSbGNpNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnWTI5dVptbG5JQzBnVUc5c2JIa2djR0Z5WVcxbGRHVnlJRzl3ZEdsdmJuTWdkRzhnYjNabGNuZHlhWFJsTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYa3VQSE4wY21sdVp6NTlJSE5yYVhCVGNHVmxZMmhsY3lBdElGUmxlSFFnYjJZZ1lXNTVJSE53WldWamFHVnpJSFJvWVhRZ2MyaHZkV3hrSUc1dmRGeHlYRzRnSUNBcUlHaGhkbVVnY0dGeVlXMWxkR1Z5Y3lCMWNHUmhkR1ZrTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDFjY2x4dUlDQWdLaTljY2x4dUlDQmZkWEJrWVhSbFEyOXVabWxuS0dOdmJtWnBaeXdnYzJ0cGNGTndaV1ZqYUdWeklEMGdXMTBwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUkRiMjVtYVdjZ1BTQjBhR2x6TGw5blpYUkRiMjVtYVdjb0tUdGNjbHh1SUNBZ0lHbG1JQ2doWTI5dVptbG5LU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBRMjl1Wm1sbk8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSFJvYVhNdVgybHpWbUZzYVdSaGRHVmtJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQmpiMjV6ZENCamRYSnlaVzUwUTI5dVptbG5VM1J5SUQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvWTNWeWNtVnVkRU52Ym1acFp5azdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1ZYQmtZWFJsSUc5d2RHbHZibk5jY2x4dUlDQWdJR2xtSUNoamIyNW1hV2N1Ulc1bmFXNWxLU0I3WEhKY2JpQWdJQ0FnSUhSb2FYTXVYMlZ1WjJsdVpTQTlJR052Ym1acFp5NUZibWRwYm1VN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhV1lnS0dOdmJtWnBaeTVoZFdScGIwWnZjbTFoZENrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5aGRXUnBiMFp2Y20xaGRDQTlJR052Ym1acFp5NWhkV1JwYjBadmNtMWhkRHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9ZMjl1Wm1sbkxsTmhiWEJzWlZKaGRHVXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZjMkZ0Y0d4bFVtRjBaU0E5SUdOdmJtWnBaeTVUWVcxd2JHVlNZWFJsTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3VWbTlwWTJWSlpDa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOTJiMmxqWlNBOUlHTnZibVpwWnk1V2IybGpaVWxrTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3VUR0Z1WjNWaFoyVXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZiR0Z1WjNWaFoyVWdQU0JqYjI1bWFXY3VUR0Z1WjNWaFoyVTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1ZtRnNhV1JoZEdVZ2RHaGxJR052Ym1acFoxeHlYRzRnSUNBZ1kyOXVjM1FnZG1Gc2FXUkRiMjVtYVdjZ1BTQjBhR2x6TGw5blpYUkRiMjVtYVdjb0tUdGNjbHh1WEhKY2JpQWdJQ0F2THlCRmVHbDBJR2xtSUc1dmRHaHBibWNnYUdGeklHTm9ZVzVuWldSY2NseHVJQ0FnSUdOdmJuTjBJR052Ym1acFoxTjBjaUE5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSFpoYkdsa1EyOXVabWxuS1R0Y2NseHVJQ0FnSUdsbUlDaGpkWEp5Wlc1MFEyOXVabWxuVTNSeUlEMDlQU0JqYjI1bWFXZFRkSElwSUh0Y2NseHVJQ0FnSUNBZ2RHaHBjeTVmYVhOV1lXeHBaR0YwWldRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2FXUkRiMjVtYVdjN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnVlhCa1lYUmxJR0ZzYkNCallXTm9aV1FnWTI5dVptbG5jMXh5WEc0Z0lDQWdUMkpxWldOMExtVnVkSEpwWlhNb2RHaHBjeTVmYzNCbFpXTm9RMkZqYUdVcExtWnZja1ZoWTJnb0tGdDBaWGgwTENCemNHVmxZMmhkS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQzh2SUVOb1pXTnJJR2xtSUhSb2FYTWdhWE1nWVNCemEybHdjR1ZrSUhOd1pXVmphRnh5WEc0Z0lDQWdJQ0JwWmlBb2MydHBjRk53WldWamFHVnpMbWx1WTJ4MVpHVnpLSFJsZUhRcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQmpiMjV6ZENCemNHVmxZMmhEYjI1bWFXZFRkSElnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2h6Y0dWbFkyZ3VZMjl1Wm1sbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklGVndaR0YwWlNCMGFHVWdjM0JsWldOb0lIZHBkR2dnYm1WM0lIQmhjbUZ0WlhSbGNuTmNjbHh1SUNBZ0lDQWdhV1lnS0hOd1pXVmphRU52Ym1acFoxTjBjaUFoUFQwZ1kyOXVabWxuVTNSeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFUzQmxaV05vS0hSbGVIUXNJSFpoYkdsa1EyOXVabWxuS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJSFpoYkdsa1EyOXVabWxuTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYQmtZWFJsSUdGdUlHVjRhWE4wYVc1bklITndaV1ZqYUN3Z2IzSWdZV1JrSUdFZ2JtVjNJSE53WldWamFDQjNhWFJvSUc1bGR5QlFiMnhzZVNCd1lYSmhiV1YwWlhKeklIZHBkR2hjY2x4dUlDQWdLaUJ2Y0hScGIyNXpJR1p5YjIwZ1lTQm5hWFpsYmlCamIyNW1hV2N1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmxlSFFnTFNCVWFHVWdkR1Y0ZENCdlppQjBhR1VnYzNCbFpXTm9JSFJ2SUhWd1pHRjBaUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdZMjl1Wm1sbklDMGdVRzlzYkhrZ2NHRnlZVzFsZEdWeUlHOXdkR2x2Ym5NZ2RHOGdkWEJrWVhSbExseHlYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyWnZjbU5sUFdaaGJITmxYU0F0SUZkb1pYUm9aWElnZEc4Z1ptOXlZMlVnZEdobElITndaV1ZqYUNCMGJ5QmlaU0IxY0dSaGRHVmtYSEpjYmlBZ0lDb2dhV1lnYm04Z2NHRnlZVzFsZEdWeWN5Qm9ZWFpsSUdOb1lXNW5aWE11WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UVdKemRISmhZM1JUY0dWbFkyaDlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gzVndaR0YwWlZOd1pXVmphQ2gwWlhoMExDQmpiMjVtYVdjc0lHWnZjbU5sSUQwZ1ptRnNjMlVwSUh0Y2NseHVJQ0FnSUdOdmJuTjBJSE53WldWamFDQTlJSFJvYVhNdVgzTndaV1ZqYUVOaFkyaGxXM1JsZUhSZElIeDhJSHQ5TzF4eVhHNGdJQ0FnTHk4Z1JYaHBkQ0JwWmlCdWIzUm9hVzVuSUdoaGN5QmphR0Z1WjJWa0lHRnVaQ0JtYjNKalpTQnBjeUJtWVd4elpWeHlYRzRnSUNBZ2FXWWdLRnh5WEc0Z0lDQWdJQ0FoWm05eVkyVWdKaVpjY2x4dUlDQWdJQ0FnWTI5dVptbG5JQ0U5UFNCMWJtUmxabWx1WldRZ0ppWmNjbHh1SUNBZ0lDQWdjM0JsWldOb0xtTnZibVpwWnlBbUpseHlYRzRnSUNBZ0lDQktVMDlPTG5OMGNtbHVaMmxtZVNoamIyNW1hV2NwSUQwOVBTQktVMDlPTG5OMGNtbHVaMmxtZVNoemNHVmxZMmd1WTI5dVptbG5LVnh5WEc0Z0lDQWdLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ6Y0dWbFkyZzdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1EzSmxZWFJsSUhObGNHRnlZWFJsSUhCaGNtRnRaWFJsY25NZ1ptOXlJR0YxWkdsdklHRnVaQ0J6Y0dWbFkyaHRZWEpySUdkbGJtVnlZWFJwYjI1Y2NseHVJQ0FnSUdOdmJuTjBJR0YxWkdsdlVHRnlZVzF6SUQwZ2UxeHlYRzRnSUNBZ0lDQXVMaTVqYjI1bWFXY3NYSEpjYmlBZ0lDQWdJRlJsZUhRNklIUmxlSFFzWEhKY2JpQWdJQ0FnSUZSbGVIUlVlWEJsT2lBbmMzTnRiQ2NzWEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnWTI5dWMzUWdjM0JsWldOb2JXRnlhMUJoY21GdGN5QTlJSHRjY2x4dUlDQWdJQ0FnTGk0dVlYVmthVzlRWVhKaGJYTXNYSEpjYmlBZ0lDQWdJRTkxZEhCMWRFWnZjbTFoZERvZ0oycHpiMjRuTEZ4eVhHNGdJQ0FnSUNCVGNHVmxZMmhOWVhKclZIbHdaWE02SUhOd1pXVmphRzFoY210VWVYQmxjeXhjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0x5OGdSMlZ1WlhKaGRHVWdZWFZrYVc4Z1lXNWtJSE53WldWamFHMWhjbXR6WEhKY2JpQWdJQ0J6Y0dWbFkyZ3VZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHlYRzRnSUNBZ2MzQmxaV05vTG5CeWIyMXBjMlVnUFNCUWNtOXRhWE5sTG1Gc2JDaGJYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzTjViblJvWlhOcGVtVlRjR1ZsWTJodFlYSnJjeWh6Y0dWbFkyaHRZWEpyVUdGeVlXMXpLU3hjY2x4dUlDQWdJQ0FnZEdocGN5NWZjM2x1ZEdobGMybDZaVUYxWkdsdktHRjFaR2x2VUdGeVlXMXpLU3hjY2x4dUlDQWdJRjBwTG5Sb1pXNG9jbVZ6ZFd4MGN5QTlQaUI3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWpjbVZoZEdWVGNHVmxZMmdvZEdWNGRDd2dMaTR1Y21WemRXeDBjeWs3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0FnSUhSb2FYTXVYM053WldWamFFTmhZMmhsVzNSbGVIUmRJRDBnYzNCbFpXTm9PMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ6Y0dWbFkyZzdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1UzQmxaV05vSUc5aWFtVmpkQ0JtYjNJZ2RHaGxJSE53WldGclpYSXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjSEpwZG1GMFpWeHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0VVpYaDBWRzlUY0dWbFkyaDlJSE53WldGclpYSWdMU0JVYUdVZ1ZHVjRkRlJ2VTNCbFpXTm9JR2x1YzNSaGJtTmxJSFJvWVhRZ2QybHNiQ0J2ZDI0Z2RHaGxJSE53WldWamFDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RHVjRkQ0F0SUZSbGVIUWdiMllnZEdobElITndaV1ZqYUM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYzNCbFpXTm9iV0Z5YTNNZ0xTQlRjR1ZsWTJodFlYSnJjeUJtYjNJZ2RHaGxJSE53WldWamFDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1lYVmthVzlEYjI1bWFXY2dMU0JCZFdScGJ5Qm1iM0lnZEdobElITndaV1ZqYUM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0QlluTjBjbUZqZEZOd1pXVmphSDFjY2x4dUlDQWdLaTljY2x4dUlDQmZZM0psWVhSbFUzQmxaV05vS0hSbGVIUXNJSE53WldWamFHMWhjbXR6TENCaGRXUnBiME52Ym1acFp5a2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUY0dWbFkyZ29kR2hwY3l3Z2RHVjRkQ3dnYzNCbFpXTm9iV0Z5YTNNc0lHRjFaR2x2UTI5dVptbG5LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOeVpXRjBaU0J3Y21WemFXZHVaV1FnVlZKTUlHOW1JSE53WldWamFDQmhkV1JwYnlCbWIzSWdkR2hsSUdkcGRtVnVJSE53WldWamFDQjBaWGgwTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQndZWEpoYlhNZ0xTQlFZWEpoYldWMFpYSnpJRzlpYW1WamRDQmpiMjF3WVhScFlteGxJSGRwZEdnZ1VHOXNiSGt1YzNsdWRHaGxjMmw2WlZOd1pXVmphQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRFWldabGNuSmxaSDBnVW1WemIyeDJaWE1nZDJsMGFDQmhiaUJ2WW1wbFkzUWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ1lYVmthVzhnVlZKTUxseHlYRzRnSUNBcUwxeHlYRzRnSUY5emVXNTBhR1Z6YVhwbFFYVmthVzhvY0dGeVlXMXpLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVSbFptVnljbVZrS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1amIyNXpkSEoxWTNSdmNpNVRSVkpXU1VORlV5NXdjbVZ6YVdkdVpYSXVaMlYwVTNsdWRHaGxjMmw2WlZOd1pXVmphRlZ5YkNoY2NseHVJQ0FnSUNBZ0lDQndZWEpoYlhNc1hISmNiaUFnSUNBZ0lDQWdablZ1WTNScGIyNG9aWEp5YjNJc0lIVnliQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGbGNuSnZjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHQxY214OUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCU1pYUnlhV1YyWlhNZ1lXNWtJSEJoY25ObGN5QnpjR1ZsWTJodFlYSnJjeUJtYjNJZ2RHaGxJR2RwZG1WdUlITndaV1ZqYUNCMFpYaDBMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJ5YVhaaGRHVmNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCd1lYSmhiWE1nTFNCUVlYSmhiV1YwWlhKeklHOWlhbVZqZENCamIyMXdZWFJwWW14bElIZHBkR2dnVUc5c2JIa3VjM2x1ZEdobGMybDZaVk53WldWamFDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdEVaV1psY25KbFpIMGdVbVZ6YjJ4MlpYTWdkMmwwYUNCaGJpQmhjbkpoZVNCdlppQnpjR1ZsWTJodFlYSnJJRzlpYW1WamRITmNjbHh1SUNBZ0tpOWNjbHh1SUNCZmMzbHVkR2hsYzJsNlpWTndaV1ZqYUcxaGNtdHpLSEJoY21GdGN5a2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdVUwVlNWa2xEUlZNdWNHOXNiSGxjY2x4dUlDQWdJQ0FnTG5ONWJuUm9aWE5wZW1WVGNHVmxZMmdvY0dGeVlXMXpLVnh5WEc0Z0lDQWdJQ0F1Y0hKdmJXbHpaU2dwWEhKY2JpQWdJQ0FnSUM1MGFHVnVLSEpsYzNWc2RDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdRMjl1ZG1WeWRDQmphR0Z5WTI5a1pYTWdkRzhnYzNSeWFXNW5YSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhbk52YmxOMGNtbHVaeUE5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSEpsYzNWc2RDNUJkV1JwYjFOMGNtVmhiU2s3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYW5OdmJpQTlJRXBUVDA0dWNHRnljMlVvYW5OdmJsTjBjbWx1WnlrN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHRjBZVk4wY2lBOUlHcHpiMjR1WkdGMFlTNXRZWEFvWXlBOVBpQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR01wS1M1cWIybHVLQ2NuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiV0Z5YTFSNWNHVnpJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjMlZ1ZEdWdVkyVTZJRnRkTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdkMjl5WkRvZ1cxMHNYSEpjYmlBZ0lDQWdJQ0FnSUNCMmFYTmxiV1U2SUZ0ZExGeHlYRzRnSUNBZ0lDQWdJQ0FnYzNOdGJEb2dXMTBzWEhKY2JpQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxibVJOWVhKclZIbHdaWE1nUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J6Wlc1MFpXNWpaVG9nYm5Wc2JDeGNjbHh1SUNBZ0lDQWdJQ0FnSUhkdmNtUTZJRzUxYkd3c1hISmNiaUFnSUNBZ0lDQWdJQ0IyYVhObGJXVTZJRzUxYkd3c1hISmNiaUFnSUNBZ0lDQWdJQ0J6YzIxc09pQnVkV3hzTEZ4eVhHNGdJQ0FnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRk53YkdsMElHSjVJR1Z1WTJ4dmMybHVaeUI3ZlNCMGJ5QmpjbVZoZEdVZ2MzQmxaV05vYldGeWF5QnZZbXBsWTNSelhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzQmxaV05vVFdGeWEzTWdQU0JiTGk0dVpHRjBZVk4wY2k1dFlYUmphRUZzYkNndlhGeDdMaW8vWEZ4OUtEODlYRnh1ZkNRcEwyZHRLVjB1YldGd0tGeHlYRzRnSUNBZ0lDQWdJQ0FnYldGMFkyZ2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWEpySUQwZ1NsTlBUaTV3WVhKelpTaHRZWFJqYUZzd1hTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUWdkR2hsSUdSMWNtRjBhVzl1SUc5bUlIUm9aU0JzWVhOMElITndaV1ZqYUcxaGNtc2djM1J2Y21Wa0lHMWhkR05vYVc1bklIUm9hWE1nYjI1bEozTWdkSGx3WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnVkVzFOWVhKcmN5QTlJRzFoY210VWVYQmxjMXR0WVhKckxuUjVjR1ZkTG14bGJtZDBhRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1MWJVMWhjbXR6SUQ0Z01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHeGhjM1JOWVhKcklEMGdiV0Z5YTFSNWNHVnpXMjFoY21zdWRIbHdaVjFiYm5WdFRXRnlhM01nTFNBeFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZWE4wVFdGeWF5NWtkWEpoZEdsdmJpQTlJRzFoY21zdWRHbHRaU0F0SUd4aGMzUk5ZWEpyTG5ScGJXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY210VWVYQmxjMXR0WVhKckxuUjVjR1ZkTG5CMWMyZ29iV0Z5YXlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVpFMWhjbXRVZVhCbGMxdHRZWEpyTG5SNWNHVmRJRDBnYldGeWF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxaGNtczdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUm1sdVpDQjBhR1VnZEdsdFpTQnZaaUIwYUdVZ2JHRjBaWE4wSUhOd1pXVmphRzFoY210Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJtUlVhVzFsY3lBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibVJOWVhKclZIbHdaWE11YzJWdWRHVnVZMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR1Z1WkZScGJXVnpMbkIxYzJnb1pXNWtUV0Z5YTFSNWNHVnpMbk5sYm5SbGJtTmxMblJwYldVcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCcFppQW9aVzVrVFdGeWExUjVjR1Z6TG5kdmNtUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHVnVaRlJwYldWekxuQjFjMmdvWlc1a1RXRnlhMVI1Y0dWekxuZHZjbVF1ZEdsdFpTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYm1STllYSnJWSGx3WlhNdWRtbHpaVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JsYm1SVWFXMWxjeTV3ZFhOb0tHVnVaRTFoY210VWVYQmxjeTUyYVhObGJXVXVkR2x0WlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibVJOWVhKclZIbHdaWE11YzNOdGJDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1pXNWtWR2x0WlhNdWNIVnphQ2hsYm1STllYSnJWSGx3WlhNdWMzTnRiQzUwYVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlc1a1ZHbHRaU0E5SUUxaGRHZ3ViV0Y0S0M0dUxtVnVaRlJwYldWektUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdRMkZzWTNWc1lYUmxJR1IxY21GMGFXOXVJR1p2Y2lCMGFHVWdaVzVrYVc1bklITndaV1ZqYUUxaGNtdHpJRzltSUdWaFkyZ2dkSGx3WlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYm1STllYSnJWSGx3WlhNdWMyVnVkR1Z1WTJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdWdVpFMWhjbXRVZVhCbGN5NXpaVzUwWlc1alpTNWtkWEpoZEdsdmJpQTlJRTFoZEdndWJXRjRLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dGFXNUZibVJOWVhKclJIVnlZWFJwYjI0c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVpGUnBiV1VnTFNCbGJtUk5ZWEpyVkhsd1pYTXVjMlZ1ZEdWdVkyVXVkR2x0WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0dWdVpFMWhjbXRVZVhCbGN5NTNiM0prS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JsYm1STllYSnJWSGx3WlhNdWQyOXlaQzVrZFhKaGRHbHZiaUE5SUUxaGRHZ3ViV0Y0S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXRhVzVGYm1STllYSnJSSFZ5WVhScGIyNHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVaRlJwYldVZ0xTQmxibVJOWVhKclZIbHdaWE11ZDI5eVpDNTBhVzFsWEhKY2JpQWdJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvWlc1a1RXRnlhMVI1Y0dWekxuWnBjMlZ0WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWlc1a1RXRnlhMVI1Y0dWekxuWnBjMlZ0WlM1a2RYSmhkR2x2YmlBOUlFMWhkR2d1YldGNEtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0YVc1RmJtUk5ZWEpyUkhWeVlYUnBiMjRzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WkZScGJXVWdMU0JsYm1STllYSnJWSGx3WlhNdWRtbHpaVzFsTG5ScGJXVmNjbHh1SUNBZ0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibVJOWVhKclZIbHdaWE11YzNOdGJDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1pXNWtUV0Z5YTFSNWNHVnpMbk56Yld3dVpIVnlZWFJwYjI0Z1BTQk5ZWFJvTG0xaGVDaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYldsdVJXNWtUV0Z5YTBSMWNtRjBhVzl1TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm1SVWFXMWxJQzBnWlc1a1RXRnlhMVI1Y0dWekxuTnpiV3d1ZEdsdFpWeHlYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCemNHVmxZMmhOWVhKcmN6dGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCU1pYUjFjbTV6SUdFZ1UzQmxaV05vSUc5aWFtVmpkQ0IwYUdGMElHaGhjeUIwYUdVZ1oybDJaVzRnZEdWNGRDNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZEdWNGRDQXRJRlJvWlNCMFpYaDBJR052Ym5SbGJuUWdiMllnZEdobElGTndaV1ZqYUM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDE5SUdOdmJtWnBaeUF0SUU5d2RHbHZibk1nZEc4Z2RYQmtZWFJsSUhSb1pTQlRjR1ZsWTJnZ2QybDBhQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRFWldabGNuSmxaSDBnVW1WemIyeDJaWE1nZDJsMGFDQlRjR1ZsWTJnZ2IzSWdiblZzYkR0Y2NseHVJQ0FnS2k5Y2NseHVJQ0JmWjJWMFUzQmxaV05vS0hSbGVIUXNJR052Ym1acFp5a2dlMXh5WEc0Z0lDQWdMeThnVFdGclpTQnpkWEpsSUVGWFV5QnpaWEoyYVdObGN5QmxlR2x6ZEZ4eVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TG1OdmJuTjBjblZqZEc5eUxtbHpVbVZoWkhrcElIdGNjbHh1SUNBZ0lDQWdZMjl1YzNRZ1pTQTlJQ2RCVjFNZ2MyVnlkbWxqWlhNZ2FHRjJaU0J1YjNRZ1ltVmxiaUJwYm1sMGFXRnNhWHBsWkM0bk8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdWNtVnFaV04wS0dVcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUUxaGEyVWdjM1Z5WlNCcGRITWdjRzl6YzJsaWJHVWdkRzhnWjJWdVpYSmhkR1VnYzNCbFpXTm9aWE5jY2x4dUlDQWdJR2xtSUNnaGRHVjRkQ2tnZTF4eVhHNGdJQ0FnSUNCamIyNXpkQ0JsSUQwZ0owTmhibTV2ZENCd2JHRjVJR0VnYzNCbFpXTm9JSGRwZEdnZ2JtOGdkR1Y0ZEM0bk8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1JHVm1aWEp5WldRdWNtVnFaV04wS0dVcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzh2SUZWd1pHRjBaU0IwYUdVZ2MzQmxaV05vSUhkcGRHZ2diM0IwYVc5dWMxeHlYRzRnSUNBZ2RHVjRkQ0E5SUZSbGVIUlViMU53WldWamFGVjBhV3h6TG5aaGJHbGtZWFJsVkdWNGRDaDBaWGgwS1R0Y2NseHVJQ0FnSUdOdmJtWnBaeUE5SUhSb2FYTXVYM1Z3WkdGMFpVTnZibVpwWnloamIyNW1hV2NzSUhSbGVIUXBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTFjR1JoZEdWVGNHVmxZMmdvZEdWNGRDd2dZMjl1Wm1sbktTNXdjbTl0YVhObE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRV1JrY3lCaElHNWhiV1Z6Y0dGalpTQjBieUIwYUdVZ2FHOXpkQ0IzYVhSb0lIUm9aU0J1WVcxbElHOW1JSFJvWlNCbVpXRjBkWEpsSUhSdklHTnZiblJoYVc0Z2NISnZjR1Z5ZEdsbGMxeHlYRzRnSUNBcUlHRnVaQ0J0WlhSb2IyUnpJR1p5YjIwZ2RHaGxJR1psWVhSMWNtVWdkR2hoZENCMWMyVnljeUJ2WmlCMGFHVWdhRzl6ZENCdVpXVmtJR0ZqWTJWemN5QjBieTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ6WldVZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpWeHlYRzRnSUNBcUwxeHlYRzRnSUdsdWMzUmhiR3hCY0drb0tTQjdYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVCcGJtNWxjbHh5WEc0Z0lDQWdJQ29nUUc1aGJXVnpjR0ZqWlNCVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbFhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHTnZibk4wSUdGd2FTQTlJSE4xY0dWeUxtbHVjM1JoYkd4QmNHa29LVHRjY2x4dVhISmNiaUFnSUNCUFltcGxZM1F1WVhOemFXZHVLR0Z3YVN3Z2UxeHlYRzRnSUNBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxiV0psY205bUlGUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVmNjbHh1SUNBZ0lDQWdJQ29nUUdsdWMzUmhibU5sWEhKY2JpQWdJQ0FnSUNBcUlFQnRaWFJvYjJSY2NseHVJQ0FnSUNBZ0lDb2dRSE5sWlNCQlluTjBjbUZqZEZSbGVIUlViMU53WldWamFFWmxZWFIxY21VamNHeGhlVnh5WEc0Z0lDQWdJQ0FnS2k5Y2NseHVJQ0FnSUNBZ2NHeGhlVG9nZEdocGN5NXdiR0Y1TG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUVGaWMzUnlZV04wVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlNOd1lYVnpaVnh5WEc0Z0lDQWdJQ0FnS2k5Y2NseHVJQ0FnSUNBZ2NHRjFjMlU2SUhSb2FYTXVjR0YxYzJVdVltbHVaQ2gwYUdsektTeGNjbHh1SUNBZ0lDQWdMeW9xWEhKY2JpQWdJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxYSEpjYmlBZ0lDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1FXSnpkSEpoWTNSVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbEkzSmxjM1Z0WlZ4eVhHNGdJQ0FnSUNBZ0tpOWNjbHh1SUNBZ0lDQWdjbVZ6ZFcxbE9pQjBhR2x6TG5KbGMzVnRaUzVpYVc1a0tIUm9hWE1wTEZ4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUZSbGVIUlViMU53WldWamFFWmxZWFIxY21WY2NseHVJQ0FnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpYUm9iMlJjY2x4dUlDQWdJQ0FnSUNvZ1FITmxaU0JCWW5OMGNtRmpkRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVqYzNSdmNGeHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnYzNSdmNEb2dkR2hwY3k1emRHOXdMbUpwYm1Rb2RHaHBjeWtzWEhKY2JpQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdLaUJBYldWdFltVnliMllnVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlZ4eVhHNGdJQ0FnSUNBZ0tpQkFhVzV6ZEdGdVkyVmNjbHh1SUNBZ0lDQWdJQ29nUUcxbGRHaHZaRnh5WEc0Z0lDQWdJQ0FnS2lCQWMyVmxJRUZpYzNSeVlXTjBWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaU05uWlhSV2IyeDFiV1ZjY2x4dUlDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lHZGxkRlp2YkhWdFpUb2dkR2hwY3k1blpYUldiMngxYldVdVltbHVaQ2gwYUdsektTeGNjbHh1SUNBZ0lDQWdMeW9xWEhKY2JpQWdJQ0FnSUNBcUlFQnRaVzFpWlhKdlppQlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxYSEpjYmlBZ0lDQWdJQ0FxSUVCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNBZ0tpQkFiV1YwYUc5a1hISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1FXSnpkSEpoWTNSVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbEkzTmxkRlp2YkhWdFpWeHlYRzRnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnYzJWMFZtOXNkVzFsT2lCMGFHbHpMbk5sZEZadmJIVnRaUzVpYVc1a0tIUm9hWE1wTEZ4eVhHNGdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ29nUUcxbGJXSmxjbTltSUZSbGVIUlViMU53WldWamFFWmxZWFIxY21WY2NseHVJQ0FnSUNBZ0lDb2dRR2x1YzNSaGJtTmxYSEpjYmlBZ0lDQWdJQ0FxSUVCdFpYUm9iMlJjY2x4dUlDQWdJQ0FnSUNvZ1FITmxaU0JCWW5OMGNtRmpkRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVqY0dGMWMyVldiMngxYldWY2NseHVJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJSEJoZFhObFZtOXNkVzFsT2lCMGFHbHpMbkJoZFhObFZtOXNkVzFsTG1KcGJtUW9kR2hwY3lrc1hISmNiaUFnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpWeHlYRzRnSUNBZ0lDQWdLaUJBYVc1emRHRnVZMlZjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxkR2h2WkZ4eVhHNGdJQ0FnSUNBZ0tpQkFjMlZsSUVGaWMzUnlZV04wVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlNOeVpYTjFiV1ZXYjJ4MWJXVmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUhKbGMzVnRaVlp2YkhWdFpUb2dkR2hwY3k1eVpYTjFiV1ZXYjJ4MWJXVXVZbWx1WkNoMGFHbHpLU3hjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0dGd2FTd2dlMXh5WEc0Z0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDb2dRRzFsYldKbGNtOW1JRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVZjY2x4dUlDQWdJQ0FnSUNvZ1FHbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0lDQXFJRUJ6WldVZ1FXSnpkSEpoWTNSVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbEkzTndaV1ZqYUcxaGNtdFBabVp6WlhSY2NseHVJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJSE53WldWamFHMWhjbXRQWm1aelpYUTZJSHRjY2x4dUlDQWdJQ0FnSUNCblpYUTZJQ2dwSUQwK0lIUm9hWE11YzNCbFpXTm9iV0Z5YTA5bVpuTmxkQ3hjY2x4dUlDQWdJQ0FnSUNCelpYUTZJRzltWm5ObGRDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Od1pXVmphRzFoY210UFptWnpaWFFnUFNCdlptWnpaWFE3WEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdmU3hjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCaGNHazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJIWlhSeklHRnVaQ0J6WlhSeklIUm9aU0IyYjJ4MWJXVWdkWE5sWkNCbWIzSWdZV3hzSUdGMVpHbHZJR05zYVhCeklIQnNZWGxsWkNCaWVTQjBhR1VnYzNCbFlXdGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhISmNiaUFnSUNvdlhISmNiaUFnYzJWMElIWnZiSFZ0WlNoMmIyeDFiV1VwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM1p2YkhWdFpTQTlJRTFoZEdoVmRHbHNjeTVqYkdGdGNDaDJiMngxYldVcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJSFp2YkhWdFpTZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MmIyeDFiV1U3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCSFpYUnpJSGRvWlhSb1pYSWdiM0lnYm05MElIUm9aU0J6Y0dWaGEyVnlKM01nZG05c2RXMWxJSFpoYkhWbElHbHpJR04xY25KbGJuUnNlU0JpWldsdVp5QjBkMlZsYm1Wa0xseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxZV1J2Ym14NVhISmNiaUFnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUhadmJIVnRaVkJsYm1ScGJtY29LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNISnZiV2x6WlhNdWRtOXNkVzFsSUNZbUlIUm9hWE11WDNCeWIyMXBjMlZ6TG5admJIVnRaUzV3Wlc1a2FXNW5PMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QjBhR1VnZG05c2RXMWxJSFZ6WldRZ1ptOXlJR0ZzYkNCaGRXUnBieUJqYkdsd2N5QndiR0Y1WldRZ1lua2dkR2hsSUhOd1pXRnJaWEl1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3Ym5WdFltVnlmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkRlp2YkhWdFpTZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5admJIVnRaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZWd1pHRjBaWE1nZEdobElIWnZiSFZ0WlNCMWMyVmtJR1p2Y2lCaGJHd2dZWFZrYVc4Z1kyeHBjSE1nY0d4aGVXVmtJR0o1SUhSb1pTQnpjR1ZoYTJWeUlHOTJaWElnZEdsdFpTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCMmIyeDFiV1VnTFNCVVlYSm5aWFFnZG05c2RXMWxJSFpoYkhWbExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCYmMyVmpiMjVrY3owd1hTQXRJRUZ0YjNWdWRDQnZaaUIwYVcxbElHbDBJSGRwYkd3Z2RHRnJaU0IwYnlCeVpXRmphQ0IwYUdVZ2RHRnlaMlYwWEhKY2JpQWdJQ29nZG05c2RXMWxMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNDlmU0JsWVhOcGJtZEdiaUF0SUVWaGMybHVaeUJtZFc1amRHbHZiaUIxYzJWa0lHWnZjaUJwYm5SbGNuQnZiR0YwYVc5dUxseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwUmxabVZ5Y21Wa2ZWeHlYRzRnSUNBcUwxeHlYRzRnSUhObGRGWnZiSFZ0WlNoMmIyeDFiV1VzSUhObFkyOXVaSE1nUFNBd0xDQmxZWE5wYm1kR2Jpa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVkbTlzZFcxbFVHVnVaR2x1WnlrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5d2NtOXRhWE5sY3k1MmIyeDFiV1V1WTJGdVkyVnNLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtOXNkVzFsSUQwZ1RXRjBhRlYwYVd4ekxtTnNZVzF3S0hadmJIVnRaU2s3WEhKY2JpQWdJQ0IwYUdsekxsOXdjbTl0YVhObGN5NTJiMngxYldVZ1BTQkJibWx0WVhScGIyNVZkR2xzY3k1cGJuUmxjbkJ2YkdGMFpWQnliM0JsY25SNUtGeHlYRzRnSUNBZ0lDQjBhR2x6TEZ4eVhHNGdJQ0FnSUNBbmRtOXNkVzFsSnl4Y2NseHVJQ0FnSUNBZ2RtOXNkVzFsTEZ4eVhHNGdJQ0FnSUNCN2MyVmpiMjVrY3l3Z1pXRnphVzVuUm01OVhISmNiaUFnSUNBcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5d2NtOXRhWE5sY3k1MmIyeDFiV1U3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCUVlYVnpaU0JwYm5SbGNuQnZiR0YwYVc5dUlHaGhjSEJsYm1sdVp5QnZiaUIwYUdVZ2MzQmxZV3RsY2lkeklIWnZiSFZ0WlNCd2NtOXdaWEowZVM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSEJoZFhObFZtOXNkVzFsS0NrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVmZG05c2RXMWxVR0YxYzJWa0lEMGdkSEoxWlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyYjJ4MWJXVlFaVzVrYVc1bk8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVZ6ZFcxbElHRnVlU0JwYm5SbGNuQnZiR0YwYVc5dUlHaGhjSEJsYm1sdVp5QnZiaUIwYUdVZ2MzQmxZV3RsY2lkeklIWnZiSFZ0WlNCd2NtOXdaWEowZVM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlZ4eVhHNGdJQ0FxTDF4eVhHNGdJSEpsYzNWdFpWWnZiSFZ0WlNncElIdGNjbHh1SUNBZ0lIUm9hWE11WDNadmJIVnRaVkJoZFhObFpDQTlJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5admJIVnRaVkJsYm1ScGJtYzdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJWY0dSaGRHVWdkR2hsSUdOMWNuSmxiblJzZVNCd2JHRjVhVzVuSUhOd1pXVmphQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmtaV3gwWVZScGJXVWdMU0JVYVcxbElITnBibU5sSUhSb1pTQnNZWE4wSUhWd1pHRjBaUzVjY2x4dUlDQWdLaTljY2x4dUlDQjFjR1JoZEdVb1pHVnNkR0ZVYVcxbEtTQjdYSEpjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYM1p2YkhWdFpWQmhkWE5sWkNrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5d2NtOXRhWE5sY3k1MmIyeDFiV1V1WlhobFkzVjBaU2hrWld4MFlWUnBiV1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWpkWEp5Wlc1MFUzQmxaV05vSUNZbUlIUm9hWE11WDJOMWNuSmxiblJUY0dWbFkyZ3VjR3hoZVdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFUzQmxaV05vTG5admJIVnRaU0E5SUhSb2FYTXVYM1p2YkhWdFpUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOd1pXVmphQzUxY0dSaGRHVW9kR2hwY3k1ZmFHOXpkQzV1YjNjcE8xeHlYRzRnSUNBZ0lDQnpkWEJsY2k1MWNHUmhkR1VvWkdWc2RHRlVhVzFsS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTmxkQ0IwYUdVZ1kzVnljbVZ1ZENCemNHVmxZMmdnZEc4Z1lTQnVaWGNnWVhOelpYUWdZVzVrSUhWd1pHRjBaU0IwYUdVZ2MzQmxaV05vSjNNZ2MzQmxaV05vYldGeWExeHlYRzRnSUNBcUlHOW1abk5sZENCMllXeDFaU0IwYnlCdFlYUmphQ0IwYUdGMElHOW1JSFJvWlNCbVpXRjBkWEpsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCeWFYWmhkR1ZjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdRV0p6ZEhKaFkzUlRjR1ZsWTJoOUlITndaV1ZqYUNBdElGTndaV1ZqYUNCMGJ5QnpaWFFnWVhNZ1kzVnljbVZ1ZEM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JmYzJWMFEzVnljbVZ1ZEZOd1pXVmphQ2h6Y0dWbFkyZ3BJSHRjY2x4dUlDQWdJSE53WldWamFDNXpjR1ZsWTJodFlYSnJUMlptYzJWMElEMGdkR2hwY3k1ZmMzQmxaV05vYldGeWEwOW1abk5sZER0Y2NseHVJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlRjR1ZsWTJnZ1BTQnpjR1ZsWTJnN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkRjbVZoZEdVZ1lTQndjbTl0YVhObElIUm9ZWFFnZDJsc2JDQndiR0Y1TDNKbGMzVnRaU0JoSUhOd1pXVmphQ0IzYVhSb0lIUm9aU0JuYVhabGJpQjBaWGgwSUdGbWRHVnlYSEpjYmlBZ0lDb2dkR2hsSUdGMVpHbHZJR052Ym5SbGVIUWdZWFIwWlcxd2RITWdkRzhnY21WemRXMWxJR0Z1WkNCemNHVmxZMmdnWVhWa2FXOGdhWE1nY21WMGNtbGxkbVZrSUdaeWIyMGdVRzlzYkhrdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNISnBkbUYwWlZ4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSFJsZUhRZ0xTQlVhR1VnZEdWNGRDQnZaaUIwYUdVZ2JtVjNJSE53WldWamFDQjBieUJ3YkdGNUxseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wUFgwZ1kyOXVabWxuSUMwZ1QzQjBhVzl1WVd3Z2NHRnlZVzFsZEdWeWN5Qm1iM0lnZEdobElITndaV1ZqYUM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzNCc1lYbE5aWFJvYjJRZ1BTQW5jR3hoZVNkZElDMGdUV1YwYUc5a0lIUnZJR1Y0WldOMWRHVWdiMjRnZEdobElISmxjM1ZzZEdsdVoxeHlYRzRnSUNBcUlGTndaV1ZqYUNCdlltcGxZM1F1SUZaaGJHbGtJRzl3ZEdsdmJuTWdZWEpsSUNkd2JHRjVKeUJoYm1RZ0ozSmxjM1Z0WlNjdVhISmNiaUFnSUNvdlhISmNiaUFnWDNOMFlYSjBVM0JsWldOb0tIUmxlSFFzSUdOdmJtWnBaeXdnY0d4aGVVMWxkR2h2WkNBOUlDZHdiR0Y1SnlrZ2UxeHlYRzRnSUNBZ0x5OGdTV1lnYm04Z2RHVjRkQ0JwY3lCd2NtOTJhV1JsWkN3Z2RISjVJSFJ2SUhWelpTQjBhR1VnWTNWeWNtVnVkQ0J6Y0dWbFkyaGNjbHh1SUNBZ0lHbG1JQ2gwWlhoMElEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ2NHeGhlVTFsZEdodlpDQTlQVDBnSjNKbGMzVnRaU2NnSmlZZ2RHaHBjeTVmWTNWeWNtVnVkRk53WldWamFDa2dlMXh5WEc0Z0lDQWdJQ0IwWlhoMElEMGdkR2hwY3k1ZlkzVnljbVZ1ZEZOd1pXVmphQzUwWlhoME8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR052Ym5OMElHTjFjbkpsYm5SUWNtOXRhWE5sSUQwZ2RHaHBjeTVmWTNWeWNtVnVkRkJ5YjIxcGMyVWdmSHdnZTF4eVhHNGdJQ0FnSUNCd2JHRjVPaUJ1WlhjZ1JHVm1aWEp5WldRb1hISmNiaUFnSUNBZ0lDQWdkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0FnSUNncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SUWNtOXRhWE5sTG5Od1pXVmphQzVqWVc1alpXd29LVHRjY2x4dUlDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJRY205dGFYTmxMbk53WldWamFDNWpZVzVqWld3b0tUdGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlFjbTl0YVhObExuTndaV1ZqYUM1allXNWpaV3dvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ2tzWEhKY2JpQWdJQ0FnSUhOd1pXVmphRG9nYm1WM0lFUmxabVZ5Y21Wa0tDa3NYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZCeWIyMXBjMlVnUFNCamRYSnlaVzUwVUhKdmJXbHpaVHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDluWlhSVGNHVmxZMmdvZEdWNGRDd2dZMjl1Wm1sbktWeHlYRzRnSUNBZ0lDQXVkR2hsYmloemNHVmxZMmdnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUVWNGFYUWdhV1lnZEdobElIQnliMjFwYzJVZ2FYTWdibThnYkc5dVoyVnlJSEJsYm1ScGJtY2dZbVZqWVhWelpTQnZaaUIxYzJWeUlHbHVkR1Z5WVdOMGFXOXVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpkWEp5Wlc1MFVISnZiV2x6WlM1d2JHRjVMbkJsYm1ScGJtY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdVgyTjFjbkpsYm5SUWNtOXRhWE5sSUNFOVBTQmpkWEp5Wlc1MFVISnZiV2x6WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1EyRnVZMlZzSUdsbUlHRnViM1JvWlhJZ1kyRnNiQ0IwYnlCd2JHRjVJR2hoY3lCaGJISmxZV1I1SUdKbFpXNGdiV0ZrWlZ4eVhHNGdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGQnliMjFwYzJVdWNHeGhlUzVqWVc1alpXd29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRkpsYzJWMElHTjFjbkpsYm5RZ2MzQmxaV05vSUhkb1pXNGdkR2hsSUhOd1pXVmphQ0JsYm1SelhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyNUdhVzVwYzJnZ1BTQW9LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFUzQmxaV05vSUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJRY205dGFYTmxJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRFlXNWpaV3dnZEdobElHTjFjbkpsYm5Sc2VTQndiR0Y1YVc1bklITndaV1ZqYUZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWpkWEp5Wlc1MFUzQmxaV05vSUNZbUlIUm9hWE11WDJOMWNuSmxiblJUY0dWbFkyZ3VjR3hoZVdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJzWVhsTlpYUm9iMlFnUFQwOUlDZHdiR0Y1SnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqZFhKeVpXNTBVM0JsWldOb0xtTmhibU5sYkNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0d4aGVVMWxkR2h2WkNBOVBUMGdKM0psYzNWdFpTY2dKaVpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOd1pXVmphQzVoZFdScGJ5QWhQVDBnYzNCbFpXTm9MbUYxWkdsdlhISmNiaUFnSUNBZ0lDQWdJQ0FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTndaV1ZqYUM1allXNWpaV3dvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sZEVOMWNuSmxiblJUY0dWbFkyZ29jM0JsWldOb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdVR3hoZVNCMGFHVWdjM0JsWldOb1hISmNiaUFnSUNBZ0lDQWdZM1Z5Y21WdWRGQnliMjFwYzJVdWMzQmxaV05vSUQwZ2MzQmxaV05vVzNCc1lYbE5aWFJvYjJSZEtGeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhRzl6ZEM1dWIzY3NYSEpjYmlBZ0lDQWdJQ0FnSUNCdmJrWnBibWx6YUN4Y2NseHVJQ0FnSUNBZ0lDQWdJRzl1Um1sdWFYTm9MRnh5WEc0Z0lDQWdJQ0FnSUNBZ2IyNUdhVzVwYzJoY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJRY205dGFYTmxMbk53WldWamFGeHlYRzRnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZM1Z5Y21WdWRGQnliMjFwYzJVdWMzQmxaV05vTG5KbGMyOXNkbVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZCeWIyMXBjMlV1Y0d4aGVTNXlaWE52YkhabEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZCeWIyMXBjMlV1Y0d4aGVTNWpZVzVqWld3b0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQWdJQzVqWVhSamFDaGxjbkp2Y2lBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SUWNtOXRhWE5sTG5Cc1lYa3VjbVZxWldOMEtHVnljbTl5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQXVZMkYwWTJnb1pTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1pTQTlJR0JEWVc1dWIzUWdKSHR3YkdGNVRXVjBhRzlrZlNCemNHVmxZMmdnSkh0MFpYaDBmU0J2YmlCb2IzTjBJQ1I3ZEdocGN5NW9iM04wTG1sa2ZTNGdKSHRsZldBN1hISmNiaUFnSUNBZ0lDQWdZM1Z5Y21WdWRGQnliMjFwYzJVdWNHeGhlUzV5WldwbFkzUW9aU2s3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQmpkWEp5Wlc1MFVISnZiV2x6WlM1d2JHRjVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTNSdmNDQmhibmtnYzNCbFpXTm9aWE1nWTNWeWNtVnVkR3g1SUhCc1lYbHBibWNnWVc1a0lIQnNZWGtnWVNCdVpYY2djM0JsWldOb0lHWnliMjBnZEdobElHSmxaMmx1Ym1sdVp5NWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMFpYaDBJQzBnVkdobElIUmxlSFFnYjJZZ2RHaGxJRzVsZHlCemNHVmxZMmdnZEc4Z2NHeGhlUzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamREMTlJR052Ym1acFp5QXRJRTl3ZEdsdmJtRnNJSEJoY21GdFpYUmxjbk1nWm05eUlIUm9aU0J6Y0dWbFkyZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdSR1ZtWlhKeVpXUjlYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2NHeGhlU2gwWlhoMExDQmpiMjVtYVdjcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEdGeWRGTndaV1ZqYUNoMFpYaDBMQ0JqYjI1bWFXY3NJQ2R3YkdGNUp5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJKWmlCaElITndaV1ZqYUNCcGN5QmpkWEp5Wlc1MGJIa2djR3hoZVdsdVp5d2djR0YxYzJVZ2FYUWdZWFFnZEdobElHTjFjbkpsYm5RZ2RHbHRaUzVjY2x4dUlDQWdLaTljY2x4dUlDQndZWFZ6WlNncElIdGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWpkWEp5Wlc1MFUzQmxaV05vSUNZbUlIUm9hWE11WDJOMWNuSmxiblJUY0dWbFkyZ3VjR3hoZVdsdVp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFUzQmxaV05vTG5CaGRYTmxLSFJvYVhNdVgyaHZjM1F1Ym05M0tUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWhjY2x4dUlDQWdJQ0FnSUNCZ1EyRnVibTkwSUhCaGRYTmxJSE53WldWamFDQnZiaUJvYjNOMElDUjdkR2hwY3k1b2IzTjBMbWxrZlM0Z1RtOGdjM0JsWldOb0lHbHpJR04xY25KbGJuUnNlU0J3YkdGNWFXNW5ZRnh5WEc0Z0lDQWdJQ0FwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1UzUnZjQ0JoYm5rZ2MzQmxaV05vWlhNZ1kzVnljbVZ1ZEd4NUlIQnNZWGxwYm1jZ1lXNWtJSEpsYzNWdFpTQmhJRzVsZHlCemNHVmxZMmdnWm5KdmJTQjBhR1VnWTNWeWNtVnVkRnh5WEc0Z0lDQXFJSFJwYldVdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaejE5SUhSbGVIUWdMU0JVYUdVZ2RHVjRkQ0J2WmlCMGFHVWdibVYzSUhOd1pXVmphQ0IwYnlCd2JHRjVMaUJKWmlCMWJtUmxabWx1WldRZ1lXNWtYSEpjYmlBZ0lDb2dkR2hsY21VZ2FYTWdZU0JqZFhKeVpXNTBJSE53WldWamFDQjBhR0YwSUdseklIQmhkWE5sWkN3Z2RHaGxJR04xY25KbGJuUWdjM0JsWldOb0lIZHBiR3dnWW1VZ2NtVnpkVzFsWkM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkRDE5SUdOdmJtWnBaeUF0SUU5d2RHbHZibUZzSUhCaGNtRnRaWFJsY25NZ1ptOXlJSFJvWlNCemNHVmxZMmd1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3UkdWbVpYSnlaV1I5WEhKY2JpQWdJQ292WEhKY2JpQWdjbVZ6ZFcxbEtIUmxlSFFzSUdOdmJtWnBaeWtnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBZWEowVTNCbFpXTm9LSFJsZUhRc0lHTnZibVpwWnl3Z0ozSmxjM1Z0WlNjcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dTV1lnWVNCemNHVmxZMmdnYVhNZ1kzVnljbVZ1ZEd4NUlIQnNZWGxwYm1jc0lITjBiM0FnY0d4aGVXSmhZMnNnWVc1a0lISmxjMlYwSUhScGJXVXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUnZjQ2dwSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwVTNCbFpXTm9JQ1ltSUhSb2FYTXVYMk4xY25KbGJuUlRjR1ZsWTJndWNHeGhlV2x1WnlrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TGw5amRYSnlaVzUwVTNCbFpXTm9Mbk4wYjNBb0tUdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOd1pXVmphQ0E5SUc1MWJHdzdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEhKY2JpQWdJQ0FnSUNBZ1lFTmhibTV2ZENCemRHOXdJSE53WldWamFDQnZiaUJvYjNOMElDUjdkR2hwY3k1b2IzTjBMbWxrZlM0Z1RtOGdjM0JsWldOb0lHbHpJR04xY25KbGJuUnNlU0J3YkdGNWFXNW5MbUJjY2x4dUlDQWdJQ0FnS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUdScGMyTmhjbVFvS1NCN1hISmNiaUFnSUNCcFppQW9kR2hwY3k1ZlkzVnljbVZ1ZEZOd1pXVmphQ0FtSmlCMGFHbHpMbDlqZFhKeVpXNTBVM0JsWldOb0xuQnNZWGxwYm1jcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOd1pXVmphQzV6ZEc5d0tDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgzTndaV1ZqYUVOaFkyaGxPMXh5WEc1Y2NseHVJQ0FnSUhOMWNHVnlMbVJwYzJOaGNtUW9LVHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLRUZpYzNSeVlXTjBWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaU3dnZTF4eVhHNGdJRUZYVTE5V1JWSlRTVTlPT2lCN1hISmNiaUFnSUNCblpYUTZJQ2dwSUQwK0lHRjNjMVpsY25OcGIyNHNYSEpjYmlBZ2ZTeGNjbHh1SUNCUVQweE1XVjlOU1U1ZlRrVlZVa0ZNWDFaRlVsTkpUMDQ2SUh0Y2NseHVJQ0FnSUhaaGJIVmxPaUFuTWk0MU1ETW5MRnh5WEc0Z0lDQWdkM0pwZEdGaWJHVTZJR1poYkhObExGeHlYRzRnSUgwc1hISmNiaUFnVUU5TVRGbGZSRVZHUVZWTVZGTTZJSHRjY2x4dUlDQWdJSFpoYkhWbE9pQjdYSEpjYmlBZ0lDQWdJRVZ1WjJsdVpUb2dKM04wWVc1a1lYSmtKeXhjY2x4dUlDQWdJQ0FnVEdWNGFXTnZiazVoYldWek9pQmJYU3hjY2x4dUlDQWdJQ0FnVDNWMGNIVjBSbTl5YldGME9pQW5iWEF6Snl4Y2NseHVJQ0FnSUNBZ1UyRnRjR3hsVW1GMFpUb2dKekl5TURVd0p5eGNjbHh1SUNBZ0lDQWdWR1Y0ZERvZ0p5Y3NYSEpjYmlBZ0lDQWdJRlJsZUhSVWVYQmxPaUFuYzNOdGJDY3NYSEpjYmlBZ0lDQWdJRlp2YVdObFNXUTZJQ2RCYlhrbkxGeHlYRzRnSUNBZ0lDQk1ZVzVuZFdGblpVTnZaR1U2SUNkbGJpMUhRaWNzWEhKY2JpQWdJQ0FnSUV4aGJtZDFZV2RsVG1GdFpUb2dKMEp5YVhScGMyZ2dSVzVuYkdsemFDY3NYSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdkM0pwZEdGaWJHVTZJR1poYkhObExGeHlYRzRnSUgwc1hISmNiaUFnVUU5TVRGbGZWazlKUTBWVE9pQjdYSEpjYmlBZ0lDQjJZV3gxWlRvZ1cxMHNYSEpjYmlBZ0lDQjNjbWwwWVdKc1pUb2dabUZzYzJVc1hISmNiaUFnZlN4Y2NseHVJQ0JRVDB4TVdWOU1RVTVIVlVGSFJWTTZJSHRjY2x4dUlDQWdJSFpoYkhWbE9pQjdmU3hjY2x4dUlDQWdJSGR5YVhSaFlteGxPaUJtWVd4elpTeGNjbHh1SUNCOUxGeHlYRzRnSUZCUFRFeFpYMHhCVGtkVlFVZEZYME5QUkVWVE9pQjdYSEpjYmlBZ0lDQjJZV3gxWlRvZ2UzMHNYSEpjYmlBZ0lDQjNjbWwwWVdKc1pUb2dabUZzYzJVc1hISmNiaUFnZlN4Y2NseHVJQ0JmYVhOU1pXRmtlVG9nZTF4eVhHNGdJQ0FnZG1Gc2RXVTZJR1poYkhObExGeHlYRzRnSUNBZ2QzSnBkR0ZpYkdVNklIUnlkV1VzWEhKY2JpQWdmU3hjY2x4dUlDQkZWa1ZPVkZNNklIdGNjbHh1SUNBZ0lIWmhiSFZsT2lCN1hISmNiaUFnSUNBZ0lDNHVMazlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloQlluTjBjbUZqZEZSbGVIUlViMU53WldWamFFWmxZWFIxY21VcExrVldSVTVVVXl4Y2NseHVJQ0FnSUNBZ2NtVmhaSGs2SUNkdmJsSmxZV1I1UlhabGJuUW5MRnh5WEc0Z0lDQWdJQ0J3YkdGNU9pQW5iMjVRYkdGNVJYWmxiblFuTEZ4eVhHNGdJQ0FnSUNCd1lYVnpaVG9nSjI5dVVHRjFjMlZGZG1WdWRDY3NYSEpjYmlBZ0lDQWdJSEpsYzNWdFpUb2dKMjl1VW1WemRXMWxSWFpsYm5RbkxGeHlYRzRnSUNBZ0lDQnBiblJsY25KMWNIUTZJQ2R2YmtsdWRHVnljblZ3ZEVWMlpXNTBKeXhjY2x4dUlDQWdJQ0FnYzNSdmNEb2dKMjl1VTNSdmNFVjJaVzUwSnl4Y2NseHVJQ0FnSUNBZ2MyVnVkR1Z1WTJVNklDZHZibE5sYm5SbGJtTmxSWFpsYm5RbkxGeHlYRzRnSUNBZ0lDQjNiM0prT2lBbmIyNVhiM0prUlhabGJuUW5MRnh5WEc0Z0lDQWdJQ0IyYVhObGJXVTZJQ2R2YmxacGMyVnRaVVYyWlc1MEp5eGNjbHh1SUNBZ0lDQWdjM050YkRvZ0oyOXVVM050YkVWMlpXNTBKeXhjY2x4dUlDQWdJSDBzWEhKY2JpQWdmU3hjY2x4dUlDQlRSVkpXU1VORlV6b2dlMXh5WEc0Z0lDQWdkbUZzZFdVNklIdGNjbHh1SUNBZ0lDQWdMaTR1VDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtFRmljM1J5WVdOMFZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTa3VVMFZTVmtsRFJWTXNYSEpjYmlBZ0lDQWdJSEJ2Ykd4NU9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJSEJ5WlhOcFoyNWxjam9nZFc1a1pXWnBibVZrTEZ4eVhHNGdJQ0FnZlN4Y2NseHVJQ0I5TEZ4eVhHNTlLVHRjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFRmljM1J5WVdOMFZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpUc2lMQ0l2THlCRGIzQjVjbWxuYUhRZ1FXMWhlbTl1TG1OdmJTd2dTVzVqTGlCdmNpQnBkSE1nWVdabWFXeHBZWFJsY3k0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNjbHh1THk4Z1UxQkVXQzFNYVdObGJuTmxMVWxrWlc1MGFXWnBaWEk2SUUxSlZDMHdYSEpjYm1sdGNHOXlkQ0JUY0dWbFkyZ2dabkp2YlNBbkxpOVRjR1ZsWTJnbk8xeHlYRzVwYlhCdmNuUWdSR1ZtWlhKeVpXUWdabkp2YlNBbkxpNHZSR1ZtWlhKeVpXUW5PMXh5WEc1cGJYQnZjblFnUVdKemRISmhZM1JVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsSUdaeWIyMGdKeTR2UVdKemRISmhZM1JVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsSnp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQVpYaDBaVzVrY3lCQlluTjBjbUZqZEZSbGVIUlViMU53WldWamFFWmxZWFIxY21WY2NseHVJQ29nUUdGc2FXRnpJR052Y21VdlZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpWeHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTQmxlSFJsYm1SeklFRmljM1J5WVdOMFZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTQjdYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9MaTR1WVhKbmN5a2dlMXh5WEc0Z0lDQWdjM1Z3WlhJb0xpNHVZWEpuY3lrN1hISmNibHh5WEc0Z0lDQWdkR2hwY3k1ZlpXNWhZbXhsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnZEdocGN5NWZjMlYwUVhWa2FXOURiMjUwWlhoMEtDazdYSEpjYmlBZ0lDQjBhR2x6TGw5dlluTmxjblpsUVhWa2FXOURiMjUwWlhoMEtDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJUZEc5eVpTQjBhR1VnWVhWa2FXOGdZMjl1ZEdWNGRDQjBhR0YwSUhkcGJHd2dZbVVnZFhObFpDQjBieUJsYm5OMWNtVWdZWFZrYVc4Z1kyRnVJR0psSUhCc1lYbGxaQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1gzTmxkRUYxWkdsdlEyOXVkR1Y0ZENncElIdGNjbHh1SUNBZ0lIUm9hWE11WDJGMVpHbHZRMjl1ZEdWNGRDQTlJRzVsZHlCQmRXUnBiME52Ym5SbGVIUW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUV4cGMzUmxiaUJtYjNJZ2MzUmhkR1VnWTJoaGJtZGxjeUJ2YmlCMGFHVWdZWFZrYVc4Z1kyOXVkR1Y0ZENCMGJ5QmtaWFJsY20xcGJtVWdkMmhsZEdobGNpQjBhR1VnWm1WaGRIVnlaVnh5WEc0Z0lDQXFJR2x6SUdWdVlXSnNaV1F1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0hKcGRtRjBaVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXZZbk5sY25abFFYVmthVzlEYjI1MFpYaDBLQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJGMVpHbHZRMjl1ZEdWNGRDa2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOWhkV1JwYjBOdmJuUmxlSFF1YjI1emRHRjBaV05vWVc1blpTQTlJQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWVhWa2FXOURiMjUwWlhoMExuTjBZWFJsSUQwOVBTQW5jblZ1Ym1sdVp5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWdVlXSnNaV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtRmliR1ZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ2RVYUdVZ1lYVmthVzhnWTI5dWRHVjRkQ0JwY3lCdWIzUWdjblZ1Ym1sdVp5NGdVM0JsWldOb0lIZHBiR3dnYm05MElHSmxJR0ZpYkdVZ2RHOGdZbVVnY0d4aGVXVmtJSFZ1ZEdsc0lHbDBJR2x6SUhKbGMzVnRaV1F1SUZWelpTQjBhR1VnWENKVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbExuSmxjM1Z0WlVGMVpHbHZYQ0lnYldWMGFHOWtJSFJ2SUhSeWVTQjBieUJ5WlhOMWJXVWdhWFFnWVdaMFpYSWdZU0IxYzJWeUlHZGxjM1IxY21VdUoxeHlYRzRnSUNBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQjBhR2x6TGw5aGRXUnBiME52Ym5SbGVIUXViMjV6ZEdGMFpXTm9ZVzVuWlNncE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRM0psWVhSbElHRnVJRUYxWkdsdklHOWlhbVZqZENCdlppQnpjR1ZsWTJnZ1lYVmthVzhnWm05eUlIUm9aU0JuYVhabGJpQnpjR1ZsWTJnZ2RHVjRkQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2NHRnlZVzF6SUMwZ1VHRnlZVzFsZEdWeWN5QnZZbXBsWTNRZ1kyOXRjR0YwYVdKc1pTQjNhWFJvSUZCdmJHeDVMbk41Ym5Sb1pYTnBlbVZUY0dWbFkyZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpYMGdVbVZ6YjJ4MlpYTWdkMmwwYUNCaGJpQnZZbXBsWTNRZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnWVhWa2FXOGdWVkpNSUdGdVpDQkJkV1JwYjF4eVhHNGdJQ0FxSUc5aWFtVmpkQzVjY2x4dUlDQWdLaTljY2x4dUlDQmZjM2x1ZEdobGMybDZaVUYxWkdsdktIQmhjbUZ0Y3lrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhOMWNHVnlMbDl6ZVc1MGFHVnphWHBsUVhWa2FXOG9jR0Z5WVcxektTNTBhR1Z1S0hKbGMzVnNkQ0E5UGlCN1hISmNiaUFnSUNBZ0lHTnZibk4wSUh0MWNteDlJRDBnY21WemRXeDBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdRM0psWVhSbElHRnVJRUYxWkdsdklHOWlhbVZqZENCMGFHRjBJSEJ2YVc1MGN5QjBieUIwYUdVZ2NISmxjMmxuYm1Wa0lIVnliRnh5WEc0Z0lDQWdJQ0JqYjI1emRDQmhkV1JwYnlBOUlHNWxkeUJCZFdScGJ5aDFjbXdwTzF4eVhHNGdJQ0FnSUNCaGRXUnBieTVzYjI5d0lEMGdkR2hwY3k1c2IyOXdPMXh5WEc0Z0lDQWdJQ0JoZFdScGJ5NWpjbTl6YzA5eWFXZHBiaUE5SUNkaGJtOXVlVzF2ZFhNbk8xeHlYRzRnSUNBZ0lDQmhkV1JwYnk1d2NtVnNiMkZrSUQwZ0oyRjFkRzhuTzF4eVhHNGdJQ0FnSUNCeVpYTjFiSFF1WVhWa2FXOGdQU0JoZFdScGJ6dGNjbHh1WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNoeVpYTnZiSFpsSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCU1pYTnZiSFpsSUc5dVkyVWdkR2hsSUcxcGJtbHRkVzBnWVcxdmRXNTBJR2x6SUd4dllXUmxaRnh5WEc0Z0lDQWdJQ0FnSUdGMVpHbHZMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5oYm5Cc1lYbDBhSEp2ZFdkb0p5d2dLQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhOMWJIUXBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QlRkR0Z5ZENCc2IyRmthVzVuSUhSb1pTQmhkV1JwYjF4eVhHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVhCd1pXNWtRMmhwYkdRb1lYVmthVzhwTzF4eVhHNGdJQ0FnSUNBZ0lHRjFaR2x2TG14dllXUW9LVHRjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU55WldGMFpTQmhJRzVsZHlCVGNHVmxZMmdnYjJKcVpXTjBJR1p2Y2lCMGFHVWdjM0JsWVd0bGNpNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndjbWwyWVhSbFhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTFSbGVIUlViMU53WldWamFIMGdjM0JsWVd0bGNpQXRJRlJvWlNCVVpYaDBWRzlUY0dWbFkyZ2dhVzV6ZEdGdVkyVWdkR2hoZENCM2FXeHNJRzkzYmlCMGFHVWdjM0JsWldOb0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCMFpYaDBJQzBnVkdWNGRDQnZaaUIwYUdVZ2MzQmxaV05vTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J6Y0dWbFkyaHRZWEpyY3lBdElGTndaV1ZqYUcxaGNtdHpJR1p2Y2lCMGFHVWdjM0JsWldOb0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCaGRXUnBiME52Ym1acFp5QXRJRUYxWkdsdklHWnZjaUIwYUdVZ2MzQmxaV05vTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBGaWMzUnlZV04wVTNCbFpXTm9mVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOWpjbVZoZEdWVGNHVmxZMmdvZEdWNGRDd2djM0JsWldOb2JXRnlhM01zSUdGMVpHbHZRMjl1Wm1sbktTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRk53WldWamFDaDBhR2x6TENCMFpYaDBMQ0J6Y0dWbFkyaHRZWEpyY3l3Z1lYVmthVzlEYjI1bWFXY3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUjJWMGN5QjNhR1YwYUdWeUlHOXlJRzV2ZENCMGFHVWdZWFZrYVc4Z1kyOXVkR1Y0ZENCcGN5QnlkVzV1YVc1bklHRnVaQ0J6Y0dWbFkyZ2dZMkZ1SUdKbElIQnNZWGxsWkM1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpXRmtiMjVzZVZ4eVhHNGdJQ0FxSUVCMGVYQmxJSHRpYjI5c1pXRnVmVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0JsYm1GaWJHVmtLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyVnVZV0pzWldRN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlVjbmtnZEc4Z2NtVnpkVzFsSUhSb1pTQmhkV1JwYnlCamIyNTBaWGgwTGlCVWFHbHpJSGRwYkd3Z1ltVWdZWFYwYjIxaGRHbGpZV3hzZVNCbGVHVmpkWFJsWkNCbFlXTm9JSFJwYldWY2NseHVJQ0FnS2lCemNHVmxZMmdnYVhNZ2NHeGhlV1ZrSUc5eUlISmxjM1Z0WldRdUlFbG1JSFZ6YVc1bklHMWhiblZoYkd4NUxDQnBkQ0J6YUc5MWJHUWdZbVVnWTJGc2JHVmtJR0ZtZEdWeUlHRmNjbHh1SUNBZ0tpQjFjMlZ5SUdsdWRHVnlZV04wYVc5dUlHOWpZM1Z5Y3k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0RVpXWmxjbkpsWkgwZ0xTQlNaWE52YkhabGN5QnZibU5sSUhSb1pTQmhkV1JwYnlCamIyNTBaWGgwSUdoaGN5QnlaWE4xYldWa0xseHlYRzRnSUNBcUwxeHlYRzRnSUhKbGMzVnRaVUYxWkdsdktDa2dlMXh5WEc0Z0lDQWdZMjl1YzNRZ2NISnZiV2x6WlNBOUlHNWxkeUJFWldabGNuSmxaQ2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDJGMVpHbHZRMjl1ZEdWNGRGeHlYRzRnSUNBZ0lDQWdJQzV5WlhOMWJXVW9LVnh5WEc0Z0lDQWdJQ0FnSUM1MGFHVnVLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZ1WVdKc1pXUWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQ0FnTG1OaGRHTm9LR1VnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaVzVoWW14bFpDQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1VwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lGOXpkR0Z5ZEZOd1pXVmphQ2gwWlhoMExDQmpiMjVtYVdjc0lIQnNZWGxOWlhSb2IyUWdQU0FuY0d4aGVTY3BJSHRjY2x4dUlDQWdJR052Ym5OMElHTjFjbkpsYm5SUWNtOXRhWE5sSUQwZ2UxeHlYRzRnSUNBZ0lDQndiR0Y1T2lCdVpYY2dSR1ZtWlhKeVpXUW9YSEpjYmlBZ0lDQWdJQ0FnZFc1a1pXWnBibVZrTEZ4eVhHNGdJQ0FnSUNBZ0lDZ3BJRDArSUhzZ1kzVnljbVZ1ZEZCeWIyMXBjMlV1YzNCbFpXTm9MbU5oYm1ObGJDZ3BPeUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDZ3BJRDArSUhzZ1kzVnljbVZ1ZEZCeWIyMXBjMlV1YzNCbFpXTm9MbU5oYm1ObGJDZ3BPeUI5TEZ4eVhHNGdJQ0FnSUNBZ0lDZ3BJRDArSUhzZ1kzVnljbVZ1ZEZCeWIyMXBjMlV1YzNCbFpXTm9MbU5oYm1ObGJDZ3BPeUI5WEhKY2JpQWdJQ0FnSUNrc1hISmNiaUFnSUNBZ0lITndaV1ZqYURvZ2JtVjNJRVJsWm1WeWNtVmtLQ2tzWEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGQnliMjFwYzJVZ1BTQmpkWEp5Wlc1MFVISnZiV2x6WlR0Y2NseHVYSEpjYmlBZ0lDQXZMeUJVY25rZ2RHOGdjM1JoY25RZ2RHaGxJR0YxWkdsdklHTnZiblJsZUhSY2NseHVJQ0FnSUhSb2FYTXVjbVZ6ZFcxbFFYVmthVzhvS1M1MGFHVnVLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdMeThnUlhocGRDQnBaaUIwYUdVZ2NISnZiV2x6WlNCcGN5QnVieUJzYjI1blpYSWdjR1Z1WkdsdVp5QmlaV05oZFhObElHOW1JSFZ6WlhJZ2FXNTBaWEpoWTNScGIyNWNjbHh1SUNBZ0lDQWdhV1lnS0NGamRYSnlaVzUwVUhKdmJXbHpaUzV3YkdGNUxuQmxibVJwYm1jcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnTHk4Z1EyRnVZMlZzSUdsbUlHRnViM1JvWlhJZ1kyRnNiQ0IwYnlCd2JHRjVJR2hoY3lCaGJISmxZV1I1SUdKbFpXNGdiV0ZrWlZ4eVhHNGdJQ0FnSUNCbGJITmxJR2xtSUNoMGFHbHpMbDlqZFhKeVpXNTBVSEp2YldselpTQWhQVDBnWTNWeWNtVnVkRkJ5YjIxcGMyVXBJSHRjY2x4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVUhKdmJXbHpaUzV3YkdGNUxtTmhibU5sYkNncE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdWR2hsSUdGMVpHbHZJR052Ym5SbGVIUWdhWE1nY25WdWJtbHVaeUJ6YnlCMGFHVWdjM0JsWldOb0lHTmhiaUJpWlNCd2JHRjVaV1JjY2x4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDJWdVlXSnNaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkWEJsY2k1ZmMzUmhjblJUY0dWbFkyZ29kR1Y0ZEN3Z1kyOXVabWxuTENCd2JHRjVUV1YwYUc5a0tUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0F2THlCU1pXcGxZM1FnYVdZZ2RHaGxJR0YxWkdsdklHTnZiblJsZUhRZ2FYTWdibTkwSUhKMWJtNXBibWRjY2x4dUlDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRkJ5YjIxcGMyVXVjbVZxWldOMEtGeHlYRzRnSUNBZ0lDQWdJQ0FnYm1WM0lFVnljbTl5S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JnUTJGdWJtOTBJQ1I3Y0d4aGVVMWxkR2h2WkgwZ2MzQmxaV05vSUc5dUlHaHZjM1FnSkh0MGFHbHpMbDlvYjNOMExtbGtmUzRnVkdobElHRjFaR2x2SUdOdmJuUmxlSFFnYVhNZ2JtOTBJSEoxYm01cGJtY3VJRlZ6WlNCMGFHVWdYQ0pVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsTG5KbGMzVnRaVUYxWkdsdlhDSWdiV1YwYUc5a0lIUnZJSFJ5ZVNCMGJ5QnlaWE4xYldVZ2FYUWdZV1owWlhJZ1lTQjFjMlZ5SUdkbGMzUjFjbVV1WUZ4eVhHNGdJQ0FnSUNBZ0lDQWdLVnh5WEc0Z0lDQWdJQ0FnSUNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBVSEp2YldselpTNXdiR0Y1TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY0d4aGVTaDBaWGgwTENCamIyNW1hV2NwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpkR0Z5ZEZOd1pXVmphQ2gwWlhoMExDQmpiMjVtYVdjc0lDZHdiR0Y1SnlrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCeVpYTjFiV1VvZEdWNGRDd2dZMjl1Wm1sbktTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzNSaGNuUlRjR1ZsWTJnb2RHVjRkQ3dnWTI5dVptbG5MQ0FuY21WemRXMWxKeWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JwYm5OMFlXeHNRWEJwS0NrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnWVhCcElEMGdjM1Z3WlhJdWFXNXpkR0ZzYkVGd2FTZ3BPMXh5WEc1Y2NseHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLR0Z3YVN3Z2UxeHlYRzRnSUNBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNvZ1FHMWxiV0psY205bUlGUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVmNjbHh1SUNBZ0lDQWdJQ29nUUdsdWMzUmhibU5sWEhKY2JpQWdJQ0FnSUNBcUlFQnpaV1VnWTI5eVpTOVVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxJMlZ1WVdKc1pXUmNjbHh1SUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUdWdVlXSnNaV1E2SUh0Y2NseHVJQ0FnSUNBZ0lDQm5aWFE2SUNncElEMCtJSFJvYVhNdVgyVnVZV0pzWldRc1hISmNiaUFnSUNBZ0lIMHNYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnWVhCcE8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpUdGNjbHh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRUZ0WVhwdmJpNWpiMjBzSUVsdVl5NGdiM0lnYVhSeklHRm1abWxzYVdGMFpYTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEhKY2JpOHZJRk5RUkZndFRHbGpaVzV6WlMxSlpHVnVkR2xtYVdWeU9pQk5TVlF0TUZ4eVhHNXBiWEJ2Y25RZ1ZHVjRkRlJ2VTNCbFpXTm9WWFJwYkhNZ1puSnZiU0FuTGk5VVpYaDBWRzlUY0dWbFkyaFZkR2xzY3ljN1hISmNibWx0Y0c5eWRDQkJZbk4wY21GamRGTndaV1ZqYUNCbWNtOXRJQ2N1TDBGaWMzUnlZV04wVTNCbFpXTm9KenRjY2x4dWFXMXdiM0owSUZOd1pXVmphQ0JtY205dElDY3VMMU53WldWamFDYzdYSEpjYm1sdGNHOXlkQ0JCWW5OMGNtRmpkRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVnWm5KdmJTQW5MaTlCWW5OMGNtRmpkRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVuTzF4eVhHNXBiWEJ2Y25RZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTQm1jbTl0SUNjdUwxUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVW5PMXh5WEc0dktpcGNjbHh1SUNvZ1FHMXZaSFZzWlNCamIzSmxMMkYzYzNCaFkydGNjbHh1SUNvdlhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUhObFpTQmpiM0psTDBGaWMzUnlZV04wVkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRUZpYzNSeVlXTjBWR1Y0ZEZSdlUzQmxaV05vUm1WaGRIVnlaU3hjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYzJWbElHTnZjbVV2VkdWNGRGUnZVM0JsWldOb1JtVmhkSFZ5WlZ4eVhHNGdJQ0FxTDF4eVhHNGdJRlJsZUhSVWIxTndaV1ZqYUVabFlYUjFjbVVzWEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUUhObFpTQmpiM0psTDFSbGVIUlViMU53WldWamFGVjBhV3h6WEhKY2JpQWdJQ292WEhKY2JpQWdWR1Y0ZEZSdlUzQmxaV05vVlhScGJITXNYSEpjYmlBZ0x5b3FJRnh5WEc0Z0lDQXFJRUJ6WldVZ1kyOXlaUzlCWW5OMGNtRmpkRk53WldWamFGeHlYRzRnSUNBcUwxeHlYRzRnSUVGaWMzUnlZV04wVTNCbFpXTm9MRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUJ6WldVZ1kyOXlaUzlUY0dWbFkyaGNjbHh1SUNBZ0tpOWNjbHh1SUNCVGNHVmxZMmdnSUZ4eVhHNTlPMXh5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUVcxaGVtOXVMbU52YlN3Z1NXNWpMaUJ2Y2lCcGRITWdZV1ptYVd4cFlYUmxjeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2NseHVMeThnVTFCRVdDMU1hV05sYm5ObExVbGtaVzUwYVdacFpYSTZJRTFKVkMwd1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1FHMXZaSFZzWlNCamIzSmxMMGhQVTFSY2NseHVJQ292WEhKY2JseHlYRzVwYlhCdmNuUWdWWFJwYkhNZ1puSnZiU0FuTGk5VmRHbHNjeWM3WEhKY2JtbHRjRzl5ZENCTllYUm9WWFJwYkhNZ1puSnZiU0FuTGk5TllYUm9WWFJwYkhNbk8xeHlYRzVwYlhCdmNuUWdSR1ZtWlhKeVpXUWdabkp2YlNBbkxpOUVaV1psY25KbFpDYzdYSEpjYm1sdGNHOXlkQ0I3Wlc1MmZTQm1jbTl0SUNjdUwwaHZjM1JGYm5acGNtOXViV1Z1ZENjN1hISmNibWx0Y0c5eWRDQk5aWE56Wlc1blpYSWdabkp2YlNBbkxpOU5aWE56Wlc1blpYSW5PMXh5WEc1cGJYQnZjblFnU0c5emRFOWlhbVZqZENCbWNtOXRJQ2N1TDBodmMzUlBZbXBsWTNRbk8xeHlYRzVwYlhCdmNuUWdUR2x3YzNsdVkwWmxZWFIxY21Vc0lIc2dSR1ZtWVhWc2RGWnBjMlZ0WlUxaGNDQjlJR1p5YjIwZ0p5NHZUR2x3YzNsdVkwWmxZWFIxY21Vbk8xeHlYRzVwYlhCdmNuUWdSMlZ6ZEhWeVpVWmxZWFIxY21Vc0lIc2dSR1ZtWVhWc2RFZGxjM1IxY21WWGIzSmtjeUI5SUdaeWIyMGdKeTR2UjJWemRIVnlaVVpsWVhSMWNtVW5PMXh5WEc1cGJYQnZjblFnVUc5cGJuUlBaa2x1ZEdWeVpYTjBSbVZoZEhWeVpTd2dleUJCZUdselRXRndJSDBnWm5KdmJTQW5MaTlRYjJsdWRFOW1TVzUwWlhKbGMzUkdaV0YwZFhKbEp6dGNjbHh1WEhKY2JtbHRjRzl5ZENCaGJtbHRjR0ZqYXlCbWNtOXRJQ2N1TDJGdWFXMXdZV05ySnp0Y2NseHVZMjl1YzNRZ2V5QkZZWE5wYm1jc1hISmNiaUFnUVc1cGJXRjBhVzl1Um1WaGRIVnlaU3hjY2x4dUlDQkJibWx0WVhScGIyNVVlWEJsY3l4Y2NseHVJQ0JCYm1sdFlYUnBiMjVNWVhsbGNpeGNjbHh1SUNCTVlYbGxja0pzWlc1a1RXOWtaWE1zWEhKY2JpQWdSR1ZtWVhWc2RFeGhlV1Z5UW14bGJtUk5iMlJsTEZ4eVhHNGdJRk5wYm1kc1pWTjBZWFJsTEZ4eVhHNGdJRlJ5WVc1emFYUnBiMjVUZEdGMFpTeGNjbHh1SUNCR2NtVmxRbXhsYm1SVGRHRjBaU3hjY2x4dUlDQlJkV1YxWlZOMFlYUmxMRnh5WEc0Z0lGSmhibVJ2YlVGdWFXMWhkR2x2YmxOMFlYUmxMRnh5WEc0Z0lFSnNaVzVrTVdSVGRHRjBaU3hjY2x4dUlDQkNiR1Z1WkRKa1UzUmhkR1VzWEhKY2JpQWdRVzVwYldGMGFXOXVWWFJwYkhNZ2ZTQTlJR0Z1YVcxd1lXTnJYSEpjYmx4eVhHNXBiWEJ2Y25RZ1lYZHpJR1p5YjIwZ0p5NHZZWGR6Y0dGamF5YzdYSEpjYm1OdmJuTjBJSHRjY2x4dUlDQkJZbk4wY21GamRGUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVXNYSEpjYmlBZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTeGNjbHh1SUNCVVpYaDBWRzlUY0dWbFkyaFZkR2xzY3l4Y2NseHVJQ0JCWW5OMGNtRmpkRk53WldWamFDeGNjbHh1SUNCVGNHVmxZMmdnWEhKY2JpQWdmU0E5SUdGM2MxeHlYRzRnSUZ4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FITmxaU0JsYm5aY2NseHVJQ0FnS2k5Y2NseHVJQ0JsYm5Zc1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FITmxaU0JWZEdsc2MxeHlYRzRnSUNBcUwxeHlYRzRnSUZWMGFXeHpMRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUJ6WldVZ1RXRjBhRlYwYVd4elhISmNiaUFnSUNvdlhISmNiaUFnVFdGMGFGVjBhV3h6TEZ4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVCelpXVWdSR1ZtWlhKeVpXUmNjbHh1SUNBZ0tpOWNjbHh1SUNCRVpXWmxjbkpsWkN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJR052Y21VdlRXVnpjMlZ1WjJWeVhISmNiaUFnSUNvdlhISmNiaUFnVFdWemMyVnVaMlZ5TEZ4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVCelpXVWdZMjl5WlM5SWIzTjBUMkpxWldOMFhISmNiaUFnSUNvdlhISmNiaUFnU0c5emRFOWlhbVZqZEN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJR052Y21VdlRHbHdjM2x1WTBabFlYUjFjbVZjY2x4dUlDQWdLaTljY2x4dUlDQk1hWEJ6ZVc1alJtVmhkSFZ5WlN4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJRWRsYzNSMWNtVkdaV0YwZFhKbFhISmNiaUFnSUNvdlhISmNiaUFnUjJWemRIVnlaVVpsWVhSMWNtVXNYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRSE5sWlNCamIzSmxMMUJ2YVc1MFQyWkpiblJsY21WemRFWmxZWFIxY21WY2NseHVJQ0FnS2k5Y2NseHVJQ0JRYjJsdWRFOW1TVzUwWlhKbGMzUkdaV0YwZFhKbExGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQnpaV1VnUkdWbVlYVnNkRlpwYzJWdFpVMWhjRnh5WEc0Z0lDQXFMMXh5WEc0Z0lFUmxabUYxYkhSV2FYTmxiV1ZOWVhBc1hISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FITmxaU0JFWldaaGRXeDBSMlZ6ZEhWeVpWZHZjbVJ6WEhKY2JpQWdJQ292WEhKY2JpQWdSR1ZtWVhWc2RFZGxjM1IxY21WWGIzSmtjeXhjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYzJWbElFRjRhWE5OWVhCY2NseHVJQ0FnS2k5Y2NseHVJQ0JCZUdselRXRndMRnh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUJ6WldVZ1kyOXlaUzlCYm1sdFlYUnBiMjVHWldGMGRYSmxYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1FXNXBiV0YwYVc5dVJtVmhkSFZ5WlN4Y2NseHVJQ0FnTHlvcVhISmNiaUFnSUNBcUlFQnpaV1VnUVc1cGJXRjBhVzl1VEdGNVpYSmNjbHh1SUNBZ0lDb3ZYSEpjYmlBZ1FXNXBiV0YwYVc5dVRHRjVaWElzWEhKY2JpQWdJQzhxS2x4eVhHNGdJQ0FnS2lCQWMyVmxJR052Y21VdlUybHVaMnhsVTNSaGRHVmNjbHh1SUNBZ0lDb3ZYSEpjYmlBZ1UybHVaMnhsVTNSaGRHVXNYSEpjYmlBZ0lDOHFLbHh5WEc0Z0lDQWdLaUJBYzJWbElGUnlZVzV6YVhScGIyNVRkR0YwWlZ4eVhHNGdJQ0FnS2k5Y2NseHVJQ0JVY21GdWMybDBhVzl1VTNSaGRHVXNYSEpjYmlBZ0lDOHFLbHh5WEc0Z0lDQWdLaUJBYzJWbElFWnlaV1ZDYkdWdVpGTjBZWFJsWEhKY2JpQWdJQ0FxTDF4eVhHNGdJRVp5WldWQ2JHVnVaRk4wWVhSbExGeHlYRzRnSUNBdktpcGNjbHh1SUNBZ0lDb2dRSE5sWlNCUmRXVjFaVk4wWVhSbFhISmNiaUFnSUNBcUwxeHlYRzRnSUZGMVpYVmxVM1JoZEdVc1hISmNiaUFnSUM4cUtseHlYRzRnSUNBZ0tpQkFjMlZsSUZKaGJtUnZiVUZ1YVcxaGRHbHZibE4wWVhSbFhISmNiaUFnSUNBcUwxeHlYRzRnSUZKaGJtUnZiVUZ1YVcxaGRHbHZibE4wWVhSbExGeHlYRzRnSUNBdktpcGNjbHh1SUNBZ0lDb2dRSE5sWlNCQ2JHVnVaREZrVTNSaGRHVmNjbHh1SUNBZ0lDb3ZYSEpjYmlBZ1FteGxibVF4WkZOMFlYUmxMRnh5WEc0Z0lDQXZLaXBjY2x4dUlDQWdJQ29nUUhObFpTQkNiR1Z1WkRKa1UzUmhkR1ZjY2x4dUlDQWdJQ292WEhKY2JpQWdRbXhsYm1ReVpGTjBZWFJsTEZ4eVhHNGdJQ0F2S2lwY2NseHVJQ0FnSUNvZ1FITmxaU0JCYm1sdFlYUnBiMjVWZEdsc2MxeHlYRzRnSUNBZ0tpOWNjbHh1SUNCQmJtbHRZWFJwYjI1VmRHbHNjeXhjY2x4dUlGeHlYRzRnSUVWaGMybHVaeXhjY2x4dUlDQWdMeW9xWEhKY2JpQWdJQ0FxSUVCelpXVWdUR0Y1WlhKQ2JHVnVaRTF2WkdWelhISmNiaUFnSUNBcUwxeHlYRzRnSUV4aGVXVnlRbXhsYm1STmIyUmxjeXhjY2x4dUlDQWdMeW9xWEhKY2JpQWdJQ0FxSUVCelpXVWdSR1ZtWVhWc2RFeGhlV1Z5UW14bGJtUk5iMlJsWEhKY2JpQWdJQ0FxTDF4eVhHNGdJRVJsWm1GMWJIUk1ZWGxsY2tKc1pXNWtUVzlrWlN4Y2NseHVJQ0FnTHlvcVhISmNiaUFnSUNBcUlFQnpaV1VnUVc1cGJXRjBhVzl1Vkhsd1pYTmNjbHh1SUNBZ0lDb3ZYSEpjYmlBZ1FXNXBiV0YwYVc5dVZIbHdaWE1zWEhKY2JseHlYRzRnSUNBdkx5QkJWMU1nVUdGamExeHlYRzRnSUNBdktpcGNjbHh1SUNBZ0tpQkFjMlZsSUdOdmNtVXZRV0p6ZEhKaFkzUlVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1FXSnpkSEpoWTNSVVpYaDBWRzlUY0dWbFkyaEdaV0YwZFhKbExGeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFQnpaV1VnWTI5eVpTOVVaWGgwVkc5VGNHVmxZMmhHWldGMGRYSmxYSEpjYmlBZ0lDb3ZYSEpjYmlBZ1ZHVjRkRlJ2VTNCbFpXTm9SbVZoZEhWeVpTeGNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQkFjMlZsSUdOdmNtVXZWR1Y0ZEZSdlUzQmxaV05vVlhScGJITmNjbHh1SUNBZ0tpOWNjbHh1SUNCVVpYaDBWRzlUY0dWbFkyaFZkR2xzY3l4Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCQWMyVmxJR052Y21VdlFXSnpkSEpoWTNSVGNHVmxZMmhjY2x4dUlDQWdLaTljY2x4dUlDQkJZbk4wY21GamRGTndaV1ZqYUN4Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYzJWbElHTnZjbVV2VTNCbFpXTm9YSEpjYmlBZ0lDb3ZYSEpjYmlBZ0lGTndaV1ZqYUZ4eVhHNTlPMXh5WEc0aVhTd2libUZ0WlhNaU9sc2lSR1ZtWlhKeVpXUWlMQ0psZUdWamRYUmhZbXhsSWl3aWIyNVNaWE52YkhabElpd2liMjVTWldwbFkzUWlMQ0p2YmtOaGJtTmxiQ0lzSWtWeWNtOXlJaXdpY21Weklpd2ljbVZxSWl3aVkyRnVZMlZzSWl3aWMzUmhkSFZ6SWl3aWNtVnpiMngyWldRaUxDSnlaV3BsWTNSbFpDSXNJbU5oYm1ObGJHVmtJaXdpY0dWdVpHbHVaeUlzSW5KbGMyOXNkbVVpTENKeVpXcGxZM1FpTENKMllXeDFaU0lzSWw5emRHRjBkWE1pTENKZmNtVnpiMngyWlNJc0lsOXlaV3BsWTNRaUxDSmZZMkZ1WTJWc0lpd2lYMlY0WldOMWRHRmliR1VpTENKaGNtZHpJaXdpYVhSbGNtRmliR1VpTENKVGVXMWliMndpTENKcGRHVnlZWFJ2Y2lJc0ltVWlMQ0poY25KaGVTSXNJbVJsWm1WeWNtVmtJaXdpWm1sc2RHVnlJaXdpYVhSbGJTSXNJbkpsYzNWc2RDSXNJblZ1WkdWbWFXNWxaQ0lzSW5KbGMyOXNkbVZXWVd4MVpTSXNJbVp2Y2tWaFkyZ2lMQ0pzWlc1bmRHZ2lMQ0psY25KdmNpSXNJbU5oYm1ObGJGWmhiSFZsSWl3aWJuVnRTWFJsYlhNaUxDSnBkR1Z0VkhKaFkydGxjaUlzSW1aaGFXeGxaQ0lzSW01MWJWSmxjMjlzZG1Wa0lpd2ljbVZ6YjJ4MWRHbHZibk1pTENKcGJtUmxlQ0lzSWxCeWIyMXBjMlVpTENKMGFHVnVJaXdpVlhScGJITWlMQ0p5WlhCc1lXTmxJaXdpWXlJc0luSmhibVJ2YlU1MWJXSmxjaUlzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJa1JoZEdVaUxDSnViM2NpTENKeVlXNWtiMjBpTENKMGIxTjBjbWx1WnlJc0ltNWhiV1VpTENKdVlXMWxRWEp5WVhraUxDSnBibU5zZFdSbGN5SXNJbTVoYldWVFpYUWlMQ0pUWlhRaUxDSnRZWFJqYUVkeWIzVndJaXdpYldGMFkyZ2lMQ0ppWVhObFRtRnRaU0lzSW5Oc2FXTmxJaXdpYVc1amNtVnRaVzUwSWl3aVRuVnRZbVZ5SWl3aWMyVjBUbUZ0WlNJc0luTmxkRTFoZEdOb1IzSnZkWEFpTENKelpYUkpibU55WlcxbGJuUWlMQ0p6WldOdmJtUnpJaXdpYjI1R2FXNXBjMmdpTENKdmJsQnliMmR5WlhOeklpd2liMjVGY25KdmNpSXNJbU52Ym5OdmJHVWlMQ0ozWVhKdUlpd2lZM1Z5Y21WdWRGUnBiV1VpTENKMGIzUmhiRlJwYldVaUxDSnZibFZ3WkdGMFpTSXNJbVJsYkhSaFZHbHRaU0lzSW0xcGJpSXNJbTFoZUNJc0ltTmxhV3dpTENKU1lXUnBZVzVVYjBSbFozSmxaU0lzSWxCSklpd2lSR1ZuY21WbFZHOVNZV1JwWVc0aUxDSk5ZWFJvVlhScGJITWlMQ0p5WVdScFlXNXpJaXdpWkdWbmNtVmxjeUlzSW1aeWIyMGlMQ0owYnlJc0ltWmhZM1J2Y2lJc0ltRWlMQ0ppSWl3aWNDSXNJbVJwYzNSVGNYSWlMQ0prYVhOMFlXNWpaVk54ZFdGeVpXUWlMQ0owSWl3aWNHOXBiblFpTENKMlpYSjBhV05sY3lJc0ltMXBibGdpTENKUVQxTkpWRWxXUlY5SlRrWkpUa2xVV1NJc0ltMXBibGtpTENKdFlYaFlJaXdpVGtWSFFWUkpWa1ZmU1U1R1NVNUpWRmtpTENKdFlYaFpJaXdpZGlJc0ltUllJaXdpWkZraUxDSnRhV1JZSWl3aWJXbGtXU0lzSW1STllYZ2lMQ0p6ZFhCbGNrbHVaR2xqWlhNaUxDSjJaWEowYzFkcGRHaFRkWEJsY2lJc0luTjFjR1Z5VTI5eWRHVmtTVzVrYVdObGN5SXNJbk52Y25SUWIybHVkSE5EUTFjaUxDSnpkWEJsY2xSeWFXRnVaMnhsSWl3aWFXNWthV05sY3lJc0ltVmtaMlZ6SWl3aWRISnBZVzVuYkdWeklpd2libVYzVm1WeWRDSXNJbTVsZDBsdVpHVjRJaXdpYVc1MllXeHBaRlJ5YVdGdVoyeGxjeUlzSW5SeWFXRnVaMnhsSWl3aWFYTlFiMmx1ZEVsdVEybHlZM1Z0UTJseVkyeGxJaXdpY0hWemFDSXNJbUp2ZFc1a2FXNW5VRzlzZVNJc0ltVmtaMlVpTENKamIzVnVkQ0lzSW05MGFHVnlWSEpwWVc1bmJHVWlMQ0p2ZEdobGNrVmtaMlVpTENKemNHeHBZMlVpTENKcGJtUmxlRTltSWl3aWMyOXlkR1ZrU1c1a2FXTmxjeUlzSW5SeWFXRnVaMnhsYzFSdlVtVnRiM1psSWl3aWJXRndJaXdpWVhnaUxDSmhlU0lzSW1KNElpd2lZbmtpTENKamVDSXNJbU41SWl3aVpHVnViMjBpTENKaFZtRnNJaXdpWWxaaGJDSXNJbU5XWVd3aUxDSmpaVzUwY205cFpDSXNJbk52Y25RaUxDSmhkR0Z1TWlJc0ltRmljeUlzSW5abFkzUnZjaUlzSWtGeWNtRjVJaXdpY21Wa2RXTmxjaUlzSW1GalkzVnRkV3hoZEc5eUlpd2lZM1Z5Y21WdWRGWmhiSFZsSWl3aWMzRnlkQ0lzSW5KbFpIVmpaU0lzSW5abFkzUnZja0VpTENKMlpXTjBiM0pDSWl3aWRtRnNkV1ZCSWl3aWRtRnNkV1ZDSWl3aWJtOXliV0ZzUVNJc0ltNXZjbTFoYkdsNlpWWmxZM1J2Y2lJc0ltNXZjbTFoYkVJaUxDSmtiM1FpTENKblpYUkViM1JRY205a2RXTjBJaXdpWVdOdmN5SXNJbU5zWVcxd0lpd2lkbVZqZEc5eU15SXNJbTFoZEhKcGVETWlMQ0psZG1WeWVTSXNJbmdpTENKNUlpd2llaUlzSW0xaFoyNXBkSFZrWlNJc0ltZGxkRlpsWTNSdmNrMWhaMjVwZEhWa1pTSXNJbVpwYkd3aUxDSnRZWFJ5YVhnMElpd2ljMk5oYkdWWUlpd2ljMk5oYkdWWklpd2ljMk5oYkdWYUlpd2ljaUlzSW5SaGNtZGxkRlpoYkhWbElpd2lkbUZzZFdWVGRHOXlaU0lzSW5OdGIyOTBhRlJwYldVaUxDSnRZWGhUY0dWbFpDSXNJbU5zWVcxd1ZHbHRaU0lzSW1SbGJIUmhWbUZzZFdVaUxDSmpiR0Z0Y0VSbGJIUmhWbUZzZFdVaUxDSnNZWE4wVm1Gc2RXVWlMQ0prTVNJc0ltUXlJaXdpWkRNaUxDSmtOQ0lzSW1WdWRpSXNJazFsYzNObGJtZGxjaUlzSW1sa0lpd2lYMmxrSWl3aVkzSmxZWFJsU1dRaUxDSmZaR2x6Y0dGMFkyaGxjaUlzSW5kcGJtUnZkeUlzSWw5allXeHNZbUZqYTNNaUxDSmZaWFpsYm5STWFYTjBaVzVsY25NaUxDSnRaWE56WVdkbElpd2lZMkZzYkdKaFkyc2lMQ0prWlhSaGFXd2lMQ0pEZFhOMGIyMUZkbVZ1ZENJc0lteHBjM1JsYm1WeUlpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbDlqY21WaGRHVk1iMk5oYkUxbGMzTmhaMlVpTENKeVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUlpd2lYMk55WldGMFpVeHBjM1JsYm1WeUlpd2lYMkZrWkV4cGMzUmxibVZ5SWl3aWFTSXNJbk4wYjNCTWFYTjBaVzVwYm1jaUxDSmZjbVZ0YjNabFRHbHpkR1Z1WlhJaUxDSnlaV2RsZUhBaUxDSnRaWE56WVdkbGN5SXNJazlpYW1WamRDSXNJbXRsZVhNaUxDSjBaWE4wSWl3aVpYWmxiblFpTENKZlkzSmxZWFJsUlhabGJuUWlMQ0prYVhOd1lYUmphRVYyWlc1MElpd2liV1Z6YzJWdVoyVnlJaXdpUjJ4dlltRnNUV1Z6YzJWdVoyVnlJaXdpYkdsemRHVnVWRzhpTENKemRHOXdUR2x6ZEdWdWFXNW5WRzlCYkd3aUxDSmxiV2wwSWl3aVpHVm1hVzVsVUhKdmNHVnlkR2xsY3lJc0luZHlhWFJoWW14bElpd2lSVlpGVGxSVElpd2lRV0p6ZEhKaFkzUkliM04wUm1WaGRIVnlaU0lzSW1odmMzUWlMQ0pmYUc5emRDSXNJbVYyWlc1MGN5SXNJbUZ3YVNJc0ltVnVkSEpwWlhNaUxDSmpiMjV6ZEhKMVkzUnZjaUlzSW05M2JtVnlJaXdpYzNSdmNFeHBjM1JsYm1sdVowSjVVbVZuWlhod0lpd2lkWEJrWVhSbElpd2lVbVZuUlhod0lpd2ljMjkxY21ObElpd2lVbVZ6ZFd4MFEyeGhjM01pTENKdGFYaHBia05zWVhOelJtRmpkRzl5YVdWeklpd2liV2w0YVc1RGJHRnpjMFpoWTNSdmNua2lMQ0pUUlZKV1NVTkZVeUlzSWtodmMzUlBZbXBsWTNRaUxDSmZiM2R1WlhJaUxDSmZabVZoZEhWeVpYTWlMQ0pmZDJGcGRITWlMQ0pmYkdGemRGVndaR0YwWlNJc0ltUjBJaXdpZDJGcGRDSXNJbVY0WldOMWRHVWlMQ0oyWVd4MVpYTWlMQ0ptWldGMGRYSmxJaXdpYjI1RGIyMXdiR1YwWlNJc0lrWmxZWFIxY21WRGJHRnpjeUlzSW1admNtTmxJaXdpYVc1d2RYUlVlWEJsSWl3aWNISnZkRzkwZVhCbElpd2lhVzV6ZEdGc2JFRndhU0lzSW1Ga1pFWmxZWFIxY21VaUxDSjBlWEJsVG1GdFpTSXNJbkpsYlc5MlpVWmxZWFIxY21VaUxDSmthWE5qWVhKa0lpd2laR1ZtYVc1bFVISnZjR1Z5ZEhraUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0lreHBibVZoY2lJc0lrNXZibVVpTENKcklpd2lTVzRpTENKUGRYUWlMQ0pKYms5MWRDSXNJbEYxWVdSeVlYUnBZeUlzSWtOMVltbGpJaXdpVVhWaGNuUnBZeUlzSWxGMWFXNTBhV01pTENKVGFXNTFjMjlwWkdGc0lpd2lZMjl6SWl3aWMybHVJaXdpUlhod2IyNWxiblJwWVd3aUxDSkRhWEpqZFd4aGNpSXNJa1ZzWVhOMGFXTWlMQ0p6SWl3aVlYTnBiaUlzSWtKaFkyc2lMQ0pDYjNWdVkyVWlMQ0pHWldGMGRYSmxSR1Z3Wlc1a1pXNTBTVzUwWlhKbVlXTmxJaXdpUW1GelpVTnNZWE56SWl3aVJtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEUxcGVHbHVJaXdpWDJsdWFYUnBZV3hwZW1Wa0lpd2lYMjl1Um1WaGRIVnlaVUZrWkdWa0lpd2lZbWx1WkNJc0lsOXZia1psWVhSMWNtVlNaVzF2ZG1Wa0lpd2lSVlpGVGxSZlJFVlFSVTVFUlU1RFNVVlRJaXdpWlhabGJuUk9ZVzFsSWl3aVFXNXBiV0YwYVc5dVJtVmhkSFZ5WlVSbGNHVnVaR1Z1ZEVsdWRHVnlabUZqWlNJc0ltOXNaRTVoYldVaUxDSnVaWGRPWVcxbElpd2liR0Y1WlhKT1lXMWxJaXdpWVc1cGJXRjBhVzl1VG1GdFpTSXNJbEJoY21WdWRFTnNZWE56SWl3aVRXbDRhVzRpTENKQmJtbHRZWFJwYjI1R1pXRjBkWEpsUkdWd1pXNWtaVzUwVFdsNGFXNGlMQ0pCYm1sdFlYUnBiMjVHWldGMGRYSmxJaXdpWVdSa1RHRjVaWElpTENKeVpXMXZkbVZNWVhsbGNpSXNJbkpsYm1GdFpVeGhlV1Z5SWl3aVlXUmtRVzVwYldGMGFXOXVJaXdpY21WdGIzWmxRVzVwYldGMGFXOXVJaXdpY21WdVlXMWxRVzVwYldGMGFXOXVJaXdpVFdGdVlXZGxaRUZ1YVcxaGRHbHZia3hoZVdWeVNXNTBaWEptWVdObElpd2liM0IwYVc5dWN5SXNJbTVoYldWR2FXeDBaWElpTENKM1pXbG5hSFFpTENKbFlYTnBibWRHYmlJc0lrMWhibUZuWldSQmJtbHRZWFJwYjI1TVlYbGxjazFwZUdsdUlpd2lYMjFoYm1GblpXUk1ZWGxsY25NaUxDSnNZWGxsY25NaUxDSmZiMjVNWVhsbGNrRmtaR1ZrSWl3aVgyOXVUR0Y1WlhKU1pXMXZkbVZrSWl3aWFYTkJZM1JwZG1VaUxDSm5aWFJCYm1sdFlYUnBiMjV6SWl3aVlXNXBiVTVoYldVaUxDSmZiMjVCYm1sdFlYUnBiMjVCWkdSbFpDSXNJbUZ1YVcxaGRHbHZibk1pTENKZmIyNUJibWx0WVhScGIyNVNaVzF2ZG1Wa0lpd2liR0Y1WlhKUGNIUnBiMjV6SWl3aVlXNXBiVTl3ZEdsdmJuTWlMQ0pFUlVaQlZVeFVYMHhCV1VWU1gwOVFWRWxQVGxNaUxDSmhibWx0WVhScGIyNVBjSFJwYjI1eklpd2lZWE56YVdkdUlpd2ljbVZuYVhOMFpYSkJibWx0WVhScGIyNGlMQ0p5WldkcGMzUmxja3hoZVdWeUlpd2liR0Y1WlhKT1lXMWxjeUlzSW5ObGRFeGhlV1Z5VjJWcFoyaDBJaXdpWW14bGJtUlVhVzFsSWl3aWMyVjBUR0Y1WlhKWFpXbG5hSFJ6SWl3aVpXNWhZbXhsSWl3aVpHbHpZV0pzWlNJc0lsUmxlSFJVYjFOd1pXVmphRVpsWVhSMWNtVkVaWEJsYm1SbGJuUkpiblJsY21aaFkyVWlMQ0pVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsUkdWd1pXNWtaVzUwVFdsNGFXNGlMQ0pVWlhoMFZHOVRjR1ZsWTJoR1pXRjBkWEpsSWl3aWNHeGhlU0lzSW5CaGRYTmxJaXdpY21WemRXMWxJaXdpYzNSdmNDSXNJbk5sYm5SbGJtTmxJaXdpZDI5eVpDSXNJblpwYzJWdFpTSXNJbk56Yld3aUxDSkVaV1poZFd4MFZtbHpaVzFsVFdGd0lpd2ljMmxzSWl3aWIzWmxjbkpwWkdWWFpXbG5hSFFpTENKVElpd2lWQ0lzSW1ZaUxDSjFJaXdpUlNJc0ltOGlMQ0pQSWl3aVRHbHdjM2x1WTBabFlYUjFjbVVpTENKMmFYTmxiV1ZDYkdWdVpGUnBiV1VpTENKa1pXTmhlVkpoZEdVaUxDSmhiVzkxYm5RaUxDSjJhWE5sYldWRllYTnBibWRHYmlJc0luWnBjMlZ0WlV4aGVXVnljeUlzSW5SaGJHdHBibWRDYkdWdVpGUnBiV1VpTENKMFlXeHJhVzVuUldGemFXNW5SbTRpTENKMFlXeHJhVzVuVEdGNVpYSnpJaXdpZG1selpXMWxUR1ZoWkZScGJXVWlMQ0pmZG1selpXMWxUR0Y1WlhKeklpd2lYM1JoYkd0cGJtZE1ZWGxsY25NaUxDSmhibWx0WVhScGIyNGlMQ0oyYVhObGJXVk5ZWEFpTENKeVpXZHBjM1JsY2xacGMyVnRaVXhoZVdWeUlpd2ljbVZuYVhOMFpYSlVZV3hyYVc1blRHRjVaWElpTENKblpYUkJibWx0WVhScGIyNVVlWEJsSWl3aWQyVnBaMmgwVG1GdFpYTWlMQ0puWlhSQmJtbHRZWFJwYjI1Q2JHVnVaRTVoYldWeklpd2lkbWx6WlcxbFQzQjBhVzl1Y3lJc0luTndaV1ZqYUcxaGNtdFBabVp6WlhRaUxDSmZkbWx6WlcxbFRHVmhaRlJwYldVaUxDSmZjbVZuYVhOMFpYSldhWE5sYldWQmJtbHRZWFJwYjI0aUxDSnlaWE4xYldWQmJtbHRZWFJwYjI0aUxDSmZiMjVUZEc5d0lpd2lYMjl1VUd4aGVTSXNJbkJoZFhObFFXNXBiV0YwYVc5dUlpd2liV0Z5YXlJc0ltbHpWbWx6WlcxbFFXTjBhWFpsSWl3aWRtbHpaVzFsVG1GdFpYTWlMQ0prZFhKaGRHbHZiaUlzSW14bGNuQkdZV04wYjNJaUxDSnNaWEp3SWl3aVlteGxibVJKYmxScGJXVWlMQ0pvYjJ4a1ZHbHRaU0lzSWw5aGJtbHRZWFJsVTJsdGNHeGxWbWx6WlcxbElpd2laR1ZqWVhsWFpXbG5hSFFpTENKZllXNXBiV0YwWlVobGJHUldhWE5sYldVaUxDSjJhWE5sYldWT1lXMWxJaXdpY0dWaGExZGxhV2RvZENJc0ltSnNaVzVrVDNWMFZHbHRaU0lzSW5kbGFXZG9kRkJ5YjIxcGMyVWlMQ0p6WlhSQmJtbHRZWFJwYjI1Q2JHVnVaRmRsYVdkb2RDSXNJbk4wWVhKMFVISnZiV2x6WlNJc0ltaHZiR1JRY205dGFYTmxJaXdpWjJWMElpd2ljMlYwSWl3aWJXbDRJaXdpVTFOTlRGTndaV1ZqYUcxaGNtdEpiblJsY21aaFkyVWlMQ0pUVTAxTVUzQmxaV05vVFdGeWEwMXBlR2x1SWl3aVNsTlBUaUlzSW5CaGNuTmxJaXdpYldWMGFHOWtJaXdpWVhCd2JIa2lMQ0pFWldaaGRXeDBSMlZ6ZEhWeVpWZHZjbVJ6SWl3aVltbG5JaXdpYUdWaGNuUWlMQ0p0WVc1NUlpd2liVzkyWlcxbGJuUWlMQ0p2Ym1VaUxDSmhaMmR5WlhOemFYWmxJaXdpZVc5MUlpd2laR1ZtWlc1elpTSXNJbmRoZG1VaUxDSnpaV3htSWl3aVIyVnpkSFZ5WlVabFlYUjFjbVVpTENKdGFXNXBiWFZ0U1c1MFpYSjJZV3dpTENKc1lYbGxjaUlzSW14aGVXVnlTRzlzWkZScGJXVWlMQ0pzWVhsbGNrMXBibWx0ZFcxSmJuUmxjblpoYkNJc0ltTmhia0ZrZG1GdVkyVWlMQ0pwYzFGMVpYVmxSVzVrSWl3aVkzVnljbVZ1ZEVkbGMzUjFjbVVpTENKZloyVjBTRzlzWkZScGJXVWlMQ0pvYjJ4a1ZHbHRaWElpTENKd2JHRjVUbVY0ZEVGdWFXMWhkR2x2YmlJc0luQnNZWGxVYVcxbGNpSXNJbUYxZEc5RWFYTmhZbXhsSWl3aVlXNXBiU0lzSW5kdmNtUnpJaXdpWjJWemRIVnlaVTFoY0NJc0luUnlZVzV6YVhScGIyNVVhVzFsSWl3aWEyVjVJaXdpYzNSeWFXNW5hV1o1SWl3aVoyVnVaWEpwWTBkbGMzUjFjbVZ6SWl3aWNtVmhjMjl1SWl3aVgyZGxkRTFwYm1sdGRXMUpiblJsY25aaGJDSXNJbkJzWVhsQmJtbHRZWFJwYjI0aUxDSm5aWFJRWVhWelpXUWlMQ0pqY21WaGRHVkhaWE4wZFhKbFRXRndJaXdpWTNKbFlYUmxSMlZ1WlhKcFkwZGxjM1IxY21WQmNuSmhlU0lzSW5Cc1lYbEhaWE4wZFhKbElpd2ljM1J2Y0VGdWFXMWhkR2x2YmlJc0ltbHVkR1Z5Y25Wd2RFRnVhVzFoZEdsdmJpSXNJa0Z1YVcxaGRHbHZibFYwYVd4eklpd2ljSEp2Y0dWeWRIbFBkMjVsY2lJc0luQnliM0JsY25SNVRtRnRaU0lzSW1selRtRk9JaXdpYzNSaGNuUldZV3gxWlNJc0ltbHVkR1Z5Y0c5c1lYUnZjaUlzSW5CeWIyZHlaWE56SWl3aVpXRnpaVVpoWTNSdmNpSXNJa0ZpYzNSeVlXTjBVM1JoZEdVaUxDSmZkMlZwWjJoMElpd2lYMmx1ZEdWeWJtRnNWMlZwWjJoMElpd2lYM0JoZFhObFpDSXNJbDl3Y205dGFYTmxjeUlzSW1acGJtbHphQ0lzSWw5d2JHRjVRMkZzYkdKaFkydHpJaXdpYVc1MFpYSndiMnhoZEdWUWNtOXdaWEowZVNJc0luQnliMjFwYzJVaUxDSmhiR3dpTENKMWNHUmhkR1ZKYm5SbGNtNWhiRmRsYVdkb2RDSXNJbFJ5WVc1emFYUnBiMjVUZEdGMFpTSXNJbDkwYnlJc0lsOW1jbTl0SWl3aVgzZGxhV2RvZEZCeWIyMXBjMlVpTENKMGIzUmhiRmRsYVdkb2RDSXNJbk4wWVhSbElpd2lZM1Z5Y21WdWRGTjBZWFJsY3lJc0luUmhjbWRsZEZOMFlYUmxJaXdpWkdWaFkzUnBkbUYwWlNJc0luSmxjMlYwSWl3aWQyVnBaMmgwVUhKdmJXbHpaWE1pTENKelpYUlhaV2xuYUhRaUxDSnZiazVsZUhRaUxDSndjbTl0YVhObGN5SXNJa0Z1YVcxaGRHbHZibEJzWVhsbGNrbHVkR1Z5Wm1GalpTSXNJbVp1SWl3aWNHeGhlVTFsZEdodlpDSXNJa0Z1YVcxaGRHbHZibEJzWVhsbGNrMXBlR2x1SWl3aVgzUnlZVzV6YVhScGIyNVRkR0YwWlNJc0lsOXpkR0YwWlhNaUxDSk5ZWEFpTENKZlkzVnljbVZ1ZEZOMFlYUmxJaXdpWDNSeVlXNXphWFJwYjI1VWFXMWxJaXdpWDJWaGMybHVaMFp1SWl3aWFHRnpJaXdpWTNWeWNtVnVkRUZ1YVcxaGRHbHZiaUlzSW5kbGFXZG9kRkJsYm1ScGJtY2lMQ0pqYjI1bWFXZDFjbVVpTENKZmNISmxjR0Z5WlVOMWNuSmxiblJUZEdGMFpTSXNJbE4wWVhSbFEyOXVkR0ZwYm1WeVNXNTBaWEptWVdObElpd2lZM1Z5Y21WdWRFNWhiV1VpTENKVGRHRjBaVU52Ym5SaGFXNWxjazFwZUdsdUlpd2lkVzVwY1hWbFRtRnRaU0lzSW1kbGRGVnVhWEYxWlU1aGJXVWlMQ0pSZFdWMVpWTjBZWFJsSWl3aWNYVmxkV1ZUZEdGMFpYTWlMQ0poWkdSVGRHRjBaU0lzSWw5eGRXVjFaU0lzSWw5a2IyNWxJaXdpYVc1MFpYSnVZV3hYWldsbmFIUWlMQ0p1WlhoMElpd2laRzl1WlNJc0luZHlZWEFpTENKc1lYTjBUbUZ0WlNJc0luTnBlbVVpTENKblpYUlRkR0YwWlNJc0lteHZiM0JEYjNWdWRDSXNJa2x1Wm1sdWFYUjVJaXdpYVhOVWNtRnVjMmwwYVc5dWFXNW5JaXdpWDNKbGMyVjBJaXdpY0dGMWMyVmtJaXdpYzNSdmNIQmxaQ0lzSW1ScGMyTmhjbVJUZEdGMFpYTWlMQ0pCWW5OMGNtRmpkRUpzWlc1a1UzUmhkR1VpTENKaWJHVnVaRk4wWVhSbGN5SXNJbUpzWlc1a1YyVnBaMmgwY3lJc0lrWnlaV1ZDYkdWdVpGTjBZWFJsSWl3aWMzVnRWMlZwWjJoMGN5SXNJa0pzWlc1a01XUlRkR0YwWlNJc0ltSnNaVzVrVkdoeVpYTm9iMnhrY3lJc0luQm9ZWE5sVFdGMFkyaGxjeUlzSWw5aWJHVnVaRlpoYkhWbElpd2lZbXhsYm1SV1lXeDFaU0lzSW01dmJscGxjbTlFYVdabVpYSmxiblJUYVhwbElpd2lZMjl1ZEdGcGJuTkVkWEJzYVdOaGRHVnpJaXdpWDNSb2NtVnphRzlzWkhNaUxDSndhR0Z6WlUxaGRHTm9JaXdpWDNOdmNuUlVhSEpsYzJodmJHUnpJaXdpWDJadmNtTmxUbTlVYUhKbGMyaHZiR1JFZFhCbGN5SXNJbDl3YUdGelpVeGxZV1JUZEdGMFpTSXNJbDkxY0dSaGRHVkNiR1Z1WkZkbGFXZG9kSE1pTENKMGFISmxjMmh2YkdSV1lXeDFaU0lzSW5OaGJXVldZV3gxWlNJc0ltWnBibVFpTENKMGFISmxjMmh2YkdRaUxDSnlaVzF2ZG1Wa0lpd2labWx1WkVsdVpHVjRJaXdpYm05eWJXRnNhWHBsWkZScGJXVWlMQ0owWVhKblpYUkpibVJsZUNJc0luUm9jbVZ6YUc5c1pFRWlMQ0owYUhKbGMyaHZiR1JDSWl3aVptRmpkRzl5UWlJc0ltWmhZM1J2Y2tFaUxDSnpkR0YwWlVFaUxDSnpkR0YwWlVJaUxDSkNiR1Z1WkRKa1UzUmhkR1VpTENKdmRHaGxjbFJvY21WemFHOXNaQ0lzSWw5aWJHVnVaRlpoYkhWbFdDSXNJbDlpYkdWdVpGWmhiSFZsV1NJc0ltSnNaVzVrVm1Gc2RXVllJaXdpWW14bGJtUldZV3gxWlZraUxDSmZkbVZ5ZEdsalpYTWlMQ0pmZEhKcFlXNW5iR1Z6SWl3aVoyVjBSR1ZzWVhWdVlYbFVjbWxoYm1kMWJHRjBhVzl1SWl3aWNISnZjR1Z5ZEhraUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSWw5elpYUkpibVpzZFdWdVkyVkRiRzl6WlhOMFVHOXBiblJQYmt4cGJtVWlMQ0pwYzFCdmFXNTBTVzVVY21saGJtZHNaU0lzSWw5elpYUkpibVpzZFdWdVkyVlVjbWxoYm1kc1pTSXNJbDl6WlhSSmJtWnNkV1Z1WTJWRGJHOXpaWE4wVUc5cGJuUkpibFJ5YVdGdVoyeGxjeUlzSW1GeVpXRkJJaXdpZEhKcFlXNW5iR1ZCY21WaElpd2lZWEpsWVVJaUxDSmhjbVZoUXlJc0luUnZkR0ZzUVhKbFlTSXNJbmRsYVdkb2RFRWlMQ0ozWldsbmFIUkNJaXdpZDJWcFoyaDBReUlzSW5Sb2NtVnphRzlzWkVNaUxDSnpkR0YwWlVNaUxDSmZjMlYwVUdoaGMyVk1aV0ZrVTNSaGRHVWlMQ0puYkc5aVlXeERiRzl6WlhOMFVHOXBiblFpTENKbmJHOWlZV3hOYVc1RWFYTjBJaXdpWTJ4dmMyVnpkRlJ5YVdGdVoyeGxJaXdpY0c5cGJuUkJJaXdpWTJ4dmMyVnpkRkJ2YVc1MFQyNU1hVzVsSWl3aWNHOXBiblJDSWl3aWNHOXBiblJESWl3aVpHbHpkRUVpTENKa2FYTjBRaUlzSW1ScGMzUkRJaXdpYkc5allXeERiRzl6WlhOMFVHOXBiblFpTENKc2IyTmhiRTFwYmtScGMzUWlMQ0pqYkc5elpYTjBVRzlwYm5RaUxDSnpkR0YwWlhNaUxDSndhR0Z6WlUxaGRHTm9aV1FpTENKTVlYbGxja0pzWlc1a1RXOWtaWE1pTENKUGRtVnljbWxrWlNJc0lrRmtaR2wwYVhabElpd2lSR1ZtWVhWc2RFeGhlV1Z5UW14bGJtUk5iMlJsSWl3aWRtRnNhV1JoZEdWQ2JHVnVaRTF2WkdVaUxDSmliR1Z1WkUxdlpHVWlMQ0pCYm1sdFlYUnBiMjVNWVhsbGNpSXNJbDlpYkdWdVpFMXZaR1VpTENKZmQyVnBaMmgwVUdGMWMyVmtJaXdpYVhOWFpXbG5hSFJCWTNScGRtVWlMQ0puWlhSVGRHRjBaVTVoYldWeklpd2lZbXhsYm1ST1lXMWxJaXdpYzJWMFFteGxibVJYWldsbmFIUWlMQ0puWlhSQ2JHVnVaRmRsYVdkb2RDSXNJbE5wYm1kc1pWTjBZWFJsSWl3aVgzUnBiV1ZUWTJGc1pTSXNJblJwYldWVFkyRnNaU0lzSWw5c2IyOXdRMjkxYm5RaUxDSjBhVzFsSWl3aVVtRnVaRzl0UVc1cGJXRjBhVzl1VTNSaGRHVWlMQ0p6ZFdKVGRHRjBaWE1pTENKZmNHeGhlVWx1ZEdWeWRtRnNJaXdpY0d4aGVVbHVkR1Z5ZG1Gc0lpd2laMlYwVW1GdVpHOXRSbXh2WVhRaUxDSndiR0Y1VW1GdVpHOXRRVzVwYldGMGFXOXVJaXdpZEdsdFpYSWlMQ0pmY21WelpYUlVhVzFsY2lJc0luSmhibVJ2YlZOMFlYUmxJaXdpWjJWMFVtRnVaRzl0U1c1MElpd2lZMkZ1WTJWc1FXNXBiV0YwYVc5dUlpd2lRVzVwYldGMGFXOXVWSGx3WlhNaUxDSnphVzVuYkdVaUxDSm1jbVZsUW14bGJtUWlMQ0p4ZFdWMVpTSXNJbkpoYm1SdmJVRnVhVzFoZEdsdmJpSXNJbUpzWlc1a01XUWlMQ0ppYkdWdVpESmtJaXdpWDJ4aGVXVnljeUlzSWw5c1lYbGxjazFoY0NJc0ltVjRhWE4wYVc1bklpd2liR0Z6ZEVsdVpHVjRJaXdpYm5WdFRHRjVaWEp6SWl3aWQyVnBaMmgwVFhWc2RHbHdiR2xsY2lJc0ltTjFjbkpsYm5SVGRHRjBaU0lzSW1Kc1pXNWtVM1JoZEdWUGNIUnBiMjV6SWl3aVlteGxibVJQY0hScGIyNXpJaXdpWDJOeVpXRjBaVk5wYm1kc1pWTjBZWFJsSWl3aWNYVmxkV1ZQY0hScGIyNXpJaXdpY1hWbGRXVlBjSFJwYjI0aUxDSmliR1Z1WkUxaGRHTm9VR2hoYzJWeklpd2ljM1ZpVTNSaGRHVlBjSFJwYjI1eklpd2liR0Y1WlhKSmJtUmxlQ0lzSWw5MllXeHBaR0YwWlVsdVpHVjRJaXdpWlhabGJuUkVZWFJoSWl3aVkzVnljbVZ1ZEVsdVpHVjRJaXdpWjJWMFFXNXBiV0YwYVc5dVFteGxibVJYWldsbmFIUWlMQ0p3WVhWelpWZGxhV2RvZENJc0luSmxjM1Z0WlZkbGFXZG9kQ0lzSW1GdWFXMWhkR2x2YmxSNWNHVWlMQ0pmZG1Gc2FXUmhkR1ZPWlhkQmJtbHRZWFJwYjI0aUxDSnlaVzF2ZG1WVGRHRjBaU0lzSW1OMWNuSmxiblJCYm1sdFlYUnBiMjVPWVcxbElpd2libVYzUVc1cGJXRjBhVzl1VG1GdFpTSXNJbkpsYm1GdFpWTjBZWFJsSWl3aWJtVjRkRkYxWlhWbFpFRnVhVzFoZEdsdmJpSXNJbXdpTENKeVpYTjFiV1ZrSWl3aWJXOTJaVXhoZVdWeUlpd2laMlYwVEdGNVpYSlhaV2xuYUhRaUxDSndZWFZ6WlV4aGVXVnlWMlZwWjJoMElpd2ljbVZ6ZFcxbFRHRjVaWEpYWldsbmFIUWlMQ0p3WVhWelpVeGhlV1Z5SWl3aWNtVnpkVzFsVEdGNVpYSWlMQ0puWlhSVWNtRnVjMmwwYVc5dWFXNW5JaXdpWjJWMFEzVnljbVZ1ZEVGdWFXMWhkR2x2YmlJc0lsOTFjR1JoZEdWSmJuUmxjbTVoYkZkbGFXZG9kSE1pTENKQmVHbHpUV0Z3SWl3aVVHOXphWFJwZG1WWUlpd2lUbVZuWVhScGRtVllJaXdpVUc5emFYUnBkbVZaSWl3aVRtVm5ZWFJwZG1WWklpd2lVRzl6YVhScGRtVmFJaXdpVG1WbllYUnBkbVZhSWl3aVJtRmpaVlJoY21kbGRGUjVjR1Z6SWl3aVJYbGxRMlZ1ZEdWeUlpd2lSWGxsVEdWbWRDSXNJa1Y1WlZKcFoyaDBJaXdpVFc5MWRHZ2lMQ0pHWVdObFZtVmpkRzl5Y3lJc0lrMXBZM0p2VTJGalkyRmtaVmRoYVhSU1lXNW5aWE1pTENKd2IzTjBUV0ZqY204aUxDSk5ZV055YjFOaFkyTmhaR1ZYWVdsMFVtRnVaMlZ6SWl3aWJXOTFkR2hVWVhKblpYUWlMQ0psZVdWVVlYSm5aWFFpTENKQ2JHbHVhMVJvY21WemFHOXNaQ0lzSWsxaGVFUmxiSFJoSWl3aVVHOXBiblJQWmtsdWRHVnlaWE4wUm1WaGRIVnlaU0lzSW5SaGNtZGxkQ0lzSW14dmIydFVjbUZqYTJWeUlpd2ljMk5sYm1VaUxDSnNiMjlyUW14bGJtUlVhVzFsSWl3aWJHOXZhMFZoYzJsdVowWnVJaXdpYkc5dmEweGhlV1Z5Y3lJc0ltSnNhVzVyUW14bGJtUlVhVzFsSWl3aVlteHBibXRGWVhOcGJtZEdiaUlzSW1Kc2FXNXJUR0Y1WlhKeklpd2lYM1poYkdsa1lYUmxWSEpoYm5ObWIzSnRUMkpxWldOMElpd2lYMnh2YjJ0VWNtRmphMlZ5SWl3aVgzTmpaVzVsSWl3aVgzUmhjbWRsZENJc0lsOXdjbVYyVkdGeVoyVjBVRzl6SWl3aVgybHpWR0Z5WjJWMFRXOTJhVzVuSWl3aVgyeHZiMnRNWVhsbGNuTWlMQ0pmZEhKaFkydHBibWREYjI1bWFXZHpJaXdpWDJKc2FXNXJUR0Y1WlhKeklpd2ljbVZtWlhKbGJtTmxJaXdpWm05eWQyRnlaRUY0YVhNaUxDSm9ZWE5UWVdOallXUmxJaXdpY21WbmFYTjBaWEpNYjI5clRHRjVaWElpTENKeVpXZHBjM1JsY2tKc2FXNXJUR0Y1WlhJaUxDSmZjbVZuYVhOMFpYSk1iMjlyUVc1cGJXRjBhVzl1SWl3aVkyOXVabWxuSWl3aWRISmhZMnRwYm1kRGIyNW1hV2NpTENKaGJtZHNaWE1pTENKb0lpd2ljSEpsZGtGdVoyeGxjeUlzSW5OdmRYSmpaVkJ2YzJsMGFXOXVJaXdpWDJkbGRGZHZjbXhrVUc5emFYUnBiMjRpTENKMFlYSm5aWFJRYjNOcGRHbHZiaUlzSW14dmIydFdaV04wYjNJaUxDSjBZWEpuWlhSUWIzTWlMQ0owY21GamEyVnlVRzl6SWl3aWRHRnlaMlYwVTNCb1pYSnBZMkZzSWl3aVkyRnlkR1Z6YVdGdVZHOVRjR2hsY21sallXd2lMQ0owWVhKblpYUkJibWRzWlhNaUxDSmZjM0JvWlhKcFkyRnNWRzlDYkdWdVpGWmhiSFZsSWl3aWNtVm1SR2x5WldOMGFXOXVJaXdpWDJkbGRFOWlhbVZqZEVScGNtVmpkR2x2YmlJc0luSmxabE53YUdWeWFXTmhiQ0lzSW5KbFprRnVaMnhsY3lJc0luUmhjbWRsZEZSNWNHVWlMQ0prYVhOMFlXNWpaU0lzSWw5blpYUlVZWEpuWlhSRWFYTjBZVzVqWlNJc0ltWmhZMlZXWldOMGIzSWlMQ0p6Y0dobGNtbGpZV3dpTENKaWJHVnVaRlpoYkhWbGN5SXNJbTFoZUVoVGNHVmxaQ0lzSW1WNGNDSXNJbTFoZUZaVGNHVmxaQ0lzSWtRd0lpd2laQ0lzSW1oRWRYSmhkR2x2YmlJc0luWkVkWEpoZEdsdmJpSXNJbTFwWTNKdlUyRmpZMkZrWlNJc0lsOTFjR1JoZEdWTVlYbGxjbE53WldWa0lpd2lYMmx1YVhScFlXeHBlbVZOYVdOeWIxUnBiV1Z5SWl3aWJXRmpjbTlUWVdOallXUmxJaXdpYldGamNtOVRZV05qWVdSbFYyRnBkRkpoYm1kbElpd2lhRXhwYldsMElpd2lhRVpoWTNSdmNpSXNJblpNYVcxcGRDSXNJblpHWVdOMGIzSWlMQ0p6WVdOallXUmxWR0Z5WjJWMElpd2lYMmRsZEVaaFkyVlVZWEpuWlhSQmJtZHNaWE1pTENKZmFXNXBkR2xoYkdsNlpVMWhZM0p2VkdsdFpYSWlMQ0p0YVc1WFlXbDBWR2x0WlNJc0ltMWhlRmRoYVhSVWFXMWxJaXdpZDJGcGRGUnBiV1VpTENKdGFXTnliMU5oWTJOaFpHVlVhVzFsY2lJc0lsOXpaWFJOYVdOeWIxTmhZMk5oWkdVaUxDSnRZV055YjFOaFkyTmhaR1ZVYVcxbGNpSXNJbDl6WlhSTllXTnliMU5oWTJOaFpHVWlMQ0pmWVdSa1ZISmhZMnRwYm1kRGIyNW1hV2NpTENKb1ZtVnNiMk5wZEhraUxDSjJWbVZzYjJOcGRIa2lMQ0pmYzJWMFRHOXZhMEZ1WjJ4bGN5SXNJbDl5WlhObGRFeHZiMnRCYm1kc1pYTWlMQ0prWld4MFlWTmxZMjl1WkhNaUxDSjBjbWxuWjJWeVFteHBibXNpTENKamRYSnlaVzUwU0NJc0ltTjFjbkpsYm5SV0lpd2lkR0Z5WjJWMFNDSXNJblJoY21kbGRGWWlMQ0p3Y21WMlZHRnlaMlYwU0NJc0luQnlaWFpVWVhKblpYUldJaXdpWTJoaGJtZGxRVzF2ZFc1MElpd2lkRzlFWldkeVpXVnpJaXdpWjJWMFFXNW5iR1ZDWlhSM1pXVnVJaXdpWkdGdGNGWmhiSFZsSWl3aWMyVjBWR0Z5WjJWMElpd2ljMlYwVkdGeVoyVjBRbmxPWVcxbElpd2ljMlYwVkdGeVoyVjBRbmxKWkNJc0ltOWlhaUlzSW1admNuZGhjbVJXWldOMGIzSWlMQ0p5YjNSaGRHbHZiaUlzSW1kbGRGSnZkR0YwYVc5dVRXRjBjbWw0SWl3aVgyZGxkRmR2Y214a1RXRjBjbWw0SWl3aWNtOTBZWFJsVm1WamRHOXlJaXdpZEdobGRHRWlMQ0p3YUdraUxDSkZZWE5wYm1jaUxDSlVaWGgwVkc5VGNHVmxZMmhWZEdsc2N5SXNJblJsZUhRaUxDSnlZVzVrYjIxTllYSnJjeUlzSW1sdWRHVnlibUZzVFdGd0lpd2lYM0J5YjJObGMzTkpibkIxZEUxaGNDSXNJbk53WldGclZHRm5jeUlzSW5OemJXeE5ZWEpyVW1WblpYZ2lMQ0p6YzIxc1ZHRm5VbVZuWlhnaUxDSmxlR2x6ZEdsdVoxUmhaM01pTENKbGVHVmpJaXdpYzNSaGNuUWlMQ0psYm1RaUxDSmphSFZ1YTNNaUxDSnpjMjFzVFdGeWExSmxjM1ZzZENJc0ltUjFjR3hwWTJGMFpVMWhjbXRVYjBOb1pXTnJJaXdpWlhocGMzUnBibWRVWVdjaUxDSnpkV0p6ZEhJaUxDSmZhVzV6WlhKMFRXRnlhM01pTENKdFlYSnJWR1Y0ZENJc0ltMWhjbXRsWkZSbGVIUWlMQ0pxYjJsdUlpd2lZV1JrVFdGeWEzTlViMVZ1YldGeWEyVmtVMlZ1ZEdWdVkyVnpJaXdpZG1Gc2FXUmhkR1ZVWlhoMElpd2liV0Z5YTNNaUxDSnRZWEpyU1c1a2FXTmxjeUlzSW0xaGNtdFNaWE4xYkhRaUxDSnpjMjFzVW1WemRXeDBJaXdpWTJ4bFlXNWxaRlJsZUhRaUxDSmxlR2x6ZEdsdVoxTnpiV3dpTENKM2FHbDBaWE53WVdObElpd2ljMlZ1ZEdWdVkyVkZibVJKYm1ScFkyVnpJaXdpWDJkbGRGTmxiblJsYm1ObFJXNWtjeUlzSW5CeVpYWkpibVJsZUNJc0luUmhjbWRsZEVsdVpHbGpaWE1pTENKamIyNTBZV2x1YzAxaGNtc2lMQ0p0WVhKclNXNWtaWGdpTENKeVlXNWtiMjFOWVhKclpXUlVaWGgwSWl3aVgybHVjMlZ5ZEZKaGJtUnZiVTFoY210elFYUWlMQ0p2Wm1aelpYUWlMQ0p5WVc1a2IyMU5ZWEpySWl3aWMyVnVkR1Z1WTJWU1pXZGxlQ0lzSW1WdVpGTmxiblJsYm1ObFVtVm5aWGdpTENKelpXNTBaVzVqWlVWdVpITWlMQ0p3ZFc1amRGSmxjM1ZzZENJc0ltUjFjR3hwWTJGMFpYTlViME5vWldOcklpd2lkMjl5WkZKbFoyVjRJaXdpYkc5M1pYSkRZWE5sVjI5eVpDSXNJbU5vWldOclJIVndiR2xqWVhSbElpd2liV0Z5YTJWa1YyOXlaSE1pTENKMGIweHZkMlZ5UTJGelpTSXNJbVY0YVhOMGFXNW5UV0Z5YTNNaUxDSnNhWE4wSWl3aWFYTkJjbkpoZVNJc0lrRmljM1J5WVdOMFUzQmxaV05vSWl3aWMzQmxZV3RsY2lJc0luTndaV1ZqYUcxaGNtdHpJaXdpWDNOd1pXRnJaWElpTENKZmRHVjRkQ0lzSWw5emNHVmxZMmh0WVhKcmN5SXNJbDl6Y0dWbFkyaHRZWEpyVDJabWMyVjBJaXdpWDNOMFlYSjBWR2x0WlNJc0lsOXNiMk5oYkZScGJXVWlMQ0pmY0dGMWMyVlVhVzFsSWl3aVgzQnNZWGxwYm1jaUxDSmZiV0Z5YTBsMFpYSWlMQ0pmWTNWeWNtVnVkRTFoY21zaUxDSmZaVzVrVkdsdFpTSXNJbDl3Y205dGFYTmxJaXdpYjI1SmJuUmxjbkoxY0hRaUxDSnBiblJsY25KMWNIUWlMQ0owZVhCbElpd2ljM0JsWldOb0lpd2lYMk5vWldOclJtbHVhWE5vWldRaUxDSmZZM0psWVhSbFVISnZiV2x6WlNJc0lsTndaV1ZqYUNJc0ltRjFaR2x2UTI5dVptbG5JaXdpWDJGMVpHbHZJaXdpWVhWa2FXOGlMQ0p2Ym1WdVpHVmtJaXdpWDJGMVpHbHZSbWx1YVhOb1pXUWlMQ0oyYjJ4MWJXVWlMQ0p6WlhSVWFXMWxiM1YwSWl3aVgzQnNZWGxCZFdScGJ5SXNJbDl3WVhWelpVRjFaR2x2SWl3aVpXNW5hVzVsY3lJc0ltRjFaR2x2Um05eWJXRjBjeUlzSW5Od1pXVmphRzFoY210VWVYQmxjeUlzSW5OaGJYQnNaVkpoZEdWeklpd2liWEF6SWl3aWNtRjBaWE1pTENKa1pXWmhkV3gwY3lJc0luTjBZVzVrWVhKa0lpd2libVYxY21Gc0lpd2ljR050SWl3aWIyZG5YM1p2Y21KcGN5SXNJbUYzYzFabGNuTnBiMjRpTENKQlluTjBjbUZqZEZSbGVIUlViMU53WldWamFFWmxZWFIxY21VaUxDSjJiMmxqWlNJc0ltVnVaMmx1WlNJc0lteGhibWQxWVdkbElpd2lZWFZrYVc5R2IzSnRZWFFpTENKellXMXdiR1ZTWVhSbElpd2liV2x1Ulc1a1RXRnlhMFIxY21GMGFXOXVJaXdpYVhOSGJHOWlZV3dpTENKZmMzQmxaV05vUTJGamFHVWlMQ0pmWTNWeWNtVnVkRk53WldWamFDSXNJbDlqZFhKeVpXNTBVSEp2YldselpTSXNJbDlwYzFaaGJHbGtZWFJsWkNJc0lsOXBjMGRzYjJKaGJDSXNJbDkyYjJ4MWJXVlFZWFZ6WldRaUxDSmZkbTlwWTJVaUxDSlFUMHhNV1Y5RVJVWkJWVXhVVXlJc0lsWnZhV05sU1dRaUxDSmZiR0Z1WjNWaFoyVWlMQ0pNWVc1bmRXRm5aVTVoYldVaUxDSmZaVzVuYVc1bElpd2lSVzVuYVc1bElpd2lYMkYxWkdsdlJtOXliV0YwSWl3aVQzVjBjSFYwUm05eWJXRjBJaXdpWDNOaGJYQnNaVkpoZEdVaUxDSlRZVzF3YkdWU1lYUmxJaXdpWDIxcGJrVnVaRTFoY210RWRYSmhkR2x2YmlJc0lrRlhVMTlXUlZKVFNVOU9JaXdpVUU5TVRGbGZUVWxPWDA1RlZWSkJURjlXUlZKVFNVOU9JaXdpWm05eWJXRjBJaXdpY21GMFpTSXNJblp2YVdObFNXUWlMQ0pRVDB4TVdWOVdUMGxEUlZNaUxDSkpaQ0lzSWxOMWNIQnZjblJsWkVWdVoybHVaWE1pTENKc1lXNW5kV0ZuWlVOdlpHVWlMQ0pRVDB4TVdWOU1RVTVIVlVGSFJWTWlMQ0poZG1GcGJHRmliR1ZEYjJSbGN5SXNJa3hoYm1kMVlXZGxRMjlrWlNJc0lrRmtaR2wwYVc5dVlXeE1ZVzVuZFdGblpVTnZaR1Z6SWl3aVVFOU1URmxmVEVGT1IxVkJSMFZmUTA5RVJWTWlMQ0pmZG1Gc2FXUmhkR1ZGYm1kcGJtVWlMQ0pmZG1Gc2FXUmhkR1ZHYjNKdFlYUWlMQ0pmZG1Gc2FXUmhkR1ZTWVhSbElpd2lYM1poYkdsa1lYUmxWbTlwWTJVaUxDSmZkbUZzYVdSaGRHVk1ZVzVuZFdGblpTSXNJbWx6VW1WaFpIa2lMQ0pmZG1Gc2FXUmhkR1VpTENKemEybHdVM0JsWldOb1pYTWlMQ0pqZFhKeVpXNTBRMjl1Wm1sbklpd2lYMmRsZEVOdmJtWnBaeUlzSW1OMWNuSmxiblJEYjI1bWFXZFRkSElpTENKTVlXNW5kV0ZuWlNJc0luWmhiR2xrUTI5dVptbG5JaXdpWTI5dVptbG5VM1J5SWl3aWMzQmxaV05vUTI5dVptbG5VM1J5SWl3aVgzVndaR0YwWlZOd1pXVmphQ0lzSW1GMVpHbHZVR0Z5WVcxeklpd2lWR1Y0ZENJc0lsUmxlSFJVZVhCbElpd2ljM0JsWldOb2JXRnlhMUJoY21GdGN5SXNJbE53WldWamFFMWhjbXRVZVhCbGN5SXNJbDl6ZVc1MGFHVnphWHBsVTNCbFpXTm9iV0Z5YTNNaUxDSmZjM2x1ZEdobGMybDZaVUYxWkdsdklpd2ljbVZ6ZFd4MGN5SXNJbDlqY21WaGRHVlRjR1ZsWTJnaUxDSndZWEpoYlhNaUxDSndjbVZ6YVdkdVpYSWlMQ0puWlhSVGVXNTBhR1Z6YVhwbFUzQmxaV05vVlhKc0lpd2lkWEpzSWl3aWNHOXNiSGtpTENKemVXNTBhR1Z6YVhwbFUzQmxaV05vSWl3aWFuTnZibE4wY21sdVp5SXNJa0YxWkdsdlUzUnlaV0Z0SWl3aWFuTnZiaUlzSW1SaGRHRlRkSElpTENKa1lYUmhJaXdpVTNSeWFXNW5JaXdpWm5KdmJVTm9ZWEpEYjJSbElpd2liV0Z5YTFSNWNHVnpJaXdpWlc1a1RXRnlhMVI1Y0dWeklpd2ljM0JsWldOb1RXRnlhM01pTENKdFlYUmphRUZzYkNJc0ltNTFiVTFoY210eklpd2liR0Z6ZEUxaGNtc2lMQ0psYm1SVWFXMWxjeUlzSW1WdVpGUnBiV1VpTENKZmRYQmtZWFJsUTI5dVptbG5JaXdpWjJWMFZtOXNkVzFsSWl3aWMyVjBWbTlzZFcxbElpd2ljR0YxYzJWV2IyeDFiV1VpTENKeVpYTjFiV1ZXYjJ4MWJXVWlMQ0pmZG05c2RXMWxJaXdpZG05c2RXMWxVR1Z1WkdsdVp5SXNJbkJzWVhscGJtY2lMQ0pqZFhKeVpXNTBVSEp2YldselpTSXNJbDluWlhSVGNHVmxZMmdpTENKZmMyVjBRM1Z5Y21WdWRGTndaV1ZqYUNJc0lsOXpkR0Z5ZEZOd1pXVmphQ0lzSW5abGNuTnBiMjRpTENKamRYTjBiMjFWYzJWeVFXZGxiblFpTENKZmQybDBhRU4xYzNSdmJWVnpaWEpCWjJWdWRDSXNJbk5sY25acFkyVWlMQ0pmYVhOU1pXRmtlU0lzSW1GMllXbHNZV0pzWlZadmFXTmxjeUlzSW1GMllXbHNZV0pzWlV4aGJtZDFZV2RsY3lJc0ltRjJZV2xzWVdKc1pVeGhibWQxWVdkbFEyOWtaWE1pTENKdGFXNU9aWFZ5WVd4VFpHc2lMQ0prWlhOamNtbGlaVlp2YVdObGN5SXNJbkpsYzNCdmJuTmxJaXdpWVd4c1EyOWtaWE1pTENKV2IybGpaWE1pTENKamIyUmxJaXdpY21WaFpIa2lMQ0pqZFhKeVpXNTBWWE5sY2tGblpXNTBJaXdpYzNWdFpYSnBZVzVJYjNOMGMxVnpaWEpCWjJWdWRDSXNJbU52Ym1OaGRDSXNJa3hsZUdsamIyNU9ZVzFsY3lJc0lsOWxibUZpYkdWa0lpd2lYM05sZEVGMVpHbHZRMjl1ZEdWNGRDSXNJbDl2WW5ObGNuWmxRWFZrYVc5RGIyNTBaWGgwSWl3aVgyRjFaR2x2UTI5dWRHVjRkQ0lzSWtGMVpHbHZRMjl1ZEdWNGRDSXNJbTl1YzNSaGRHVmphR0Z1WjJVaUxDSkJkV1JwYnlJc0lteHZiM0FpTENKamNtOXpjMDl5YVdkcGJpSXNJbkJ5Wld4dllXUWlMQ0prYjJOMWJXVnVkQ0lzSW1KdlpIa2lMQ0poY0hCbGJtUkRhR2xzWkNJc0lteHZZV1FpTENKeVpYTjFiV1ZCZFdScGJ5SXNJbVZ1WVdKc1pXUWlMQ0poYm1sdGNHRmpheUlzSW1GM2N5SmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vNDM3XFxuJyl9fSxfX3dlYnBhY2tfcmVxdWlyZV9fPXtkOihlLHQpPT57Zm9yKHZhciBuIGluIHQpX193ZWJwYWNrX3JlcXVpcmVfXy5vKHQsbikmJiFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZSxuKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6dFtuXX0pfSxvOihlLHQpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sX193ZWJwYWNrX2V4cG9ydHNfXz17fTtyZXR1cm4gX193ZWJwYWNrX21vZHVsZXNfX1s0MzddKDAsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKSxfX3dlYnBhY2tfZXhwb3J0c19fPV9fd2VicGFja19leHBvcnRzX18uZGVmYXVsdCxfX3dlYnBhY2tfZXhwb3J0c19ffSkoKX0pKTsiXSwibmFtZXMiOlsiZSIsInQiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwiSE9TVF9DT1JFIiwic2VsZiIsImdsb2JhbCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXZhbCIsImQiLCJuIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n')},512:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ three_js)\n});\n\n// EXTERNAL MODULE: ../amazon-sumerian-hosts-core/dist/host.core.js\nvar host_core = __webpack_require__(24);\nvar host_core_default = /*#__PURE__*/__webpack_require__.n(host_core);\n;// CONCATENATED MODULE: ./src/three.js/PointOfInterestFeature.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * @extends core/PointOfInterestFeature\r\n * @alias three.js/PointOfInterestFeature\r\n */\n\nvar PointOfInterestFeature = /*#__PURE__*/function (_CorePointOfInterestF) {\n  _inherits(PointOfInterestFeature, _CorePointOfInterestF);\n\n  var _super = _createSuper(PointOfInterestFeature);\n\n  function PointOfInterestFeature() {\n    _classCallCheck(this, PointOfInterestFeature);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PointOfInterestFeature, [{\n    key: "_validateTransformObject",\n    value: function _validateTransformObject(obj) {\n      return obj instanceof THREE.Object3D;\n    }\n  }, {\n    key: "setTargetByName",\n    value: function setTargetByName(name) {\n      _get(_getPrototypeOf(PointOfInterestFeature.prototype), "setTargetByName", this).call(this, name);\n\n      if (!name) {\n        return;\n      }\n\n      this.target = this._scene.getObjectByName(name);\n    }\n  }, {\n    key: "setTargetById",\n    value: function setTargetById(id) {\n      _get(_getPrototypeOf(PointOfInterestFeature.prototype), "setTargetByName", this).call(this, id);\n\n      if (!id) {\n        return;\n      }\n\n      this.target = this._scene.getObjectById(id);\n    }\n  }], [{\n    key: "_getWorldPosition",\n    value: function _getWorldPosition(obj) {\n      obj.updateWorldMatrix(true, false);\n      return obj.matrixWorld.elements.slice(12, 15);\n    }\n  }, {\n    key: "_getWorldMatrix",\n    value: function _getWorldMatrix(obj) {\n      obj.updateWorldMatrix(true, false);\n      return _toConsumableArray(obj.matrixWorld.elements);\n    }\n  }]);\n\n  return PointOfInterestFeature;\n}((host_core_default()));\n\n/* harmony default export */ const three_js_PointOfInterestFeature = (PointOfInterestFeature);\n\n;// CONCATENATED MODULE: ./src/three.js/HostEnvironment.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n// eslint-disable-next-line import/prefer-default-export\nvar env = \'three\';\n;// CONCATENATED MODULE: ./src/three.js/Messenger.js\nfunction Messenger_typeof(obj) { "@babel/helpers - typeof"; return Messenger_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Messenger_typeof(obj); }\n\nfunction Messenger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Messenger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Messenger_createClass(Constructor, protoProps, staticProps) { if (protoProps) Messenger_defineProperties(Constructor.prototype, protoProps); if (staticProps) Messenger_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction Messenger_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Messenger_setPrototypeOf(subClass, superClass); }\n\nfunction Messenger_setPrototypeOf(o, p) { Messenger_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Messenger_setPrototypeOf(o, p); }\n\nfunction Messenger_createSuper(Derived) { var hasNativeReflectConstruct = Messenger_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Messenger_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Messenger_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Messenger_possibleConstructorReturn(this, result); }; }\n\nfunction Messenger_possibleConstructorReturn(self, call) { if (call && (Messenger_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Messenger_assertThisInitialized(self); }\n\nfunction Messenger_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Messenger_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Messenger_getPrototypeOf(o) { Messenger_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Messenger_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * @extends core/Messenger\r\n * @alias three.js/Messenger\r\n */\n\nvar Messenger = /*#__PURE__*/function (_CoreMessenger) {\n  Messenger_inherits(Messenger, _CoreMessenger);\n\n  var _super = Messenger_createSuper(Messenger);\n\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {any=} id - Id for the object. If none is provided a new id will\r\n   * be created. Id should be able to be represented as a string.\r\n   */\n  function Messenger(id) {\n    var _this;\n\n    Messenger_classCallCheck(this, Messenger);\n\n    _this = _super.call(this, id);\n    _this._dispatcher = Messenger_assertThisInitialized(_this);\n    return _this;\n  }\n\n  Messenger_createClass(Messenger, [{\n    key: "_createEvent",\n    value: function _createEvent(message, value) {\n      return {\n        detail: value,\n        type: message\n      };\n    }\n  }]);\n\n  return Messenger;\n}((host_core_default())); // Assign Three.js EventDispatcher functionality to the Messenger class\n\n\nObject.getOwnPropertyNames(THREE.EventDispatcher.prototype).filter(function (prop) {\n  return prop !== \'constructor\';\n}).forEach(function (prop) {\n  Messenger.prototype[prop] = THREE.EventDispatcher.prototype[prop];\n});\nObject.defineProperty(Messenger, \'GlobalMessenger\', {\n  value: new Messenger(),\n  writable: false\n});\n/* harmony default export */ const three_js_Messenger = (Messenger);\n;// CONCATENATED MODULE: ./src/three.js/HostObject.js\nfunction HostObject_typeof(obj) { "@babel/helpers - typeof"; return HostObject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, HostObject_typeof(obj); }\n\nfunction HostObject_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HostObject_createClass(Constructor, protoProps, staticProps) { if (protoProps) HostObject_defineProperties(Constructor.prototype, protoProps); if (staticProps) HostObject_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction HostObject_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction HostObject_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) HostObject_setPrototypeOf(subClass, superClass); }\n\nfunction HostObject_setPrototypeOf(o, p) { HostObject_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return HostObject_setPrototypeOf(o, p); }\n\nfunction HostObject_createSuper(Derived) { var hasNativeReflectConstruct = HostObject_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = HostObject_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = HostObject_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return HostObject_possibleConstructorReturn(this, result); }; }\n\nfunction HostObject_possibleConstructorReturn(self, call) { if (call && (HostObject_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return HostObject_assertThisInitialized(self); }\n\nfunction HostObject_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction HostObject_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction HostObject_getPrototypeOf(o) { HostObject_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return HostObject_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * Threejs Clock object\r\n *\r\n * @external "THREE.Clock"\r\n * @see https://threejs.org/docs/#api/en/core/Clock\r\n */\n\n/**\r\n * @alias three.js/HostObject\r\n * @extends core/HostObject\r\n */\n\nvar HostObject = /*#__PURE__*/function (_CoreHostObject) {\n  HostObject_inherits(HostObject, _CoreHostObject);\n\n  var _super = HostObject_createSuper(HostObject);\n\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {Object=} options - Options for the host.\r\n   * @param {Object=} options.owner - Optional engine-specific owner of the host.\r\n   * @param {external:"THREE.Clock"=} options.clock - Optional clock to manage time.\r\n   */\n  function HostObject() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    HostObject_classCallCheck(this, HostObject);\n\n    _this = _super.call(this, options);\n    _this._clock = options.clock;\n\n    if (_this._clock) {\n      Object.defineProperty(HostObject_assertThisInitialized(_this), \'now\', {\n        get: function get() {\n          return _this._clock.getElapsedTime() * 1000;\n        }\n      });\n      _this._lastUpdate = _this.now;\n    }\n\n    return _this;\n  }\n\n  return HostObject_createClass(HostObject);\n}((host_core_default()));\n\n/* harmony default export */ const three_js_HostObject = (HostObject);\n;// CONCATENATED MODULE: ./src/three.js/awspack/TextToSpeechFeature.js\nfunction TextToSpeechFeature_typeof(obj) { "@babel/helpers - typeof"; return TextToSpeechFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, TextToSpeechFeature_typeof(obj); }\n\nfunction TextToSpeechFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TextToSpeechFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TextToSpeechFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) TextToSpeechFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) TextToSpeechFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction TextToSpeechFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { TextToSpeechFeature_get = Reflect.get; } else { TextToSpeechFeature_get = function _get(target, property, receiver) { var base = TextToSpeechFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return TextToSpeechFeature_get.apply(this, arguments); }\n\nfunction TextToSpeechFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = TextToSpeechFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction TextToSpeechFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) TextToSpeechFeature_setPrototypeOf(subClass, superClass); }\n\nfunction TextToSpeechFeature_setPrototypeOf(o, p) { TextToSpeechFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TextToSpeechFeature_setPrototypeOf(o, p); }\n\nfunction TextToSpeechFeature_createSuper(Derived) { var hasNativeReflectConstruct = TextToSpeechFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = TextToSpeechFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = TextToSpeechFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return TextToSpeechFeature_possibleConstructorReturn(this, result); }; }\n\nfunction TextToSpeechFeature_possibleConstructorReturn(self, call) { if (call && (TextToSpeechFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return TextToSpeechFeature_assertThisInitialized(self); }\n\nfunction TextToSpeechFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction TextToSpeechFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction TextToSpeechFeature_getPrototypeOf(o) { TextToSpeechFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TextToSpeechFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * Threejs PositionalAudio object\r\n * @external "THREE.AudioListener"\r\n * @see https://threejs.org/docs/#api/en/audio/AudioListener\r\n */\n\n/**\r\n * Threejs Audio object\r\n * @external "THREE.Object3D"\r\n * @see https://threejs.org/docs/#api/en/core/Object3D\r\n */\n\n/**\r\n * @extends core/TextToSpeechFeature\r\n * @alias three.js/TextToSpeechFeature\r\n */\n\nvar TextToSpeechFeature = /*#__PURE__*/function (_CoreTextToSpeechFeat) {\n  TextToSpeechFeature_inherits(TextToSpeechFeature, _CoreTextToSpeechFeat);\n\n  var _super = TextToSpeechFeature_createSuper(TextToSpeechFeature);\n\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {three/HostObject} host - Host object managing the feature.\r\n   * @param {Object=} options - Options that will be sent to Polly for each speech.\r\n   * @param {external:"THREE.AudioListener"} options.listener - Three audio listener to use with\r\n   * audio.\r\n   * @param {external:"THREE.Object3D"=} options.attachTo - Optional object to attach the speech\r\n   * audio to.\r\n   */\n  function TextToSpeechFeature(host) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      voice: undefined,\n      engine: undefined,\n      language: undefined,\n      audioFormat: \'mp3\',\n      sampleRate: undefined,\n      listener: undefined,\n      attachTo: undefined\n    };\n\n    TextToSpeechFeature_classCallCheck(this, TextToSpeechFeature);\n\n    _this = _super.call(this, host, options);\n    _this._listener = options.listener;\n    _this._attachTo = options.attachTo || host.owner;\n\n    _this._setAudioContext();\n\n    _this._observeAudioContext();\n\n    return _this;\n  }\n\n  TextToSpeechFeature_createClass(TextToSpeechFeature, [{\n    key: "_setAudioContext",\n    value: function _setAudioContext() {\n      if (this._listener) {\n        this._audioContext = this._listener.context;\n      }\n    }\n    /**\r\n     * Create an Audio object and Three.js audio object of speech audio for the\r\n     * given speech text.\r\n     *\r\n     * @private\r\n     *\r\n     * @param {Object} params - Parameters object compatible with Polly.synthesizeSpeech.\r\n     *\r\n     * @returns {Promise} Resolves with an object containing the audio URL and Audio\r\n     * objects.\r\n     */\n\n  }, {\n    key: "_synthesizeAudio",\n    value: function _synthesizeAudio(params) {\n      var _this2 = this;\n\n      return TextToSpeechFeature_get(TextToSpeechFeature_getPrototypeOf(TextToSpeechFeature.prototype), "_synthesizeAudio", this).call(this, params).then(function (result) {\n        if (_this2._attachTo !== undefined && !_this2._isGlobal) {\n          // Create positional audio if there\'s an attach point\n          result.threeAudio = new THREE.PositionalAudio(_this2._listener);\n\n          _this2._attachTo.add(result.threeAudio);\n        } else {\n          // Create non-positional audio\n          result.threeAudio = new THREE.Audio(_this2._listener);\n        } // Set Audio object as the source\n\n\n        result.threeAudio.setMediaElementSource(result.audio);\n        return result;\n      });\n    }\n  }]);\n\n  return TextToSpeechFeature;\n}((host_core_default()));\n\n/* harmony default export */ const awspack_TextToSpeechFeature = (TextToSpeechFeature);\n;// CONCATENATED MODULE: ./src/three.js/awspack/Speech.js\nfunction Speech_typeof(obj) { "@babel/helpers - typeof"; return Speech_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Speech_typeof(obj); }\n\nfunction Speech_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Speech_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Speech_createClass(Constructor, protoProps, staticProps) { if (protoProps) Speech_defineProperties(Constructor.prototype, protoProps); if (staticProps) Speech_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction Speech_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Speech_get = Reflect.get; } else { Speech_get = function _get(target, property, receiver) { var base = Speech_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Speech_get.apply(this, arguments); }\n\nfunction Speech_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Speech_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Speech_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Speech_setPrototypeOf(subClass, superClass); }\n\nfunction Speech_setPrototypeOf(o, p) { Speech_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Speech_setPrototypeOf(o, p); }\n\nfunction Speech_createSuper(Derived) { var hasNativeReflectConstruct = Speech_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Speech_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Speech_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Speech_possibleConstructorReturn(this, result); }; }\n\nfunction Speech_possibleConstructorReturn(self, call) { if (call && (Speech_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Speech_assertThisInitialized(self); }\n\nfunction Speech_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Speech_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction Speech_getPrototypeOf(o) { Speech_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Speech_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * Threejs Audio object\r\n * @external "THREE.Audio"\r\n * @see https://threejs.org/docs/#api/en/audio/Audio\r\n */\n\n/**\r\n * Threejs PositionalAudio object\r\n * @external "THREE.PositionalAudio"\r\n * @see https://threejs.org/docs/#api/en/audio/PositionalAudio\r\n */\n\n/**\r\n * @extends core/Speech\r\n * @alias three.js/Speech\r\n */\n\nvar Speech = /*#__PURE__*/function (_CoreSpeech) {\n  Speech_inherits(Speech, _CoreSpeech);\n\n  var _super = Speech_createSuper(Speech);\n\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {three.js/TextToSpeechFeature} speaker - The owner of the Speech that\r\n   * will emit speechmark messages.\r\n   * @param {string} text - The text of the speech.\r\n   * @param {Array.<Object>} speechmarks - An array of speechmark objects representing\r\n   * the text and timing of the speech.\r\n   * @param {Object} audioConfig - Object containing audio and url.\r\n   * @param {external:Audio} audioConfig.audio - Playable audio object.\r\n   * @param {(external:"THREE.Audio"|external:"THREE.PositionalAudio")} audioConfig.threeAudio -\r\n   * Three.js audio object.\r\n   */\n  function Speech(textToSpeech, text) {\n    var _this;\n\n    var speechmarks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var audioConfig = arguments.length > 3 ? arguments[3] : undefined;\n\n    Speech_classCallCheck(this, Speech);\n\n    _this = _super.call(this, textToSpeech, text, speechmarks, audioConfig);\n    _this._threeAudio = audioConfig.threeAudio;\n    return _this;\n  }\n  /**\r\n   * Gets the Three.js audio object for the speech.\r\n   *\r\n   * @readonly\r\n   * @type {(external:"THREE.Audio"|external:"THREE.PositionalAudio")}\r\n   */\n\n\n  Speech_createClass(Speech, [{\n    key: "audio",\n    get: function get() {\n      return this._threeAudio;\n    }\n  }, {\n    key: "_pauseAudio",\n    value: function _pauseAudio() {\n      this._audio.pause();\n    }\n  }, {\n    key: "play",\n    value: function play(currentTime, onFinish, onError, onInterrupt) {\n      // Re-connect the Audio element to stop playback\n      this._threeAudio.disconnect();\n\n      this._threeAudio.connect();\n\n      return Speech_get(Speech_getPrototypeOf(Speech.prototype), "play", this).call(this, currentTime, onFinish, onError, onInterrupt);\n    }\n  }]);\n\n  return Speech;\n}((host_core_default()));\n\n/* harmony default export */ const awspack_Speech = (Speech);\n;// CONCATENATED MODULE: ./src/three.js/awspack/index.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n\n/**\r\n * @module three/awspack\r\n */\n\n/* harmony default export */ const awspack = ({\n  /**\r\n   * @see three.js/TextToSpeechFeature\r\n   */\n  TextToSpeechFeature: awspack_TextToSpeechFeature,\n\n  /**\r\n   * @see core/TextToSpeechUtils\r\n   */\n  TextToSpeechUtils: (host_core_default()),\n\n  /**\r\n   * @see three.js/Speech\r\n   */\n  Speech: awspack_Speech\n});\n;// CONCATENATED MODULE: ./src/three.js/animpack/state/SingleState.js\nfunction SingleState_typeof(obj) { "@babel/helpers - typeof"; return SingleState_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, SingleState_typeof(obj); }\n\nfunction SingleState_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SingleState_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SingleState_createClass(Constructor, protoProps, staticProps) { if (protoProps) SingleState_defineProperties(Constructor.prototype, protoProps); if (staticProps) SingleState_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = SingleState_superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }\n\nfunction _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error(\'failed to set property\'); } return value; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction SingleState_get() { if (typeof Reflect !== "undefined" && Reflect.get) { SingleState_get = Reflect.get; } else { SingleState_get = function _get(target, property, receiver) { var base = SingleState_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return SingleState_get.apply(this, arguments); }\n\nfunction SingleState_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = SingleState_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction SingleState_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) SingleState_setPrototypeOf(subClass, superClass); }\n\nfunction SingleState_setPrototypeOf(o, p) { SingleState_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SingleState_setPrototypeOf(o, p); }\n\nfunction SingleState_createSuper(Derived) { var hasNativeReflectConstruct = SingleState_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = SingleState_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = SingleState_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return SingleState_possibleConstructorReturn(this, result); }; }\n\nfunction SingleState_possibleConstructorReturn(self, call) { if (call && (SingleState_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return SingleState_assertThisInitialized(self); }\n\nfunction SingleState_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction SingleState_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction SingleState_getPrototypeOf(o) { SingleState_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SingleState_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n/**\r\n * Threejs AnimationAction object\r\n * @external "THREE.AnimationAction"\r\n * @see https://threejs.org/docs/#api/en/animation/AnimationAction\r\n */\n\nvar threeBlendModes = {\n  Override: THREE.NormalAnimationBlendMode,\n  Additive: THREE.AdditiveAnimationBlendMode\n};\n/**\r\n * @extends core/SingleState\r\n * @alias three.js/SingleState\r\n */\n\nvar SingleState = /*#__PURE__*/function (_CoreSingleState) {\n  SingleState_inherits(SingleState, _CoreSingleState);\n\n  var _super = SingleState_createSuper(SingleState);\n\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {Object=} options - Options for the animation state.\r\n   * @param {external:"THREE.AnimationAction"} threeAction - Animation action that controls\r\n   * playback of the clip.\r\n   */\n  function SingleState() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var threeAction = arguments.length > 1 ? arguments[1] : undefined;\n\n    SingleState_classCallCheck(this, SingleState);\n\n    _this = _super.call(this, options); // Callback to catch THREE animation action completion\n\n    _this._onFinishedEvent = function (_ref) {\n      var type = _ref.type,\n          action = _ref.action;\n\n      // Exit if this isn\'t the finish event for this animation\n      if (type !== \'finished\' || action !== _this.threeAction) {\n        return;\n      }\n\n      _this._promises.play.resolve(); // Stop evaluating interpolators if they have already completed\n\n\n      if (!_this.weightPending && !_this.timeScalePending) {\n        _this._paused = true;\n      }\n    };\n\n    _this._threeAction = threeAction;\n    _this._threeAction.clampWhenFinished = true; // Hold the last frame on completion\n\n    _this._threeAction.enabled = false;\n    _this._threeAction.loop = _this._loopCount === 1 ? THREE.LoopOnce : THREE.LoopRepeat;\n    _this._threeAction.paused = _this._paused;\n    _this._threeAction.repetitions = _this._loopCount;\n    _this._threeAction.timeScale = _this._timeScale;\n    _this._threeAction.weight = _this._internalWeight;\n    _this._threeAction.blendMode = threeBlendModes[_this._blendMode]; // Start listening for animation finished events\n\n    _this._threeAction.getMixer().addEventListener(\'finished\', _this._onFinishedEvent);\n\n    return _this;\n  }\n  /**\r\n   * Gets the THREE.AnimationAction object.\r\n   *\r\n   * @readonly\r\n   * @type {external:"THREE.AnimationAction"}\r\n   */\n\n\n  SingleState_createClass(SingleState, [{\n    key: "threeAction",\n    get: function get() {\n      return this._threeAction;\n    }\n  }, {\n    key: "normalizedTime",\n    get: function get() {\n      if (this._threeAction.time && this._threeAction.getClip() && this._threeAction.getClip().duration) {\n        return this._threeAction.time / this._threeAction.getClip().duration;\n      }\n\n      return 0;\n    },\n    set: function set(time) {\n      time = host_core_default().clamp(time);\n      this._threeAction.time = this._threeAction.getClip().duration * time;\n    }\n  }, {\n    key: "weight",\n    get: function get() {\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "weight", this);\n    },\n    set: function set(weight) {\n      _set(SingleState_getPrototypeOf(SingleState.prototype), "weight", weight, this, true);\n\n      this._threeAction.enabled = true;\n    }\n  }, {\n    key: "updateInternalWeight",\n    value: function updateInternalWeight(factor) {\n      SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "updateInternalWeight", this).call(this, factor);\n\n      this._threeAction.setEffectiveWeight(this._internalWeight);\n    }\n  }, {\n    key: "timeScale",\n    get: function get() {\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "timeScale", this);\n    },\n    set: function set(timeScale) {\n      _set(SingleState_getPrototypeOf(SingleState.prototype), "timeScale", timeScale, this, true);\n\n      this._threeAction.timeScale = timeScale;\n    }\n  }, {\n    key: "loopCount",\n    get: function get() {\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "loopCount", this);\n    },\n    set: function set(loopCount) {\n      _set(SingleState_getPrototypeOf(SingleState.prototype), "loopCount", loopCount, this, true);\n\n      this._threeAction.loop = loopCount === 1 ? THREE.LoopOnce : THREE.LoopRepeat;\n      this._threeAction.repetitions = loopCount;\n    }\n  }, {\n    key: "play",\n    value: function play(onFinish, onError, onCancel) {\n      // Restart animation\n      this._threeAction.reset();\n\n      this._threeAction.play();\n\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "play", this).call(this, onFinish, onError, onCancel);\n    }\n  }, {\n    key: "pause",\n    value: function pause() {\n      // Make sure animation has influence\n      this._threeAction.paused = true;\n\n      this._threeAction.play();\n\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "pause", this).call(this);\n    }\n  }, {\n    key: "resume",\n    value: function resume(onFinish, onError, onCancel) {\n      // Make sure the animation can play and has influence\n      this._threeAction.paused = false;\n      this._threeAction.enabled = true;\n\n      this._threeAction.play();\n\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "resume", this).call(this, onFinish, onError, onCancel);\n    }\n  }, {\n    key: "cancel",\n    value: function cancel() {\n      // Stop animation playback\n      this._threeAction.paused = true;\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "cancel", this).call(this);\n    }\n  }, {\n    key: "stop",\n    value: function stop() {\n      // Restart and pause the animation\n      this._threeAction.reset();\n\n      this._threeAction.paused = true;\n\n      this._threeAction.play();\n\n      return SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "stop", this).call(this);\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      // Stop the animation from having influence\n      this._threeAction.enabled = false; // Stop listening for finish events\n\n      this._threeAction.getMixer().removeEventListener(\'finished\', this._onFinishedEvent);\n\n      SingleState_get(SingleState_getPrototypeOf(SingleState.prototype), "discard", this).call(this);\n    }\n  }]);\n\n  return SingleState;\n}((host_core_default()));\n\n/* harmony default export */ const state_SingleState = (SingleState);\n;// CONCATENATED MODULE: ./src/three.js/animpack/AnimationFeature.js\nfunction AnimationFeature_typeof(obj) { "@babel/helpers - typeof"; return AnimationFeature_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AnimationFeature_typeof(obj); }\n\nfunction AnimationFeature_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction AnimationFeature_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction AnimationFeature_createClass(Constructor, protoProps, staticProps) { if (protoProps) AnimationFeature_defineProperties(Constructor.prototype, protoProps); if (staticProps) AnimationFeature_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction AnimationFeature_get() { if (typeof Reflect !== "undefined" && Reflect.get) { AnimationFeature_get = Reflect.get; } else { AnimationFeature_get = function _get(target, property, receiver) { var base = AnimationFeature_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return AnimationFeature_get.apply(this, arguments); }\n\nfunction AnimationFeature_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = AnimationFeature_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction AnimationFeature_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AnimationFeature_setPrototypeOf(subClass, superClass); }\n\nfunction AnimationFeature_setPrototypeOf(o, p) { AnimationFeature_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AnimationFeature_setPrototypeOf(o, p); }\n\nfunction AnimationFeature_createSuper(Derived) { var hasNativeReflectConstruct = AnimationFeature_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = AnimationFeature_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = AnimationFeature_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return AnimationFeature_possibleConstructorReturn(this, result); }; }\n\nfunction AnimationFeature_possibleConstructorReturn(self, call) { if (call && (AnimationFeature_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AnimationFeature_assertThisInitialized(self); }\n\nfunction AnimationFeature_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction AnimationFeature_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction AnimationFeature_getPrototypeOf(o) { AnimationFeature_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AnimationFeature_getPrototypeOf(o); }\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n\n/**\r\n * Threejs AnimationMixer object\r\n * @external "THREE.AnimationMixer"\r\n * @see https://threejs.org/docs/#api/en/animation/AnimationMixer\r\n */\n\nhost_core.AnimationTypes.single = state_SingleState;\n/**\r\n * @extends core/AnimationFeature\r\n * @alias three.js/AnimationFeature\r\n */\n\nvar AnimationFeature = /*#__PURE__*/function (_CoreAnimationFeature) {\n  AnimationFeature_inherits(AnimationFeature, _CoreAnimationFeature);\n\n  var _super = AnimationFeature_createSuper(AnimationFeature);\n\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {three.js/HostObject} host - Host object that owns the feature.\r\n   */\n  function AnimationFeature(host) {\n    var _this;\n\n    AnimationFeature_classCallCheck(this, AnimationFeature);\n\n    _this = _super.call(this, host);\n    _this._mixer = new THREE.AnimationMixer(host.owner);\n    return _this;\n  }\n\n  AnimationFeature_createClass(AnimationFeature, [{\n    key: "_createSingleState",\n    value: function _createSingleState(options) {\n      // Duplicate the clip if it is already in use by another three action\n      var clip = options.clip;\n\n      if (this._mixer.existingAction(clip)) {\n        clip = clip.clone();\n      }\n\n      var threeAction = this._mixer.clipAction(clip);\n\n      return new state_SingleState(options, threeAction);\n    }\n    /**\r\n     * Gets the THREE.AnimationMixer for the host.\r\n     *\r\n     * @readonly\r\n     * @type {external:"THREE.AnimationMixer"}\r\n     */\n\n  }, {\n    key: "mixer",\n    get: function get() {\n      return this._mixer;\n    }\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "update", this).call(this, deltaTime);\n\n      if (!this._paused) {\n        this._mixer.update(deltaTime / 1000); // THREE.AnimationMixer requires delta time in seconds\n\n      }\n    }\n  }, {\n    key: "discard",\n    value: function discard() {\n      // Release THREE animation resources\n      this._mixer.uncacheRoot(this._host.owner);\n\n      AnimationFeature_get(AnimationFeature_getPrototypeOf(AnimationFeature.prototype), "discard", this).call(this);\n    }\n  }]);\n\n  return AnimationFeature;\n}((host_core_default()));\n\n\n/* harmony default export */ const animpack_AnimationFeature = (AnimationFeature);\n;// CONCATENATED MODULE: ./src/three.js/animpack/index.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * @module three/animpack\r\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * @namespace\r\n */\n\nvar Easing = {\n  /**\r\n   * @see Linear\r\n   */\n  Linear: host_core.Linear,\n\n  /**\r\n   * @see Quadratic\r\n   */\n  Quadratic: host_core.Quadratic,\n\n  /**\r\n   * @see Cubic\r\n   */\n  Cubic: host_core.Cubic,\n\n  /**\r\n   * @see Quartic\r\n   */\n  Quartic: host_core.Quartic,\n\n  /**\r\n   * @see Quintic\r\n   */\n  Quintic: host_core.Quintic,\n\n  /**\r\n   * @see Sinusoidal\r\n   */\n  Sinusoidal: host_core.Sinusoidal,\n\n  /**\r\n   * @see Exponential\r\n   */\n  Exponential: host_core.Exponential,\n\n  /**\r\n   * @see Circular\r\n   */\n  Circular: host_core.Circular,\n\n  /**\r\n   * @see Elastic\r\n   */\n  Elastic: host_core.Elastic,\n\n  /**\r\n   * @see Back\r\n   */\n  Back: host_core.Back,\n\n  /**\r\n   * @see Bounce\r\n   */\n  Bounce: host_core.Bounce\n};\n/* harmony default export */ const animpack = ({\n  /**\r\n   * @see three.js/AnimationFeature\r\n   */\n  AnimationFeature: animpack_AnimationFeature,\n\n  /**\r\n   * @see AnimationLayer\r\n   */\n  AnimationLayer: (host_core_default()),\n\n  /**\r\n   * @see three.js/SingleState\r\n   */\n  SingleState: state_SingleState,\n\n  /**\r\n   * @see TransitionState\r\n   */\n  TransitionState: (host_core_default()),\n\n  /**\r\n   * @see FreeBlendState\r\n   */\n  FreeBlendState: (host_core_default()),\n\n  /**\r\n   * @see QueueState\r\n   */\n  QueueState: (host_core_default()),\n\n  /**\r\n   * @see RandomAnimationState\r\n   */\n  RandomAnimationState: (host_core_default()),\n\n  /**\r\n   * @see Blend1dState\r\n   */\n  Blend1dState: (host_core_default()),\n\n  /**\r\n   * @see Blend2dState\r\n   */\n  Blend2dState: (host_core_default()),\n\n  /**\r\n   * @see AnimationUtils\r\n   */\n  AnimationUtils: (host_core_default()),\n\n  /**\r\n   * @see Easing\r\n   */\n  Easing: Easing,\n\n  /**\r\n   * @see LayerBlendModes\r\n   */\n  LayerBlendModes: host_core.LayerBlendModes,\n\n  /**\r\n   * @see DefaultLayerBlendMode\r\n   */\n  DefaultLayerBlendMode: host_core.DefaultLayerBlendMode,\n\n  /**\r\n   * @see AnimationTypes\r\n   */\n  AnimationTypes: host_core.AnimationTypes\n});\n;// CONCATENATED MODULE: ./src/three.js/index.js\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n/**\r\n * @module three/HOST\r\n */\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const three_js = ({\n  /**\r\n   * @see env\r\n   */\n  env: env,\n\n  /**\r\n   * @see Utils\r\n   */\n  Utils: (host_core_default()),\n\n  /**\r\n   * @see MathUtils\r\n   */\n  MathUtils: (host_core_default()),\n\n  /**\r\n   * @see Deferred\r\n   */\n  Deferred: (host_core_default()),\n\n  /**\r\n   * @see three.js/Messenger\r\n   */\n  Messenger: three_js_Messenger,\n\n  /**\r\n   * @see three.js/HostObject\r\n   */\n  HostObject: three_js_HostObject,\n\n  /**\r\n   * @see @amazon-sumerian-hosts/core/index/LipsyncFeature\r\n   */\n  LipsyncFeature: (host_core_default()),\n\n  /**\r\n   * @see GestureFeature\r\n   */\n  GestureFeature: (host_core_default()),\n\n  /**\r\n   * @see three.js/PointOfInterestFeature\r\n   */\n  PointOfInterestFeature: three_js_PointOfInterestFeature,\n\n  /**\r\n   * @see DefaultVisemeMap\r\n   */\n  DefaultVisemeMap: host_core.DefaultVisemeMap,\n\n  /**\r\n   * @see DefaultGestureWords\r\n   */\n  DefaultGestureWords: host_core.DefaultGestureWords,\n\n  /**\r\n   * @see AxisMap\r\n   */\n  AxisMap: host_core.AxisMap,\n\n  /**\r\n   * @see module:three/awspack\r\n   */\n  aws: awspack,\n\n  /**\r\n   * @see module:three/animpack\r\n   */\n  anim: animpack\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///512\n')}},__webpack_module_cache__={};function __webpack_require__(V){var l=__webpack_module_cache__[V];if(void 0!==l)return l.exports;var F=__webpack_module_cache__[V]={id:V,loaded:!1,exports:{}};return __webpack_modules__[V].call(F.exports,F,F.exports,__webpack_require__),F.loaded=!0,F.exports}__webpack_require__.n=V=>{var l=V&&V.__esModule?()=>V.default:()=>V;return __webpack_require__.d(l,{a:l}),l},__webpack_require__.d=(V,l)=>{for(var F in l)__webpack_require__.o(l,F)&&!__webpack_require__.o(V,F)&&Object.defineProperty(V,F,{enumerable:!0,get:l[F]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(V){if("object"==typeof window)return window}}(),__webpack_require__.o=(V,l)=>Object.prototype.hasOwnProperty.call(V,l),__webpack_require__.nmd=V=>(V.paths=[],V.children||(V.children=[]),V);var __webpack_exports__=__webpack_require__(512);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));